memory > xNode
memory > xTemplateSyntaxError
memory > xAttributeError
memory > xstr
memory > xExtendsNode
memory > xtoken_kwargs
memory > xIndexError
memory > xBLOCK_CONTEXT_KEY
memory > xvar
memory > xhasattr
memory > xnode
memory > xVariable
memory > xargs
memory > xgetattr
memory > xblock
memory > xlist
memory > xBlockNode
memory > xtemplate
memory > xcallable
memory > xtype
memory > xtuple
memory > xmark_safe
memory > xorigin
memory > xBlockContext
memory > xTemplate
memory > xdefaultdict
memory > xposixpath
memory > xname
memory > xn
memory > xLibrary
memory > xIncludeNode
memory > xTextNode
memory > xkwargs
memory > xisinstance
memory > xlen
[] > loader_tags
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xconstruct_relative_path
        memory > xpush
        memory > xfind_template
        memory > xdo_extends
        memory > xBLOCK_CONTEXT_KEY2
        memory > xregister
        memory > xsuper
        memory > xrender
        memory > xdo_include
        memory > x__init__
        memory > xadd_blocks
        memory > xget_parent
        memory > xget_block
        memory > x__repr__
        memory > xpop
        memory > xcontext_key
        memory > xmust_be_first
        memory > xdo_block
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xregister.write (((xLibrary)).apply)
            xBLOCK_CONTEXT_KEY2.write "block_context"
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xblocks)) ((((xdefaultdict)).apply ((xlist)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("<{self.__class__.__qualname__}: blocks={self.blocks!r}>"))
                xadd_blocks.write
                  [xself xblocks]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xblock)))) (((((xblocks).xitems)).apply)))
                        bogusForceDataize.write ((((((unsupported)).apply (((xself).xblocks)) ((xname))).xinsert)).apply (0) ((xblock)))
                xpop.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply ((xIndexError)))
                        (((unsupported)).apply (((((((unsupported)).apply (((xself).xblocks)) ((xname))).xpop)).apply)))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xpush.write
                  [xself xname xblock]
                    seq > @
                      bogusForceDataize.write ((((((unsupported)).apply (((xself).xblocks)) ((xname))).xappend)).apply ((xblock)))
                xget_block.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply ((xIndexError)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xblocks)) ((xname)))) ((1.neg)))))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply ((xNode)))
              seq
                x__init__.write
                  [xself xname xnodelist xparent]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xname)) (((xself).xnodelist)) (((xself).xparent)))) ((((unsupported)).apply ((xname)) ((xnodelist)) ((xparent)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<Block Node: %s. Contents: %r>".mod (((unsupported)).apply (((xself).xname)) (((xself).xnodelist))))))
                xrender.write
                  [xself xcontext]
                    memory > xblock_context
                    memory > xblock
                    memory > xresult
                    memory > xpush
                    seq > @
                      seq
                        xblock_context.write (((((xcontext).xrender_context).xget)).apply ((xBLOCK_CONTEXT_KEY)))
                        (((unsupported)).apply (((((xcontext).xpush)).apply)))
                          (((unsupported)).apply ((xblock_context)) ("None: is there a None literal in the EO language?")).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("block"))) ((xself)))
                              xresult.write (((((xself).xnodelist).xrender)).apply ((xcontext)))
                            seq
                              (((unsupported)).apply ((xpush)) ((xblock)) (((((xblock_context).xpop)).apply (((xself).xname)))))
                              (((unsupported)).apply ((xblock)) ("None: is there a None literal in the EO language?")).if
                                xblock.write (xself)
                              xblock.write (((((xtype)).apply ((xself)))).apply (((xblock).xname)) (((xblock).xnodelist)))
                              (((unsupported)).apply (((xblock).xcontext)) ((xcontext)))
                              (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("block"))) ((xblock)))
                              xresult.write (((((xblock).xnodelist).xrender)).apply ((xcontext)))
                              (((unsupported)).apply ((xpush)) ("None: is there a None literal in the EO language?")).if
                                bogusForceDataize.write ((((xblock_context).xpush)).apply (((xself).xname)) ((xpush)))
                        (((unsupported)).apply ((xresult)))
                xsuper.write
                  [xself]
                    memory > xrender_context
                    seq > @
                      seq
                        ((((xhasattr)).apply ((xself)) ("context")).not).if
                          (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' object has no attribute 'context'. Did you use {{ block.super }} in a base template?".mod (((xself).x__class__).x__name__))))))
                        xrender_context.write (((xself).xcontext).xrender_context)
                        ((((unsupported)).apply ((xBLOCK_CONTEXT_KEY)) ((xrender_context))).and (((unsupported)).apply (((((((unsupported)).apply ((xrender_context)) ((xBLOCK_CONTEXT_KEY))).xget_block)).apply (((xself).xname)))) ("None: is there a None literal in the EO language?"))).if
                          (((unsupported)).apply ((((xmark_safe)).apply (((((xself).xrender)).apply (((xself).xcontext)))))))
                        (((unsupported)).apply (""))
            (((unsupported)).apply ((xNode)))
              seq
                xmust_be_first.write TRUE
                xcontext_key.write "extends_context"
                x__init__.write
                  [xself xnodelist xparent_name xtemplate_dirs]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xnodelist)) ((xnodelist)))
                        (((unsupported)).apply (((xself).xparent_name)) ((xparent_name)))
                        (((unsupported)).apply (((xself).xtemplate_dirs)) ((xtemplate_dirs)))
                        (((unsupported)).apply (((xself).xblocks)) ((((unsupported)).apply (((xn).xname)) ((xn)) ((xn)) (((((xnodelist).xget_nodes_by_type)).apply ((xBlockNode)))))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: extends %s>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((((xself).xparent_name).xtoken))))))
                xfind_template.write
                  [xself xtemplate_name xcontext]
                    memory > xhistory
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xhistory.write (((((xcontext).xrender_context).xsetdefault)).apply (((xself).xcontext_key)) ((((unsupported)).apply (((xself).xorigin)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtemplate)) ((xorigin)))) ((((unsupported)).apply (((((xcontext).xtemplate).xengine).xfind_template)) ((xtemplate_name)) ((xhistory)))))
                        bogusForceDataize.write ((((xhistory).xappend)).apply ((xorigin)))
                        (((unsupported)).apply ((xtemplate)))
                xget_parent.write
                  [xself xcontext]
                    memory > xerror_msg
                    memory > xparent
                    seq > @
                      seq
                        xparent.write (((((xself).xparent_name).xresolve)).apply ((xcontext)))
                        ((xparent).not).if
                          seq
                            xerror_msg.write ("Invalid template name in 'extends' tag: %r.".mod (xparent))
                            ((((xself).xparent_name).xfilters).or (((xisinstance)).apply ((((xself).xparent_name).xvar)) ((xVariable)))).if
                              (((unsupported)).apply ((xerror_msg)) ((" Got this from the '%s' variable.".mod (((xself).xparent_name).xtoken))))
                            (((unsupported)).apply ((((xTemplateSyntaxError)).apply ((xerror_msg)))))
                        (((xisinstance)).apply ((xparent)) ((xTemplate))).if
                          (((unsupported)).apply ((xparent)))
                        (((xisinstance)).apply ((((xgetattr)).apply ((xparent)) ("template") ("None: is there a None literal in the EO language?"))) ((xTemplate))).if
                          (((unsupported)).apply (((xparent).xtemplate)))
                        (((unsupported)).apply (((((xself).xfind_template)).apply ((xparent)) ((xcontext)))))
                xrender.write
                  [xself xcontext]
                    memory > xblock_context
                    memory > xblocks
                    memory > xcompiled_parent
                    seq > @
                      seq
                        xcompiled_parent.write ((((xself).xget_parent)).apply ((xcontext)))
                        (((unsupported)).apply ((xBLOCK_CONTEXT_KEY)) (((xcontext).xrender_context))).if
                          (((unsupported)).apply ((((unsupported)).apply (((xcontext).xrender_context)) ((xBLOCK_CONTEXT_KEY)))) ((((xBlockContext)).apply)))
                        xblock_context.write (((unsupported)).apply (((xcontext).xrender_context)) ((xBLOCK_CONTEXT_KEY)))
                        bogusForceDataize.write ((((xblock_context).xadd_blocks)).apply (((xself).xblocks)))
                        (((unsupported)).apply ((xnode)) (((xcompiled_parent).xnodelist)))
                          ((((xisinstance)).apply ((xnode)) ((xTextNode))).not).if
                            seq
                              ((((xisinstance)).apply ((xnode)) ((xExtendsNode))).not).if
                                seq
                                  xblocks.write (((unsupported)).apply (((xn).xname)) ((xn)) ((xn)) ((((((xcompiled_parent).xnodelist).xget_nodes_by_type)).apply ((xBlockNode)))))
                                  bogusForceDataize.write ((((xblock_context).xadd_blocks)).apply ((xblocks)))
                              (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((xcontext).xrender_context).xpush_state)) ((xcompiled_parent)) (FALSE))))
                          (((unsupported)).apply (((((xcompiled_parent).x_render)).apply ((xcontext)))))
            (((unsupported)).apply ((xNode)))
              seq
                xcontext_key.write "__include_context"
                x__init__.write
                  [xself xtemplate xextra_context xisolated_context]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xtemplate)) ((xtemplate)))
                        (((unsupported)).apply (((xself).xextra_context)) (((xextra_context).or (((unsupported)).apply))))
                        (((unsupported)).apply (((xself).xisolated_context)) ((xisolated_context)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("<{self.__class__.__qualname__}: template={self.template!r}>"))
                xrender.write
                  [xself xcontext]
                    memory > xcache
                    memory > xtemplate_name
                    memory > xtemplate
                    memory > xvalues
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xtemplate.write (((((xself).xtemplate).xresolve)).apply ((xcontext)))
                        ((((xcallable)).apply ((((xgetattr)).apply ((xtemplate)) ("render") ("None: is there a None literal in the EO language?")))).not).if
                          seq
                            xtemplate_name.write ((xtemplate).or (((unsupported)).apply))
                            (((xisinstance)).apply ((xtemplate_name)) ((xstr))).if
                              xtemplate_name.write (((unsupported)).apply ((((xconstruct_relative_path)).apply ((((xself).xorigin).xtemplate_name)) ((xtemplate_name)))))
                              xtemplate_name.write (((xtuple)).apply ((xtemplate_name)))
                            xcache.write ((((((unsupported)).apply ((((xcontext).xrender_context).xdicts)) (0)).xsetdefault)).apply ((xself)) ((((unsupported)).apply)))
                            xtemplate.write ((((xcache).xget)).apply ((xtemplate_name)))
                            (((unsupported)).apply ((xtemplate)) ("None: is there a None literal in the EO language?")).if
                              seq
                                xtemplate.write ((((((xcontext).xtemplate).xengine).xselect_template)).apply ((xtemplate_name)))
                                (((unsupported)).apply ((((unsupported)).apply ((xcache)) ((xtemplate_name)))) ((xtemplate)))
                          (((xhasattr)).apply ((xtemplate)) ("template")).if
                            xtemplate.write ((xtemplate).xtemplate)
                        xvalues.write (((unsupported)).apply ((xname)) (((((xvar).xresolve)).apply ((xcontext)))) ((((unsupported)).apply ((xname)) ((xvar)))) ((((((xself).xextra_context).xitems)).apply)))
                        ((xself).xisolated_context).if
                          (((unsupported)).apply (((((xtemplate).xrender)).apply (((((xcontext).xnew)).apply ((xvalues)))))))
                        (((unsupported)).apply (((((xcontext).xpush)).apply ((((unsupported)).apply ((xvalues)))))))
                          (((unsupported)).apply (((((xtemplate).xrender)).apply ((xcontext)))))
            xdo_block.write
              [xparser xtoken]
                memory > xbits
                memory > xacceptable_endblocks
                memory > xblock_name
                memory > xnodelist
                memory > xendblock
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write (((((xtoken).xcontents).xsplit)).apply)
                    ((((xlen)).apply ((xbits))).neq 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' tag takes only one argument".mod (((unsupported)).apply ((xbits)) (0)))))))
                    xblock_name.write (((unsupported)).apply ((xbits)) (1))
                    (((unsupported)).apply ((xAttributeError)))
                      seq
                        (((unsupported)).apply ((xblock_name)) (((xparser).x__loaded_blocks))).if
                          (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' tag with name '%s' appears more than once".mod (((unsupported)).apply ((((unsupported)).apply ((xbits)) (0))) ((xblock_name))))))))
                        bogusForceDataize.write (((((xparser).x__loaded_blocks).xappend)).apply ((xblock_name)))
                      (((unsupported)).apply (((xparser).x__loaded_blocks)) ((((unsupported)).apply ((xblock_name)))))
                    xnodelist.write ((((xparser).xparse)).apply ((((unsupported)).apply ("endblock"))))
                    xendblock.write ((((xparser).xnext_token)).apply)
                    xacceptable_endblocks.write (((unsupported)).apply ("endblock") (("endblock %s".mod (xblock_name))))
                    (((unsupported)).apply (((xendblock).xcontents)) ((xacceptable_endblocks))).if
                      bogusForceDataize.write ((((xparser).xinvalid_block_tag)).apply ((xendblock)) ("endblock") ((xacceptable_endblocks)))
                    (((unsupported)).apply ((((xBlockNode)).apply ((xblock_name)) ((xnodelist)))))
            xconstruct_relative_path.write
              [xcurrent_template_name xrelative_name]
                memory > xnew_name
                memory > xhas_quotes
                seq > @
                  seq
                    (((unsupported)).apply)
                    xnew_name.write ((((xrelative_name).xstrip)).apply ("'\""))
                    (((((xnew_name).xstartswith)).apply ((((unsupported)).apply ("./") ("../")))).not).if
                      (((unsupported)).apply ((xrelative_name)))
                    xnew_name.write ((((xposixpath).xnormpath)).apply (((((xposixpath).xjoin)).apply (((((xposixpath).xdirname)).apply (((((xcurrent_template_name).xlstrip)).apply ("/"))))) ((xnew_name)))))
                    ((((xnew_name).xstartswith)).apply ("../")).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("The relative path '%s' points outside the file hierarchy that template '%s' is in.".mod (((unsupported)).apply ((xrelative_name)) ((xcurrent_template_name))))))))
                    (((((xcurrent_template_name).xlstrip)).apply ("/")).eq (xnew_name)).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("The relative path '%s' was translated to template name '%s', the same template in which the tag appears.".mod (((unsupported)).apply ((xrelative_name)) ((xcurrent_template_name))))))))
                    xhas_quotes.write (((((xrelative_name).xstartswith)).apply ((((unsupported)).apply ("\"") ("'")))).and ((((unsupported)).apply ((xrelative_name)) (0)).eq (((unsupported)).apply ((xrelative_name)) ((1.neg)))))
                    (((unsupported)).apply (((xhas_quotes).if "\"{new_name}\"" (xnew_name))))
            xdo_extends.write
              [xparser xtoken]
                memory > xbits
                memory > xparent_name
                memory > xnodelist
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xbits))).neq 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' takes one argument".mod (((unsupported)).apply ((xbits)) (0)))))))
                    (((unsupported)).apply ((((unsupported)).apply ((xbits)) (1))) ((((xconstruct_relative_path)).apply ((((xparser).xorigin).xtemplate_name)) ((((unsupported)).apply ((xbits)) (1))))))
                    xparent_name.write ((((xparser).xcompile_filter)).apply ((((unsupported)).apply ((xbits)) (1))))
                    xnodelist.write ((((xparser).xparse)).apply)
                    ((((xnodelist).xget_nodes_by_type)).apply ((xExtendsNode))).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("'%s' cannot appear more than once in the same template".mod (((unsupported)).apply ((xbits)) (0)))))))
                    (((unsupported)).apply ((((xExtendsNode)).apply ((xnodelist)) ((xparent_name)))))
            xdo_include.write
              [xparser xtoken]
                memory > xbits
                memory > xisolated_context
                memory > xoptions
                memory > xoption
                memory > xnamemap
                memory > xremaining_bits
                memory > xvalue
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbits.write ((((xtoken).xsplit_contents)).apply)
                    ((((xlen)).apply ((xbits))).less 2).if
                      (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("%r tag takes at least one argument: the name of the template to be included.".mod (((unsupported)).apply ((xbits)) (0)))))))
                    xoptions.write (((unsupported)).apply)
                    xremaining_bits.write (((unsupported)).apply ((xbits)) ((((unsupported)).apply (2))))
                    while.
                      (xremaining_bits)
                      [unused]
                        seq > @
                          seq
                            xoption.write ((((xremaining_bits).xpop)).apply (0))
                            (((unsupported)).apply ((xoption)) ((xoptions))).if
                              (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("The %r option was specified more than once.".mod (xoption))))))
                            ((xoption).eq "with").if
                              seq
                                xvalue.write (((unsupported)).apply ((xtoken_kwargs)) ((xremaining_bits)) ((xparser)) (FALSE))
                                ((xvalue).not).if
                                  (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("\"with\" in %r tag needs at least one keyword argument.".mod (((unsupported)).apply ((xbits)) (0)))))))
                              ((xoption).eq "only").if
                                xvalue.write TRUE
                                (((unsupported)).apply ((((xTemplateSyntaxError)).apply (("Unknown argument for %r tag: %r.".mod (((unsupported)).apply ((((unsupported)).apply ((xbits)) (0))) ((xoption))))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xoption)))) ((xvalue)))
                    xisolated_context.write ((((xoptions).xget)).apply ("only") (FALSE))
                    xnamemap.write ((((xoptions).xget)).apply ("with") ((((unsupported)).apply)))
                    (((unsupported)).apply ((((unsupported)).apply ((xbits)) (1))) ((((xconstruct_relative_path)).apply ((((xparser).xorigin).xtemplate_name)) ((((unsupported)).apply ((xbits)) (1))))))
                    (((unsupported)).apply ((((unsupported)).apply ((xIncludeNode)) (((((xparser).xcompile_filter)).apply ((((unsupported)).apply ((xbits)) (1))))) ((xnamemap)) ((xisolated_context)))))