memory > xdeepcopy
memory > xE001
memory > xcheck_setting_app_dirs_loaders
memory > xError
memory > xsuper
memory > xSimpleTestCase
memory > xcopy
memory > xfalse
memory > xE002
memory > xcheck_for_template_tags_with_the_same_name
memory > xcheck_string_if_invalid_is_string
memory > xE003
memory > xtype
[] > test_templates
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_app_dirs_and_loaders
        memory > xget_settings
        memory > xsetUpClass
        memory > xtest_template_tags_with_same_name
        memory > xtest_string_if_invalid_first_is_string
        memory > xTEMPLATES_STRING_IF_INVALID
        memory > xTEMPLATES_APP_DIRS_AND_LOADERS
        memory > xtest_string_if_invalid_not_string
        memory > xtest_template_tags_with_same_library_name_and_module_name
        memory > xtest_template_tags_with_different_name
        memory > xtest_app_dirs_removed
        memory > xtest_loaders_removed
        memory > xtest_string_if_invalid_not_specified
        memory > xtest_template_tags_with_same_library_name
        memory > xtest_template_tags_with_different_library_name
        memory > xtest_string_if_invalid_both_are_strings
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xTEMPLATES_APP_DIRS_AND_LOADERS.write (((unsupported)).apply ((((unsupported)).apply ("BACKEND") ("django.template.backends.django.DjangoTemplates") ("APP_DIRS") (TRUE) ("OPTIONS") ((((unsupported)).apply ("loaders") ((((unsupported)).apply ("django.template.loaders.filesystem.Loader"))))))))
                xtest_app_dirs_and_loaders.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_setting_app_dirs_loaders)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xE001)))))
                xtest_app_dirs_removed.write
                  [xself]
                    memory > xTEMPLATES
                    seq > @
                      seq
                        xTEMPLATES.write (((xdeepcopy)).apply (((xself).xTEMPLATES_APP_DIRS_AND_LOADERS)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTEMPLATES)) (0))) ("APP_DIRS"))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((xTEMPLATES)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_setting_app_dirs_loaders)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_loaders_removed.write
                  [xself]
                    memory > xTEMPLATES
                    seq > @
                      seq
                        xTEMPLATES.write (((xdeepcopy)).apply (((xself).xTEMPLATES_APP_DIRS_AND_LOADERS)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTEMPLATES)) (0))) ("OPTIONS"))) ("loaders"))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((xTEMPLATES)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_setting_app_dirs_loaders)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xTEMPLATES_STRING_IF_INVALID.write (((unsupported)).apply ((((unsupported)).apply ("BACKEND") ("django.template.backends.django.DjangoTemplates") ("OPTIONS") ((((unsupported)).apply ("string_if_invalid") ((xfalse)))))) ((((unsupported)).apply ("BACKEND") ("django.template.backends.django.DjangoTemplates") ("OPTIONS") ((((unsupported)).apply ("string_if_invalid") (42))))))
                xsetUpClass.write
                  [xcls]
                    memory > xstring_if_invalid2
                    memory > xstring_if_invalid1
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUpClass)).apply)
                        (((unsupported)).apply (((xcls).xerror1)) ((((xcopy)).apply ((xE002)))))
                        (((unsupported)).apply (((xcls).xerror2)) ((((xcopy)).apply ((xE002)))))
                        xstring_if_invalid1.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xcls).xTEMPLATES_STRING_IF_INVALID)) (0))) ("OPTIONS"))) ("string_if_invalid"))
                        xstring_if_invalid2.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xcls).xTEMPLATES_STRING_IF_INVALID)) (1))) ("OPTIONS"))) ("string_if_invalid"))
                        (((unsupported)).apply ((((xcls).xerror1).xmsg)) (((((((xcls).xerror1).xmsg).xformat)).apply ((xstring_if_invalid1)) (((((xtype)).apply ((xstring_if_invalid1))).x__name__)))))
                        (((unsupported)).apply ((((xcls).xerror2).xmsg)) (((((((xcls).xerror2).xmsg).xformat)).apply ((xstring_if_invalid2)) (((((xtype)).apply ((xstring_if_invalid2))).x__name__)))))
                xtest_string_if_invalid_not_string.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_string_if_invalid_is_string)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xself).xerror1)) (((xself).xerror2)))))
                xtest_string_if_invalid_first_is_string.write
                  [xself]
                    memory > xTEMPLATES
                    seq > @
                      seq
                        xTEMPLATES.write (((xdeepcopy)).apply (((xself).xTEMPLATES_STRING_IF_INVALID)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTEMPLATES)) (0))) ("OPTIONS"))) ("string_if_invalid"))) ("test"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((xTEMPLATES)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_string_if_invalid_is_string)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xself).xerror2)))))
                xtest_string_if_invalid_both_are_strings.write
                  [xself]
                    memory > xTEMPLATES
                    seq > @
                      seq
                        xTEMPLATES.write (((xdeepcopy)).apply (((xself).xTEMPLATES_STRING_IF_INVALID)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTEMPLATES)) (0))) ("OPTIONS"))) ("string_if_invalid"))) ("test"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTEMPLATES)) (1))) ("OPTIONS"))) ("string_if_invalid"))) ("test"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((xTEMPLATES)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_string_if_invalid_is_string)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_string_if_invalid_not_specified.write
                  [xself]
                    memory > xTEMPLATES
                    seq > @
                      seq
                        xTEMPLATES.write (((xdeepcopy)).apply (((xself).xTEMPLATES_STRING_IF_INVALID)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTEMPLATES)) (1))) ("OPTIONS"))) ("string_if_invalid"))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((xTEMPLATES)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_string_if_invalid_is_string)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xself).xerror1)))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUpClass)).apply)
                        (((unsupported)).apply (((xcls).xerror_same_tags)) ((((unsupported)).apply ((xError)) ((((((xE003).xmsg).xformat)).apply ("'same_tags'") ("'check_framework.template_test_apps.same_tags_app_1.templatetags.same_tags', 'check_framework.template_test_apps.same_tags_app_2.templatetags.same_tags'"))) (((xE003).xid)))))
                xget_settings.write
                  [xmodule_name xmodule_path]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ("BACKEND") ("django.template.backends.django.DjangoTemplates") ("OPTIONS") ((((unsupported)).apply ("libraries") ((((unsupported)).apply ((xmodule_name)) ("check_framework.template_test_apps.{module_path}"))))))))
                xtest_template_tags_with_same_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_for_template_tags_with_the_same_name)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xself).xerror_same_tags)))))
                xtest_template_tags_with_same_library_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply (((((xself).xget_settings)).apply ("same_tags") ("same_tags_app_1.templatetags.same_tags"))) (((((xself).xget_settings)).apply ("same_tags") ("same_tags_app_2.templatetags.same_tags"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_for_template_tags_with_the_same_name)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xself).xerror_same_tags)))))
                xtest_template_tags_with_same_library_name_and_module_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply (((((xself).xget_settings)).apply ("same_tags") ("different_tags_app.templatetags.different_tags"))))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_for_template_tags_with_the_same_name)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ((((((xE003).xmsg).xformat)).apply ("'same_tags'") ("'check_framework.template_test_apps.different_tags_app.templatetags.different_tags', 'check_framework.template_test_apps.same_tags_app_1.templatetags.same_tags'"))) (((xE003).xid)))))))
                xtest_template_tags_with_different_library_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply (((((xself).xget_settings)).apply ("same_tags") ("same_tags_app_1.templatetags.same_tags"))) (((((xself).xget_settings)).apply ("not_same_tags") ("same_tags_app_2.templatetags.same_tags"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_for_template_tags_with_the_same_name)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_template_tags_with_different_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcheck_for_template_tags_with_the_same_name)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))