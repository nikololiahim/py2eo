memory > xcm
memory > xlist
memory > xValueError
memory > xstr
memory > xTokenizeTest
memory > xrange
memory > xNEWLINE
memory > xprint
memory > xobject
memory > xfalse
memory > xtoken
memory > xgenerate_tokens
memory > xrep
memory > xBytesIO
memory > xSTRING
memory > xtoknum
memory > xUntokenizer
memory > xTestCase
memory > xlit
memory > xeval
memory > x_
memory > xStopIteration
memory > xfound
memory > xstart
memory > xrandom
memory > xglob
memory > xopen
memory > xtoktype
memory > xf
memory > xOP
memory > xBunk
memory > xtok
memory > xrepr
memory > xtok_name
memory > xINVALID_UNDERSCORE_LITERALS
memory > xTestRoundtrip
memory > xend
memory > xi
memory > xuntokenize
memory > xtokenize
memory > xsupport
memory > xNAME
memory > xtokval
memory > xmock
memory > xos
memory > xencoding
memory > xSyntaxError
memory > xVALID_UNDERSCORE_LITERALS
memory > xNUMBER
memory > xiter
memory > xENCODING
memory > x__file__
memory > xStringIO
memory > xunittest
memory > xDecimal
memory > xconsumed_lines
memory > xdetect_encoding
memory > xisinstance
memory > xline
memory > xlen
memory > x_tokenize
memory > xtestfile
memory > xfp
memory > xoptypes
memory > x__name__
memory > xIndentationError
memory > xENDMARKER
[] > test_tokenize
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_bom_no_cookie
        memory > xtest_method
        memory > xtest_shift
        memory > xtest_cookie_second_line_empty_first_line
        memory > xtest_oneline_defs
        memory > xtest_basic
        memory > xtest_utf8_normalization
        memory > xtest_int
        memory > xtest_latin1_normalization
        memory > xtest_cookie_second_line_commented_first_line
        memory > xroundtrip
        memory > xdecistmt
        memory > xtokenize_open
        memory > xtest_float
        memory > xtest_no_bom_no_encoding_cookie
        memory > xtest__tokenize_does_not_decode_with_encoding_none
        memory > xtest_syntaxerror_latin1
        memory > xtest_comparison
        memory > xtest_decistmt
        memory > xtest_cookie_second_line_no_bom
        memory > xtest_bad_input_order
        memory > xtest_backslash_continuation
        memory > xtest_cookie_first_line_no_bom
        memory > xtest_bad_coding_cookie
        memory > xtest_cookie_second_line_noncommented_first_line
        memory > xtest_roundtrip
        memory > xtest_underscore_literals
        memory > xtest_async
        memory > xtest_matched_bom_and_cookie_first_line
        memory > xtest_mismatched_bom_and_cookie_first_line_raises_syntaxerror
        memory > xtest_multiplicative
        memory > xtest_filename_in_exception
        memory > xcheck_tokenize
        memory > xtest_string_concatenation
        memory > xtest_unicode
        memory > xtest_false_encoding
        memory > xtest_open
        memory > xget_readline
        memory > x_testFile
        memory > xtest_non_ascii_identifiers
        memory > xtest_matched_bom_and_cookie_second_line
        memory > xtest__tokenize_decodes_with_specified_encoding
        memory > xtest_random_files
        memory > xstringify_tokens_from_source
        memory > xtest_latin1_coding_cookie_and_utf8_bom
        memory > xtest_mismatched_bom_and_cookie_second_line_raises_syntaxerror
        memory > xtest_implicit_newline
        memory > xtest_continuation
        memory > xtest_tokenize
        memory > xassertExactTypeEqual
        memory > xtest_function
        memory > xtest_selector
        memory > xtest_tabs
        memory > xtest_iter_compat
        memory > xtest_string
        memory > xtest_indentation_semantics_retained
        memory > xtest_long
        memory > xtest_pathological_trailing_whitespace
        memory > xtest_additive
        memory > xtest_utf8_coding_cookie_and_no_utf8_bom
        memory > xtest_exact_type
        memory > xtest_open_error
        memory > xtest_no_coding_cookie_and_utf8_bom
        memory > xtest_unary
        memory > xtest_short_files
        memory > xcheck_roundtrip
        memory > xtest_utf8_coding_cookie_and_utf8_bom
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xstringify_tokens_from_source.write
              [xtoken_generator xsource_string]
                memory > xtype
                memory > xnum_lines
                memory > xresult
                memory > xmissing_trailing_nl
                seq > @
                  seq
                    xresult.write (((unsupported)).apply)
                    xnum_lines.write (((xlen)).apply (((((xsource_string).xsplitlines)).apply)))
                    xmissing_trailing_nl.write (((unsupported)).apply ((((unsupported)).apply ((xsource_string)) ((1.neg)))) ("rn"))
                    (((unsupported)).apply ((((unsupported)).apply ((xtype)) ((xtoken)) ((xstart)) ((xend)) ((xline)))) ((xtoken_generator)))
                      seq
                        ((xtype).eq (xENDMARKER)).if
                          (((unsupported)).apply)
                        (((xmissing_trailing_nl).and ((xtype).eq (xNEWLINE))).and ((((unsupported)).apply ((xend)) (0)).eq (xnum_lines))).if
                          (((unsupported)).apply)
                        xtype.write (((unsupported)).apply ((xtok_name)) ((xtype)))
                        bogusForceDataize.write ((((xresult).xappend)).apply ("    {type:10} {token!r:13} {start} {end}"))
                    (((unsupported)).apply ((xresult)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xcheck_tokenize.write
                  [xself xs xexpected]
                    memory > xresult
                    memory > xf
                    seq > @
                      seq
                        xf.write (((xBytesIO)).apply (((((xs).xencode)).apply ("utf-8"))))
                        xresult.write (((xstringify_tokens_from_source)).apply ((((xtokenize)).apply (((xf).xreadline)))) ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) (((((unsupported)).apply ("    ENCODING   'utf-8'       (0, 0) (0, 0)")).add (((((((xexpected).xrstrip)).apply).xsplitlines)).apply))))
                xtest_implicit_newline.write
                  [xself]
                    memory > xf
                    memory > xtokens
                    seq > @
                      seq
                        xf.write (((xBytesIO)).apply (((("x".xencode)).apply ("utf-8"))))
                        xtokens.write (((xlist)).apply ((((xtokenize)).apply (((xf).xreadline)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xtokens)) ((2.neg))).xtype)) ((xNEWLINE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xtokens)) ((1.neg))).xtype)) ((xENDMARKER)))
                xtest_basic.write
                  [xself]
                    memory > xreadline
                    memory > xindent_error_file
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("1 + 1") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("if false:n    # NLn    n    True = false # NEWLINEn") ((((unsupported)).apply)))
                        xindent_error_file.write (((unsupported)).apply)
                        xreadline.write ((((xBytesIO)).apply ((xindent_error_file))).xreadline)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xIndentationError)) ("unindent does not match any outer indentation level"))))
                          (((unsupported)).apply ((xtok)) ((((xtokenize)).apply ((xreadline)))))
                xtest_int.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("0xff <= 255") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("0b10 <= 255") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("0o123 <= 0O123") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("1234567 > ~0x15") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("2134568 != 1231515") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("(-124561-1) & 200000000") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("0xdeadbeef != -1") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("0xdeadc0de & 12345") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("0xFF & 0x15 | 1234") ((((unsupported)).apply)))
                xtest_long.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 0") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 0xfffffffffff") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 123141242151251616110") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = -15921590215012591") ((((unsupported)).apply)))
                xtest_float.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 3.14159") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 314159.") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = .314159") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 3e14159") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 3E123") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x+y = 3e-1230") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 3.14e159") ((((unsupported)).apply)))
                xtest_underscore_literals.write
                  [xself]
                    memory > xnumber_token
                    seq > @
                      seq
                        xnumber_token.write
                          [xs]
                            memory > xf
                            seq > @
                              seq
                                xf.write (((xBytesIO)).apply (((((xs).xencode)).apply ("utf-8"))))
                                (((unsupported)).apply ((((unsupported)).apply ((xtoktype)) ((xtoken)) ((xstart)) ((xend)) ((xline)))) ((((xtokenize)).apply (((xf).xreadline)))))
                                  ((xtoktype).eq (xNUMBER)).if
                                    (((unsupported)).apply ((xtoken)))
                                (((unsupported)).apply ("invalid token"))
                        (((unsupported)).apply ((xlit)) ((xVALID_UNDERSCORE_LITERALS)))
                          seq
                            (((unsupported)).apply ("(") ((xlit))).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnumber_token)).apply ((xlit)))) ((xlit)))
                        (((unsupported)).apply ((xlit)) ((xINVALID_UNDERSCORE_LITERALS)))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xnumber_token)).apply ((xlit)))) ((xlit)))
                xtest_string.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = ''; y = \"\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = '\"'; y = \"'\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = \"doesn't \"shrink\", does it\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 'abc' + 'ABC'") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("y = \"ABC\" + \"ABC\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = r'abc' + r'ABC' + R'ABC' + R'ABC'") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("y = r\"abc\" + r\"ABC\" + R\"ABC\" + R\"ABC\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("u'abc' + U'abc'") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("u\"abc\" + U\"abc\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("b'abc' + B'abc'") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("b\"abc\" + B\"abc\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("br'abc' + bR'abc' + Br'abc' + BR'abc'") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("br\"abc\" + bR\"abc\" + Br\"abc\" + BR\"abc\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("rb'abc' + rB'abc' + Rb'abc' + RB'abc'") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("rb\"abc\" + rB\"abc\" + Rb\"abc\" + RB\"abc\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("f\"abc\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("fR\"a{b}c\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("f\"\"\"abc\"\"\"") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_function.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("def d22(a, b, c=2, d=2, *k): pass") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("def d01v_(a=1, *k, **w): pass") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("def d23(a: str, b: int=3) -> int: pass") ((((unsupported)).apply)))
                xtest_comparison.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("if 1 < 1 > 1 == 1 >= 5 <= 0x15 <= 0x12 != 1 and 5 in 1 not in 1 is 1 or 5 is not 1: pass") ((((unsupported)).apply)))
                xtest_shift.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 1 << 1 >> 5") ((((unsupported)).apply)))
                xtest_additive.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 1 - y + 15 - 1 + 0x124 + z + a[5]") ((((unsupported)).apply)))
                xtest_multiplicative.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("x = 1//1*1/5*12%0x12@42") ((((unsupported)).apply)))
                xtest_unary.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("~1 ^ 1 & 1 |1 ^ -1") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("-1*1/1+1*1//1 - ---1**1") ((((unsupported)).apply)))
                xtest_selector.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("import sys, timenx = sys.modules['time'].time()") ((((unsupported)).apply)))
                xtest_method.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("@staticmethodndef foo(x,y): pass") ((((unsupported)).apply)))
                xtest_tabs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("def f():ntif xn        tpass") ((((unsupported)).apply)))
                xtest_non_ascii_identifiers.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("Örter = 'places'ngrün = 'green'") ((((unsupported)).apply)))
                xtest_unicode.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("Örter = u'places'ngrün = U'green'") ((((unsupported)).apply)))
                xtest_async.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("async = 1") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("a = (async = 1)") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("async()") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("class async(Bar):pass") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("class async:pass") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("await = 1") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("foo.async") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("async for a in b: pass") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("async with a as b: pass") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("async.foo") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("async") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("asyncn#commentnawait") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("asyncn...nawait") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("asyncnawait") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("foo.async + 1") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("async def foo(): pass") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ("async def foo(async): await") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_tokenize)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xTokenizeTest)))
              xcheck_tokenize.write
                [xself xs xexpected]
                  memory > xresult
                  memory > xf
                  seq > @
                    seq
                      xf.write (((xStringIO)).apply ((xs)))
                      xresult.write (((xstringify_tokens_from_source)).apply ((((xgenerate_tokens)).apply (((xf).xreadline)))) ((xs)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((((((xexpected).xrstrip)).apply).xsplitlines)).apply)))
            xdecistmt.write
              [xs]
                memory > xresult
                memory > xg
                seq > @
                  seq
                    xresult.write (((unsupported)).apply)
                    xg.write (((xtokenize)).apply (((((xBytesIO)).apply (((((xs).xencode)).apply ("utf-8")))).xreadline)))
                    (((unsupported)).apply ((((unsupported)).apply ((xtoknum)) ((xtokval)) ((x_)) ((x_)) ((x_)))) ((xg)))
                      (((xtoknum).eq (xNUMBER)).and (((unsupported)).apply (".") ((xtokval)))).if
                        bogusForceDataize.write ((((xresult).xextend)).apply ((((unsupported)).apply ((((unsupported)).apply ((xNAME)) ("Decimal"))) ((((unsupported)).apply ((xOP)) ("("))) ((((unsupported)).apply ((xSTRING)) ((((xrepr)).apply ((xtokval)))))) ((((unsupported)).apply ((xOP)) (")"))))))
                        bogusForceDataize.write ((((xresult).xappend)).apply ((((unsupported)).apply ((xtoknum)) ((xtokval)))))
                    (((unsupported)).apply (((((((xuntokenize)).apply ((xresult))).xdecode)).apply ("utf-8"))))
            (((unsupported)).apply ((xTestCase)))
              xtest_decistmt.write
                [xself]
                  memory > xs
                  seq > @
                    seq
                      (((unsupported)).apply)
                      xs.write "+21.3e-5*-.1234/81.7"
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdecistmt)).apply ((xs)))) ("+Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7')"))
                      bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((((xeval)).apply ((xs)))))) ("-3.2171603427[0-9]*e-0+7"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xeval)).apply ((((xdecistmt)).apply ((xs)))))) ((((xDecimal)).apply ("-3.217160342717258261933904529E-7"))))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                x_testFile.write
                  [xself xfilename]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ((xfilename)))
                        bogusForceDataize.write ((((xTestRoundtrip).xcheck_roundtrip)).apply ((xself)) ((((xopen)).apply ((xpath)) ("rb"))))
                xtest_utf8_coding_cookie_and_no_utf8_bom.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write "tokenize_tests-utf8-coding-cookie-and-no-utf8-bom-sig.txt"
                        bogusForceDataize.write ((((xself).x_testFile)).apply ((xf)))
                xtest_latin1_coding_cookie_and_utf8_bom.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xf.write "tokenize_tests-latin1-coding-cookie-and-utf8-bom-sig.txt"
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) (((xself).x_testFile)) ((xf)))
                xtest_no_coding_cookie_and_utf8_bom.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write "tokenize_tests-no-coding-cookie-and-utf8-bom-sig-only.txt"
                        bogusForceDataize.write ((((xself).x_testFile)).apply ((xf)))
                xtest_utf8_coding_cookie_and_utf8_bom.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write "tokenize_tests-utf8-coding-cookie-and-utf8-bom-sig.txt"
                        bogusForceDataize.write ((((xself).x_testFile)).apply ((xf)))
                xtest_bad_coding_cookie.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) (((xself).x_testFile)) ("bad_coding.py"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) (((xself).x_testFile)) ("bad_coding2.py"))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest__tokenize_decodes_with_specified_encoding.write
                  [xself]
                    memory > xexpected_tokens
                    memory > xliteral
                    memory > xtokens
                    memory > xfirst
                    memory > xreadline
                    memory > xline
                    seq > @
                      seq
                        xliteral.write "\"ЉЊЈЁЂ\""
                        xline.write ((((xliteral).xencode)).apply ("utf-8"))
                        xfirst.write (xfalse)
                        xreadline.write
                          []
                            memory > xfirst
                            seq > @
                              seq
                                (((unsupported)).apply)
                                ((xfirst).not).if
                                  seq
                                    xfirst.write TRUE
                                    (((unsupported)).apply ((xline)))
                                  (((unsupported)).apply (""))
                        xtokens.write (((unsupported)).apply ((((xlist)).apply ((((unsupported)).apply ((x_tokenize)) ((xreadline)) ("utf-8"))))) ((((unsupported)).apply (1) ((2.neg)))))
                        xexpected_tokens.write (((unsupported)).apply ((((unsupported)).apply (3) ("\"ЉЊЈЁЂ\"") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (1) (7))) ("\"ЉЊЈЁЂ\""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtokens)) ((xexpected_tokens)) ("bytes not decoded with encoding"))
                xtest__tokenize_does_not_decode_with_encoding_none.write
                  [xself]
                    memory > xexpected_tokens
                    memory > xliteral
                    memory > xtokens
                    memory > xfirst
                    memory > xreadline
                    seq > @
                      seq
                        xliteral.write "\"ЉЊЈЁЂ\""
                        xfirst.write (xfalse)
                        xreadline.write
                          []
                            memory > xfirst
                            seq > @
                              seq
                                (((unsupported)).apply)
                                ((xfirst).not).if
                                  seq
                                    xfirst.write TRUE
                                    (((unsupported)).apply ((xliteral)))
                                  (((unsupported)).apply (""))
                        xtokens.write (((unsupported)).apply ((((xlist)).apply ((((unsupported)).apply ((x_tokenize)) ((xreadline)) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((2.neg)))))
                        xexpected_tokens.write (((unsupported)).apply ((((unsupported)).apply (3) ("\"ЉЊЈЁЂ\"") ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (1) (7))) ("\"ЉЊЈЁЂ\""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtokens)) ((xexpected_tokens)) ("string not tokenized when encoding is None"))
            (((unsupported)).apply ((xTestCase)))
              seq
                xget_readline.write
                  [xself xlines]
                    memory > xreadline
                    memory > xindex
                    seq > @
                      seq
                        xindex.write 0
                        xreadline.write
                          []
                            memory > xline
                            seq > @
                              seq
                                (((unsupported)).apply)
                                ((xindex).eq (((xlen)).apply ((xlines)))).if
                                  (((unsupported)).apply ((xStopIteration)))
                                xline.write (((unsupported)).apply ((xlines)) ((xindex)))
                                (((unsupported)).apply ((xindex)) (1))
                                (((unsupported)).apply ((xline)))
                        (((unsupported)).apply ((xreadline)))
                xtest_no_bom_no_encoding_cookie.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("# somethingn") ("print(something)n") ("do_something(else)n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((xlines)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((xlist)).apply ((((unsupported)).apply ((xlines)) ((((unsupported)).apply (2))))))))
                xtest_bom_no_cookie.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("xefxbbxbf# somethingn") ("print(something)n") ("do_something(else)n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((xlines)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8-sig"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((unsupported)).apply ("# somethingn") ("print(something)n"))))
                xtest_cookie_first_line_no_bom.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("# -*- coding: latin-1 -*-n") ("print(something)n") ("do_something(else)n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((xlines)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("iso-8859-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((unsupported)).apply ("# -*- coding: latin-1 -*-n"))))
                xtest_matched_bom_and_cookie_first_line.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("xefxbbxbf# coding=utf-8n") ("print(something)n") ("do_something(else)n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((xlines)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8-sig"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((unsupported)).apply ("# coding=utf-8n"))))
                xtest_mismatched_bom_and_cookie_first_line_raises_syntaxerror.write
                  [xself]
                    memory > xreadline
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("xefxbbxbf# vim: set fileencoding=ascii :n") ("print(something)n") ("do_something(else)n"))
                        xreadline.write ((((xself).xget_readline)).apply ((xlines)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xdetect_encoding)) ((xreadline)))
                xtest_cookie_second_line_no_bom.write
                  [xself]
                    memory > xexpected
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("#! somethingn") ("# vim: set fileencoding=ascii :n") ("print(something)n") ("do_something(else)n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((xlines)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("ascii"))
                        xexpected.write (((unsupported)).apply ("#! somethingn") ("# vim: set fileencoding=ascii :n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((xexpected)))
                xtest_matched_bom_and_cookie_second_line.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("xefxbbxbf#! somethingn") ("f# coding=utf-8n") ("print(something)n") ("do_something(else)n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((xlines)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8-sig"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((unsupported)).apply ("#! somethingn") ("f# coding=utf-8n"))))
                xtest_mismatched_bom_and_cookie_second_line_raises_syntaxerror.write
                  [xself]
                    memory > xreadline
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("xefxbbxbf#! somethingn") ("# vim: set fileencoding=ascii :n") ("print(something)n") ("do_something(else)n"))
                        xreadline.write ((((xself).xget_readline)).apply ((xlines)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xdetect_encoding)) ((xreadline)))
                xtest_cookie_second_line_noncommented_first_line.write
                  [xself]
                    memory > xexpected
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("print('xc2xa3')n") ("# vim: set fileencoding=iso8859-15 :n") ("print('xe2x82xac')n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((xlines)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8"))
                        xexpected.write (((unsupported)).apply ("print('xc2xa3')n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((xexpected)))
                xtest_cookie_second_line_commented_first_line.write
                  [xself]
                    memory > xexpected
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("#print('xc2xa3')n") ("# vim: set fileencoding=iso8859-15 :n") ("print('xe2x82xac')n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((xlines)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("iso8859-15"))
                        xexpected.write (((unsupported)).apply ("#print('xc2xa3')n") ("# vim: set fileencoding=iso8859-15 :n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((xexpected)))
                xtest_cookie_second_line_empty_first_line.write
                  [xself]
                    memory > xexpected
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("n") ("# vim: set fileencoding=iso8859-15 :n") ("print('xe2x82xac')n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((xlines)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("iso8859-15"))
                        xexpected.write (((unsupported)).apply ("n") ("# vim: set fileencoding=iso8859-15 :n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((xexpected)))
                xtest_latin1_normalization.write
                  [xself]
                    memory > xencodings
                    memory > xrl
                    memory > xlines
                    memory > xenc
                    seq > @
                      seq
                        xencodings.write (((unsupported)).apply ("latin-1") ("iso-8859-1") ("iso-latin-1") ("latin-1-unix") ("iso-8859-1-unix") ("iso-latin-1-mac"))
                        (((unsupported)).apply ((xencoding)) ((xencodings)))
                          (((unsupported)).apply ((xrep)) ((((unsupported)).apply ("-") ("_"))))
                            seq
                              xenc.write ((((xencoding).xreplace)).apply ("-") ((xrep)))
                              xlines.write (((unsupported)).apply ("#!/usr/bin/pythonn") ((("# coding: ".add ((((xenc).xencode)).apply ("ascii"))).add "n")) ("print(things)n") ("do_something += 4n"))
                              xrl.write ((((xself).xget_readline)).apply ((xlines)))
                              (((unsupported)).apply ((((unsupported)).apply ((xfound)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply ((xrl)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfound)) ("iso-8859-1"))
                xtest_syntaxerror_latin1.write
                  [xself]
                    memory > xreadline
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("print(\"xdf\")"))
                        xreadline.write ((((xself).xget_readline)).apply ((xlines)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xdetect_encoding)) ((xreadline)))
                xtest_utf8_normalization.write
                  [xself]
                    memory > xencodings
                    memory > xrl
                    memory > xlines
                    memory > xenc
                    seq > @
                      seq
                        xencodings.write (((unsupported)).apply ("utf-8") ("utf-8-mac") ("utf-8-unix"))
                        (((unsupported)).apply ((xencoding)) ((xencodings)))
                          (((unsupported)).apply ((xrep)) ((((unsupported)).apply ("-") ("_"))))
                            seq
                              xenc.write ((((xencoding).xreplace)).apply ("-") ((xrep)))
                              xlines.write (((unsupported)).apply ("#!/usr/bin/pythonn") ((("# coding: ".add ((((xenc).xencode)).apply ("ascii"))).add "n")) ("1 + 3n"))
                              xrl.write ((((xself).xget_readline)).apply ((xlines)))
                              (((unsupported)).apply ((((unsupported)).apply ((xfound)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply ((xrl)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfound)) ("utf-8"))
                xtest_short_files.write
                  [xself]
                    memory > xreadline
                    seq > @
                      seq
                        xreadline.write ((((xself).xget_readline)).apply ((((unsupported)).apply ("print(something)n"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply ((xreadline)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((unsupported)).apply ("print(something)n"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply (((((xself).xget_readline)).apply ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((unsupported)).apply)))
                        xreadline.write ((((xself).xget_readline)).apply ((((unsupported)).apply ("xefxbbxbfprint(something)n"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply ((xreadline)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8-sig"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((unsupported)).apply ("print(something)n"))))
                        xreadline.write ((((xself).xget_readline)).apply ((((unsupported)).apply ("xefxbbxbf"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply ((xreadline)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8-sig"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((unsupported)).apply)))
                        xreadline.write ((((xself).xget_readline)).apply ((((unsupported)).apply ("# coding: badn"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xdetect_encoding)) ((xreadline)))
                xtest_false_encoding.write
                  [xself]
                    memory > xreadline
                    seq > @
                      seq
                        xreadline.write ((((xself).xget_readline)).apply ((((unsupported)).apply ("print(\"#coding=fake\")"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xconsumed_lines)))) ((((xdetect_encoding)).apply ((xreadline)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconsumed_lines)) ((((unsupported)).apply ("print(\"#coding=fake\")"))))
                xtest_open.write
                  [xself]
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write (((xsupport).xTESTFN).add ".py")
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfilename)))
                        (((unsupported)).apply ((xencoding)) ((((unsupported)).apply ("iso-8859-15") ("utf-8"))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xfilename)) ("w") ((xencoding)))) ((xfp)))
                              seq
                                (((unsupported)).apply ((xprint)) (("# coding: %s".mod (xencoding))) ((xfp)))
                                (((unsupported)).apply ((xprint)) ("print('euro:u20ac')") ((xfp)))
                            (((unsupported)).apply ((((xtokenize_open)).apply ((xfilename)))) ((xfp)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfp).xencoding)) ((xencoding)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfp).xmode)) ("r"))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xfilename)) ("w") ("utf-8-sig"))) ((xfp)))
                          (((unsupported)).apply ((xprint)) ("print('euro:u20ac')") ((xfp)))
                        (((unsupported)).apply ((((xtokenize_open)).apply ((xfilename)))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfp).xencoding)) ("utf-8-sig"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfp).xmode)) ("r"))
                xtest_filename_in_exception.write
                  [xself]
                    memory > xlines
                    memory > xins
                    memory > xpath
                    memory > x__init__
                    memory > xreadline
                    seq > @
                      seq
                        xpath.write "some_file_path"
                        xlines.write (((unsupported)).apply ("print(\"xdf\")"))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xlines xpath]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xname)) ((xpath)))
                                    (((unsupported)).apply (((xself).x_lines)) ((xlines)))
                                    (((unsupported)).apply (((xself).x_index)) (0))
                            xreadline.write
                              [xself]
                                memory > xline
                                seq > @
                                  seq
                                    (((xself).x_index).eq (((xlen)).apply ((xlines)))).if
                                      (((unsupported)).apply ((xStopIteration)))
                                    xline.write (((unsupported)).apply ((xlines)) (((xself).x_index)))
                                    (((unsupported)).apply (((xself).x_index)) (1))
                                    (((unsupported)).apply ((xline)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                          seq
                            xins.write (((xBunk)).apply ((xlines)) ((xpath)))
                            (((unsupported)).apply ((((unsupported)).apply (((xins).xname)))))
                            bogusForceDataize.write (((xdetect_encoding)).apply (((xins).xreadline)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xSyntaxError)) ((((".*{}".xformat)).apply ((xpath)))))))
                          seq
                            xins.write (((xBunk)).apply ((xlines)) ((xpath)))
                            bogusForceDataize.write (((xdetect_encoding)).apply (((xins).xreadline)))
                xtest_open_error.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xBytesIO)).apply ("#coding:xxx"))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("tokenize._builtin_open") ((xm)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xtokenize_open)) ("foobar"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).xclosed)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_tokenize.write
                  [xself]
                    memory > xorig__tokenize
                    memory > xencoding_used
                    memory > xmock_detect_encoding
                    memory > xmock_readline
                    memory > xencoding
                    memory > xtokenize_module
                    memory > xresults
                    memory > xmock__tokenize
                    memory > xorig_detect_encoding
                    memory > xcounter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xencoding.write (((xobject)).apply)
                        xencoding_used.write "None: is there a None literal in the EO language?"
                        xmock_detect_encoding.write
                          [xreadline]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((((unsupported)).apply ("first") ("second"))))))
                        xmock__tokenize.write
                          [xreadline xencoding]
                            memory > xout
                            memory > xnext_line
                            memory > xencoding_used
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xencoding_used.write (xencoding)
                                xout.write (((unsupported)).apply)
                                while.
                                  TRUE
                                  [unused]
                                    seq > @
                                      seq
                                        xnext_line.write (((xreadline)).apply)
                                        (xnext_line).if
                                          seq
                                            bogusForceDataize.write ((((xout).xappend)).apply ((xnext_line)))
                                            (((unsupported)).apply)
                                        (((unsupported)).apply ((xout)))
                        xcounter.write 0
                        xmock_readline.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xcounter)) (1))
                                ((xcounter).eq 5).if
                                  (((unsupported)).apply (""))
                                (((unsupported)).apply (((((((xstr)).apply ((xcounter))).xencode)).apply)))
                        xorig_detect_encoding.write ((xtokenize_module).xdetect_encoding)
                        xorig__tokenize.write ((xtokenize_module).x_tokenize)
                        (((unsupported)).apply (((xtokenize_module).xdetect_encoding)) ((xmock_detect_encoding)))
                        (((unsupported)).apply (((xtokenize_module).x_tokenize)) ((xmock__tokenize)))
                        (((unsupported)).apply)
                          seq
                            xresults.write (((xtokenize)).apply ((xmock_readline)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xresults)))) ((((unsupported)).apply ("first") ("second") ("1") ("2") ("3") ("4"))))
                          seq
                            (((unsupported)).apply (((xtokenize_module).xdetect_encoding)) ((xorig_detect_encoding)))
                            (((unsupported)).apply (((xtokenize_module).x_tokenize)) ((xorig__tokenize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoding_used)) ((xencoding)))
                xtest_oneline_defs.write
                  [xself]
                    memory > xtoks
                    memory > xbuf
                    seq > @
                      seq
                        xbuf.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (500))))
                          bogusForceDataize.write ((((xbuf).xappend)).apply ((((unsupported)).apply (("def i{i}(): return {i}".xformat)) ((xi)))))
                        bogusForceDataize.write ((((xbuf).xappend)).apply ("OK"))
                        xbuf.write ((("n".xjoin)).apply ((xbuf)))
                        xtoks.write (((xlist)).apply ((((xtokenize)).apply (((((xBytesIO)).apply (((((xbuf).xencode)).apply ("utf-8")))).xreadline)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xtoks)) ((3.neg))).xstring)) ("OK"))
                xassertExactTypeEqual.write
                  [xself xopstr]
                    memory > xnum_optypes
                    memory > xtokens
                    seq > @
                      (((unsupported)).apply)
                        xtokens.write (((xlist)).apply ((((xtokenize)).apply (((((xBytesIO)).apply (((((xopstr).xencode)).apply ("utf-8")))).xreadline)))))
                        xnum_optypes.write (((xlen)).apply ((xoptypes)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtokens)))) ((3.add (xnum_optypes))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xtok_name)) (((((unsupported)).apply ((xtokens)) (0)).xexact_type)))) ((((unsupported)).apply ((xtok_name)) ((xENCODING)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xnum_optypes)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xtok_name)) (((((unsupported)).apply ((xtokens)) (((xi).add 1))).xexact_type)))) ((((unsupported)).apply ((xtok_name)) ((((unsupported)).apply ((xoptypes)) ((xi)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xtok_name)) (((((unsupported)).apply ((xtokens)) ((1.add (xnum_optypes)))).xexact_type)))) ((((unsupported)).apply ((xtok_name)) (((xtoken).xNEWLINE)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xtok_name)) (((((unsupported)).apply ((xtokens)) ((2.add (xnum_optypes)))).xexact_type)))) ((((unsupported)).apply ((xtok_name)) (((xtoken).xENDMARKER)))))
                xtest_exact_type.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("()") (((xtoken).xLPAR)) (((xtoken).xRPAR)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("[]") (((xtoken).xLSQB)) (((xtoken).xRSQB)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply (":") (((xtoken).xCOLON)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply (",") (((xtoken).xCOMMA)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply (";") (((xtoken).xSEMI)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("+") (((xtoken).xPLUS)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("-") (((xtoken).xMINUS)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("*") (((xtoken).xSTAR)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("/") (((xtoken).xSLASH)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("|") (((xtoken).xVBAR)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("&") (((xtoken).xAMPER)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("<") (((xtoken).xLESS)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply (">") (((xtoken).xGREATER)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("=") (((xtoken).xEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply (".") (((xtoken).xDOT)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("%") (((xtoken).xPERCENT)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("{}") (((xtoken).xLBRACE)) (((xtoken).xRBRACE)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("==") (((xtoken).xEQEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("!=") (((xtoken).xNOTEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("<=") (((xtoken).xLESSEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply (">=") (((xtoken).xGREATEREQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("~") (((xtoken).xTILDE)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("^") (((xtoken).xCIRCUMFLEX)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("<<") (((xtoken).xLEFTSHIFT)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply (">>") (((xtoken).xRIGHTSHIFT)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("**") (((xtoken).xDOUBLESTAR)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("+=") (((xtoken).xPLUSEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("-=") (((xtoken).xMINEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("*=") (((xtoken).xSTAREQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("/=") (((xtoken).xSLASHEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("%=") (((xtoken).xPERCENTEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("&=") (((xtoken).xAMPEREQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("|=") (((xtoken).xVBAREQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("^=") (((xtoken).xCIRCUMFLEXEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("^=") (((xtoken).xCIRCUMFLEXEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("<<=") (((xtoken).xLEFTSHIFTEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply (">>=") (((xtoken).xRIGHTSHIFTEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("**=") (((xtoken).xDOUBLESTAREQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("//") (((xtoken).xDOUBLESLASH)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("//=") (((xtoken).xDOUBLESLASHEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply (":=") (((xtoken).xCOLONEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("...") (((xtoken).xELLIPSIS)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("->") (((xtoken).xRARROW)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("@") (((xtoken).xAT)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("@=") (((xtoken).xATEQUAL)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("a**2+b**2==c**2") ((xNAME)) (((xtoken).xDOUBLESTAR)) ((xNUMBER)) (((xtoken).xPLUS)) ((xNAME)) (((xtoken).xDOUBLESTAR)) ((xNUMBER)) (((xtoken).xEQEQUAL)) ((xNAME)) (((xtoken).xDOUBLESTAR)) ((xNUMBER)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("{1, 2, 3}") (((xtoken).xLBRACE)) (((xtoken).xNUMBER)) (((xtoken).xCOMMA)) (((xtoken).xNUMBER)) (((xtoken).xCOMMA)) (((xtoken).xNUMBER)) (((xtoken).xRBRACE)))
                        bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("^(x & 0x1)") (((xtoken).xCIRCUMFLEX)) (((xtoken).xLPAR)) (((xtoken).xNAME)) (((xtoken).xAMPER)) (((xtoken).xNUMBER)) (((xtoken).xRPAR)))
                xtest_pathological_trailing_whitespace.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertExactTypeEqual)).apply ("@          ") (((xtoken).xAT)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_bad_input_order.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        xu.write (((xUntokenizer)).apply)
                        (((unsupported)).apply (((xu).xprev_row)) (2))
                        (((unsupported)).apply (((xu).xprev_col)) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                          bogusForceDataize.write ((((xu).xadd_whitespace)).apply ((((unsupported)).apply (1) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xcm).xexception).xargs)) (0))) ("start (1,3) precedes previous end (2,2)"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xu).xadd_whitespace)) ((((unsupported)).apply (2) (1))))
                xtest_backslash_continuation.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        xu.write (((xUntokenizer)).apply)
                        (((unsupported)).apply (((xu).xprev_row)) (1))
                        (((unsupported)).apply (((xu).xprev_col)) (1))
                        (((unsupported)).apply (((xu).xtokens)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xu).xadd_whitespace)).apply ((((unsupported)).apply (2) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xtokens)) ((((unsupported)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xu).xprev_row)) (2))
                        bogusForceDataize.write ((((xu).xadd_whitespace)).apply ((((unsupported)).apply (4) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xtokens)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ("    "))))
                        bogusForceDataize.write ((((xTestRoundtrip).xcheck_roundtrip)).apply ((xself)) ((((unsupported)).apply)))
                xtest_iter_compat.write
                  [xself]
                    memory > xtoken
                    memory > xu
                    memory > xtokens
                    seq > @
                      seq
                        xu.write (((xUntokenizer)).apply)
                        xtoken.write (((unsupported)).apply ((xNAME)) ("Hello"))
                        xtokens.write (((unsupported)).apply ((((unsupported)).apply ((xENCODING)) ("utf-8"))) ((xtoken)))
                        bogusForceDataize.write ((((xu).xcompat)).apply ((xtoken)) ((((xiter)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xtokens)) ((((unsupported)).apply ("Hello "))))
                        xu.write (((xUntokenizer)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xu).xuntokenize)).apply ((((xiter)).apply ((((unsupported)).apply ((xtoken)))))))) ("Hello "))
                        xu.write (((xUntokenizer)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xu).xuntokenize)).apply ((((xiter)).apply ((xtokens)))))) ("Hello "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xencoding)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xuntokenize)).apply ((((xiter)).apply ((xtokens)))))) ("Hello "))
            (((unsupported)).apply ((xTestCase)))
              seq
                xcheck_roundtrip.write
                  [xself xf]
                    memory > xreadline5
                    memory > xtokens2_from5
                    memory > xtokens2
                    memory > xbytes_from2
                    memory > xcode
                    memory > xbytes_from5
                    memory > xreadline2
                    memory > xreadline
                    memory > xtokens5
                    memory > xtokens2_from2
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xisinstance)).apply ((xf)) ((xstr))).if
                          xcode.write ((((xf).xencode)).apply ("utf-8"))
                          seq
                            xcode.write ((((xf).xread)).apply)
                            bogusForceDataize.write ((((xf).xclose)).apply)
                        xreadline.write ((((xiter)).apply ((((unsupported)).apply (((xcode).xsplitlines)) (TRUE)))).x__next__)
                        xtokens5.write (((xlist)).apply ((((xtokenize)).apply ((xreadline)))))
                        xtokens2.write (((unsupported)).apply ((((unsupported)).apply ((xtok)) ((((unsupported)).apply (2))))) ((xtok)) ((xtokens5)))
                        xbytes_from2.write (((xuntokenize)).apply ((xtokens2)))
                        xreadline2.write ((((xiter)).apply ((((unsupported)).apply (((xbytes_from2).xsplitlines)) (TRUE)))).x__next__)
                        xtokens2_from2.write (((unsupported)).apply ((((unsupported)).apply ((xtok)) ((((unsupported)).apply (2))))) ((xtok)) ((((xtokenize)).apply ((xreadline2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtokens2_from2)) ((xtokens2)))
                        xbytes_from5.write (((xuntokenize)).apply ((xtokens5)))
                        xreadline5.write ((((xiter)).apply ((((unsupported)).apply (((xbytes_from5).xsplitlines)) (TRUE)))).x__next__)
                        xtokens2_from5.write (((unsupported)).apply ((((unsupported)).apply ((xtok)) ((((unsupported)).apply (2))))) ((xtok)) ((((xtokenize)).apply ((xreadline5)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtokens2_from5)) ((xtokens2)))
                xtest_roundtrip.write
                  [xself]
                    memory > xfn
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ("if x == 1:n    print(x)n"))
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ("# This is a commentn# This alson"))
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ("if x == 1 : n  print(x)n"))
                        xfn.write ((((xsupport).xfindfile)).apply ("tokenize_tests.txt"))
                        (((unsupported)).apply ((((xopen)).apply ((xfn)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ("if x == 1:n    # A comment by itself.n    print(x) # Comment here, too.n    # Another comment.nafter_if = Truen"))
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ("if (x # The comments need to go in the right placen    == 1):n    print('x==1')n"))
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ("class Test: # A comment heren  # A comment with weird indentn  after_com = 5n  def x(m): return m*5 # a one linern  def y(m): # A whitespace after the colonn     return y*4 # 3-space indentn"))
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ("try: import somemodulenexcept ImportError: # commentn    print('Can not import' # comment2n)else:   print('Loaded')n"))
                xtest_continuation.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ("a = (3,4, n5,6)ny = [3, 4,n5]nz = {'a': 5,n'b':15, 'c':True}nx = len(y) + 5 - a[n3] - a[2]n+ len(z) - z[n'b']n"))
                xtest_backslash_continuation.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ((((unsupported)).apply)))
                xtest_string_concatenation.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ("'' ''"))
                xtest_random_files.write
                  [xself]
                    memory > xtestfiles
                    memory > xtempdir
                    memory > xfn
                    seq > @
                      seq
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                        xfn.write ((((xsupport).xfindfile)).apply ("tokenize_tests.txt"))
                        xtempdir.write ((((((xos).xpath).xdirname)).apply ((xfn))).or ((xos).xcurdir))
                        xtestfiles.write ((((xglob).xglob)).apply ((((((xos).xpath).xjoin)).apply (((((xglob).xescape)).apply ((xtempdir)))) ("test*.py"))))
                        bogusForceDataize.write ((((xtestfiles).xremove)).apply ((((((xos).xpath).xjoin)).apply ((xtempdir)) ("test_unicode_identifiers.py"))))
                        (((unsupported)).apply ((xf)) ((((unsupported)).apply ("buffer") ("builtin") ("fileio") ("inspect") ("os") ("platform") ("sys"))))
                          bogusForceDataize.write ((((xtestfiles).xremove)).apply (((((((xos).xpath).xjoin)).apply ((xtempdir)) ("test_%s.py")).mod (xf))))
                        (((((xsupport).xis_resource_enabled)).apply ("cpu")).not).if
                          xtestfiles.write ((((xrandom).xsample)).apply ((xtestfiles)) (10))
                        (((unsupported)).apply ((xtestfile)) ((xtestfiles)))
                          seq
                            (((xsupport).xverbose).geq 2).if
                              bogusForceDataize.write (((xprint)).apply ("tokenize") ((xtestfile)))
                            (((unsupported)).apply ((((xopen)).apply ((xtestfile)) ("rb"))) ((xf)))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtestfile)))))
                                bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ((xf)))
                xroundtrip.write
                  [xself xcode]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xcode)) ((xstr))).if
                          xcode.write ((((xcode).xencode)).apply ("utf-8"))
                        (((unsupported)).apply (((((((xuntokenize)).apply ((((xtokenize)).apply (((((xBytesIO)).apply ((xcode))).xreadline))))).xdecode)).apply ("utf-8"))))
                xtest_indentation_semantics_retained.write
                  [xself]
                    memory > xcodelines
                    memory > xcode
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcode.write "if false:ntx=3ntx=3n"
                        xcodelines.write (((((((xself).xroundtrip)).apply ((xcode))).xsplit)).apply ("n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcodelines)) (1))) ((((unsupported)).apply ((xcodelines)) (2))))
                        bogusForceDataize.write ((((xself).xcheck_roundtrip)).apply ((xcode)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)