memory > xexc_message
memory > xWsgiHandler
memory > xBytesIO
memory > xWSGIRequestHandler
memory > xBaseHandler
memory > xkw
memory > xnext
memory > xthreading
memory > xBaseServer
memory > xValueError
memory > xsignal
memory > xTestHandler
memory > xstr
memory > xout
memory > xCustomException
memory > xAbortingWriter
memory > xAssertionError
memory > xTestCase
memory > xHTTPConnection
memory > xutil
memory > xpython_implementation
memory > xsetup_testing_defaults
memory > xvalue
memory > xSimpleHandler
memory > xNotImplementedError
memory > xStopIteration
memory > xbytearray
memory > xIndexError
memory > xHeaders
memory > xhop
memory > xproto
memory > xPartialWriter
memory > xerr
memory > xversion
memory > xConnectionResetError
memory > xre
memory > xMockServer
memory > xBaseCGIHandler
memory > xhost
memory > xNoLogRequestHandler
memory > xsupport
memory > xsys
memory > xBrokenPipeError
memory > xm
memory > xWSGIServer
memory > xMockHandler
memory > xDeprecationWarning
memory > xfloat
memory > xCrashyIterable
memory > xssw
memory > xmock
memory > xos
memory > xresponse
memory > xmake_server
memory > xConnectionAbortedError
memory > xitem
memory > xgetattr
memory > xBufferedReader
memory > xiter
memory > xport
memory > xStringIO
memory > xattr
memory > xname
memory > xunittest
memory > xobject
memory > xstatus
memory > xisinstance
memory > xNameError
memory > xvalidator
memory > xexception
memory > xlen
memory > xdict
memory > xErrorHandler
memory > xTypeError
memory > x__name__
memory > xalt
memory > xkey
[] > test_wsgiref
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcheckReqURI
        memory > xcheckFW
        memory > xtestPartialWrite
        memory > xcompare_generic_iter
        memory > xtestDontResetInternalStateOnException
        memory > xtestFileWrapper
        memory > xtestGuessScheme
        memory > xtest_filewrapper_getitem_deprecation
        memory > xtestClientConnectionTerminations
        memory > xtest_interrupted_write
        memory > xhandle_error
        memory > xtestScheme
        memory > xcheckAppURI
        memory > xtestHopByHop
        memory > xtestAbstractMethods
        memory > xhello_app
        memory > xtest_status_validation_errors
        memory > xtestExtras
        memory > xtest_plain_hello
        memory > xtest_environ
        memory > xrun_amock
        memory > xos_environ
        memory > xfinish
        memory > xtestDefaults
        memory > xtest_cp1252_url
        memory > xtestCloseOnError
        memory > xtestHeaderFormats
        memory > xtestRequireList
        memory > xtestContentLength
        memory > xtest_validated_hello
        memory > xtestCGIEnviron
        memory > xtestBytesData
        memory > xcheckShift
        memory > xtestErrorAfterOutput
        memory > xtestNormalizedShifts
        memory > xheader_app
        memory > xcheckDefault
        memory > xtest_wsgi_input
        memory > xtestAppURIs
        memory > xmaxDiff
        memory > xtestReqURIs
        memory > xtestMappingInterface
        memory > xtest_simple_validation_error
        memory > xtestCrossDefaults
        memory > xtestEnviron
        memory > x__init__
        memory > xcheckCrossDefault
        memory > xtestBasicErrorOutput
        memory > xtest_bytes_validation
        memory > xcheck_hello
        memory > xsetup
        memory > xserver_bind
        memory > xtest_request_length
        memory > xtestSimpleShifts
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xWSGIServer)))
              seq
                unsupported
                x__init__.write
                  [xself xserver_address xRequestHandlerClass]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseServer).x__init__)).apply ((xself)) ((xserver_address)) ((xRequestHandlerClass)))
                        bogusForceDataize.write ((((xself).xserver_bind)).apply)
                xserver_bind.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xhost)) ((xport)))) (((xself).xserver_address)))
                        (((unsupported)).apply (((xself).xserver_name)) ((xhost)))
                        (((unsupported)).apply (((xself).xserver_port)) ((xport)))
                        bogusForceDataize.write ((((xself).xsetup_environ)).apply)
            (((unsupported)).apply ((xWSGIRequestHandler)))
              seq
                unsupported
                xsetup.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xconnection)) (((xself).xrequest)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xrfile)) (((xself).xwfile)))) (((xself).xconnection)))
                xfinish.write
                  [xself]
                    seq > @
            xhello_app.write
              [xenviron xstart_response]
                seq > @
                  seq
                    bogusForceDataize.write (((xstart_response)).apply ("200 OK") ((((unsupported)).apply ((((unsupported)).apply ("Content-Type") ("text/plain"))) ((((unsupported)).apply ("Date") ("Mon, 05 Jun 2006 18:49:54 GMT"))))))
                    (((unsupported)).apply ((((unsupported)).apply ("Hello, world!"))))
            xheader_app.write
              [xenviron xstart_response]
                seq > @
                  seq
                    bogusForceDataize.write (((xstart_response)).apply ("200 OK") ((((unsupported)).apply ((((unsupported)).apply ("Content-Type") ("text/plain"))) ((((unsupported)).apply ("Date") ("Mon, 05 Jun 2006 18:49:54 GMT"))))))
                    (((unsupported)).apply ((((unsupported)).apply (((((((";".xjoin)).apply ((((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("HTTP_X_TEST_HEADER"))) ((((unsupported)).apply ((xenviron)) ("QUERY_STRING"))) ((((unsupported)).apply ((xenviron)) ("PATH_INFO")))))).xencode)).apply ("iso-8859-1"))))))
            xrun_amock.write
              [xapp xdata]
                memory > xout
                memory > xerr
                memory > xinp
                memory > xolderr
                memory > xserver
                seq > @
                  (((unsupported)).apply)
                    xserver.write (((xmake_server)).apply ("") (80) ((xapp)) ((xMockServer)) ((xMockHandler)))
                    xinp.write (((xBufferedReader)).apply ((((xBytesIO)).apply ((xdata)))))
                    xout.write (((xBytesIO)).apply)
                    xolderr.write ((xsys).xstderr)
                    (((unsupported)).apply ((xerr)) (((xsys).xstderr)) ((((xStringIO)).apply)))
                    (((unsupported)).apply)
                      bogusForceDataize.write ((((xserver).xfinish_request)).apply ((((unsupported)).apply ((xinp)) ((xout)))) ((((unsupported)).apply ("127.0.0.1") (8888))))
                      (((unsupported)).apply (((xsys).xstderr)) ((xolderr)))
                    (((unsupported)).apply ((((unsupported)).apply (((((xout).xgetvalue)).apply)) (((((xerr).xgetvalue)).apply)))))
            xcompare_generic_iter.write
              [xmake_it xmatch]
                memory > xn
                memory > xit
                seq > @
                  seq
                    (((unsupported)).apply)
                    xit.write (((xmake_it)).apply)
                    xn.write 0
                    (((unsupported)).apply ((xitem)) ((xmatch)))
                      seq
                        (((((unsupported)).apply ((xit)) ((xn))).eq (xitem)).not).if
                          (((unsupported)).apply ((xAssertionError)))
                        (((unsupported)).apply ((xn)) (1))
                    (((unsupported)).apply ((xIndexError)))
                      (((unsupported)).apply ((xit)) ((xn)))
                      (((unsupported)).apply ((((xAssertionError)).apply ("Too many items from __getitem__") ((xit)))))
                    (((unsupported)).apply ((xNameError)))
                      unsupported
                      seq
                        xit.write (((xmake_it)).apply)
                        ((((unsupported)).apply ((((xiter)).apply ((xit)))) ((xit))).not).if
                          (((unsupported)).apply ((xAssertionError)))
                        (((unsupported)).apply ((xitem)) ((xmatch)))
                          (((((xnext)).apply ((xit))).eq (xitem)).not).if
                            (((unsupported)).apply ((xAssertionError)))
                        (((unsupported)).apply ((xStopIteration)))
                          bogusForceDataize.write (((xnext)).apply ((xit)))
                          (((unsupported)).apply ((((xAssertionError)).apply ("Too many items from .__next__()") ((xit)))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xcheck_hello.write
                  [xself xout xhas_length]
                    memory > xpyver
                    seq > @
                      (((unsupported)).apply)
                        xpyver.write (((((xpython_implementation)).apply).sub "/").sub (((unsupported)).apply ((((((xsys).xversion).xsplit)).apply)) (0)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (((((((("HTTP/1.0 200 OKrnServer: WSGIServer/0.2 ".sub (xpyver)).sub "rnContent-Type: text/plainrnDate: Mon, 05 Jun 2006 18:49:54 GMTrn").sub (((xhas_length).and "Content-Length: 13rn").or "")).sub "rnHello, world!").xencode)).apply ("iso-8859-1"))))
                xtest_plain_hello.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) ((((xrun_amock)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_hello)).apply ((xout)))
                xtest_environ.write
                  [xself]
                    memory > xrequest
                    seq > @
                      seq
                        xrequest.write "GET /p%61th/?query=test HTTP/1.0nX-Test-Header: Python test nX-Test-Header: Python test 2nContent-Length: 0nn"
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) ((((xrun_amock)).apply ((xheader_app)) ((xrequest)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xout).xsplitlines)).apply)) ((1.neg)))) ("Python test,Python test 2;query=test;/path/"))
                xtest_request_length.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) ((((unsupported)).apply ((xrun_amock)) ((("GET ".sub ("x".mul 65537)).sub " HTTP/1.0nn")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xout).xsplitlines)).apply)) (0))) ("HTTP/1.0 414 Request-URI Too Long"))
                xtest_validated_hello.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) ((((xrun_amock)).apply ((((xvalidator)).apply ((xhello_app)))))))
                        (((unsupported)).apply (((xself).xcheck_hello)) ((xout)) (FALSE))
                xtest_simple_validation_error.write
                  [xself]
                    memory > xbad_app
                    seq > @
                      seq
                        xbad_app.write
                          [xenviron xstart_response]
                            seq > @
                              seq
                                bogusForceDataize.write (((xstart_response)).apply ("200 OK") ((((unsupported)).apply ("Content-Type") ("text/plain"))))
                                (((unsupported)).apply ((((unsupported)).apply ("Hello, world!"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) ((((xrun_amock)).apply ((((xvalidator)).apply ((xbad_app)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xout).xendswith)).apply ("A server error occurred.  Please contact the administrator."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xerr).xsplitlines)).apply)) ((2.neg)))) ("AssertionError: Headers (('Content-Type', 'text/plain')) must be of type list: <class 'tuple'>"))
                xtest_status_validation_errors.write
                  [xself]
                    memory > xtests
                    memory > xcreate_bad_app
                    seq > @
                      seq
                        xcreate_bad_app.write
                          [xstatus]
                            memory > xbad_app
                            seq > @
                              seq
                                xbad_app.write
                                  [xenviron xstart_response]
                                    seq > @
                                      seq
                                        bogusForceDataize.write (((xstart_response)).apply ((xstatus)) ((((unsupported)).apply ((((unsupported)).apply ("Content-Type") ("text/plain; charset=utf-8"))))))
                                        (((unsupported)).apply ((((unsupported)).apply ("Hello, world!"))))
                                (((unsupported)).apply ((xbad_app)))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("200") ("AssertionError: Status must be at least 4 characters"))) ((((unsupported)).apply ("20X OK") ("AssertionError: Status message must begin w/3-digit code"))) ((((unsupported)).apply ("200OK") ("AssertionError: Status message must have a space after code"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xstatus)) ((xexc_message)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xstatus)))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) ((((xrun_amock)).apply ((((xcreate_bad_app)).apply ((xstatus)))))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xout).xendswith)).apply ("A server error occurred.  Please contact the administrator."))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xerr).xsplitlines)).apply)) ((2.neg)))) ((xexc_message)))
                xtest_wsgi_input.write
                  [xself]
                    memory > xbad_app
                    seq > @
                      seq
                        xbad_app.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write ((((((unsupported)).apply ((xe)) ("wsgi.input")).xread)).apply)
                                bogusForceDataize.write (((xs)).apply ("200 OK") ((((unsupported)).apply ((((unsupported)).apply ("Content-Type") ("text/plain; charset=utf-8"))))))
                                (((unsupported)).apply ((((unsupported)).apply ("data"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) ((((xrun_amock)).apply ((((xvalidator)).apply ((xbad_app)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xout).xendswith)).apply ("A server error occurred.  Please contact the administrator."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xerr).xsplitlines)).apply)) ((2.neg)))) ("AssertionError"))
                xtest_bytes_validation.write
                  [xself]
                    memory > xapp
                    memory > xpyver
                    memory > xver
                    memory > xpy
                    seq > @
                      seq
                        xapp.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((xs)).apply ("200 OK") ((((unsupported)).apply ((((unsupported)).apply ("Content-Type") ("text/plain; charset=utf-8"))) ((((unsupported)).apply ("Date") ("Wed, 24 Dec 2008 13:29:32 GMT"))))))
                                (((unsupported)).apply ((((unsupported)).apply ("data"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) ((((xrun_amock)).apply ((((xvalidator)).apply ((xapp)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xerr).xendswith)).apply ("\"GET / HTTP/1.0\" 200 4n"))))
                        xver.write ((((((unsupported)).apply ((((((xsys).xversion).xsplit)).apply)) (0)).xencode)).apply ("ascii"))
                        xpy.write ((((((xpython_implementation)).apply).xencode)).apply ("ascii"))
                        xpyver.write (((xpy).sub "/").sub (xver))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((("HTTP/1.0 200 OKrnServer: WSGIServer/0.2 ".sub (xpyver)).sub "rnContent-Type: text/plain; charset=utf-8rnDate: Wed, 24 Dec 2008 13:29:32 GMTrnrndata")) ((xout)))
                xtest_cp1252_url.write
                  [xself]
                    memory > xapp
                    seq > @
                      seq
                        xapp.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((xs)).apply ("200 OK") ((((unsupported)).apply ((((unsupported)).apply ("Content-Type") ("text/plain"))) ((((unsupported)).apply ("Date") ("Wed, 24 Dec 2008 13:29:32 GMT"))))))
                                (((unsupported)).apply ((((unsupported)).apply (((((((unsupported)).apply ((xe)) ("PATH_INFO")).xencode)).apply ("latin1"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xout)) ((xerr)))) ((((unsupported)).apply ((xrun_amock)) ((((xvalidator)).apply ((xapp)))) ("GET /x80%80 HTTP/1.0"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("HTTP/1.0 200 OK") (((xmock).xANY)) ("Content-Type: text/plain") ("Date: Wed, 24 Dec 2008 13:29:32 GMT") ("") ("/x80x80"))) (((((xout).xsplitlines)).apply)))
                xtest_interrupted_write.write
                  [xself]
                    memory > xapp
                    memory > xreceived
                    memory > xrun_client
                    memory > xmain_thread
                    memory > xsignal_handler
                    memory > xpthread_kill
                    memory > xoriginal
                    memory > xserver
                    memory > xbackground
                    memory > xinterrupted
                    seq > @
                      seq
                        xpthread_kill.write ((((xsupport).xget_attribute)).apply ((xsignal)) ("pthread_kill"))
                        xapp.write
                          [xenviron xstart_response]
                            seq > @
                              seq
                                bogusForceDataize.write (((xstart_response)).apply ("200 OK") ((((unsupported)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply (("0".mul ((xsupport).xSOCK_MAX_SIZE))))))
                        (((unsupported)).apply ((xNoLogRequestHandler)) ((xWSGIRequestHandler)))
                        xserver.write (((unsupported)).apply ((xmake_server)) (((xsupport).xHOST)) (0) ((xapp)) ((xWsgiHandler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xserver).xserver_close)))
                        xinterrupted.write ((((xthreading).xEvent)).apply)
                        xsignal_handler.write
                          [xsignum xframe]
                            seq > @
                              bogusForceDataize.write ((((xinterrupted).xset)).apply)
                        xoriginal.write ((((xsignal).xsignal)).apply (((xsignal).xSIGUSR1)) ((xsignal_handler)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsignal).xsignal)) (((xsignal).xSIGUSR1)) ((xoriginal)))
                        xreceived.write "None: is there a None literal in the EO language?"
                        xmain_thread.write ((((xthreading).xget_ident)).apply)
                        xrun_client.write
                          []
                            memory > xhttp
                            memory > xreceived
                            seq > @
                              seq
                                xhttp.write (((xHTTPConnection)).apply ((((unsupported)).apply (((xserver).xserver_address)))))
                                bogusForceDataize.write ((((xhttp).xrequest)).apply ("GET") ("/"))
                                (((unsupported)).apply (((((xhttp).xgetresponse)).apply)) ((xresponse)))
                                  seq
                                    bogusForceDataize.write ((((xresponse).xread)).apply (100))
                                    while.
                                      TRUE
                                      [unused]
                                        seq > @
                                          seq
                                            bogusForceDataize.write (((xpthread_kill)).apply ((xmain_thread)) (((xsignal).xSIGUSR1)))
                                            (((unsupported)).apply (((xinterrupted).xwait)) ((((xfloat)).apply (1)))).if
                                              (((unsupported)).apply)
                                    (((unsupported)).apply)
                                    xreceived.write (((xlen)).apply (((((xresponse).xread)).apply)))
                                bogusForceDataize.write ((((xhttp).xclose)).apply)
                        xbackground.write (((unsupported)).apply (((xthreading).xThread)) ((xrun_client)))
                        bogusForceDataize.write ((((xbackground).xstart)).apply)
                        bogusForceDataize.write ((((xserver).xhandle_request)).apply)
                        bogusForceDataize.write ((((xbackground).xjoin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xreceived)) ((((xsupport).xSOCK_MAX_SIZE).sub 100)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xcheckShift.write
                  [xself xsn_in xpi_in xpart xsn_out xpi_out]
                    memory > xenv
                    seq > @
                      seq
                        xenv.write (((unsupported)).apply ("SCRIPT_NAME") ((xsn_in)) ("PATH_INFO") ((xpi_in)))
                        bogusForceDataize.write ((((xutil).xsetup_testing_defaults)).apply ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xutil).xshift_path_info)).apply ((xenv)))) ((xpart)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xenv)) ("PATH_INFO"))) ((xpi_out)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xenv)) ("SCRIPT_NAME"))) ((xsn_out)))
                        (((unsupported)).apply ((xenv)))
                xcheckDefault.write
                  [xself xkey xvalue xalt]
                    memory > xenv
                    seq > @
                      (((unsupported)).apply)
                        xenv.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xutil).xsetup_testing_defaults)).apply ((xenv)))
                        (((xisinstance)).apply ((xvalue)) ((xStringIO))).if
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((xenv)) ((xkey)))) ((xStringIO)))
                          (((xisinstance)).apply ((xvalue)) ((xBytesIO))).if
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((xenv)) ((xkey)))) ((xBytesIO)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xenv)) ((xkey)))) ((xvalue)))
                        xenv.write (((unsupported)).apply ((xkey)) ((xalt)))
                        bogusForceDataize.write ((((xutil).xsetup_testing_defaults)).apply ((xenv)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xenv)) ((xkey)))) ((xalt)))
                xcheckCrossDefault.write
                  [xself xkey xvalue]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xutil).xsetup_testing_defaults)).apply ((xkw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xkw)) ((xkey)))) ((xvalue)))
                xcheckAppURI.write
                  [xself xuri]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xutil).xsetup_testing_defaults)).apply ((xkw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xutil).xapplication_uri)).apply ((xkw)))) ((xuri)))
                xcheckReqURI.write
                  [xself xuri xquery]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xutil).xsetup_testing_defaults)).apply ((xkw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xutil).xrequest_uri)).apply ((xkw)) ((xquery)))) ((xuri)))
                xcheckFW.write
                  [xself xtext xsize xmatch]
                    memory > xmake_it
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xmake_it.write
                          [xtext xsize]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xutil).xFileWrapper)).apply ((((xStringIO)).apply ((xtext)))) ((xsize)))))
                        bogusForceDataize.write (((xcompare_generic_iter)).apply ((xmake_it)) ((xmatch)))
                        xit.write (((xmake_it)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xit).xfilelike).xclosed)))
                        (((unsupported)).apply ((xitem)) ((xit)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xit).xfilelike).xclosed)))
                        bogusForceDataize.write ((((xit).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xit).xfilelike).xclosed)))
                xtest_filewrapper_getitem_deprecation.write
                  [xself]
                    memory > xwrapper
                    seq > @
                      seq
                        xwrapper.write ((((xutil).xFileWrapper)).apply ((((xStringIO)).apply ("foobar"))) (3))
                        (((unsupported)).apply (((((xself).xassertWarnsRegex)).apply ((xDeprecationWarning)) ("Use iterator protocol instead"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xwrapper)) (1))) ("foo"))
                xtestSimpleShifts.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("") ("/") ("") ("/") (""))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("") ("/x") ("x") ("/x") (""))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/") ("") ("None: is there a None literal in the EO language?") ("/") (""))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a") ("/x/y") ("x") ("/a/x") ("/y"))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a") ("/x/") ("x") ("/a/x") ("/"))
                xtestNormalizedShifts.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("/../y") ("..") ("/a") ("/y"))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("") ("/../y") ("..") ("") ("/y"))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("//y") ("y") ("/a/b/y") (""))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("//y/") ("y") ("/a/b/y") ("/"))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("/./y") ("y") ("/a/b/y") (""))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("/./y/") ("y") ("/a/b/y") ("/"))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("///./..//y/.//") ("..") ("/a") ("/y/"))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("///") ("") ("/a/b/") (""))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("/.//") ("") ("/a/b/") (""))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("/x//") ("x") ("/a/b/x") ("/"))
                        bogusForceDataize.write ((((xself).xcheckShift)).apply ("/a/b") ("/.") ("None: is there a None literal in the EO language?") ("/a/b") (""))
                xtestDefaults.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) ((((unsupported)).apply ((((unsupported)).apply ("SERVER_NAME") ("127.0.0.1"))) ((((unsupported)).apply ("SERVER_PORT") ("80"))) ((((unsupported)).apply ("SERVER_PROTOCOL") ("HTTP/1.0"))) ((((unsupported)).apply ("HTTP_HOST") ("127.0.0.1"))) ((((unsupported)).apply ("REQUEST_METHOD") ("GET"))) ((((unsupported)).apply ("SCRIPT_NAME") (""))) ((((unsupported)).apply ("PATH_INFO") ("/"))) ((((unsupported)).apply ("wsgi.version") ((((unsupported)).apply (1) (0))))) ((((unsupported)).apply ("wsgi.run_once") (0))) ((((unsupported)).apply ("wsgi.multithread") (0))) ((((unsupported)).apply ("wsgi.multiprocess") (0))) ((((unsupported)).apply ("wsgi.input") ((((xBytesIO)).apply)))) ((((unsupported)).apply ("wsgi.errors") ((((xStringIO)).apply)))) ((((unsupported)).apply ("wsgi.url_scheme") ("http"))))))
                        bogusForceDataize.write ((((xself).xcheckDefault)).apply ((xkey)) ((xvalue)))
                xtestCrossDefaults.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcheckCrossDefault)) ("HTTP_HOST") ("foo.bar") ("foo.bar"))
                        (((unsupported)).apply (((xself).xcheckCrossDefault)) ("wsgi.url_scheme") ("https") ("on"))
                        (((unsupported)).apply (((xself).xcheckCrossDefault)) ("wsgi.url_scheme") ("https") ("1"))
                        (((unsupported)).apply (((xself).xcheckCrossDefault)) ("wsgi.url_scheme") ("https") ("yes"))
                        (((unsupported)).apply (((xself).xcheckCrossDefault)) ("wsgi.url_scheme") ("http") ("foo"))
                        (((unsupported)).apply (((xself).xcheckCrossDefault)) ("SERVER_PORT") ("80") ("foo"))
                        (((unsupported)).apply (((xself).xcheckCrossDefault)) ("SERVER_PORT") ("443") ("on"))
                xtestGuessScheme.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xutil).xguess_scheme)).apply ((((unsupported)).apply)))) ("http"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xutil).xguess_scheme)).apply ((((unsupported)).apply ("HTTPS") ("foo"))))) ("http"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xutil).xguess_scheme)).apply ((((unsupported)).apply ("HTTPS") ("on"))))) ("https"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xutil).xguess_scheme)).apply ((((unsupported)).apply ("HTTPS") ("yes"))))) ("https"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xutil).xguess_scheme)).apply ((((unsupported)).apply ("HTTPS") ("1"))))) ("https"))
                xtestAppURIs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckAppURI)).apply ("http://127.0.0.1/"))
                        (((unsupported)).apply (((xself).xcheckAppURI)) ("http://127.0.0.1/spam") ("/spam"))
                        (((unsupported)).apply (((xself).xcheckAppURI)) ("http://127.0.0.1/sp%E4m") ("/spxe4m"))
                        (((unsupported)).apply (((xself).xcheckAppURI)) ("http://spam.example.com:2071/") ("spam.example.com:2071") ("2071"))
                        (((unsupported)).apply (((xself).xcheckAppURI)) ("http://spam.example.com/") ("spam.example.com"))
                        (((unsupported)).apply (((xself).xcheckAppURI)) ("http://127.0.0.1/") ("127.0.0.1") ("spam.example.com"))
                        (((unsupported)).apply (((xself).xcheckAppURI)) ("https://127.0.0.1/") ("on"))
                        (((unsupported)).apply (((xself).xcheckAppURI)) ("http://127.0.0.1:8000/") ("8000") ("None: is there a None literal in the EO language?"))
                xtestReqURIs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckReqURI)).apply ("http://127.0.0.1/"))
                        (((unsupported)).apply (((xself).xcheckReqURI)) ("http://127.0.0.1/spam") ("/spam"))
                        (((unsupported)).apply (((xself).xcheckReqURI)) ("http://127.0.0.1/sp%E4m") ("/spxe4m"))
                        (((unsupported)).apply (((xself).xcheckReqURI)) ("http://127.0.0.1/spammity/spam") ("/spammity") ("/spam"))
                        (((unsupported)).apply (((xself).xcheckReqURI)) ("http://127.0.0.1/spammity/sp%E4m") ("/spammity") ("/spxe4m"))
                        (((unsupported)).apply (((xself).xcheckReqURI)) ("http://127.0.0.1/spammity/spam;ham") ("/spammity") ("/spam;ham"))
                        (((unsupported)).apply (((xself).xcheckReqURI)) ("http://127.0.0.1/spammity/spam;cookie=1234,5678") ("/spammity") ("/spam;cookie=1234,5678"))
                        (((unsupported)).apply (((xself).xcheckReqURI)) ("http://127.0.0.1/spammity/spam?say=ni") ("/spammity") ("/spam") ("say=ni"))
                        (((unsupported)).apply (((xself).xcheckReqURI)) ("http://127.0.0.1/spammity/spam?s%E4y=ni") ("/spammity") ("/spam") ("s%E4y=ni"))
                        (((unsupported)).apply (((xself).xcheckReqURI)) ("http://127.0.0.1/spammity/spam") (0) ("/spammity") ("/spam") ("say=ni"))
                xtestFileWrapper.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheckFW)).apply (("xyz".mul 50)) (120) ((((unsupported)).apply (("xyz".mul 40)) (("xyz".mul 10)))))
                xtestHopByHop.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xhop)) (((("Connection Keep-Alive Proxy-Authenticate Proxy-Authorization TE Trailers Transfer-Encoding Upgrade".xsplit)).apply)))
                          (((unsupported)).apply ((xalt)) ((((unsupported)).apply ((xhop)) (((((xhop).xtitle)).apply)) (((((xhop).xupper)).apply)) (((((xhop).xlower)).apply)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xutil).xis_hop_by_hop)).apply ((xalt)))))
                        (((unsupported)).apply ((xhop)) (((("Accept Cache-Control Date Pragma Trailer Via Warning".xsplit)).apply)))
                          (((unsupported)).apply ((xalt)) ((((unsupported)).apply ((xhop)) (((((xhop).xtitle)).apply)) (((((xhop).xupper)).apply)) (((((xhop).xlower)).apply)))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xutil).xis_hop_by_hop)).apply ((xalt)))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtestMappingInterface.write
                  [xself]
                    memory > xtest
                    memory > xh
                    seq > @
                      seq
                        xtest.write (((unsupported)).apply ((((unsupported)).apply ("x") ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xHeaders)).apply)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xHeaders)).apply ((((unsupported)).apply)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xHeaders)).apply ((((unsupported)).apply ((xtest)) ((((unsupported)).apply)))))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xHeaders)).apply ((((unsupported)).apply ((xtest)) ((((unsupported)).apply))))).xkeys)).apply)) ((((unsupported)).apply ("x"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xHeaders)).apply ((((unsupported)).apply ((xtest)) ((((unsupported)).apply))))).xvalues)).apply)) ((((unsupported)).apply ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xHeaders)).apply ((((unsupported)).apply ((xtest)) ((((unsupported)).apply))))).xitems)).apply)) ((xtest)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((((((xHeaders)).apply ((xtest))).xitems)).apply)) ((xtest)))
                        xh.write (((xHeaders)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xh)) ("foo"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xh)) ("Foo"))) ("bar"))
                        (((unsupported)).apply ((xm)) ((((unsupported)).apply (((xh).x__contains__)) (((xh).xget)) (((xh).xget_all)) (((xh).x__getitem__)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xm)).apply ("foo"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xm)).apply ("Foo"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xm)).apply ("FOO"))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xm)).apply ("bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xh)) ("foo"))) ("bar"))
                        (((unsupported)).apply ((((unsupported)).apply ((xh)) ("foo"))) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xh)) ("FOO"))) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget_all)).apply ("foo"))) ((((unsupported)).apply ("baz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ("foo") ("whee"))) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget)).apply ("zoo") ("whee"))) ("whee"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xsetdefault)).apply ("foo") ("whee"))) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xsetdefault)).apply ("zoo") ("whee"))) ("whee"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xh)) ("foo"))) ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xh)) ("zoo"))) ("whee"))
                xtestRequireList.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xHeaders)) ("foo"))
                xtestExtras.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        xh.write (((xHeaders)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xh)))) ("rn"))
                        (((unsupported)).apply (((xh).xadd_header)) ("foo") ("bar") ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xh)) ("foo"))) ("bar; baz=\"spam\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xh)))) ("foo: bar; baz=\"spam\"rnrn"))
                        (((unsupported)).apply (((xh).xadd_header)) ("Foo") ("bar") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xh).xget_all)).apply ("foo"))) ((((unsupported)).apply ("bar; baz=\"spam\"") ("bar; cheese"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xh)))) ("foo: bar; baz=\"spam\"rnFoo: bar; cheesernrn"))
            (((unsupported)).apply ((xBaseCGIHandler)))
              seq
                unsupported
                xos_environ.write (((xdict)).apply ((((((xos).xenviron).xitems)).apply)))
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((xsetup_testing_defaults)).apply ((xkw)))
                        (((unsupported)).apply (((xBaseCGIHandler).x__init__)) ((xself)) ((((xBytesIO)).apply)) ((((xBytesIO)).apply)) ((((xStringIO)).apply)) ((xkw)) (TRUE) (TRUE))
            (((unsupported)).apply ((xErrorHandler)))
              seq
                unsupported
                xhandle_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xmaxDiff.write (80.mul 50)
                xtestEnviron.write
                  [xself]
                    memory > xexpected
                    memory > xhandler
                    memory > xos_environ
                    seq > @
                      seq
                        xos_environ.write (((unsupported)).apply ("HOME") ("/my/home") ("PATH") ("/my/path") ("LANG") ("fr_FR.UTF-8") ("SCRIPT_NAME") ("test_script_name") ("SERVER_NAME") ("test_server_name"))
                        (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xTestHandler)) ("os_environ") ((xos_environ)))))
                          seq
                            xhandler.write (((unsupported)).apply ((xTestHandler)) ("Y") ("/override/home"))
                            bogusForceDataize.write ((((xhandler).xsetup_environ)).apply)
                        (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("version") ("multithread") ("multiprocess") ("run_once") ("file_wrapper"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xhandler)) (("wsgi_".sub (xattr))))) ((((unsupported)).apply (((xhandler).xenviron)) (("wsgi.".sub (xattr))))))
                        xexpected.write (((unsupported)).apply)
                        bogusForceDataize.write (((xsetup_testing_defaults)).apply ((xexpected)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xos_environ).xitems)).apply)))
                          (((unsupported)).apply ((xkey)) ((xexpected))).if
                            (((unsupported)).apply ((((unsupported)).apply ((xexpected)) ((xkey)))) ((xvalue)))
                        bogusForceDataize.write ((((xexpected).xupdate)).apply ((((unsupported)).apply ("X") ("Y") ("HOME") ("/override/home") ("SCRIPT_NAME") ("") ("SERVER_NAME") ("127.0.0.1") ("wsgi.input") (((((xhandler).xget_stdin)).apply)) ("wsgi.errors") (((((xhandler).xget_stderr)).apply)) ("wsgi.version") ((((unsupported)).apply (1) (0))) ("wsgi.run_once") (FALSE) ("wsgi.url_scheme") ("http") ("wsgi.multithread") (TRUE) ("wsgi.multiprocess") (TRUE) ("wsgi.file_wrapper") (((xutil).xFileWrapper)))))
                        bogusForceDataize.write ((((xself).xassertDictEqual)).apply (((xhandler).xenviron)) ((xexpected)))
                xtestCGIEnviron.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        xh.write (((xBaseCGIHandler)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xh).xsetup_environ)).apply)
                        (((unsupported)).apply ((xkey)) ((((unsupported)).apply ("wsgi.url_scheme") ("wsgi.input") ("wsgi.errors"))))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey)) (((xh).xenviron)))
                xtestScheme.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        seq
                          xh.write (((unsupported)).apply ((xTestHandler)) ("on"))
                          bogusForceDataize.write ((((xh).xsetup_environ)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xh).xenviron)) ("wsgi.url_scheme"))) ("https"))
                        seq
                          xh.write (((xTestHandler)).apply)
                          bogusForceDataize.write ((((xh).xsetup_environ)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xh).xenviron)) ("wsgi.url_scheme"))) ("http"))
                xtestAbstractMethods.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        xh.write (((xBaseHandler)).apply)
                        (((unsupported)).apply ((xname)) ((((unsupported)).apply ("_flush") ("get_stdin") ("get_stderr") ("add_cgi_vars"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) ((((xgetattr)).apply ((xh)) ((xname)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xh).x_write)) ("test"))
                xtestContentLength.write
                  [xself]
                    memory > xtrivial_app1
                    memory > xh
                    memory > xtrivial_app4
                    memory > xtrivial_app3
                    memory > xtrivial_app2
                    seq > @
                      seq
                        xtrivial_app1.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((xs)).apply ("200 OK") ((((unsupported)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply (((((((unsupported)).apply ((xe)) ("wsgi.url_scheme")).xencode)).apply ("iso-8859-1"))))))
                        xtrivial_app2.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xs)).apply ("200 OK") ((((unsupported)).apply)))).apply (((((((unsupported)).apply ((xe)) ("wsgi.url_scheme")).xencode)).apply ("iso-8859-1"))))
                                (((unsupported)).apply ((((unsupported)).apply)))
                        xtrivial_app3.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((xs)).apply ("200 OK") ((((unsupported)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply (((("u0442u0435u0441u0442".xencode)).apply ("utf-8"))))))
                        xtrivial_app4.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((xs)).apply ("200 OK") ((((unsupported)).apply ((((unsupported)).apply ("Content-Length") ("12345"))))))
                                (((unsupported)).apply ((((unsupported)).apply)))
                        xh.write (((xTestHandler)).apply)
                        bogusForceDataize.write ((((xh).xrun)).apply ((xtrivial_app1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xh).xstdout).xgetvalue)).apply)) (((("Status: 200 OKrnContent-Length: 4rnrnhttp".xencode)).apply ("iso-8859-1"))))
                        xh.write (((xTestHandler)).apply)
                        bogusForceDataize.write ((((xh).xrun)).apply ((xtrivial_app2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xh).xstdout).xgetvalue)).apply)) (((("Status: 200 OKrnrnhttp".xencode)).apply ("iso-8859-1"))))
                        xh.write (((xTestHandler)).apply)
                        bogusForceDataize.write ((((xh).xrun)).apply ((xtrivial_app3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xh).xstdout).xgetvalue)).apply)) ("Status: 200 OKrnContent-Length: 8rnrnxd1x82xd0xb5xd1x81xd1x82"))
                        xh.write (((xTestHandler)).apply)
                        bogusForceDataize.write ((((xh).xrun)).apply ((xtrivial_app4)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xh).xstdout).xgetvalue)).apply)) ("Status: 200 OKrnContent-Length: 12345rnrn"))
                xtestBasicErrorOutput.write
                  [xself]
                    memory > xerror_app
                    memory > xh
                    memory > xnon_error_app
                    seq > @
                      seq
                        xnon_error_app.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((xs)).apply ("200 OK") ((((unsupported)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply)))
                        xerror_app.write
                          [xe xs]
                            seq > @
                              (((unsupported)).apply ((((xAssertionError)).apply ("This should be caught by handler"))))
                        xh.write (((xErrorHandler)).apply)
                        bogusForceDataize.write ((((xh).xrun)).apply ((xnon_error_app)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xh).xstdout).xgetvalue)).apply)) (((("Status: 200 OKrnContent-Length: 0rnrn".xencode)).apply ("iso-8859-1"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xh).xstderr).xgetvalue)).apply)) (""))
                        xh.write (((xErrorHandler)).apply)
                        bogusForceDataize.write ((((xh).xrun)).apply ((xerror_app)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xh).xstdout).xgetvalue)).apply)) (((((("Status: %srnContent-Type: text/plainrnContent-Length: %drnrn".mod (((unsupported)).apply (((xh).xerror_status)) ((((xlen)).apply (((xh).xerror_body)))))).xencode)).apply ("iso-8859-1")).sub ((xh).xerror_body))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("AssertionError") ((((((xh).xstderr).xgetvalue)).apply)))
                xtestErrorAfterOutput.write
                  [xself]
                    memory > xMSG
                    memory > xerror_app
                    memory > xh
                    seq > @
                      seq
                        xMSG.write "Some output has been sent"
                        xerror_app.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xs)).apply ("200 OK") ((((unsupported)).apply)))).apply ((xMSG)))
                                (((unsupported)).apply ((((xAssertionError)).apply ("This should be caught by handler"))))
                        xh.write (((xErrorHandler)).apply)
                        bogusForceDataize.write ((((xh).xrun)).apply ((xerror_app)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xh).xstdout).xgetvalue)).apply)) ((((("Status: 200 OKrnrn".xencode)).apply ("iso-8859-1")).sub (xMSG))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("AssertionError") ((((((xh).xstderr).xgetvalue)).apply)))
                xtestHeaderFormats.write
                  [xself]
                    memory > xh
                    memory > xshortpat
                    memory > xsw
                    memory > xstdpat
                    memory > xnon_error_app
                    seq > @
                      seq
                        xnon_error_app.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((xs)).apply ("200 OK") ((((unsupported)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply)))
                        xstdpat.write "HTTP/%s 200 OKrnDate: w{3}, [ 0123]d w{3} d{4} dd:dd:dd GMTrn%sContent-Length: 0rnrn"
                        xshortpat.write ((("Status: 200 OKrnContent-Length: 0rnrn".xencode)).apply ("iso-8859-1"))
                        (((unsupported)).apply ((xssw)) ((((unsupported)).apply ("FooBar/1.0") ("None: is there a None literal in the EO language?"))))
                          seq
                            xsw.write (((xssw).and ("Server: %srn".mod (xssw))).or "")
                            (((unsupported)).apply ((xversion)) ((((unsupported)).apply ("1.0") ("1.1"))))
                              (((unsupported)).apply ((xproto)) ((((unsupported)).apply ("HTTP/0.9") ("HTTP/1.0") ("HTTP/1.1"))))
                                seq
                                  xh.write (((unsupported)).apply ((xTestHandler)) ((xproto)))
                                  (((unsupported)).apply (((xh).xorigin_server)) (FALSE))
                                  (((unsupported)).apply (((xh).xhttp_version)) ((xversion)))
                                  (((unsupported)).apply (((xh).xserver_software)) ((xssw)))
                                  bogusForceDataize.write ((((xh).xrun)).apply ((xnon_error_app)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xshortpat)) ((((((xh).xstdout).xgetvalue)).apply)))
                                  xh.write (((unsupported)).apply ((xTestHandler)) ((xproto)))
                                  (((unsupported)).apply (((xh).xorigin_server)) (TRUE))
                                  (((unsupported)).apply (((xh).xhttp_version)) ((xversion)))
                                  (((unsupported)).apply (((xh).xserver_software)) ((xssw)))
                                  bogusForceDataize.write ((((xh).xrun)).apply ((xnon_error_app)))
                                  ((xproto).eq "HTTP/0.9").if
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xh).xstdout).xgetvalue)).apply)) (""))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((((((xstdpat).mod (((unsupported)).apply ((xversion)) ((xsw)))).xencode)).apply ("iso-8859-1"))) ((((((xh).xstdout).xgetvalue)).apply)))) ((((unsupported)).apply ((((((xstdpat).mod (((unsupported)).apply ((xversion)) ((xsw)))).xencode)).apply ("iso-8859-1"))) ((((((xh).xstdout).xgetvalue)).apply)))))
                xtestBytesData.write
                  [xself]
                    memory > xh
                    memory > xapp
                    seq > @
                      seq
                        xapp.write
                          [xe xs]
                            seq > @
                              seq
                                bogusForceDataize.write (((xs)).apply ("200 OK") ((((unsupported)).apply ((((unsupported)).apply ("Content-Type") ("text/plain; charset=utf-8"))))))
                                (((unsupported)).apply ((((unsupported)).apply ("data"))))
                        xh.write (((xTestHandler)).apply)
                        bogusForceDataize.write ((((xh).xrun)).apply ((xapp)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Status: 200 OKrnContent-Type: text/plain; charset=utf-8rnContent-Length: 4rnrndata") ((((((xh).xstdout).xgetvalue)).apply)))
                xtestCloseOnError.write
                  [xself]
                    memory > xside_effects
                    memory > xMSG
                    memory > xerror_app
                    memory > xh
                    seq > @
                      seq
                        xside_effects.write (((unsupported)).apply ("close_called") (FALSE))
                        xMSG.write "Some output has been sent"
                        xerror_app.write
                          [xe xs]
                            memory > xclose
                            memory > x__iter__
                            seq > @
                              seq
                                bogusForceDataize.write (((((xs)).apply ("200 OK") ((((unsupported)).apply)))).apply ((xMSG)))
                                (((unsupported)).apply ((xobject)))
                                  seq
                                    x__iter__.write
                                      [xself]
                                        seq > @
                                          while.
                                            TRUE
                                            [unused]
                                              seq > @
                                                seq
                                                  (((unsupported)).apply ("blah"))
                                                  (((unsupported)).apply ((((xAssertionError)).apply ("This should be caught by handler"))))
                                    xclose.write
                                      [xself]
                                        seq > @
                                          (((unsupported)).apply ((((unsupported)).apply ((xside_effects)) ("close_called"))) (TRUE))
                                (((unsupported)).apply ((((xCrashyIterable)).apply)))
                        xh.write (((xErrorHandler)).apply)
                        bogusForceDataize.write ((((xh).xrun)).apply ((xerror_app)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xside_effects)) ("close_called"))) (TRUE))
                xtestPartialWrite.write
                  [xself]
                    memory > xh
                    memory > xmsg
                    memory > xwritten
                    memory > xenviron
                    memory > xflush
                    memory > xwrite
                    seq > @
                      seq
                        xwritten.write (((xbytearray)).apply)
                        (((unsupported)).apply)
                          seq
                            xwrite.write
                              [xself xb]
                                memory > xpartial
                                seq > @
                                  seq
                                    xpartial.write (((unsupported)).apply ((xb)) ((((unsupported)).apply (7))))
                                    bogusForceDataize.write ((((xwritten).xextend)).apply ((xpartial)))
                                    (((unsupported)).apply ((((xlen)).apply ((xpartial)))))
                            xflush.write
                              [xself]
                                seq > @
                        xenviron.write (((unsupported)).apply ("SERVER_PROTOCOL") ("HTTP/1.0"))
                        xh.write (((xSimpleHandler)).apply ((((xBytesIO)).apply)) ((((xPartialWriter)).apply)) (((xsys).xstderr)) ((xenviron)))
                        xmsg.write "should not do partial writes"
                        (((unsupported)).apply (((((xself).xassertWarnsRegex)).apply ((xDeprecationWarning)) ((xmsg)))))
                          bogusForceDataize.write ((((xh).xrun)).apply ((xhello_app)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("HTTP/1.0 200 OKrnContent-Type: text/plainrnDate: Mon, 05 Jun 2006 18:49:54 GMTrnContent-Length: 13rnrnHello, world!") ((xwritten)))
                xtestClientConnectionTerminations.write
                  [xself]
                    memory > xstderr
                    memory > xh
                    memory > xenviron
                    memory > xwrite
                    seq > @
                      seq
                        xenviron.write (((unsupported)).apply ("SERVER_PROTOCOL") ("HTTP/1.0"))
                        (((unsupported)).apply ((xexception)) ((((unsupported)).apply ((xConnectionAbortedError)) ((xBrokenPipeError)) ((xConnectionResetError)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xexception)))))
                            seq
                              (((unsupported)).apply)
                                xwrite.write
                                  [xself xb]
                                    seq > @
                                      (((unsupported)).apply ((xexception)))
                              xstderr.write (((xStringIO)).apply)
                              xh.write (((xSimpleHandler)).apply ((((xBytesIO)).apply)) ((((xAbortingWriter)).apply)) ((xstderr)) ((xenviron)))
                              bogusForceDataize.write ((((xh).xrun)).apply ((xhello_app)))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xstderr).xgetvalue)).apply)))
                xtestDontResetInternalStateOnException.write
                  [xself]
                    memory > xstderr
                    memory > xh
                    memory > xenviron
                    memory > xwrite
                    seq > @
                      seq
                        (((unsupported)).apply ((xValueError)))
                        (((unsupported)).apply)
                          xwrite.write
                            [xself xb]
                              seq > @
                                (((unsupported)).apply ((xCustomException)))
                        xstderr.write (((xStringIO)).apply)
                        xenviron.write (((unsupported)).apply ("SERVER_PROTOCOL") ("HTTP/1.0"))
                        xh.write (((xSimpleHandler)).apply ((((xBytesIO)).apply)) ((((xAbortingWriter)).apply)) ((xstderr)) ((xenviron)))
                        bogusForceDataize.write ((((xh).xrun)).apply ((xhello_app)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("CustomException") (((((xstderr).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xh).xresult)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xh).xheaders)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xh).xstatus)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xh).xenviron)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)