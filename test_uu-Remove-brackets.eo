memory > xFakeIO
memory > xstat
memory > xbacktick
memory > xopen
memory > xf
memory > xcodecs
memory > xbytes
memory > xos
memory > xe
memory > xfin
memory > xisinstance
memory > xstr
memory > xio
memory > xfout
memory > xsuper
memory > xsupport
memory > xsys
memory > xuu
memory > xunittest
memory > xTypeError
memory > x__name__
[] > test_uu
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_truncatedinput
        memory > xtest_decode
        memory > xgetvalue
        memory > xtest_newlines_escaped
        memory > xtest_decode_filename
        memory > xencodedtext
        memory > x__init__
        memory > xsetUp
        memory > xtest_decode_mode
        memory > xtest_garbage_padding
        memory > xplaintext
        memory > xtest_decodetwice
        memory > xencodedtextwrapped
        memory > xtest_missingbegin
        memory > xtearDown
        memory > xtest_encode
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xplaintext.write "The symbols on top of your keyboard are !@#$%^&*_+|~n"
            xencodedtext.write (((unsupported)).apply)
            (((unsupported)).apply (((xio).xTextIOWrapper)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xinitial_value xencoding xerrors xnewline]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply ((xFakeIO)) ((xself))).x__init__)) (((xio).xBytesIO)) ((xencoding)) ((xerrors)) ((xnewline)))
                        (((unsupported)).apply (((xself).x_encoding)) ((xencoding)))
                        (((unsupported)).apply (((xself).x_errors)) ((xerrors)))
                        (xinitial_value).if
                          seq
                            ((((xisinstance)).apply ((xinitial_value)) ((xstr))).not).if
                              xinitial_value.write (((xstr)).apply ((xinitial_value)))
                            bogusForceDataize.write ((((xself).xwrite)).apply ((xinitial_value)))
                            bogusForceDataize.write ((((xself).xseek)).apply (0))
                xgetvalue.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((((xself).xbuffer).xgetvalue).xdecode)).apply (((xself).x_encoding)) (((xself).x_errors)))))
            xencodedtextwrapped.write
              [xmode xfilename xbacktick]
                memory > xres
                seq > @
                  (((unsupported)).apply)
                    (xbacktick).if
                      xres.write (((((xbytes)).apply (("begin %03o %sn".mod (((unsupported)).apply ((xmode)) ((xfilename))))) ("ascii")).add ((((xencodedtext).xreplace)).apply (" ") ("`"))).add "n`nendn")
                      xres.write (((((xbytes)).apply (("begin %03o %sn".mod (((unsupported)).apply ((xmode)) ((xfilename))))) ("ascii")).add (xencodedtext)).add "n nendn")
                    (((unsupported)).apply ((xres)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_encode.write
                  [xself]
                    memory > xout
                    memory > xinp
                    seq > @
                      seq
                        xinp.write ((((xio).xBytesIO)).apply ((xplaintext)))
                        xout.write ((xio).xBytesIO)
                        bogusForceDataize.write ((((xuu).xencode)).apply ((xinp)) ((xout)) ("t1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xgetvalue)) ((((xencodedtextwrapped)).apply (438) ("t1"))))
                        xinp.write ((((xio).xBytesIO)).apply ((xplaintext)))
                        xout.write ((xio).xBytesIO)
                        bogusForceDataize.write ((((xuu).xencode)).apply ((xinp)) ((xout)) ("t1") (420))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xgetvalue)) ((((xencodedtextwrapped)).apply (420) ("t1"))))
                        xinp.write ((((xio).xBytesIO)).apply ((xplaintext)))
                        xout.write ((xio).xBytesIO)
                        (((unsupported)).apply (((xuu).xencode)) ((xinp)) ((xout)) ("t1") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xgetvalue)) ((((xencodedtextwrapped)).apply (438) ("t1") (TRUE))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xuu).xencode)).apply ((xinp)) ((xout)) ("t1") (420) (TRUE))
                xtest_decode.write
                  [xself]
                    memory > xout
                    memory > xinp
                    seq > @
                      (((unsupported)).apply ((xbacktick)) ((((unsupported)).apply (TRUE) (FALSE))))
                        seq
                          xinp.write ((((xio).xBytesIO)).apply ((((unsupported)).apply ((xencodedtextwrapped)) (438) ("t1") ((xbacktick)))))
                          xout.write ((xio).xBytesIO)
                          bogusForceDataize.write ((((xuu).xdecode)).apply ((xinp)) ((xout)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xgetvalue)) ((xplaintext)))
                          xinp.write ((((xio).xBytesIO)).apply ((("UUencoded files may contain many lines,n".add "even some that have 'begin' in them.n").add (((unsupported)).apply ((xencodedtextwrapped)) (438) ("t1") ((xbacktick))))))
                          xout.write ((xio).xBytesIO)
                          bogusForceDataize.write ((((xuu).xdecode)).apply ((xinp)) ((xout)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xgetvalue)) ((xplaintext)))
                xtest_truncatedinput.write
                  [xself]
                    memory > xout
                    memory > xinp
                    seq > @
                      seq
                        xinp.write ((((xio).xBytesIO)).apply (("begin 644 t1n".add (xencodedtext))))
                        xout.write ((xio).xBytesIO)
                        (((unsupported)).apply (((xuu).xError)))
                          seq
                            bogusForceDataize.write ((((xuu).xdecode)).apply ((xinp)) ((xout)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("No exception raised"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("Truncated input file"))
                xtest_missingbegin.write
                  [xself]
                    memory > xout
                    memory > xinp
                    seq > @
                      seq
                        xinp.write ((((xio).xBytesIO)).apply (""))
                        xout.write ((xio).xBytesIO)
                        (((unsupported)).apply (((xuu).xError)))
                          seq
                            bogusForceDataize.write ((((xuu).xdecode)).apply ((xinp)) ((xout)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("No exception raised"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("No valid begin line found in input file"))
                xtest_garbage_padding.write
                  [xself]
                    memory > xout
                    memory > xencodedtext2
                    memory > xdecoded
                    memory > xencodedtext1
                    memory > xplaintext
                    memory > xinp
                    seq > @
                      seq
                        xencodedtext1.write "begin 644 filenx21x2Cx5Fx5Fx5Fnx20nendn"
                        xencodedtext2.write "begin 644 filenx21x2Cx5Fx5Fx5Fnx60nendn"
                        xplaintext.write "x33"
                        (((unsupported)).apply ((xencodedtext)) ((((unsupported)).apply ((xencodedtext1)) ((xencodedtext2)))))
                          seq
                            (((unsupported)).apply (((((xself).xsubTest)).apply ("uu.decode"))))
                              seq
                                xinp.write ((((xio).xBytesIO)).apply ((xencodedtext)))
                                xout.write ((xio).xBytesIO)
                                (((unsupported)).apply (((xuu).xdecode)) ((xinp)) ((xout)) (TRUE))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xgetvalue)) ((xplaintext)))
                            (((unsupported)).apply (((((xself).xsubTest)).apply ("uu_codec"))))
                              seq
                                (((unsupported)).apply)
                                xdecoded.write ((((xcodecs).xdecode)).apply ((xencodedtext)) ("uu_codec"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdecoded)) ((xplaintext)))
                xtest_newlines_escaped.write
                  [xself]
                    memory > xout
                    memory > xinp
                    memory > xsafefilename
                    memory > xfilename
                    seq > @
                      seq
                        xinp.write ((((xio).xBytesIO)).apply ((xplaintext)))
                        xout.write ((xio).xBytesIO)
                        xfilename.write "test.txtnroverflow.txt"
                        xsafefilename.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xuu).xencode)).apply ((xinp)) ((xout)) ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xsafefilename)) (((xout).xgetvalue)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xstdin)) (((xsys).xstdin)))
                        (((unsupported)).apply (((xself).xstdout)) (((xsys).xstdout)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsys).xstdin)) (((xself).xstdin)))
                        (((unsupported)).apply (((xsys).xstdout)) (((xself).xstdout)))
                xtest_encode.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xsys).xstdin)) ((((xFakeIO)).apply (((((xplaintext).xdecode)).apply ("ascii"))))))
                        (((unsupported)).apply (((xsys).xstdout)) ((xFakeIO)))
                        bogusForceDataize.write ((((xuu).xencode)).apply ("-") ("-") ("t1") (438))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsys).xstdout).xgetvalue)) (((((((xencodedtextwrapped)).apply (438) ("t1")).xdecode)).apply ("ascii"))))
                xtest_decode.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        (((unsupported)).apply (((xsys).xstdin)) ((((xFakeIO)).apply (((((((xencodedtextwrapped)).apply (438) ("t1")).xdecode)).apply ("ascii"))))))
                        (((unsupported)).apply (((xsys).xstdout)) ((xFakeIO)))
                        bogusForceDataize.write ((((xuu).xdecode)).apply ("-") ("-"))
                        xstdout.write ((xsys).xstdout)
                        (((unsupported)).apply (((xsys).xstdout)) (((xself).xstdout)))
                        (((unsupported)).apply (((xsys).xstdin)) (((xself).xstdin)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstdout).xgetvalue)) (((((xplaintext).xdecode)).apply ("ascii"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtmpin)) ((((xsupport).xTESTFN).add "i")))
                        (((unsupported)).apply (((xself).xtmpout)) ((((xsupport).xTESTFN).add "o")))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xself).xtmpin)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xself).xtmpout)))
                xtest_encode.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("wb"))) ((xfin)))
                          bogusForceDataize.write ((((xfin).xwrite)).apply ((xplaintext)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("rb"))) ((xfin)))
                          (((unsupported)).apply ((((xopen)).apply (((xself).xtmpout)) ("wb"))) ((xfout)))
                            (((unsupported)).apply (((xuu).xencode)) ((xfin)) ((xfout)) (((xself).xtmpin)) (420))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpout)) ("rb"))) ((xfout)))
                          xs.write ((xfout).xread)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((((xencodedtextwrapped)).apply (420) (((xself).xtmpin)))))
                        (((unsupported)).apply (((xuu).xencode)) (((xself).xtmpin)) (((xself).xtmpout)) (((xself).xtmpin)) (420))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpout)) ("rb"))) ((xfout)))
                          xs.write ((xfout).xread)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((((xencodedtextwrapped)).apply (420) (((xself).xtmpin)))))
                xtest_decode.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((((xencodedtextwrapped)).apply (420) (((xself).xtmpout)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xuu).xdecode)).apply ((xf)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpout)) ("rb"))) ((xf)))
                          xs.write ((xf).xread)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xplaintext)))
                xtest_decode_filename.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((((xencodedtextwrapped)).apply (420) (((xself).xtmpout)))))
                        bogusForceDataize.write ((((xuu).xdecode)).apply (((xself).xtmpin)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpout)) ("rb"))) ((xf)))
                          xs.write ((xf).xread)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xplaintext)))
                xtest_decodetwice.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((((xencodedtextwrapped)).apply (420) (((xself).xtmpout)))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xuu).xdecode)).apply ((xf)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xuu).xError)) (((xuu).xdecode)) ((xf)))
                xtest_decode_mode.write
                  [xself]
                    memory > xexpected_mode
                    seq > @
                      seq
                        xexpected_mode.write 292
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((((xencodedtextwrapped)).apply ((xexpected_mode)) (((xself).xtmpout)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xchmod)) (((xself).xtmpout)) (((xexpected_mode).or ((xstat).xS_IWRITE))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtmpin)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xuu).xdecode)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstat).xS_IMODE)).apply ((((((xos).xstat)).apply (((xself).xtmpout))).xst_mode)))) ((xexpected_mode)))
            ((x__name__).eq "__main__").if
              unsupported