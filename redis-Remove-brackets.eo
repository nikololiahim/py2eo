memory > xpickle
memory > xValueError
memory > xRedisSerializer
memory > xvalue
memory > xrandom
memory > xsuper
memory > xbool
memory > xv
memory > xkey
memory > xret
memory > xk
memory > xDEFAULT_TIMEOUT
memory > xredis
memory > ximport_string
memory > xstr
memory > xmax
memory > xBaseCache
memory > xcallable
memory > xtype
memory > xint
memory > xre
memory > xRedisCacheClient
memory > xzip
memory > xisinstance
memory > xlen
[] > redis
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdelete
        memory > xhas_key
        memory > xget
        memory > x_cache
        memory > xget_backend_timeout
        memory > xdumps
        memory > xincr
        memory > xtouch
        memory > x__init__
        memory > xloads
        memory > x_get_connection_pool_index
        memory > xclear
        memory > xset_many
        memory > xdelete_many
        memory > xget_many
        memory > xset
        memory > x_get_connection_pool
        memory > xadd
        memory > xget_client
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xprotocol]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xprotocol)) (((((unsupported)).apply ((xprotocol)) ("None: is there a None literal in the EO language?")).if ((xpickle).xHIGHEST_PROTOCOL) (xprotocol))))
                xdumps.write
                  [xself xobj]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xtype)).apply ((xobj)))) ((xint))).if
                          (((unsupported)).apply ((xobj)))
                        (((unsupported)).apply (((((xpickle).xdumps)).apply ((xobj)) (((xself).xprotocol)))))
                xloads.write
                  [xself xdata]
                    seq > @
                      (((unsupported)).apply ((xValueError)))
                        (((unsupported)).apply ((((xint)).apply ((xdata)))))
                        (((unsupported)).apply (((((xpickle).xloads)).apply ((xdata)))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xservers xserializer xdb xpool_class xparser_class]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_lib)) ((xredis)))
                        (((unsupported)).apply (((xself).x_servers)) ((xservers)))
                        (((unsupported)).apply (((xself).x_pools)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).x_client)) ((((xself).x_lib).xRedis)))
                        (((xisinstance)).apply ((xpool_class)) ((xstr))).if
                          xpool_class.write (((ximport_string)).apply ((xpool_class)))
                        (((unsupported)).apply (((xself).x_pool_class)) (((xpool_class).or (((xself).x_lib).xConnectionPool))))
                        (((xisinstance)).apply ((xserializer)) ((xstr))).if
                          xserializer.write (((ximport_string)).apply ((xserializer)))
                        (((xcallable)).apply ((xserializer))).if
                          xserializer.write (xserializer)
                        (((unsupported)).apply (((xself).x_serializer)) (((xserializer).or (xRedisSerializer))))
                        (((xisinstance)).apply ((xparser_class)) ((xstr))).if
                          xparser_class.write (((ximport_string)).apply ((xparser_class)))
                        xparser_class.write ((xparser_class).or ((((xself).x_lib).xconnection).xDefaultParser))
                        (((unsupported)).apply (((xself).x_pool_options)) ((((unsupported)).apply ("parser_class") ((xparser_class)) ("db") ((xdb)))))
                x_get_connection_pool_index.write
                  [xself xwrite]
                    seq > @
                      seq
                        ((xwrite).or ((((xlen)).apply (((xself).x_servers))).eq 1)).if
                          (((unsupported)).apply (0))
                        (((unsupported)).apply (((((xrandom).xrandint)).apply (1) (((((xlen)).apply (((xself).x_servers))).sub 1)))))
                x_get_connection_pool.write
                  [xself xwrite]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write ((((xself).x_get_connection_pool_index)).apply ((xwrite)))
                        (((unsupported)).apply ((xindex)) (((xself).x_pools))).if
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x_pools)) ((xindex)))) ((((((xself).x_pool_class).xfrom_url)).apply ((((unsupported)).apply (((xself).x_servers)) ((xindex)))) ((((unsupported)).apply (((xself).x_pool_options)))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_pools)) ((xindex)))))
                xget_client.write
                  [xself xkey xwrite]
                    memory > xpool
                    seq > @
                      (((unsupported)).apply)
                        xpool.write ((((xself).x_get_connection_pool)).apply ((xwrite)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_client)) ((xpool)))))
                xadd.write
                  [xself xkey xvalue xtimeout]
                    memory > xclient
                    seq > @
                      seq
                        xclient.write (((unsupported)).apply (((xself).xget_client)) ((xkey)) (TRUE))
                        xvalue.write (((((xself).x_serializer).xdumps)).apply ((xvalue)))
                        ((xtimeout).eq 0).if
                          seq
                            (((unsupported)).apply ((((xbool)).apply ((((unsupported)).apply (((xclient).xset)) ((xkey)) ((xvalue)) (TRUE)))))).if
                              bogusForceDataize.write ((((xclient).xdelete)).apply ((xkey)))
                            (((unsupported)).apply ((xret)))
                          (((unsupported)).apply ((((xbool)).apply ((((unsupported)).apply (((xclient).xset)) ((xkey)) ((xvalue)) ((xtimeout)) (TRUE))))))
                xget.write
                  [xself xkey xdefault]
                    memory > xvalue
                    memory > xclient
                    seq > @
                      seq
                        xclient.write ((((xself).xget_client)).apply ((xkey)))
                        xvalue.write ((((xclient).xget)).apply ((xkey)))
                        (((unsupported)).apply (((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if (xdefault) (((((xself).x_serializer).xloads)).apply ((xvalue))))))
                xset.write
                  [xself xkey xvalue xtimeout]
                    memory > xclient
                    seq > @
                      seq
                        xclient.write (((unsupported)).apply (((xself).xget_client)) ((xkey)) (TRUE))
                        xvalue.write (((((xself).x_serializer).xdumps)).apply ((xvalue)))
                        ((xtimeout).eq 0).if
                          bogusForceDataize.write ((((xclient).xdelete)).apply ((xkey)))
                          (((unsupported)).apply (((xclient).xset)) ((xkey)) ((xvalue)) ((xtimeout)))
                xtouch.write
                  [xself xkey xtimeout]
                    memory > xclient
                    seq > @
                      seq
                        xclient.write (((unsupported)).apply (((xself).xget_client)) ((xkey)) (TRUE))
                        (((unsupported)).apply ((xtimeout)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xbool)).apply (((((xclient).xpersist)).apply ((xkey)))))))
                          (((unsupported)).apply ((((xbool)).apply (((((xclient).xexpire)).apply ((xkey)) ((xtimeout)))))))
                xdelete.write
                  [xself xkey]
                    memory > xclient
                    seq > @
                      seq
                        xclient.write (((unsupported)).apply (((xself).xget_client)) ((xkey)) (TRUE))
                        (((unsupported)).apply ((((xbool)).apply (((((xclient).xdelete)).apply ((xkey)))))))
                xget_many.write
                  [xself xkeys]
                    memory > xret
                    memory > xclient
                    seq > @
                      seq
                        xclient.write ((((xself).xget_client)).apply ("None: is there a None literal in the EO language?"))
                        xret.write ((((xclient).xmget)).apply ((xkeys)))
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((((((xself).x_serializer).xloads)).apply ((xv)))) ((((unsupported)).apply ((xk)) ((xv)))) ((((xzip)).apply ((xkeys)) ((xret)))) ((((unsupported)).apply ((xv)) ("None: is there a None literal in the EO language?"))))))
                xhas_key.write
                  [xself xkey]
                    memory > xclient
                    seq > @
                      seq
                        xclient.write ((((xself).xget_client)).apply ((xkey)))
                        (((unsupported)).apply ((((xbool)).apply (((((xclient).xexists)).apply ((xkey)))))))
                xincr.write
                  [xself xkey xdelta]
                    memory > xclient
                    seq > @
                      seq
                        xclient.write ((((xself).xget_client)).apply ((xkey)))
                        (((((xclient).xexists)).apply ((xkey))).not).if
                          (((unsupported)).apply ((((xValueError)).apply (("Key '%s' not found.".mod (xkey))))))
                        (((unsupported)).apply (((((xclient).xincr)).apply ((xkey)) ((xdelta)))))
                xset_many.write
                  [xself xdata xtimeout]
                    memory > xpipeline
                    memory > xclient
                    seq > @
                      seq
                        xclient.write (((unsupported)).apply (((xself).xget_client)) ("None: is there a None literal in the EO language?") (TRUE))
                        xpipeline.write ((xclient).xpipeline)
                        bogusForceDataize.write ((((xpipeline).xmset)).apply ((((unsupported)).apply ((xk)) ((((((xself).x_serializer).xdumps)).apply ((xv)))) ((((unsupported)).apply ((xk)) ((xv)))) (((xdata).xitems)))))
                        (((unsupported)).apply ((xtimeout)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xkey)) ((xdata)))
                            bogusForceDataize.write ((((xpipeline).xexpire)).apply ((xkey)) ((xtimeout)))
                        unsupported
                xdelete_many.write
                  [xself xkeys]
                    memory > xclient
                    seq > @
                      seq
                        xclient.write (((unsupported)).apply (((xself).xget_client)) ("None: is there a None literal in the EO language?") (TRUE))
                        bogusForceDataize.write ((((xclient).xdelete)).apply ((((unsupported)).apply ((xkeys)))))
                xclear.write
                  [xself]
                    memory > xclient
                    seq > @
                      seq
                        xclient.write (((unsupported)).apply (((xself).xget_client)) ("None: is there a None literal in the EO language?") (TRUE))
                        (((unsupported)).apply ((((xbool)).apply (((xclient).xflushdb)))))
            (((unsupported)).apply ((xBaseCache)))
              seq
                x__init__.write
                  [xself xserver xparams]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsuper).x__init__)).apply ((xparams)))
                        (((xisinstance)).apply ((xserver)) ((xstr))).if
                          (((unsupported)).apply (((xself).x_servers)) (((((xre).xsplit)).apply ("[;,]") ((xserver)))))
                          (((unsupported)).apply (((xself).x_servers)) ((xserver)))
                        (((unsupported)).apply (((xself).x_class)) ((xRedisCacheClient)))
                        (((unsupported)).apply (((xself).x_options)) (((((xparams).xget)).apply ("OPTIONS") ((((unsupported)).apply)))))
                x_cache.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_class)).apply (((xself).x_servers)) ((((unsupported)).apply (((xself).x_options)))))))
                xget_backend_timeout.write
                  [xself xtimeout]
                    seq > @
                      (((unsupported)).apply)
                        ((xtimeout).eq (xDEFAULT_TIMEOUT)).if
                          xtimeout.write ((xself).xdefault_timeout)
                        (((unsupported)).apply (((((unsupported)).apply ((xtimeout)) ("None: is there a None literal in the EO language?")).if "None: is there a None literal in the EO language?" (((xmax)).apply (0) ((((xint)).apply ((xtimeout))))))))
                xadd.write
                  [xself xkey xvalue xtimeout xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((((xself).x_cache).xadd)).apply ((xkey)) ((xvalue)) (((((xself).xget_backend_timeout)).apply ((xtimeout)))))))
                xget.write
                  [xself xkey xdefault xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((((xself).x_cache).xget)).apply ((xkey)) ((xdefault)))))
                xset.write
                  [xself xkey xvalue xtimeout xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        bogusForceDataize.write (((((xself).x_cache).xset)).apply ((xkey)) ((xvalue)) (((((xself).xget_backend_timeout)).apply ((xtimeout)))))
                xtouch.write
                  [xself xkey xtimeout xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((((xself).x_cache).xtouch)).apply ((xkey)) (((((xself).xget_backend_timeout)).apply ((xtimeout)))))))
                xdelete.write
                  [xself xkey xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((((xself).x_cache).xdelete)).apply ((xkey)))))
                xget_many.write
                  [xself xkeys xversion]
                    memory > xret
                    memory > xkey_map
                    seq > @
                      (((unsupported)).apply)
                        xkey_map.write (((unsupported)).apply ((((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))) ((xkey)) ((xkey)) ((xkeys)))
                        xret.write (((((xself).x_cache).xget_many)).apply (((xkey_map).xkeys)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkey_map)) ((xk)))) ((xv)) ((((unsupported)).apply ((xk)) ((xv)))) (((xret).xitems)))))
                xhas_key.write
                  [xself xkey xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((((xself).x_cache).xhas_key)).apply ((xkey)))))
                xincr.write
                  [xself xkey xdelta xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((((xself).x_cache).xincr)).apply ((xkey)) ((xdelta)))))
                xset_many.write
                  [xself xdata xtimeout xversion]
                    memory > xsafe_data
                    memory > xkey
                    seq > @
                      (((unsupported)).apply)
                        xsafe_data.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((xdata).xitems)))
                          seq
                            xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                            (((unsupported)).apply ((((unsupported)).apply ((xsafe_data)) ((xkey)))) ((xvalue)))
                        bogusForceDataize.write (((((xself).x_cache).xset_many)).apply ((xsafe_data)) (((((xself).xget_backend_timeout)).apply ((xtimeout)))))
                        (((unsupported)).apply ((((unsupported)).apply)))
                xdelete_many.write
                  [xself xkeys xversion]
                    memory > xsafe_keys
                    memory > xkey
                    seq > @
                      (((unsupported)).apply)
                        xsafe_keys.write (((unsupported)).apply)
                        (((unsupported)).apply ((xkey)) ((xkeys)))
                          seq
                            xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                            bogusForceDataize.write ((((xsafe_keys).xappend)).apply ((xkey)))
                        bogusForceDataize.write (((((xself).x_cache).xdelete_many)).apply ((xsafe_keys)))
                xclear.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).x_cache).xclear)))