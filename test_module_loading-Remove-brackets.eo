memory > xextend_sys_path
memory > xImportError
memory > xsite
memory > ximport_module
memory > ximport_string
memory > xPY310
memory > xTestLoader
memory > xkwargs
memory > xmodify_settings
memory > xEggLoader
memory > xException
memory > xmodule_has_submodule
memory > xautodiscover_modules
memory > xsuper
memory > xsys
memory > xargs
memory > xos
memory > xTestFinder
memory > x__file__
memory > xunittest
memory > xzipimporter
memory > xSimpleTestCase
[] > test_module_loading
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_autodiscover_modules_found_but_bad_module
        memory > xtest_validate_registry_resets_after_missing_module
        memory > xsetUp
        memory > xtest_autodiscover_modules_found
        memory > xtest_deep_loader
        memory > xtest_shallow_loader
        memory > xtest_autodiscover_modules_several_found
        memory > xtest_autodiscover_modules_several_found_with_registry
        memory > xtest_autodiscover_modules_not_found
        memory > xtest_loader
        memory > xfind_module
        memory > xtest_validate_registry_resets_after_erroneous_module
        memory > x__init__
        memory > xload_module
        memory > xtest_has_sumbodule_with_dotted_path
        memory > xtest_autodiscover_modules_several_one_bad_module
        memory > xtest_import_string
        memory > xtest_validate_registry_keeps_intact
        memory > xtearDown
        memory > xfind_spec
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_loader.write
                  [xself]
                    memory > xtest_no_submodule
                    memory > xmod
                    memory > xtest_module
                    seq > @
                      seq
                        unsupported
                        xtest_module.write (((ximport_module)).apply ("utils_tests.test_module"))
                        xtest_no_submodule.write (((ximport_module)).apply ("utils_tests.test_no_submodule"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xmodule_has_submodule)).apply ((xtest_module)) ("good_module"))))
                        xmod.write (((ximport_module)).apply ("utils_tests.test_module.good_module"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmod).xcontent)) ("Good Module"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xmodule_has_submodule)).apply ((xtest_module)) ("bad_module"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                          bogusForceDataize.write (((ximport_module)).apply ("utils_tests.test_module.bad_module"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xmodule_has_submodule)).apply ((xtest_module)) ("no_such_module"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                          bogusForceDataize.write (((ximport_module)).apply ("utils_tests.test_module.no_such_module"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xmodule_has_submodule)).apply ((xtest_module)) ("django"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                          bogusForceDataize.write (((ximport_module)).apply ("utils_tests.test_module.django"))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xmodule_has_submodule)).apply ((((unsupported)).apply (((xsys).xmodules)) ("utils_tests"))) ("types"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xmodule_has_submodule)).apply ((xtest_no_submodule)) ("anything"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                          bogusForceDataize.write (((ximport_module)).apply ("utils_tests.test_no_submodule.anything"))
                xtest_has_sumbodule_with_dotted_path.write
                  [xself]
                    memory > xtest_module
                    seq > @
                      seq
                        unsupported
                        xtest_module.write (((ximport_module)).apply ("utils_tests.test_module"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xmodule_has_submodule)).apply ((xtest_module)) ("child_module.grandchild_module"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xmodule_has_submodule)).apply ((xtest_module)) ("child_module.no_such_module"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xmodule_has_submodule)).apply ((xtest_module)) ("no_such_module.grandchild_module"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xmodule_has_submodule)).apply ((xtest_module)) ("good_module.no_such_module"))) (FALSE))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xegg_dir)) (("%s/eggs".mod (((((xos).xpath).xdirname)).apply ((x__file__))))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("egg_module.sub1.sub2.bad_module") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("egg_module.sub1.sub2.good_module") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("egg_module.sub1.sub2") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("egg_module.sub1") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("egg_module.bad_module") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("egg_module.good_module") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("egg_module") ("None: is there a None literal in the EO language?"))
                xtest_shallow_loader.write
                  [xself]
                    memory > xmod
                    memory > xegg_name
                    memory > xegg_module
                    seq > @
                      seq
                        unsupported
                        xegg_name.write ("%s/test_egg.egg".mod ((xself).xegg_dir))
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((xegg_name)))))
                          seq
                            xegg_module.write (((ximport_module)).apply ("egg_module"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xmodule_has_submodule)).apply ((xegg_module)) ("good_module"))))
                            xmod.write (((ximport_module)).apply ("egg_module.good_module"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmod).xcontent)) ("Good Module"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xmodule_has_submodule)).apply ((xegg_module)) ("bad_module"))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                              bogusForceDataize.write (((ximport_module)).apply ("egg_module.bad_module"))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xmodule_has_submodule)).apply ((xegg_module)) ("no_such_module"))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                              bogusForceDataize.write (((ximport_module)).apply ("egg_module.no_such_module"))
                xtest_deep_loader.write
                  [xself]
                    memory > xmod
                    memory > xegg_name
                    memory > xegg_module
                    seq > @
                      seq
                        unsupported
                        xegg_name.write ("%s/test_egg.egg".mod ((xself).xegg_dir))
                        (((unsupported)).apply ((((xextend_sys_path)).apply ((xegg_name)))))
                          seq
                            xegg_module.write (((ximport_module)).apply ("egg_module.sub1.sub2"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xmodule_has_submodule)).apply ((xegg_module)) ("good_module"))))
                            xmod.write (((ximport_module)).apply ("egg_module.sub1.sub2.good_module"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmod).xcontent)) ("Deep Good Module"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xmodule_has_submodule)).apply ((xegg_module)) ("bad_module"))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                              bogusForceDataize.write (((ximport_module)).apply ("egg_module.sub1.sub2.bad_module"))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xmodule_has_submodule)).apply ((xegg_module)) ("no_such_module"))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                              bogusForceDataize.write (((ximport_module)).apply ("egg_module.sub1.sub2.no_such_module"))
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_import_string.write
                [xself]
                  memory > xcls
                  memory > xmsg
                  seq > @
                    seq
                      xcls.write (((ximport_string)).apply ("django.utils.module_loading.import_string"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcls)) ((ximport_string)))
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                        bogusForceDataize.write (((ximport_string)).apply ("no_dots_in_path"))
                      xmsg.write "Module \"utils_tests\" does not define a \"unexistent\" attribute"
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImportError)) ((xmsg)))))
                        bogusForceDataize.write (((ximport_string)).apply ("utils_tests.unexistent"))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("utils_tests.test_module"))))))
              seq
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("utils_tests.test_module.another_bad_module") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("utils_tests.test_module.another_good_module") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("utils_tests.test_module.bad_module") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("utils_tests.test_module.good_module") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xsys).xmodules).xpop)).apply ("utils_tests.test_module") ("None: is there a None literal in the EO language?"))
                xtest_autodiscover_modules_found.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xautodiscover_modules)).apply ("good_module"))
                xtest_autodiscover_modules_not_found.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xautodiscover_modules)).apply ("missing_module"))
                xtest_autodiscover_modules_found_but_bad_module.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImportError)) ("No module named 'a_package_name_that_does_not_exist'"))))
                        bogusForceDataize.write (((xautodiscover_modules)).apply ("bad_module"))
                xtest_autodiscover_modules_several_one_bad_module.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImportError)) ("No module named 'a_package_name_that_does_not_exist'"))))
                        bogusForceDataize.write (((xautodiscover_modules)).apply ("good_module") ("bad_module"))
                xtest_autodiscover_modules_several_found.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xautodiscover_modules)).apply ("good_module") ("another_good_module"))
                xtest_autodiscover_modules_several_found_with_registry.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xautodiscover_modules)) ("good_module") ("another_good_module") ((xsite)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsite).x_registry)) ((((unsupported)).apply ("lorem") ("ipsum"))))
                xtest_validate_registry_keeps_intact.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xException)) ("Some random exception."))))
                          (((unsupported)).apply ((xautodiscover_modules)) ("another_bad_module") ((xsite)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsite).x_registry)) ((((unsupported)).apply)))
                xtest_validate_registry_resets_after_erroneous_module.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xException)) ("Some random exception."))))
                          (((unsupported)).apply ((xautodiscover_modules)) ("another_good_module") ("another_bad_module") ((xsite)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsite).x_registry)) ((((unsupported)).apply ("lorem") ("ipsum"))))
                xtest_validate_registry_resets_after_missing_module.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xautodiscover_modules)) ("does_not_exist") ("another_good_module") ("does_not_exist2") ((xsite)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsite).x_registry)) ((((unsupported)).apply ("lorem") ("ipsum"))))
            (xPY310).if
              (((unsupported)).apply)
                seq
                  x__init__.write
                    [xself]
                      seq > @
                        (((unsupported)).apply)
                          (((unsupported)).apply (((xself).ximporter)) ((((xzipimporter)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                  xfind_spec.write
                    [xself xpath xtarget]
                      seq > @
                        (((unsupported)).apply)
                          (((unsupported)).apply ((((((xself).ximporter).xfind_spec)).apply ((xpath)) ((xtarget)))))
              seq
                (((unsupported)).apply)
                  seq
                    x__init__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply (((xself).ximporter)) ((((xzipimporter)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                    xfind_module.write
                      [xself xpath]
                        memory > ximporter
                        seq > @
                          seq
                            ximporter.write (((((xself).ximporter).xfind_module)).apply ((xpath)))
                            (((unsupported)).apply ((ximporter)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((((xTestLoader)).apply ((ximporter)))))
                (((unsupported)).apply)
                  seq
                    x__init__.write
                      [xself ximporter]
                        seq > @
                          (((unsupported)).apply (((xself).ximporter)) ((ximporter)))
                    xload_module.write
                      [xself xname]
                        memory > xmod
                        seq > @
                          seq
                            xmod.write (((((xself).ximporter).xload_module)).apply ((xname)))
                            (((unsupported)).apply (((xmod).x__loader__)) ((xself)))
                            (((unsupported)).apply ((xmod)))
            (((unsupported)).apply ((xEggLoader)))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write (((((xsys).xpath_hooks).xinsert)).apply (0) ((xTestFinder)))
                        unsupported
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write (((((xsys).xpath_hooks).xpop)).apply (0))