memory > xfnmatchcase
memory > xfnmatch
memory > xwarnings
memory > xWarning
memory > xtranslate
memory > xos
memory > xunittest
memory > xfilter
memory > xTypeError
memory > x__name__
[] > test_fnmatch
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_bytes
        memory > xcheck_match
        memory > xtest_filter
        memory > xtest_fnmatch
        memory > xtest_warnings
        memory > xtest_mix_bytes_str
        memory > xtest_translate
        memory > xtest_case
        memory > xtest_sep
        memory > xtest_fnmatchcase
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcheck_match.write
                  [xself xfilename xpattern xshould_match xfn]
                    seq > @
                      (((unsupported)).apply)
                        (xshould_match).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfn)).apply ((xfilename)) ((xpattern)))) (("expected %r to match pattern %r".mod (((unsupported)).apply ((xfilename)) ((xpattern))))))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xfn)).apply ((xfilename)) ((xpattern)))) (("expected %r not to match pattern %r".mod (((unsupported)).apply ((xfilename)) ((xpattern))))))
                xtest_fnmatch.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write ((xself).xcheck_match)
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("abc"))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("?*?"))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("???*"))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("*???"))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("???"))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("*"))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("ab[cd]"))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("ab[!de]"))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("ab[de]") (FALSE))
                        bogusForceDataize.write (((xcheck)).apply ("a") ("??") (FALSE))
                        bogusForceDataize.write (((xcheck)).apply ("a") ("b") (FALSE))
                        bogusForceDataize.write (((xcheck)).apply ("\\") ("[]"))
                        bogusForceDataize.write (((xcheck)).apply ("a") ("[!]"))
                        bogusForceDataize.write (((xcheck)).apply ("\\") ("[!]") (FALSE))
                        bogusForceDataize.write (((xcheck)).apply ("foonbar") ("foo*"))
                        bogusForceDataize.write (((xcheck)).apply ("foonbarn") ("foo*"))
                        bogusForceDataize.write (((xcheck)).apply ("nfoo") ("foo*") (FALSE))
                        bogusForceDataize.write (((xcheck)).apply ("n") ("*"))
                xtest_mix_bytes_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfnmatch)) ("test") ("*"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfnmatch)) ("test") ("*"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfnmatchcase)) ("test") ("*"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfnmatchcase)) ("test") ("*"))
                xtest_fnmatchcase.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write ((xself).xcheck_match)
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("abc") (TRUE) ((xfnmatchcase)))
                        bogusForceDataize.write (((xcheck)).apply ("AbC") ("abc") (FALSE) ((xfnmatchcase)))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("AbC") (FALSE) ((xfnmatchcase)))
                        bogusForceDataize.write (((xcheck)).apply ("AbC") ("AbC") (TRUE) ((xfnmatchcase)))
                        bogusForceDataize.write (((xcheck)).apply ("usr/bin") ("usr/bin") (TRUE) ((xfnmatchcase)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply)) ("usr/bin") (FALSE) ((xfnmatchcase)))
                        bogusForceDataize.write (((xcheck)).apply ("usr/bin") ((((unsupported)).apply)) (FALSE) ((xfnmatchcase)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) (TRUE) ((xfnmatchcase)))
                xtest_bytes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_match)).apply ("test") ("te*"))
                        bogusForceDataize.write ((((xself).xcheck_match)).apply ("testxff") ("te*xff"))
                        bogusForceDataize.write ((((xself).xcheck_match)).apply ("foonbar") ("foo*"))
                xtest_case.write
                  [xself]
                    memory > xcheck
                    memory > xignorecase
                    seq > @
                      seq
                        xignorecase.write ((((((xos).xpath).xnormcase)).apply ("ABC")).eq (((((xos).xpath).xnormcase)).apply ("abc")))
                        xcheck.write ((xself).xcheck_match)
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("abc"))
                        bogusForceDataize.write (((xcheck)).apply ("AbC") ("abc") ((xignorecase)))
                        bogusForceDataize.write (((xcheck)).apply ("abc") ("AbC") ((xignorecase)))
                        bogusForceDataize.write (((xcheck)).apply ("AbC") ("AbC"))
                xtest_sep.write
                  [xself]
                    memory > xnormsep
                    memory > xcheck
                    seq > @
                      seq
                        xnormsep.write ((((((xos).xpath).xnormcase)).apply ("\\")).eq (((((xos).xpath).xnormcase)).apply ("/")))
                        xcheck.write ((xself).xcheck_match)
                        bogusForceDataize.write (((xcheck)).apply ("usr/bin") ("usr/bin"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply)) ("usr/bin") ((xnormsep)))
                        bogusForceDataize.write (((xcheck)).apply ("usr/bin") ((((unsupported)).apply)) ((xnormsep)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_warnings.write
                  [xself]
                    memory > xcheck
                    seq > @
                      (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                        seq
                          bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("error") ((xWarning)))
                          xcheck.write ((xself).xcheck_match)
                          bogusForceDataize.write (((xcheck)).apply ("[") ("[[]"))
                          bogusForceDataize.write (((xcheck)).apply ("&") ("[a&&b]"))
                          bogusForceDataize.write (((xcheck)).apply ("|") ("[a||b]"))
                          bogusForceDataize.write (((xcheck)).apply ("~") ("[a~~b]"))
                          bogusForceDataize.write (((xcheck)).apply (",") ("[a-z+--A-Z]"))
                          bogusForceDataize.write (((xcheck)).apply (".") ("[a-z--/A-Z]"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_translate.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtranslate)).apply ("*"))) ("(?s:.*)Z"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtranslate)).apply ("?"))) ("(?s:.)Z"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtranslate)).apply ("a?b*"))) ("(?s:a.b.*)Z"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtranslate)).apply ("[abc]"))) ("(?s:[abc])Z"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtranslate)).apply ("[]]"))) ("(?s:[]])Z"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtranslate)).apply ("[!x]"))) ("(?s:[^x])Z"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtranslate)).apply ("[^x]"))) ("(?s:[^x])Z"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtranslate)).apply ("[x"))) ("(?s:[x)Z"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_filter.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilter)).apply ((((unsupported)).apply ("Python") ("Ruby") ("Perl") ("Tcl"))) ("P*"))) ((((unsupported)).apply ("Python") ("Perl"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilter)).apply ((((unsupported)).apply ("Python") ("Ruby") ("Perl") ("Tcl"))) ("P*"))) ((((unsupported)).apply ("Python") ("Perl"))))
                xtest_mix_bytes_str.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilter)) ((((unsupported)).apply ("test"))) ("*"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilter)) ((((unsupported)).apply ("test"))) ("*"))
                xtest_case.write
                  [xself]
                    memory > xignorecase
                    seq > @
                      seq
                        xignorecase.write ((((((xos).xpath).xnormcase)).apply ("P")).eq (((((xos).xpath).xnormcase)).apply ("p")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilter)).apply ((((unsupported)).apply ("Test.py") ("Test.rb") ("Test.PL"))) ("*.p*"))) (((xignorecase).if (((unsupported)).apply ("Test.py") ("Test.PL")) (((unsupported)).apply ("Test.py")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilter)).apply ((((unsupported)).apply ("Test.py") ("Test.rb") ("Test.PL"))) ("*.P*"))) (((xignorecase).if (((unsupported)).apply ("Test.py") ("Test.PL")) (((unsupported)).apply ("Test.PL")))))
                xtest_sep.write
                  [xself]
                    memory > xnormsep
                    seq > @
                      seq
                        xnormsep.write ((((((xos).xpath).xnormcase)).apply ("\\")).eq (((((xos).xpath).xnormcase)).apply ("/")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilter)).apply ((((unsupported)).apply ("usr/bin") ("usr") ((((unsupported)).apply)))) ("usr/*"))) (((xnormsep).if (((unsupported)).apply ("usr/bin") ((((unsupported)).apply))) (((unsupported)).apply ("usr/bin")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfilter)).apply ((((unsupported)).apply ("usr/bin") ("usr") ((((unsupported)).apply)))) ((((unsupported)).apply)))) (((xnormsep).if (((unsupported)).apply ("usr/bin") ((((unsupported)).apply))) (((unsupported)).apply ((((unsupported)).apply))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)