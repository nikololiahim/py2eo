memory > xAttributeError
memory > xDesiredCapabilities
memory > ximport_string
memory > xSeleniumTestCaseBase
memory > xvalue
memory > xhasattr
memory > xtag
memory > xcapfirst
memory > xwebdriver
memory > xcallable
memory > xany
memory > xtype
memory > xsuper
memory > xsys
memory > xgetattr
memory > xLiveServerTestCase
memory > xsetattr
memory > xunittest
[] > selenium
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcreate_options
        memory > ximplicit_wait
        memory > ximport_webdriver
        memory > xsetUpClass
        memory > xbrowsers
        memory > xexternal_host
        memory > xlive_server_url
        memory > xheadless
        memory > xdisable_implicit_wait
        memory > ximport_options
        memory > x__new__
        memory > xselenium_hub
        memory > xallowed_host
        memory > x_tearDownClassInternal
        memory > xbrowser
        memory > xcreate_webdriver
        memory > xget_capability
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((((xtype)).apply ((xLiveServerTestCase)))))
              seq
                xbrowsers.write (((unsupported)).apply)
                xselenium_hub.write "None: is there a None literal in the EO language?"
                xexternal_host.write "None: is there a None literal in the EO language?"
                xbrowser.write "None: is there a None literal in the EO language?"
                xheadless.write FALSE
                x__new__.write
                  [xcls xname xbases xattrs]
                    memory > xbrowser_test_class
                    memory > xtest_class
                    memory > xfirst_browser
                    memory > xhost
                    memory > xmodule
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xtest_class.write ((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xname)) ((xbases)) ((xattrs)))
                        (((xtest_class).xbrowser).or ((((xany)).apply ((((unsupported)).apply ((((((xname).xstartswith)).apply ("test")).and (((xcallable)).apply ((xvalue))))) ((((unsupported)).apply ((xname)) ((xvalue)))) (((((xattrs).xitems)).apply))))).not)).if
                          (((unsupported)).apply ((xtest_class)))
                          ((xtest_class).xbrowsers).if
                            seq
                              xfirst_browser.write (((unsupported)).apply (((xtest_class).xbrowsers)) (0))
                              (((unsupported)).apply (((xtest_class).xbrowser)) ((xfirst_browser)))
                              xhost.write ((((xtest_class).xselenium_hub).not).if ((xtest_class).xhost) "0.0.0.0")
                              (((unsupported)).apply (((xtest_class).xhost)) ((xhost)))
                              (((unsupported)).apply (((xtest_class).xexternal_host)) (((xcls).xexternal_host)))
                              xmodule.write (((unsupported)).apply (((xsys).xmodules)) (((xtest_class).x__module__)))
                              (((unsupported)).apply ((xbrowser)) ((((unsupported)).apply (((xtest_class).xbrowsers)) ((((unsupported)).apply (1))))))
                                seq
                                  xbrowser_test_class.write ((((xcls).x__new__)).apply ((xcls)) (("%s%s".mod (((unsupported)).apply ((((xcapfirst)).apply ((xbrowser)))) ((xname))))) ((((unsupported)).apply ((xtest_class)))) ((((unsupported)).apply ("browser") ((xbrowser)) ("host") ((xhost)) ("external_host") (((xcls).xexternal_host)) ("__module__") (((xtest_class).x__module__)))))
                                  bogusForceDataize.write (((xsetattr)).apply ((xmodule)) (((xbrowser_test_class).x__name__)) ((xbrowser_test_class)))
                              (((unsupported)).apply ((xtest_class)))
                        (((unsupported)).apply (((((((xunittest).xskip)).apply ("No browsers specified."))).apply ((xtest_class)))))
                ximport_webdriver.write
                  [xcls xbrowser]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((ximport_string)).apply (("selenium.webdriver.%s.webdriver.WebDriver".mod (xbrowser))))))
                ximport_options.write
                  [xcls xbrowser]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((ximport_string)).apply (("selenium.webdriver.%s.options.Options".mod (xbrowser))))))
                xget_capability.write
                  [xcls xbrowser]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xgetattr)).apply ((xDesiredCapabilities)) (((((xbrowser).xupper)).apply)))))
                xcreate_options.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write ((((((xself).ximport_options)).apply (((xself).xbrowser)))).apply)
                        ((xself).xheadless).if
                          (((unsupported)).apply ((xAttributeError)))
                            (((unsupported)).apply (((xoptions).xheadless)) (TRUE))
                        (((unsupported)).apply ((xoptions)))
                xcreate_webdriver.write
                  [xself]
                    seq > @
                      seq
                        ((xself).xselenium_hub).if
                          seq
                            (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply (((xwebdriver).xRemote)) (((xself).xselenium_hub)) (((((xself).xget_capability)).apply (((xself).xbrowser)))))))
                        (((unsupported)).apply ((((unsupported)).apply (((((xself).ximport_webdriver)).apply (((xself).xbrowser)))) (((((xself).xcreate_options)).apply)))))
            (((unsupported)).apply ((xLiveServerTestCase)) ((xSeleniumTestCaseBase)) ((((xtag)).apply ("selenium"))))
              seq
                ximplicit_wait.write 10
                xexternal_host.write "None: is there a None literal in the EO language?"
                xlive_server_url.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("http://%s:%s".mod (((unsupported)).apply ((((xcls).xexternal_host).or ((xcls).xhost))) ((((xcls).xserver_thread).xport))))))
                xallowed_host.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xcls).xexternal_host).or ((xcls).xhost))))
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xselenium)) (((((xcls).xcreate_webdriver)).apply)))
                        bogusForceDataize.write (((((xcls).xselenium).ximplicitly_wait)).apply (((xcls).ximplicit_wait)))
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUpClass)).apply)
                x_tearDownClassInternal.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((xhasattr)).apply ((xcls)) ("selenium")).if
                          bogusForceDataize.write (((((xcls).xselenium).xquit)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x_tearDownClassInternal)).apply)
                xdisable_implicit_wait.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write (((((xself).xselenium).ximplicitly_wait)).apply (0))
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                          bogusForceDataize.write (((((xself).xselenium).ximplicitly_wait)).apply (((xself).ximplicit_wait)))