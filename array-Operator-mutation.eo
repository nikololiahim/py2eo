memory > xrhs_params
memory > xValueError
memory > xIntegerField
memory > xint
memory > xhasattr
memory > xsuper
memory > xtuple
memory > xargs
memory > xjson
memory > xkwargs
memory > xIndexTransformFactory
memory > xArrayField
memory > xAttributeError
memory > xSliceTransformFactory
memory > xlist
memory > xindex
memory > xenumerate
memory > xFunc
memory > xprefix_validation_error
memory > xstr
memory > xchecks
memory > xerror
memory > xSliceTransform
memory > xSimpleArrayField
memory > xlookups
memory > xIn
memory > xAttributeSetter
memory > xvalue
memory > xpart
memory > xlhs
memory > xKeyError
memory > xField
memory > xexceptions
memory > xrhs
memory > xIndexTransform
memory > xExact
memory > xCheckFieldDefaultMixin
memory > xValue
memory > xTransform
memory > xi
memory > xparams
memory > xArrayRHSMixin
memory > xitem
memory > xval
memory > xArrayMaxLengthValidator
memory > xname
memory > xisinstance
memory > xlen
[] > array
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xformfield
        memory > x__call__
        memory > xget_db_prep_value
        memory > xcheck
        memory > xvalidate
        memory > xrun_validators
        memory > x__init__
        memory > x_choices_is_value
        memory > xdefault_error_messages
        memory > xset_attributes_from_name
        memory > xvalue_to_string
        memory > xget_prep_lookup
        memory > xdescription
        memory > xcast_db_type
        memory > x_
        memory > xempty_strings_allowed
        memory > xas_sql
        memory > xto_python
        memory > xlookup_name
        memory > x_from_db_value
        memory > x__all__
        memory > x_default_hint
        memory > xdb_type
        memory > xdeconstruct
        memory > xget_placeholder
        memory > xprocess_rhs
        memory > xoutput_field
        memory > xget_transform
        memory > xmodel
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("ArrayField"))
            (((unsupported)).apply ((xCheckFieldDefaultMixin)) ((xField)))
              seq
                xempty_strings_allowed.write FALSE
                xdefault_error_messages.write (((unsupported)).apply ("item_invalid") ((((x_)).apply ("Item %(nth)s in the array did not validate:"))) ("nested_array_mismatch") ((((x_)).apply ("Nested arrays must have the same length."))))
                x_default_hint.write (((unsupported)).apply ("list") ("[]"))
                x__init__.write
                  [xself xbase_field xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xbase_field)) ((xbase_field)))
                        (((unsupported)).apply (((xself).xsize)) ((xsize)))
                        ((xself).xsize).if
                          (((unsupported)).apply (((xself).xdefault_validators)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xdefault_validators)))) ((((xArrayMaxLengthValidator)).apply (((xself).xsize)))))))
                        (((xhasattr)).apply (((xself).xbase_field)) ("from_db_value")).if
                          (((unsupported)).apply (((xself).xfrom_db_value)) (((xself).x_from_db_value)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xkwargs)))))
                xmodel.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("model"))))
                          (((unsupported)).apply ((((xAttributeError)).apply (("'%s' object has no attribute 'model'".mod (((xself).x__class__).x__name__))))))
                xmodel.write
                  [xself xmodel]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("model"))) ((xmodel)))
                        (((unsupported)).apply ((((xself).xbase_field).xmodel)) ((xmodel)))
                x_choices_is_value.write
                  [xcls xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xlist)) ((xtuple))))).or ((((((xsuper)).apply).x_choices_is_value)).apply ((xvalue))))))
                xcheck.write
                  [xself]
                    memory > xerrors
                    memory > xmessages
                    memory > xbase_errors
                    seq > @
                      (((unsupported)).apply)
                        xerrors.write ((((((xsuper)).apply).xcheck)).apply ((((unsupported)).apply ((xkwargs)))))
                        (((xself).xbase_field).xremote_field).if
                          bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply (((xchecks).xError)) ("Base field for array cannot be a related field.") ((xself)) ("postgres.E002"))))
                          seq
                            xbase_errors.write (((((xself).xbase_field).xcheck)).apply)
                            (xbase_errors).if
                              seq
                                xmessages.write ((("n    ".xjoin)).apply ((((unsupported)).apply (("%s (%s)".mod (((unsupported)).apply (((xerror).xmsg)) (((xerror).xid))))) ((xerror)) ((xbase_errors)))))
                                bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply (((xchecks).xError)) (("Base field for array has errors:n    %s".mod (xmessages))) ((xself)) ("postgres.E001"))))
                        (((unsupported)).apply ((xerrors)))
                xset_attributes_from_name.write
                  [xself xname]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xset_attributes_from_name)).apply ((xname)))
                        bogusForceDataize.write (((((xself).xbase_field).xset_attributes_from_name)).apply ((xname)))
                xdescription.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("Array of %s".mod (((xself).xbase_field).xdescription))))
                xdb_type.write
                  [xself xconnection]
                    memory > xsize
                    seq > @
                      seq
                        xsize.write (((xself).xsize).or "")
                        (((unsupported)).apply (("%s[%s]".mod (((unsupported)).apply ((((((xself).xbase_field).xdb_type)).apply ((xconnection)))) ((xsize))))))
                xcast_db_type.write
                  [xself xconnection]
                    memory > xsize
                    seq > @
                      seq
                        xsize.write (((xself).xsize).or "")
                        (((unsupported)).apply (("%s[%s]".mod (((unsupported)).apply ((((((xself).xbase_field).xcast_db_type)).apply ((xconnection)))) ((xsize))))))
                xget_placeholder.write
                  [xself xvalue xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply (((("%s::{}".xformat)).apply (((((xself).xdb_type)).apply ((xconnection)))))))
                xget_db_prep_value.write
                  [xself xvalue xconnection xprepared]
                    seq > @
                      (((unsupported)).apply)
                        (((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xbase_field).xget_db_prep_value)) ((xi)) ((xconnection)) (FALSE))) ((xi)) ((xvalue)))))
                        (((unsupported)).apply ((xvalue)))
                xdeconstruct.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((((xsuper)).apply).xdeconstruct)).apply)))
                        ((xpath).eq "django.contrib.postgres.fields.array.ArrayField").if
                          xpath.write "django.contrib.postgres.fields.ArrayField"
                        bogusForceDataize.write ((((xkwargs).xupdate)).apply ((((unsupported)).apply ("base_field") ((((((xself).xbase_field).xclone)).apply)) ("size") (((xself).xsize)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))))
                xto_python.write
                  [xself xvalue]
                    memory > xvals
                    seq > @
                      seq
                        (((xisinstance)).apply ((xvalue)) ((xstr))).if
                          seq
                            xvals.write ((((xjson).xloads)).apply ((xvalue)))
                            xvalue.write (((unsupported)).apply ((((((xself).xbase_field).xto_python)).apply ((xval)))) ((xval)) ((xvals)))
                        (((unsupported)).apply ((xvalue)))
                x_from_db_value.write
                  [xself xvalue xexpression xconnection]
                    seq > @
                      seq
                        (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xvalue)))
                        (((unsupported)).apply ((((unsupported)).apply ((((((xself).xbase_field).xfrom_db_value)).apply ((xitem)) ((xexpression)) ((xconnection)))) ((xitem)) ((xvalue)))))
                xvalue_to_string.write
                  [xself xobj]
                    memory > xbase_field
                    memory > xvals
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply)
                        xvals.write ((((xself).xvalue_from_object)).apply ((xobj)))
                        xbase_field.write ((xself).xbase_field)
                        (((unsupported)).apply ((xval)) ((xvals)))
                          (((unsupported)).apply ((xval)) ("None: is there a None literal in the EO language?")).if
                            bogusForceDataize.write ((((xvalues).xappend)).apply ("None: is there a None literal in the EO language?"))
                            seq
                              xobj.write (((xAttributeSetter)).apply (((xbase_field).xattname)) ((xval)))
                              bogusForceDataize.write ((((xvalues).xappend)).apply (((((xbase_field).xvalue_to_string)).apply ((xobj)))))
                        (((unsupported)).apply (((((xjson).xdumps)).apply ((xvalues)))))
                xget_transform.write
                  [xself xname]
                    memory > xend
                    memory > xindex
                    memory > xstart
                    memory > xtransform
                    seq > @
                      seq
                        xtransform.write ((((((xsuper)).apply).xget_transform)).apply ((xname)))
                        (xtransform).if
                          (((unsupported)).apply ((xtransform)))
                        (((unsupported)).apply ("_") ((xname))).if
                          (((unsupported)).apply ((xValueError)))
                            xindex.write (((xint)).apply ((xname)))
                            seq
                              (((unsupported)).apply ((xindex)) (1))
                              (((unsupported)).apply ((((xIndexTransformFactory)).apply ((xindex)) (((xself).xbase_field)))))
                        (((unsupported)).apply ((xValueError)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xend)))) (((((xname).xsplit)).apply ("_"))))
                            xstart.write ((((xint)).apply ((xstart))).sub 1)
                            xend.write (((xint)).apply ((xend)))
                          (((unsupported)).apply ((((xSliceTransformFactory)).apply ((xstart)) ((xend)))))
                xvalidate.write
                  [xself xvalue xmodel_instance]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xvalidate)).apply ((xvalue)) ((xmodel_instance)))
                        (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((xpart)))) ((((xenumerate)).apply ((xvalue)))))
                          (((unsupported)).apply (((xexceptions).xValidationError)))
                            bogusForceDataize.write (((((xself).xbase_field).xvalidate)).apply ((xpart)) ((xmodel_instance)))
                            (((unsupported)).apply ((((unsupported)).apply ((xprefix_validation_error)) ((xerror)) ((((unsupported)).apply (((xself).xerror_messages)) ("item_invalid"))) ("item_invalid") ((((unsupported)).apply ("nth") (((xindex).sub 1)))))))
                        (((xisinstance)).apply (((xself).xbase_field)) ((xArrayField))).if
                          ((((xlen)).apply ((((unsupported)).apply ((((xlen)).apply ((xi)))) ((xi)) ((xvalue))))).greater 1).if
                            (((unsupported)).apply ((((unsupported)).apply (((xexceptions).xValidationError)) ((((unsupported)).apply (((xself).xerror_messages)) ("nested_array_mismatch"))) ("nested_array_mismatch"))))
                xrun_validators.write
                  [xself xvalue]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xrun_validators)).apply ((xvalue)))
                        (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((xpart)))) ((((xenumerate)).apply ((xvalue)))))
                          (((unsupported)).apply (((xexceptions).xValidationError)))
                            bogusForceDataize.write (((((xself).xbase_field).xrun_validators)).apply ((xpart)))
                            (((unsupported)).apply ((((unsupported)).apply ((xprefix_validation_error)) ((xerror)) ((((unsupported)).apply (((xself).xerror_messages)) ("item_invalid"))) ("item_invalid") ((((unsupported)).apply ("nth") (((xindex).sub 1)))))))
                xformfield.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xsuper)).apply).xformfield)).apply ((((unsupported)).apply ((((unsupported)).apply ("form_class") ((xSimpleArrayField)) ("base_field") ((((((xself).xbase_field).xformfield)).apply)) ("max_length") (((xself).xsize)) ((xkwargs)))))))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xlhs xrhs]
                    memory > xfield
                    memory > xvalue
                    memory > xexpressions
                    seq > @
                      seq
                        (((xisinstance)).apply ((xrhs)) ((((unsupported)).apply ((xtuple)) ((xlist))))).if
                          seq
                            xexpressions.write (((unsupported)).apply)
                            (((unsupported)).apply ((xvalue)) ((xrhs)))
                              seq
                                ((((xhasattr)).apply ((xvalue)) ("resolve_expression")).not).if
                                  seq
                                    xfield.write ((xlhs).xoutput_field)
                                    xvalue.write (((xValue)).apply ((((((xfield).xbase_field).xget_prep_value)).apply ((xvalue)))))
                                bogusForceDataize.write ((((xexpressions).xappend)).apply ((xvalue)))
                            xrhs.write (((unsupported)).apply ((xFunc)) ((((unsupported)).apply ((xexpressions)))) ("ARRAY") ("%(function)s[%(expressions)s]"))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xlhs)) ((xrhs)))
                xprocess_rhs.write
                  [xself xcompiler xconnection]
                    memory > xcast_type
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xrhs)) ((xrhs_params)))) (((((((xsuper)).apply).xprocess_rhs)).apply ((xcompiler)) ((xconnection)))))
                        xcast_type.write ((((((xself).xlhs).xoutput_field).xcast_db_type)).apply ((xconnection)))
                        (((unsupported)).apply ((((unsupported)).apply (("%s::%s".mod (((unsupported)).apply ((xrhs)) ((xcast_type))))) ((xrhs_params)))))
            (((unsupported)).apply ((xArrayRHSMixin)) (((xlookups).xDataContains)) (((xArrayField).xregister_lookup)))
            (((unsupported)).apply ((xArrayRHSMixin)) (((xlookups).xContainedBy)) (((xArrayField).xregister_lookup)))
            (((unsupported)).apply ((xArrayRHSMixin)) ((xExact)) (((xArrayField).xregister_lookup)))
            (((unsupported)).apply ((xArrayRHSMixin)) (((xlookups).xOverlap)) (((xArrayField).xregister_lookup)))
            (((unsupported)).apply ((xTransform)) (((xArrayField).xregister_lookup)))
              seq
                xlookup_name.write "len"
                xoutput_field.write (((xIntegerField)).apply)
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xlhs)) ((xparams)))) (((((xcompiler).xcompile)).apply (((xself).xlhs)))))
                        (((unsupported)).apply ((((unsupported)).apply (("CASE WHEN %(lhs)s IS NULL THEN NULL ELSE coalesce(array_length(%(lhs)s, 1), 0) END".mod (((unsupported)).apply ("lhs") ((xlhs))))) ((xparams)))))
            (((unsupported)).apply ((xIn)) (((xArrayField).xregister_lookup)))
              xget_prep_lookup.write
                [xself]
                  memory > xvalues
                  memory > xprepared_values
                  seq > @
                    seq
                      xvalues.write ((((((xsuper)).apply).xget_prep_lookup)).apply)
                      (((xhasattr)).apply ((xvalues)) ("resolve_expression")).if
                        (((unsupported)).apply ((xvalues)))
                      xprepared_values.write (((unsupported)).apply)
                      (((unsupported)).apply ((xvalue)) ((xvalues)))
                        (((xhasattr)).apply ((xvalue)) ("resolve_expression")).if
                          bogusForceDataize.write ((((xprepared_values).xappend)).apply ((xvalue)))
                          bogusForceDataize.write ((((xprepared_values).xappend)).apply ((((xtuple)).apply ((xvalue)))))
                      (((unsupported)).apply ((xprepared_values)))
            (((unsupported)).apply ((xTransform)))
              seq
                x__init__.write
                  [xself xindex xbase_field]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xindex)) ((xindex)))
                        (((unsupported)).apply (((xself).xbase_field)) ((xbase_field)))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xlhs)) ((xparams)))) (((((xcompiler).xcompile)).apply (((xself).xlhs)))))
                        (((unsupported)).apply ((((unsupported)).apply (("%s[%%s]".mod (xlhs))) (((xparams).sub (((unsupported)).apply (((xself).xindex))))))))
                xoutput_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xbase_field)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xindex xbase_field]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xindex)) ((xindex)))
                        (((unsupported)).apply (((xself).xbase_field)) ((xbase_field)))
                x__call__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xIndexTransform)).apply (((xself).xindex)) (((xself).xbase_field)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
            (((unsupported)).apply ((xTransform)))
              seq
                x__init__.write
                  [xself xstart xend]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xstart)) ((xstart)))
                        (((unsupported)).apply (((xself).xend)) ((xend)))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xlhs)) ((xparams)))) (((((xcompiler).xcompile)).apply (((xself).xlhs)))))
                        (((unsupported)).apply ((((unsupported)).apply (("%s[%%s:%%s]".mod (xlhs))) (((xparams).sub (((unsupported)).apply (((xself).xstart)) (((xself).xend))))))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xstart xend]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xstart)) ((xstart)))
                        (((unsupported)).apply (((xself).xend)) ((xend)))
                x__call__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xSliceTransform)).apply (((xself).xstart)) (((xself).xend)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))