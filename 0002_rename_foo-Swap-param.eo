memory > xAssertionError
memory > xmigrations
[] > 0002_rename_foo
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xoperations
        memory > xdependencies
        memory > xassert_foo_contenttype_not_cached
        seq > @
          seq
            (((unsupported)).apply)
            xassert_foo_contenttype_not_cached.write
              [xapps xschema_editor]
                memory > xContentType
                memory > xcontent_type
                seq > @
                  seq
                    xContentType.write ((((xapps).xget_model)).apply ("contenttypes") ("ContentType"))
                    (((unsupported)).apply (((xContentType).xDoesNotExist)))
                      xcontent_type.write (((((xContentType).xobjects).xget_by_natural_key)).apply ("foo") ("contenttypes_tests"))
                      (((((((unsupported)).apply ((((xContentType).xobjects).xfilter)) ("contenttypes_tests") ("foo")).xexists)).apply).not).if
                        (((unsupported)).apply ((((xAssertionError)).apply ("The contenttypes_tests.Foo ContentType should not be cached."))))
                        (((xcontent_type).xmodel).neq "foo").if
                          (((unsupported)).apply ((((xAssertionError)).apply ("The cached contenttypes_tests.Foo ContentType should have its model set to 'foo'."))))
            (((unsupported)).apply (((xmigrations).xMigration)))
              seq
                xdependencies.write (((unsupported)).apply ((((unsupported)).apply ("contenttypes_tests") ("0001_initial"))))
                xoperations.write (((unsupported)).apply (((((xmigrations).xRenameModel)).apply ("Foo") ("RenamedFoo"))) (((((xmigrations).xRunPython)).apply ((xassert_foo_contenttype_not_cached)) ((((xmigrations).xRunPython).xnoop)))))