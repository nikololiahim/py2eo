memory > xhttp2time
memory > xCookieJar
memory > xlwp_cookie_str
memory > xCookie
memory > xversion
memory > xfloat
memory > xHeaderTests
memory > xDefaultCookiePolicy
memory > xreach
memory > xFakeResponse
memory > xrfc2965
memory > xfalse
memory > xtime2isoz
memory > xc
memory > xsplit_header_words
memory > xrfc2109_as_netscape
memory > xio
memory > xcookiejar_class
memory > xrequest_host
memory > xemail
memory > xrange
memory > xwhitespace
memory > xCookieTests
memory > xtest
memory > xurl
memory > xKeyError
memory > xurllib
memory > xDEFAULT_HTTP_PORT
memory > xrequest_port
memory > xtype_
memory > xopen
memory > xpath
memory > xLWPCookieTests
memory > xpathlib
memory > xtext
memory > xhdr
memory > xuser_domain_match
memory > xf
memory > xns
memory > xrepr
memory > xre
memory > xDateTimeTests
memory > xint
memory > xFileCookieJarTests
memory > xcookie
memory > xtime
memory > xparse_ns_headers
memory > xpseudo_tld
memory > xok
memory > xis_HDN
memory > xiso2time
memory > xarg
memory > xLoadError
memory > xjoin_header_words
memory > xs
memory > xOSError
memory > xos
memory > xescape_path
memory > xtraceback
memory > xtime2netscape
memory > xset_cookie_hdrs
memory > xunittest
memory > xLWPCookieJar
memory > xresult
memory > xexc
memory > xdomain_match
memory > xdomain
memory > xexpect
memory > xA
memory > xrequest_path
memory > xlen
memory > xMozillaCookieJar
memory > xTypeError
memory > x__name__
[] > test_http_cookiejar
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_secure
        memory > xtest_session_cookies
        memory > xtest_no_return_comment
        memory > xtest_Cookie_iterator
        memory > xtest_domain_block
        memory > xtest_path_prefix_match
        memory > xtest_bad_cookie_header
        memory > xtest_constructor_with_none
        memory > xtest_parse_ns_headers_version
        memory > xtest_iso2time_formats
        memory > xtest_url_encoding
        memory > xtest_time2netscape
        memory > xtest_netscape_example_1
        memory > xtest_join_header_words
        memory > x_interact
        memory > xinteract_netscape
        memory > xtest_split_header_words
        memory > xtest_missing_value
        memory > xtest_time2isoz
        memory > xtest_http2time
        memory > xtest_missing_final_slash
        memory > xtest_netscape_example_2
        memory > xtest_default_path
        memory > xtest_http2time_formats
        memory > xtest_bad_magic
        memory > xtest_lwp_valueless_cookie
        memory > xinteract_2965
        memory > xtest_parse_ns_headers
        memory > xinfo
        memory > xtest_ietf_example_1
        memory > xtest_expires
        memory > xtest_roundtrip
        memory > xtest_http2time_garbage
        memory > xtest_constructor_with_str
        memory > xtest_main
        memory > xtest_iso2time_garbage
        memory > xtest_iso2time
        memory > xtest_secure_block
        memory > xtest_is_HDN
        memory > xtest_quote_cookie_value
        memory > xtest_two_component_domain_ns
        memory > xtest_default_path_with_query
        memory > xtest_rfc2109_handling
        memory > xtest_domain_allow
        memory > xtest_ns_parser
        memory > xtest_request_host
        memory > xtest_port_mirror
        memory > xtest_domain_match
        memory > xtest_escape_path
        memory > xtest_ietf_example_2
        memory > xtest_rejection
        memory > xtest_strict_domain
        memory > xtest_constructor_with_other_types
        memory > xtest_iso2time_performance_regression
        memory > xtest_ns_parser_special_names
        memory > xtest_request_port
        memory > xtest_path_mirror
        memory > xtest_parse_ns_headers_special_names
        memory > xtest_http2time_redos_regression_actually_completes
        memory > xtest_mozilla
        memory > xtest_custom_secure_protocols
        memory > xtest_two_component_domain_rfc2965
        memory > xtest_intranet_domains_2965
        memory > x__init__
        memory > xtest_request_path
        memory > xtest_intranet_domains_ns
        memory > xtest_domain_mirror
        memory > xtest_domain_return_ok
        memory > xtest_empty_path
        memory > xtest_constructor_with_path_like
        memory > xtest_wrong_domain
        memory > xtest_netscape_misc
        memory > xtest_reach
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_time2isoz.write
                  [xself]
                    memory > xbase
                    memory > xaz
                    memory > xday
                    memory > xbz
                    seq > @
                      seq
                        xbase.write 1019227000
                        xday.write (24.mul 3600)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtime2isoz)).apply ((xbase)))) ("2002-04-19 14:36:40Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtime2isoz)).apply (((xbase).add (xday))))) ("2002-04-20 14:36:40Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtime2isoz)).apply (((xbase).add (2.mul (xday)))))) ("2002-04-21 14:36:40Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtime2isoz)).apply (((xbase).add (3.mul (xday)))))) ("2002-04-22 14:36:40Z"))
                        xaz.write (((xtime2isoz)).apply)
                        xbz.write (((xtime2isoz)).apply (500000))
                        (((unsupported)).apply ((xtext)) ((((unsupported)).apply ((xaz)) ((xbz)))))
                          bogusForceDataize.write ((((xself).xassertRegex)).apply ((xtext)) ("^d{4}-dd-dd dd:dd:ddZ$") (("bad time2isoz format: %s %s".mod (((unsupported)).apply ((xaz)) ((xbz))))))
                xtest_time2netscape.write
                  [xself]
                    memory > xbase
                    memory > xaz
                    memory > xday
                    memory > xbz
                    seq > @
                      seq
                        xbase.write 1019227000
                        xday.write (24.mul 3600)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtime2netscape)).apply ((xbase)))) ("Fri, 19-Apr-2002 14:36:40 GMT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtime2netscape)).apply (((xbase).add (xday))))) ("Sat, 20-Apr-2002 14:36:40 GMT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtime2netscape)).apply (((xbase).add (2.mul (xday)))))) ("Sun, 21-Apr-2002 14:36:40 GMT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtime2netscape)).apply (((xbase).add (3.mul (xday)))))) ("Mon, 22-Apr-2002 14:36:40 GMT"))
                        xaz.write (((xtime2netscape)).apply)
                        xbz.write (((xtime2netscape)).apply (500000))
                        (((unsupported)).apply ((xtext)) ((((unsupported)).apply ((xaz)) ((xbz)))))
                          bogusForceDataize.write ((((xself).xassertRegex)).apply ((xtext)) ("[a-zA-Z]{3}, d{2}-[a-zA-Z]{3}-d{4} d{2}:d{2}:d{2} GMT$") (("bad time2netscape format: %s %s".mod (((unsupported)).apply ((xaz)) ((xbz))))))
                xtest_http2time.write
                  [xself]
                    memory > xparse_date
                    seq > @
                      seq
                        xparse_date.write
                          [xtext]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (((((xtime).xgmtime)).apply ((((xhttp2time)).apply ((xtext)))))) ((((unsupported)).apply (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_date)).apply ("01 Jan 2001"))) ((((unsupported)).apply (2001) (1) (1) (0) (0) (0.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_date)).apply ("03-Feb-20"))) ((((unsupported)).apply (2020) (2) (3) (0) (0) (0.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_date)).apply ("03-Feb-98"))) ((((unsupported)).apply (1998) (2) (3) (0) (0) (0.0))))
                xtest_http2time_formats.write
                  [xself]
                    memory > xresult
                    memory > xtests
                    memory > xexpected
                    memory > xtest_t
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ("Thu, 03 Feb 1994 00:00:00 GMT") ("Thursday, 03-Feb-94 00:00:00 GMT") ("Thursday, 03-Feb-1994 00:00:00 GMT") ("03 Feb 1994 00:00:00 GMT") ("03-Feb-94 00:00:00 GMT") ("03-Feb-1994 00:00:00 GMT") ("03-Feb-1994 00:00 GMT") ("03-Feb-1994 00:00") ("02-Feb-1994 24:00") ("03-Feb-94") ("03-Feb-1994") ("03 Feb 1994") ("  03   Feb   1994  0:00  ") ("  03-Feb-1994  "))
                        xtest_t.write 760233600
                        xresult.write (((xtime2isoz)).apply ((xtest_t)))
                        xexpected.write "1994-02-03 00:00:00Z"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpected)) (("%s  =>  '%s' (%s)".mod (((unsupported)).apply ((xtest_t)) ((xresult)) ((xexpected))))))
                        (((unsupported)).apply ((xs)) ((xtests)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhttp2time)).apply ((xs)))) ((xtest_t)) ((xs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhttp2time)).apply (((((xs).xlower)).apply)))) ((xtest_t)) (((((xs).xlower)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhttp2time)).apply (((((xs).xupper)).apply)))) ((xtest_t)) (((((xs).xupper)).apply)))
                xtest_http2time_garbage.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtest)) ((((unsupported)).apply ("") ("Garbage") ("Mandag 16. September 1996") ("01-00-1980") ("01-13-1980") ("00-01-1980") ("32-01-1980") ("01-01-1980 25:00:00") ("01-01-1980 00:61:00") ("01-01-1980 00:00:62") ("08-Oct-3697739") ("08-01-3697739") ("09 Feb 19942632 22:23:32 GMT") ("Wed, 09 Feb 1994834 22:23:32 GMT"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xhttp2time)).apply ((xtest)))) (("http2time(%s) is not Nonenhttp2time(test) %s".mod (((unsupported)).apply ((xtest)) ((((xhttp2time)).apply ((xtest))))))))
                xtest_http2time_redos_regression_actually_completes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xhttp2time)).apply (((("01 Jan 1970{}00:00:00 GMT!".xformat)).apply ((" ".mul (((unsupported)).apply (10) (5)))))))
                        bogusForceDataize.write (((xhttp2time)).apply (((("01 Jan 1970 00:00:00{}GMT!".xformat)).apply ((" ".mul (((unsupported)).apply (10) (5)))))))
                xtest_iso2time.write
                  [xself]
                    memory > xparse_date
                    seq > @
                      seq
                        xparse_date.write
                          [xtext]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (((((xtime).xgmtime)).apply ((((xiso2time)).apply ((xtext)))))) ((((unsupported)).apply (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_date)).apply ("19940203T141529Z"))) ((((unsupported)).apply (1994) (2) (3) (14) (15) (29))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_date)).apply ("1994-02-03 07:15:29 -0700"))) ((((unsupported)).apply (1994) (2) (3) (14) (15) (29))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_date)).apply ("1994-02-03 19:45:29 +0530"))) ((((unsupported)).apply (1994) (2) (3) (14) (15) (29))))
                xtest_iso2time_formats.write
                  [xself]
                    memory > xtest_t
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ("1994-02-03 00:00:00 -0000") ("1994-02-03 00:00:00 +0000") ("1994-02-03 00:00:00") ("1994-02-03") ("1994-02-03T00:00:00") ("19940203") ("1994-02-02 24:00:00") ("19940203T000000Z") ("  1994-02-03 ") ("  1994-02-03T00:00:00  "))
                        xtest_t.write 760233600
                        (((unsupported)).apply ((xs)) ((xtests)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xiso2time)).apply ((xs)))) ((xtest_t)) ((xs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xiso2time)).apply (((((xs).xlower)).apply)))) ((xtest_t)) (((((xs).xlower)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xiso2time)).apply (((((xs).xupper)).apply)))) ((xtest_t)) (((((xs).xupper)).apply)))
                xtest_iso2time_garbage.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtest)) ((((unsupported)).apply ("") ("Garbage") ("Thursday, 03-Feb-94 00:00:00 GMT") ("1980-00-01") ("1980-13-01") ("1980-01-00") ("1980-01-32") ("1980-01-01 25:00:00") ("1980-01-01 00:61:00") ("01-01-1980 00:00:62") ("01-01-1980T00:00:62") ("19800101T250000Z"))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xiso2time)).apply ((xtest)))) (("iso2time(%r)".mod (xtest))))
                xtest_iso2time_performance_regression.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xiso2time)).apply (((("1994-02-03{}14:15:29 -0100!".xformat)).apply ((" ".mul (((unsupported)).apply (10) (6)))))))
                        bogusForceDataize.write (((xiso2time)).apply (((("1994-02-03 14:15:29{}-0100!".xformat)).apply ((" ".mul (((unsupported)).apply (10) (6)))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_parse_ns_headers.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("expires") ((((unsupported)).apply)))) ((((unsupported)).apply ("version") ("0"))))))
                        (((unsupported)).apply ((xhdr)) ((((unsupported)).apply ("foo=bar; expires=01 Jan 2040 22:23:32 GMT") ("foo=bar; expires=\"01 Jan 2040 22:23:32 GMT\""))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_ns_headers)).apply ((((unsupported)).apply ((xhdr)))))) ((xexpected)))
                xtest_parse_ns_headers_version.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("version") ("1"))))))
                        (((unsupported)).apply ((xhdr)) ((((unsupported)).apply ("foo=bar; version=\"1\"") ("foo=bar; Version=\"1\""))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_ns_headers)).apply ((((unsupported)).apply ((xhdr)))))) ((xexpected)))
                xtest_parse_ns_headers_special_names.write
                  [xself]
                    memory > xexpected
                    memory > xhdr
                    seq > @
                      seq
                        xhdr.write "expires=01 Jan 2040 22:23:32 GMT"
                        xexpected.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("expires") ("01 Jan 2040 22:23:32 GMT"))) ((((unsupported)).apply ("version") ("0"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_ns_headers)).apply ((((unsupported)).apply ((xhdr)))))) ((xexpected)))
                xtest_join_header_words.write
                  [xself]
                    memory > xjoined
                    seq > @
                      seq
                        xjoined.write (((xjoin_header_words)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("bar") ("baz"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xjoined)) ("foo; bar=baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xjoin_header_words)).apply ((((unsupported)).apply ((((unsupported)).apply)))))) (""))
                xtest_split_header_words.write
                  [xself]
                    memory > xresult
                    memory > xtests
                    memory > xf
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("foo") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply ("foo=bar") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))))))))) ((((unsupported)).apply ("   foo   ") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply ("   foo=   ") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") (""))))))))) ((((unsupported)).apply ("   foo=") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") (""))))))))) ((((unsupported)).apply ("   foo=   ; ") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") (""))))))))) ((((unsupported)).apply ("   foo=   ; bar= baz ") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") (""))) ((((unsupported)).apply ("bar") ("baz"))))))))) ((((unsupported)).apply ("foo=bar bar=baz") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("bar") ("baz"))))))))) ((((unsupported)).apply ("foo= bar=baz") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar=baz"))))))))) ((((unsupported)).apply ("foo=bar;bar=baz") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("bar") ("baz"))))))))) ((((unsupported)).apply ("foo bar baz") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("bar") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("baz") ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply ("a, b, c") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("b") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ((((unsupported)).apply ("c") ("None: is there a None literal in the EO language?"))))))))) ((((unsupported)).apply ("foo; bar=baz, spam=, foo=\",;\"\", bar= ") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("bar") ("baz"))))) ((((unsupported)).apply ((((unsupported)).apply ("spam") (""))))) ((((unsupported)).apply ((((unsupported)).apply ("foo") (",;\""))))) ((((unsupported)).apply ((((unsupported)).apply ("bar") (""))))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xarg)) ((xexpect)))) ((xtests)))
                          seq
                            (((unsupported)).apply)
                              xresult.write (((xsplit_header_words)).apply ((((unsupported)).apply ((xarg)))))
                              seq
                                seq
                                  (((unsupported)).apply)
                                  (((unsupported)).apply)
                                xf.write ((((xio).xStringIO)).apply)
                                bogusForceDataize.write ((((xtraceback).xprint_exc)).apply ("None: is there a None literal in the EO language?") ((xf)))
                                xresult.write ("(error -- traceback follows)nn%s".mod ((((xf).xgetvalue)).apply))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpect)) (((((unsupported)).apply).mod (((unsupported)).apply ((xarg)) ((xexpect)) ((xresult))))))
                xtest_roundtrip.write
                  [xself]
                    memory > xinput
                    memory > xtests
                    memory > xres
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("foo") ("foo"))) ((((unsupported)).apply ("foo=bar") ("foo=bar"))) ((((unsupported)).apply ("   foo   ") ("foo"))) ((((unsupported)).apply ("foo=") ("foo=\"\""))) ((((unsupported)).apply ("foo=bar bar=baz") ("foo=bar; bar=baz"))) ((((unsupported)).apply ("foo=bar;bar=baz") ("foo=bar; bar=baz"))) ((((unsupported)).apply ("foo bar baz") ("foo; bar; baz"))) ((((unsupported)).apply ("foo=\"\"\" bar=\"\\\"") ("foo=\"\"\"; bar=\"\\\""))) ((((unsupported)).apply ("foo,,,bar") ("foo, bar"))) ((((unsupported)).apply ("foo=bar,bar=baz") ("foo=bar, bar=baz"))) ((((unsupported)).apply ("text/html; charset=iso-8859-1") ("text/html; charset=\"iso-8859-1\""))) ((((unsupported)).apply ("foo=\"bar\"; port=\"80,81\"; discard, bar=baz") ("foo=bar; port=\"80,81\"; discard, bar=baz"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xarg)) ((xexpect)))) ((xtests)))
                          seq
                            xinput.write (((xsplit_header_words)).apply ((((unsupported)).apply ((xarg)))))
                            xres.write (((xjoin_header_words)).apply ((xinput)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((xexpect)) (((((unsupported)).apply).mod (((unsupported)).apply ((xarg)) ((xexpect)) ((xres)) ((xinput))))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xheaders xurl]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_headers)) (((((xemail).xmessage_from_string)).apply (((("n".xjoin)).apply ((xheaders)))))))
                        (((unsupported)).apply (((xself).x_url)) ((xurl)))
                xinfo.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_headers)))
            xinteract_2965.write
              [xcookiejar xurl]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((x_interact)).apply ((xcookiejar)) ((xurl)) ((xset_cookie_hdrs)) ("Set-Cookie2"))))
            xinteract_netscape.write
              [xcookiejar xurl]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((x_interact)).apply ((xcookiejar)) ((xurl)) ((xset_cookie_hdrs)) ("Set-Cookie"))))
            x_interact.write
              [xcookiejar xurl xset_cookie_hdrs xhdr_name]
                memory > xcookie_hdr
                memory > xreq
                memory > xheaders
                memory > xres
                seq > @
                  seq
                    unsupported
                    xreq.write (((((xurllib).xrequest).xRequest)).apply ((xurl)))
                    bogusForceDataize.write ((((xcookiejar).xadd_cookie_header)).apply ((xreq)))
                    xcookie_hdr.write ((((xreq).xget_header)).apply ("Cookie") (""))
                    xheaders.write (((unsupported)).apply)
                    (((unsupported)).apply ((xhdr)) ((xset_cookie_hdrs)))
                      bogusForceDataize.write ((((xheaders).xappend)).apply (("%s: %s".mod (((unsupported)).apply ((xhdr_name)) ((xhdr))))))
                    xres.write (((xFakeResponse)).apply ((xheaders)) ((xurl)))
                    bogusForceDataize.write ((((xcookiejar).xextract_cookies)).apply ((xres)) ((xreq)))
                    (((unsupported)).apply ((xcookie_hdr)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_constructor_with_str.write
                  [xself]
                    memory > xc
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write (((xtest).xsupport).xTESTFN)
                        xc.write (((xLWPCookieJar)).apply ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xfilename)) ((xfilename)))
                xtest_constructor_with_path_like.write
                  [xself]
                    memory > xc
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((((xpathlib).xPath)).apply ((((xtest).xsupport).xTESTFN)))
                        xc.write (((xLWPCookieJar)).apply ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xfilename)) (((((xos).xfspath)).apply ((xfilename)))))
                xtest_constructor_with_none.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xLWPCookieJar)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xc).xfilename)))
                xtest_constructor_with_other_types.write
                  [xself]
                    memory > xc
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xtype_)) ((((unsupported)).apply ((xint)) ((xfloat)) ((xA)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtype_)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              seq
                                xinstance.write (((xtype_)).apply)
                                xc.write (((unsupported)).apply ((xLWPCookieJar)) ((xinstance)))
                xtest_lwp_valueless_cookie.write
                  [xself]
                    memory > xc
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write (((xtest).xsupport).xTESTFN)
                        xc.write (((xLWPCookieJar)).apply)
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("boo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("boo")).xvalue)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xc).xsave)) ((xfilename)) (TRUE))
                            xc.write (((xLWPCookieJar)).apply)
                            (((unsupported)).apply (((xc).xload)) ((xfilename)) (TRUE))
                          (((unsupported)).apply ((xOSError)))
                            bogusForceDataize.write ((((xos).xunlink)).apply ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("boo")).xvalue)) ("None: is there a None literal in the EO language?"))
                xtest_bad_magic.write
                  [xself]
                    memory > xc
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write (((xtest).xsupport).xTESTFN)
                        (((unsupported)).apply ((xcookiejar_class)) ((((unsupported)).apply ((xLWPCookieJar)) ((xMozillaCookieJar)))))
                          seq
                            xc.write (((xcookiejar_class)).apply)
                            (((unsupported)).apply ((xOSError)))
                              (((unsupported)).apply (((xc).xload)) ("for this test to work, a file with this filename should not exist"))
                              bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xexc).x__class__)) ((xLoadError)))
                              bogusForceDataize.write ((((xself).xfail)).apply ("expected OSError for invalid filename"))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("w"))) ((xf)))
                            seq
                              bogusForceDataize.write ((((xf).xwrite)).apply ("oopsn"))
                              (((unsupported)).apply ((xcookiejar_class)) ((((unsupported)).apply ((xLWPCookieJar)) ((xMozillaCookieJar)))))
                                seq
                                  xc.write (((xcookiejar_class)).apply)
                                  bogusForceDataize.write ((((xself).xassertRaises)).apply ((xLoadError)) (((xc).xload)) ((xfilename)))
                          (((unsupported)).apply ((xOSError)))
                            bogusForceDataize.write ((((xos).xunlink)).apply ((xfilename)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_domain_return_ok.write
                  [xself]
                    memory > xpol
                    memory > xr
                    memory > xrequest
                    seq > @
                      seq
                        xpol.write (((xDefaultCookiePolicy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xdomain)) ((xok)))) ((((unsupported)).apply ((((unsupported)).apply ("http://foo.bar.com/") ("blah.com") ((xfalse)))) ((((unsupported)).apply ("http://foo.bar.com/") ("rhubarb.blah.com") ((xfalse)))) ((((unsupported)).apply ("http://foo.bar.com/") ("rhubarb.foo.bar.com") ((xfalse)))) ((((unsupported)).apply ("http://foo.bar.com/") (".foo.bar.com") (TRUE))) ((((unsupported)).apply ("http://foo.bar.com/") ("foo.bar.com") (TRUE))) ((((unsupported)).apply ("http://foo.bar.com/") (".bar.com") (TRUE))) ((((unsupported)).apply ("http://foo.bar.com/") ("bar.com") (TRUE))) ((((unsupported)).apply ("http://foo.bar.com/") ("com") (TRUE))) ((((unsupported)).apply ("http://foo.com/") ("rhubarb.foo.com") ((xfalse)))) ((((unsupported)).apply ("http://foo.com/") (".foo.com") (TRUE))) ((((unsupported)).apply ("http://foo.com/") ("foo.com") (TRUE))) ((((unsupported)).apply ("http://foo.com/") ("com") (TRUE))) ((((unsupported)).apply ("http://foo/") ("rhubarb.foo") ((xfalse)))) ((((unsupported)).apply ("http://foo/") (".foo") (TRUE))) ((((unsupported)).apply ("http://foo/") ("foo") (TRUE))) ((((unsupported)).apply ("http://foo/") ("foo.local") (TRUE))) ((((unsupported)).apply ("http://foo/") (".local") (TRUE))) ((((unsupported)).apply ("http://barfoo.com") (".foo.com") ((xfalse)))) ((((unsupported)).apply ("http://barfoo.com") ("foo.com") ((xfalse)))))))
                          seq
                            xrequest.write (((((xurllib).xrequest).xRequest)).apply ((xurl)))
                            xr.write ((((xpol).xdomain_return_ok)).apply ((xdomain)) ((xrequest)))
                            (xok).if
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xr)))
                              bogusForceDataize.write ((((xself).xassertfalse)).apply ((xr)))
                xtest_missing_value.write
                  [xself]
                    memory > xcookie
                    memory > xc
                    memory > xold_str
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write (((xtest).xsupport).xTESTFN)
                        xc.write (((xMozillaCookieJar)).apply ((xfilename)))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("eggs"))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("\"spam\"; path=/foo/"))
                        xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("eggs"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcookie).xvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie).xname)) ("eggs"))
                        xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/foo/"))) ("\"spam\""))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcookie).xvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie).xname)) ("\"spam\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlwp_cookie_str)).apply ((xcookie)))) ("\"spam\"; path=\"/foo/\"; domain=\"www.acme.com\"; path_spec; discard; version=0"))
                        xold_str.write (((xrepr)).apply ((xc)))
                        (((unsupported)).apply (((xc).xsave)) (TRUE) (TRUE))
                        (((unsupported)).apply)
                          seq
                            xc.write (((xMozillaCookieJar)).apply ((xfilename)))
                            (((unsupported)).apply (((xc).xrevert)) (TRUE) (TRUE))
                          bogusForceDataize.write ((((xos).xunlink)).apply (((xc).xfilename)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) (((((xre).xsub)).apply (("path_specified=%s".mod TRUE)) (("path_specified=%s".mod (xfalse))) ((xold_str)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/foo/"))) ("\"spam\"; eggs"))
                xtest_rfc2109_handling.write
                  [xself]
                    memory > xcookie
                    memory > xc
                    memory > xcookie2965
                    memory > xpolicy
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xrfc2109_as_netscape)) ((xrfc2965)) ((xversion)))) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xfalse)) (0))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) (1))) ((((unsupported)).apply ((xfalse)) ((xfalse)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xfalse)) (TRUE) (1))) ((((unsupported)).apply (TRUE) ((xfalse)) (0))) ((((unsupported)).apply (TRUE) (TRUE) (0))))))
                        seq
                          xpolicy.write (((unsupported)).apply ((xDefaultCookiePolicy)) ((xrfc2109_as_netscape)) ((xrfc2965)))
                          xc.write (((xCookieJar)).apply ((xpolicy)))
                          bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.example.com/") ("ni=ni; Version=1"))
                          (((unsupported)).apply ((xKeyError)))
                            xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.example.com"))) ("/"))) ("ni"))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xversion)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie).xversion)) ((xversion)))
                              bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.example.com/") ("foo=bar; Version=1"))
                              (xrfc2965).if
                                seq
                                  xcookie2965.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.example.com"))) ("/"))) ("foo"))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie2965).xversion)) (1))
                xtest_ns_parser.write
                  [xself]
                    memory > xcookie
                    memory > xc
                    memory > xspam
                    memory > xfoo
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply)
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("spam=eggs; DoMain=.acme.com; port; blArgh=\"feep\""))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("ni=ni; port=80,8080"))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com:80/") ("nini=ni"))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com:80/") ("foo=bar; expires="))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com:80/") ("spam=eggs; expires=\"Foo Bar 25 33:22:11 3022\""))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("fortytwo="))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("=unladenswallow"))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("holyhandgrenade"))
                        xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) (".acme.com"))) ("/"))) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie).xdomain)) (".acme.com"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcookie).xdomain_specified)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie).xport)) ((xDEFAULT_HTTP_PORT)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xcookie).xport_specified)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xcookie).xhas_nonstandard_attr)).apply ("blArgh"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xcookie).xhas_nonstandard_attr)).apply ("blargh"))))
                        xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("ni"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie).xdomain)) ("www.acme.com"))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xcookie).xdomain_specified)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie).xport)) ("80,8080"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcookie).xport_specified)))
                        xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("nini"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcookie).xport)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((xcookie).xport_specified)))
                        xfoo.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("foo"))
                        xspam.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfoo).xexpires)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xspam).xexpires)))
                        xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("fortytwo"))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xcookie).xvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie).xvalue)) (""))
                        xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("holyhandgrenade"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcookie).xvalue)))
                xtest_ns_parser_special_names.write
                  [xself]
                    memory > xcookies
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply)
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("expires=eggs"))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("version=eggs; spam=eggs"))
                        xcookies.write (((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("expires") ((xcookies)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("version") ((xcookies)))
                xtest_expires.write
                  [xself]
                    memory > xreq
                    memory > xh
                    memory > xfuture
                    memory > xres
                    memory > xnow
                    memory > xheaders
                    memory > xc
                    memory > xcookie
                    memory > xcookies
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply)
                        xfuture.write (((xtime2netscape)).apply ((((((xtime).xtime)).apply).add 3600)))
                        (((unsupported)).apply ((((((xtest).xsupport).xcheck_no_warnings)).apply ((xself)))))
                          seq
                            xheaders.write (((unsupported)).apply ("Set-Cookie: FOO=BAR; path=/; expires={future}"))
                            xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.coyote.com/"))
                            xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.coyote.com/"))
                            xcookies.write ((((xc).xmake_cookies)).apply ((xres)) ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcookies)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtime2netscape)).apply (((((unsupported)).apply ((xcookies)) (0)).xexpires)))) ((xfuture)))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") (("spam=\"bar\"; expires=%s".mod (xfuture))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xnow.write (((xtime2netscape)).apply ((((((xtime).xtime)).apply).sub 1)))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") (("foo=\"eggs\"; expires=%s".mod (xnow))))
                        xh.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spam=\"bar\"") ((xh)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("foo") ((xh)))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") (("eggs=\"bar\"; expires=%s".mod (xfuture))))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") (("bar=\"bar\"; expires=%s".mod (xfuture))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (3))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") (("eggs=\"bar\"; expires=%s; max-age=0".mod (xfuture))))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") (("bar=\"bar\"; max-age=0; expires=%s".mod (xfuture))))
                        xh.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.rhubarb.net/") ("whum=\"fizz\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                        bogusForceDataize.write ((((xc).xclear_session_cookies)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spam=\"bar\"") ((xh)))
                        xcookie.write (((xCookie)).apply (0) ("name") ("value") ("None: is there a None literal in the EO language?") ((xfalse)) ("www.python.org") (TRUE) ((xfalse)) ("/") ((xfalse)) ((xfalse)) ("1444312383.018307") ((xfalse)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcookie).xexpires)) (1444312383))
                xtest_default_path.write
                  [xself]
                    memory > xc
                    memory > xpol
                    seq > @
                      seq
                        xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/") ("spam=\"bar\"; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("/") ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/blah") ("eggs=\"bar\"; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("/") ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/blah/rhubarb") ("eggs=\"bar\"; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("/blah/") ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/blah/rhubarb/") ("eggs=\"bar\"; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("/blah/rhubarb/") ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))))
                        xc.write (((xCookieJar)).apply)
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/") ("spam=\"bar\""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("/") ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))))
                        xc.write (((xCookieJar)).apply)
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/blah") ("eggs=\"bar\""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("/") ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))))
                        xc.write (((xCookieJar)).apply)
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/blah/rhubarb") ("eggs=\"bar\""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("/blah") ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))))
                        xc.write (((xCookieJar)).apply)
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.acme.com/blah/rhubarb/") ("eggs=\"bar\""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("/blah/rhubarb") ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))))
                xtest_default_path_with_query.write
                  [xself]
                    memory > xvalue
                    memory > xcj
                    memory > xuri
                    seq > @
                      seq
                        xcj.write (((xCookieJar)).apply)
                        xuri.write "http://example.com/?spam/eggs"
                        xvalue.write "eggs=\"bar\""
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xcj)) ((xuri)) ((xvalue)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("/") ((((unsupported)).apply (((xcj).x_cookies)) ("example.com"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_netscape)).apply ((xcj)) ((xuri)))) ((xvalue)))
                xtest_escape_path.write
                  [xself]
                    memory > xcases
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("/foo%2f/bar") ("/foo%2F/bar"))) ((((unsupported)).apply ("/foo%2F/bar") ("/foo%2F/bar"))) ((((unsupported)).apply ("/foo%%/bar") ("/foo%%/bar"))) ((((unsupported)).apply ("/fo%19o/bar") ("/fo%19o/bar"))) ((((unsupported)).apply ("/fo%7do/bar") ("/fo%7Do/bar"))) ((((unsupported)).apply ("/foo/bar&") ("/foo/bar&"))) ((((unsupported)).apply ("/foo//bar") ("/foo//bar"))) ((((unsupported)).apply ("176/foo/bar") ("176/foo/bar"))) ((((unsupported)).apply ("/foo031/bar") ("/foo%19/bar"))) ((((unsupported)).apply ("/175foo/bar") ("/%7Dfoo/bar"))) ((((unsupported)).apply ("/foo/baru00fc") ("/foo/bar%C3%BC"))) ((((unsupported)).apply ("/foo/baruabcd") ("/foo/bar%EA%AF%8D"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xarg)) ((xresult)))) ((xcases)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xescape_path)).apply ((xarg)))) ((xresult)))
                xtest_request_path.write
                  [xself]
                    memory > xreq
                    seq > @
                      seq
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.example.com/rheum/rhaponticum;foo=bar;sing=song?apples=pears&spam=eggs#ni"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrequest_path)).apply ((xreq)))) ("/rheum/rhaponticum;foo=bar;sing=song"))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.example.com/rheum/rhaponticum?apples=pears&spam=eggs#ni"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrequest_path)).apply ((xreq)))) ("/rheum/rhaponticum"))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrequest_path)).apply ((xreq)))) ("/"))
                xtest_path_prefix_match.write
                  [xself]
                    memory > xc
                    memory > xreq
                    memory > xpol
                    memory > xbase_url
                    memory > xstrict_ns_path_pol
                    memory > xcookie
                    memory > xh
                    memory > xurl
                    seq > @
                      seq
                        xpol.write (((xDefaultCookiePolicy)).apply)
                        xstrict_ns_path_pol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xbase_url.write "http://bar.com"
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ((xbase_url)) ("spam=eggs; Path=/foo"))
                        xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("bar.com"))) ("/foo"))) ("spam"))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xok)))) ((((unsupported)).apply ((((unsupported)).apply ("/foo") (TRUE))) ((((unsupported)).apply ("/foo/") (TRUE))) ((((unsupported)).apply ("/foo/bar") (TRUE))) ((((unsupported)).apply ("/") ((xfalse)))) ((((unsupported)).apply ("/foobad/foo") ((xfalse)))))))
                          seq
                            xurl.write "{base_url}{path}"
                            xreq.write (((((xurllib).xrequest).xRequest)).apply ((xurl)))
                            xh.write (((xinteract_netscape)).apply ((xc)) ((xurl)))
                            (xok).if
                              seq
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("spam=eggs") ((xh)) ("cookie not set for {path}"))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xstrict_ns_path_pol).xset_ok_path)).apply ((xcookie)) ((xreq)))))
                              seq
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ("spam=eggs") ((xh)) ("cookie set for {path}"))
                                bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xstrict_ns_path_pol).xset_ok_path)).apply ((xcookie)) ((xreq)))))
                xtest_request_port.write
                  [xself]
                    memory > xreq
                    seq > @
                      seq
                        xreq.write (((unsupported)).apply ((((xurllib).xrequest).xRequest)) ("http://www.acme.com:1234/") ((((unsupported)).apply ("Host") ("www.acme.com:4321"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrequest_port)).apply ((xreq)))) ("1234"))
                        xreq.write (((unsupported)).apply ((((xurllib).xrequest).xRequest)) ("http://www.acme.com/") ((((unsupported)).apply ("Host") ("www.acme.com:4321"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrequest_port)).apply ((xreq)))) ((xDEFAULT_HTTP_PORT)))
                xtest_request_host.write
                  [xself]
                    memory > xreq
                    seq > @
                      seq
                        xreq.write (((unsupported)).apply ((((xurllib).xrequest).xRequest)) ("http://1.1.1.1/") ((((unsupported)).apply ("Host") ("www.acme.com:80"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrequest_host)).apply ((xreq)))) ("1.1.1.1"))
                        xreq.write (((unsupported)).apply ((((xurllib).xrequest).xRequest)) ("http://www.acme.com/") ((((unsupported)).apply ("Host") ("irrelevant.com"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrequest_host)).apply ((xreq)))) ("www.acme.com"))
                        xreq.write (((unsupported)).apply ((((xurllib).xrequest).xRequest)) ("http://www.acme.com:2345/resource.html") ((((unsupported)).apply ("Host") ("www.acme.com:5432"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrequest_host)).apply ((xreq)))) ("www.acme.com"))
                xtest_is_HDN.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_HDN)).apply ("foo.bar.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_HDN)).apply ("1foo2.3bar4.5com"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xis_HDN)).apply ("192.168.1.1"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xis_HDN)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xis_HDN)).apply ("."))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xis_HDN)).apply (".foo.bar.com"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xis_HDN)).apply ("..foo"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xis_HDN)).apply ("foo."))))
                xtest_reach.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreach)).apply ("www.acme.com"))) (".acme.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreach)).apply ("acme.com"))) ("acme.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreach)).apply ("acme.local"))) (".local"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreach)).apply (".local"))) (".local"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreach)).apply (".com"))) (".com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreach)).apply ("."))) ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreach)).apply (""))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreach)).apply ("192.168.0.1"))) ("192.168.0.1"))
                xtest_domain_match.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xdomain_match)).apply ("192.168.1.1") ("192.168.1.1"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xdomain_match)).apply ("192.168.1.1") (".168.1.1"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xdomain_match)).apply ("x.y.com") ("x.Y.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xdomain_match)).apply ("x.y.com") (".Y.com"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xdomain_match)).apply ("x.y.com") ("Y.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xdomain_match)).apply ("a.b.c.com") (".c.com"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xdomain_match)).apply (".c.com") ("a.b.c.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xdomain_match)).apply ("example.local") (".local"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xdomain_match)).apply ("blah.blah") (""))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xdomain_match)).apply ("") (".rhubarb.rhubarb"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xdomain_match)).apply ("") (""))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xuser_domain_match)).apply ("acme.com") ("acme.com"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("acme.com") (".acme.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xuser_domain_match)).apply ("rhubarb.acme.com") (".acme.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xuser_domain_match)).apply ("www.rhubarb.acme.com") (".acme.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xuser_domain_match)).apply ("x.y.com") ("x.Y.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xuser_domain_match)).apply ("x.y.com") (".Y.com"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("x.y.com") ("Y.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xuser_domain_match)).apply ("y.com") ("Y.com"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply (".y.com") ("Y.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xuser_domain_match)).apply (".y.com") (".Y.com"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xuser_domain_match)).apply ("x.y.com") (".com"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("x.y.com") ("com"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("x.y.com") ("m"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("x.y.com") (".m"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("x.y.com") (""))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("x.y.com") ("."))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xuser_domain_match)).apply ("192.168.1.1") ("192.168.1.1"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("192.168.1.1") (".168.1.1"))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("192.168.1.1") ("."))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xuser_domain_match)).apply ("192.168.1.1") (""))))
                xtest_wrong_domain.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply)
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.nasty.com/") ("foo=bar; domain=friendly.org; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (0))
                xtest_strict_domain.write
                  [xself]
                    memory > xcp
                    memory > xcj
                    seq > @
                      seq
                        xcp.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))
                        xcj.write (((unsupported)).apply ((xCookieJar)) ((xcp)))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xcj)) ("http://example.co.uk/") ("no=problemo"))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xcj)) ("http://example.co.uk/") ("okey=dokey; Domain=.example.co.uk"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcj)))) (2))
                        (((unsupported)).apply ((xpseudo_tld)) ((((unsupported)).apply (".co.uk") (".org.za") (".tx.us") (".name.us"))))
                          seq
                            bogusForceDataize.write (((xinteract_netscape)).apply ((xcj)) (("http://example.%s/".mod (xpseudo_tld))) ("spam=eggs; Domain=.co.uk"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcj)))) (2))
                xtest_two_component_domain_ns.write
                  [xself]
                    memory > xc
                    memory > xpol
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply)
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://foo.net/") ("ns=bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("foo.net"))) ("/"))) ("ns")).xvalue)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_netscape)).apply ((xc)) ("http://foo.net/"))) ("ns=bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_netscape)).apply ((xc)) ("http://www.foo.net/"))) ("ns=bar"))
                        xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (((xDefaultCookiePolicy).xDomainStrictNonDomain)))
                        bogusForceDataize.write ((((xc).xset_policy)).apply ((xpol)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_netscape)).apply ((xc)) ("http://www.foo.net/"))) (""))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://foo.net/foo/") ("spam1=eggs; domain=foo.net"))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://foo.net/foo/bar/") ("spam2=eggs; domain=.foo.net"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) (".foo.net"))) ("/foo"))) ("spam1")).xvalue)) ("eggs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) (".foo.net"))) ("/foo/bar"))) ("spam2")).xvalue)) ("eggs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_netscape)).apply ((xc)) ("http://foo.net/foo/bar/"))) ("spam2=eggs; spam1=eggs; ns=bar"))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://foo.net/") ("nini=\"ni\"; domain=.net"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (3))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://foo.co.uk") ("nasty=trick; domain=.co.uk"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (4))
                xtest_two_component_domain_rfc2965.write
                  [xself]
                    memory > xc
                    memory > xpol
                    seq > @
                      seq
                        xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://foo.net/") ("foo=bar; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("foo.net"))) ("/"))) ("foo")).xvalue)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_2965)).apply ((xc)) ("http://foo.net/"))) ("$Version=1; foo=bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_2965)).apply ((xc)) ("http://www.foo.net/"))) (""))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://foo.net/foo") ("spam=eggs; domain=foo.net; path=/foo; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_2965)).apply ((xc)) ("http://foo.net/foo"))) ("$Version=1; foo=bar"))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.foo.net/foo/") ("spam=eggs; domain=foo.net; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) (".foo.net"))) ("/foo/"))) ("spam")).xvalue)) ("eggs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_2965)).apply ((xc)) ("http://foo.net/foo/"))) ("$Version=1; foo=bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xinteract_2965)).apply ((xc)) ("http://www.foo.net/foo/"))) ("$Version=1; spam=eggs; $Domain=\"foo.net\""))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://foo.net/") ("ni=\"ni\"; domain=\".net\"; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://foo.co.uk/") ("nasty=trick; domain=.co.uk; Version=\"1\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (3))
                xtest_domain_allow.write
                  [xself]
                    memory > xreq
                    memory > xcookies
                    memory > xres
                    memory > xheaders
                    memory > xc
                    seq > @
                      seq
                        xc.write (((unsupported)).apply ((xCookieJar)) ((((unsupported)).apply ((xDefaultCookiePolicy)) ((((unsupported)).apply ("acme.com"))) ((((unsupported)).apply ("www.acme.com"))))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://acme.com/"))
                        xheaders.write (((unsupported)).apply ("Set-Cookie: CUSTOMER=WILE_E_COYOTE; path=/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://acme.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (0))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.coyote.com/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.coyote.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.coyote.com/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.coyote.com/"))
                        xcookies.write ((((xc).xmake_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xc).xset_cookie)).apply ((((unsupported)).apply ((xcookies)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                xtest_domain_block.write
                  [xself]
                    memory > xreq
                    memory > xpol
                    memory > xp
                    memory > xcookies
                    memory > xres
                    memory > xheaders
                    memory > xc
                    seq > @
                      seq
                        xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE) ((((unsupported)).apply (".acme.com"))))
                        xc.write (((unsupported)).apply ((xCookieJar)) ((xpol)))
                        xheaders.write (((unsupported)).apply ("Set-Cookie: CUSTOMER=WILE_E_COYOTE; path=/"))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (0))
                        xp.write ((((xpol).xset_blocked_domains)).apply ((((unsupported)).apply ("acme.com"))))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        bogusForceDataize.write ((((xc).xclear)).apply)
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.roadrunner.net/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.roadrunner.net/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.roadrunner.net/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xreq).xhas_header)).apply ("Cookie2"))))
                        bogusForceDataize.write ((((xc).xclear)).apply)
                        bogusForceDataize.write ((((xpol).xset_blocked_domains)).apply ((((unsupported)).apply (".acme.com"))))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com/"))
                        xcookies.write ((((xc).xmake_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xc).xset_cookie)).apply ((((unsupported)).apply ((xcookies)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        bogusForceDataize.write ((((xc).xclear)).apply)
                        bogusForceDataize.write ((((xpol).xset_blocked_domains)).apply ((((unsupported)).apply)))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://acme.com/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://acme.com/"))
                        xcookies.write ((((xc).xmake_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://badacme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xpol).xreturn_ok)).apply ((((unsupported)).apply ((xcookies)) (0))) ((xreq)))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        xp.write ((((xpol).xset_blocked_domains)).apply ((((unsupported)).apply ("acme.com"))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://badacme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                xtest_secure.write
                  [xself]
                    memory > xc
                    memory > xurl
                    memory > xpol
                    memory > xint
                    memory > xvs
                    seq > @
                      (((unsupported)).apply ((xns)) ((((unsupported)).apply (TRUE) ((xfalse)))))
                        (((unsupported)).apply ((xwhitespace)) ((((unsupported)).apply (" ") (""))))
                          seq
                            xc.write (((xCookieJar)).apply)
                            (xns).if
                              seq
                                xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) ((xfalse)))
                                xint.write (xinteract_netscape)
                                xvs.write ""
                              seq
                                xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))
                                xint.write (xinteract_2965)
                                xvs.write "; Version=1"
                            bogusForceDataize.write ((((xc).xset_policy)).apply ((xpol)))
                            xurl.write "http://www.acme.com/"
                            bogusForceDataize.write (((xint)).apply ((xc)) ((xurl)) (("foo1=bar%s%s".mod (((unsupported)).apply ((xvs)) ((xwhitespace))))))
                            bogusForceDataize.write (((xint)).apply ((xc)) ((xurl)) (("foo2=bar%s; secure%s".mod (((unsupported)).apply ((xvs)) ((xwhitespace))))))
                            bogusForceDataize.write ((((xself).xassertfalse)).apply (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("foo1")).xsecure)) ("non-secure cookie registered secure"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.acme.com"))) ("/"))) ("foo2")).xsecure)) ("secure cookie registered non-secure"))
                xtest_secure_block.write
                  [xself]
                    memory > xreq
                    memory > xpol
                    memory > xres
                    memory > xheaders
                    memory > xc
                    seq > @
                      seq
                        xpol.write (((xDefaultCookiePolicy)).apply)
                        xc.write (((unsupported)).apply ((xCookieJar)) ((xpol)))
                        xheaders.write (((unsupported)).apply ("Set-Cookie: session=narf; secure; path=/"))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("https://www.acme.com/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("https://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("https://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("wss://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("ws://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                xtest_custom_secure_protocols.write
                  [xself]
                    memory > xreq
                    memory > xpol
                    memory > xres
                    memory > xheaders
                    memory > xc
                    seq > @
                      seq
                        xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) ((((unsupported)).apply ("foos"))))
                        xc.write (((unsupported)).apply ((xCookieJar)) ((xpol)))
                        xheaders.write (((unsupported)).apply ("Set-Cookie: session=narf; secure; path=/"))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("https://www.acme.com/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("https://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("https://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("foos://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("foo://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                xtest_quote_cookie_value.write
                  [xself]
                    memory > xc
                    memory > xh
                    seq > @
                      seq
                        xc.write (((unsupported)).apply ((xCookieJar)) ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/") ("foo=b\"a\"r; Version=1"))
                        xh.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xh)) ((((unsupported)).apply)))
                xtest_missing_final_slash.write
                  [xself]
                    memory > xreq
                    memory > xc
                    memory > xurl
                    seq > @
                      seq
                        xurl.write "http://www.acme.com"
                        xc.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("foo=bar; Version=1"))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ((xurl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xreq).xhas_header)).apply ("Cookie"))))
                xtest_domain_mirror.write
                  [xself]
                    memory > xh
                    memory > xurl
                    memory > xc
                    memory > xpol
                    seq > @
                      seq
                        xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1"))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Domain") ((xh)) ("absent domain returned with domain present"))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1; Domain=.bar.com"))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("$Domain=\".bar.com\"") ((xh)) ("domain not returned"))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1; Domain=bar.com"))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("$Domain=\"bar.com\"") ((xh)) ("domain not returned"))
                xtest_path_mirror.write
                  [xself]
                    memory > xh
                    memory > xurl
                    memory > xc
                    memory > xpol
                    seq > @
                      seq
                        xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1"))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Path") ((xh)) ("absent path returned with path present"))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1; Path=/"))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("$Path=\"/\"") ((xh)) ("path not returned"))
                xtest_port_mirror.write
                  [xself]
                    memory > xh
                    memory > xurl
                    memory > xc
                    memory > xpol
                    seq > @
                      seq
                        xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1"))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Port") ((xh)) ("absent port returned with port present"))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1; Port"))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xh)) ("$Port([^=]|$)") ("port with no value not returned with no value"))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1; Port=\"80\""))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("$Port=\"80\"") ((xh)) ("port with single value not returned with single value"))
                        xc.write (((xCookieJar)).apply ((xpol)))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1; Port=\"80,8080\""))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("$Port=\"80,8080\"") ((xh)) ("port with multiple values not returned with multiple values"))
                xtest_no_return_comment.write
                  [xself]
                    memory > xc
                    memory > xh
                    memory > xurl
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        xurl.write "http://foo.bar.com/"
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ((xurl)) ("spam=eggs; Version=1; Comment=\"does anybody read these?\"; CommentURL=\"http://foo.bar.net/comment.html\""))
                        xh.write (((xinteract_2965)).apply ((xc)) ((xurl)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Comment") ((xh)) ("Comment or CommentURL cookie-attributes returned to server"))
                xtest_Cookie_iterator.write
                  [xself]
                    memory > xpaths
                    memory > xi
                    memory > xnames
                    memory > xcs
                    memory > xdomains
                    memory > xversions
                    seq > @
                      seq
                        xcs.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xcs)) ("http://blah.spam.org/") ("foo=eggs; Version=1; Comment=\"does anybody read these?\"; CommentURL=\"http://foo.bar.net/comment.html\""))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xcs)) ("http://www.acme.com/blah/") ("spam=bar; secure"))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xcs)) ("http://www.acme.com/blah/") ("foo=bar; secure; Version=1"))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xcs)) ("http://www.acme.com/blah/") ("foo=bar; path=/; Version=1"))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xcs)) ("http://www.sol.no") ((((unsupported)).apply)))
                        xversions.write (((unsupported)).apply (1) (1) (1) (0) (1))
                        xnames.write (((unsupported)).apply ("bang") ("foo") ("foo") ("spam") ("foo"))
                        xdomains.write (((unsupported)).apply (".sol.no") ("blah.spam.org") ("www.acme.com") ("www.acme.com") ("www.acme.com"))
                        xpaths.write (((unsupported)).apply ("/") ("/") ("/") ("/blah") ("/blah/"))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (4))))
                          seq
                            xi.write 0
                            (((unsupported)).apply ((xc)) ((xcs)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) ((xCookie)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xversion)) ((((unsupported)).apply ((xversions)) ((xi)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xname)) ((((unsupported)).apply ((xnames)) ((xi)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xdomain)) ((((unsupported)).apply ((xdomains)) ((xi)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xpath)) ((((unsupported)).apply ((xpaths)) ((xi)))))
                                xi.write ((xi).add 1)
                xtest_parse_ns_headers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_ns_headers)).apply ((((unsupported)).apply ("foo=bar; path=/; domain"))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("path") ("/"))) ((((unsupported)).apply ("domain") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("version") ("0"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_ns_headers)).apply ((((unsupported)).apply ("foo=bar; expires=Foo Bar 12 33:22:11 2000"))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("expires") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("version") ("0"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_ns_headers)).apply ((((unsupported)).apply ("foo"))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("version") ("0"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_ns_headers)).apply ((((unsupported)).apply ("foo=bar; expires"))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("expires") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("version") ("0"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_ns_headers)).apply ((((unsupported)).apply ("foo=bar; version"))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("version") ("None: is there a None literal in the EO language?"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xparse_ns_headers)).apply ((((unsupported)).apply (""))))) ((((unsupported)).apply)))
                xtest_bad_cookie_header.write
                  [xself]
                    memory > xcookiejar_from_cookie_headers
                    memory > xcookie
                    memory > xfuture
                    memory > xheaders
                    memory > xc
                    seq > @
                      seq
                        xcookiejar_from_cookie_headers.write
                          [xheaders]
                            memory > xreq
                            memory > xc
                            memory > xr
                            seq > @
                              seq
                                xc.write (((xCookieJar)).apply)
                                xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.example.com/"))
                                xr.write (((xFakeResponse)).apply ((xheaders)) ("http://www.example.com/"))
                                bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xr)) ((xreq)))
                                (((unsupported)).apply ((xc)))
                        xfuture.write (((xtime2netscape)).apply ((((((xtime).xtime)).apply).add 3600)))
                        (((unsupported)).apply ((xheaders)) ((((unsupported)).apply ((((unsupported)).apply ("Set-Cookie: "))) ((((unsupported)).apply ("Set-Cookie2: "))) ((((unsupported)).apply ("Set-Cookie2: a=foo; path=/; Version=1; domain"))) ((((unsupported)).apply ("Set-Cookie: b=foo; max-age=oops"))) ((((unsupported)).apply ("Set-Cookie: b=foo; version=spam"))) ((((unsupported)).apply (("Set-Cookie:; Expires=%s".mod (xfuture))))))))
                          seq
                            xc.write (((xcookiejar_from_cookie_headers)).apply ((xheaders)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (0))
                        xheaders.write (((unsupported)).apply ("Set-Cookie: c=foo; expires=Foo Bar 12 33:22:11 2000"))
                        xc.write (((xcookiejar_from_cookie_headers)).apply ((xheaders)))
                        xcookie.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xc).x_cookies)) ("www.example.com"))) ("/"))) ("c"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xcookie).xexpires)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_netscape_example_1.write
                  [xself]
                    memory > xreq
                    memory > xh
                    memory > xres
                    memory > xyear_plus_one
                    memory > xheaders
                    memory > xc
                    seq > @
                      seq
                        xyear_plus_one.write ((((unsupported)).apply (((((xtime).xlocaltime)).apply)) (0)).add 1)
                        xheaders.write (((unsupported)).apply)
                        xc.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        xreq.write (((unsupported)).apply ((((xurllib).xrequest).xRequest)) ("http://www.acme.com:80/") ((((unsupported)).apply ("Host") ("www.acme.com:80"))))
                        bogusForceDataize.write ((((xheaders).xappend)).apply (("Set-Cookie: CUSTOMER=WILE_E_COYOTE; path=/ ; expires=Wednesday, 09-Nov-%d 23:12:40 GMT".mod (xyear_plus_one))))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreq).xget_header)).apply ("Cookie"))) ("CUSTOMER=WILE_E_COYOTE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreq).xget_header)).apply ("Cookie2"))) ("$Version=\"1\""))
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie: PART_NUMBER=ROCKET_LAUNCHER_0001; path=/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/foo/bar"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        xh.write ((((xreq).xget_header)).apply ("Cookie"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("PART_NUMBER=ROCKET_LAUNCHER_0001") ((xh)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("CUSTOMER=WILE_E_COYOTE") ((xh)))
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie: SHIPPING=FEDEX; path=/foo"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        xh.write ((((xreq).xget_header)).apply ("Cookie"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("PART_NUMBER=ROCKET_LAUNCHER_0001") ((xh)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("CUSTOMER=WILE_E_COYOTE") ((xh)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("SHIPPING=FEDEX") ((xh)))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/foo/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        xh.write ((((xreq).xget_header)).apply ("Cookie"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("PART_NUMBER=ROCKET_LAUNCHER_0001") ((xh)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("CUSTOMER=WILE_E_COYOTE") ((xh)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xh).xstartswith)).apply ("SHIPPING=FEDEX;"))))
                xtest_netscape_example_2.write
                  [xself]
                    memory > xreq
                    memory > xheaders
                    memory > xc
                    memory > xres
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply)
                        xheaders.write (((unsupported)).apply)
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie: PART_NUMBER=ROCKET_LAUNCHER_0001; path=/"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreq).xget_header)).apply ("Cookie"))) ("PART_NUMBER=ROCKET_LAUNCHER_0001"))
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie: PART_NUMBER=RIDING_ROCKET_0023; path=/ammo"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.acme.com/ammo"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xreq).xget_header)).apply ("Cookie"))) ("PART_NUMBER=RIDING_ROCKET_0023;s*PART_NUMBER=ROCKET_LAUNCHER_0001"))
                xtest_ietf_example_1.write
                  [xself]
                    memory > xcookie
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/acme/login") ("Customer=\"WILE_E_COYOTE\"; Version=\"1\"; Path=\"/acme\""))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((xcookie)))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/acme/pickitem") ("Part_Number=\"Rocket_Launcher_0001\"; Version=\"1\"; Path=\"/acme\""))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xcookie)) ("^$Version=\"?1\"?; Customer=\"?WILE_E_COYOTE\"?; $Path=\"/acme\"$"))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/acme/shipping") ("Shipping=\"FedEx\"; Version=\"1\"; Path=\"/acme\""))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xcookie)) ("^$Version=\"?1\"?;"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xcookie)) ("Part_Number=\"?Rocket_Launcher_0001\"?;s*$Path=\"/acme\""))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xcookie)) ("Customer=\"?WILE_E_COYOTE\"?;s*$Path=\"/acme\""))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/acme/process"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xcookie)) ("Shipping=\"?FedEx\"?;s*$Path=\"/acme\""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("WILE_E_COYOTE") ((xcookie)))
                xtest_ietf_example_2.write
                  [xself]
                    memory > xcookie
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/acme/ammo/specific") ("Part_Number=\"Rocket_Launcher_0001\"; Version=\"1\"; Path=\"/acme\"") ("Part_Number=\"Riding_Rocket_0023\"; Version=\"1\"; Path=\"/acme/ammo\""))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/acme/ammo/..."))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xcookie)) ("Riding_Rocket_0023.*Rocket_Launcher_0001"))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/acme/parts/"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Rocket_Launcher_0001") ((xcookie)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Riding_Rocket_0023") ((xcookie)))
                xtest_rejection.write
                  [xself]
                    memory > xfilename
                    memory > xc
                    memory > xold
                    memory > xmax_age
                    memory > xpol
                    memory > xcookie
                    seq > @
                      seq
                        xpol.write (((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))
                        xc.write (((unsupported)).apply ((xLWPCookieJar)) ((xpol)))
                        xmax_age.write "max-age=3600"
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com") ("foo=bar; domain=\".com\"; version=1"))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((xc)))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com") ("ping=pong; domain=\"acme.com\"; version=1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.a.acme.com") ("whiz=bang; domain=\"acme.com\"; version=1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (1))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.a.acme.com") ("wow=flutter; domain=\".a.acme.com\"; version=1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://125.125.125.125") ("zzzz=ping; domain=\"125.125.125\"; version=1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.sol.no") ("blah=rhubarb; domain=\".sol.no\"; path=\"/foo\"; version=1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.sol.no/foo/bar") ("bing=bong; domain=\".sol.no\"; path=\"/foo\"; version=1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (3))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.sol.no") ("whiz=ffft; domain=\".sol.no\"; port=\"90,100\"; version=1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (3))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.sol.no") ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (4))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.sol.no") ("foo9=bar; version=1; domain=\".sol.no\"; port; max-age=100;"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (5))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.sol.no/<oo/") ("foo8=bar; version=1; path=\"/%3coo\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (6))
                        xfilename.write (((xtest).xsupport).xTESTFN)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xc).xsave)) ((xfilename)) (TRUE))
                            xold.write (((xrepr)).apply ((xc)))
                            xc.write (((unsupported)).apply ((xLWPCookieJar)) ((xpol)))
                            (((unsupported)).apply (((xc).xload)) ((xfilename)) (TRUE))
                          (((unsupported)).apply ((xOSError)))
                            bogusForceDataize.write ((((xos).xunlink)).apply ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xold)) ((((xrepr)).apply ((xc)))))
                xtest_url_encoding.write
                  [xself]
                    memory > xcookie
                    memory > xversion_re
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/foo%2f%25/%3c%3c%0Anew%C3%A5/%C3%A5") ("foo  =   bar; version    =   1"))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/foo%2f%25/<<%0anew345/346370345") ("bar=baz; path=\"/foo/\"; version=1"))
                        xversion_re.write ((((xre).xcompile)).apply ("^$version=\"?1\"?") (((xre).xI)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("foo=bar") ((xcookie)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xcookie)) ((xversion_re)))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/foo/%25/<<%0anew345/346370345"))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((xcookie)))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/xfc"))
                xtest_mozilla.write
                  [xself]
                    memory > xfilename
                    memory > xc
                    memory > xsave_and_restore
                    memory > xnew_c
                    memory > xyear_plus_one
                    memory > xexpires
                    seq > @
                      seq
                        xyear_plus_one.write ((((unsupported)).apply (((((xtime).xlocaltime)).apply)) (0)).add 1)
                        xfilename.write (((xtest).xsupport).xTESTFN)
                        xc.write (((unsupported)).apply ((xMozillaCookieJar)) ((xfilename)) ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/") ("foo1=bar; max-age=100; Version=1"))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/") ("foo2=bar; port=\"80\"; max-age=100; Discard; Version=1"))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://www.acme.com/") ("foo3=bar; secure; Version=1"))
                        xexpires.write ("expires=09-Nov-%d 23:12:40 GMT".mod (((unsupported)).apply ((xyear_plus_one))))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.foo.com/") (("fooa=bar; %s".mod (xexpires))))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.foo.com/") (("foob=bar; Domain=.foo.com; %s".mod (xexpires))))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://www.foo.com/") (("fooc=bar; Domain=www.foo.com; %s".mod (xexpires))))
                        xsave_and_restore.write
                          [xcj xignore_discard]
                            memory > xnew_c
                            seq > @
                              seq
                                (((unsupported)).apply)
                                  seq
                                    (((unsupported)).apply (((xcj).xsave)) ((xignore_discard)))
                                    xnew_c.write (((xMozillaCookieJar)).apply ((xfilename)) ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                                    (((unsupported)).apply (((xnew_c).xload)) ((xignore_discard)))
                                  (((unsupported)).apply ((xOSError)))
                                    bogusForceDataize.write ((((xos).xunlink)).apply ((xfilename)))
                                (((unsupported)).apply ((xnew_c)))
                        xnew_c.write (((xsave_and_restore)).apply ((xc)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnew_c)))) (6))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("name='foo1', value='bar'") ((((xrepr)).apply ((xnew_c)))))
                        xnew_c.write (((xsave_and_restore)).apply ((xc)) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnew_c)))) (4))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("name='foo1', value='bar'") ((((xrepr)).apply ((xnew_c)))))
                xtest_netscape_misc.write
                  [xself]
                    memory > xreq
                    memory > xheaders
                    memory > xc
                    memory > xres
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply)
                        xheaders.write (((unsupported)).apply)
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://foo.bar.acme.com/foo"))
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie: Customer=WILE_E_COYOTE; domain=.acme.com"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com/foo"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie: PART_NUMBER=3,4; domain=foo.bar.acme.com"))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.acme.com/foo"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://foo.bar.acme.com/foo"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("PART_NUMBER=3,4") (((((xreq).xget_header)).apply ("Cookie"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Customer=WILE_E_COYOTE") (((((xreq).xget_header)).apply ("Cookie"))))
                xtest_intranet_domains_2965.write
                  [xself]
                    memory > xcookie
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://example/") ("foo1=bar; PORT; Discard; Version=1;"))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://example/") ("foo2=bar; domain=\".local\"; Version=1"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("foo1=bar") ((xcookie)))
                        bogusForceDataize.write (((xinteract_2965)).apply ((xc)) ("http://example/") ("foo3=bar; Version=1"))
                        xcookie.write (((xinteract_2965)).apply ((xc)) ("http://example/"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("foo2=bar") ((xcookie)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (3))
                xtest_intranet_domains_ns.write
                  [xself]
                    memory > xcookie
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) ((xfalse)))))
                        bogusForceDataize.write (((xinteract_netscape)).apply ((xc)) ("http://example/") ("foo1=bar"))
                        xcookie.write (((xinteract_netscape)).apply ((xc)) ("http://example/") ("foo2=bar; domain=.local"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("foo1=bar") ((xcookie)))
                        xcookie.write (((xinteract_netscape)).apply ((xc)) ("http://example/"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("foo2=bar") ((xcookie)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) (2))
                xtest_empty_path.write
                  [xself]
                    memory > xreq
                    memory > xheaders
                    memory > xc
                    memory > xres
                    seq > @
                      seq
                        xc.write (((xCookieJar)).apply ((((unsupported)).apply ((xDefaultCookiePolicy)) (TRUE))))
                        xheaders.write (((unsupported)).apply)
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.ants.com/"))
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie: JSESSIONID=ABCDERANDOM123; Path="))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.ants.com/"))
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.ants.com/"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreq).xget_header)).apply ("Cookie"))) ("JSESSIONID=ABCDERANDOM123"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreq).xget_header)).apply ("Cookie2"))) ("$Version=\"1\""))
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.ants.com:8080"))
                        bogusForceDataize.write ((((xc).xadd_cookie_header)).apply ((xreq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreq).xget_header)).apply ("Cookie"))) ("JSESSIONID=ABCDERANDOM123"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreq).xget_header)).apply ("Cookie2"))) ("$Version=\"1\""))
                xtest_session_cookies.write
                  [xself]
                    memory > xcounter
                    memory > xreq
                    memory > xres
                    memory > xyear_plus_one
                    memory > xkey
                    memory > xheaders
                    memory > xc
                    seq > @
                      seq
                        xyear_plus_one.write ((((unsupported)).apply (((((xtime).xlocaltime)).apply)) (0)).add 1)
                        xreq.write (((((xurllib).xrequest).xRequest)).apply ("http://www.perlmeister.com/scripts"))
                        xheaders.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie: s1=session;Path=/scripts"))
                        bogusForceDataize.write ((((xheaders).xappend)).apply (("Set-Cookie: p1=perm; Domain=.perlmeister.com;Path=/;expires=Fri, 02-Feb-%d 23:24:20 GMT".mod (xyear_plus_one))))
                        bogusForceDataize.write ((((xheaders).xappend)).apply (("Set-Cookie: p2=perm;Path=/;expires=Fri, 02-Feb-%d 23:24:20 GMT".mod (xyear_plus_one))))
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie: s2=session;Path=/scripts;Domain=.perlmeister.com"))
                        bogusForceDataize.write ((((xheaders).xappend)).apply ("Set-Cookie2: s3=session;Version=1;Discard;Path=\"/\""))
                        xres.write (((xFakeResponse)).apply ((xheaders)) ("http://www.perlmeister.com/scripts"))
                        xc.write (((xCookieJar)).apply)
                        bogusForceDataize.write ((((xc).xextract_cookies)).apply ((xres)) ((xreq)))
                        xcounter.write (((unsupported)).apply ("session_after") (0) ("perm_after") (0) ("session_before") (0) ("perm_before") (0))
                        (((unsupported)).apply ((xcookie)) ((xc)))
                          seq
                            xkey.write ("%s_before".mod ((xcookie).xvalue))
                            (((unsupported)).apply ((((unsupported)).apply ((xcounter)) ((xkey)))) (((((unsupported)).apply ((xcounter)) ((xkey))).add 1)))
                        bogusForceDataize.write ((((xc).xclear_session_cookies)).apply)
                        (((unsupported)).apply ((xcookie)) ((xc)))
                          seq
                            xkey.write ("%s_after".mod ((xcookie).xvalue))
                            (((unsupported)).apply ((((unsupported)).apply ((xcounter)) ((xkey)))) (((((unsupported)).apply ((xcounter)) ((xkey))).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcounter)) ("perm_after"))) ((((unsupported)).apply ((xcounter)) ("perm_before"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcounter)) ("session_after"))) (0))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xcounter)) ("session_before"))) (0))
            xtest_main.write
              [xverbose]
                seq > @
                  (((unsupported)).apply)
                    bogusForceDataize.write (((((xtest).xsupport).xrun_unittest)).apply ((xDateTimeTests)) ((xHeaderTests)) ((xCookieTests)) ((xFileCookieJarTests)) ((xLWPCookieTests)))
            ((x__name__).eq "__main__").if
              (((unsupported)).apply ((xtest_main)) (TRUE))