memory > xCount
memory > xValueError
memory > xQ
memory > xBook
memory > xMax
memory > xDecimal
memory > xApproximate
memory > xSum
memory > xa
memory > xWhen
memory > xdatetime
memory > xSubquery
memory > xPublisher
memory > xaggregate
memory > xStdDev
memory > xOuterRef
memory > xAvg
memory > xTestCase
memory > xCase
memory > xAuthor
memory > xExists
memory > xF
memory > xexpected_result
memory > xVariance
[] > test_filter_argument
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_filtered_numerical_aggregates
        memory > xtest_filtered_aggregate_ref_annotation
        memory > xtest_double_filtered_aggregates
        memory > xtest_related_aggregates_m2m
        memory > xtest_sum_star_exception
        memory > xsetUpTestData
        memory > xtest_filtered_aggregate_on_annotate
        memory > xtest_filtered_reused_subquery
        memory > xtest_filtered_aggregate_ref_subquery_annotation
        memory > xtest_filtered_aggregate_on_exists
        memory > xtest_filtered_aggregates
        memory > xtest_case_aggregate
        memory > xtest_related_aggregates_m2m_and_fk
        memory > xtest_excluded_aggregates
        memory > xtest_plain_annotate
        memory > xtest_filtered_aggregate_ref_multiple_subquery_annotation
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xa1)) ((((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("test") (40))))
                        (((unsupported)).apply (((xcls).xa2)) ((((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("test2") (60))))
                        (((unsupported)).apply (((xcls).xa3)) ((((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("test3") (100))))
                        (((unsupported)).apply (((xcls).xp1)) ((((unsupported)).apply ((((xPublisher).xobjects).xcreate)) ("Apress") (3) ((((unsupported)).apply (((xdatetime).xtimedelta)) (1))))))
                        (((unsupported)).apply (((xcls).xb1)) ((((unsupported)).apply ((((xBook).xobjects).xcreate)) ("159059725") ("The Definitive Guide to Django: Web Development Done Right") (447) (4.5) ((((xDecimal)).apply ("30.00"))) (((xcls).xa1)) (((xcls).xp1)) (((((xdatetime).xdate)).apply (2007) (12) (6))))))
                        (((unsupported)).apply (((xcls).xb2)) ((((unsupported)).apply ((((xBook).xobjects).xcreate)) ("067232959") ("Sams Teach Yourself Django in 24 Hours") (528) (3.0) ((((xDecimal)).apply ("23.09"))) (((xcls).xa2)) (((xcls).xp1)) (((((xdatetime).xdate)).apply (2008) (3) (3))))))
                        (((unsupported)).apply (((xcls).xb3)) ((((unsupported)).apply ((((xBook).xobjects).xcreate)) ("159059996") ("Practical Django Projects") (600) (4.5) ((((xDecimal)).apply ("29.69"))) (((xcls).xa3)) (((xcls).xp1)) (((((xdatetime).xdate)).apply (2008) (6) (23))))))
                        bogusForceDataize.write ((((((xcls).xa1).xfriends).xadd)).apply (((xcls).xa2)))
                        bogusForceDataize.write ((((((xcls).xa1).xfriends).xadd)).apply (((xcls).xa3)))
                        bogusForceDataize.write ((((((xcls).xb1).xauthors).xadd)).apply (((xcls).xa1)))
                        bogusForceDataize.write ((((((xcls).xb1).xauthors).xadd)).apply (((xcls).xa3)))
                        bogusForceDataize.write ((((((xcls).xb2).xauthors).xadd)).apply (((xcls).xa2)))
                        bogusForceDataize.write ((((((xcls).xb3).xauthors).xadd)).apply (((xcls).xa3)))
                xtest_filtered_aggregates.write
                  [xself]
                    memory > xagg
                    seq > @
                      seq
                        xagg.write (((unsupported)).apply ((xSum)) ("age") ((((unsupported)).apply ((xQ)) ("test"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xaggregate)) ((xagg)))) ("age"))) (200))
                xtest_filtered_numerical_aggregates.write
                  [xself]
                    memory > xagg
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xaggregate)) ((xexpected_result)))) ((((unsupported)).apply ((((unsupported)).apply ((xAvg)) ((((xApproximate)).apply (66.7) (1))))) ((((unsupported)).apply ((xStdDev)) ((((xApproximate)).apply (24.9) (1))))) ((((unsupported)).apply ((xVariance)) ((((xApproximate)).apply (622.2) (1))))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) (((xaggregate).x__name__)))))
                          seq
                            xagg.write (((unsupported)).apply ((xaggregate)) ("age") ((((unsupported)).apply ((xQ)) ("test"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xaggregate)) ((xagg)))) ("age"))) ((xexpected_result)))
                xtest_double_filtered_aggregates.write
                  [xself]
                    memory > xagg
                    seq > @
                      seq
                        xagg.write (((unsupported)).apply ((xSum)) ("age") ((((xQ)).apply (((((unsupported)).apply ((xQ)) ("test2")).and ((((unsupported)).apply ((xQ)) ("test")).neg))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xaggregate)) ((xagg)))) ("age"))) (60))
                xtest_excluded_aggregates.write
                  [xself]
                    memory > xagg
                    seq > @
                      seq
                        xagg.write (((unsupported)).apply ((xSum)) ("age") (((((unsupported)).apply ((xQ)) ("test2")).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xaggregate)) ((xagg)))) ("age"))) (140))
                xtest_related_aggregates_m2m.write
                  [xself]
                    memory > xagg
                    seq > @
                      seq
                        xagg.write (((unsupported)).apply ((xSum)) ("friends__age") (((((unsupported)).apply ((xQ)) ("test")).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xAuthor).xobjects).xfilter)) ("test")).xaggregate)) ((xagg)))) ("age"))) (160))
                xtest_related_aggregates_m2m_and_fk.write
                  [xself]
                    memory > xagg
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((unsupported)).apply ((xQ)) ("Apress")).and ((((unsupported)).apply ((xQ)) ("test3")).neg))
                        xagg.write (((unsupported)).apply ((xSum)) ("friends__book__pages") ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xAuthor).xobjects).xfilter)) ("test")).xaggregate)) ((xagg)))) ("pages"))) (528))
                xtest_plain_annotate.write
                  [xself]
                    memory > xqs
                    memory > xagg
                    seq > @
                      seq
                        xagg.write (((unsupported)).apply ((xSum)) ("book__pages") ((((unsupported)).apply ((xQ)) (3))))
                        xqs.write ((((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((xagg))).xorder_by)).apply ("pk"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((xa).xpages)) ((xa)) ((xqs)))) ((((unsupported)).apply (447) ("None: is there a None literal in the EO language?") (1047))))
                xtest_filtered_aggregate_on_annotate.write
                  [xself]
                    memory > xage_agg
                    memory > xpages_annotate
                    memory > xaggregated
                    seq > @
                      seq
                        xpages_annotate.write (((unsupported)).apply ((xSum)) ("book__pages") ((((unsupported)).apply ((xQ)) (3))))
                        xage_agg.write (((unsupported)).apply ((xSum)) ("age") ((((unsupported)).apply ((xQ)) (400))))
                        xaggregated.write (((unsupported)).apply (((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((xpages_annotate))).xaggregate)) ((xage_agg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xaggregated)) ((((unsupported)).apply ("summed_age") (140))))
                xtest_case_aggregate.write
                  [xself]
                    memory > xagg
                    seq > @
                      seq
                        xagg.write (((unsupported)).apply ((xSum)) ((((xCase)).apply ((((unsupported)).apply ((xWhen)) (40) ((((xF)).apply ("friends__age"))))))) ((((unsupported)).apply ((xQ)) ("test"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xaggregate)) ((xagg)))) ("age"))) (80))
                xtest_sum_star_exception.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Star cannot be used with filter. Please specify a field."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xCount)) ("*") ((((unsupported)).apply ((xQ)) (40))))
                xtest_filtered_reused_subquery.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply (((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((unsupported)).apply ((xCount)) ("friends") ((((unsupported)).apply ((xQ)) ((((xF)).apply ("age")))))))).xfilter)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xqs).xget)) (((((xqs).xvalues)).apply ("pk"))))) (((xself).xa1)))
                xtest_filtered_aggregate_ref_annotation.write
                  [xself]
                    memory > xaggs
                    seq > @
                      seq
                        xaggs.write (((unsupported)).apply (((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) (((((xF)).apply ("age")).mul 2))).xaggregate)) ((((unsupported)).apply ((xCount)) ("pk") ((((unsupported)).apply ((xQ)) (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xaggs)) ("cnt"))) (2))
                xtest_filtered_aggregate_ref_subquery_annotation.write
                  [xself]
                    memory > xaggs
                    seq > @
                      seq
                        xaggs.write (((unsupported)).apply (((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xSubquery)).apply ((((unsupported)).apply ((((((((((unsupported)).apply ((((xBook).xobjects).xfilter)) ((((xOuterRef)).apply ("pk")))).xorder_by)).apply ("pubdate")).xvalues)).apply ("pubdate__year"))) ((((unsupported)).apply (1)))))))).xaggregate)) ((((unsupported)).apply ((xCount)) ("pk") ((((unsupported)).apply ((xQ)) (2008))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xaggs)) ("cnt"))) (2))
                xtest_filtered_aggregate_ref_multiple_subquery_annotation.write
                  [xself]
                    memory > xaggregate
                    seq > @
                      seq
                        xaggregate.write (((unsupported)).apply (((((unsupported)).apply (((((((xBook).xobjects).xvalues)).apply ("publisher")).xannotate)) ((((xExists)).apply ((((unsupported)).apply ((((((xBook).xauthors).xthrough).xobjects).xfilter)) ((((xOuterRef)).apply ("pk"))))))) ((((xExists)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xBook).xobjects).xfilter)) ((((unsupported)).apply ((((xAuthor).xobjects).xfilter)) ((((xOuterRef)).apply ((((xOuterRef)).apply ("pk")))))))).xexclude)) ((((xOuterRef)).apply ("pk")))))))).xaggregate)) ((((unsupported)).apply ((xMax)) ("rating") ((((unsupported)).apply ((xQ)) (TRUE) (FALSE))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xaggregate)) ((((unsupported)).apply ("max_rating") (4.5))))
                xtest_filtered_aggregate_on_exists.write
                  [xself]
                    memory > xaggregate
                    seq > @
                      seq
                        xaggregate.write (((unsupported)).apply (((((((xBook).xobjects).xvalues)).apply ("publisher")).xaggregate)) ((((unsupported)).apply ((xMax)) ("rating") ((((xExists)).apply ((((unsupported)).apply ((((((xBook).xauthors).xthrough).xobjects).xfilter)) ((((xOuterRef)).apply ("pk"))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xaggregate)) ((((unsupported)).apply ("max_rating") (4.5))))