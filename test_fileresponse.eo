memory > xheader_disposition
memory > xcontent_types
memory > xpipe_for_write
memory > xUnseekableBytesIO
memory > xas_attachment
memory > xtemp_dir
memory > xrepr
memory > xFileResponse
memory > xkwargs
memory > xSimpleTestCase
memory > xContentFile
memory > xfilename
memory > xtmp
memory > xheader_filename
memory > xlist
memory > xstr
memory > xio
memory > xtempfile
memory > xextension
memory > xBufferClass
memory > xopen
memory > xargs
memory > xmimetype
memory > xitertools
memory > xos
memory > xTestFile
memory > x__file__
memory > xbuffer_class_name
[] > test_fileresponse
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_content_length_nonzero_starting_position_file_seekable_no_tell
        memory > xtest_content_type_file
        memory > xtest_content_length_nonzero_starting_position_buffer
        memory > xtest_content_disposition_buffer
        memory > xtest_content_length_buffer
        memory > xtest_response_buffer
        memory > xtest_content_type_buffer_explicit
        memory > xtest_response_nonzero_starting_position
        memory > xtest_content_disposition_buffer_attachment
        memory > xtest_content_length_file
        memory > xtest_content_disposition_buffer_explicit_filename
        memory > xtest_file_from_named_pipe_response
        memory > xtest_compressed_response
        memory > xtest_repr
        memory > xtest_content_type_buffer_named
        memory > xtest_content_disposition_file
        memory > xtest_content_type_buffer_explicit_default
        memory > xseekable
        memory > xtest_buffer_explicit_absolute_filename
        memory > xtest_content_length_nonzero_starting_position_file
        memory > xtest_unicode_attachment
        memory > xtest_content_type_buffer
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xio).xBytesIO)))
              xseekable.write
                [xself]
                  seq > @
                    (((unsupported)).apply (FALSE))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_content_length_file.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((xFileResponse)).apply ((((xopen)).apply ((x__file__)) ("rb"))))
                        bogusForceDataize.write ((((xresponse).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Length"))) ((((xstr)).apply ((((((xos).xpath).xgetsize)).apply ((x__file__)))))))
                xtest_content_length_buffer.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((xFileResponse)).apply (((((xio).xBytesIO)).apply ("binary content"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Length"))) ("14"))
                xtest_content_length_nonzero_starting_position_file.write
                  [xself]
                    memory > xfile
                    memory > xresponse
                    seq > @
                      seq
                        xfile.write (((xopen)).apply ((x__file__)) ("rb"))
                        bogusForceDataize.write ((((xfile).xseek)).apply (10))
                        xresponse.write (((xFileResponse)).apply ((xfile)))
                        bogusForceDataize.write ((((xresponse).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Length"))) ((((xstr)).apply (((((((xos).xpath).xgetsize)).apply ((x__file__))).sub 10)))))
                xtest_content_length_nonzero_starting_position_buffer.write
                  [xself]
                    memory > xresponse
                    memory > xtest_tuples
                    memory > xbuffer
                    seq > @
                      seq
                        xtest_tuples.write (((unsupported)).apply ((((unsupported)).apply ("BytesIO") (((xio).xBytesIO)))) ((((unsupported)).apply ("UnseekableBytesIO") ((xUnseekableBytesIO)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xbuffer_class_name)) ((xBufferClass)))) ((xtest_tuples)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xbuffer_class_name)))))
                            seq
                              xbuffer.write (((xBufferClass)).apply ("binary content"))
                              bogusForceDataize.write ((((xbuffer).xseek)).apply (10))
                              xresponse.write (((xFileResponse)).apply ((xbuffer)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Length"))) ("4"))
                xtest_content_length_nonzero_starting_position_file_seekable_no_tell.write
                  [xself]
                    memory > xseek
                    memory > x__exit__
                    memory > x__enter__
                    memory > xseekable
                    memory > xresponse
                    memory > x__init__
                    memory > xread
                    memory > xname
                    memory > xfile
                    memory > xclose
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xpath]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).x_file)) ((((xopen)).apply ((xpath)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                            xread.write
                              [xself xn_bytes]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((((xself).x_file).xread)).apply ((xn_bytes)))))
                            xseek.write
                              [xself xoffset xwhence]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((((xself).x_file).xseek)).apply ((xoffset)) ((xwhence)))))
                            xseekable.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (TRUE))
                            xname.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xself).x_file).xname)))
                            xclose.write
                              [xself]
                                seq > @
                                  ((xself).x_file).if
                                    seq
                                      bogusForceDataize.write (((((xself).x_file).xclose)).apply)
                                      (((unsupported)).apply (((xself).x_file)) ("None: is there a None literal in the EO language?"))
                            x__enter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__exit__.write
                              [xself xe_type xe_val xe_tb]
                                seq > @
                                  bogusForceDataize.write ((((xself).xclose)).apply)
                        xfile.write (((xTestFile)).apply ((x__file__)) ("rb"))
                        bogusForceDataize.write ((((xfile).xseek)).apply (10))
                        xresponse.write (((xFileResponse)).apply ((xfile)))
                        bogusForceDataize.write ((((xresponse).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Length"))) ((((xstr)).apply (((((((xos).xpath).xgetsize)).apply ((x__file__))).sub 10)))))
                xtest_content_type_file.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((xFileResponse)).apply ((((xopen)).apply ((x__file__)) ("rb"))))
                        bogusForceDataize.write ((((xresponse).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Type"))) ((((unsupported)).apply ("text/x-python") ("text/plain"))))
                xtest_content_type_buffer.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((xFileResponse)).apply (((((xio).xBytesIO)).apply ("binary content"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Type"))) ("application/octet-stream"))
                xtest_content_type_buffer_explicit.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply ((xFileResponse)) (((((xio).xBytesIO)).apply ("binary content"))) ("video/webm"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Type"))) ("video/webm"))
                xtest_content_type_buffer_explicit_default.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply ((xFileResponse)) (((((xio).xBytesIO)).apply ("binary content"))) ("text/html; charset=utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Type"))) ("text/html; charset=utf-8"))
                xtest_content_type_buffer_named.write
                  [xself]
                    memory > xresponse
                    memory > xtest_tuples
                    memory > xbuffer
                    seq > @
                      seq
                        xtest_tuples.write (((unsupported)).apply ((((unsupported)).apply ((x__file__)) ((((unsupported)).apply ("text/x-python") ("text/plain"))))) ((((unsupported)).apply (((x__file__).add "nosuchfile")) ((((unsupported)).apply ("application/octet-stream"))))) ((((unsupported)).apply ("test_fileresponse.py") ((((unsupported)).apply ("text/x-python") ("text/plain"))))) ((((unsupported)).apply ("test_fileresponse.pynosuchfile") ((((unsupported)).apply ("application/octet-stream"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfilename)) ((xcontent_types)))) ((xtest_tuples)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfilename)))))
                            seq
                              xbuffer.write ((((xio).xBytesIO)).apply ("binary content"))
                              (((unsupported)).apply (((xbuffer).xname)) ((xfilename)))
                              xresponse.write (((xFileResponse)).apply ((xbuffer)))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Type"))) ((xcontent_types)))
                xtest_content_disposition_file.write
                  [xself]
                    memory > xdispositions
                    memory > xresponse
                    memory > xfilenames
                    seq > @
                      seq
                        xfilenames.write (((unsupported)).apply ((((unsupported)).apply ("") ("test_fileresponse.py"))) ((((unsupported)).apply ("custom_name.py") ("custom_name.py"))))
                        xdispositions.write (((unsupported)).apply ((((unsupported)).apply (FALSE) ("inline"))) ((((unsupported)).apply (TRUE) ("attachment"))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfilename)) ((xheader_filename)))) ((((unsupported)).apply ((xas_attachment)) ((xheader_disposition)))))) (((((xitertools).xproduct)).apply ((xfilenames)) ((xdispositions)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfilename)) ((xheader_disposition)))))
                            seq
                              xresponse.write (((unsupported)).apply ((xFileResponse)) ((((xopen)).apply ((x__file__)) ("rb"))) ((xfilename)) ((xas_attachment)))
                              bogusForceDataize.write ((((xresponse).xclose)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Disposition"))) (("%s; filename=\"%s\"".mod (((unsupported)).apply ((xheader_disposition)) ((xheader_filename))))))
                xtest_content_disposition_buffer.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((xFileResponse)).apply (((((xio).xBytesIO)).apply ("binary content"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresponse).xhas_header)).apply ("Content-Disposition"))))
                xtest_content_disposition_buffer_attachment.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply ((xFileResponse)) (((((xio).xBytesIO)).apply ("binary content"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Disposition"))) ("attachment"))
                xtest_content_disposition_buffer_explicit_filename.write
                  [xself]
                    memory > xdispositions
                    memory > xresponse
                    seq > @
                      seq
                        xdispositions.write (((unsupported)).apply ((((unsupported)).apply (FALSE) ("inline"))) ((((unsupported)).apply (TRUE) ("attachment"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xas_attachment)) ((xheader_disposition)))) ((xdispositions)))
                          seq
                            xresponse.write (((unsupported)).apply ((xFileResponse)) (((((xio).xBytesIO)).apply ("binary content"))) ((xas_attachment)) ("custom_name.py"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Disposition"))) (("%s; filename=\"custom_name.py\"".mod (xheader_disposition))))
                xtest_response_buffer.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((xFileResponse)).apply (((((xio).xBytesIO)).apply ("binary content"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xresponse)))) ((((unsupported)).apply ("binary content"))))
                xtest_response_nonzero_starting_position.write
                  [xself]
                    memory > xresponse
                    memory > xtest_tuples
                    memory > xbuffer
                    seq > @
                      seq
                        xtest_tuples.write (((unsupported)).apply ((((unsupported)).apply ("BytesIO") (((xio).xBytesIO)))) ((((unsupported)).apply ("UnseekableBytesIO") ((xUnseekableBytesIO)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xbuffer_class_name)) ((xBufferClass)))) ((xtest_tuples)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xbuffer_class_name)))))
                            seq
                              xbuffer.write (((xBufferClass)).apply ("binary content"))
                              bogusForceDataize.write ((((xbuffer).xseek)).apply (10))
                              xresponse.write (((xFileResponse)).apply ((xbuffer)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xresponse)))) ((((unsupported)).apply ("tent"))))
                xtest_buffer_explicit_absolute_filename.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write (((unsupported)).apply ((xFileResponse)) (((((xio).xBytesIO)).apply ("binary content"))) ((x__file__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Length"))) ("14"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Disposition"))) ("inline; filename=\"test_fileresponse.py\""))
                xtest_file_from_named_pipe_response.write
                  [xself]
                    memory > xpipe_for_read
                    memory > xpipe_file
                    memory > xresponse
                    memory > xresponse_content
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtemp_dir)))
                          seq
                            xpipe_file.write (((((xos).xpath).xjoin)).apply ((xtemp_dir)) ("named_pipe"))
                            bogusForceDataize.write ((((xos).xmkfifo)).apply ((xpipe_file)))
                            xpipe_for_read.write ((((xos).xopen)).apply ((xpipe_file)) ((((xos).xO_RDONLY).or ((xos).xO_NONBLOCK))))
                            (((unsupported)).apply ((((xopen)).apply ((xpipe_file)) ("wb"))) ((xpipe_for_write)))
                              bogusForceDataize.write ((((xpipe_for_write).xwrite)).apply ("binary content"))
                            xresponse.write (((xFileResponse)).apply ((((unsupported)).apply (((xos).xfdopen)) ((xpipe_for_read)) ("rb"))))
                            xresponse_content.write (((xlist)).apply ((xresponse)))
                            bogusForceDataize.write ((((xresponse).xclose)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresponse_content)) ((((unsupported)).apply ("binary content"))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresponse).xhas_header)).apply ("Content-Length"))))
                xtest_compressed_response.write
                  [xself]
                    memory > xresponse
                    memory > xtest_tuples
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xtest_tuples.write (((unsupported)).apply ((((unsupported)).apply (".tar.gz") ("application/gzip"))) ((((unsupported)).apply (".tar.bz2") ("application/x-bzip"))) ((((unsupported)).apply (".tar.xz") ("application/x-xz"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xextension)) ((xmimetype)))) ((xtest_tuples)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xextension)))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) ((xextension)))) ((xtmp)))
                                xresponse.write (((xFileResponse)).apply ((xtmp)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Type"))) ((xmimetype)))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresponse).xhas_header)).apply ("Content-Encoding"))))
                xtest_unicode_attachment.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply ((xFileResponse)) ((((unsupported)).apply ((xContentFile)) ("binary content") ("祝您平安.odt"))) (TRUE) ("application/vnd.oasis.opendocument.text"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Type"))) ("application/vnd.oasis.opendocument.text"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Disposition"))) ("attachment; filename*=utf-8''%E7%A5%9D%E6%82%A8%E5%B9%B3%E5%AE%89.odt"))
                xtest_repr.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((xFileResponse)).apply (((((xio).xBytesIO)).apply ("binary content"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xresponse)))) ("<FileResponse status_code=200, \"application/octet-stream\">"))