memory > xDeleteView
memory > xreverse
memory > xforms
memory > xlist
memory > xAuthorForm
memory > xDeleteViewCustomDeleteWarning
memory > xArtist
memory > xTestFormMixin
memory > xCreateView
memory > xFormMixin
memory > xView
memory > xMyCreateView
memory > xRequestFactory
memory > xFormContext
memory > xModelFormMixin
memory > xImproperlyConfigured
memory > xTestCase
memory > xFormClassTestFormMixin
memory > xAuthor
memory > xoverride_settings
memory > xAuthorDeleteView
memory > xlen
memory > xviews
memory > xSimpleTestCase
[] > test_edit
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_post_data
        memory > xtest_create_with_object_url
        memory > xtest_create_view_all_fields
        memory > xtest_create_with_interpolated_redirect
        memory > xtest_update_with_interpolated_redirect
        memory > xtest_create_without_redirect
        memory > xtest_delete_with_interpolated_redirect
        memory > xtest_create_with_special_properties
        memory > xtest_get_form_checks_for_object
        memory > xtest_update_without_redirect
        memory > xtest_create_with_redirect
        memory > xtest_delete_with_form_as_post
        memory > xtest_late_form_validation
        memory > xtest_create_view_without_explicit_fields
        memory > xtest_get_prefix
        memory > xtest_delete_with_custom_delete
        memory > xtest_update_invalid
        memory > xtest_delete_without_redirect
        memory > xtest_update_with_special_properties
        memory > xtest_delete_with_redirect
        memory > xtest_get_context_data
        memory > xtest_create
        memory > xtest_update_with_redirect
        memory > xtest_define_both_fields_and_form_class
        memory > xtest_update_with_object_url
        memory > xtest_get_form
        memory > xsetUpTestData
        memory > xtest_delete_with_form_as_post_with_validation_error
        memory > xtest_create_restricted
        memory > xtest_delete_by_delete
        memory > xtest_delete_with_special_properties
        memory > xtest_initial_data
        memory > xtest_create_invalid
        memory > xtest_update_get_object
        memory > xtest_delete_by_post
        memory > xrequest_factory
        memory > xtest_create_view_with_restricted_fields
        memory > xtest_update_post
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xrequest_factory.write (((xRequestFactory)).apply)
                xtest_initial_data.write
                  [xself]
                    memory > xinitial_1
                    memory > xinitial_2
                    seq > @
                      seq
                        unsupported
                        xinitial_1.write ((((((xFormMixin)).apply).xget_initial)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xinitial_1)) ("foo"))) ("bar"))
                        xinitial_2.write ((((((xFormMixin)).apply).xget_initial)).apply)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xinitial_1)) ((xinitial_2)))
                xtest_get_prefix.write
                  [xself]
                    memory > xrequest
                    memory > xset_mixin
                    memory > xset_kwargs
                    memory > xtest_string
                    memory > xdefault_kwargs
                    memory > xget_request
                    seq > @
                      seq
                        unsupported
                        xtest_string.write "test"
                        xget_request.write (((((xself).xrequest_factory).xget)).apply ("/"))
                        (((unsupported)).apply ((xFormMixin)))
                          xrequest.write (xget_request)
                        xdefault_kwargs.write ((((((xTestFormMixin)).apply).xget_form_kwargs)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xdefault_kwargs).xget)).apply ("prefix"))))
                        xset_mixin.write (((xTestFormMixin)).apply)
                        (((unsupported)).apply (((xset_mixin).xprefix)) ((xtest_string)))
                        xset_kwargs.write ((((xset_mixin).xget_form_kwargs)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest_string)) (((((xset_kwargs).xget)).apply ("prefix"))))
                xtest_get_form.write
                  [xself]
                    memory > xform_class
                    memory > xrequest
                    seq > @
                      seq
                        (((unsupported)).apply ((xFormMixin)))
                          xrequest.write (((((xself).xrequest_factory).xget)).apply ("/"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((((xTestFormMixin)).apply).xget_form)).apply (((xforms).xForm)))) (((xforms).xForm)) ("get_form() should use provided form class."))
                        (((unsupported)).apply ((xTestFormMixin)))
                          xform_class.write ((xforms).xForm)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((((xFormClassTestFormMixin)).apply).xget_form)).apply)) (((xforms).xForm)) ("get_form() should fallback to get_form_class() if none is provided."))
                xtest_get_context_data.write
                  [xself]
                    memory > xform_class
                    memory > xrequest
                    seq > @
                      seq
                        (((unsupported)).apply ((xFormMixin)))
                          seq
                            xrequest.write (((((xself).xrequest_factory).xget)).apply ("/"))
                            xform_class.write ((xforms).xForm)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((((((xFormContext)).apply).xget_context_data)).apply)) ("form"))) (((xforms).xForm)))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("generic_views.urls"))))
              seq
                xtest_post_data.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply ("/contact/") ((((unsupported)).apply ("name") ("Me") ("message") ("Hello"))))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/list/authors/"))
                xtest_late_form_validation.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xres.write (((((xself).xclient).xpost)).apply ("/late-validation/") ((((unsupported)).apply ("name") ("Me") ("message") ("Hello"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((unsupported)).apply (((xres).xcontext)) ("form")).xis_valid)).apply)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_get_form.write
                  [xself]
                    memory > xform_class
                    seq > @
                      seq
                        xform_class.write (((((((xviews).xAuthorGetQuerySetFormView)).apply).xget_form_class)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xform_class).x_meta).xmodel)) ((xAuthor)))
                xtest_get_form_checks_for_object.write
                  [xself]
                    memory > xmixin
                    seq > @
                      seq
                        xmixin.write (((xModelFormMixin)).apply)
                        (((unsupported)).apply (((xmixin).xrequest)) (((((((xRequestFactory)).apply).xget)).apply ("/"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("initial") ((((unsupported)).apply)) ("prefix") ("None: is there a None literal in the EO language?"))) (((((xmixin).xget_form_kwargs)).apply)))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("generic_views.urls"))))
              seq
                xtest_create.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xget)).apply ("/edit/authors/create/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xres).xcontext)) ("form"))) (((xforms).xModelForm)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xres).xcontext)) ("view"))) ((xView)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("object") (((xres).xcontext)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("author") (((xres).xcontext)))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/author_form.html"))
                        xres.write (((((xself).xclient).xpost)).apply ("/edit/authors/create/") ((((unsupported)).apply ("name") ("Randall Munroe") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/list/authors/"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xvalues_list)) ("name") (TRUE))) ((((unsupported)).apply ("Randall Munroe"))))
                xtest_create_invalid.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply ("/edit/authors/create/") ((((unsupported)).apply ("name") (("A".mul 101)) ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/author_form.html"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((unsupported)).apply (((xres).xcontext)) ("form")).xerrors)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xAuthor).xobjects).xcount)).apply)) (0))
                xtest_create_with_object_url.write
                  [xself]
                    memory > xres
                    memory > xartist
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply ("/edit/artists/create/") ((((unsupported)).apply ("name") ("Rene Magritte"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        xartist.write (((unsupported)).apply ((((xArtist).xobjects).xget)) ("Rene Magritte"))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) (("/detail/artist/%d/".mod ((xartist).xpk))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((xArtist).xobjects).xall)).apply)) ((((unsupported)).apply ((xartist)))))
                xtest_create_with_redirect.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply ("/edit/authors/create/redirect/") ((((unsupported)).apply ("name") ("Randall Munroe") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/edit/authors/create/"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xvalues_list)) ("name") (TRUE))) ((((unsupported)).apply ("Randall Munroe"))))
                xtest_create_with_interpolated_redirect.write
                  [xself]
                    memory > xres
                    memory > xpk
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply ("/edit/authors/create/interpolate_redirect/") ((((unsupported)).apply ("name") ("Randall Munroe") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xvalues_list)) ("name") (TRUE))) ((((unsupported)).apply ("Randall Munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        xpk.write ((((((xAuthor).xobjects).xfirst)).apply).xpk)
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) (("/edit/author/%d/update/".mod (xpk))))
                        xres.write (((((xself).xclient).xpost)).apply ("/edit/authors/create/interpolate_redirect_nonascii/") ((((unsupported)).apply ("name") ("John Doe") ("slug") ("john-doe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        xpk.write ((((unsupported)).apply ((((xAuthor).xobjects).xget)) ("John Doe")).xpk)
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) (((("/%C3%A9dit/author/{}/update/".xformat)).apply ((xpk)))))
                xtest_create_with_special_properties.write
                  [xself]
                    memory > xres
                    memory > xobj
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xget)).apply ("/edit/authors/create/special/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xres).xcontext)) ("form"))) (((xviews).xAuthorForm)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("object") (((xres).xcontext)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("author") (((xres).xcontext)))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/form.html"))
                        xres.write (((((xself).xclient).xpost)).apply ("/edit/authors/create/special/") ((((unsupported)).apply ("name") ("Randall Munroe") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        xobj.write (((unsupported)).apply ((((xAuthor).xobjects).xget)) ("randall-munroe"))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ((((unsupported)).apply ((xreverse)) ("author_detail") ((((unsupported)).apply ("pk") (((xobj).xpk)))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((xAuthor).xobjects).xall)).apply)) ((((unsupported)).apply ((xobj)))))
                xtest_create_without_redirect.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImproperlyConfigured)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xclient).xpost)).apply ("/edit/authors/create/naive/") ((((unsupported)).apply ("name") ("Randall Munroe") ("slug") ("randall-munroe"))))
                xtest_create_restricted.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply ("/edit/authors/create/restricted/") ((((unsupported)).apply ("name") ("Randall Munroe") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/accounts/login/?next=/edit/authors/create/restricted/"))
                xtest_create_view_with_restricted_fields.write
                  [xself]
                    memory > xmodel
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply ((xCreateView)))
                          seq
                            xmodel.write (xAuthor)
                            xfields.write (((unsupported)).apply ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((((((xMyCreateView)).apply).xget_form_class)).apply).xbase_fields)))) ((((unsupported)).apply ("name"))))
                xtest_create_view_all_fields.write
                  [xself]
                    memory > xmodel
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply ((xCreateView)))
                          seq
                            xmodel.write (xAuthor)
                            xfields.write "__all__"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((((((xMyCreateView)).apply).xget_form_class)).apply).xbase_fields)))) ((((unsupported)).apply ("name") ("slug"))))
                xtest_create_view_without_explicit_fields.write
                  [xself]
                    memory > xmessage
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply ((xCreateView)))
                          xmodel.write (xAuthor)
                        xmessage.write "Using ModelFormMixin (base class of MyCreateView) without the 'fields' attribute is prohibited."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImproperlyConfigured)) ((xmessage)))))
                          bogusForceDataize.write ((((((xMyCreateView)).apply).xget_form_class)).apply)
                xtest_define_both_fields_and_form_class.write
                  [xself]
                    memory > xform_class
                    memory > xmessage
                    memory > xmodel
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply ((xCreateView)))
                          seq
                            xmodel.write (xAuthor)
                            xform_class.write (xAuthorForm)
                            xfields.write (((unsupported)).apply ("name"))
                        xmessage.write "Specifying both 'fields' and 'form_class' is not permitted."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImproperlyConfigured)) ((xmessage)))))
                          bogusForceDataize.write ((((((xMyCreateView)).apply).xget_form_class)).apply)
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("generic_views.urls"))))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xauthor)) ((((unsupported)).apply ((((xAuthor).xobjects).xcreate)) (1) ("Randall Munroe") ("randall-munroe"))))
                xtest_update_post.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xget)).apply (("/edit/author/%d/update/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xres).xcontext)) ("form"))) (((xforms).xModelForm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("object"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("author"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/author_form.html"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xres).xcontext)) ("view")).xget_form_called_count)) (1))
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/update/".mod (((xself).xauthor).xpk))) ((((unsupported)).apply ("name") ("Randall Munroe (xkcd)") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/list/authors/"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xvalues_list)) ("name") (TRUE))) ((((unsupported)).apply ("Randall Munroe (xkcd)"))))
                xtest_update_invalid.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/update/".mod (((xself).xauthor).xpk))) ((((unsupported)).apply ("name") (("A".mul 101)) ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/author_form.html"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((unsupported)).apply (((xres).xcontext)) ("form")).xerrors)))) (1))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((xAuthor).xobjects).xall)).apply)) ((((unsupported)).apply (((xself).xauthor)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xres).xcontext)) ("view")).xget_form_called_count)) (1))
                xtest_update_with_object_url.write
                  [xself]
                    memory > xres
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply ((((xArtist).xobjects).xcreate)) ("Rene Magritte"))
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/artists/%d/update/".mod ((xa).xpk))) ((((unsupported)).apply ("name") ("Rene Magritte"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) (("/detail/artist/%d/".mod ((xa).xpk))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((xArtist).xobjects).xall)).apply)) ((((unsupported)).apply ((xa)))))
                xtest_update_with_redirect.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/update/redirect/".mod (((xself).xauthor).xpk))) ((((unsupported)).apply ("name") ("Randall Munroe (author of xkcd)") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/edit/authors/create/"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xvalues_list)) ("name") (TRUE))) ((((unsupported)).apply ("Randall Munroe (author of xkcd)"))))
                xtest_update_with_interpolated_redirect.write
                  [xself]
                    memory > xres
                    memory > xpk
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/update/interpolate_redirect/".mod (((xself).xauthor).xpk))) ((((unsupported)).apply ("name") ("Randall Munroe (author of xkcd)") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xvalues_list)) ("name") (TRUE))) ((((unsupported)).apply ("Randall Munroe (author of xkcd)"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        xpk.write ((((((xAuthor).xobjects).xfirst)).apply).xpk)
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) (("/edit/author/%d/update/".mod (xpk))))
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/update/interpolate_redirect_nonascii/".mod (((xself).xauthor).xpk))) ((((unsupported)).apply ("name") ("John Doe") ("slug") ("john-doe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        xpk.write ((((unsupported)).apply ((((xAuthor).xobjects).xget)) ("John Doe")).xpk)
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) (((("/%C3%A9dit/author/{}/update/".xformat)).apply ((xpk)))))
                xtest_update_with_special_properties.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xget)).apply (("/edit/author/%d/update/special/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xres).xcontext)) ("form"))) (((xviews).xAuthorForm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("object"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("thingy"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("author") (((xres).xcontext)))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/form.html"))
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/update/special/".mod (((xself).xauthor).xpk))) ((((unsupported)).apply ("name") ("Randall Munroe (author of xkcd)") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) (("/detail/author/%d/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xvalues_list)) ("name") (TRUE))) ((((unsupported)).apply ("Randall Munroe (author of xkcd)"))))
                xtest_update_without_redirect.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "No URL to redirect to.  Either provide a url or define a get_absolute_url method on the Model."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImproperlyConfigured)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/update/naive/".mod (((xself).xauthor).xpk))) ((((unsupported)).apply ("name") ("Randall Munroe (author of xkcd)") ("slug") ("randall-munroe"))))
                xtest_update_get_object.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xget)).apply ("/edit/author/update/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xres).xcontext)) ("form"))) (((xforms).xModelForm)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (((xres).xcontext)) ("view"))) ((xView)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("object"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("author"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/author_form.html"))
                        xres.write (((((xself).xclient).xpost)).apply ("/edit/author/update/") ((((unsupported)).apply ("name") ("Randall Munroe (xkcd)") ("slug") ("randall-munroe"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/list/authors/"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((unsupported)).apply ((((xAuthor).xobjects).xvalues_list)) ("name") (TRUE))) ((((unsupported)).apply ("Randall Munroe (xkcd)"))))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("generic_views.urls"))))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xauthor)) ((((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("Randall Munroe") ("randall-munroe"))))
                xtest_delete_by_post.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xget)).apply (("/edit/author/%d/delete/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("object"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("author"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/author_confirm_delete.html"))
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/delete/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/list/authors/"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((xAuthor).xobjects).xall)).apply)) ((((unsupported)).apply)))
                xtest_delete_by_delete.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xdelete)).apply (("/edit/author/%d/delete/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/list/authors/"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((xAuthor).xobjects).xall)).apply)) ((((unsupported)).apply)))
                xtest_delete_with_redirect.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/delete/redirect/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/edit/authors/create/"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((xAuthor).xobjects).xall)).apply)) ((((unsupported)).apply)))
                xtest_delete_with_interpolated_redirect.write
                  [xself]
                    memory > xres
                    memory > xa
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/delete/interpolate_redirect/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) (("/edit/authors/create/?deleted=%d".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((xAuthor).xobjects).xall)).apply)) ((((unsupported)).apply)))
                        xa.write (((((xAuthor).xobjects).xcreate)).apply ((((unsupported)).apply ((((unsupported)).apply ("name") ("Randall Munroe") ("slug") ("randall-munroe"))))))
                        xres.write (((((xself).xclient).xpost)).apply (((("/edit/author/{}/delete/interpolate_redirect_nonascii/".xformat)).apply (((xa).xpk)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) (((("/%C3%A9dit/authors/create/?deleted={}".xformat)).apply (((xa).xpk)))))
                xtest_delete_with_special_properties.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xget)).apply (("/edit/author/%d/delete/special/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("object"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("thingy"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("author") (((xres).xcontext)))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/confirm_delete.html"))
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/delete/special/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/list/authors/"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((((((xAuthor).xobjects).xall)).apply)) ((((unsupported)).apply)))
                xtest_delete_without_redirect.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "No URL to redirect to. Provide a success_url."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImproperlyConfigured)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/delete/naive/".mod (((xself).xauthor).xpk))))
                xtest_delete_with_form_as_post.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xget)).apply (("/edit/author/%d/delete/form/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("object"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("author"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/author_confirm_delete.html"))
                        xres.write (((unsupported)).apply ((((xself).xclient).xpost)) (("/edit/author/%d/delete/form/".mod (((xself).xauthor).xpk))) ((((unsupported)).apply ("confirm") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (302))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xres)) ("/list/authors/"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xAuthor).xobjects).xall)).apply)) ((((unsupported)).apply)))
                xtest_delete_with_form_as_post_with_validation_error.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write (((((xself).xclient).xget)).apply (("/edit/author/%d/delete/form/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("object"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xres).xcontext)) ("author"))) (((xself).xauthor)))
                        bogusForceDataize.write ((((xself).xassertTemplateUsed)).apply ((xres)) ("generic_views/author_confirm_delete.html"))
                        xres.write (((((xself).xclient).xpost)).apply (("/edit/author/%d/delete/form/".mod (((xself).xauthor).xpk))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus_code)) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((unsupported)).apply (((xres).xcontext_data)) ("form")).xerrors)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((xres).xcontext_data)) ("form")).xerrors)) ("__all__"))) ((((unsupported)).apply ("You must confirm the delete."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((xres).xcontext_data)) ("form")).xerrors)) ("confirm"))) ((((unsupported)).apply ("This field is required."))))
                xtest_delete_with_custom_delete.write
                  [xself]
                    memory > xmodel
                    memory > xdelete
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)).apply ((xDeleteView)))
                          seq
                            xmodel.write (xAuthor)
                            xdelete.write
                              [xself xrequest]
                                seq > @
                                  (((unsupported)).apply)
                        xmsg.write "DeleteView uses FormMixin to handle POST requests. As a consequence, any custom deletion logic in AuthorDeleteView.delete() handler should be moved to form_valid()."
                        (((unsupported)).apply (((((xself).xassertWarnsMessage)).apply ((xDeleteViewCustomDeleteWarning)) ((xmsg)))))
                          bogusForceDataize.write (((xAuthorDeleteView)).apply)