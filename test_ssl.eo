memory > xZeroDivisionError
memory > xd
memory > xcm
memory > xthreading
memory > xplatform
memory > xThreadedTests
memory > xexpect_success
memory > xother_context
memory > xfilename
memory > xImportError
memory > xAttributeError
memory > xTestSSLDebug
memory > xc
memory > xcount
memory > xAsyncoreEchoServer
memory > xdatetime
memory > xexpected
memory > xconnaddr
memory > xlist
memory > xss
memory > xsend_meth
memory > xSimpleBackgroundTests
memory > xbits
memory > xKeyboardInterrupt
memory > xMySSLObject
memory > xMySSLSocket
memory > xalg
memory > xserver_hostname
memory > xelement
memory > xResourceWarning
memory > xclient_context2
memory > xContextTests
memory > xstorename
memory > xnewsock
memory > xValueError
memory > x_TLSMessageType
memory > xstr
memory > xis_cryptographic
memory > xfrozenset
memory > xerrno
memory > xTestPostHandshakeAuth
memory > xmeth_name
memory > xAssertionError
memory > xfile
memory > xFileNotFoundError
memory > xsocket
memory > xfunc
memory > xserver_ctx
memory > xMemoryBIOTests
memory > xrange
memory > xsock
memory > xNotImplementedError
memory > x_
memory > xinvalid
memory > xselect
memory > xbytearray
memory > xurllib
memory > xrfd
memory > xThreadedEchoServer
memory > xrecv_meth
memory > xserver_context
memory > xTLSVersion
memory > xret_val_meth
memory > x_TLSContentType
memory > xerr
memory > xpatch
memory > xopen
memory > xcatch
memory > xkw
memory > xany
memory > xtype
memory > xprint
memory > xminor
memory > xWindowsError
memory > xf
memory > xw
memory > xset
memory > xrepr
memory > xConnectionResetError
memory > xint
memory > xfix
memory > xcx
memory > xException
memory > xclient_context
memory > xhasattr
memory > xtime
memory > xtls_version
memory > xr
memory > xx
memory > xcert
memory > xi
memory > xarg
memory > xSSLErrorTests
memory > xNetworkedTests
memory > xs
memory > xsupport
memory > xsys
memory > xbool
memory > xBrokenPipeError
memory > xbytes
memory > xtuple
memory > xBaseException
memory > xBasicSocketTests
memory > xsorted
memory > xctxs
memory > xgc
memory > xargs
memory > xOSError
memory > xos
memory > xwfd
memory > xtraceback
memory > xConnectionAbortedError
memory > xweakref
memory > xprotocol
memory > xPermissionError
memory > xSSLObjectTests
memory > xgetattr
memory > xexpected_hostname
memory > xctx
memory > xe
memory > xGetPassCallable
memory > x__file__
memory > xname
memory > xunittest
memory > xsuite
memory > xclient_protocols
memory > xtimeout
memory > xnewconn
memory > xenc
memory > xasyncore
memory > xipaddr
memory > xaddr
memory > xmemoryview
memory > xtrust
memory > xserver
memory > xobject
memory > xsysconfig
memory > xstatus
memory > xenv
memory > xclient_ctx
memory > xIsADirectoryError
memory > xhostname
memory > xhex
memory > xkwargs
memory > xisinstance
memory > xindata
memory > xlen
memory > xTypeError
memory > xmake_https_server
memory > xpprint
memory > x__name__
memory > xmajor
[] > test_ssl
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_alpn_protocols
        memory > xHAVE_SECP_CURVES
        memory > xtest_sni_callback_alert
        memory > xIS_LIBRESSL
        memory > xtest_context_client_server
        memory > xtest_parse_all_sans
        memory > xtest_version_basic
        memory > xhandle_error
        memory > x__str__
        memory > xSIGNED_CERTFILE_INFO
        memory > x_have_secp_curves
        memory > xrequires_minimum_version
        memory > xhave_verify_flags
        memory > xtest_load_default_certs_env
        memory > xtest_pha_not_tls13
        memory > xtest_bpo37428_pha_cert_none
        memory > xtest_load_cert_chain
        memory > xtest_random_fork
        memory > xtest_protocol_sslv3
        memory > xtest_pha_setter
        memory > xtest_read_write_after_close_raises_valuerror
        memory > xtest_connect_capath
        memory > xhandle_close
        memory > xOP_ENABLE_MIDDLEBOX_COMPAT
        memory > xBYTES_CAPATH
        memory > xwrap_conn
        memory > xtest_tls1_3
        memory > xtest_no_shared_ciphers
        memory > xssl_io_loop
        memory > xBYTES_ONLYCERT
        memory > xtest_verify_flags
        memory > xtry_protocol_combo
        memory > xtest_dh_params
        memory > xtest_handshake_timeout
        memory > xtest_ecc_cert
        memory > xPROTOCOL_TO_TLS_VERSION
        memory > xtest_session_stats
        memory > xtest_pha_no_pha_server
        memory > xtest_wrong_cert_tls13
        memory > xtest_unsupported_dtls
        memory > xtesting_context
        memory > xtest_compression
        memory > xtest_ssl_cert_verify_error
        memory > xreadable
        memory > xsni_contexts
        memory > xtest_options
        memory > xtest_error_types
        memory > xtest_load_verify_locations
        memory > xtest_min_max_version_tlsv1_1
        memory > xtest__create_stdlib_context
        memory > xtest_recv_zero
        memory > xtest_constructor
        memory > xtest_parse_cert_CVE_2019_5010
        memory > xtest_malformed_key
        memory > xtest_load_default_certs
        memory > xONLYKEY_PROTECTED
        memory > xtest_load_verify_cadata
        memory > xONLYKEY
        memory > xtest_echo
        memory > xtest_pha_required_nocert
        memory > xtest_cert_time_to_seconds
        memory > xasn1time
        memory > xtest_empty_cert
        memory > xtest_sni_callback_refcycle
        memory > xNOSAN_HOSTNAME
        memory > xtest_min_max_version_tlsv1_2
        memory > xrequires_keylog
        memory > xtest_compression_disabled
        memory > xBYTES_ONLYKEY
        memory > xrequires_tls_version
        memory > xutc_offset
        memory > xtest_selected_alpn_protocol_if_server_uses_alpn
        memory > xclose
        memory > xtest_eof
        memory > xtest_random
        memory > xtest_wrapped_unconnected
        memory > xtest_context_setget
        memory > xtest_server_side
        memory > xtest_subclass
        memory > xtest_session_handling
        memory > xtest_keylog_defaults
        memory > xDHFILE
        memory > xtest_main
        memory > xtest_purpose_enum
        memory > xtest_get_ca_certs
        memory > xOP_SINGLE_ECDH_USE
        memory > xtest_nonblocking_send
        memory > xtest_cert_store_stats
        memory > xtest_enum_crls
        memory > xtest_makefile_close
        memory > xctypes
        memory > xNOKIACERT
        memory > xtest_connect_cadata
        memory > xtest_server_accept
        memory > xstop
        memory > xtest_get_ciphers
        memory > xtest_check_hostname_idn
        memory > xver
        memory > xhandle_accepted
        memory > xtest_session
        memory > xBADCERT
        memory > xtest_msg_callback_tls12
        memory > xtest_wrong_cert_tls12
        memory > xtest_npn_protocols
        memory > xtest_lib_reason
        memory > xtest_crl_check
        memory > xtest_refcycle
        memory > xtest_get_server_certificate_fail
        memory > xtest_dual_rsa_ecc
        memory > xtest_cert_time_to_seconds_locale
        memory > xtest_set_default_verify_paths
        memory > xALLSANFILE
        memory > xtest_sni_callback
        memory > xSIGNING_CA
        memory > xtest_malformed_cert
        memory > xstart
        memory > xproto
        memory > xSIGNED_CERTFILE
        memory > xsetUp
        memory > xIS_OPENSSL_1_1_1
        memory > xtest_getpeercert_enotconn
        memory > xseclevel_workaround
        memory > xtest_connect_ex
        memory > xIS_OPENSSL_3_0_0
        memory > xtest_rude_shutdown
        memory > xPY_SSL_DEFAULT_CIPHERS
        memory > xtest_wrap_socket
        memory > xtest_pha_optional
        memory > xtest_unwrap
        memory > xdata_file
        memory > xtest_buffer_types
        memory > x_assert_context_options
        memory > xNULLBYTECERT
        memory > xhas_tls_version
        memory > xtest_non_blocking_connect_ex
        memory > xtest_parse_cert_CVE_2013_4238
        memory > xtest_connect_with_context_fail
        memory > xCAFILE_NEURONIO
        memory > xhas_tls_protocol
        memory > xssl
        memory > xtest_DER_to_PEM
        memory > xtest_protocol_tlsv1_2
        memory > xtest_context_custom_class
        memory > xtest_constants
        memory > xtest_bio_handshake
        memory > x__exit__
        memory > xtest_parse_cert
        memory > xhandle_read
        memory > xPROTOCOLS
        memory > xOP_NO_COMPRESSION
        memory > xTALOS_INVALID_CRLDP
        memory > xno_sslv2_implies_sslv3_hello
        memory > x_test_get_server_certificate_fail
        memory > xtest_python_ciphers
        memory > xtest_errors_sslwrap
        memory > xtest_selected_alpn_protocol
        memory > xtest_recv_send
        memory > x__enter__
        memory > xtest_get_default_verify_paths
        memory > xtest_PROTOCOL_TLS
        memory > xtest_set_ecdh_curve
        memory > xtest_load_default_certs_env_windows
        memory > xtest_getpeercert
        memory > xcert_time_ok
        memory > xCRLFILE
        memory > xtest_str
        memory > xCAFILE_CACERT
        memory > xtest_non_blocking_handshake
        memory > xtest_ciphers
        memory > xtest_ecdh_curve
        memory > xREMOTE_HOST
        memory > xNOSANFILE
        memory > xtest_pha_no_pha_client
        memory > xIDNSANSFILE
        memory > x_test_get_server_certificate
        memory > xcert_time_fail
        memory > xSIGNED_CERTFILE2
        memory > xtest_do_handshake_enotconn
        memory > xSIGNED_CERTFILE_ECC
        memory > xserver_params_test
        memory > xtest_min_max_version_mismatch
        memory > xrun
        memory > xmaxDiff
        memory > xIS_OPENSSL_1_1_0
        memory > xtest_hostname_checks_common_name
        memory > xbad_cert_test
        memory > xtest_connect_with_context
        memory > xtest_keylog_filename
        memory > xcheck_common_name
        memory > xtest_asn1object
        memory > xtest_sni_callback_raising
        memory > xtest_sendfile
        memory > xtest_read_write
        memory > xneeds_sni
        memory > xSIGNED_CERTFILE_HOSTNAME
        memory > xtest_timeout_connect_ex
        memory > xtest_dealloc_warn
        memory > xtest_pending
        memory > xtest_protocol_tlsv1_1
        memory > xis_ubuntu
        memory > xtest_msg_callback
        memory > xtest_connect_ex_error
        memory > xtest_str_for_enums
        memory > xtest_unknown_channel_binding
        memory > x__init__
        memory > xtest_openssl_version
        memory > xtest_verify_mode_protocol
        memory > xtest_msg_callback_deadlock_bpo43577
        memory > xtest_shared_ciphers
        memory > xread
        memory > xtest_check_hostname
        memory > xCERTFILE
        memory > xtest_cert_time_to_seconds_timezone
        memory > xtest_get_server_certificate
        memory > xtest_match_hostname
        memory > x_do_ssl_handshake
        memory > xCAPATH
        memory > xtest_selected_npn_protocol
        memory > xOP_IGNORE_UNEXPECTED_EOF
        memory > xCERTFILE_INFO
        memory > xtest_num_tickest
        memory > xHOST
        memory > xtest_min_max_version
        memory > xBYTES_DHFILE
        memory > xkeylog_lines
        memory > xwrite
        memory > xtest_sni_callback_wrong_return_type
        memory > xtest_starttls
        memory > xtest_protocol_sslv2
        memory > xtest_min_max_version_sslv3
        memory > xtest_private_init
        memory > xSIGNED_CERTFILE_ECC_HOSTNAME
        memory > xOP_CIPHER_SERVER_PREFERENCE
        memory > xEMPTYCERT
        memory > xSIGNED_CERTFILE2_HOSTNAME
        memory > xtest_keylog_env
        memory > xtest_pha_required
        memory > xtest_tls_unique_channel_binding
        memory > xtest_protocol_tlsv1
        memory > xCERTFILE_PROTECTED
        memory > xtest_enum_certificates
        memory > xtest_socketserver
        memory > xtest_connect_fail
        memory > xtest_connect
        memory > xtest_protocol
        memory > xtest_asyncore_server
        memory > xNONEXISTINGCERT
        memory > xtest_get_ca_certs_capath
        memory > xtest_create_default_context
        memory > xHAS_KEYLOG
        memory > xtest_bad_server_hostname
        memory > xcan_clear_options
        memory > xOP_SINGLE_DH_USE
        memory > xtest_pha_optional_nocert
        memory > xtest_default_ecdh_curve
        memory > xBYTES_CERTFILE
        memory > xtest_timeout
        memory > xtest_get_server_certificate_ipv6
        memory > xONLYCERT
        memory > xtest_bio_read_write_data
        memory > xKEY_PASSWORD
        memory > xBADKEY
        memory > xtest_load_dh_params
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xctypes.write "None: is there a None literal in the EO language?"
            xssl.write ((((xsupport).ximport_module)).apply ("ssl"))
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xPROTOCOLS.write (((xsorted)).apply (((xssl).x_PROTOCOL_NAMES)))
            xHOST.write ((xsupport).xHOST)
            xIS_LIBRESSL.write (((((xssl).xOPENSSL_VERSION).xstartswith)).apply ("LibreSSL"))
            xIS_OPENSSL_1_1_0.write (((xIS_LIBRESSL).not).and (((xssl).xOPENSSL_VERSION_INFO).geq (((unsupported)).apply (1) (1) (0))))
            xIS_OPENSSL_1_1_1.write (((xIS_LIBRESSL).not).and (((xssl).xOPENSSL_VERSION_INFO).geq (((unsupported)).apply (1) (1) (1))))
            xIS_OPENSSL_3_0_0.write (((xIS_LIBRESSL).not).and (((xssl).xOPENSSL_VERSION_INFO).geq (((unsupported)).apply (3) (0) (0))))
            xPY_SSL_DEFAULT_CIPHERS.write ((((xsysconfig).xget_config_var)).apply ("PY_SSL_DEFAULT_CIPHERS"))
            xPROTOCOL_TO_TLS_VERSION.write (((unsupported)).apply)
            (((unsupported)).apply ((((unsupported)).apply ((xproto)) ((xver)))) ((((unsupported)).apply ((((unsupported)).apply ("PROTOCOL_SSLv23") ("SSLv3"))) ((((unsupported)).apply ("PROTOCOL_TLSv1") ("TLSv1"))) ((((unsupported)).apply ("PROTOCOL_TLSv1_1") ("TLSv1_1"))))))
              seq
                (((unsupported)).apply ((xAttributeError)))
                  seq
                    xproto.write (((xgetattr)).apply ((xssl)) ((xproto)))
                    xver.write (((xgetattr)).apply (((xssl).xTLSVersion)) ((xver)))
                  (((unsupported)).apply)
                (((unsupported)).apply ((((unsupported)).apply ((xPROTOCOL_TO_TLS_VERSION)) ((xproto)))) ((xver)))
            xdata_file.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ((((unsupported)).apply ((xname)))))))
            xCERTFILE.write (((xdata_file)).apply ("keycert.pem"))
            xBYTES_CERTFILE.write ((((xos).xfsencode)).apply ((xCERTFILE)))
            xONLYCERT.write (((xdata_file)).apply ("ssl_cert.pem"))
            xONLYKEY.write (((xdata_file)).apply ("ssl_key.pem"))
            xBYTES_ONLYCERT.write ((((xos).xfsencode)).apply ((xONLYCERT)))
            xBYTES_ONLYKEY.write ((((xos).xfsencode)).apply ((xONLYKEY)))
            xCERTFILE_PROTECTED.write (((xdata_file)).apply ("keycert.passwd.pem"))
            xONLYKEY_PROTECTED.write (((xdata_file)).apply ("ssl_key.passwd.pem"))
            xKEY_PASSWORD.write "somepass"
            xCAPATH.write (((xdata_file)).apply ("capath"))
            xBYTES_CAPATH.write ((((xos).xfsencode)).apply ((xCAPATH)))
            xCAFILE_NEURONIO.write (((xdata_file)).apply ("capath") ("4e1295a3.0"))
            xCAFILE_CACERT.write (((xdata_file)).apply ("capath") ("5ed36f99.0"))
            xCERTFILE_INFO.write (((unsupported)).apply ("issuer") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("XY"))))) ((((unsupported)).apply ((((unsupported)).apply ("localityName") ("Castle Anthrax"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Python Software Foundation"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("localhost"))))))) ("notAfter") ("Aug 26 14:23:15 2028 GMT") ("notBefore") ("Aug 29 14:23:15 2018 GMT") ("serialNumber") ("98A7CF88C74A32ED") ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("XY"))))) ((((unsupported)).apply ((((unsupported)).apply ("localityName") ("Castle Anthrax"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Python Software Foundation"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("localhost"))))))) ("subjectAltName") ((((unsupported)).apply ((((unsupported)).apply ("DNS") ("localhost"))))) ("version") (3))
            xCRLFILE.write (((xdata_file)).apply ("revocation.crl"))
            xSIGNED_CERTFILE.write (((xdata_file)).apply ("keycert3.pem"))
            xSIGNED_CERTFILE_HOSTNAME.write "localhost"
            xSIGNED_CERTFILE_INFO.write (((unsupported)).apply ("OCSP") ((((unsupported)).apply ("http://testca.pythontest.net/testca/ocsp/"))) ("caIssuers") ((((unsupported)).apply ("http://testca.pythontest.net/testca/pycacert.cer"))) ("crlDistributionPoints") ((((unsupported)).apply ("http://testca.pythontest.net/testca/revocation.crl"))) ("issuer") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("XY"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Python Software Foundation CA"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("our-ca-server"))))))) ("notAfter") ("Oct 28 14:23:16 2037 GMT") ("notBefore") ("Aug 29 14:23:16 2018 GMT") ("serialNumber") ("CB2D80995A69525C") ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("XY"))))) ((((unsupported)).apply ((((unsupported)).apply ("localityName") ("Castle Anthrax"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Python Software Foundation"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("localhost"))))))) ("subjectAltName") ((((unsupported)).apply ((((unsupported)).apply ("DNS") ("localhost"))))) ("version") (3))
            xSIGNED_CERTFILE2.write (((xdata_file)).apply ("keycert4.pem"))
            xSIGNED_CERTFILE2_HOSTNAME.write "fakehostname"
            xSIGNED_CERTFILE_ECC.write (((xdata_file)).apply ("keycertecc.pem"))
            xSIGNED_CERTFILE_ECC_HOSTNAME.write "localhost-ecc"
            xSIGNING_CA.write (((xdata_file)).apply ("capath") ("ceff1710.0"))
            xALLSANFILE.write (((xdata_file)).apply ("allsans.pem"))
            xIDNSANSFILE.write (((xdata_file)).apply ("idnsans.pem"))
            xNOSANFILE.write (((xdata_file)).apply ("nosan.pem"))
            xNOSAN_HOSTNAME.write "localhost"
            xREMOTE_HOST.write "self-signed.pythontest.net"
            xEMPTYCERT.write (((xdata_file)).apply ("nullcert.pem"))
            xBADCERT.write (((xdata_file)).apply ("badcert.pem"))
            xNONEXISTINGCERT.write (((xdata_file)).apply ("XXXnonexisting.pem"))
            xBADKEY.write (((xdata_file)).apply ("badkey.pem"))
            xNOKIACERT.write (((xdata_file)).apply ("nokia.pem"))
            xNULLBYTECERT.write (((xdata_file)).apply ("nullbytecert.pem"))
            xTALOS_INVALID_CRLDP.write (((xdata_file)).apply ("talos-2019-0758.pem"))
            xDHFILE.write (((xdata_file)).apply ("ffdh3072.pem"))
            xBYTES_DHFILE.write ((((xos).xfsencode)).apply ((xDHFILE)))
            xOP_NO_COMPRESSION.write (((xgetattr)).apply ((xssl)) ("OP_NO_COMPRESSION") (0))
            xOP_SINGLE_DH_USE.write (((xgetattr)).apply ((xssl)) ("OP_SINGLE_DH_USE") (0))
            xOP_SINGLE_ECDH_USE.write (((xgetattr)).apply ((xssl)) ("OP_SINGLE_ECDH_USE") (0))
            xOP_CIPHER_SERVER_PREFERENCE.write (((xgetattr)).apply ((xssl)) ("OP_CIPHER_SERVER_PREFERENCE") (0))
            xOP_ENABLE_MIDDLEBOX_COMPAT.write (((xgetattr)).apply ((xssl)) ("OP_ENABLE_MIDDLEBOX_COMPAT") (0))
            xOP_IGNORE_UNEXPECTED_EOF.write (((xgetattr)).apply ((xssl)) ("OP_IGNORE_UNEXPECTED_EOF") (0))
            xis_ubuntu.write
              []
                seq > @
                  (((unsupported)).apply ((xFileNotFoundError)))
                    (((unsupported)).apply ((((unsupported)).apply ((xopen)) ("/etc/os-release") ("utf-8"))) ((xf)))
                      (((unsupported)).apply ((((unsupported)).apply ("ubuntu") (((((xf).xread)).apply)))))
                    (((unsupported)).apply (FALSE))
            (((xis_ubuntu)).apply).if
              xseclevel_workaround.write
                []
                  seq > @
                    (((unsupported)).apply)
                      unsupported
                      (((unsupported)).apply ((xctx)) ((xctxs)))
                        ((((xhasattr)).apply ((xctx)) ("minimum_version")).and (((xctx).xminimum_version).leq (((xssl).xTLSVersion).xTLSv1_1))).if
                          bogusForceDataize.write ((((xctx).xset_ciphers)).apply ("@SECLEVEL=1:ALL"))
              xseclevel_workaround.write
                []
                  seq > @
                    (((unsupported)).apply)
            xhas_tls_protocol.write
              [xprotocol]
                memory > xname
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xprotocol)) ((xstr))).if
                      seq
                        (((unsupported)).apply (((((xprotocol).xstartswith)).apply ("PROTOCOL_"))))
                        xprotocol.write (((xgetattr)).apply ((xssl)) ((xprotocol)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xprotocol)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (FALSE))
                    (((unsupported)).apply ((xprotocol)) ((((unsupported)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLS_SERVER)) (((xssl).xPROTOCOL_TLS_CLIENT))))).if
                      (((unsupported)).apply (TRUE))
                    xname.write ((xprotocol).xname)
                    (((unsupported)).apply ((((xhas_tls_version)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((((xlen)).apply ("PROTOCOL_"))))))))))
            xhas_tls_version.write
              [xversion]
                memory > xctx
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((xversion).eq "SSLv2").if
                      (((unsupported)).apply (FALSE))
                    (((xisinstance)).apply ((xversion)) ((xstr))).if
                      xversion.write (((unsupported)).apply ((((xssl).xTLSVersion).x__members__)) ((xversion)))
                    ((((xgetattr)).apply ((xssl)) ("HAS_{version.name}")).not).if
                      (((unsupported)).apply (FALSE))
                    ((xIS_OPENSSL_3_0_0).and ((xversion).less (((xssl).xTLSVersion).xTLSv1_2))).if
                      (((unsupported)).apply (FALSE))
                    xctx.write ((((xssl).xSSLContext)).apply)
                    (((((xhasattr)).apply ((xctx)) ("minimum_version")).and (((xctx).xminimum_version).neq (((xssl).xTLSVersion).xMINIMUM_SUPPORTED))).and ((xversion).less ((xctx).xminimum_version))).if
                      (((unsupported)).apply (FALSE))
                    (((((xhasattr)).apply ((xctx)) ("maximum_version")).and (((xctx).xmaximum_version).neq (((xssl).xTLSVersion).xMAXIMUM_SUPPORTED))).and ((xversion).greater ((xctx).xmaximum_version))).if
                      (((unsupported)).apply (FALSE))
                    (((unsupported)).apply (TRUE))
            xrequires_tls_version.write
              [xversion]
                memory > xdecorator
                seq > @
                  seq
                    (((unsupported)).apply)
                    xdecorator.write
                      [xfunc]
                        memory > xwrapper
                        seq > @
                          seq
                            xwrapper.write
                              []
                                seq > @
                                  (((unsupported)).apply)
                                    ((((xhas_tls_version)).apply ((xversion))).not).if
                                      (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("{version} is not available."))))
                                      (((unsupported)).apply ((((xfunc)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))))
                            (((unsupported)).apply ((xwrapper)))
                    (((unsupported)).apply ((xdecorator)))
            xrequires_minimum_version.write ((((xunittest).xskipUnless)).apply ((((xhasattr)).apply (((xssl).xSSLContext)) ("minimum_version"))) ("required OpenSSL >= 1.1.0g"))
            xhandle_error.write
              [xprefix]
                memory > xexc_format
                seq > @
                  seq
                    xexc_format.write (((" ".xjoin)).apply (((((xtraceback).xformat_exception)).apply ((((unsupported)).apply (((((xsys).xexc_info)).apply)))))))
                    ((xsupport).xverbose).if
                      bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (((xprefix).add (xexc_format))))
            xcan_clear_options.write
              []
                seq > @
                  (((unsupported)).apply ((((xssl).x_OPENSSL_API_VERSION).geq (((unsupported)).apply (0) (9) (8) (13) (15)))))
            xno_sslv2_implies_sslv3_hello.write
              []
                seq > @
                  (((unsupported)).apply ((((xssl).xOPENSSL_VERSION_INFO).geq (((unsupported)).apply (0) (9) (7) (8) (15)))))
            xhave_verify_flags.write
              []
                seq > @
                  (((unsupported)).apply ((((xssl).xOPENSSL_VERSION_INFO).geq (((unsupported)).apply (0) (9) (8) (0) (15)))))
            x_have_secp_curves.write
              []
                memory > xctx
                seq > @
                  seq
                    (((xssl).xHAS_ECDH).not).if
                      (((unsupported)).apply (FALSE))
                    xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                    (((unsupported)).apply ((xValueError)))
                      bogusForceDataize.write ((((xctx).xset_ecdh_curve)).apply ("secp384r1"))
                      (((unsupported)).apply (FALSE))
                      (((unsupported)).apply (TRUE))
            xHAVE_SECP_CURVES.write (((x_have_secp_curves)).apply)
            xutc_offset.write
              []
                seq > @
                  seq
                    (((xtime).xdaylight).and ((((((xtime).xlocaltime)).apply).xtm_isdst).greater 0)).if
                      (((unsupported)).apply ((((xtime).xaltzone).neg)))
                    (((unsupported)).apply ((((xtime).xtimezone).neg)))
            xasn1time.write
              [xcert_time]
                memory > xdt
                memory > xfmt
                seq > @
                  seq
                    (((xssl).x_OPENSSL_API_VERSION).eq (((unsupported)).apply (0) (9) (8) (9) (15))).if
                      seq
                        xfmt.write "%b %d %H:%M:%S %Y GMT"
                        xdt.write (((((xdatetime).xdatetime).xstrptime)).apply ((xcert_time)) ((xfmt)))
                        xdt.write (((unsupported)).apply (((xdt).xreplace)) (0))
                        xcert_time.write ((((xdt).xstrftime)).apply ((xfmt)))
                        ((((unsupported)).apply ((xcert_time)) (4)).eq "0").if
                          xcert_time.write (((((unsupported)).apply ((xcert_time)) ((((unsupported)).apply (4)))).add " ").add (((unsupported)).apply ((xcert_time)) ((((unsupported)).apply (5)))))
                    (((unsupported)).apply ((xcert_time)))
            xneeds_sni.write ((((xunittest).xskipUnless)).apply (((xssl).xHAS_SNI)) ("SNI support needed for this test"))
            xtest_wrap_socket.write
              [xsock xssl_version xcert_reqs xca_certs xciphers xcertfile xkeyfile]
                memory > xcontext
                seq > @
                  (((unsupported)).apply)
                    xcontext.write ((((xssl).xSSLContext)).apply ((xssl_version)))
                    (((unsupported)).apply ((xcert_reqs)) ("None: is there a None literal in the EO language?")).if
                      seq
                        ((xcert_reqs).eq ((xssl).xCERT_NONE)).if
                          (((unsupported)).apply (((xcontext).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((xcontext).xverify_mode)) ((xcert_reqs)))
                    (((unsupported)).apply ((xca_certs)) ("None: is there a None literal in the EO language?")).if
                      bogusForceDataize.write ((((xcontext).xload_verify_locations)).apply ((xca_certs)))
                    ((((unsupported)).apply ((xcertfile)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xkeyfile)) ("None: is there a None literal in the EO language?"))).if
                      bogusForceDataize.write ((((xcontext).xload_cert_chain)).apply ((xcertfile)) ((xkeyfile)))
                    (((unsupported)).apply ((xciphers)) ("None: is there a None literal in the EO language?")).if
                      bogusForceDataize.write ((((xcontext).xset_ciphers)).apply ((xciphers)))
                    (((unsupported)).apply (((((xcontext).xwrap_socket)).apply ((xsock)) ((((unsupported)).apply ((xkwargs)))))))
            xtesting_context.write
              [xserver_cert]
                memory > xserver_context
                memory > xhostname
                memory > xclient_context
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((xserver_cert).eq (xSIGNED_CERTFILE)).if
                      xhostname.write (xSIGNED_CERTFILE_HOSTNAME)
                      ((xserver_cert).eq (xSIGNED_CERTFILE2)).if
                        xhostname.write (xSIGNED_CERTFILE2_HOSTNAME)
                        ((xserver_cert).eq (xNOSANFILE)).if
                          xhostname.write (xNOSAN_HOSTNAME)
                          (((unsupported)).apply ((((xValueError)).apply ((xserver_cert)))))
                    xclient_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                    bogusForceDataize.write ((((xclient_context).xload_verify_locations)).apply ((xSIGNING_CA)))
                    xserver_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                    bogusForceDataize.write ((((xserver_context).xload_cert_chain)).apply ((xserver_cert)))
                    bogusForceDataize.write ((((xserver_context).xload_verify_locations)).apply ((xSIGNING_CA)))
                    (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_constants.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        ((xssl).xHAS_ECDH).if
                          unsupported
                        (((xssl).xOPENSSL_VERSION_INFO).geq (((unsupported)).apply (1) (0))).if
                          unsupported
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xssl).xHAS_SNI)) ((((unsupported)).apply (TRUE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xssl).xHAS_ECDH)) ((((unsupported)).apply (TRUE) (FALSE))))
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        (((xssl).xOPENSSL_VERSION_INFO).geq (((unsupported)).apply (1) (0) (1))).if
                          seq
                            unsupported
                            unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_SSLv23)))
                xtest_private_init.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("public constructor"))))
                        (((unsupported)).apply (((((xsocket).xsocket)).apply)) ((xs)))
                          bogusForceDataize.write ((((xssl).xSSLSocket)).apply ((xs)))
                xtest_str_for_enums.write
                  [xself]
                    memory > xproto
                    memory > xctx
                    seq > @
                      seq
                        xproto.write ((xssl).xPROTOCOL_TLS)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xproto)))) ("_SSLMethod.PROTOCOL_TLS"))
                        xctx.write ((((xssl).xSSLContext)).apply ((xproto)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xctx).xprotocol)) ((xproto)))
                xtest_random.write
                  [xself]
                    memory > xv
                    memory > xdata
                    seq > @
                      seq
                        xv.write ((((xssl).xRAND_status)).apply)
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (("n RAND_status is %d (%s)n".mod (((unsupported)).apply ((xv)) ((((xv).and "sufficient randomness").or "insufficient randomness"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xis_cryptographic)))) (((((xssl).xRAND_pseudo_bytes)).apply (16))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdata)))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xis_cryptographic)) (((xv).eq 1)))
                        (xv).if
                          seq
                            xdata.write ((((xssl).xRAND_bytes)).apply (16))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdata)))) (16))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xssl).xSSLError)) (((xssl).xRAND_bytes)) (16))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xssl).xRAND_bytes)) ((5.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xssl).xRAND_pseudo_bytes)) ((5.neg)))
                        (((xhasattr)).apply ((xssl)) ("RAND_egd")).if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xssl).xRAND_egd)) (1))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xssl).xRAND_egd)) ("foo") (1))
                        bogusForceDataize.write ((((xssl).xRAND_add)).apply ("this is a random string") (75.0))
                        bogusForceDataize.write ((((xssl).xRAND_add)).apply ("this is a random bytes object") (75.0))
                        bogusForceDataize.write ((((xssl).xRAND_add)).apply ((((xbytearray)).apply ("this is a random bytearray object"))) (75.0))
                xtest_random_fork.write
                  [xself]
                    memory > xparent_random
                    memory > xstatus
                    memory > xpid
                    memory > xchild_random
                    seq > @
                      (((unsupported)).apply)
                        xstatus.write ((((xssl).xRAND_status)).apply)
                        ((xstatus).not).if
                          bogusForceDataize.write ((((xself).xfail)).apply ("OpenSSL's PRNG has insufficient randomness"))
                        (((unsupported)).apply ((((unsupported)).apply ((xrfd)) ((xwfd)))) (((((xos).xpipe)).apply)))
                        xpid.write ((((xos).xfork)).apply)
                        ((xpid).eq 0).if
                          (((unsupported)).apply ((xBaseException)))
                            seq
                              bogusForceDataize.write ((((xos).xclose)).apply ((xrfd)))
                              xchild_random.write (((unsupported)).apply (((((xssl).xRAND_pseudo_bytes)).apply (16))) (0))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchild_random)))) (16))
                              bogusForceDataize.write ((((xos).xwrite)).apply ((xwfd)) ((xchild_random)))
                              bogusForceDataize.write ((((xos).xclose)).apply ((xwfd)))
                            bogusForceDataize.write ((((xos).x_exit)).apply (1))
                            bogusForceDataize.write ((((xos).x_exit)).apply (0))
                          seq
                            bogusForceDataize.write ((((xos).xclose)).apply ((xwfd)))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((xrfd)))
                            (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xstatus)))) (((((xos).xwaitpid)).apply ((xpid)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstatus)) (0))
                            xchild_random.write ((((xos).xread)).apply ((xrfd)) (16))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xchild_random)))) (16))
                            xparent_random.write (((unsupported)).apply (((((xssl).xRAND_pseudo_bytes)).apply (16))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xparent_random)))) (16))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xchild_random)) ((xparent_random)))
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xtest_parse_cert.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xssl).x_ssl).x_test_decode_cert)).apply ((xCERTFILE)))) ((xCERTFILE_INFO)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xssl).x_ssl).x_test_decode_cert)).apply ((xSIGNED_CERTFILE)))) ((xSIGNED_CERTFILE_INFO)))
                        xp.write (((((xssl).x_ssl).x_test_decode_cert)).apply ((xNOKIACERT)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((("n".add ((((xpprint).xpformat)).apply ((xp)))).add "n")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) ("subjectAltName"))) ((((unsupported)).apply ((((unsupported)).apply ("DNS") ("projects.developer.nokia.com"))) ((((unsupported)).apply ("DNS") ("projects.forum.nokia.com"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) ("OCSP"))) ((((unsupported)).apply ("http://ocsp.verisign.com"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) ("caIssuers"))) ((((unsupported)).apply ("http://SVRIntl-G3-aia.verisign.com/SVRIntlG3.cer"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) ("crlDistributionPoints"))) ((((unsupported)).apply ("http://SVRIntl-G3-crl.verisign.com/SVRIntlG3.crl"))))
                xtest_parse_cert_CVE_2019_5010.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((((xssl).x_ssl).x_test_decode_cert)).apply ((xTALOS_INVALID_CRLDP)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((("n".add ((((xpprint).xpformat)).apply ((xp)))).add "n")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xp)) ((((unsupported)).apply ("issuer") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("UK"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("cody-ca"))))))) ("notAfter") ("Jun 14 18:00:58 2028 GMT") ("notBefore") ("Jun 18 18:00:58 2018 GMT") ("serialNumber") ("02") ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("UK"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("codenomicon-vm-2.test.lal.cisco.com"))))))) ("subjectAltName") ((((unsupported)).apply ((((unsupported)).apply ("DNS") ("codenomicon-vm-2.test.lal.cisco.com"))))) ("version") (3))))
                xtest_parse_cert_CVE_2013_4238.write
                  [xself]
                    memory > xp
                    memory > xsubject
                    memory > xsan
                    seq > @
                      seq
                        xp.write (((((xssl).x_ssl).x_test_decode_cert)).apply ((xNULLBYTECERT)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((("n".add ((((xpprint).xpformat)).apply ((xp)))).add "n")))
                        xsubject.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("US"))))) ((((unsupported)).apply ((((unsupported)).apply ("stateOrProvinceName") ("Oregon"))))) ((((unsupported)).apply ((((unsupported)).apply ("localityName") ("Beaverton"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Python Software Foundation"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationalUnitName") ("Python Core Development"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("null.python.orgx00example.org"))))) ((((unsupported)).apply ((((unsupported)).apply ("emailAddress") ("python-dev@python.org"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) ("subject"))) ((xsubject)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) ("issuer"))) ((xsubject)))
                        (((xssl).x_OPENSSL_API_VERSION).geq (((unsupported)).apply (0) (9) (8))).if
                          xsan.write (((unsupported)).apply ((((unsupported)).apply ("DNS") ("altnull.python.orgx00example.com"))) ((((unsupported)).apply ("email") ("null@python.orgx00user@example.org"))) ((((unsupported)).apply ("URI") ("http://null.python.orgx00http://example.org"))) ((((unsupported)).apply ("IP Address") ("192.0.2.1"))) ((((unsupported)).apply ("IP Address") ("2001:DB8:0:0:0:0:0:1"))))
                          xsan.write (((unsupported)).apply ((((unsupported)).apply ("DNS") ("altnull.python.orgx00example.com"))) ((((unsupported)).apply ("email") ("null@python.orgx00user@example.org"))) ((((unsupported)).apply ("URI") ("http://null.python.orgx00http://example.org"))) ((((unsupported)).apply ("IP Address") ("192.0.2.1"))) ((((unsupported)).apply ("IP Address") ("<invalid>"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) ("subjectAltName"))) ((xsan)))
                xtest_parse_all_sans.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((((xssl).x_ssl).x_test_decode_cert)).apply ((xALLSANFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) ("subjectAltName"))) ((((unsupported)).apply ((((unsupported)).apply ("DNS") ("allsans"))) ((((unsupported)).apply ("othername") ("<unsupported>"))) ((((unsupported)).apply ("othername") ("<unsupported>"))) ((((unsupported)).apply ("email") ("user@example.org"))) ((((unsupported)).apply ("DNS") ("www.example.org"))) ((((unsupported)).apply ("DirName") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("XY"))))) ((((unsupported)).apply ((((unsupported)).apply ("localityName") ("Castle Anthrax"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Python Software Foundation"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("dirname example"))))))))) ((((unsupported)).apply ("URI") ("https://www.python.org/"))) ((((unsupported)).apply ("IP Address") ("127.0.0.1"))) ((((unsupported)).apply ("IP Address") ("0:0:0:0:0:0:0:1"))) ((((unsupported)).apply ("Registered ID") ("1.2.3.4.5"))))))
                xtest_DER_to_PEM.write
                  [xself]
                    memory > xd1
                    memory > xd2
                    memory > xpem
                    memory > xp2
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xCAFILE_CACERT)) ("r"))) ((xf)))
                          xpem.write ((((xf).xread)).apply)
                        xd1.write ((((xssl).xPEM_cert_to_DER_cert)).apply ((xpem)))
                        xp2.write ((((xssl).xDER_cert_to_PEM_cert)).apply ((xd1)))
                        xd2.write ((((xssl).xPEM_cert_to_DER_cert)).apply ((xp2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd1)) ((xd2)))
                        (((((xp2).xstartswith)).apply ((((xssl).xPEM_HEADER).add "n"))).not).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("DER-to-PEM didn't include correct header:n%rn".mod (xp2))))
                        (((((xp2).xendswith)).apply ((("n".add ((xssl).xPEM_FOOTER)).add "n"))).not).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("DER-to-PEM didn't include correct footer:n%rn".mod (xp2))))
                xtest_openssl_version.write
                  [xself]
                    memory > xn
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xn.write ((xssl).xOPENSSL_VERSION_NUMBER)
                        xt.write ((xssl).xOPENSSL_VERSION_INFO)
                        xs.write ((xssl).xOPENSSL_VERSION)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xn)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xt)) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xs)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xn)) (9437184))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xn)) (1073741824))
                        (((unsupported)).apply ((((unsupported)).apply ((xmajor)) ((xminor)) ((xfix)) ((xpatch)) ((xstatus)))) ((xt)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xmajor)) (1))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xmajor)) (4))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xminor)) (0))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xminor)) (256))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xfix)) (0))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xfix)) (256))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xpatch)) (0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xpatch)) (63))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xstatus)) (0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xstatus)) (15))
                        (xIS_LIBRESSL).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply (((("LibreSSL {:d}".xformat)).apply ((xmajor)))))) ((((unsupported)).apply ((xs)) ((xt)) ((((xhex)).apply ((xn)))))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply (((("OpenSSL {:d}.{:d}.{:d}".xformat)).apply ((xmajor)) ((xminor)) ((xfix)))))) ((((unsupported)).apply ((xs)) ((xt)) ((((xhex)).apply ((xn)))))))
                xtest_refcycle.write
                  [xself]
                    memory > xs
                    memory > xwr
                    memory > xss
                    seq > @
                      (((unsupported)).apply)
                        xs.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        xss.write (((xtest_wrap_socket)).apply ((xs)))
                        xwr.write ((((xweakref).xref)).apply ((xss)))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xResourceWarning)))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xss)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_wrapped_unconnected.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        (((unsupported)).apply ((((xtest_wrap_socket)).apply ((xs)))) ((xss)))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xss).xrecv)) (1))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xss).xrecv_into)) ((((xbytearray)).apply ("x"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xss).xrecvfrom)) (1))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xss).xrecvfrom_into)) ((((xbytearray)).apply ("x"))) (1))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xss).xsend)) ("x"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xss).xsendto)) ("x") ((((unsupported)).apply ("0.0.0.0") (0))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xss).xdup)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xss).xsendmsg)) ((((unsupported)).apply ("x"))) ((((unsupported)).apply)) (0) ((((unsupported)).apply ("0.0.0.0") (0))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xss).xrecvmsg)) (100))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xss).xrecvmsg_into)) ((((unsupported)).apply ((((xbytearray)).apply (100))))))
                xtest_timeout.write
                  [xself]
                    memory > xs
                    seq > @
                      (((unsupported)).apply ((xtimeout)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (0.0) (5.0))))
                        seq
                          xs.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                          bogusForceDataize.write ((((xs).xsettimeout)).apply ((xtimeout)))
                          (((unsupported)).apply ((((xtest_wrap_socket)).apply ((xs)))) ((xss)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtimeout)) (((((xss).xgettimeout)).apply)))
                xtest_errors_sslwrap.write
                  [xself]
                    memory > xsock
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)).apply)
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xValueError)) ("certfile must be specified") (((xssl).xwrap_socket)) ((xsock)) ((xCERTFILE)))
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xValueError)) ("certfile must be specified for server-side operations") (((xssl).xwrap_socket)) ((xsock)) (TRUE))
                        (((unsupported)).apply (((xself).xassertRaisesRegex)) ((xValueError)) ("certfile must be specified for server-side operations") (((xssl).xwrap_socket)) ((xsock)) (TRUE) (""))
                        (((unsupported)).apply ((((unsupported)).apply (((xssl).xwrap_socket)) ((xsock)) (TRUE) ((xCERTFILE)))) ((xs)))
                          bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("can't connect in server-side mode") (((xs).xconnect)) ((((unsupported)).apply ((xHOST)) (8080))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                          (((unsupported)).apply (((((xsocket).xsocket)).apply)) ((xsock)))
                            (((unsupported)).apply (((xssl).xwrap_socket)) ((xsock)) ((xNONEXISTINGCERT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                          (((unsupported)).apply (((((xsocket).xsocket)).apply)) ((xsock)))
                            (((unsupported)).apply (((xssl).xwrap_socket)) ((xsock)) ((xCERTFILE)) ((xNONEXISTINGCERT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                          (((unsupported)).apply (((((xsocket).xsocket)).apply)) ((xsock)))
                            (((unsupported)).apply (((xssl).xwrap_socket)) ((xsock)) ((xNONEXISTINGCERT)) ((xNONEXISTINGCERT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                xbad_cert_test.write
                  [xself xcertfile]
                    memory > xsock
                    seq > @
                      seq
                        unsupported
                        xcertfile.write (((((xos).xpath).xjoin)).apply (((((((xos).xpath).xdirname)).apply ((x__file__))).or ((xos).xcurdir))) ((xcertfile)))
                        xsock.write ((((xsocket).xsocket)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsock).xclose)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))))
                          (((unsupported)).apply ((xtest_wrap_socket)) ((xsock)) ((xcertfile)))
                xtest_empty_cert.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xbad_cert_test)).apply ("nullcert.pem"))
                xtest_malformed_cert.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xbad_cert_test)).apply ("badcert.pem"))
                xtest_malformed_key.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xbad_cert_test)).apply ("badkey.pem"))
                xtest_match_hostname.write
                  [xself]
                    memory > xfail
                    memory > xcert
                    memory > xok
                    memory > xidna
                    seq > @
                      seq
                        xok.write
                          [xcert xhostname]
                            seq > @
                              bogusForceDataize.write ((((xssl).xmatch_hostname)).apply ((xcert)) ((xhostname)))
                        xfail.write
                          [xcert xhostname]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertRaises)).apply (((xssl).xCertificateError)) (((xssl).xmatch_hostname)) ((xcert)) ((xhostname)))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("example.com"))))))))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("example.com"))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("ExAmple.cOm"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("www.example.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) (".example.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("example.org"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("exampleXcom"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("*.a.com"))))))))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("foo.a.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("bar.foo.a.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("a.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("Xa.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) (".a.com"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("f*.com"))))))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("foo.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("f.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("bar.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("foo.a.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("bar.foo.com"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("null.python.orgx00example.org"))))))))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("null.python.orgx00example.org"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("example.org"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("null.python.org"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("*.*.a.com"))))))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("bar.foo.a.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("a.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("Xa.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) (".a.com"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("a.*.com"))))))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("a.foo.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("a..com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("a.com"))
                        xidna.write (((((("püthon.python.org".xencode)).apply ("idna")).xdecode)).apply ("ascii"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ((xidna)))))))))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ((xidna)))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("x*.python.org"))))))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ((xidna)))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("xn--p*.python.org"))))))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ((xidna)))
                        xidna.write (((((("www*.pythön.org".xencode)).apply ("idna")).xdecode)).apply ("ascii"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ((xidna)))))))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ((((((("www.pythön.org".xencode)).apply ("idna")).xdecode)).apply ("ascii"))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ((((((("www1.pythön.org".xencode)).apply ("idna")).xdecode)).apply ("ascii"))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ((((((("ftp.pythön.org".xencode)).apply ("idna")).xdecode)).apply ("ascii"))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ((((((("pythön.org".xencode)).apply ("idna")).xdecode)).apply ("ascii"))))
                        xcert.write (((unsupported)).apply ("notAfter") ("Jun 26 21:41:46 2011 GMT") ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("linuxfrz.org"))))))) ("subjectAltName") ((((unsupported)).apply ((((unsupported)).apply ("DNS") ("linuxfr.org"))) ((((unsupported)).apply ("DNS") ("linuxfr.com"))) ((((unsupported)).apply ("othername") ("<unsupported>"))))))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("linuxfr.org"))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("linuxfr.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("<unsupported>"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("linuxfrz.org"))
                        xcert.write (((unsupported)).apply ("notAfter") ("Dec 18 23:59:59 2011 GMT") ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("US"))))) ((((unsupported)).apply ((((unsupported)).apply ("stateOrProvinceName") ("California"))))) ((((unsupported)).apply ((((unsupported)).apply ("localityName") ("Mountain View"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Google Inc"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("mail.google.com"))))))))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("mail.google.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("gmail.com"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("California"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("example.com"))))))) ("subjectAltName") ((((unsupported)).apply ((((unsupported)).apply ("DNS") ("example.com"))) ((((unsupported)).apply ("IP Address") ("10.11.12.13"))) ((((unsupported)).apply ("IP Address") ("14.15.16.17"))) ((((unsupported)).apply ("IP Address") ("127.0.0.1"))))))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("10.11.12.13"))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("14.15.16.17"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("127.1"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("14.15.16.17 "))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("14.15.16.17 extra data"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("14.15.16.18"))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("example.net"))
                        ((xsupport).xIPV6_ENABLED).if
                          seq
                            xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("example.com"))))))) ("subjectAltName") ((((unsupported)).apply ((((unsupported)).apply ("DNS") ("example.com"))) ((((unsupported)).apply ("IP Address") ("2001:0:0:0:0:0:0:CAFEn"))) ((((unsupported)).apply ("IP Address") ("2003:0:0:0:0:0:0:BABAn"))))))
                            bogusForceDataize.write (((xok)).apply ((xcert)) ("2001::cafe"))
                            bogusForceDataize.write (((xok)).apply ((xcert)) ("2003::baba"))
                            bogusForceDataize.write (((xfail)).apply ((xcert)) ("2003::baba "))
                            bogusForceDataize.write (((xfail)).apply ((xcert)) ("2003::baba extra data"))
                            bogusForceDataize.write (((xfail)).apply ((xcert)) ("2003::bebe"))
                            bogusForceDataize.write (((xfail)).apply ((xcert)) ("example.net"))
                        xcert.write (((unsupported)).apply ("notAfter") ("Dec 18 23:59:59 2011 GMT") ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("US"))))) ((((unsupported)).apply ((((unsupported)).apply ("stateOrProvinceName") ("California"))))) ((((unsupported)).apply ((((unsupported)).apply ("localityName") ("Mountain View"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Google Inc"))))))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("mail.google.com"))
                        xcert.write (((unsupported)).apply ("notAfter") ("Dec 18 23:59:59 2099 GMT") ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("US"))))) ((((unsupported)).apply ((((unsupported)).apply ("stateOrProvinceName") ("California"))))) ((((unsupported)).apply ((((unsupported)).apply ("localityName") ("Mountain View"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("mail.google.com"))))))) ("subjectAltName") ((((unsupported)).apply ((((unsupported)).apply ("othername") ("blabla"))))))
                        bogusForceDataize.write (((xok)).apply ((xcert)) ("mail.google.com"))
                        xcert.write (((unsupported)).apply ("notAfter") ("Dec 18 23:59:59 2099 GMT") ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("countryName") ("US"))))) ((((unsupported)).apply ((((unsupported)).apply ("stateOrProvinceName") ("California"))))) ((((unsupported)).apply ((((unsupported)).apply ("localityName") ("Mountain View"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Google Inc"))))))) ("subjectAltName") ((((unsupported)).apply ((((unsupported)).apply ("othername") ("blabla"))))))
                        bogusForceDataize.write (((xfail)).apply ((xcert)) ("google.com"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xssl).xmatch_hostname)) ("None: is there a None literal in the EO language?") ("example.com"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xssl).xmatch_hostname)) ((((unsupported)).apply)) ("example.com"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("a*b.example.com"))))))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xCertificateError)) ("partial wildcards in leftmost label are not supported"))))
                          bogusForceDataize.write ((((xssl).xmatch_hostname)).apply ((xcert)) ("axxb.example.com"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("www.*.example.com"))))))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xCertificateError)) ("wildcard can only be present in the leftmost label"))))
                          bogusForceDataize.write ((((xssl).xmatch_hostname)).apply ((xcert)) ("www.sub.example.com"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("a*b*.example.com"))))))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xCertificateError)) ("too many wildcards"))))
                          bogusForceDataize.write ((((xssl).xmatch_hostname)).apply ((xcert)) ("axxbxxc.example.com"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("*"))))))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xCertificateError)) ("sole wildcard without additional labels are not support"))))
                          bogusForceDataize.write ((((xssl).xmatch_hostname)).apply ((xcert)) ("host"))
                        xcert.write (((unsupported)).apply ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("*.com"))))))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xCertificateError)) ("hostname 'com' doesn't match '*.com'"))))
                          bogusForceDataize.write ((((xssl).xmatch_hostname)).apply ((xcert)) ("com"))
                        (((unsupported)).apply ((xinvalid)) ((((unsupported)).apply ("1") ("") ("1.2.3") ("256.0.0.1") ("127.0.0.1/24"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            bogusForceDataize.write ((((xssl).x_inet_paton)).apply ((xinvalid)))
                        (((unsupported)).apply ((xipaddr)) ((((unsupported)).apply ("127.0.0.1") ("192.168.0.1"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xssl).x_inet_paton)).apply ((xipaddr)))))
                        ((xsupport).xIPV6_ENABLED).if
                          (((unsupported)).apply ((xipaddr)) ((((unsupported)).apply ("::1") ("2001:db8:85a3::8a2e:370:7334"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xssl).x_inet_paton)).apply ((xipaddr)))))
                xtest_server_side.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        (((unsupported)).apply (((((xsocket).xsocket)).apply)) ((xsock)))
                          (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xctx).xwrap_socket)) ((xsock)) (TRUE) ("some.hostname"))
                xtest_unknown_channel_binding.write
                  [xself]
                    memory > xs
                    memory > xc
                    seq > @
                      seq
                        xs.write ((((xsocket).xcreate_server)).apply ((((unsupported)).apply ("127.0.0.1") (0))))
                        xc.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        bogusForceDataize.write ((((xc).xconnect)).apply (((((xs).xgetsockname)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtest_wrap_socket)) ((xc)) (FALSE))) ((xss)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            bogusForceDataize.write ((((xss).xget_channel_binding)).apply ("unknown-type"))
                        bogusForceDataize.write ((((xs).xclose)).apply)
                xtest_tls_unique_channel_binding.write
                  [xself]
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        xs.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        (((unsupported)).apply ((((xtest_wrap_socket)).apply ((xs)))) ((xss)))
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xss).xget_channel_binding)).apply ("tls-unique"))))
                        xs.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtest_wrap_socket)) ((xs)) (TRUE) ((xCERTFILE)))) ((xss)))
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xss).xget_channel_binding)).apply ("tls-unique"))))
                xtest_dealloc_warn.write
                  [xself]
                    memory > xr
                    memory > xss
                    seq > @
                      seq
                        xss.write (((xtest_wrap_socket)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))))
                        xr.write (((xrepr)).apply ((xss)))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xResourceWarning)))) ((xcm)))
                          seq
                            xss.write "None: is there a None literal in the EO language?"
                            bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xr)) ((((xstr)).apply ((((unsupported)).apply ((((xcm).xwarning).xargs)) (0))))))
                xtest_get_default_verify_paths.write
                  [xself]
                    memory > xpaths
                    seq > @
                      seq
                        xpaths.write ((((xssl).xget_default_verify_paths)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xpaths)))) (6))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpaths)) (((xssl).xDefaultVerifyPaths)))
                        (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("SSL_CERT_DIR"))) ((xCAPATH)))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("SSL_CERT_FILE"))) ((xCERTFILE)))
                            xpaths.write ((((xssl).xget_default_verify_paths)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpaths).xcafile)) ((xCERTFILE)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpaths).xcapath)) ((xCAPATH)))
                xtest_enum_certificates.write
                  [xself]
                    memory > xstore
                    memory > xserverAuth
                    memory > xtrust_oids
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xssl).xenum_certificates)).apply ("CA"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xssl).xenum_certificates)).apply ("ROOT"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xssl).xenum_certificates)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xWindowsError)) (((xssl).xenum_certificates)) (""))
                        xtrust_oids.write (((xset)).apply)
                        (((unsupported)).apply ((xstorename)) ((((unsupported)).apply ("CA") ("ROOT"))))
                          seq
                            xstore.write ((((xssl).xenum_certificates)).apply ((xstorename)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xstore)) ((xlist)))
                            (((unsupported)).apply ((xelement)) ((xstore)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xelement)) ((xtuple)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xelement)))) (3))
                                (((unsupported)).apply ((((unsupported)).apply ((xcert)) ((xenc)) ((xtrust)))) ((xelement)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcert)) ((xbytes)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((xenc)) ((((unsupported)).apply ("x509_asn") ("pkcs_7_asn"))))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xtrust)) ((((unsupported)).apply ((xfrozenset)) ((xset)) ((xbool)))))
                                (((xisinstance)).apply ((xtrust)) ((((unsupported)).apply ((xfrozenset)) ((xset))))).if
                                  bogusForceDataize.write ((((xtrust_oids).xupdate)).apply ((xtrust)))
                        xserverAuth.write "1.3.6.1.5.5.7.3.1"
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xserverAuth)) ((xtrust_oids)))
                xtest_enum_crls.write
                  [xself]
                    memory > xcrls
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xssl).xenum_crls)).apply ("CA"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xssl).xenum_crls)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xWindowsError)) (((xssl).xenum_crls)) (""))
                        xcrls.write ((((xssl).xenum_crls)).apply ("CA"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcrls)) ((xlist)))
                        (((unsupported)).apply ((xelement)) ((xcrls)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xelement)) ((xtuple)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xelement)))) (2))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((xelement)) (0))) ((xbytes)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((xelement)) (1))) ((((unsupported)).apply ("x509_asn") ("pkcs_7_asn"))))
                xtest_asn1object.write
                  [xself]
                    memory > xval
                    memory > xexpected
                    memory > xobj
                    seq > @
                      seq
                        xexpected.write (((unsupported)).apply (129) ("serverAuth") ("TLS Web Server Authentication") ("1.3.6.1.5.5.7.3.1"))
                        xval.write ((((xssl).x_ASN1Object)).apply ("1.3.6.1.5.5.7.3.1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xval)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xval).xnid)) (129))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xval).xshortname)) ("serverAuth"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xval).xlongname)) ("TLS Web Server Authentication"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xval).xoid)) ("1.3.6.1.5.5.7.3.1"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xval)) (((xssl).x_ASN1Object)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xssl).x_ASN1Object)) ("serverAuth"))
                        xval.write (((((xssl).x_ASN1Object).xfromnid)).apply (129))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xval)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xval)) (((xssl).x_ASN1Object)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xssl).x_ASN1Object).xfromnid)) ((1.neg)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("unknown NID 100000"))))
                          bogusForceDataize.write (((((xssl).x_ASN1Object).xfromnid)).apply (100000))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1000))))
                          (((unsupported)).apply ((xValueError)))
                            xobj.write (((((xssl).x_ASN1Object).xfromnid)).apply ((xi)))
                            seq
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xobj).xnid)) ((xint)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xobj).xshortname)) ((xstr)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xobj).xlongname)) ((xstr)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xobj).xoid)) ((((unsupported)).apply ((xstr)) ((((xtype)).apply ("None: is there a None literal in the EO language?"))))))
                        xval.write (((((xssl).x_ASN1Object).xfromname)).apply ("TLS Web Server Authentication"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xval)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xval)) (((xssl).x_ASN1Object)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xssl).x_ASN1Object).xfromname)).apply ("serverAuth"))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xssl).x_ASN1Object).xfromname)).apply ("1.3.6.1.5.5.7.3.1"))) ((xexpected)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("unknown object 'serverauth'"))))
                          bogusForceDataize.write (((((xssl).x_ASN1Object).xfromname)).apply ("serverauth"))
                xtest_purpose_enum.write
                  [xself]
                    memory > xval
                    seq > @
                      seq
                        xval.write ((((xssl).x_ASN1Object)).apply ("1.3.6.1.5.5.7.3.1"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xssl).xPurpose).xSERVER_AUTH)) (((xssl).x_ASN1Object)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xssl).xPurpose).xSERVER_AUTH)) ((xval)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xssl).xPurpose).xSERVER_AUTH).xnid)) (129))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xssl).xPurpose).xSERVER_AUTH).xshortname)) ("serverAuth"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xssl).xPurpose).xSERVER_AUTH).xoid)) ("1.3.6.1.5.5.7.3.1"))
                        xval.write ((((xssl).x_ASN1Object)).apply ("1.3.6.1.5.5.7.3.2"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xssl).xPurpose).xCLIENT_AUTH)) (((xssl).x_ASN1Object)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xssl).xPurpose).xCLIENT_AUTH)) ((xval)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xssl).xPurpose).xCLIENT_AUTH).xnid)) (130))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xssl).xPurpose).xCLIENT_AUTH).xshortname)) ("clientAuth"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xssl).xPurpose).xCLIENT_AUTH).xoid)) ("1.3.6.1.5.5.7.3.2"))
                xtest_unsupported_dtls.write
                  [xself]
                    memory > xs
                    memory > xctx
                    seq > @
                      seq
                        xs.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_DGRAM)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNotImplementedError)))) ((xcx)))
                          (((unsupported)).apply ((xtest_wrap_socket)) ((xs)) (((xssl).xCERT_NONE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcx).xexception)))) ("only stream sockets are supported"))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNotImplementedError)))) ((xcx)))
                          bogusForceDataize.write ((((xctx).xwrap_socket)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcx).xexception)))) ("only stream sockets are supported"))
                xcert_time_ok.write
                  [xself xtimestring xtimestamp]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xssl).xcert_time_to_seconds)).apply ((xtimestring)))) ((xtimestamp)))
                xcert_time_fail.write
                  [xself xtimestring]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                        bogusForceDataize.write ((((xssl).xcert_time_to_seconds)).apply ((xtimestring)))
                xtest_cert_time_to_seconds_timezone.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("May  9 00:00:00 2007 GMT") (1178668800.0))
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("Jan  5 09:34:43 2018 GMT") (1515144883.0))
                xtest_cert_time_to_seconds.write
                  [xself]
                    memory > xts
                    memory > xtimestring
                    memory > xnewyear_ts
                    seq > @
                      seq
                        xtimestring.write "Jan  5 09:34:43 2018 GMT"
                        xts.write 1515144883.0
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ((xtimestring)) ((xts)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xssl).xcert_time_to_seconds)) ((xtimestring)))) ((xts)))
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("Jan 05 09:34:43 2018 GMT") ((xts)))
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("JaN  5 09:34:43 2018 GmT") ((xts)))
                        bogusForceDataize.write ((((xself).xcert_time_fail)).apply ("Jan  5 09:34 2018 GMT"))
                        bogusForceDataize.write ((((xself).xcert_time_fail)).apply ("Jan  5 09:34:43 2018"))
                        bogusForceDataize.write ((((xself).xcert_time_fail)).apply ("Jan  5 09:34:43 2018 UTC"))
                        bogusForceDataize.write ((((xself).xcert_time_fail)).apply ("Jan 35 09:34:43 2018 GMT"))
                        bogusForceDataize.write ((((xself).xcert_time_fail)).apply ("Jon  5 09:34:43 2018 GMT"))
                        bogusForceDataize.write ((((xself).xcert_time_fail)).apply ("Jan  5 24:00:00 2018 GMT"))
                        bogusForceDataize.write ((((xself).xcert_time_fail)).apply ("Jan  5 09:60:43 2018 GMT"))
                        xnewyear_ts.write 1230768000.0
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("Dec 31 23:59:60 2008 GMT") ((xnewyear_ts)))
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("Jan  1 00:00:00 2009 GMT") ((xnewyear_ts)))
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("Jan  5 09:34:59 2018 GMT") (1515144899))
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("Jan  5 09:34:60 2018 GMT") (1515144900))
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("Jan  5 09:34:61 2018 GMT") (1515144901))
                        bogusForceDataize.write ((((xself).xcert_time_fail)).apply ("Jan  5 09:34:62 2018 GMT"))
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("Dec 31 23:59:59 9999 GMT") (253402300799.0))
                xtest_cert_time_to_seconds_locale.write
                  [xself]
                    memory > xlocal_february_name
                    seq > @
                      (((unsupported)).apply)
                        xlocal_february_name.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xtime).xstrftime)).apply ("%b") ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (0) (0) (0))))))
                        (((((((xlocal_february_name)).apply).xlower)).apply).eq "feb").if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("locale-specific month name needs to be different from C locale"))
                        bogusForceDataize.write ((((xself).xcert_time_ok)).apply ("Feb  9 00:00:00 2007 GMT") (1170979200.0))
                        bogusForceDataize.write ((((xself).xcert_time_fail)).apply (((((xlocal_february_name)).apply).add "  9 00:00:00 2007 GMT")))
                xtest_connect_ex_error.write
                  [xself]
                    memory > xrc
                    memory > xerrors
                    memory > xs
                    memory > xport
                    memory > xserver
                    seq > @
                      seq
                        xserver.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xserver).xclose)))
                        xport.write ((((xsupport).xbind_port)).apply ((xserver)))
                        xs.write (((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                        xrc.write ((((xs).xconnect_ex)).apply ((((unsupported)).apply ((xHOST)) ((xport)))))
                        xerrors.write (((unsupported)).apply (((xerrno).xECONNREFUSED)) (((xerrno).xEHOSTUNREACH)) (((xerrno).xETIMEDOUT)) (((xerrno).xEWOULDBLOCK)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xrc)) ((xerrors)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_constructor.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        (((unsupported)).apply ((xprotocol)) ((xPROTOCOLS)))
                          bogusForceDataize.write ((((xssl).xSSLContext)).apply ((xprotocol)))
                        xctx.write ((((xssl).xSSLContext)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xprotocol)) (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xssl).xSSLContext)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xssl).xSSLContext)) (42))
                xtest_protocol.write
                  [xself]
                    memory > xctx
                    seq > @
                      (((unsupported)).apply ((xproto)) ((xPROTOCOLS)))
                        seq
                          xctx.write ((((xssl).xSSLContext)).apply ((xproto)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xprotocol)) ((xproto)))
                xtest_ciphers.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xctx).xset_ciphers)).apply ("ALL"))
                        bogusForceDataize.write ((((xctx).xset_ciphers)).apply ("DEFAULT"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("No cipher can be selected"))))
                          bogusForceDataize.write ((((xctx).xset_ciphers)).apply ("^$:,;?*'dorothyx"))
                xtest_python_ciphers.write
                  [xself]
                    memory > xname
                    memory > xciphers
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        xciphers.write ((((xctx).xget_ciphers)).apply)
                        (((unsupported)).apply ((xsuite)) ((xciphers)))
                          seq
                            xname.write (((unsupported)).apply ((xsuite)) ("name"))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("PSK") ((xname)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("SRP") ((xname)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("MD5") ((xname)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("RC4") ((xname)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("3DES") ((xname)))
                xtest_get_ciphers.write
                  [xself]
                    memory > xctx
                    memory > xnames
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xctx).xset_ciphers)).apply ("AESGCM"))
                        xnames.write (((xset)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ("name"))) ((xd)) (((((xctx).xget_ciphers)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("AES256-GCM-SHA384") ((xnames)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("AES128-GCM-SHA256") ((xnames)))
                xtest_options.write
                  [xself]
                    memory > xdefault
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        xdefault.write ((((xssl).xOP_ALL).or ((xssl).xOP_NO_SSLv2)).or ((xssl).xOP_NO_SSLv3))
                        (((unsupported)).apply ((xdefault)) (((((((xOP_NO_COMPRESSION).or (xOP_CIPHER_SERVER_PREFERENCE)).or (xOP_SINGLE_DH_USE)).or (xOP_SINGLE_ECDH_USE)).or (xOP_ENABLE_MIDDLEBOX_COMPAT)).or (xOP_IGNORE_UNEXPECTED_EOF))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdefault)) (((xctx).xoptions)))
                        (((unsupported)).apply (((xctx).xoptions)) (((xssl).xOP_NO_TLSv1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xdefault).or ((xssl).xOP_NO_TLSv1))) (((xctx).xoptions)))
                        (((xcan_clear_options)).apply).if
                          seq
                            (((unsupported)).apply (((xctx).xoptions)) ((((xctx).xoptions).and (((xssl).xOP_NO_TLSv1).neg))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdefault)) (((xctx).xoptions)))
                            (((unsupported)).apply (((xctx).xoptions)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (0) ((((xctx).xoptions).and (((xssl).xOP_NO_SSLv3).neg))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            (((unsupported)).apply (((xctx).xoptions)) (0))
                xtest_verify_mode_protocol.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_OPTIONAL)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_OPTIONAL)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xctx).xverify_mode)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xctx).xverify_mode)) (42))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xctx).xcheck_hostname)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xcheck_hostname)))
                xtest_hostname_checks_common_name.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xhostname_checks_common_name)))
                        ((xssl).xHAS_NEVER_CHECK_COMMON_NAME).if
                          seq
                            (((unsupported)).apply (((xctx).xhostname_checks_common_name)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xhostname_checks_common_name)))
                            (((unsupported)).apply (((xctx).xhostname_checks_common_name)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xctx).xhostname_checks_common_name)))
                            (((unsupported)).apply (((xctx).xhostname_checks_common_name)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xhostname_checks_common_name)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                            (((unsupported)).apply (((xctx).xhostname_checks_common_name)) (TRUE))
                xtest_min_max_version.write
                  [xself]
                    memory > xminimum_range
                    memory > xctx
                    memory > xmaximum_range
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        xminimum_range.write (((unsupported)).apply ((((xssl).xTLSVersion).xMINIMUM_SUPPORTED)) ((((xssl).xTLSVersion).xTLSv1)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        xmaximum_range.write (((unsupported)).apply ((((xssl).xTLSVersion).xMAXIMUM_SUPPORTED)) ((((xssl).xTLSVersion).xTLSv1_3)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xctx).xminimum_version)) ((xminimum_range)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xctx).xmaximum_version)) ((xmaximum_range)))
                        (((unsupported)).apply (((xctx).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1_1)))
                        (((unsupported)).apply (((xctx).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1_1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        (((unsupported)).apply (((xctx).xminimum_version)) ((((xssl).xTLSVersion).xMINIMUM_SUPPORTED)))
                        (((unsupported)).apply (((xctx).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xminimum_version)) ((((xssl).xTLSVersion).xMINIMUM_SUPPORTED)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1)))
                        (((unsupported)).apply (((xctx).xmaximum_version)) ((((xssl).xTLSVersion).xMAXIMUM_SUPPORTED)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xmaximum_version)) ((((xssl).xTLSVersion).xMAXIMUM_SUPPORTED)))
                        (((unsupported)).apply (((xctx).xmaximum_version)) ((((xssl).xTLSVersion).xMINIMUM_SUPPORTED)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xctx).xmaximum_version)) ((((unsupported)).apply ((((xssl).xTLSVersion).xTLSv1)) ((((xssl).xTLSVersion).xSSLv3)))))
                        (((unsupported)).apply (((xctx).xminimum_version)) ((((xssl).xTLSVersion).xMAXIMUM_SUPPORTED)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xctx).xminimum_version)) ((((unsupported)).apply ((((xssl).xTLSVersion).xTLSv1_2)) ((((xssl).xTLSVersion).xTLSv1_3)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xctx).xminimum_version)) (42))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLSv1_1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xctx).xminimum_version)) ((xminimum_range)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xmaximum_version)) ((((xssl).xTLSVersion).xMAXIMUM_SUPPORTED)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xctx).xminimum_version)) ((((xssl).xTLSVersion).xMINIMUM_SUPPORTED)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xctx).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1)))
                xtest_verify_flags.write
                  [xself]
                    memory > xtf
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        xtf.write (((xgetattr)).apply ((xssl)) ("VERIFY_X509_TRUSTED_FIRST") (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_flags)) ((((xssl).xVERIFY_DEFAULT).or (xtf))))
                        (((unsupported)).apply (((xctx).xverify_flags)) (((xssl).xVERIFY_CRL_CHECK_LEAF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_flags)) (((xssl).xVERIFY_CRL_CHECK_LEAF)))
                        (((unsupported)).apply (((xctx).xverify_flags)) (((xssl).xVERIFY_CRL_CHECK_CHAIN)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_flags)) (((xssl).xVERIFY_CRL_CHECK_CHAIN)))
                        (((unsupported)).apply (((xctx).xverify_flags)) (((xssl).xVERIFY_DEFAULT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_flags)) (((xssl).xVERIFY_DEFAULT)))
                        (((unsupported)).apply (((xctx).xverify_flags)) ((((xssl).xVERIFY_CRL_CHECK_LEAF).or ((xssl).xVERIFY_X509_STRICT))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_flags)) ((((xssl).xVERIFY_CRL_CHECK_LEAF).or ((xssl).xVERIFY_X509_STRICT))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xctx).xverify_flags)) ("None: is there a None literal in the EO language?"))
                xtest_load_cert_chain.write
                  [xself]
                    memory > xgetpass_bad_type
                    memory > x__call__
                    memory > xgetpass_huge
                    memory > xgetpass_bytearray
                    memory > xgetpass_bytes
                    memory > xgetpass_unicode
                    memory > xctx
                    memory > xgetpass_badpass
                    memory > xgetpass_exception
                    memory > xgetpass
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE)) ((xCERTFILE)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xctx).xload_cert_chain)) ((xCERTFILE)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xNONEXISTINGCERT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("PEM lib"))))
                          bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xBADCERT)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("PEM lib"))))
                          bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xEMPTYCERT)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xONLYCERT)) ((xONLYKEY)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xONLYCERT)) ((xONLYKEY)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xBYTES_ONLYCERT)) ((xBYTES_ONLYKEY)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("PEM lib"))))
                          bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xONLYCERT)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("PEM lib"))))
                          bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xONLYKEY)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("PEM lib"))))
                          (((unsupported)).apply (((xctx).xload_cert_chain)) ((xONLYKEY)) ((xONLYCERT)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("key values mismatch"))))
                          bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xCAFILE_CACERT)) ((xONLYKEY)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((xKEY_PASSWORD)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) (((((xKEY_PASSWORD).xencode)).apply)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((((xbytearray)).apply (((((xKEY_PASSWORD).xencode)).apply)))))
                        bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xONLYCERT)) ((xONLYKEY_PROTECTED)) ((xKEY_PASSWORD)))
                        bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xONLYCERT)) ((xONLYKEY_PROTECTED)) (((((xKEY_PASSWORD).xencode)).apply)))
                        bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xONLYCERT)) ((xONLYKEY_PROTECTED)) ((((xbytearray)).apply (((((xKEY_PASSWORD).xencode)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("should be a string"))))
                          (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))))
                          (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ("badpass"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("cannot be longer"))))
                          (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) (("a".mul 102400)))
                        xgetpass_unicode.write
                          []
                            seq > @
                              (((unsupported)).apply ((xKEY_PASSWORD)))
                        xgetpass_bytes.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xKEY_PASSWORD).xencode)).apply)))
                        xgetpass_bytearray.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xbytearray)).apply (((((xKEY_PASSWORD).xencode)).apply)))))
                        xgetpass_badpass.write
                          []
                            seq > @
                              (((unsupported)).apply ("badpass"))
                        xgetpass_huge.write
                          []
                            seq > @
                              (((unsupported)).apply (("a".mul (1024.mul 1024))))
                        xgetpass_bad_type.write
                          []
                            seq > @
                              (((unsupported)).apply (9))
                        xgetpass_exception.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xException)).apply ("getpass error"))))
                        (((unsupported)).apply)
                          seq
                            x__call__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xKEY_PASSWORD)))
                            xgetpass.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xKEY_PASSWORD)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((xgetpass_unicode)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((xgetpass_bytes)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((xgetpass_bytearray)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((((xGetPassCallable)).apply)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) (((((xGetPassCallable)).apply).xgetpass)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))))
                          (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((xgetpass_badpass)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("cannot be longer"))))
                          (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((xgetpass_huge)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("must return a string"))))
                          (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((xgetpass_bad_type)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xException)) ("getpass error"))))
                          (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE_PROTECTED)) ((xgetpass_exception)))
                        (((unsupported)).apply (((xctx).xload_cert_chain)) ((xCERTFILE)) ((xgetpass_exception)))
                xtest_load_verify_locations.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xCERTFILE)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xCERTFILE)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xBYTES_CERTFILE)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xBYTES_CERTFILE)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xload_verify_locations)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xload_verify_locations)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xNONEXISTINGCERT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("PEM lib"))))
                          bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xBADCERT)))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xCERTFILE)) ((xCAPATH)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xCERTFILE)) ((xBYTES_CAPATH)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xload_verify_locations)) ("None: is there a None literal in the EO language?") (TRUE))
                xtest_load_verify_cadata.write
                  [xself]
                    memory > xneuronio_pem
                    memory > xcacert_der
                    memory > xcombined
                    memory > xctx
                    memory > xcacert_pem
                    memory > xneuronio_der
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xCAFILE_CACERT)))) ((xf)))
                          xcacert_pem.write ((((xf).xread)).apply)
                        xcacert_der.write ((((xssl).xPEM_cert_to_DER_cert)).apply ((xcacert_pem)))
                        (((unsupported)).apply ((((xopen)).apply ((xCAFILE_NEURONIO)))) ((xf)))
                          xneuronio_pem.write ((((xf).xread)).apply)
                        xneuronio_der.write ((((xssl).xPEM_cert_to_DER_cert)).apply ((xneuronio_pem)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xctx).xcert_store_stats)).apply)) ("x509_ca"))) (0))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xcacert_pem)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xctx).xcert_store_stats)).apply)) ("x509_ca"))) (1))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xneuronio_pem)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xctx).xcert_store_stats)).apply)) ("x509_ca"))) (2))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xneuronio_pem)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xctx).xcert_store_stats)).apply)) ("x509_ca"))) (2))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        xcombined.write ((("n".xjoin)).apply ((((unsupported)).apply ((xcacert_pem)) ((xneuronio_pem)))))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xcombined)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xctx).xcert_store_stats)).apply)) ("x509_ca"))) (2))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        xcombined.write (((unsupported)).apply ("head") ((xcacert_pem)) ("other") ((xneuronio_pem)) ("again") ((xneuronio_pem)) ("tail"))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) (((("n".xjoin)).apply ((xcombined)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xctx).xcert_store_stats)).apply)) ("x509_ca"))) (2))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xcacert_der)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xneuronio_der)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xctx).xcert_store_stats)).apply)) ("x509_ca"))) (2))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xcacert_der)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xctx).xcert_store_stats)).apply)) ("x509_ca"))) (2))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        xcombined.write ((("".xjoin)).apply ((((unsupported)).apply ((xcacert_der)) ((xneuronio_der)))))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xcombined)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xctx).xcert_store_stats)).apply)) ("x509_ca"))) (2))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xctx).xload_verify_locations)) ((xobject)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("no start line: cadata does not contain a certificate"))))
                          (((unsupported)).apply (((xctx).xload_verify_locations)) ("broken"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("not enough data: cadata does not contain a certificate"))))
                          (((unsupported)).apply (((xctx).xload_verify_locations)) ("broken"))
                xtest_load_dh_params.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xctx).xload_dh_params)).apply ((xDHFILE)))
                        (((xos).xname).neq "nt").if
                          bogusForceDataize.write ((((xctx).xload_dh_params)).apply ((xBYTES_DHFILE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xload_dh_params)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xload_dh_params)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFileNotFoundError)))) ((xcm)))
                          bogusForceDataize.write ((((xctx).xload_dh_params)).apply ((xNONEXISTINGCERT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOENT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xcm)))
                          bogusForceDataize.write ((((xctx).xload_dh_params)).apply ((xCERTFILE)))
                xtest_session_stats.write
                  [xself]
                    memory > xctx
                    seq > @
                      (((unsupported)).apply ((xproto)) ((xPROTOCOLS)))
                        seq
                          xctx.write ((((xssl).xSSLContext)).apply ((xproto)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xsession_stats)).apply)) ((((unsupported)).apply ("number") (0) ("connect") (0) ("connect_good") (0) ("connect_renegotiate") (0) ("accept") (0) ("accept_good") (0) ("accept_renegotiate") (0) ("hits") (0) ("misses") (0) ("timeouts") (0) ("cache_full") (0))))
                xtest_set_default_verify_paths.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xctx).xset_default_verify_paths)).apply)
                xtest_set_ecdh_curve.write
                  [xself]
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xctx).xset_ecdh_curve)).apply ("prime256v1"))
                        bogusForceDataize.write ((((xctx).xset_ecdh_curve)).apply ("prime256v1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xset_ecdh_curve)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xset_ecdh_curve)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xctx).xset_ecdh_curve)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xctx).xset_ecdh_curve)) ("foo"))
                xtest_sni_callback.write
                  [xself]
                    memory > xctx
                    memory > xdummycallback
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xset_servername_callback)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xset_servername_callback)) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xset_servername_callback)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xset_servername_callback)) ((xctx)))
                        xdummycallback.write
                          [xsock xservername xctx]
                            seq > @
                        bogusForceDataize.write ((((xctx).xset_servername_callback)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xctx).xset_servername_callback)).apply ((xdummycallback)))
                xtest_sni_callback_refcycle.write
                  [xself]
                    memory > xwr
                    memory > xctx
                    memory > xdummycallback
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        xdummycallback.write
                          [xsock xservername xctx xcycle]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xctx).xset_servername_callback)).apply ((xdummycallback)))
                        xwr.write ((((xweakref).xref)).apply ((xctx)))
                        (((unsupported)).apply ((((unsupported)).apply ((xctx)) ((xdummycallback)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_cert_store_stats.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xcert_store_stats)).apply)) ((((unsupported)).apply ("x509_ca") (0) ("crl") (0) ("x509") (0))))
                        bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xCERTFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xcert_store_stats)).apply)) ((((unsupported)).apply ("x509_ca") (0) ("crl") (0) ("x509") (0))))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xCERTFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xcert_store_stats)).apply)) ((((unsupported)).apply ("x509_ca") (0) ("crl") (0) ("x509") (1))))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xCAFILE_CACERT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xcert_store_stats)).apply)) ((((unsupported)).apply ("x509_ca") (1) ("crl") (0) ("x509") (2))))
                xtest_get_ca_certs.write
                  [xself]
                    memory > xder
                    memory > xpem
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xget_ca_certs)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xCERTFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xget_ca_certs)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xCAFILE_CACERT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xget_ca_certs)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("issuer") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Root CA"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationalUnitName") ("http://www.cacert.org"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("CA Cert Signing Authority"))))) ((((unsupported)).apply ((((unsupported)).apply ("emailAddress") ("support@cacert.org"))))))) ("notAfter") ((((xasn1time)).apply ("Mar 29 12:29:49 2033 GMT"))) ("notBefore") ((((xasn1time)).apply ("Mar 30 12:29:49 2003 GMT"))) ("serialNumber") ("00") ("crlDistributionPoints") ((((unsupported)).apply ("https://www.cacert.org/revoke.crl"))) ("subject") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Root CA"))))) ((((unsupported)).apply ((((unsupported)).apply ("organizationalUnitName") ("http://www.cacert.org"))))) ((((unsupported)).apply ((((unsupported)).apply ("commonName") ("CA Cert Signing Authority"))))) ((((unsupported)).apply ((((unsupported)).apply ("emailAddress") ("support@cacert.org"))))))) ("version") (3))))))
                        (((unsupported)).apply ((((xopen)).apply ((xCAFILE_CACERT)))) ((xf)))
                          xpem.write ((((xf).xread)).apply)
                        xder.write ((((xssl).xPEM_cert_to_DER_cert)).apply ((xpem)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xget_ca_certs)).apply (TRUE))) ((((unsupported)).apply ((xder)))))
                xtest_load_default_certs.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xctx).xload_default_certs)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xctx).xload_default_certs)).apply ((((xssl).xPurpose).xSERVER_AUTH)))
                        bogusForceDataize.write ((((xctx).xload_default_certs)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xctx).xload_default_certs)).apply ((((xssl).xPurpose).xCLIENT_AUTH)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xload_default_certs)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xctx).xload_default_certs)) ("SERVER_AUTH"))
                xtest_load_default_certs_env.write
                  [xself]
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("SSL_CERT_DIR"))) ((xCAPATH)))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("SSL_CERT_FILE"))) ((xCERTFILE)))
                            bogusForceDataize.write ((((xctx).xload_default_certs)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xcert_store_stats)).apply)) ((((unsupported)).apply ("crl") (0) ("x509") (1) ("x509_ca") (0))))
                xtest_load_default_certs_env_windows.write
                  [xself]
                    memory > xstats
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xctx).xload_default_certs)).apply)
                        xstats.write ((((xctx).xcert_store_stats)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("SSL_CERT_DIR"))) ((xCAPATH)))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("SSL_CERT_FILE"))) ((xCERTFILE)))
                            bogusForceDataize.write ((((xctx).xload_default_certs)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xstats)) ("x509"))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xcert_store_stats)).apply)) ((xstats)))
                x_assert_context_options.write
                  [xself xctx]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xctx).xoptions).and ((xssl).xOP_NO_SSLv2))) (((xssl).xOP_NO_SSLv2)))
                        ((xOP_NO_COMPRESSION).neq 0).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xctx).xoptions).and (xOP_NO_COMPRESSION))) ((xOP_NO_COMPRESSION)))
                        ((xOP_SINGLE_DH_USE).neq 0).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xctx).xoptions).and (xOP_SINGLE_DH_USE))) ((xOP_SINGLE_DH_USE)))
                        ((xOP_SINGLE_ECDH_USE).neq 0).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xctx).xoptions).and (xOP_SINGLE_ECDH_USE))) ((xOP_SINGLE_ECDH_USE)))
                        ((xOP_CIPHER_SERVER_PREFERENCE).neq 0).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xctx).xoptions).and (xOP_CIPHER_SERVER_PREFERENCE))) ((xOP_CIPHER_SERVER_PREFERENCE)))
                xtest_create_default_context.write
                  [xself]
                    memory > xcadata
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xcreate_default_context)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xprotocol)) (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).x_assert_context_options)).apply ((xctx)))
                        (((unsupported)).apply ((((xopen)).apply ((xSIGNING_CA)))) ((xf)))
                          xcadata.write ((((xf).xread)).apply)
                        xctx.write (((unsupported)).apply (((xssl).xcreate_default_context)) ((xSIGNING_CA)) ((xCAPATH)) ((xcadata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xprotocol)) (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).x_assert_context_options)).apply ((xctx)))
                        xctx.write ((((xssl).xcreate_default_context)).apply ((((xssl).xPurpose).xCLIENT_AUTH)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xprotocol)) (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        bogusForceDataize.write ((((xself).x_assert_context_options)).apply ((xctx)))
                xtest__create_stdlib_context.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).x_create_stdlib_context)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xprotocol)) (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).x_assert_context_options)).apply ((xctx)))
                        xctx.write ((((xssl).x_create_stdlib_context)).apply (((xssl).xPROTOCOL_TLSv1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xprotocol)) (((xssl).xPROTOCOL_TLSv1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        bogusForceDataize.write ((((xself).x_assert_context_options)).apply ((xctx)))
                        xctx.write (((unsupported)).apply (((xssl).x_create_stdlib_context)) (((xssl).xPROTOCOL_TLSv1)) (((xssl).xCERT_REQUIRED)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xprotocol)) (((xssl).xPROTOCOL_TLSv1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).x_assert_context_options)).apply ((xctx)))
                        xctx.write (((unsupported)).apply (((xssl).x_create_stdlib_context)) ((((xssl).xPurpose).xCLIENT_AUTH)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xprotocol)) (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        bogusForceDataize.write ((((xself).x_assert_context_options)).apply ((xctx)))
                xtest_check_hostname.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_OPTIONAL)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_OPTIONAL)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_OPTIONAL)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xctx).xcheck_hostname)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                xtest_context_client_server.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                xtest_context_custom_class.write
                  [xself]
                    memory > xobj
                    memory > xctx
                    seq > @
                      seq
                        (((unsupported)).apply (((xssl).xSSLSocket)))
                        (((unsupported)).apply (((xssl).xSSLObject)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        (((unsupported)).apply (((xctx).xsslsocket_class)) ((xMySSLSocket)))
                        (((unsupported)).apply (((xctx).xsslobject_class)) ((xMySSLObject)))
                        (((unsupported)).apply ((((unsupported)).apply (((xctx).xwrap_socket)) (((((xsocket).xsocket)).apply)) (TRUE))) ((xsock)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xsock)) ((xMySSLSocket)))
                        xobj.write ((((xctx).xwrap_bio)).apply (((((xssl).xMemoryBIO)).apply)) (((((xssl).xMemoryBIO)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xobj)) ((xMySSLObject)))
                xtest_num_tickest.write
                  [xself]
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xnum_tickets)) (2))
                        (((unsupported)).apply (((xctx).xnum_tickets)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xnum_tickets)) (1))
                        (((unsupported)).apply (((xctx).xnum_tickets)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xnum_tickets)) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xctx).xnum_tickets)) ((1.neg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xctx).xnum_tickets)) ("None: is there a None literal in the EO language?"))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xnum_tickets)) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xctx).xnum_tickets)) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_str.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write ((((xssl).xSSLError)).apply (1) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xerrno)) (1))
                        xe.write ((((xssl).xSSLZeroReturnError)).apply (1) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xerrno)) (1))
                xtest_lib_reason.write
                  [xself]
                    memory > xs
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xcm)))
                          bogusForceDataize.write ((((xctx).xload_dh_params)).apply ((xCERTFILE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xlibrary)) ("PEM"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xreason)) ("NO_START_LINE"))
                        xs.write (((xstr)).apply (((xcm).xexception)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply ("[PEM: NO_START_LINE] no start line"))) ((xs)))
                xtest_subclass.write
                  [xself]
                    memory > xs
                    memory > xc
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xctx).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)).apply (((((xsocket).xcreate_server)).apply ((((unsupported)).apply ("127.0.0.1") (0))))) ((xs)))
                          seq
                            xc.write ((((xsocket).xcreate_connection)).apply (((((xs).xgetsockname)).apply)))
                            bogusForceDataize.write ((((xc).xsetblocking)).apply (FALSE))
                            (((unsupported)).apply ((((unsupported)).apply (((xctx).xwrap_socket)) ((xc)) (FALSE) (FALSE))) ((xc)))
                              seq
                                (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLWantReadError)))) ((xcm)))
                                  bogusForceDataize.write ((((xc).xdo_handshake)).apply)
                                xs.write (((xstr)).apply (((xcm).xexception)))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply ("The operation did not complete (read)"))) ((xs)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xssl).xSSL_ERROR_WANT_READ)))
                xtest_bad_server_hostname.write
                  [xself]
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xcreate_default_context)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xctx).xwrap_bio)) (((((xssl).xMemoryBIO)).apply)) (((((xssl).xMemoryBIO)).apply)) (""))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xctx).xwrap_bio)) (((((xssl).xMemoryBIO)).apply)) (((((xssl).xMemoryBIO)).apply)) (".example.org"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xctx).xwrap_bio)) (((((xssl).xMemoryBIO)).apply)) (((((xssl).xMemoryBIO)).apply)) ("example.orgx00evil.com"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_read_write.write
                  [xself]
                    memory > xbio
                    seq > @
                      seq
                        xbio.write ((((xssl).xMemoryBIO)).apply)
                        bogusForceDataize.write ((((xbio).xwrite)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply)) (""))
                        bogusForceDataize.write ((((xbio).xwrite)).apply ("foo"))
                        bogusForceDataize.write ((((xbio).xwrite)).apply ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply)) ("foobar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply)) (""))
                        bogusForceDataize.write ((((xbio).xwrite)).apply ("baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply (2))) ("ba"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply (1))) ("z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply (1))) (""))
                xtest_eof.write
                  [xself]
                    memory > xbio
                    seq > @
                      seq
                        xbio.write ((((xssl).xMemoryBIO)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xbio).xeof)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xbio).xeof)))
                        bogusForceDataize.write ((((xbio).xwrite)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xbio).xeof)))
                        bogusForceDataize.write ((((xbio).xwrite_eof)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xbio).xeof)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply (2))) ("fo"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xbio).xeof)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply (1))) ("o"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xbio).xeof)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xbio).xeof)))
                xtest_pending.write
                  [xself]
                    memory > xbio
                    seq > @
                      seq
                        xbio.write ((((xssl).xMemoryBIO)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbio).xpending)) (0))
                        bogusForceDataize.write ((((xbio).xwrite)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbio).xpending)) (3))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (3))))
                          seq
                            bogusForceDataize.write ((((xbio).xread)).apply (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbio).xpending)) (((3.sub (xi)).sub 1)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (3))))
                          seq
                            bogusForceDataize.write ((((xbio).xwrite)).apply ("x"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbio).xpending)) (((xi).add 1)))
                        bogusForceDataize.write ((((xbio).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbio).xpending)) (0))
                xtest_buffer_types.write
                  [xself]
                    memory > xbio
                    seq > @
                      seq
                        xbio.write ((((xssl).xMemoryBIO)).apply)
                        bogusForceDataize.write ((((xbio).xwrite)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply)) ("foo"))
                        bogusForceDataize.write ((((xbio).xwrite)).apply ((((xbytearray)).apply ("bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply)) ("bar"))
                        bogusForceDataize.write ((((xbio).xwrite)).apply ((((xmemoryview)).apply ("baz"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbio).xread)).apply)) ("baz"))
                xtest_error_types.write
                  [xself]
                    memory > xbio
                    seq > @
                      seq
                        xbio.write ((((xssl).xMemoryBIO)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbio).xwrite)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbio).xwrite)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbio).xwrite)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbio).xwrite)) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_private_init.write
                  [xself]
                    memory > xbio
                    seq > @
                      seq
                        xbio.write ((((xssl).xMemoryBIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("public constructor"))))
                          bogusForceDataize.write ((((xssl).xSSLObject)).apply ((xbio)) ((xbio)))
                xtest_unwrap.write
                  [xself]
                    memory > xclient
                    memory > xc_out
                    memory > xs_out
                    memory > xc_in
                    memory > xserver
                    memory > xs_in
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_ctx)) ((xserver_ctx)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xc_in.write ((((xssl).xMemoryBIO)).apply)
                        xc_out.write ((((xssl).xMemoryBIO)).apply)
                        xs_in.write ((((xssl).xMemoryBIO)).apply)
                        xs_out.write ((((xssl).xMemoryBIO)).apply)
                        xclient.write (((unsupported)).apply (((xclient_ctx).xwrap_bio)) ((xc_in)) ((xc_out)) ((xhostname)))
                        xserver.write (((unsupported)).apply (((xserver_ctx).xwrap_bio)) ((xs_in)) ((xs_out)) (TRUE))
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (5))))
                          seq
                            (((unsupported)).apply (((xssl).xSSLWantReadError)))
                              bogusForceDataize.write ((((xclient).xdo_handshake)).apply)
                            ((xc_out).xpending).if
                              bogusForceDataize.write ((((xs_in).xwrite)).apply (((((xc_out).xread)).apply)))
                            (((unsupported)).apply (((xssl).xSSLWantReadError)))
                              bogusForceDataize.write ((((xserver).xdo_handshake)).apply)
                            ((xs_out).xpending).if
                              bogusForceDataize.write ((((xc_in).xwrite)).apply (((((xs_out).xread)).apply)))
                        bogusForceDataize.write ((((xclient).xdo_handshake)).apply)
                        bogusForceDataize.write ((((xserver).xdo_handshake)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLWantReadError)))))
                          bogusForceDataize.write ((((xclient).xunwrap)).apply)
                        bogusForceDataize.write ((((xs_in).xwrite)).apply (((((xc_out).xread)).apply)))
                        bogusForceDataize.write ((((xserver).xunwrap)).apply)
                        bogusForceDataize.write ((((xc_in).xwrite)).apply (((((xs_out).xread)).apply)))
                        bogusForceDataize.write ((((xclient).xunwrap)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((xThreadedEchoServer)).apply ((xSIGNED_CERTFILE)))
                        (((unsupported)).apply (((xself).xserver_addr)) ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        bogusForceDataize.write ((((xserver).x__enter__)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xserver).x__exit__)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_connect.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) (((xssl).xCERT_NONE)))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) (((((xs).xgetpeercert)).apply)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xs).xserver_side)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) (((xssl).xCERT_REQUIRED)) ((xSIGNING_CA)))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xgetpeercert)).apply)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xs).xserver_side)))
                xtest_connect_fail.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("certificate verify failed") (((xs).xconnect)) (((xself).xserver_addr)))
                xtest_connect_ex.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        xs.write (((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) (((xssl).xCERT_REQUIRED)) ((xSIGNING_CA)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (0) (((((xs).xconnect_ex)).apply (((xself).xserver_addr)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xgetpeercert)).apply)))
                xtest_non_blocking_connect_ex.write
                  [xself]
                    memory > xs
                    memory > xrc
                    seq > @
                      seq
                        xs.write (((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) (((xssl).xCERT_REQUIRED)) ((xSIGNING_CA)) (FALSE))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                        bogusForceDataize.write ((((xs).xsetblocking)).apply (FALSE))
                        xrc.write ((((xs).xconnect_ex)).apply (((xself).xserver_addr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xrc)) ((((unsupported)).apply (0) (((xerrno).xEINPROGRESS)) (((xerrno).xEWOULDBLOCK)))))
                        bogusForceDataize.write ((((xselect).xselect)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xs)))) ((((unsupported)).apply)) (5.0))
                        while.
                          TRUE
                          [unused]
                            seq > @
                              (((unsupported)).apply (((xssl).xSSLWantReadError)) (((xssl).xSSLWantWriteError)))
                                seq
                                  bogusForceDataize.write ((((xs).xdo_handshake)).apply)
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xselect).xselect)).apply ((((unsupported)).apply ((xs)))) ((((unsupported)).apply)) ((((unsupported)).apply)) (5.0))
                                bogusForceDataize.write ((((xselect).xselect)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xs)))) ((((unsupported)).apply)) (5.0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xgetpeercert)).apply)))
                xtest_connect_with_context.write
                  [xself]
                    memory > xcert
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((((xctx).xwrap_socket)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) (((((xs).xgetpeercert)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xctx).xwrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) ("dummy"))) ((xs)))
                          bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xSIGNING_CA)))
                        (((unsupported)).apply (((((xctx).xwrap_socket)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                            xcert.write ((((xs).xgetpeercert)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)))
                xtest_connect_with_context_fail.write
                  [xself]
                    memory > xs
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        xs.write ((((xctx).xwrap_socket)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("certificate verify failed") (((xs).xconnect)) (((xself).xserver_addr)))
                xtest_connect_capath.write
                  [xself]
                    memory > xcert
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xCAPATH)))
                        (((unsupported)).apply (((((xctx).xwrap_socket)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                            xcert.write ((((xs).xgetpeercert)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xBYTES_CAPATH)))
                        (((unsupported)).apply (((((xctx).xwrap_socket)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                            xcert.write ((((xs).xgetpeercert)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)))
                xtest_connect_cadata.write
                  [xself]
                    memory > xcert
                    memory > xder
                    memory > xpem
                    memory > xctx
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xSIGNING_CA)))) ((xf)))
                          xpem.write ((((xf).xread)).apply)
                        xder.write ((((xssl).xPEM_cert_to_DER_cert)).apply ((xpem)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xpem)))
                        (((unsupported)).apply (((((xctx).xwrap_socket)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                            xcert.write ((((xs).xgetpeercert)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xder)))
                        (((unsupported)).apply (((((xctx).xwrap_socket)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                            xcert.write ((((xs).xgetpeercert)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)))
                xtest_makefile_close.write
                  [xself]
                    memory > xfd
                    memory > xf
                    memory > xss
                    seq > @
                      (((unsupported)).apply)
                        xss.write (((xtest_wrap_socket)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))))
                        bogusForceDataize.write ((((xss).xconnect)).apply (((xself).xserver_addr)))
                        xfd.write ((((xss).xfileno)).apply)
                        xf.write ((((xss).xmakefile)).apply)
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xos).xread)).apply ((xfd)) (0))
                        bogusForceDataize.write ((((xss).xclose)).apply)
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xe)))
                          bogusForceDataize.write ((((xos).xread)).apply ((xfd)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xe).xexception).xerrno)) (((xerrno).xEBADF)))
                xtest_non_blocking_handshake.write
                  [xself]
                    memory > xs
                    memory > xcount
                    seq > @
                      seq
                        xs.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                        bogusForceDataize.write ((((xs).xsetblocking)).apply (FALSE))
                        xs.write (((unsupported)).apply ((xtest_wrap_socket)) ((xs)) (((xssl).xCERT_NONE)) (FALSE))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                        xcount.write 0
                        while.
                          TRUE
                          [unused]
                            seq > @
                              (((unsupported)).apply (((xssl).xSSLWantReadError)) (((xssl).xSSLWantWriteError)))
                                seq
                                  (((unsupported)).apply ((xcount)) (1))
                                  bogusForceDataize.write ((((xs).xdo_handshake)).apply)
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xselect).xselect)).apply ((((unsupported)).apply ((xs)))) ((((unsupported)).apply)) ((((unsupported)).apply)))
                                bogusForceDataize.write ((((xselect).xselect)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xs)))) ((((unsupported)).apply)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (("nNeeded %d calls to do_handshake() to establish session.n".mod (xcount))))
                xtest_get_server_certificate.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((x_test_get_server_certificate)) ((xself)) ((((unsupported)).apply (((xself).xserver_addr)))) ((xSIGNING_CA)))
                xtest_get_server_certificate_fail.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((x_test_get_server_certificate_fail)).apply ((xself)) ((((unsupported)).apply (((xself).xserver_addr)))))
                xtest_ciphers.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) (((xssl).xCERT_NONE)) ("ALL"))) ((xs)))
                          bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) (((xssl).xCERT_NONE)) ("DEFAULT"))) ((xs)))
                          bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("No cipher can be selected"))))
                          (((unsupported)).apply (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) ((xsock)))
                            seq
                              xs.write (((unsupported)).apply ((xtest_wrap_socket)) ((xsock)) (((xssl).xCERT_NONE)) ("^$:,;?*'dorothyx"))
                              bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                xtest_get_ca_certs_capath.write
                  [xself]
                    memory > xcert
                    memory > xctx
                    seq > @
                      seq
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xctx).xload_verify_locations)) ((xCAPATH)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xctx).xget_ca_certs)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xctx).xwrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) ("localhost"))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply (((xself).xserver_addr)))
                            xcert.write ((((xs).xgetpeercert)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xctx).xget_ca_certs)).apply)))) (1))
                xtest_context_setget.write
                  [xself]
                    memory > xs
                    memory > xctx2
                    memory > xctx1
                    seq > @
                      (((unsupported)).apply)
                        xctx1.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xctx1).xload_verify_locations)) ((xCAPATH)))
                        xctx2.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xctx2).xload_verify_locations)) ((xCAPATH)))
                        xs.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        (((unsupported)).apply ((((unsupported)).apply (((xctx1).xwrap_socket)) ((xs)) ("localhost"))) ((xss)))
                          seq
                            bogusForceDataize.write ((((xss).xconnect)).apply (((xself).xserver_addr)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xss).xcontext)) ((xctx1)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xss).x_sslobj).xcontext)) ((xctx1)))
                            (((unsupported)).apply (((xss).xcontext)) ((xctx2)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xss).xcontext)) ((xctx2)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xss).x_sslobj).xcontext)) ((xctx2)))
                xssl_io_loop.write
                  [xself xsock xincoming xoutgoing xfunc]
                    memory > xret
                    memory > xcount
                    memory > xerrno
                    memory > xbuf
                    memory > xdeadline
                    memory > xtimeout
                    seq > @
                      (((unsupported)).apply)
                        xtimeout.write ((((xkwargs).xget)).apply ("timeout") (10))
                        xdeadline.write (((((xtime).xmonotonic)).apply).add (xtimeout))
                        xcount.write 0
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                (((((xtime).xmonotonic)).apply).greater (xdeadline)).if
                                  bogusForceDataize.write ((((xself).xfail)).apply ("timeout"))
                                xerrno.write "None: is there a None literal in the EO language?"
                                (((unsupported)).apply ((xcount)) (1))
                                (((unsupported)).apply (((xssl).xSSLError)))
                                  xret.write (((xfunc)).apply ((((unsupported)).apply ((xargs)))))
                                  seq
                                    (((unsupported)).apply (((xe).xerrno)) ((((unsupported)).apply (((xssl).xSSL_ERROR_WANT_READ)) (((xssl).xSSL_ERROR_WANT_WRITE))))).if
                                      (((unsupported)).apply)
                                    xerrno.write ((xe).xerrno)
                                xbuf.write ((((xoutgoing).xread)).apply)
                                bogusForceDataize.write ((((xsock).xsendall)).apply ((xbuf)))
                                (((unsupported)).apply ((xerrno)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply)
                                  ((xerrno).eq ((xssl).xSSL_ERROR_WANT_READ)).if
                                    seq
                                      xbuf.write ((((xsock).xrecv)).apply (32768))
                                      (xbuf).if
                                        bogusForceDataize.write ((((xincoming).xwrite)).apply ((xbuf)))
                                        bogusForceDataize.write ((((xincoming).xwrite_eof)).apply)
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (("Needed %d calls to complete %s().n".mod (((unsupported)).apply ((xcount)) (((xfunc).x__name__))))))
                        (((unsupported)).apply ((xret)))
                xtest_bio_handshake.write
                  [xself]
                    memory > xincoming
                    memory > xoutgoing
                    memory > xsock
                    memory > xctx
                    memory > xsslobj
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsock).xclose)))
                        bogusForceDataize.write ((((xsock).xconnect)).apply (((xself).xserver_addr)))
                        xincoming.write ((((xssl).xMemoryBIO)).apply)
                        xoutgoing.write ((((xssl).xMemoryBIO)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xctx).xcheck_hostname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xSIGNING_CA)))
                        xsslobj.write ((((xctx).xwrap_bio)).apply ((xincoming)) ((xoutgoing)) (FALSE) ((xSIGNED_CERTFILE_HOSTNAME)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xsslobj).x_sslobj).xowner)) ((xsslobj)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsslobj).xcipher)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsslobj).xversion)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xsslobj).xshared_ciphers)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xsslobj).xgetpeercert)))
                        (((unsupported)).apply ("tls-unique") (((xssl).xCHANNEL_BINDING_TYPES))).if
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsslobj).xget_channel_binding)).apply ("tls-unique"))))
                        bogusForceDataize.write ((((xself).xssl_io_loop)).apply ((xsock)) ((xincoming)) ((xoutgoing)) (((xsslobj).xdo_handshake)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xsslobj).xcipher)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xsslobj).xshared_ciphers)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xsslobj).xversion)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xsslobj).xgetpeercert)).apply)))
                        (((unsupported)).apply ("tls-unique") (((xssl).xCHANNEL_BINDING_TYPES))).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xsslobj).xget_channel_binding)).apply ("tls-unique"))))
                        (((unsupported)).apply (((xssl).xSSLSyscallError)))
                          bogusForceDataize.write ((((xself).xssl_io_loop)).apply ((xsock)) ((xincoming)) ((xoutgoing)) (((xsslobj).xunwrap)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xssl).xSSLError)) (((xsslobj).xwrite)) ("foo"))
                xtest_bio_read_write_data.write
                  [xself]
                    memory > xincoming
                    memory > xreq
                    memory > xoutgoing
                    memory > xsock
                    memory > xbuf
                    memory > xctx
                    memory > xsslobj
                    seq > @
                      seq
                        xsock.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsock).xclose)))
                        bogusForceDataize.write ((((xsock).xconnect)).apply (((xself).xserver_addr)))
                        xincoming.write ((((xssl).xMemoryBIO)).apply)
                        xoutgoing.write ((((xssl).xMemoryBIO)).apply)
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_NONE)))
                        xsslobj.write ((((xctx).xwrap_bio)).apply ((xincoming)) ((xoutgoing)) (FALSE))
                        bogusForceDataize.write ((((xself).xssl_io_loop)).apply ((xsock)) ((xincoming)) ((xoutgoing)) (((xsslobj).xdo_handshake)))
                        xreq.write "FOOn"
                        bogusForceDataize.write ((((xself).xssl_io_loop)).apply ((xsock)) ((xincoming)) ((xoutgoing)) (((xsslobj).xwrite)) ((xreq)))
                        xbuf.write ((((xself).xssl_io_loop)).apply ((xsock)) ((xincoming)) ((xoutgoing)) (((xsslobj).xread)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuf)) ("foon"))
                        bogusForceDataize.write ((((xself).xssl_io_loop)).apply ((xsock)) ((xincoming)) ((xoutgoing)) (((xsslobj).xunwrap)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_timeout_connect_ex.write
                  [xself]
                    memory > xs
                    memory > xrc
                    seq > @
                      (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xREMOTE_HOST)))))
                        seq
                          xs.write (((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))) (((xssl).xCERT_REQUIRED)) (FALSE))
                          bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                          bogusForceDataize.write ((((xs).xsettimeout)).apply (0.0000001))
                          xrc.write ((((xs).xconnect_ex)).apply ((((unsupported)).apply ((xREMOTE_HOST)) (443))))
                          ((xrc).eq 0).if
                            bogusForceDataize.write ((((xself).xskipTest)).apply ("REMOTE_HOST responded too quickly"))
                            ((xrc).eq ((xerrno).xENETUNREACH)).if
                              bogusForceDataize.write ((((xself).xskipTest)).apply ("Network unreachable."))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xrc)) ((((unsupported)).apply (((xerrno).xEAGAIN)) (((xerrno).xEWOULDBLOCK)))))
                xtest_get_server_certificate_ipv6.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ("ipv6.google.com"))))
                          seq
                            bogusForceDataize.write (((x_test_get_server_certificate)).apply ((xself)) ("ipv6.google.com") (443))
                            bogusForceDataize.write (((x_test_get_server_certificate_fail)).apply ((xself)) ("ipv6.google.com") (443))
            x_test_get_server_certificate.write
              [xtest xhost xport xcert]
                memory > xpem
                seq > @
                  (((unsupported)).apply)
                    xpem.write ((((xssl).xget_server_certificate)).apply ((((unsupported)).apply ((xhost)) ((xport)))))
                    ((xpem).not).if
                      bogusForceDataize.write ((((xtest).xfail)).apply (("No server certificate on %s:%s!".mod (((unsupported)).apply ((xhost)) ((xport))))))
                    xpem.write (((unsupported)).apply (((xssl).xget_server_certificate)) ((((unsupported)).apply ((xhost)) ((xport)))) ((xcert)))
                    ((xpem).not).if
                      bogusForceDataize.write ((((xtest).xfail)).apply (("No server certificate on %s:%s!".mod (((unsupported)).apply ((xhost)) ((xport))))))
                    ((xsupport).xverbose).if
                      bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (("nVerified certificate for %s:%s isn%sn".mod (((unsupported)).apply ((xhost)) ((xport)) ((xpem))))))
            x_test_get_server_certificate_fail.write
              [xtest xhost xport]
                memory > xpem
                seq > @
                  (((unsupported)).apply (((xssl).xSSLError)))
                    xpem.write (((unsupported)).apply (((xssl).xget_server_certificate)) ((((unsupported)).apply ((xhost)) ((xport)))) ((xCERTFILE)))
                    ((xsupport).xverbose).if
                      bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (("%sn".mod (xx))))
                    bogusForceDataize.write ((((xtest).xfail)).apply (("Got server certificate %s for %s:%s!".mod (((unsupported)).apply ((xpem)) ((xhost)) ((xport))))))
            (((unsupported)).apply)
            (((unsupported)).apply (((xthreading).xThread)))
              seq
                (((unsupported)).apply (((xthreading).xThread)))
                  seq
                    (((unsupported)).apply)
                    x__init__.write
                      [xself xserver xconnsock xaddr]
                        seq > @
                          seq
                            (((unsupported)).apply (((xself).xserver)) ((xserver)))
                            (((unsupported)).apply (((xself).xrunning)) (FALSE))
                            (((unsupported)).apply (((xself).xsock)) ((xconnsock)))
                            (((unsupported)).apply (((xself).xaddr)) ((xaddr)))
                            bogusForceDataize.write (((((xself).xsock).xsetblocking)).apply (1))
                            (((unsupported)).apply (((xself).xsslconn)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write (((((xthreading).xThread).x__init__)).apply ((xself)))
                            (((unsupported)).apply (((xself).xdaemon)) (TRUE))
                    xwrap_conn.write
                      [xself]
                        memory > xcert_binary
                        memory > xcipher
                        memory > xcert
                        seq > @
                          (((unsupported)).apply ((((unsupported)).apply ((xConnectionResetError)) ((xBrokenPipeError)) ((xConnectionAbortedError)))) ((((unsupported)).apply (((xssl).xSSLError)) ((xOSError)))))
                            seq
                              (((unsupported)).apply (((xself).xsslconn)) ((((unsupported)).apply (((((xself).xserver).xcontext).xwrap_socket)) (((xself).xsock)) (TRUE))))
                              bogusForceDataize.write ((((((xself).xserver).xselected_npn_protocols).xappend)).apply ((((((xself).xsslconn).xselected_npn_protocol)).apply)))
                              bogusForceDataize.write ((((((xself).xserver).xselected_alpn_protocols).xappend)).apply ((((((xself).xsslconn).xselected_alpn_protocol)).apply)))
                            seq
                              bogusForceDataize.write ((((((xself).xserver).xconn_errors).xappend)).apply ((((xstr)).apply ((xe)))))
                              (((xself).xserver).xchatty).if
                                bogusForceDataize.write (((xhandle_error)).apply ((("n server:  bad connection attempt from ".add (((xrepr)).apply (((xself).xaddr)))).add ":n")))
                              (((unsupported)).apply (((xself).xrunning)) (FALSE))
                              bogusForceDataize.write ((((xself).xclose)).apply)
                              (((unsupported)).apply (FALSE))
                            seq
                              bogusForceDataize.write ((((((xself).xserver).xconn_errors).xappend)).apply ((((xstr)).apply ((xe)))))
                              (((xself).xserver).xchatty).if
                                bogusForceDataize.write (((xhandle_error)).apply ((("n server:  bad connection attempt from ".add (((xrepr)).apply (((xself).xaddr)))).add ":n")))
                              (((unsupported)).apply (((xself).xrunning)) (FALSE))
                              bogusForceDataize.write (((((xself).xserver).xstop)).apply)
                              bogusForceDataize.write ((((xself).xclose)).apply)
                              (((unsupported)).apply (FALSE))
                            seq
                              bogusForceDataize.write ((((((xself).xserver).xshared_ciphers).xappend)).apply ((((((xself).xsslconn).xshared_ciphers)).apply)))
                              (((((xself).xserver).xcontext).xverify_mode).eq ((xssl).xCERT_REQUIRED)).if
                                seq
                                  xcert.write (((((xself).xsslconn).xgetpeercert)).apply)
                                  (((xsupport).xverbose).and (((xself).xserver).xchatty)).if
                                    bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (((" client cert is ".add ((((xpprint).xpformat)).apply ((xcert)))).add "n")))
                                  xcert_binary.write (((((xself).xsslconn).xgetpeercert)).apply (TRUE))
                                  (((xsupport).xverbose).and (((xself).xserver).xchatty)).if
                                    bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (((" cert binary is ".add (((xstr)).apply ((((xlen)).apply ((xcert_binary)))))).add " bytesn")))
                              xcipher.write (((((xself).xsslconn).xcipher)).apply)
                              (((xsupport).xverbose).and (((xself).xserver).xchatty)).if
                                seq
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (((" server: connection cipher is now ".add (((xstr)).apply ((xcipher)))).add "n")))
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (((" server: selected protocol is now ".add (((xstr)).apply ((((((xself).xsslconn).xselected_npn_protocol)).apply)))).add "n")))
                              (((unsupported)).apply (TRUE))
                    xread.write
                      [xself]
                        seq > @
                          ((xself).xsslconn).if
                            (((unsupported)).apply ((((((xself).xsslconn).xread)).apply)))
                            (((unsupported)).apply ((((((xself).xsock).xrecv)).apply (1024))))
                    xwrite.write
                      [xself xbytes]
                        seq > @
                          ((xself).xsslconn).if
                            (((unsupported)).apply ((((((xself).xsslconn).xwrite)).apply ((xbytes)))))
                            (((unsupported)).apply ((((((xself).xsock).xsend)).apply ((xbytes)))))
                    xclose.write
                      [xself]
                        seq > @
                          ((xself).xsslconn).if
                            bogusForceDataize.write (((((xself).xsslconn).xclose)).apply)
                            bogusForceDataize.write (((((xself).xsock).xclose)).apply)
                    xrun.write
                      [xself]
                        memory > xdata
                        memory > xmsg
                        memory > xcert
                        memory > xstripped
                        memory > xctype
                        seq > @
                          seq
                            (((unsupported)).apply (((xself).xrunning)) (TRUE))
                            ((((xself).xserver).xstarttls_server).not).if
                              (((((xself).xwrap_conn)).apply).not).if
                                (((unsupported)).apply)
                            while.
                              ((xself).xrunning)
                              [unused]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xConnectionResetError)) ((xConnectionAbortedError)))) (((xssl).xSSLError)) ((xOSError)))
                                    seq
                                      xmsg.write ((((xself).xread)).apply)
                                      xstripped.write ((((xmsg).xstrip)).apply)
                                      ((xstripped).not).if
                                        seq
                                          (((unsupported)).apply (((xself).xrunning)) (FALSE))
                                          (((unsupported)).apply ((xOSError)))
                                            (((unsupported)).apply (((xself).xsock)) ((((((xself).xsslconn).xunwrap)).apply)))
                                            (((unsupported)).apply (((xself).xsslconn)) ("None: is there a None literal in the EO language?"))
                                          bogusForceDataize.write ((((xself).xclose)).apply)
                                        ((xstripped).eq "over").if
                                          seq
                                            (((xsupport).xverbose).and (((xself).xserver).xconnectionchatty)).if
                                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" server: client closed connectionn"))
                                            bogusForceDataize.write ((((xself).xclose)).apply)
                                            (((unsupported)).apply)
                                          ((((xself).xserver).xstarttls_server).and ((xstripped).eq "STARTTLS")).if
                                            seq
                                              (((xsupport).xverbose).and (((xself).xserver).xconnectionchatty)).if
                                                bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" server: read STARTTLS from client, sending OK...n"))
                                              bogusForceDataize.write ((((xself).xwrite)).apply ("OKn"))
                                              (((((xself).xwrap_conn)).apply).not).if
                                                (((unsupported)).apply)
                                            (((((xself).xserver).xstarttls_server).and ((xself).xsslconn)).and ((xstripped).eq "ENDTLS")).if
                                              seq
                                                (((xsupport).xverbose).and (((xself).xserver).xconnectionchatty)).if
                                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" server: read ENDTLS from client, sending OK...n"))
                                                bogusForceDataize.write ((((xself).xwrite)).apply ("OKn"))
                                                (((unsupported)).apply (((xself).xsock)) ((((((xself).xsslconn).xunwrap)).apply)))
                                                (((unsupported)).apply (((xself).xsslconn)) ("None: is there a None literal in the EO language?"))
                                                (((xsupport).xverbose).and (((xself).xserver).xconnectionchatty)).if
                                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" server: connection is now unencrypted...n"))
                                              ((xstripped).eq "CB tls-unique").if
                                                seq
                                                  (((xsupport).xverbose).and (((xself).xserver).xconnectionchatty)).if
                                                    bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" server: read CB tls-unique from client, sending our CB data...n"))
                                                  xdata.write (((((xself).xsslconn).xget_channel_binding)).apply ("tls-unique"))
                                                  bogusForceDataize.write ((((xself).xwrite)).apply ((((((((xrepr)).apply ((xdata))).xencode)).apply ("us-ascii")).add "n")))
                                                ((xstripped).eq "PHA").if
                                                  seq
                                                    (((xsupport).xverbose).and (((xself).xserver).xconnectionchatty)).if
                                                      bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" server: initiating post handshake authn"))
                                                    (((unsupported)).apply (((xssl).xSSLError)))
                                                      bogusForceDataize.write (((((xself).xsslconn).xverify_client_post_handshake)).apply)
                                                      bogusForceDataize.write ((((xself).xwrite)).apply ((((((((xrepr)).apply ((xe))).xencode)).apply ("us-ascii")).add "n")))
                                                      bogusForceDataize.write ((((xself).xwrite)).apply ("OKn"))
                                                  ((xstripped).eq "HASCERT").if
                                                    (((unsupported)).apply ((((((xself).xsslconn).xgetpeercert)).apply)) ("None: is there a None literal in the EO language?")).if
                                                      bogusForceDataize.write ((((xself).xwrite)).apply ("TRUEn"))
                                                      bogusForceDataize.write ((((xself).xwrite)).apply ("FALSEn"))
                                                    ((xstripped).eq "GETCERT").if
                                                      seq
                                                        xcert.write (((((xself).xsslconn).xgetpeercert)).apply)
                                                        bogusForceDataize.write ((((xself).xwrite)).apply ((((((((xrepr)).apply ((xcert))).xencode)).apply ("us-ascii")).add "n")))
                                                      seq
                                                        (((xsupport).xverbose).and (((xself).xserver).xconnectionchatty)).if
                                                          seq
                                                            xctype.write ((((xself).xsslconn).and "encrypted").or "unencrypted")
                                                            bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" server: read %r (%s), sending back %r (%s)...n".mod (((unsupported)).apply ((xmsg)) ((xctype)) (((((xmsg).xlower)).apply)) ((xctype))))))
                                                        bogusForceDataize.write ((((xself).xwrite)).apply (((((xmsg).xlower)).apply)))
                                    seq
                                      ((((xself).xserver).xchatty).and ((xsupport).xverbose)).if
                                        bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((((" Connection reset by peer: {}n".xformat)).apply (((xself).xaddr)))))
                                      bogusForceDataize.write ((((xself).xclose)).apply)
                                      (((unsupported)).apply (((xself).xrunning)) (FALSE))
                                    ("PEER_DID_NOT_RETURN_A_CERTIFICATE".eq ((xerr).xreason)).if
                                      seq
                                        ((((xself).xserver).xchatty).and ((xsupport).xverbose)).if
                                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((((unsupported)).apply (((xerr).xargs)) (1))))
                                        (((unsupported)).apply (((((xssl).xSSLError)).apply ("tlsv13 alert certificate required"))))
                                    seq
                                      (((xself).xserver).xchatty).if
                                        bogusForceDataize.write (((xhandle_error)).apply ("Test server failure:n"))
                                      bogusForceDataize.write ((((xself).xclose)).apply)
                                      (((unsupported)).apply (((xself).xrunning)) (FALSE))
                                      bogusForceDataize.write (((((xself).xserver).xstop)).apply)
                x__init__.write
                  [xself xcertificate xssl_version xcertreqs xcacerts xchatty xconnectionchatty xstarttls_server xnpn_protocols xalpn_protocols xciphers xcontext]
                    seq > @
                      (((unsupported)).apply)
                        (xcontext).if
                          (((unsupported)).apply (((xself).xcontext)) ((xcontext)))
                          seq
                            (((unsupported)).apply (((xself).xcontext)) (((((xssl).xSSLContext)).apply (((((unsupported)).apply ((xssl_version)) ("None: is there a None literal in the EO language?")).if (xssl_version) ((xssl).xPROTOCOL_TLS_SERVER))))))
                            (((unsupported)).apply ((((xself).xcontext).xverify_mode)) (((((unsupported)).apply ((xcertreqs)) ("None: is there a None literal in the EO language?")).if (xcertreqs) ((xssl).xCERT_NONE))))
                            (xcacerts).if
                              bogusForceDataize.write (((((xself).xcontext).xload_verify_locations)).apply ((xcacerts)))
                            (xcertificate).if
                              bogusForceDataize.write (((((xself).xcontext).xload_cert_chain)).apply ((xcertificate)))
                            (xnpn_protocols).if
                              bogusForceDataize.write (((((xself).xcontext).xset_npn_protocols)).apply ((xnpn_protocols)))
                            (xalpn_protocols).if
                              bogusForceDataize.write (((((xself).xcontext).xset_alpn_protocols)).apply ((xalpn_protocols)))
                            (xciphers).if
                              bogusForceDataize.write (((((xself).xcontext).xset_ciphers)).apply ((xciphers)))
                        (((unsupported)).apply (((xself).xchatty)) ((xchatty)))
                        (((unsupported)).apply (((xself).xconnectionchatty)) ((xconnectionchatty)))
                        (((unsupported)).apply (((xself).xstarttls_server)) ((xstarttls_server)))
                        (((unsupported)).apply (((xself).xsock)) (((((xsocket).xsocket)).apply)))
                        (((unsupported)).apply (((xself).xport)) (((((xsupport).xbind_port)).apply (((xself).xsock)))))
                        (((unsupported)).apply (((xself).xflag)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xactive)) (FALSE))
                        (((unsupported)).apply (((xself).xselected_npn_protocols)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xselected_alpn_protocols)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xshared_ciphers)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xconn_errors)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)).apply ((xself)))
                        (((unsupported)).apply (((xself).xdaemon)) (TRUE))
                x__enter__.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xstart)).apply (((((xthreading).xEvent)).apply)))
                        bogusForceDataize.write (((((xself).xflag).xwait)).apply)
                        (((unsupported)).apply ((xself)))
                x__exit__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xstop)).apply)
                        bogusForceDataize.write ((((xself).xjoin)).apply)
                xstart.write
                  [xself xflag]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xflag)) ((xflag)))
                        bogusForceDataize.write (((((xthreading).xThread).xstart)).apply ((xself)))
                xrun.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (0.05))
                        bogusForceDataize.write (((((xself).xsock).xlisten)).apply)
                        (((unsupported)).apply (((xself).xactive)) (TRUE))
                        ((xself).xflag).if
                          bogusForceDataize.write (((((xself).xflag).xset)).apply)
                        while.
                          ((xself).xactive)
                          [unused]
                            seq > @
                              (((unsupported)).apply (((xsocket).xtimeout)) ((xKeyboardInterrupt)) ((xBaseException)))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xnewconn)) ((xconnaddr)))) ((((((xself).xsock).xaccept)).apply)))
                                  (((xsupport).xverbose).and ((xself).xchatty)).if
                                    bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (((" server:  new connection from ".add (((xrepr)).apply ((xconnaddr)))).add "n")))
                                  xhandler.write ((((xself).xConnectionHandler)).apply ((xself)) ((xnewconn)) ((xconnaddr)))
                                  bogusForceDataize.write ((((xhandler).xstart)).apply)
                                  bogusForceDataize.write ((((xhandler).xjoin)).apply)
                                bogusForceDataize.write ((((xself).xstop)).apply)
                                (((xsupport).xverbose).and ((xself).xchatty)).if
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (((" connection handling failed: ".add (((xrepr)).apply ((xe)))).add "n")))
                        bogusForceDataize.write (((((xself).xsock).xclose)).apply)
                xstop.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xactive)) (FALSE))
            (((unsupported)).apply (((xthreading).xThread)))
              seq
                (((unsupported)).apply (((xasyncore).xdispatcher)))
                  seq
                    (((unsupported)).apply (((xasyncore).xdispatcher_with_send)))
                      seq
                        x__init__.write
                          [xself xconn xcertfile]
                            seq > @
                              seq
                                (((unsupported)).apply (((xself).xsocket)) ((((unsupported)).apply ((xtest_wrap_socket)) ((xconn)) (TRUE) ((xcertfile)) (FALSE))))
                                bogusForceDataize.write (((((xasyncore).xdispatcher_with_send).x__init__)).apply ((xself)) (((xself).xsocket)))
                                (((unsupported)).apply (((xself).x_ssl_accepting)) (TRUE))
                                bogusForceDataize.write ((((xself).x_do_ssl_handshake)).apply)
                        xreadable.write
                          [xself]
                            seq > @
                              seq
                                (((xisinstance)).apply (((xself).xsocket)) (((xssl).xSSLSocket))).if
                                  while.
                                    ((((((xself).xsocket).xpending)).apply).greater 0)
                                    [unused]
                                      seq > @
                                        bogusForceDataize.write ((((xself).xhandle_read_event)).apply)
                                (((unsupported)).apply (TRUE))
                        x_do_ssl_handshake.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (((xssl).xSSLWantReadError)) (((xssl).xSSLWantWriteError)))) (((xssl).xSSLEOFError)) (((xssl).xSSLError)) ((xOSError)))
                                bogusForceDataize.write (((((xself).xsocket).xdo_handshake)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply (((((xself).xhandle_close)).apply)))
                                (((unsupported)).apply)
                                ((((unsupported)).apply (((xerr).xargs)) (0)).eq ((xerrno).xECONNABORTED)).if
                                  (((unsupported)).apply (((((xself).xhandle_close)).apply)))
                                (((unsupported)).apply (((xself).x_ssl_accepting)) (FALSE))
                        xhandle_read.write
                          [xself]
                            memory > xdata
                            seq > @
                              ((xself).x_ssl_accepting).if
                                bogusForceDataize.write ((((xself).x_do_ssl_handshake)).apply)
                                seq
                                  xdata.write ((((xself).xrecv)).apply (1024))
                                  ((xsupport).xverbose).if
                                    bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" server:  read %s from clientn".mod (((xrepr)).apply ((xdata))))))
                                  ((xdata).not).if
                                    bogusForceDataize.write ((((xself).xclose)).apply)
                                    bogusForceDataize.write ((((xself).xsend)).apply (((((xdata).xlower)).apply)))
                        xhandle_close.write
                          [xself]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xclose)).apply)
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" server:  closed connection %sn".mod ((xself).xsocket))))
                        xhandle_error.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                    x__init__.write
                      [xself xcertfile]
                        memory > xsock
                        seq > @
                          seq
                            (((unsupported)).apply (((xself).xcertfile)) ((xcertfile)))
                            xsock.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                            (((unsupported)).apply (((xself).xport)) (((((xsupport).xbind_port)).apply ((xsock)) (""))))
                            bogusForceDataize.write (((((xasyncore).xdispatcher).x__init__)).apply ((xself)) ((xsock)))
                            bogusForceDataize.write ((((xself).xlisten)).apply (5))
                    xhandle_accepted.write
                      [xself xsock_obj xaddr]
                        seq > @
                          seq
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" server:  new connection from %s:%sn".mod (xaddr))))
                            bogusForceDataize.write ((((xself).xConnectionHandler)).apply ((xsock_obj)) (((xself).xcertfile)))
                    xhandle_error.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                x__init__.write
                  [xself xcertfile]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xflag)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xactive)) (FALSE))
                        (((unsupported)).apply (((xself).xserver)) (((((xself).xEchoServer)).apply ((xcertfile)))))
                        (((unsupported)).apply (((xself).xport)) ((((xself).xserver).xport)))
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)).apply ((xself)))
                        (((unsupported)).apply (((xself).xdaemon)) (TRUE))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s %s>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) (((xself).xserver))))))
                x__enter__.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xstart)).apply (((((xthreading).xEvent)).apply)))
                        bogusForceDataize.write (((((xself).xflag).xwait)).apply)
                        (((unsupported)).apply ((xself)))
                x__exit__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" cleanup: stopping server.n"))
                        bogusForceDataize.write ((((xself).xstop)).apply)
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" cleanup: joining server thread.n"))
                        bogusForceDataize.write ((((xself).xjoin)).apply)
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" cleanup: successfully joined.n"))
                        (((unsupported)).apply (((xasyncore).xclose_all)) (TRUE))
                xstart.write
                  [xself xflag]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xflag)) ((xflag)))
                        bogusForceDataize.write (((((xthreading).xThread).xstart)).apply ((xself)))
                xrun.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xactive)) (TRUE))
                        ((xself).xflag).if
                          bogusForceDataize.write (((((xself).xflag).xset)).apply)
                        while.
                          ((xself).xactive)
                          [unused]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xasyncore).xloop)).apply (1))
                xstop.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xactive)) (FALSE))
                        bogusForceDataize.write (((((xself).xserver).xclose)).apply)
            xserver_params_test.write
              [xclient_context xserver_context xindata xchatty xconnectionchatty xsni_name xsession]
                memory > xserver
                memory > xoutdata
                memory > xstats
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xstats.write (((unsupported)).apply)
                    xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) ((xchatty)) (FALSE))
                    (((unsupported)).apply ((xserver)))
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xsni_name)) ((xsession)))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                            (((unsupported)).apply ((xarg)) ((((unsupported)).apply ((xindata)) ((((xbytearray)).apply ((xindata)))) ((((xmemoryview)).apply ((xindata)))))))
                              seq
                                (xconnectionchatty).if
                                  ((xsupport).xverbose).if
                                    bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" client:  sending %r...n".mod (xindata))))
                                bogusForceDataize.write ((((xs).xwrite)).apply ((xarg)))
                                xoutdata.write ((((xs).xread)).apply)
                                (xconnectionchatty).if
                                  ((xsupport).xverbose).if
                                    bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" client:  read %rn".mod (xoutdata))))
                                ((xoutdata).neq ((((xindata).xlower)).apply)).if
                                  (((unsupported)).apply ((((xAssertionError)).apply (("bad data <<%r>> (%d) received; expected <<%r>> (%d)n".mod (((unsupported)).apply ((((unsupported)).apply ((xoutdata)) ((((unsupported)).apply (20))))) ((((xlen)).apply ((xoutdata)))) (((((((unsupported)).apply ((xindata)) ((((unsupported)).apply (20)))).xlower)).apply)) ((((xlen)).apply ((xindata))))))))))
                            bogusForceDataize.write ((((xs).xwrite)).apply ("overn"))
                            (xconnectionchatty).if
                              ((xsupport).xverbose).if
                                bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" client:  closing connection.n"))
                            bogusForceDataize.write ((((xstats).xupdate)).apply ((((unsupported)).apply ("compression") (((((xs).xcompression)).apply)) ("cipher") (((((xs).xcipher)).apply)) ("peercert") (((((xs).xgetpeercert)).apply)) ("client_alpn_protocol") (((((xs).xselected_alpn_protocol)).apply)) ("client_npn_protocol") (((((xs).xselected_npn_protocol)).apply)) ("version") (((((xs).xversion)).apply)) ("session_reused") (((xs).xsession_reused)) ("session") (((xs).xsession)))))
                            bogusForceDataize.write ((((xs).xclose)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstats)) ("server_alpn_protocols"))) (((xserver).xselected_alpn_protocols)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstats)) ("server_npn_protocols"))) (((xserver).xselected_npn_protocols)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstats)) ("server_shared_ciphers"))) (((xserver).xshared_ciphers)))
                    (((unsupported)).apply ((xstats)))
            xtry_protocol_combo.write
              [xserver_protocol xclient_protocol xexpect_success xcertsreqs xserver_options xclient_options]
                memory > xcerttype
                memory > xformatstr
                memory > xserver_context
                memory > xstats
                memory > xclient_context
                memory > xmin_version
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xcertsreqs)) ("None: is there a None literal in the EO language?")).if
                      xcertsreqs.write ((xssl).xCERT_NONE)
                    xcerttype.write (((unsupported)).apply ((((unsupported)).apply (((xssl).xCERT_NONE)) ("CERT_NONE") (((xssl).xCERT_OPTIONAL)) ("CERT_OPTIONAL") (((xssl).xCERT_REQUIRED)) ("CERT_REQUIRED"))) ((xcertsreqs)))
                    ((xsupport).xverbose).if
                      seq
                        xformatstr.write (((xexpect_success).and " %s->%s %sn").or " {%s->%s} %sn")
                        bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (((xformatstr).mod (((unsupported)).apply (((((xssl).xget_protocol_name)).apply ((xclient_protocol)))) (((((xssl).xget_protocol_name)).apply ((xserver_protocol)))) ((xcerttype))))))
                    xclient_context.write ((((xssl).xSSLContext)).apply ((xclient_protocol)))
                    (((unsupported)).apply (((xclient_context).xoptions)) ((xclient_options)))
                    xserver_context.write ((((xssl).xSSLContext)).apply ((xserver_protocol)))
                    (((unsupported)).apply (((xserver_context).xoptions)) ((xserver_options)))
                    xmin_version.write ((((xPROTOCOL_TO_TLS_VERSION).xget)).apply ((xclient_protocol)) ("None: is there a None literal in the EO language?"))
                    ((((((unsupported)).apply ((xmin_version)) ("None: is there a None literal in the EO language?")).and (((xhasattr)).apply ((xserver_context)) ("minimum_version"))).and ((xserver_protocol).eq ((xssl).xPROTOCOL_TLS))).and (((xserver_context).xminimum_version).greater (xmin_version))).if
                      (((unsupported)).apply (((xserver_context).xminimum_version)) ((xmin_version)))
                    (((xclient_context).xprotocol).eq ((xssl).xPROTOCOL_TLS)).if
                      bogusForceDataize.write ((((xclient_context).xset_ciphers)).apply ("ALL"))
                    bogusForceDataize.write (((xseclevel_workaround)).apply ((xserver_context)) ((xclient_context)))
                    (((unsupported)).apply ((xctx)) ((((unsupported)).apply ((xclient_context)) ((xserver_context)))))
                      seq
                        (((unsupported)).apply (((xctx).xverify_mode)) ((xcertsreqs)))
                        bogusForceDataize.write ((((xctx).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        bogusForceDataize.write ((((xctx).xload_verify_locations)).apply ((xSIGNING_CA)))
                    (((unsupported)).apply (((xssl).xSSLError)) ((xOSError)))
                      xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (FALSE) (FALSE))
                      (xexpect_success).if
                        (((unsupported)).apply)
                      ((xexpect_success).or (((xe).xerrno).neq ((xerrno).xECONNRESET))).if
                        (((unsupported)).apply)
                      ((xexpect_success).not).if
                        (((unsupported)).apply ((((xAssertionError)).apply (("Client protocol %s succeeded with server protocol %s!".mod (((unsupported)).apply (((((xssl).xget_protocol_name)).apply ((xclient_protocol)))) (((((xssl).xget_protocol_name)).apply ((xserver_protocol))))))))))
                        ((((unsupported)).apply ((xexpect_success)) (TRUE)).and ((xexpect_success).neq (((unsupported)).apply ((xstats)) ("version")))).if
                          (((unsupported)).apply ((((xAssertionError)).apply (("version mismatch: expected %r, got %r".mod (((unsupported)).apply ((xexpect_success)) ((((unsupported)).apply ((xstats)) ("version")))))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_echo.write
                  [xself]
                    memory > xcontext
                    seq > @
                      seq
                        unsupported
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((unsupported)).apply ((xprotocol)) ((xPROTOCOLS)))
                          seq
                            (((unsupported)).apply ((xprotocol)) ((((unsupported)).apply (((xssl).xPROTOCOL_TLS_CLIENT)) (((xssl).xPROTOCOL_TLS_SERVER))))).if
                              (((unsupported)).apply)
                            ((((xhas_tls_protocol)).apply ((xprotocol))).not).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((((unsupported)).apply (((xssl).x_PROTOCOL_NAMES)) ((xprotocol)))))))
                              seq
                                xcontext.write ((((xssl).xSSLContext)).apply ((xprotocol)))
                                bogusForceDataize.write ((((xcontext).xload_cert_chain)).apply ((xCERTFILE)))
                                bogusForceDataize.write (((xseclevel_workaround)).apply ((xcontext)))
                                (((unsupported)).apply ((xserver_params_test)) ((xcontext)) ((xcontext)) (TRUE) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) (((xssl).xPROTOCOL_TLS_CLIENT)) (((xssl).xPROTOCOL_TLS_SERVER)))))
                          (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                        (((unsupported)).apply (((xclient_context).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) (((xssl).xPROTOCOL_TLS_SERVER)) (((xssl).xPROTOCOL_TLS_CLIENT)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xe)))
                              (((unsupported)).apply ((xserver_params_test)) ((xserver_context)) ((xclient_context)) (TRUE) (TRUE) ((xhostname)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("called a function you should not call") ((((xstr)).apply (((xe).xexception)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) (((xssl).xPROTOCOL_TLS_SERVER)) (((xssl).xPROTOCOL_TLS_SERVER)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xe)))
                              (((unsupported)).apply ((xserver_params_test)) ((xserver_context)) ((xserver_context)) (TRUE) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("called a function you should not call") ((((xstr)).apply (((xe).xexception)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) (((xssl).xPROTOCOL_TLS_CLIENT)) (((xssl).xPROTOCOL_TLS_CLIENT)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xe)))
                              (((unsupported)).apply ((xserver_params_test)) ((xserver_context)) ((xclient_context)) (TRUE) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("called a function you should not call") ((((xstr)).apply (((xe).xexception)))))
                xtest_getpeercert.write
                  [xself]
                    memory > xcipher
                    memory > xbefore
                    memory > xcert
                    memory > xafter
                    memory > xserver
                    seq > @
                      seq
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) (FALSE) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                                bogusForceDataize.write ((((xs).xgetpeercert)).apply)
                              bogusForceDataize.write ((((xs).xdo_handshake)).apply)
                              xcert.write ((((xs).xgetpeercert)).apply)
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)) ("Can't get peer certificate."))
                              xcipher.write ((((xs).xcipher)).apply)
                              ((xsupport).xverbose).if
                                seq
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((((((xpprint).xpformat)).apply ((xcert))).add "n")))
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((("Connection cipher is ".add (((xstr)).apply ((xcipher)))).add ".n")))
                              (((unsupported)).apply ("subject") ((xcert))).if
                                bogusForceDataize.write ((((xself).xfail)).apply (("No subject field in certificate: %s.".mod ((((xpprint).xpformat)).apply ((xcert))))))
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("organizationName") ("Python Software Foundation"))))) ((((unsupported)).apply ((xcert)) ("subject")))).if
                                bogusForceDataize.write ((((xself).xfail)).apply ("Missing or invalid 'organizationName' field in certificate subject; should be 'Python Software Foundation'."))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("notBefore") ((xcert)))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("notAfter") ((xcert)))
                              xbefore.write ((((xssl).xcert_time_to_seconds)).apply ((((unsupported)).apply ((xcert)) ("notBefore"))))
                              xafter.write ((((xssl).xcert_time_to_seconds)).apply ((((unsupported)).apply ((xcert)) ("notAfter"))))
                              bogusForceDataize.write ((((xself).xassertLess)).apply ((xbefore)) ((xafter)))
                xtest_crl_check.write
                  [xself]
                    memory > xserver
                    memory > xcert
                    memory > xtf
                    seq > @
                      (((unsupported)).apply)
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xtf.write (((xgetattr)).apply ((xssl)) ("VERIFY_X509_TRUSTED_FIRST") (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xclient_context).xverify_flags)) ((((xssl).xVERIFY_DEFAULT).or (xtf))))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              xcert.write ((((xs).xgetpeercert)).apply)
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)) ("Can't get peer certificate."))
                        (((unsupported)).apply (((xclient_context).xverify_flags)) (((xssl).xVERIFY_CRL_CHECK_LEAF)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("certificate verify failed"))))
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        bogusForceDataize.write ((((xclient_context).xload_verify_locations)).apply ((xCRLFILE)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              xcert.write ((((xs).xgetpeercert)).apply)
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)) ("Can't get peer certificate."))
                xtest_check_hostname.write
                  [xself]
                    memory > xserver
                    memory > xcert
                    seq > @
                      seq
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              xcert.write ((((xs).xgetpeercert)).apply)
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)) ("Can't get peer certificate."))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ("invalid"))) ((xs)))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xCertificateError)) ("Hostname mismatch, certificate is not valid for 'invalid'."))))
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply (((((xsocket).xsocket)).apply)) ((xs)))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("check_hostname requires server_hostname"))))
                              bogusForceDataize.write ((((xclient_context).xwrap_socket)).apply ((xs)))
                xtest_hostname_checks_common_name.write
                  [xself]
                    memory > xserver
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xhostname_checks_common_name)))
                        (((unsupported)).apply (((xclient_context).xhostname_checks_common_name)) (FALSE))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply ((xNOSANFILE)))))
                        (((unsupported)).apply (((xclient_context).xhostname_checks_common_name)) (FALSE))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLCertVerificationError)))))
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                xtest_ecc_cert.write
                  [xself]
                    memory > xcipher
                    memory > xserver_context
                    memory > xclient_context
                    memory > xcert
                    memory > xserver
                    memory > xhostname
                    seq > @
                      seq
                        xclient_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xclient_context).xload_verify_locations)).apply ((xSIGNING_CA)))
                        bogusForceDataize.write ((((xclient_context).xset_ciphers)).apply ("ECDHE:ECDSA:!NULL:!aRSA"))
                        xhostname.write (xSIGNED_CERTFILE_ECC_HOSTNAME)
                        xserver_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xserver_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE_ECC)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              xcert.write ((((xs).xgetpeercert)).apply)
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)) ("Can't get peer certificate."))
                              xcipher.write ((((((unsupported)).apply (((((xs).xcipher)).apply)) (0)).xsplit)).apply ("-"))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xcipher)) ((((unsupported)).apply (2))))) ((((unsupported)).apply ("ECDHE") ("ECDSA"))))
                xtest_dual_rsa_ecc.write
                  [xself]
                    memory > xcipher
                    memory > xserver_context
                    memory > xclient_context
                    memory > xcert
                    memory > xserver
                    memory > xhostname
                    seq > @
                      seq
                        xclient_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xclient_context).xload_verify_locations)).apply ((xSIGNING_CA)))
                        (((unsupported)).apply (((xclient_context).xoptions)) (((xssl).xOP_NO_TLSv1_3)))
                        bogusForceDataize.write ((((xclient_context).xset_ciphers)).apply ("ECDHE:ECDSA:!NULL:!aRSA"))
                        xhostname.write (xSIGNED_CERTFILE_ECC_HOSTNAME)
                        xserver_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xserver_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE_ECC)))
                        bogusForceDataize.write ((((xserver_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              xcert.write ((((xs).xgetpeercert)).apply)
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)) ("Can't get peer certificate."))
                              xcipher.write ((((((unsupported)).apply (((((xs).xcipher)).apply)) (0)).xsplit)).apply ("-"))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xcipher)) ((((unsupported)).apply (2))))) ((((unsupported)).apply ("ECDHE") ("ECDSA"))))
                xtest_check_hostname_idn.write
                  [xself]
                    memory > xcontext
                    memory > xserver_context
                    memory > xcert
                    memory > xserver
                    memory > xidn_hostnames
                    seq > @
                      seq
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        xserver_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xserver_context).xload_cert_chain)).apply ((xIDNSANSFILE)))
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xcontext).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xcontext).xcheck_hostname)) (TRUE))
                        bogusForceDataize.write ((((xcontext).xload_verify_locations)).apply ((xSIGNING_CA)))
                        xidn_hostnames.write (((unsupported)).apply ((((unsupported)).apply ("könig.idn.pythontest.net") ("xn--knig-5qa.idn.pythontest.net"))) ((((unsupported)).apply ("xn--knig-5qa.idn.pythontest.net") ("xn--knig-5qa.idn.pythontest.net"))) ((((unsupported)).apply ("xn--knig-5qa.idn.pythontest.net") ("xn--knig-5qa.idn.pythontest.net"))) ((((unsupported)).apply ("königsgäßchen.idna2003.pythontest.net") ("xn--knigsgsschen-lcb0w.idna2003.pythontest.net"))) ((((unsupported)).apply ("xn--knigsgsschen-lcb0w.idna2003.pythontest.net") ("xn--knigsgsschen-lcb0w.idna2003.pythontest.net"))) ((((unsupported)).apply ("xn--knigsgsschen-lcb0w.idna2003.pythontest.net") ("xn--knigsgsschen-lcb0w.idna2003.pythontest.net"))) ((((unsupported)).apply ("xn--knigsgchen-b4a3dun.idna2008.pythontest.net") ("xn--knigsgchen-b4a3dun.idna2008.pythontest.net"))) ((((unsupported)).apply ("xn--knigsgchen-b4a3dun.idna2008.pythontest.net") ("xn--knigsgchen-b4a3dun.idna2008.pythontest.net"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xserver_hostname)) ((xexpected_hostname)))) ((xidn_hostnames)))
                          seq
                            xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                            (((unsupported)).apply ((xserver)))
                              (((unsupported)).apply ((((unsupported)).apply (((xcontext).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xserver_hostname)))) ((xs)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xserver_hostname)) ((xexpected_hostname)))
                                  bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                                  xcert.write ((((xs).xgetpeercert)).apply)
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xserver_hostname)) ((xexpected_hostname)))
                                  bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcert)) ("Can't get peer certificate."))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xcontext).xwrap_socket)) (((((xsocket).xsocket)).apply)) ("python.example.org"))) ((xs)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xCertificateError)))))
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                xtest_wrong_cert_tls12.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        bogusForceDataize.write ((((xclient_context).xload_cert_chain)).apply ((xCERTFILE)))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xclient_context).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE) (TRUE))
                        (((unsupported)).apply ((xserver)) ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                          (((unsupported)).apply (((xssl).xSSLError)) ((xOSError)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (("nSSLError is %rn".mod (xe))))
                            seq
                              (((xe).xerrno).neq ((xerrno).xECONNRESET)).if
                                (((unsupported)).apply)
                              ((xsupport).xverbose).if
                                bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (("nsocket.error is %rn".mod (xe))))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Use of invalid cert should have failed!"))
                xtest_wrong_cert_tls13.write
                  [xself]
                    memory > xserver
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        bogusForceDataize.write ((((xclient_context).xload_cert_chain)).apply ((xCERTFILE)))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xserver_context).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1_3)))
                        (((unsupported)).apply (((xclient_context).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1_3)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE) (TRUE))
                        (((unsupported)).apply ((xserver)) ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                          seq
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                            (((unsupported)).apply (((xssl).xSSLError)) ((xOSError)))
                              seq
                                bogusForceDataize.write ((((xs).xwrite)).apply ("data"))
                                bogusForceDataize.write ((((xs).xread)).apply (4))
                              ((xsupport).xverbose).if
                                bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (("nSSLError is %rn".mod (xe))))
                              seq
                                (((xe).xerrno).neq ((xerrno).xECONNRESET)).if
                                  (((unsupported)).apply)
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (("nsocket.error is %rn".mod (xe))))
                              bogusForceDataize.write ((((xself).xfail)).apply ("Use of invalid cert should have failed!"))
                xtest_rude_shutdown.write
                  [xself]
                    memory > xt
                    memory > xlistener_ready
                    memory > xlistener_gone
                    memory > xlistener
                    memory > xs
                    memory > xconnector
                    memory > xport
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlistener_ready.write ((((xthreading).xEvent)).apply)
                        xlistener_gone.write ((((xthreading).xEvent)).apply)
                        xs.write ((((xsocket).xsocket)).apply)
                        xport.write ((((xsupport).xbind_port)).apply ((xs)) ((xHOST)))
                        xlistener.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xs).xlisten)).apply)
                                bogusForceDataize.write ((((xlistener_ready).xset)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xnewsock)) ((xaddr)))) (((((xs).xaccept)).apply)))
                                bogusForceDataize.write ((((xnewsock).xclose)).apply)
                                bogusForceDataize.write ((((xs).xclose)).apply)
                                bogusForceDataize.write ((((xlistener_gone).xset)).apply)
                        xconnector.write
                          []
                            memory > xssl_sock
                            seq > @
                              seq
                                bogusForceDataize.write ((((xlistener_ready).xwait)).apply)
                                (((unsupported)).apply (((((xsocket).xsocket)).apply)) ((xc)))
                                  seq
                                    bogusForceDataize.write ((((xc).xconnect)).apply ((((unsupported)).apply ((xHOST)) ((xport)))))
                                    bogusForceDataize.write ((((xlistener_gone).xwait)).apply)
                                    (((unsupported)).apply ((xOSError)))
                                      xssl_sock.write (((xtest_wrap_socket)).apply ((xc)))
                                      bogusForceDataize.write ((((xself).xfail)).apply ("connecting to closed SSL socket should have failed"))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xlistener)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        (((unsupported)).apply)
                          bogusForceDataize.write (((xconnector)).apply)
                          bogusForceDataize.write ((((xt).xjoin)).apply)
                xtest_ssl_cert_verify_error.write
                  [xself]
                    memory > xserver
                    memory > xcontext
                    memory > xserver_context
                    memory > xmsg
                    seq > @
                      seq
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        xserver_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xserver_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xcontext).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xSIGNED_CERTFILE_HOSTNAME)))) ((xs)))
                            (((unsupported)).apply (((xssl).xSSLError)))
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              seq
                                xmsg.write "unable to get local issuer certificate"
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xe)) (((xssl).xSSLCertVerificationError)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xverify_code)) (20))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xverify_message)) ((xmsg)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((xmsg)) ((((xrepr)).apply ((xe)))))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("certificate verify failed") ((((xrepr)).apply ((xe)))))
                xtest_protocol_sslv2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv2)) (((xssl).xPROTOCOL_SSLv2)) (TRUE))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv2)) (((xssl).xPROTOCOL_SSLv2)) (TRUE) (((xssl).xCERT_OPTIONAL)))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv2)) (((xssl).xPROTOCOL_SSLv2)) (TRUE) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv2)) (((xssl).xPROTOCOL_TLS)) (FALSE))
                        (((xhas_tls_version)).apply ("SSLv3")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv2)) (((xssl).xPROTOCOL_SSLv3)) (FALSE))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv2)) (((xssl).xPROTOCOL_TLSv1)) (FALSE))
                        (((xno_sslv2_implies_sslv3_hello)).apply).if
                          (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_SSLv2)) (((xssl).xPROTOCOL_TLS)) (FALSE) (((xssl).xOP_NO_SSLv2)))
                        (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_SSLv2)) (((xssl).xPROTOCOL_TLS)) (FALSE) (((xssl).xOP_NO_SSLv3)))
                        (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_SSLv2)) (((xssl).xPROTOCOL_TLS)) (FALSE) (((xssl).xOP_NO_TLSv1)))
                xtest_PROTOCOL_TLS.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((xhas_tls_version)).apply ("SSLv2")).if
                          (((unsupported)).apply ((xOSError)))
                            bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_SSLv2)) (TRUE))
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" SSL2 client to SSL23 server test unexpectedly failed:n %sn".mod (((xstr)).apply ((xx))))))
                        (((xhas_tls_version)).apply ("SSLv3")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_SSLv3)) (FALSE))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLS)) (TRUE))
                        (((xhas_tls_version)).apply ("TLSv1")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLSv1)) ("TLSv1"))
                        (((xhas_tls_version)).apply ("SSLv3")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_SSLv3)) (FALSE) (((xssl).xCERT_OPTIONAL)))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLS)) (TRUE) (((xssl).xCERT_OPTIONAL)))
                        (((xhas_tls_version)).apply ("TLSv1")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLSv1)) ("TLSv1") (((xssl).xCERT_OPTIONAL)))
                        (((xhas_tls_version)).apply ("SSLv3")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_SSLv3)) (FALSE) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLS)) (TRUE) (((xssl).xCERT_REQUIRED)))
                        (((xhas_tls_version)).apply ("TLSv1")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLSv1)) ("TLSv1") (((xssl).xCERT_REQUIRED)))
                        (((xhas_tls_version)).apply ("SSLv3")).if
                          (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_SSLv3)) (FALSE) (((xssl).xOP_NO_SSLv3)))
                        (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLS)) (TRUE) ((((xssl).xOP_NO_SSLv2).or ((xssl).xOP_NO_SSLv3))))
                        (((xhas_tls_version)).apply ("TLSv1")).if
                          (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLSv1)) (FALSE) (((xssl).xOP_NO_TLSv1)))
                xtest_protocol_sslv3.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv3)) (((xssl).xPROTOCOL_SSLv3)) ("SSLv3"))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv3)) (((xssl).xPROTOCOL_SSLv3)) ("SSLv3") (((xssl).xCERT_OPTIONAL)))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv3)) (((xssl).xPROTOCOL_SSLv3)) ("SSLv3") (((xssl).xCERT_REQUIRED)))
                        (((xhas_tls_version)).apply ("SSLv2")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv3)) (((xssl).xPROTOCOL_SSLv2)) (FALSE))
                        (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_SSLv3)) (((xssl).xPROTOCOL_TLS)) (FALSE) (((xssl).xOP_NO_SSLv3)))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_SSLv3)) (((xssl).xPROTOCOL_TLSv1)) (FALSE))
                        (((xno_sslv2_implies_sslv3_hello)).apply).if
                          (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_SSLv3)) (((xssl).xPROTOCOL_TLS)) (FALSE) (((xssl).xOP_NO_SSLv2)))
                xtest_protocol_tlsv1.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1)) (((xssl).xPROTOCOL_TLSv1)) ("TLSv1"))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1)) (((xssl).xPROTOCOL_TLSv1)) ("TLSv1") (((xssl).xCERT_OPTIONAL)))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1)) (((xssl).xPROTOCOL_TLSv1)) ("TLSv1") (((xssl).xCERT_REQUIRED)))
                        (((xhas_tls_version)).apply ("SSLv2")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1)) (((xssl).xPROTOCOL_SSLv2)) (FALSE))
                        (((xhas_tls_version)).apply ("SSLv3")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1)) (((xssl).xPROTOCOL_SSLv3)) (FALSE))
                        (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_TLSv1)) (((xssl).xPROTOCOL_TLS)) (FALSE) (((xssl).xOP_NO_TLSv1)))
                xtest_protocol_tlsv1_1.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_1)) (((xssl).xPROTOCOL_TLSv1_1)) ("TLSv1.1"))
                        (((xhas_tls_version)).apply ("SSLv2")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_1)) (((xssl).xPROTOCOL_SSLv2)) (FALSE))
                        (((xhas_tls_version)).apply ("SSLv3")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_1)) (((xssl).xPROTOCOL_SSLv3)) (FALSE))
                        (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_TLSv1_1)) (((xssl).xPROTOCOL_TLS)) (FALSE) (((xssl).xOP_NO_TLSv1_1)))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLSv1_1)) ("TLSv1.1"))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_1)) (((xssl).xPROTOCOL_TLSv1_2)) (FALSE))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_2)) (((xssl).xPROTOCOL_TLSv1_1)) (FALSE))
                xtest_protocol_tlsv1_2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_TLSv1_2)) (((xssl).xPROTOCOL_TLSv1_2)) ("TLSv1.2") ((((xssl).xOP_NO_SSLv3).or ((xssl).xOP_NO_SSLv2))) ((((xssl).xOP_NO_SSLv3).or ((xssl).xOP_NO_SSLv2))))
                        (((xhas_tls_version)).apply ("SSLv2")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_2)) (((xssl).xPROTOCOL_SSLv2)) (FALSE))
                        (((xhas_tls_version)).apply ("SSLv3")).if
                          bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_2)) (((xssl).xPROTOCOL_SSLv3)) (FALSE))
                        (((unsupported)).apply ((xtry_protocol_combo)) (((xssl).xPROTOCOL_TLSv1_2)) (((xssl).xPROTOCOL_TLS)) (FALSE) (((xssl).xOP_NO_TLSv1_2)))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLSv1_2)) ("TLSv1.2"))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_2)) (((xssl).xPROTOCOL_TLSv1)) (FALSE))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1)) (((xssl).xPROTOCOL_TLSv1_2)) (FALSE))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_2)) (((xssl).xPROTOCOL_TLSv1_1)) (FALSE))
                        bogusForceDataize.write (((xtry_protocol_combo)).apply (((xssl).xPROTOCOL_TLSv1_1)) (((xssl).xPROTOCOL_TLSv1_2)) (FALSE))
                xtest_starttls.write
                  [xself]
                    memory > xmsg
                    memory > xs
                    memory > xwrapped
                    memory > xmsgs
                    memory > xserver
                    memory > xconn
                    memory > xoutdata
                    seq > @
                      seq
                        unsupported
                        xmsgs.write (((unsupported)).apply ("msg 1") ("MSG 2") ("STARTTLS") ("MSG 3") ("msg 4") ("ENDTLS") ("msg 5") ("msg 6"))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xCERTFILE)) (TRUE) (TRUE) (TRUE))
                        xwrapped.write FALSE
                        (((unsupported)).apply ((xserver)))
                          seq
                            xs.write ((((xsocket).xsocket)).apply)
                            bogusForceDataize.write ((((xs).xsetblocking)).apply (1))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                            (((unsupported)).apply ((xindata)) ((xmsgs)))
                              seq
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" client:  sending %r...n".mod (xindata))))
                                (xwrapped).if
                                  seq
                                    bogusForceDataize.write ((((xconn).xwrite)).apply ((xindata)))
                                    xoutdata.write ((((xconn).xread)).apply)
                                  seq
                                    bogusForceDataize.write ((((xs).xsend)).apply ((xindata)))
                                    xoutdata.write ((((xs).xrecv)).apply (1024))
                                xmsg.write (((((((xoutdata).xstrip)).apply).xlower)).apply)
                                (((xindata).eq "STARTTLS").and ((((xmsg).xstartswith)).apply ("ok"))).if
                                  seq
                                    ((xsupport).xverbose).if
                                      bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" client:  read %r from server, starting TLS...n".mod (xmsg))))
                                    xconn.write (((xtest_wrap_socket)).apply ((xs)))
                                    xwrapped.write TRUE
                                  (((xindata).eq "ENDTLS").and ((((xmsg).xstartswith)).apply ("ok"))).if
                                    seq
                                      ((xsupport).xverbose).if
                                        bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" client:  read %r from server, ending TLS...n".mod (xmsg))))
                                      xs.write ((((xconn).xunwrap)).apply)
                                      xwrapped.write FALSE
                                    ((xsupport).xverbose).if
                                      bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" client:  read %r from servern".mod (xmsg))))
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" client:  closing connection.n"))
                            (xwrapped).if
                              bogusForceDataize.write ((((xconn).xwrite)).apply ("overn"))
                              bogusForceDataize.write ((((xs).xsend)).apply ("overn"))
                            (xwrapped).if
                              bogusForceDataize.write ((((xconn).xclose)).apply)
                              bogusForceDataize.write ((((xs).xclose)).apply)
                xtest_socketserver.write
                  [xself]
                    memory > xdlen
                    memory > xd2
                    memory > xcontext
                    memory > xurl
                    memory > xf
                    memory > xd1
                    memory > xserver
                    seq > @
                      seq
                        unsupported
                        xserver.write (((unsupported)).apply ((xmake_https_server)) ((xself)) ((xSIGNED_CERTFILE)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((unsupported)).apply ((((xopen)).apply ((xCERTFILE)) ("rb"))) ((xf)))
                          xd1.write ((((xf).xread)).apply)
                        xd2.write ""
                        xurl.write ("https://localhost:%d/%s".mod (((unsupported)).apply (((xserver).xport)) ((((unsupported)).apply ((((((xos).xpath).xsplit)).apply ((xCERTFILE)))) (1)))))
                        xcontext.write (((unsupported)).apply (((xssl).xcreate_default_context)) ((xSIGNING_CA)))
                        xf.write (((unsupported)).apply ((((xurllib).xrequest).xurlopen)) ((xurl)) ((xcontext)))
                        (((unsupported)).apply)
                          seq
                            xdlen.write (((((((xf).xinfo)).apply).xget)).apply ("content-length"))
                            ((xdlen).and ((((xint)).apply ((xdlen))).greater 0)).if
                              seq
                                xd2.write ((((xf).xread)).apply ((((xint)).apply ((xdlen)))))
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" client: read %d bytes from remote server '%s'n".mod (((unsupported)).apply ((((xlen)).apply ((xd2)))) ((xserver))))))
                          bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd1)) ((xd2)))
                xtest_asyncore_server.write
                  [xself]
                    memory > xs
                    memory > xserver
                    memory > xoutdata
                    memory > xindata
                    seq > @
                      seq
                        unsupported
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        xindata.write "FOOn"
                        xserver.write (((xAsyncoreEchoServer)).apply ((xCERTFILE)))
                        (((unsupported)).apply ((xserver)))
                          seq
                            xs.write (((xtest_wrap_socket)).apply (((((xsocket).xsocket)).apply)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ("127.0.0.1") (((xserver).xport)))))
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" client:  sending %r...n".mod (xindata))))
                            bogusForceDataize.write ((((xs).xwrite)).apply ((xindata)))
                            xoutdata.write ((((xs).xread)).apply)
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((" client:  read %rn".mod (xoutdata))))
                            ((xoutdata).neq ((((xindata).xlower)).apply)).if
                              bogusForceDataize.write ((((xself).xfail)).apply (("bad data <<%r>> (%d) received; expected <<%r>> (%d)n".mod (((unsupported)).apply ((((unsupported)).apply ((xoutdata)) ((((unsupported)).apply (20))))) ((((xlen)).apply ((xoutdata)))) (((((((unsupported)).apply ((xindata)) ((((unsupported)).apply (20)))).xlower)).apply)) ((((xlen)).apply ((xindata))))))))
                            bogusForceDataize.write ((((xs).xwrite)).apply ("overn"))
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" client:  closing connection.n"))
                            bogusForceDataize.write ((((xs).xclose)).apply)
                            ((xsupport).xverbose).if
                              bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (" client:  connection closed.n"))
                xtest_recv_send.write
                  [xself]
                    memory > xret
                    memory > x_recv_into
                    memory > xoutdata
                    memory > xmsg
                    memory > xsend_methods
                    memory > x_recvfrom_into
                    memory > xs
                    memory > xdata_prefix
                    memory > xindata
                    memory > xbyteslike
                    memory > xdata
                    memory > xbuffer
                    memory > xubyte
                    memory > xrecv_methods
                    memory > xserver
                    seq > @
                      seq
                        unsupported
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xCERTFILE)) (((xssl).xCERT_NONE)) (((xssl).xPROTOCOL_TLS_SERVER)) ((xCERTFILE)) (TRUE) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          seq
                            xs.write (((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply)) (FALSE) ((xCERTFILE)) ((xCERTFILE)) (((xssl).xCERT_NONE)) (((xssl).xPROTOCOL_TLS_CLIENT)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                            x_recv_into.write
                              []
                                memory > xcount
                                memory > xb
                                seq > @
                                  seq
                                    xb.write (((xbytearray)).apply (("0".mul 100)))
                                    xcount.write ((((xs).xrecv_into)).apply ((xb)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((xcount)))))))
                            x_recvfrom_into.write
                              []
                                memory > xb
                                seq > @
                                  seq
                                    xb.write (((xbytearray)).apply (("0".mul 100)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xcount)) ((xaddr)))) (((((xs).xrecvfrom_into)).apply ((xb)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((xcount)))))))
                            xsend_methods.write (((unsupported)).apply ((((unsupported)).apply ("send") (((xs).xsend)) (TRUE) ((((unsupported)).apply)) ((xlen)))) ((((unsupported)).apply ("sendto") (((xs).xsendto)) (FALSE) ((((unsupported)).apply ("some.address"))) ((xlen)))) ((((unsupported)).apply ("sendall") (((xs).xsendall)) (TRUE) ((((unsupported)).apply)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))))
                            xrecv_methods.write (((unsupported)).apply ((((unsupported)).apply ("recv") (((xs).xrecv)) (TRUE) ((((unsupported)).apply)))) ((((unsupported)).apply ("recvfrom") (((xs).xrecvfrom)) (FALSE) ((((unsupported)).apply ("some.address"))))) ((((unsupported)).apply ("recv_into") ((x_recv_into)) (TRUE) ((((unsupported)).apply)))) ((((unsupported)).apply ("recvfrom_into") ((x_recvfrom_into)) (FALSE) ((((unsupported)).apply)))))
                            xdata_prefix.write "PREFIX_"
                            (((unsupported)).apply ((((unsupported)).apply ((xmeth_name)) ((xsend_meth)) ((xexpect_success)) ((xargs)) ((xret_val_meth)))) ((xsend_methods)))
                              seq
                                xindata.write (((((xdata_prefix).add (xmeth_name)).xencode)).apply ("ascii"))
                                (((unsupported)).apply ((xValueError)))
                                  seq
                                    xret.write (((xsend_meth)).apply ((xindata)) ((((unsupported)).apply ((xargs)))))
                                    xmsg.write ((("sending with {}".xformat)).apply ((xmeth_name)))
                                    (((unsupported)).apply (((xself).xassertEqual)) ((xret)) ((((xret_val_meth)).apply ((xindata)))) ((xmsg)))
                                    xoutdata.write ((((xs).xread)).apply)
                                    ((xoutdata).neq ((((xindata).xlower)).apply)).if
                                      bogusForceDataize.write ((((xself).xfail)).apply ((((unsupported)).apply (("While sending with <<{name:s}>> bad data <<{outdata:r}>> ({nout:d}) received; expected <<{indata:r}>> ({nin:d})n".xformat)) ((xmeth_name)) ((((unsupported)).apply ((xoutdata)) ((((unsupported)).apply (20))))) ((((xlen)).apply ((xoutdata)))) ((((unsupported)).apply ((xindata)) ((((unsupported)).apply (20))))) ((((xlen)).apply ((xindata)))))))
                                  seq
                                    (xexpect_success).if
                                      bogusForceDataize.write ((((xself).xfail)).apply ((((unsupported)).apply (("Failed to send with method <<{name:s}>>; expected to succeed.n".xformat)) ((xmeth_name)))))
                                    (((((((xstr)).apply ((xe))).xstartswith)).apply ((xmeth_name))).not).if
                                      bogusForceDataize.write ((((xself).xfail)).apply ((((unsupported)).apply (("Method <<{name:s}>> failed with unexpected exception message: {exp:s}n".xformat)) ((xmeth_name)) ((xe)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xmeth_name)) ((xrecv_meth)) ((xexpect_success)) ((xargs)))) ((xrecv_methods)))
                              seq
                                xindata.write (((((xdata_prefix).add (xmeth_name)).xencode)).apply ("ascii"))
                                (((unsupported)).apply ((xValueError)))
                                  seq
                                    bogusForceDataize.write ((((xs).xsend)).apply ((xindata)))
                                    xoutdata.write (((xrecv_meth)).apply ((((unsupported)).apply ((xargs)))))
                                    ((xoutdata).neq ((((xindata).xlower)).apply)).if
                                      bogusForceDataize.write ((((xself).xfail)).apply ((((unsupported)).apply (("While receiving with <<{name:s}>> bad data <<{outdata:r}>> ({nout:d}) received; expected <<{indata:r}>> ({nin:d})n".xformat)) ((xmeth_name)) ((((unsupported)).apply ((xoutdata)) ((((unsupported)).apply (20))))) ((((xlen)).apply ((xoutdata)))) ((((unsupported)).apply ((xindata)) ((((unsupported)).apply (20))))) ((((xlen)).apply ((xindata)))))))
                                  seq
                                    (xexpect_success).if
                                      bogusForceDataize.write ((((xself).xfail)).apply ((((unsupported)).apply (("Failed to receive with method <<{name:s}>>; expected to succeed.n".xformat)) ((xmeth_name)))))
                                    (((((((xstr)).apply ((xe))).xstartswith)).apply ((xmeth_name))).not).if
                                      bogusForceDataize.write ((((xself).xfail)).apply ((((unsupported)).apply (("Method <<{name:s}>> failed with unexpected exception message: {exp:s}n".xformat)) ((xmeth_name)) ((xe)))))
                                    bogusForceDataize.write ((((xs).xread)).apply)
                            xdata.write "data"
                            bogusForceDataize.write ((((xs).xsend)).apply ((xdata)))
                            xbuffer.write (((xbytearray)).apply ((((xlen)).apply ((xdata)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xread)).apply ((1.neg)) ((xbuffer)))) ((((xlen)).apply ((xdata)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuffer)) ((xdata)))
                            (((unsupported)).apply ((xctypes)) ("None: is there a None literal in the EO language?")).if
                              seq
                                xubyte.write (((xctypes).xc_ubyte).mul (((xlen)).apply ((xdata))))
                                xbyteslike.write ((((xubyte).xfrom_buffer_copy)).apply ((xdata)))
                                bogusForceDataize.write ((((xs).xsendall)).apply ((xbyteslike)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xread)).apply)) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xs).xdup)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xs).xsendmsg)) ((((unsupported)).apply ("data"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xs).xrecvmsg)) (100))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xs).xrecvmsg_into)) ((((unsupported)).apply ((((xbytearray)).apply (100))))))
                            bogusForceDataize.write ((((xs).xwrite)).apply ("overn"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xs).xrecv)) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xs).xread)) ((1.neg)))
                            bogusForceDataize.write ((((xs).xclose)).apply)
                xtest_recv_zero.write
                  [xself]
                    memory > xs
                    memory > xserver
                    seq > @
                      seq
                        xserver.write (((xThreadedEchoServer)).apply ((xCERTFILE)))
                        bogusForceDataize.write ((((xserver).x__enter__)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xserver).x__exit__)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        xs.write ((((xsocket).xcreate_connection)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                        xs.write (((unsupported)).apply ((xtest_wrap_socket)) ((xs)) (FALSE))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xs).xclose)))
                        bogusForceDataize.write ((((xs).xsend)).apply ("data"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (0))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xread)).apply (0))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xread)).apply)) ("data"))
                        bogusForceDataize.write ((((xs).xsetblocking)).apply (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (0))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv_into)).apply ((((xbytearray)).apply)))) (0))
                xtest_nonblocking_send.write
                  [xself]
                    memory > xs
                    memory > xserver
                    memory > xbuf
                    memory > xfill_buffer
                    seq > @
                      seq
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xCERTFILE)) (((xssl).xCERT_NONE)) (((xssl).xPROTOCOL_TLS_SERVER)) ((xCERTFILE)) (TRUE) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          seq
                            xs.write (((unsupported)).apply ((xtest_wrap_socket)) (((((xsocket).xsocket)).apply)) (FALSE) ((xCERTFILE)) ((xCERTFILE)) (((xssl).xCERT_NONE)) (((xssl).xPROTOCOL_TLS_CLIENT)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                            bogusForceDataize.write ((((xs).xsetblocking)).apply (FALSE))
                            xbuf.write (((xbytearray)).apply (8192))
                            xfill_buffer.write
                              []
                                seq > @
                                  while.
                                    TRUE
                                    [unused]
                                      seq > @
                                        bogusForceDataize.write ((((xs).xsend)).apply ((xbuf)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply (((xssl).xSSLWantWriteError)) (((xssl).xSSLWantReadError)))) ((xfill_buffer)))
                            bogusForceDataize.write ((((xs).xsetblocking)).apply (TRUE))
                            bogusForceDataize.write ((((xs).xclose)).apply)
                xtest_handshake_timeout.write
                  [xself]
                    memory > xstarted
                    memory > xc
                    memory > xfinish
                    memory > xhost
                    memory > xport
                    memory > xserver
                    memory > xt
                    memory > xserve
                    seq > @
                      seq
                        xserver.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        xhost.write "127.0.0.1"
                        xport.write ((((xsupport).xbind_port)).apply ((xserver)))
                        xstarted.write ((((xthreading).xEvent)).apply)
                        xfinish.write FALSE
                        xserve.write
                          []
                            memory > xconns
                            seq > @
                              seq
                                bogusForceDataize.write ((((xserver).xlisten)).apply)
                                bogusForceDataize.write ((((xstarted).xset)).apply)
                                xconns.write (((unsupported)).apply)
                                while.
                                  ((xfinish).not)
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)) ((xe)))) (((((xselect).xselect)).apply ((((unsupported)).apply ((xserver)))) ((((unsupported)).apply)) ((((unsupported)).apply)) (0.1))))
                                        (((unsupported)).apply ((xserver)) ((xr))).if
                                          bogusForceDataize.write ((((xconns).xappend)).apply ((((unsupported)).apply (((((xserver).xaccept)).apply)) (0))))
                                (((unsupported)).apply ((xsock)) ((xconns)))
                                  bogusForceDataize.write ((((xsock).xclose)).apply)
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xserve)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xstarted).xwait)).apply)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply)
                              seq
                                xc.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                                bogusForceDataize.write ((((xc).xsettimeout)).apply (0.2))
                                bogusForceDataize.write ((((xc).xconnect)).apply ((((unsupported)).apply ((xhost)) ((xport)))))
                                bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply (((xsocket).xtimeout)) ("timed out") ((xtest_wrap_socket)) ((xc)))
                              bogusForceDataize.write ((((xc).xclose)).apply)
                            (((unsupported)).apply)
                              seq
                                xc.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                                xc.write (((xtest_wrap_socket)).apply ((xc)))
                                bogusForceDataize.write ((((xc).xsettimeout)).apply (0.2))
                                bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply (((xsocket).xtimeout)) ("timed out") (((xc).xconnect)) ((((unsupported)).apply ((xhost)) ((xport)))))
                              bogusForceDataize.write ((((xc).xclose)).apply)
                          seq
                            xfinish.write TRUE
                            bogusForceDataize.write ((((xt).xjoin)).apply)
                            bogusForceDataize.write ((((xserver).xclose)).apply)
                xtest_server_accept.write
                  [xself]
                    memory > xclient
                    memory > xremote
                    memory > xcontext
                    memory > xpeer
                    memory > xclient_addr
                    memory > xhost
                    memory > xevt
                    memory > xport
                    memory > xserver
                    memory > xt
                    memory > xserve
                    seq > @
                      seq
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((xcontext).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xcontext).xload_verify_locations)).apply ((xSIGNING_CA)))
                        bogusForceDataize.write ((((xcontext).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        xserver.write ((((xsocket).xsocket)).apply (((xsocket).xAF_INET)))
                        xhost.write "127.0.0.1"
                        xport.write ((((xsupport).xbind_port)).apply ((xserver)))
                        xserver.write (((unsupported)).apply (((xcontext).xwrap_socket)) ((xserver)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xserver).xserver_side)))
                        xevt.write ((((xthreading).xEvent)).apply)
                        xremote.write "None: is there a None literal in the EO language?"
                        xpeer.write "None: is there a None literal in the EO language?"
                        xserve.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xserver).xlisten)).apply)
                                bogusForceDataize.write ((((xevt).xset)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xremote)) ((xpeer)))) (((((xserver).xaccept)).apply)))
                                bogusForceDataize.write ((((xremote).xsend)).apply (((((xremote).xrecv)).apply (4))))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xserve)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xevt).xwait)).apply)
                        xclient.write ((((xcontext).xwrap_socket)).apply (((((xsocket).xsocket)).apply)))
                        bogusForceDataize.write ((((xclient).xconnect)).apply ((((unsupported)).apply ((xhost)) ((xport)))))
                        bogusForceDataize.write ((((xclient).xsend)).apply ("data"))
                        bogusForceDataize.write ((((xclient).xrecv)).apply)
                        xclient_addr.write ((((xclient).xgetsockname)).apply)
                        bogusForceDataize.write ((((xclient).xclose)).apply)
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                        bogusForceDataize.write ((((xremote).xclose)).apply)
                        bogusForceDataize.write ((((xserver).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xremote)) (((xssl).xSSLSocket)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpeer)) ((xclient_addr)))
                xtest_getpeercert_enotconn.write
                  [xself]
                    memory > xcontext
                    seq > @
                      seq
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((((xcontext).xwrap_socket)).apply (((((xsocket).xsocket)).apply)))) ((xsock)))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                              bogusForceDataize.write ((((xsock).xgetpeercert)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOTCONN)))
                xtest_do_handshake_enotconn.write
                  [xself]
                    memory > xcontext
                    seq > @
                      seq
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((((xcontext).xwrap_socket)).apply (((((xsocket).xsocket)).apply)))) ((xsock)))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                              bogusForceDataize.write ((((xsock).xdo_handshake)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xENOTCONN)))
                xtest_no_shared_ciphers.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xoptions)) (((xssl).xOP_NO_TLSv1_3)))
                        bogusForceDataize.write ((((xclient_context).xset_ciphers)).apply ("AES128"))
                        bogusForceDataize.write ((((xserver_context).xset_ciphers)).apply ("AES256"))
                        (((unsupported)).apply ((((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)))) ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))))
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("no shared cipher") ((((unsupported)).apply (((xserver).xconn_errors)) (0))))
                xtest_version_basic.write
                  [xself]
                    memory > xcontext
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xcontext).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((xcontext).xverify_mode)) (((xssl).xCERT_NONE)))
                        (((unsupported)).apply ((((unsupported)).apply ((xThreadedEchoServer)) ((xCERTFILE)) (((xssl).xPROTOCOL_TLS_SERVER)) (FALSE))) ((xserver)))
                          seq
                            (((unsupported)).apply (((((xcontext).xwrap_socket)).apply (((((xsocket).xsocket)).apply)))) ((xs)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((((xs).xversion)).apply)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((xs).x_sslobj)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                                ((xIS_OPENSSL_1_1_1).and (((xhas_tls_version)).apply ("TLSv1_3"))).if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xversion)).apply)) ("TLSv1.3"))
                                  (((xssl).xOPENSSL_VERSION_INFO).geq (((unsupported)).apply (1) (0) (2))).if
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xversion)).apply)) ("TLSv1.2"))
                                    bogusForceDataize.write ((((xself).xassertIn)).apply (((((xs).xversion)).apply)) ((((unsupported)).apply ("TLSv1") ("TLSv1.2"))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xs).x_sslobj)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xs).xversion)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_tls1_3.write
                  [xself]
                    memory > xcontext
                    seq > @
                      (((unsupported)).apply)
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xcontext).xload_cert_chain)).apply ((xCERTFILE)))
                        (((unsupported)).apply (((xcontext).xoptions)) (((((xssl).xOP_NO_TLSv1).or ((xssl).xOP_NO_TLSv1_1)).or ((xssl).xOP_NO_TLSv1_2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xThreadedEchoServer)) ((xcontext)))) ((xserver)))
                          (((unsupported)).apply (((((xcontext).xwrap_socket)).apply (((((xsocket).xsocket)).apply)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply (((((xs).xcipher)).apply)) (0))) ((((unsupported)).apply ("TLS_AES_256_GCM_SHA384") ("TLS_CHACHA20_POLY1305_SHA256") ("TLS_AES_128_GCM_SHA256"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xversion)).apply)) ("TLSv1.3"))
                xtest_min_max_version_tlsv1_2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1)))
                        (((unsupported)).apply (((xclient_context).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        (((unsupported)).apply (((xserver_context).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        (((unsupported)).apply (((xserver_context).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        (((unsupported)).apply ((((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)))) ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xversion)).apply)) ("TLSv1.2"))
                xtest_min_max_version_tlsv1_1.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1)))
                        (((unsupported)).apply (((xclient_context).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        (((unsupported)).apply (((xserver_context).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1)))
                        (((unsupported)).apply (((xserver_context).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1_1)))
                        bogusForceDataize.write (((xseclevel_workaround)).apply ((xclient_context)) ((xserver_context)))
                        (((unsupported)).apply ((((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)))) ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xversion)).apply)) ("TLSv1.1"))
                xtest_min_max_version_mismatch.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xserver_context).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        (((unsupported)).apply (((xserver_context).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        (((unsupported)).apply (((xclient_context).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1)))
                        (((unsupported)).apply (((xclient_context).xminimum_version)) ((((xssl).xTLSVersion).xTLSv1)))
                        bogusForceDataize.write (((xseclevel_workaround)).apply ((xclient_context)) ((xserver_context)))
                        (((unsupported)).apply ((((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)))) ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xe)))
                                bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("alert") ((((xstr)).apply (((xe).xexception)))))
                xtest_min_max_version_sslv3.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xserver_context).xminimum_version)) ((((xssl).xTLSVersion).xSSLv3)))
                        (((unsupported)).apply (((xclient_context).xminimum_version)) ((((xssl).xTLSVersion).xSSLv3)))
                        (((unsupported)).apply (((xclient_context).xmaximum_version)) ((((xssl).xTLSVersion).xSSLv3)))
                        bogusForceDataize.write (((xseclevel_workaround)).apply ((xclient_context)) ((xserver_context)))
                        (((unsupported)).apply ((((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)))) ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xversion)).apply)) ("SSLv3"))
                xtest_default_ecdh_curve.write
                  [xself]
                    memory > xcontext
                    seq > @
                      (((unsupported)).apply)
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        bogusForceDataize.write ((((xcontext).xload_cert_chain)).apply ((xCERTFILE)))
                        (((unsupported)).apply (((xcontext).xoptions)) (((xssl).xOP_NO_TLSv1_3)))
                        (((xssl).xOPENSSL_VERSION_INFO).less (((unsupported)).apply (1) (0) (0))).if
                          bogusForceDataize.write ((((xcontext).xset_ciphers)).apply ("ECCdraft:ECDH"))
                        (((unsupported)).apply ((((unsupported)).apply ((xThreadedEchoServer)) ((xcontext)))) ((xserver)))
                          (((unsupported)).apply (((((xcontext).xwrap_socket)).apply (((((xsocket).xsocket)).apply)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("ECDH") ((((unsupported)).apply (((((xs).xcipher)).apply)) (0))))
                xtest_tls_unique_channel_binding.write
                  [xself]
                    memory > xcb_data
                    memory > xpeer_data_repr
                    memory > xserver
                    memory > xnew_cb_data
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (TRUE) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                              seq
                                bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                                xcb_data.write ((((xs).xget_channel_binding)).apply ("tls-unique"))
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((((" got channel binding data: {0!r}n".xformat)).apply ((xcb_data)))))
                                bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xcb_data)))
                                (((((xs).xversion)).apply).eq "TLSv1.3").if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcb_data)))) (48))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcb_data)))) (12))
                                bogusForceDataize.write ((((xs).xwrite)).apply ("CB tls-uniquen"))
                                xpeer_data_repr.write (((((((xs).xread)).apply).xstrip)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpeer_data_repr)) (((((((xrepr)).apply ((xcb_data))).xencode)).apply ("us-ascii"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                              seq
                                bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                                xnew_cb_data.write ((((xs).xget_channel_binding)).apply ("tls-unique"))
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply (((("got another channel binding data: {0!r}n".xformat)).apply ((xnew_cb_data)))))
                                bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xcb_data)) ((xnew_cb_data)))
                                bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xcb_data)))
                                (((((xs).xversion)).apply).eq "TLSv1.3").if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcb_data)))) (48))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcb_data)))) (12))
                                bogusForceDataize.write ((((xs).xwrite)).apply ("CB tls-uniquen"))
                                xpeer_data_repr.write (((((((xs).xread)).apply).xstrip)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpeer_data_repr)) (((((((xrepr)).apply ((xnew_cb_data))).xencode)).apply ("us-ascii"))))
                xtest_compression.write
                  [xself]
                    memory > xstats
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ((((" got compression: {!r}n".xformat)).apply ((((unsupported)).apply ((xstats)) ("compression"))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((xstats)) ("compression"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("ZLIB") ("RLE"))))
                xtest_compression_disabled.write
                  [xself]
                    memory > xstats
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xoptions)) (((xssl).xOP_NO_COMPRESSION)))
                        (((unsupported)).apply (((xserver_context).xoptions)) (((xssl).xOP_NO_COMPRESSION)))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xstats)) ("compression"))) ("None: is there a None literal in the EO language?"))
                xtest_dh_params.write
                  [xself]
                    memory > xparts
                    memory > xcipher
                    memory > xstats
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xoptions)) (((xssl).xOP_NO_TLSv1_3)))
                        bogusForceDataize.write ((((xserver_context).xload_dh_params)).apply ((xDHFILE)))
                        bogusForceDataize.write ((((xserver_context).xset_ciphers)).apply ("kEDH"))
                        (((unsupported)).apply (((xserver_context).xoptions)) (((xssl).xOP_NO_TLSv1_3)))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                        xcipher.write (((unsupported)).apply ((((unsupported)).apply ((xstats)) ("cipher"))) (0))
                        xparts.write ((((xcipher).xsplit)).apply ("-"))
                        (((((unsupported)).apply ("ADH") ((xparts))).and (((unsupported)).apply ("EDH") ((xparts)))).and (((unsupported)).apply ("DHE") ((xparts)))).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("Non-DH cipher: ".add (((unsupported)).apply ((xcipher)) (0)))))
                xtest_ecdh_curve.write
                  [xself]
                    memory > xstats
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        bogusForceDataize.write ((((xserver_context).xset_ecdh_curve)).apply ("secp384r1"))
                        bogusForceDataize.write ((((xserver_context).xset_ciphers)).apply ("ECDHE:!eNULL:!aNULL"))
                        (((unsupported)).apply (((xserver_context).xoptions)) ((((xssl).xOP_NO_TLSv1).or ((xssl).xOP_NO_TLSv1_1))))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        bogusForceDataize.write ((((xclient_context).xset_ecdh_curve)).apply ("secp384r1"))
                        bogusForceDataize.write ((((xserver_context).xset_ciphers)).apply ("ECDHE:!eNULL:!aNULL"))
                        (((unsupported)).apply (((xserver_context).xoptions)) ((((xssl).xOP_NO_TLSv1).or ((xssl).xOP_NO_TLSv1_1))))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        bogusForceDataize.write ((((xclient_context).xset_ecdh_curve)).apply ("prime256v1"))
                        bogusForceDataize.write ((((xserver_context).xset_ecdh_curve)).apply ("secp384r1"))
                        bogusForceDataize.write ((((xserver_context).xset_ciphers)).apply ("ECDHE:!eNULL:!aNULL"))
                        (((unsupported)).apply (((xserver_context).xoptions)) ((((xssl).xOP_NO_TLSv1).or ((xssl).xOP_NO_TLSv1_1))))
                        (((unsupported)).apply (((xssl).xSSLError)))
                          xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                          (xIS_OPENSSL_1_1_0).if
                            bogusForceDataize.write ((((xself).xfail)).apply ("mismatch curve did not fail"))
                xtest_selected_alpn_protocol.write
                  [xself]
                    memory > xstats
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xstats)) ("client_alpn_protocol"))) ("None: is there a None literal in the EO language?"))
                xtest_selected_alpn_protocol_if_server_uses_alpn.write
                  [xself]
                    memory > xstats
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        bogusForceDataize.write ((((xserver_context).xset_alpn_protocols)).apply ((((unsupported)).apply ("foo") ("bar"))))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xstats)) ("client_alpn_protocol"))) ("None: is there a None literal in the EO language?"))
                xtest_alpn_protocols.write
                  [xself]
                    memory > xserver_result
                    memory > xserver_protocols
                    memory > xmsg
                    memory > xstats
                    memory > xprotocol_tests
                    memory > xclient_result
                    seq > @
                      (((unsupported)).apply)
                        xserver_protocols.write (((unsupported)).apply ("foo") ("bar") ("milkshake"))
                        xprotocol_tests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ("foo"))) ((((unsupported)).apply ((((unsupported)).apply ("bar") ("foo"))) ("foo"))) ((((unsupported)).apply ((((unsupported)).apply ("milkshake"))) ("milkshake"))) ((((unsupported)).apply ((((unsupported)).apply ("http/3.0") ("http/4.0"))) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_protocols)) ((xexpected)))) ((xprotocol_tests)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                            bogusForceDataize.write ((((xserver_context).xset_alpn_protocols)).apply ((xserver_protocols)))
                            bogusForceDataize.write ((((xclient_context).xset_alpn_protocols)).apply ((xclient_protocols)))
                            (((unsupported)).apply (((xssl).xSSLError)))
                              xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                              xstats.write (xe)
                            (((((unsupported)).apply ((xexpected)) ("None: is there a None literal in the EO language?")).and (xIS_OPENSSL_1_1_0)).and (((xssl).xOPENSSL_VERSION_INFO).less (((unsupported)).apply (1) (1) (0) (6)))).if
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xstats)) (((xssl).xSSLError)))
                              seq
                                xmsg.write ("failed trying %s (s) and %s (c).nwas expecting %s, but got %%s from the %%s".mod (((unsupported)).apply ((((xstr)).apply ((xserver_protocols)))) ((((xstr)).apply ((xclient_protocols)))) ((((xstr)).apply ((xexpected))))))
                                xclient_result.write (((unsupported)).apply ((xstats)) ("client_alpn_protocol"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xclient_result)) ((xexpected)) (((xmsg).mod (((unsupported)).apply ((xclient_result)) ("client")))))
                                xserver_result.write ((((xlen)).apply ((((unsupported)).apply ((xstats)) ("server_alpn_protocols")))).if (((unsupported)).apply ((((unsupported)).apply ((xstats)) ("server_alpn_protocols"))) ((1.neg))) "nothing")
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xserver_result)) ((xexpected)) (((xmsg).mod (((unsupported)).apply ((xserver_result)) ("server")))))
                xtest_selected_npn_protocol.write
                  [xself]
                    memory > xstats
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xstats)) ("client_npn_protocol"))) ("None: is there a None literal in the EO language?"))
                xtest_npn_protocols.write
                  [xself]
                    memory > xserver_result
                    memory > xserver_protocols
                    memory > xmsg
                    memory > xstats
                    memory > xprotocol_tests
                    memory > xclient_result
                    seq > @
                      (((unsupported)).apply)
                        xserver_protocols.write (((unsupported)).apply ("http/1.1") ("spdy/2"))
                        xprotocol_tests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("http/1.1") ("spdy/2"))) ("http/1.1"))) ((((unsupported)).apply ((((unsupported)).apply ("spdy/2") ("http/1.1"))) ("http/1.1"))) ((((unsupported)).apply ((((unsupported)).apply ("spdy/2") ("test"))) ("spdy/2"))) ((((unsupported)).apply ((((unsupported)).apply ("abc") ("def"))) ("abc"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_protocols)) ((xexpected)))) ((xprotocol_tests)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                            bogusForceDataize.write ((((xserver_context).xset_npn_protocols)).apply ((xserver_protocols)))
                            bogusForceDataize.write ((((xclient_context).xset_npn_protocols)).apply ((xclient_protocols)))
                            xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) (TRUE) ((xhostname)))
                            xmsg.write ("failed trying %s (s) and %s (c).nwas expecting %s, but got %%s from the %%s".mod (((unsupported)).apply ((((xstr)).apply ((xserver_protocols)))) ((((xstr)).apply ((xclient_protocols)))) ((((xstr)).apply ((xexpected))))))
                            xclient_result.write (((unsupported)).apply ((xstats)) ("client_npn_protocol"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xclient_result)) ((xexpected)) (((xmsg).mod (((unsupported)).apply ((xclient_result)) ("client")))))
                            xserver_result.write ((((xlen)).apply ((((unsupported)).apply ((xstats)) ("server_npn_protocols")))).if (((unsupported)).apply ((((unsupported)).apply ((xstats)) ("server_npn_protocols"))) ((1.neg))) "nothing")
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xserver_result)) ((xexpected)) (((xmsg).mod (((unsupported)).apply ((xserver_result)) ("server")))))
                xsni_contexts.write
                  [xself]
                    memory > xother_context
                    memory > xserver_context
                    memory > xclient_context
                    seq > @
                      seq
                        xserver_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xserver_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        xother_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xother_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE2)))
                        xclient_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xclient_context).xload_verify_locations)).apply ((xSIGNING_CA)))
                        (((unsupported)).apply ((((unsupported)).apply ((xserver_context)) ((xother_context)) ((xclient_context)))))
                xcheck_common_name.write
                  [xself xstats xname]
                    memory > xcert
                    seq > @
                      seq
                        xcert.write (((unsupported)).apply ((xstats)) ("peercert"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((((unsupported)).apply ("commonName") ((xname)))))) ((((unsupported)).apply ((xcert)) ("subject"))))
                xtest_sni_callback.write
                  [xself]
                    memory > xcalls
                    memory > xstats
                    memory > xservername_cb
                    seq > @
                      (((unsupported)).apply)
                        xcalls.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xserver_context)) ((xother_context)) ((xclient_context)))) (((((xself).xsni_contexts)).apply)))
                        (((unsupported)).apply (((xclient_context).xcheck_hostname)) (FALSE))
                        xservername_cb.write
                          [xssl_sock xserver_name xinitial_context]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xcalls).xappend)).apply ((((unsupported)).apply ((xserver_name)) ((xinitial_context)))))
                                (((unsupported)).apply ((xserver_name)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply (((xssl_sock).xcontext)) ((xother_context)))
                        bogusForceDataize.write ((((xserver_context).xset_servername_callback)).apply ((xservername_cb)))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) ("supermessage"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalls)) ((((unsupported)).apply ((((unsupported)).apply ("supermessage") ((xserver_context)))))))
                        bogusForceDataize.write ((((xself).xcheck_common_name)).apply ((xstats)) ("fakehostname"))
                        xcalls.write (((unsupported)).apply)
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalls)) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xserver_context)))))))
                        bogusForceDataize.write ((((xself).xcheck_common_name)).apply ((xstats)) ((xSIGNED_CERTFILE_HOSTNAME)))
                        xcalls.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xserver_context).xset_servername_callback)).apply ("None: is there a None literal in the EO language?"))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (TRUE) ("notfunny"))
                        bogusForceDataize.write ((((xself).xcheck_common_name)).apply ((xstats)) ((xSIGNED_CERTFILE_HOSTNAME)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalls)) ((((unsupported)).apply)))
                xtest_sni_callback_alert.write
                  [xself]
                    memory > xstats
                    memory > xcb_returning_alert
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xserver_context)) ((xother_context)) ((xclient_context)))) (((((xself).xsni_contexts)).apply)))
                        xcb_returning_alert.write
                          [xssl_sock xserver_name xinitial_context]
                            seq > @
                              (((unsupported)).apply (((xssl).xALERT_DESCRIPTION_ACCESS_DENIED)))
                        bogusForceDataize.write ((((xserver_context).xset_servername_callback)).apply ((xcb_returning_alert)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xcm)))
                          xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (FALSE) ("supermessage"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xreason)) ("TLSV1_ALERT_ACCESS_DENIED"))
                xtest_sni_callback_raising.write
                  [xself]
                    memory > xcb_raising
                    memory > xstats
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xserver_context)) ((xother_context)) ((xclient_context)))) (((((xself).xsni_contexts)).apply)))
                        xcb_raising.write
                          [xssl_sock xserver_name xinitial_context]
                            seq > @
                              unsupported
                        bogusForceDataize.write ((((xserver_context).xset_servername_callback)).apply ((xcb_raising)))
                        (((unsupported)).apply (((((xsupport).xcatch_unraisable_exception)).apply)) ((xcatch)))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xcm)))
                              xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (FALSE) ("supermessage"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xreason)) ("SSLV3_ALERT_HANDSHAKE_FAILURE"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcatch).xunraisable).xexc_type)) ((xZeroDivisionError)))
                xtest_sni_callback_wrong_return_type.write
                  [xself]
                    memory > xcb_wrong_return_type
                    memory > xstats
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xserver_context)) ((xother_context)) ((xclient_context)))) (((((xself).xsni_contexts)).apply)))
                        xcb_wrong_return_type.write
                          [xssl_sock xserver_name xinitial_context]
                            seq > @
                              (((unsupported)).apply ("foo"))
                        bogusForceDataize.write ((((xserver_context).xset_servername_callback)).apply ((xcb_wrong_return_type)))
                        (((unsupported)).apply (((((xsupport).xcatch_unraisable_exception)).apply)) ((xcatch)))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xcm)))
                              xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) (FALSE) ("supermessage"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xreason)) ("TLSV1_ALERT_INTERNAL_ERROR"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcatch).xunraisable).xexc_type)) ((xTypeError)))
                xtest_shared_ciphers.write
                  [xself]
                    memory > xstats
                    memory > xciphers
                    memory > xexpected_algs
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        bogusForceDataize.write ((((xclient_context).xset_ciphers)).apply ("AES128:AES256"))
                        bogusForceDataize.write ((((xserver_context).xset_ciphers)).apply ("AES256"))
                        xexpected_algs.write (((unsupported)).apply ("AES256") ("AES-256") ("TLS_CHACHA20") ("TLS_AES"))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) ((xhostname)))
                        xciphers.write (((unsupported)).apply ((((unsupported)).apply ((xstats)) ("server_shared_ciphers"))) (0))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply ((xciphers)))) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xtls_version)) ((xbits)))) ((xciphers)))
                          ((((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xalg)) ((xname)))) ((xalg)) ((xexpected_algs))))).not).if
                            bogusForceDataize.write ((((xself).xfail)).apply ((xname)))
                xtest_read_write_after_close_raises_valuerror.write
                  [xself]
                    memory > xs
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          seq
                            xs.write (((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                            bogusForceDataize.write ((((xs).xclose)).apply)
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xs).xread)) (1024))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xs).xwrite)) ("hello"))
                xtest_sendfile.write
                  [xself]
                    memory > xcontext
                    memory > xserver
                    memory > xTEST_DATA
                    seq > @
                      seq
                        xTEST_DATA.write ("x".mul 512)
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((xTEST_DATA)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS)))
                        (((unsupported)).apply (((xcontext).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xcontext).xload_verify_locations)).apply ((xSIGNING_CA)))
                        bogusForceDataize.write ((((xcontext).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xcontext)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply (((((xcontext).xwrap_socket)).apply (((((xsocket).xsocket)).apply)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("rb"))) ((xfile)))
                                seq
                                  bogusForceDataize.write ((((xs).xsendfile)).apply ((xfile)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ((xTEST_DATA)))
                xtest_session.write
                  [xself]
                    memory > xsession4
                    memory > xstats
                    memory > xsession3
                    memory > xsess_stat
                    memory > xsession
                    memory > xsession2
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xoptions)) (((xssl).xOP_NO_TLSv1_3)))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) ((xhostname)))
                        xsession.write (((unsupported)).apply ((xstats)) ("session"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xsession).xid)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((xsession).xtime)) (0))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((xsession).xtimeout)) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xsession).xhas_ticket)))
                        (((xssl).xOPENSSL_VERSION_INFO).greater (((unsupported)).apply (1) (0) (1))).if
                          bogusForceDataize.write ((((xself).xassertGreater)).apply (((xsession).xticket_lifetime_hint)) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xstats)) ("session_reused"))))
                        xsess_stat.write ((((xserver_context).xsession_stats)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsess_stat)) ("accept"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsess_stat)) ("hits"))) (0))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) ((xsession)) ((xhostname)))
                        xsess_stat.write ((((xserver_context).xsession_stats)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsess_stat)) ("accept"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsess_stat)) ("hits"))) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstats)) ("session_reused"))))
                        xsession2.write (((unsupported)).apply ((xstats)) ("session"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsession2).xid)) (((xsession).xid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsession2)) ((xsession)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xsession2)) ((xsession)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((xsession2).xtime)) (((xsession).xtime)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((xsession2).xtimeout)) (((xsession).xtimeout)))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) ((xhostname)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xstats)) ("session_reused"))))
                        xsession3.write (((unsupported)).apply ((xstats)) ("session"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xsession3).xid)) (((xsession).xid)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xsession3)) ((xsession)))
                        xsess_stat.write ((((xserver_context).xsession_stats)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsess_stat)) ("accept"))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsess_stat)) ("hits"))) (1))
                        xstats.write (((unsupported)).apply ((xserver_params_test)) ((xclient_context)) ((xserver_context)) ((xsession)) ((xhostname)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstats)) ("session_reused"))))
                        xsession4.write (((unsupported)).apply ((xstats)) ("session"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsession4).xid)) (((xsession).xid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsession4)) ((xsession)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((xsession4).xtime)) (((xsession).xtime)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((xsession4).xtimeout)) (((xsession).xtimeout)))
                        xsess_stat.write ((((xserver_context).xsession_stats)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsess_stat)) ("accept"))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsess_stat)) ("hits"))) (2))
                xtest_session_handling.write
                  [xself]
                    memory > xserver
                    memory > xsession
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context2)) ((x_)) ((x_)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xoptions)) (((xssl).xOP_NO_TLSv1_3)))
                        (((unsupported)).apply (((xclient_context2).xoptions)) (((xssl).xOP_NO_TLSv1_3)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xsession)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xsession_reused)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                                xsession.write ((xs).xsession)
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((xsession)))
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xe)))
                                  (((unsupported)).apply (((xs).xsession)) ((xobject)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xe).xexception)))) ("Value is not a SSLSession."))
                            (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                              seq
                                bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xe)))
                                  (((unsupported)).apply (((xs).xsession)) ((xsession)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xe).xexception)))) ("Cannot set session after handshake."))
                            (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                              seq
                                (((unsupported)).apply (((xs).xsession)) ((xsession)))
                                bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xs).xsession).xid)) (((xsession).xid)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xsession)) ((xsession)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xs).xsession_reused)) (TRUE))
                            (((unsupported)).apply ((((unsupported)).apply (((xclient_context2).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                              seq
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xe)))
                                  seq
                                    (((unsupported)).apply (((xs).xsession)) ((xsession)))
                                    bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xe).xexception)))) ("Session refers to a different SSLContext."))
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((((xhas_tls_version)).apply ("TLSv1_3"))) ("Test needs TLS 1.3"))))
              seq
                xtest_pha_setter.write
                  [xself]
                    memory > xctx
                    memory > xprotocols
                    seq > @
                      seq
                        xprotocols.write (((unsupported)).apply (((xssl).xPROTOCOL_TLS)) (((xssl).xPROTOCOL_TLS_SERVER)) (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply ((xprotocol)) ((xprotocols)))
                          seq
                            xctx.write ((((xssl).xSSLContext)).apply ((xprotocol)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xpost_handshake_auth)) (FALSE))
                            (((unsupported)).apply (((xctx).xpost_handshake_auth)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xpost_handshake_auth)) (TRUE))
                            (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xpost_handshake_auth)) (TRUE))
                            (((unsupported)).apply (((xctx).xpost_handshake_auth)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xpost_handshake_auth)) (FALSE))
                            (((unsupported)).apply (((xctx).xverify_mode)) (((xssl).xCERT_OPTIONAL)))
                            (((unsupported)).apply (((xctx).xpost_handshake_auth)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xverify_mode)) (((xssl).xCERT_OPTIONAL)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xpost_handshake_auth)) (TRUE))
                xtest_pha_required.write
                  [xself]
                    memory > xserver
                    memory > xcert_text
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xserver_context).xpost_handshake_auth)) (TRUE))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xclient_context).xpost_handshake_auth)) (TRUE))
                        bogusForceDataize.write ((((xclient_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("FALSEn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("PHA"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("OKn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("TRUEn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("PHA"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("OKn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("GETCERT"))
                              xcert_text.write (((((((xs).xrecv)).apply (4096)).xdecode)).apply ("us-ascii"))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("Python Software Foundation CA") ((xcert_text)))
                xtest_pha_required_nocert.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xserver_context).xpost_handshake_auth)) (TRUE))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xclient_context).xpost_handshake_auth)) (TRUE))
                        (((unsupported)).apply (((((xsupport).xcatch_threading_exception)).apply)) ((xcm)))
                          seq
                            xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                            (((unsupported)).apply ((xserver)))
                              (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                                seq
                                  bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                                  bogusForceDataize.write ((((xs).xwrite)).apply ("PHA"))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("OKn"))
                                  bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                                  (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("tlsv13 alert certificate required"))))
                                    bogusForceDataize.write ((((xs).xrecv)).apply (1024))
                xtest_pha_optional.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xserver_context).xpost_handshake_auth)) (TRUE))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xclient_context).xpost_handshake_auth)) (TRUE))
                        bogusForceDataize.write ((((xclient_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_OPTIONAL)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("FALSEn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("PHA"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("OKn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("TRUEn"))
                xtest_pha_optional_nocert.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xserver_context).xpost_handshake_auth)) (TRUE))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_OPTIONAL)))
                        (((unsupported)).apply (((xclient_context).xpost_handshake_auth)) (TRUE))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("FALSEn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("PHA"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("OKn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("FALSEn"))
                xtest_pha_no_pha_client.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xserver_context).xpost_handshake_auth)) (TRUE))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        bogusForceDataize.write ((((xclient_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xssl).xSSLError)) ("not server"))))
                                bogusForceDataize.write ((((xs).xverify_client_post_handshake)).apply)
                              bogusForceDataize.write ((((xs).xwrite)).apply ("PHA"))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("extension not received") (((((xs).xrecv)).apply (1024))))
                xtest_pha_no_pha_server.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xclient_context).xpost_handshake_auth)) (TRUE))
                        bogusForceDataize.write ((((xclient_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("TRUEn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("PHA"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("OKn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("TRUEn"))
                xtest_pha_not_tls13.write
                  [xself]
                    memory > xserver
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        (((unsupported)).apply (((xclient_context).xmaximum_version)) ((((xssl).xTLSVersion).xTLSv1_2)))
                        (((unsupported)).apply (((xclient_context).xpost_handshake_auth)) (TRUE))
                        bogusForceDataize.write ((((xclient_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("PHA"))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("WRONG_SSL_VERSION") (((((xs).xrecv)).apply (1024))))
                xtest_bpo37428_pha_cert_none.write
                  [xself]
                    memory > xserver
                    memory > xserver_context
                    memory > xhostname
                    memory > xclient_context
                    seq > @
                      seq
                        xhostname.write (xSIGNED_CERTFILE_HOSTNAME)
                        xclient_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        (((unsupported)).apply (((xclient_context).xpost_handshake_auth)) (TRUE))
                        bogusForceDataize.write ((((xclient_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        (((unsupported)).apply (((xclient_context).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((xclient_context).xverify_mode)) (((xssl).xCERT_NONE)))
                        xserver_context.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xserver_context).xload_cert_chain)).apply ((xSIGNED_CERTFILE)))
                        bogusForceDataize.write ((((xserver_context).xload_verify_locations)).apply ((xSIGNING_CA)))
                        (((unsupported)).apply (((xserver_context).xpost_handshake_auth)) (TRUE))
                        (((unsupported)).apply (((xserver_context).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            seq
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("FALSEn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("PHA"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("OKn"))
                              bogusForceDataize.write ((((xs).xwrite)).apply ("HASCERT"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrecv)).apply (1024))) ("TRUEn"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xgetpeercert)).apply)) ((((unsupported)).apply)))
            xHAS_KEYLOG.write (((xhasattr)).apply (((xssl).xSSLContext)) ("keylog_filename"))
            xrequires_keylog.write ((((xunittest).xskipUnless)).apply ((xHAS_KEYLOG)) ("test requires OpenSSL 1.1.1 with keylog callback"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xkeylog_lines.write
                  [xself xfname]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xopen)).apply ((xfname)))) ((xf)))
                          (((unsupported)).apply ((((xlen)).apply ((((xlist)).apply ((xf)))))))
                xtest_keylog_defaults.write
                  [xself]
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xkeylog_filename)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xisfile)).apply (((xsupport).xTESTFN)))))
                        (((unsupported)).apply (((xctx).xkeylog_filename)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xkeylog_filename)) (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xisfile)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xkeylog_lines)).apply)) (1))
                        (((unsupported)).apply (((xctx).xkeylog_filename)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xkeylog_filename)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xIsADirectoryError)) ((xPermissionError)))))))
                          (((unsupported)).apply (((xctx).xkeylog_filename)) ((((((xos).xpath).xdirname)).apply ((((((xos).xpath).xabspath)).apply (((xsupport).xTESTFN)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xctx).xkeylog_filename)) (1))
                xtest_keylog_filename.write
                  [xself]
                    memory > xserver
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xkeylog_filename)) (((xsupport).xTESTFN)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xkeylog_lines)).apply)) (6))
                        (((unsupported)).apply (((xclient_context).xkeylog_filename)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xserver_context).xkeylog_filename)) (((xsupport).xTESTFN)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((((xself).xkeylog_lines)).apply)) (11))
                        (((unsupported)).apply (((xclient_context).xkeylog_filename)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply (((xserver_context).xkeylog_filename)) (((xsupport).xTESTFN)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((((xself).xkeylog_lines)).apply)) (21))
                        (((unsupported)).apply (((xclient_context).xkeylog_filename)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xserver_context).xkeylog_filename)) ("None: is there a None literal in the EO language?"))
                xtest_keylog_env.write
                  [xself]
                    memory > xctx
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply (((((((xunittest).xmock).xpatch).xdict)).apply (((xos).xenviron)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("SSLKEYLOGFILE"))) (((xsupport).xTESTFN)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xos).xenviron)) ("SSLKEYLOGFILE"))) (((xsupport).xTESTFN)))
                            xctx.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xkeylog_filename)) ("None: is there a None literal in the EO language?"))
                            xctx.write ((((xssl).xcreate_default_context)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xkeylog_filename)) (((xsupport).xTESTFN)))
                            xctx.write ((((xssl).x_create_stdlib_context)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xctx).xkeylog_filename)) (((xsupport).xTESTFN)))
                xtest_msg_callback.write
                  [xself]
                    memory > xmsg_cb
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xmsg_cb.write
                          [xconn xdirection xversion xcontent_type xmsg_type xdata]
                            seq > @
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xclient_context).x_msg_callback)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xclient_context).x_msg_callback)) ((xmsg_cb)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xclient_context).x_msg_callback)) ((xmsg_cb)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xclient_context).x_msg_callback)) ((((xobject)).apply)))
                xtest_msg_callback_tls12.write
                  [xself]
                    memory > xserver
                    memory > xmsg_cb
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        (((unsupported)).apply (((xclient_context).xoptions)) (((xssl).xOP_NO_TLSv1_3)))
                        xmsg.write (((unsupported)).apply)
                        xmsg_cb.write
                          [xconn xdirection xversion xcontent_type xmsg_type xdata]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xconn)) (((xssl).xSSLSocket)))
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xdata)) ((xbytes)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((xdirection)) ((((unsupported)).apply ("read") ("write"))))
                                bogusForceDataize.write ((((xmsg).xappend)).apply ((((unsupported)).apply ((xdirection)) ((xversion)) ((xcontent_type)) ((xmsg_type)))))
                        (((unsupported)).apply (((xclient_context).x_msg_callback)) ((xmsg_cb)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                            bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("read") (((xTLSVersion).xTLSv1_2)) (((x_TLSContentType).xHANDSHAKE)) (((x_TLSMessageType).xSERVER_KEY_EXCHANGE)))) ((xmsg)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("write") (((xTLSVersion).xTLSv1_2)) (((x_TLSContentType).xCHANGE_CIPHER_SPEC)) (((x_TLSMessageType).xCHANGE_CIPHER_SPEC)))) ((xmsg)))
                xtest_msg_callback_deadlock_bpo43577.write
                  [xself]
                    memory > xserver
                    memory > xserver_context2
                    memory > xsni_cb
                    memory > xmsg_cb
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xclient_context)) ((xserver_context)) ((xhostname)))) ((((xtesting_context)).apply)))
                        xserver_context2.write (((unsupported)).apply ((((xtesting_context)).apply)) (1))
                        xmsg_cb.write
                          [xconn xdirection xversion xcontent_type xmsg_type xdata]
                            seq > @
                        xsni_cb.write
                          [xsock xservername xctx]
                            seq > @
                              (((unsupported)).apply (((xsock).xcontext)) ((xserver_context2)))
                        (((unsupported)).apply (((xserver_context).x_msg_callback)) ((xmsg_cb)))
                        (((unsupported)).apply (((xserver_context).xsni_callback)) ((xsni_cb)))
                        xserver.write (((unsupported)).apply ((xThreadedEchoServer)) ((xserver_context)) (FALSE))
                        (((unsupported)).apply ((xserver)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xclient_context).xwrap_socket)) (((((xsocket).xsocket)).apply)) ((xhostname)))) ((xs)))
                              bogusForceDataize.write ((((xs).xconnect)).apply ((((unsupported)).apply ((xHOST)) (((xserver).xport)))))
            xtest_main.write
              [xverbose]
                memory > xplat
                memory > xplats
                memory > xthread_info
                memory > xtests
                seq > @
                  (((unsupported)).apply)
                    ((xsupport).xverbose).if
                      seq
                        xplats.write (((unsupported)).apply ("Mac") (((xplatform).xmac_ver)) ("Windows") (((xplatform).xwin32_ver)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xfunc)))) (((((xplats).xitems)).apply)))
                          seq
                            xplat.write (((xfunc)).apply)
                            ((xplat).and (((unsupported)).apply ((xplat)) (0))).if
                              seq
                                xplat.write ("%s %r".mod (((unsupported)).apply ((xname)) ((xplat))))
                                (((unsupported)).apply)
                          xplat.write (((xrepr)).apply (((((xplatform).xplatform)).apply)))
                        bogusForceDataize.write (((xprint)).apply (("test_ssl: testing with %r %r".mod (((unsupported)).apply (((xssl).xOPENSSL_VERSION)) (((xssl).xOPENSSL_VERSION_INFO))))))
                        bogusForceDataize.write (((xprint)).apply (("          under %s".mod (xplat))))
                        bogusForceDataize.write (((xprint)).apply (("          HAS_SNI = %r".mod ((xssl).xHAS_SNI))))
                        bogusForceDataize.write (((xprint)).apply (("          OP_ALL = 0x%8x".mod ((xssl).xOP_ALL))))
                        (((unsupported)).apply ((xAttributeError)))
                          bogusForceDataize.write (((xprint)).apply (("          OP_NO_TLSv1_1 = 0x%8x".mod ((xssl).xOP_NO_TLSv1_1))))
                    (((unsupported)).apply ((xfilename)) ((((unsupported)).apply ((xCERTFILE)) ((xBYTES_CERTFILE)) ((xONLYCERT)) ((xONLYKEY)) ((xBYTES_ONLYCERT)) ((xBYTES_ONLYKEY)) ((xSIGNED_CERTFILE)) ((xSIGNED_CERTFILE2)) ((xSIGNING_CA)) ((xBADCERT)) ((xBADKEY)) ((xEMPTYCERT)))))
                      ((((((xos).xpath).xexists)).apply ((xfilename))).not).if
                        (((unsupported)).apply (((((xsupport).xTestFailed)).apply (("Can't read certificate file %r".mod (xfilename))))))
                    xtests.write (((unsupported)).apply ((xContextTests)) ((xBasicSocketTests)) ((xSSLErrorTests)) ((xMemoryBIOTests)) ((xSSLObjectTests)) ((xSimpleBackgroundTests)) ((xThreadedTests)) ((xTestPostHandshakeAuth)) ((xTestSSLDebug)))
                    ((((xsupport).xis_resource_enabled)).apply ("network")).if
                      bogusForceDataize.write ((((xtests).xappend)).apply ((xNetworkedTests)))
                    xthread_info.write ((((xsupport).xthreading_setup)).apply)
                    (((unsupported)).apply)
                      bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((((unsupported)).apply ((xtests)))))
                      bogusForceDataize.write ((((xsupport).xthreading_cleanup)).apply ((((unsupported)).apply ((xthread_info)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)