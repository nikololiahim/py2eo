memory > xIntegerModel
memory > xcomplex
memory > xmin_value
memory > xPositiveSmallIntegerModel
memory > xValueError
memory > xValidationError
memory > xPositiveBigIntegerModel
memory > xconnection
memory > xmin_backend_value
memory > xmax_value
memory > xIntegrityError
memory > xPositiveIntegerModel
memory > xmodels
memory > xobject
memory > xTypeError
memory > xBigIntegerModel
memory > xSmallIntegerModel
memory > xTestCase
memory > xvalidators
memory > xIntegerFieldTests
memory > xvalue
memory > xcallable_limit
memory > xmax_backend_value
memory > xset
memory > xint
memory > xexception
memory > xSimpleTestCase
[] > test_integerfield
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_integerfield_raises_error_on_invalid_intput
        memory > xtest_integerfield_cleans_valid_string
        memory > xtest_types
        memory > xtest_backend_range_save
        memory > xtest_documented_range
        memory > xtest_enum_choices_invalid_input
        memory > xdocumented_range
        memory > xtest_backend_range_validation
        memory > xbackend_range
        memory > xtest_choices_validation_supports_named_groups
        memory > xtest_rel_db_type
        memory > xtest_nullable_integerfield_raises_error_with_blank_false
        memory > xtest_nullable_integerfield_cleans_none_on_null_and_blank_true
        memory > xA
        memory > xmodel
        memory > xtest_integerfield_validates_zero_against_choices
        memory > xtest_invalid_value
        memory > xtest_enum_choices_cleans_valid_string
        memory > xtest_redundant_backend_range_validators
        memory > xtest_coercing
        memory > xrel_db_type_class
        memory > xtest_negative_values
        memory > xtest_integerfield_raises_error_on_empty_input
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xmodel.write (xIntegerModel)
                xdocumented_range.write (((unsupported)).apply (((((unsupported)).apply).neg)) (2147483647))
                xrel_db_type_class.write ((xmodels).xIntegerField)
                xbackend_range.write
                  [xself]
                    memory > xfield
                    memory > xinternal_type
                    seq > @
                      (((unsupported)).apply)
                        xfield.write ((((((xself).xmodel).x_meta).xget_field)).apply ("value"))
                        xinternal_type.write ((((xfield).xget_internal_type)).apply)
                        (((unsupported)).apply ((((((xconnection).xops).xinteger_field_range)).apply ((xinternal_type)))))
                xtest_documented_range.write
                  [xself]
                    memory > xqs
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmin_value)) ((xmax_value)))) (((xself).xdocumented_range)))
                        xinstance.write (((unsupported)).apply (((xself).xmodel)) ((xmin_value)))
                        bogusForceDataize.write ((((xinstance).xfull_clean)).apply)
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xqs.write (((unsupported)).apply (((((xself).xmodel).xobjects).xfilter)) ((xmin_value)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xqs)) (0)).xvalue)) ((xmin_value)))
                        xinstance.write (((unsupported)).apply (((xself).xmodel)) ((xmax_value)))
                        bogusForceDataize.write ((((xinstance).xfull_clean)).apply)
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        xqs.write (((unsupported)).apply (((((xself).xmodel).xobjects).xfilter)) ((xmax_value)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xqs)) (0)).xvalue)) ((xmax_value)))
                xtest_backend_range_save.write
                  [xself]
                    memory > xqs
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmin_value)) ((xmax_value)))) (((xself).xbackend_range)))
                        (((unsupported)).apply ((xmin_value)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xinstance.write (((unsupported)).apply (((xself).xmodel)) ((xmin_value)))
                            bogusForceDataize.write ((((xinstance).xfull_clean)).apply)
                            bogusForceDataize.write ((((xinstance).xsave)).apply)
                            xqs.write (((unsupported)).apply (((((xself).xmodel).xobjects).xfilter)) ((xmin_value)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xqs)) (0)).xvalue)) ((xmin_value)))
                        (((unsupported)).apply ((xmax_value)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xinstance.write (((unsupported)).apply (((xself).xmodel)) ((xmax_value)))
                            bogusForceDataize.write ((((xinstance).xfull_clean)).apply)
                            bogusForceDataize.write ((((xinstance).xsave)).apply)
                            xqs.write (((unsupported)).apply (((((xself).xmodel).xobjects).xfilter)) ((xmax_value)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xqs).xcount)).apply)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xqs)) (0)).xvalue)) ((xmax_value)))
                xtest_backend_range_validation.write
                  [xself]
                    memory > xexpected_message
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmin_value)) ((xmax_value)))) (((xself).xbackend_range)))
                        (((unsupported)).apply ((xmin_value)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xinstance.write (((unsupported)).apply (((xself).xmodel)) (((xmin_value).sub 1)))
                            xexpected_message.write ((((xvalidators).xMinValueValidator).xmessage).mod (((unsupported)).apply ("limit_value") ((xmin_value))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ((xexpected_message)))))
                              bogusForceDataize.write ((((xinstance).xfull_clean)).apply)
                            (((unsupported)).apply (((xinstance).xvalue)) ((xmin_value)))
                            bogusForceDataize.write ((((xinstance).xfull_clean)).apply)
                        (((unsupported)).apply ((xmax_value)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xinstance.write (((unsupported)).apply (((xself).xmodel)) (((xmax_value).sub 1)))
                            xexpected_message.write ((((xvalidators).xMaxValueValidator).xmessage).mod (((unsupported)).apply ("limit_value") ((xmax_value))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ((xexpected_message)))))
                              bogusForceDataize.write ((((xinstance).xfull_clean)).apply)
                            (((unsupported)).apply (((xinstance).xvalue)) ((xmax_value)))
                            bogusForceDataize.write ((((xinstance).xfull_clean)).apply)
                xtest_redundant_backend_range_validators.write
                  [xself]
                    memory > xmin_custom_value
                    memory > xranged_value_field
                    memory > xmax_custom_value
                    memory > xfield_range_message
                    memory > xlimit_value
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmin_backend_value)) ((xmax_backend_value)))) (((xself).xbackend_range)))
                        (((unsupported)).apply ((xcallable_limit)) ((((unsupported)).apply (TRUE) (FALSE))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcallable_limit)))))
                            seq
                              (((unsupported)).apply ((xmin_backend_value)) ("None: is there a None literal in the EO language?")).if
                                seq
                                  xmin_custom_value.write ((xmin_backend_value).sub 1)
                                  xlimit_value.write ((xcallable_limit).if (((unsupported)).apply ((xmin_custom_value))) (xmin_custom_value))
                                  xranged_value_field.write (((unsupported)).apply ((((((((xself).xmodel).x_meta).xget_field)).apply ("value")).x__class__)) ((((unsupported)).apply (((((xvalidators).xMinValueValidator)).apply ((xlimit_value)))))))
                                  xfield_range_message.write ((((xvalidators).xMinValueValidator).xmessage).mod (((unsupported)).apply ("limit_value") ((xmin_custom_value))))
                                  (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) (("[%r]".mod (xfield_range_message))))))
                                    bogusForceDataize.write ((((xranged_value_field).xrun_validators)).apply (((xmin_backend_value).sub 1)))
                              (((unsupported)).apply ((xmax_backend_value)) ("None: is there a None literal in the EO language?")).if
                                seq
                                  xmax_custom_value.write ((xmax_backend_value).sub 1)
                                  xlimit_value.write ((xcallable_limit).if (((unsupported)).apply ((xmax_custom_value))) (xmax_custom_value))
                                  xranged_value_field.write (((unsupported)).apply ((((((((xself).xmodel).x_meta).xget_field)).apply ("value")).x__class__)) ((((unsupported)).apply (((((xvalidators).xMaxValueValidator)).apply ((xlimit_value)))))))
                                  xfield_range_message.write ((((xvalidators).xMaxValueValidator).xmessage).mod (((unsupported)).apply ("limit_value") ((xmax_custom_value))))
                                  (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) (("[%r]".mod (xfield_range_message))))))
                                    bogusForceDataize.write ((((xranged_value_field).xrun_validators)).apply (((xmax_backend_value).sub 1)))
                xtest_types.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        xinstance.write (((unsupported)).apply (((xself).xmodel)) (1))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xinstance).xvalue)) ((xint)))
                        bogusForceDataize.write ((((xinstance).xsave)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xinstance).xvalue)) ((xint)))
                        xinstance.write ((((((xself).xmodel).xobjects).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xinstance).xvalue)) ((xint)))
                xtest_coercing.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xmodel).xobjects).xcreate)) ("10"))
                        xinstance.write (((unsupported)).apply (((((xself).xmodel).xobjects).xget)) ("10"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xvalue)) (10))
                xtest_invalid_value.write
                  [xself]
                    memory > xtests
                    memory > xmsg
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xTypeError)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xTypeError)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xTypeError)) ((((xset)).apply)))) ((((unsupported)).apply ((xTypeError)) ((((xobject)).apply)))) ((((unsupported)).apply ((xTypeError)) ((((xcomplex)).apply)))) ((((unsupported)).apply ((xValueError)) ("non-numeric string"))) ((((unsupported)).apply ((xValueError)) ("non-numeric byte-string"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xexception)) ((xvalue)))) ((xtests)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xvalue)))))
                            seq
                              xmsg.write ("Field 'value' expected a number but got %r.".mod (((unsupported)).apply ((xvalue))))
                              (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xexception)) ((xmsg)))))
                                (((unsupported)).apply (((((xself).xmodel).xobjects).xcreate)) ((xvalue)))
                xtest_rel_db_type.write
                  [xself]
                    memory > xfield
                    memory > xrel_db_type
                    seq > @
                      seq
                        xfield.write ((((((xself).xmodel).x_meta).xget_field)).apply ("value"))
                        xrel_db_type.write ((((xfield).xrel_db_type)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrel_db_type)) ((((((((xself).xrel_db_type_class)).apply).xdb_type)).apply ((xconnection)))))
            (((unsupported)).apply ((xIntegerFieldTests)))
              seq
                xmodel.write (xSmallIntegerModel)
                xdocumented_range.write (((unsupported)).apply ((32768.neg)) (32767))
                xrel_db_type_class.write ((xmodels).xSmallIntegerField)
            (((unsupported)).apply ((xIntegerFieldTests)))
              seq
                xmodel.write (xBigIntegerModel)
                xdocumented_range.write (((unsupported)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))
                xrel_db_type_class.write ((xmodels).xBigIntegerField)
            (((unsupported)).apply ((xIntegerFieldTests)))
              seq
                xmodel.write (xPositiveSmallIntegerModel)
                xdocumented_range.write (((unsupported)).apply (0) (32767))
                xrel_db_type_class.write ((((xconnection).xfeatures).xrelated_fields_match_type).if ((xmodels).xPositiveSmallIntegerField) ((xmodels).xSmallIntegerField))
            (((unsupported)).apply ((xIntegerFieldTests)))
              seq
                xmodel.write (xPositiveIntegerModel)
                xdocumented_range.write (((unsupported)).apply (0) (2147483647))
                xrel_db_type_class.write ((((xconnection).xfeatures).xrelated_fields_match_type).if ((xmodels).xPositiveIntegerField) ((xmodels).xIntegerField))
                xtest_negative_values.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply ((((xPositiveIntegerModel).xobjects).xcreate)) (0))
                        (((unsupported)).apply (((xp).xvalue)) ((((((xmodels).xF)).apply ("value")).sub 1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))))
                          bogusForceDataize.write ((((xp).xsave)).apply)
            (((unsupported)).apply ((xIntegerFieldTests)))
              seq
                xmodel.write (xPositiveBigIntegerModel)
                xdocumented_range.write (((unsupported)).apply (0) ((((unsupported)).apply)))
                xrel_db_type_class.write ((((xconnection).xfeatures).xrelated_fields_match_type).if ((xmodels).xPositiveBigIntegerField) ((xmodels).xBigIntegerField))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                (((unsupported)).apply (((xmodels).xIntegerChoices)))
                  xA.write 1
                xtest_integerfield_cleans_valid_string.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xmodels).xIntegerField)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xclean)).apply ("2") ("None: is there a None literal in the EO language?"))) (2))
                xtest_integerfield_raises_error_on_invalid_intput.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xmodels).xIntegerField)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("a") ("None: is there a None literal in the EO language?"))
                xtest_choices_validation_supports_named_groups.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xmodels).xIntegerField)) ((((unsupported)).apply ((((unsupported)).apply ("group") ((((unsupported)).apply ((((unsupported)).apply (10) ("A"))) ((((unsupported)).apply (20) ("B"))))))) ((((unsupported)).apply (30) ("C"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (10) (((((xf).xclean)).apply (10) ("None: is there a None literal in the EO language?"))))
                xtest_nullable_integerfield_raises_error_with_blank_false.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xmodels).xIntegerField)) (TRUE) (FALSE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_nullable_integerfield_cleans_none_on_null_and_blank_true.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xmodels).xIntegerField)) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xf).xclean)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_integerfield_raises_error_on_empty_input.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xmodels).xIntegerField)) (FALSE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("") ("None: is there a None literal in the EO language?"))
                xtest_integerfield_validates_zero_against_choices.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xmodels).xIntegerField)) ((((unsupported)).apply ((((unsupported)).apply (1) (1))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("0") ("None: is there a None literal in the EO language?"))
                xtest_enum_choices_cleans_valid_string.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xmodels).xIntegerField)) ((((xself).xChoices).xchoices)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xclean)).apply ("1") ("None: is there a None literal in the EO language?"))) (1))
                xtest_enum_choices_invalid_input.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xmodels).xIntegerField)) ((((xself).xChoices).xchoices)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("A") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValidationError)))))
                          bogusForceDataize.write ((((xf).xclean)).apply ("3") ("None: is there a None literal in the EO language?"))