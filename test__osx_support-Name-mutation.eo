memory > xk
memory > xplatform
memory > xcv
memory > xstat
memory > xtest
memory > xopen
memory > xi
memory > xsys
memory > xtuple
memory > xos
memory > x__name__
memory > xc_output
memory > xf2
memory > xc_name
memory > xf
memory > xint
memory > x_osx_support
memory > xunittest
[] > test__osx_support
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest__override_all_archs
        memory > xtest__find_build_tool
        memory > xtest__check_for_unavailable_sdk_alternate
        memory > xsetUp
        memory > xtest__read_output
        memory > xtest__remove_original_values
        memory > xtest__remove_unsupported_archs
        memory > xtest__save_modified_value
        memory > xtest__get_system_version
        memory > xtest__check_for_unavailable_sdk
        memory > xtest__find_executable
        memory > xtest__save_modified_value_unchanged
        memory > xtest__remove_universal_flags
        memory > xtest_get_platform_osx
        memory > xtest__remove_universal_flags_alternate
        memory > xadd_expected_saved_initial_values
        memory > xtest__supports_universal_builds
        memory > xtest__find_appropriate_compiler
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((((((xsys).xplatform).xstartswith)).apply ("darwin"))) ("requires OS X"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xprog_name)) ("bogus_program_xxxx"))
                        (((unsupported)).apply (((xself).xtemp_path_dir)) ((((((xos).xpath).xabspath)).apply (((((xos).xgetcwd)).apply)))))
                        (((unsupported)).apply (((xself).xenv)) ((((((xtest).xsupport).xEnvironmentVarGuard)).apply)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xself).xenv).x__exit__)))
                        (((unsupported)).apply ((xcv)) ((((unsupported)).apply ("CFLAGS") ("LDFLAGS") ("CPPFLAGS") ("BASECFLAGS") ("BLDSHARED") ("LDSHARED") ("CC") ("CXX") ("PY_CFLAGS") ("PY_LDFLAGS") ("PY_CPPFLAGS") ("PY_CORE_CFLAGS") ("PY_CORE_LDFLAGS"))))
                          (((unsupported)).apply ((xcv)) (((xself).xenv))).if
                            bogusForceDataize.write (((((xself).xenv).xunset)).apply ((xcv)))
                xadd_expected_saved_initial_values.write
                  [xself xconfig_vars xexpected_vars]
                    seq > @
                      bogusForceDataize.write ((((xexpected_vars).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply (("_OSX_SUPPORT_INITIAL_".add (xk))) ((((unsupported)).apply ((xconfig_vars)) ((xk)))))) ((xk)) ((xconfig_vars)) (((((unsupported)).apply ((xconfig_vars)) ((xk))).neq (((unsupported)).apply ((xexpected_vars)) ((xk))))))))
                xtest__find_executable.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xenv)) ("PATH")).if
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xenv)) ("PATH"))) (((((unsupported)).apply (((xself).xenv)) ("PATH")).add ":")))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xenv)) ("PATH"))) (((((unsupported)).apply (((xself).xenv)) ("PATH")).add (((((xos).xpath).xabspath)).apply (((xself).xtemp_path_dir))))))
                        bogusForceDataize.write (((((xtest).xsupport).xunlink)).apply (((xself).xprog_name)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((x_osx_support).x_find_executable)).apply (((xself).xprog_name)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xtest).xsupport).xunlink)) (((xself).xprog_name)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xprog_name)) ("w"))) ((xf2)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("#!/bin/shn/bin/echo OKn"))
                        bogusForceDataize.write ((((xos).xchmod)).apply (((xself).xprog_name)) (((xstat).xS_IRWXU)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xprog_name)) (((((x_osx_support).x_find_executable)).apply (((xself).xprog_name)))))
                xtest__read_output.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xenv)) ("PATH")).if
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xenv)) ("PATH"))) (((((unsupported)).apply (((xself).xenv)) ("PATH")).add ":")))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xenv)) ("PATH"))) (((((unsupported)).apply (((xself).xenv)) ("PATH")).add (((((xos).xpath).xabspath)).apply (((xself).xtemp_path_dir))))))
                        bogusForceDataize.write (((((xtest).xsupport).xunlink)).apply (((xself).xprog_name)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xtest).xsupport).xunlink)) (((xself).xprog_name)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xprog_name)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("#!/bin/shn/bin/echo ExpectedOutputn"))
                        bogusForceDataize.write ((((xos).xchmod)).apply (((xself).xprog_name)) (((xstat).xS_IRWXU)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("ExpectedOutput") (((((x_osx_support).x_read_output)).apply (((xself).xprog_name)))))
                xtest__find_build_tool.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        xout.write ((((x_osx_support).x_find_build_tool)).apply ("cc"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xisfile)).apply ((xout)))) ("cc not found - check xcode-select"))
                xtest__get_system_version.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply (((((xplatform).xmac_ver)).apply)) (0)).xstartswith)).apply (((((x_osx_support).x_get_system_version)).apply)))))
                xtest__remove_original_values.write
                  [xself]
                    memory > xexpected_vars
                    memory > xcv
                    memory > xconfig_vars
                    memory > xnewvalue
                    seq > @
                      seq
                        xconfig_vars.write (((unsupported)).apply ("CC") ("gcc-test -pthreads"))
                        xexpected_vars.write (((unsupported)).apply ("CC") ("clang -pthreads"))
                        xcv.write "CC"
                        xnewvalue.write "clang -pthreads"
                        bogusForceDataize.write ((((x_osx_support).x_save_modified_value)).apply ((xconfig_vars)) ((xcv)) ((xnewvalue)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xexpected_vars)) ((xconfig_vars)))
                        bogusForceDataize.write ((((x_osx_support).x_remove_original_values)).apply ((xconfig_vars)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) ((xconfig_vars)))
                xtest__save_modified_value.write
                  [xself]
                    memory > xexpected_vars
                    memory > xcv
                    memory > xconfig_vars
                    memory > xnewvalue
                    seq > @
                      seq
                        xconfig_vars.write (((unsupported)).apply ("CC") ("gcc-test -pthreads"))
                        xexpected_vars.write (((unsupported)).apply ("CC") ("clang -pthreads"))
                        bogusForceDataize.write ((((xself).xadd_expected_saved_initial_values)).apply ((xconfig_vars)) ((xexpected_vars)))
                        xcv.write "CC"
                        xnewvalue.write "clang -pthreads"
                        bogusForceDataize.write ((((x_osx_support).x_save_modified_value)).apply ((xconfig_vars)) ((xcv)) ((xnewvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) ((xconfig_vars)))
                xtest__save_modified_value_unchanged.write
                  [xself]
                    memory > xexpected_vars
                    memory > xcv
                    memory > xconfig_vars
                    memory > xnewvalue
                    seq > @
                      seq
                        xconfig_vars.write (((unsupported)).apply ("CC") ("gcc-test -pthreads"))
                        xexpected_vars.write ((((xconfig_vars).xcopy)).apply)
                        xcv.write "CC"
                        xnewvalue.write "gcc-test -pthreads"
                        bogusForceDataize.write ((((x_osx_support).x_save_modified_value)).apply ((xconfig_vars)) ((xcv)) ((xnewvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) ((xconfig_vars)))
                xtest__supports_universal_builds.write
                  [xself]
                    memory > xmac_ver_tuple
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmac_ver_tuple.write (((xtuple)).apply ((((unsupported)).apply ((((xint)).apply ((xi)))) ((xi)) ((((unsupported)).apply (((((((unsupported)).apply (((((xplatform).xmac_ver)).apply)) (0)).xsplit)).apply ("."))) ((((unsupported)).apply (0) (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmac_ver_tuple).geq (((unsupported)).apply (10) (4)))) (((((x_osx_support).x_supports_universal_builds)).apply)))
                xtest__find_appropriate_compiler.write
                  [xself]
                    memory > xexpected_vars
                    memory > xsuffix
                    memory > xconfig_vars
                    memory > xcompilers
                    seq > @
                      seq
                        xcompilers.write (((unsupported)).apply ((((unsupported)).apply ("gcc-test") ("i686-apple-darwin11-llvm-gcc-4.2"))) ((((unsupported)).apply ("clang") ("clang version 3.1"))))
                        xconfig_vars.write (((unsupported)).apply ("CC") ("gcc-test -pthreads") ("CXX") ("cc++-test") ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386  ") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I. -isysroot /Developer/SDKs/MacOSX10.4u.sdk") ("BLDSHARED") ("gcc-test -bundle -arch ppc -arch i386 -g") ("LDSHARED") ("gcc-test -bundle -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g"))
                        xexpected_vars.write (((unsupported)).apply ("CC") ("clang -pthreads") ("CXX") ("clang++") ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386  ") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I. -isysroot /Developer/SDKs/MacOSX10.4u.sdk") ("BLDSHARED") ("clang -bundle -arch ppc -arch i386 -g") ("LDSHARED") ("clang -bundle -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g"))
                        bogusForceDataize.write ((((xself).xadd_expected_saved_initial_values)).apply ((xconfig_vars)) ((xexpected_vars)))
                        xsuffix.write ((((unsupported)).apply (((xself).xenv)) ("PATH")).if (":".add (((unsupported)).apply (((xself).xenv)) ("PATH"))) "")
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xenv)) ("PATH"))) (((((((xos).xpath).xabspath)).apply (((xself).xtemp_path_dir))).add (xsuffix))))
                        (((unsupported)).apply ((((unsupported)).apply ((xc_name)) ((xc_output)))) ((xcompilers)))
                          seq
                            bogusForceDataize.write (((((xtest).xsupport).xunlink)).apply ((xc_name)))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xtest).xsupport).xunlink)) ((xc_name)))
                            (((unsupported)).apply ((((xopen)).apply ((xc_name)) ("w"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)).apply (("#!/bin/shn/bin/echo ".add (xc_output))))
                            bogusForceDataize.write ((((xos).xchmod)).apply ((xc_name)) (((xstat).xS_IRWXU)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) (((((x_osx_support).x_find_appropriate_compiler)).apply ((xconfig_vars)))))
                xtest__remove_universal_flags.write
                  [xself]
                    memory > xexpected_vars
                    memory > xconfig_vars
                    seq > @
                      seq
                        xconfig_vars.write (((unsupported)).apply ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386  ") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I. -isysroot /Developer/SDKs/MacOSX10.4u.sdk") ("BLDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -g") ("LDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g"))
                        xexpected_vars.write (((unsupported)).apply ("CFLAGS") ("-fno-strict-aliasing  -g -O3    ") ("LDFLAGS") ("    -g") ("CPPFLAGS") ("-I.  ") ("BLDSHARED") ("gcc-4.0 -bundle    -g") ("LDSHARED") ("gcc-4.0 -bundle      -g"))
                        bogusForceDataize.write ((((xself).xadd_expected_saved_initial_values)).apply ((xconfig_vars)) ((xexpected_vars)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) (((((x_osx_support).x_remove_universal_flags)).apply ((xconfig_vars)))))
                xtest__remove_universal_flags_alternate.write
                  [xself]
                    memory > xexpected_vars
                    memory > xconfig_vars
                    seq > @
                      seq
                        xconfig_vars.write (((unsupported)).apply ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386  ") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I. -isysroot/Developer/SDKs/MacOSX10.4u.sdk") ("BLDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -g") ("LDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -isysroot/Developer/SDKs/MacOSX10.4u.sdk -g"))
                        xexpected_vars.write (((unsupported)).apply ("CFLAGS") ("-fno-strict-aliasing  -g -O3    ") ("LDFLAGS") ("    -g") ("CPPFLAGS") ("-I.  ") ("BLDSHARED") ("gcc-4.0 -bundle    -g") ("LDSHARED") ("gcc-4.0 -bundle      -g"))
                        bogusForceDataize.write ((((xself).xadd_expected_saved_initial_values)).apply ((xconfig_vars)) ((xexpected_vars)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) (((((x_osx_support).x_remove_universal_flags)).apply ((xconfig_vars)))))
                xtest__remove_unsupported_archs.write
                  [xself]
                    memory > xc_name
                    memory > xexpected_vars
                    memory > xsuffix
                    memory > xconfig_vars
                    seq > @
                      seq
                        xconfig_vars.write (((unsupported)).apply ("CC") ("clang") ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386  ") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I. -isysroot /Developer/SDKs/MacOSX10.4u.sdk") ("BLDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -g") ("LDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g"))
                        xexpected_vars.write (((unsupported)).apply ("CC") ("clang") ("CFLAGS") ("-fno-strict-aliasing  -g -O3  -arch i386  ") ("LDFLAGS") (" -arch i386   -g") ("CPPFLAGS") ("-I. -isysroot /Developer/SDKs/MacOSX10.4u.sdk") ("BLDSHARED") ("gcc-4.0 -bundle   -arch i386 -g") ("LDSHARED") ("gcc-4.0 -bundle   -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g"))
                        bogusForceDataize.write ((((xself).xadd_expected_saved_initial_values)).apply ((xconfig_vars)) ((xexpected_vars)))
                        xsuffix.write ((((unsupported)).apply (((xself).xenv)) ("PATH")).if (":".add (((unsupported)).apply (((xself).xenv)) ("PATH"))) "")
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xenv)) ("PATH"))) (((((((xos).xpath).xabspath)).apply (((xself).xtemp_path_dir))).add (xsuffix))))
                        xc_name.write "clang"
                        bogusForceDataize.write (((((xtest).xsupport).xunlink)).apply ((xc_name)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xtest).xsupport).xunlink)) ((xc_name)))
                        (((unsupported)).apply ((((xopen)).apply ((xc_name)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("#!/bin/shnexit 255"))
                        bogusForceDataize.write ((((xos).xchmod)).apply ((xc_name)) (((xstat).xS_IRWXU)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) (((((x_osx_support).x_remove_unsupported_archs)).apply ((xconfig_vars)))))
                xtest__override_all_archs.write
                  [xself]
                    memory > xexpected_vars
                    memory > xconfig_vars
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xenv)) ("ARCHFLAGS"))) ("-arch x86_64"))
                        xconfig_vars.write (((unsupported)).apply ("CC") ("clang") ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386  ") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I. -isysroot /Developer/SDKs/MacOSX10.4u.sdk") ("BLDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -g") ("LDSHARED") ("gcc-4.0 -bundle -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g"))
                        xexpected_vars.write (((unsupported)).apply ("CC") ("clang") ("CFLAGS") ("-fno-strict-aliasing  -g -O3     -arch x86_64") ("LDFLAGS") ("    -g -arch x86_64") ("CPPFLAGS") ("-I. -isysroot /Developer/SDKs/MacOSX10.4u.sdk") ("BLDSHARED") ("gcc-4.0 -bundle    -g -arch x86_64") ("LDSHARED") ("gcc-4.0 -bundle   -isysroot /Developer/SDKs/MacOSX10.4u.sdk -g -arch x86_64"))
                        bogusForceDataize.write ((((xself).xadd_expected_saved_initial_values)).apply ((xconfig_vars)) ((xexpected_vars)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) (((((x_osx_support).x_override_all_archs)).apply ((xconfig_vars)))))
                xtest__check_for_unavailable_sdk.write
                  [xself]
                    memory > xexpected_vars
                    memory > xconfig_vars
                    seq > @
                      seq
                        xconfig_vars.write (((unsupported)).apply ("CC") ("clang") ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386  -isysroot /Developer/SDKs/MacOSX10.1.sdk") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I. -isysroot /Developer/SDKs/MacOSX10.1.sdk") ("BLDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -g") ("LDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.1.sdk -g"))
                        xexpected_vars.write (((unsupported)).apply ("CC") ("clang") ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386   ") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I.  ") ("BLDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -g") ("LDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386  -g"))
                        bogusForceDataize.write ((((xself).xadd_expected_saved_initial_values)).apply ((xconfig_vars)) ((xexpected_vars)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) (((((x_osx_support).x_check_for_unavailable_sdk)).apply ((xconfig_vars)))))
                xtest__check_for_unavailable_sdk_alternate.write
                  [xself]
                    memory > xexpected_vars
                    memory > xconfig_vars
                    seq > @
                      seq
                        xconfig_vars.write (((unsupported)).apply ("CC") ("clang") ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386  -isysroot/Developer/SDKs/MacOSX10.1.sdk") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I. -isysroot/Developer/SDKs/MacOSX10.1.sdk") ("BLDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -g") ("LDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -isysroot/Developer/SDKs/MacOSX10.1.sdk -g"))
                        xexpected_vars.write (((unsupported)).apply ("CC") ("clang") ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386   ") ("LDFLAGS") ("-arch ppc -arch i386   -g") ("CPPFLAGS") ("-I.  ") ("BLDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386 -g") ("LDSHARED") ("gcc-4.0 -bundle  -arch ppc -arch i386  -g"))
                        bogusForceDataize.write ((((xself).xadd_expected_saved_initial_values)).apply ((xconfig_vars)) ((xexpected_vars)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected_vars)) (((((x_osx_support).x_check_for_unavailable_sdk)).apply ((xconfig_vars)))))
                xtest_get_platform_osx.write
                  [xself]
                    memory > xresult
                    memory > xconfig_vars
                    seq > @
                      seq
                        xconfig_vars.write (((unsupported)).apply ("CFLAGS") ("-fno-strict-aliasing  -g -O3 -arch ppc -arch i386  -isysroot /Developer/SDKs/MacOSX10.1.sdk") ("MACOSX_DEPLOYMENT_TARGET") ("10.6"))
                        xresult.write ((((x_osx_support).xget_platform_osx)).apply ((xconfig_vars)) (" ") (" ") (" "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("macosx") ("10.6") ("fat"))) ((xresult)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)