memory > xstr
memory > xother
memory > xcreator
memory > xobject
memory > xcm
memory > xscript_helper
memory > xthreading
memory > xinterp
memory > xuseactions
memory > xAttributeError
memory > xCheese
memory > xSubBytes
memory > xexpected
memory > xpickle
memory > xRuntimeError
memory > xforce
memory > xscript
memory > xValueError
memory > xfile
memory > xexec
memory > xcombinations
memory > xrpipe
memory > xrange
memory > xChannelState
memory > x_
memory > xcaught
memory > xextra
memory > xNotImplementedError
memory > xKeyError
memory > xchan
memory > xtempfile
memory > xnamedtuple
memory > xrecv
memory > xmain
memory > xInt
memory > xopen
memory > xrecvop
memory > xdedent
memory > xprint
memory > xTestBase
memory > xtype
memory > xw
memory > xFSFixture
memory > xset
memory > xrepr
memory > xint
memory > xfix
memory > xException
memory > xr
memory > xOverflowError
memory > xtime
memory > xinterp3
memory > xend
memory > xsendop
memory > xi
memory > xsets
memory > xsupport
memory > xsys
memory > xsend
memory > xsuper
memory > xbool
memory > xbytes
memory > xNotImplemented
memory > xinterp4
memory > xaction
memory > xfloat
memory > xspipe
memory > xactions
memory > xos
memory > xdirname
memory > xitertools
memory > xobj
memory > xInterpreter
memory > xid
memory > xSyntaxError
memory > xshared
memory > xunittest
memory > xpostactions
memory > xSystemExit
memory > xChannelCloseFixture
memory > xChannelAction
memory > xisinstance
memory > xproc
memory > x_run
memory > xlen
memory > xdict
memory > xcloseactions
memory > xTypeError
memory > x__name__
[] > test__xxsubinterpreters
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_prep_interpreter
        memory > xsetUp
        memory > xtest_create_thread
        memory > xtest_send_not_found
        memory > xtest_from_current
        memory > xclean_up_channels
        memory > xtest_with_int
        memory > xtest_close_multiple_users
        memory > xexpect_channel_closed
        memory > xtest_in_thread
        memory > xtest_coerce_id
        memory > xtest_bytes
        memory > xtest_error_id
        memory > xtest_close_recv_with_unused_items_unforced
        memory > xtest_after_destroy_all
        memory > xtest_unique_id
        memory > xtest_close_empty
        memory > xtest_create_cid
        memory > xcid
        memory > xtest_recv_not_found
        memory > xtest_multiple_users
        memory > xtest_close_used_multiple_times_by_single_user
        memory > xtest_shared_overwrites_default_vars
        memory > xtest_used_multiple_times_by_single_user
        memory > xtest_types
        memory > xtest_bad_kwargs
        memory > xtest_close
        memory > xtest_multiple_times
        memory > xtest_send_recv_main
        memory > xtest_ids_global
        memory > xrun_action
        memory > xdecr
        memory > xtest_not_shareable
        memory > xtest_force_close
        memory > xtest_failure
        memory > xtest_send_recv_different_interpreters
        memory > xfs
        memory > xtest_in_subinterpreter
        memory > xtest_all
        memory > xtest_close_if_unassociated
        memory > xtest_bad_id
        memory > xiter_action_sets
        memory > xtest_does_not_exist
        memory > xclean_up
        memory > xinterpreters
        memory > xtest_send_recv_same_interpreter
        memory > xtest_from_other_thread
        memory > xclose
        memory > xfrom_raw
        memory > x_assert_closed_in_interp
        memory > xtest_main
        memory > xtest_repr
        memory > xtest_after_destroying
        memory > xtest_sys_exit
        memory > xtest_singletons
        memory > xresolve_end
        memory > xtest_close_both_with_unused_items_forced
        memory > x_iter_use_action_sets
        memory > x_assert_values
        memory > xprep_interpreter
        memory > x_close
        memory > x_run_output
        memory > xFILENAME
        memory > xtest_with_shared
        memory > xtest_non_shareable_int
        memory > xtest_from_main
        memory > x_skim_close_tests
        memory > x_running
        memory > xtest_close_never_used
        memory > xtest_after_creating
        memory > xtest_from_subinterpreter
        memory > xtest_with_unused_items
        memory > xtest_execution_namespace_is_main
        memory > xtest_recv_empty
        memory > xincr
        memory > xrun_interp_threaded
        memory > xtest_no_kwargs
        memory > xtest_close_single_user
        memory > x_get_interpreter
        memory > xtest_fork
        memory > xtest_strs
        memory > xtest_success
        memory > xget_interpreter
        memory > x_assert_closed
        memory > xtest_SystemExit
        memory > xclean_up_interpreters
        memory > xtest_still_running
        memory > xrecord_action
        memory > x_iter_post_close_action_sets
        memory > xtest_close_multiple_times
        memory > xtest_send_recv_different_threads
        memory > xtest_send_recv_different_interpreters_and_threads
        memory > xresolve_interp
        memory > xtest_str
        memory > xtest_in_main
        memory > xtest_close_recv_with_unused_items_forced
        memory > xtest_by_unassociated_interp
        memory > x_run_action
        memory > xtest_close_both_with_unused_items_unforced
        memory > xtest_int
        memory > xtest_close_send_with_unused_items_unforced
        memory > xQUICK
        memory > x_captured_script
        memory > xtest_still_running_at_exit
        memory > x_run_interp
        memory > xtest_one
        memory > xtest_invalid_syntax
        memory > xtest_main_reused
        memory > xexpect_closed_error
        memory > xtest_initial
        memory > x__init__
        memory > xtest_close_by_unassociated_interp
        memory > xtest_after_destroy_some
        memory > xtest_from_sibling
        memory > x_iter_close_action_sets
        memory > xtest_already_running
        memory > xtest_in_threaded_subinterpreter
        memory > xtest_single_user
        memory > xrun_interp
        memory > xiter_fixtures
        memory > xtest_sequential_ids
        memory > xtest_run_string_arg_resolved
        memory > xtest_close_send_with_unused_items_forced
        memory > xtest_with_kwargs
        memory > x_iter_close_tests
        memory > xtearDown
        memory > xtest_subinterpreter
        memory > xSCRIPT
        memory > xtest_run_string_arg_unresolved
        memory > xassert_run_failed
        memory > xtest_shared_overwrites
        memory > xtest_never_used
        memory > xtest_default_kwargs
        memory > xpowerset
        memory > x__new__
        memory > xtest_equality
        memory > xrun_actions
        memory > xtest_partially
        memory > xtest_close_defaults_with_unused_items
        memory > x_new_channel
        memory > xstate
        memory > xtest_bad_script
        memory > xtest_already_destroyed
        memory > xtest_default_shareables
        memory > xtest_bytes_for_script
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xinterpreters.write ((((xsupport).ximport_module)).apply ("_xxsubinterpreters"))
            xpowerset.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((((xitertools).xchain).xfrom_iterable)).apply ((((unsupported)).apply ((((xcombinations)).apply ((xsets)) ((xr)))) ((xr)) ((((xrange)).apply (((((xlen)).apply ((xsets))).add 1)))))))))
            x_captured_script.write
              [xscript]
                memory > xindented
                memory > xwrapped
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                    xindented.write ((((xscript).xreplace)).apply ("n") ("n                "))
                    xwrapped.write (((xdedent)).apply ((((unsupported)).apply)))
                    (((unsupported)).apply ((((unsupported)).apply ((xwrapped)) ((((xopen)).apply ((xr)))))))
            x_run_output.write
              [xinterp xrequest xshared]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xscript)) ((xrpipe)))) ((((x_captured_script)).apply ((xrequest)))))
                    (((unsupported)).apply ((xrpipe)))
                      seq
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xinterp)) ((xscript)) ((xshared)))
                        (((unsupported)).apply (((((xrpipe).xread)).apply)))
            x_running.write
              [xinterp]
                memory > xt
                memory > xrun
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                    xrun.write
                      []
                        seq > @
                          bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xinterp)) ((((xdedent)).apply ((((unsupported)).apply)))))
                    xt.write (((unsupported)).apply (((xthreading).xThread)) ((xrun)))
                    bogusForceDataize.write ((((xt).xstart)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xopen)).apply ((xw)) ("w"))) ((xspipe)))
                      bogusForceDataize.write ((((xspipe).xwrite)).apply ("done"))
                    bogusForceDataize.write ((((xt).xjoin)).apply)
            xrun_interp.write
              [xid xsource]
                seq > @
                  (((unsupported)).apply)
                    bogusForceDataize.write (((x_run_interp)).apply ((xid)) ((xsource)) ((xshared)))
            x_run_interp.write
              [xid xsource xshared x_mainns]
                memory > xmain
                seq > @
                  (((unsupported)).apply)
                    xsource.write (((xdedent)).apply ((xsource)))
                    xmain.write ((((xinterpreters).xget_main)).apply)
                    ((xmain).eq (xid)).if
                      seq
                        (((((xinterpreters).xget_current)).apply).neq (xmain)).if
                          (((unsupported)).apply ((xRuntimeError)))
                        bogusForceDataize.write (((xexec)).apply ((xsource)) ((x_mainns)))
                      bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid)) ((xsource)) ((xshared)))
            xrun_interp_threaded.write
              [xid xsource]
                memory > xt
                memory > xrun
                seq > @
                  (((unsupported)).apply)
                    xrun.write
                      []
                        seq > @
                          bogusForceDataize.write (((x_run)).apply ((xid)) ((xsource)) ((xshared)))
                    xt.write (((unsupported)).apply (((xthreading).xThread)) ((xrun)))
                    bogusForceDataize.write ((((xt).xstart)).apply)
                    bogusForceDataize.write ((((xt).xjoin)).apply)
            (((unsupported)).apply ((((xnamedtuple)).apply ("Interpreter") ("name id"))))
              seq
                xfrom_raw.write
                  [xcls xraw]
                    seq > @
                      (((unsupported)).apply)
                        (((xisinstance)).apply ((xraw)) ((xcls))).if
                          (((unsupported)).apply ((xraw)))
                          (((xisinstance)).apply ((xraw)) ((xstr))).if
                            (((unsupported)).apply ((((xcls)).apply ((xraw)))))
                            (((unsupported)).apply ((xNotImplementedError)))
                x__new__.write
                  [xcls xname xid]
                    memory > xself
                    memory > xmain
                    seq > @
                      (((unsupported)).apply)
                        xmain.write ((((xinterpreters).xget_main)).apply)
                        ((xid).eq (xmain)).if
                          seq
                            ((xname).not).if
                              xname.write "main"
                              ((xname).neq "main").if
                                (((unsupported)).apply ((((xValueError)).apply (((("name mismatch (expected \"main\", got \"{}\")".xformat)).apply ((xname)))))))
                            xid.write (xmain)
                          (((unsupported)).apply ((xid)) ("None: is there a None literal in the EO language?")).if
                            seq
                              ((xname).not).if
                                xname.write "interp"
                                ((xname).eq "main").if
                                  (((unsupported)).apply ((((xValueError)).apply ("name mismatch (unexpected \"main\")"))))
                              ((((xisinstance)).apply ((xid)) (((xinterpreters).xInterpreterID))).not).if
                                xid.write ((((xinterpreters).xInterpreterID)).apply ((xid)))
                            (((xname).not).or ((xname).eq "main")).if
                              seq
                                xname.write "main"
                                xid.write (xmain)
                              xid.write ((((xinterpreters).xcreate)).apply)
                        xself.write ((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xname)) ((xid)))
                        (((unsupported)).apply ((xself)))
            xexpect_channel_closed.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply (((xinterpreters).xChannelClosedError)))
                      (((unsupported)).apply)
                      (((unsupported)).apply (FALSE) ("channel not closed"))
            (((unsupported)).apply ((((xnamedtuple)).apply ("ChannelAction") ("action end interp"))))
              seq
                x__new__.write
                  [xcls xaction xend xinterp]
                    memory > xself
                    seq > @
                      (((unsupported)).apply)
                        ((xend).not).if
                          xend.write "both"
                        ((xinterp).not).if
                          xinterp.write "main"
                        xself.write ((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xaction)) ((xend)) ((xinterp)))
                        (((unsupported)).apply ((xself)))
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((xself).xaction).eq "use").if
                          (((unsupported)).apply (((xself).xend)) ((((unsupported)).apply ("same") ("opposite") ("send") ("recv")))).if
                            (((unsupported)).apply ((((xValueError)).apply (((xself).xend)))))
                          (((unsupported)).apply (((xself).xaction)) ((((unsupported)).apply ("close") ("force-close")))).if
                            (((unsupported)).apply (((xself).xend)) ((((unsupported)).apply ("both") ("same") ("opposite") ("send") ("recv")))).if
                              (((unsupported)).apply ((((xValueError)).apply (((xself).xend)))))
                            (((unsupported)).apply ((((xValueError)).apply (((xself).xaction)))))
                        (((unsupported)).apply (((xself).xinterp)) ((((unsupported)).apply ("main") ("same") ("other") ("extra")))).if
                          (((unsupported)).apply ((((xValueError)).apply (((xself).xinterp)))))
                xresolve_end.write
                  [xself xend]
                    seq > @
                      (((xself).xend).eq "same").if
                        (((unsupported)).apply ((xend)))
                        (((xself).xend).eq "opposite").if
                          (((unsupported)).apply ((((xend).eq "send").if "recv" "send")))
                          (((unsupported)).apply (((xself).xend)))
                xresolve_interp.write
                  [xself xinterp xother xextra]
                    seq > @
                      (((xself).xinterp).eq "same").if
                        (((unsupported)).apply ((xinterp)))
                        (((xself).xinterp).eq "other").if
                          seq
                            (((unsupported)).apply ((xother)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((xRuntimeError)))
                            (((unsupported)).apply ((xother)))
                          (((xself).xinterp).eq "extra").if
                            seq
                              (((unsupported)).apply ((xextra)) ("None: is there a None literal in the EO language?")).if
                                (((unsupported)).apply ((xRuntimeError)))
                              (((unsupported)).apply ((xextra)))
                            (((xself).xinterp).eq "main").if
                              (((xinterp).xname).eq "main").if
                                (((unsupported)).apply ((xinterp)))
                                ((xother).and (((xother).xname).eq "main")).if
                                  (((unsupported)).apply ((xother)))
                                  (((unsupported)).apply ((xRuntimeError)))
            (((unsupported)).apply ((((xnamedtuple)).apply ("ChannelState") ("pending closed"))))
              seq
                x__new__.write
                  [xcls xpending xclosed]
                    memory > xself
                    seq > @
                      (((unsupported)).apply)
                        xself.write ((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xpending)) ((xclosed)))
                        (((unsupported)).apply ((xself)))
                xincr.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xtype)).apply ((xself)))) ((((xself).xpending).add 1)) (((xself).xclosed)))))
                xdecr.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xtype)).apply ((xself)))) ((((xself).xpending).sub 1)) (((xself).xclosed)))))
                xclose.write
                  [xself xforce]
                    seq > @
                      (((unsupported)).apply)
                        ((xself).xclosed).if
                          (((xforce).not).or (((xself).xpending).eq 0)).if
                            (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xtype)).apply ((xself)))) (((xforce).if 0 ((xself).xpending))) (TRUE))))
            xrun_action.write
              [xcid xaction xend xstate xhideclosed]
                memory > xexpectfail
                memory > xresult
                seq > @
                  (((unsupported)).apply)
                    ((xstate).xclosed).if
                      ((((xaction).eq "use").and ((xend).eq "recv")).and ((xstate).xpending)).if
                        xexpectfail.write FALSE
                        xexpectfail.write TRUE
                      xexpectfail.write FALSE
                    (((unsupported)).apply (((xinterpreters).xChannelClosedError)))
                      xresult.write (((x_run_action)).apply ((xcid)) ((xaction)) ((xend)) ((xstate)))
                      seq
                        (((xhideclosed).not).and ((xexpectfail).not)).if
                          (((unsupported)).apply)
                        xresult.write ((((xstate).xclose)).apply)
                      (xexpectfail).if
                        (((unsupported)).apply ((((unsupported)).apply)))
                    (((unsupported)).apply ((xresult)))
            x_run_action.write
              [xcid xaction xend xstate]
                memory > xkwargs
                seq > @
                  ((xaction).eq "use").if
                    ((xend).eq "send").if
                      seq
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        (((unsupported)).apply (((((xstate).xincr)).apply)))
                      ((xend).eq "recv").if
                        (((xstate).xpending).not).if
                          (((unsupported)).apply (((xinterpreters).xChannelEmptyError)))
                            bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                            (((unsupported)).apply ((xstate)))
                            (((unsupported)).apply ((((xException)).apply ("expected ChannelEmptyError"))))
                          seq
                            bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                            (((unsupported)).apply (((((xstate).xdecr)).apply)))
                        (((unsupported)).apply ((((xValueError)).apply ((xend)))))
                    ((xaction).eq "close").if
                      seq
                        xkwargs.write (((unsupported)).apply)
                        (((unsupported)).apply ((xend)) ((((unsupported)).apply ("recv") ("send")))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((xend)))) (TRUE))
                        bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply ((xcid)) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((((xstate).xclose)).apply)))
                      ((xaction).eq "force-close").if
                        seq
                          xkwargs.write (((unsupported)).apply ("force") (TRUE))
                          (((unsupported)).apply ((xend)) ((((unsupported)).apply ("recv") ("send")))).if
                            (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((xend)))) (TRUE))
                          bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply ((xcid)) ((((unsupported)).apply ((xkwargs)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xstate).xclose)) (TRUE))))
                        (((unsupported)).apply ((((xValueError)).apply ((xaction)))))
            xclean_up_interpreters.write
              []
                seq > @
                  (((unsupported)).apply ((xid)) (((((xinterpreters).xlist_all)).apply)))
                    seq
                      ((xid).eq 0).if
                        (((unsupported)).apply)
                      (((unsupported)).apply ((xRuntimeError)))
                        bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid)))
            xclean_up_channels.write
              []
                seq > @
                  (((unsupported)).apply ((xcid)) (((((xinterpreters).xchannel_list_all)).apply)))
                    (((unsupported)).apply (((xinterpreters).xChannelNotFoundError)))
                      bogusForceDataize.write ((((xinterpreters).xchannel_destroy)).apply ((xcid)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtearDown.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write (((xclean_up_interpreters)).apply)
                      bogusForceDataize.write (((xclean_up_channels)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_default_shareables.write
                  [xself]
                    memory > xshareables
                    seq > @
                      seq
                        xshareables.write (((unsupported)).apply ("None: is there a None literal in the EO language?") ("spam") ("spam") (10) ((10.neg)))
                        (((unsupported)).apply ((xobj)) ((xshareables)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xobj)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xinterpreters).xis_shareable)).apply ((xobj)))))
                xtest_not_shareable.write
                  [xself]
                    memory > x__str__
                    memory > x__init__
                    memory > xnot_shareables
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xname]
                                seq > @
                                  (((unsupported)).apply (((xself).xname)) ((xname)))
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xname)))
                        (((unsupported)).apply ((xbytes)))
                          unsupported
                        xnot_shareables.write (((unsupported)).apply (TRUE) (FALSE) ((xNotImplemented)) ((((unsupported)).apply)) ((xtype)) ((xobject)) ((((xobject)).apply)) ((((xException)).apply)) (100.0) ((xCheese)) ((((xCheese)).apply ("Wensleydale"))) ((((xSubBytes)).apply ("spam"))))
                        (((unsupported)).apply ((xobj)) ((xnot_shareables)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((xrepr)).apply ((xobj)))))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xinterpreters).xis_shareable)).apply ((xobj)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply (((xself).xcid)) (((((xinterpreters).xchannel_create)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xinterpreters).xchannel_destroy)).apply (((xself).xcid)))
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                x_assert_values.write
                  [xself xvalues]
                    memory > xgot
                    seq > @
                      (((unsupported)).apply ((xobj)) ((xvalues)))
                        (((unsupported)).apply (((((xself).xsubTest)).apply ((xobj)))))
                          seq
                            bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply (((xself).xcid)) ((xobj)))
                            xgot.write ((((xinterpreters).xchannel_recv)).apply (((xself).xcid)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xobj)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xgot)))) ((((xtype)).apply ((xobj)))))
                xtest_singletons.write
                  [xself]
                    memory > xgot
                    seq > @
                      (((unsupported)).apply ((xobj)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply (((((xself).xsubTest)).apply ((xobj)))))
                          seq
                            bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply (((xself).xcid)) ((xobj)))
                            xgot.write ((((xinterpreters).xchannel_recv)).apply (((xself).xcid)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xgot)) ((xobj)))
                xtest_types.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_assert_values)).apply ((((unsupported)).apply ("spam") (9999) (((xself).xcid)))))
                xtest_bytes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_assert_values)).apply ((((unsupported)).apply ((((unsupported)).apply (((xi).xto_bytes)) (2) ("little") (TRUE))) ((xi)) ((((xrange)).apply ((1.neg)) (258))))))
                xtest_strs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_assert_values)).apply ((((unsupported)).apply ("hello world") ("你好世界") (""))))
                xtest_int.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_assert_values)).apply (((((xitertools).xchain)).apply ((((xrange)).apply ((1.neg)) (258))) ((((unsupported)).apply (((xsys).xmaxsize)) (((((xsys).xmaxsize).neg).sub 1)))))))
                xtest_non_shareable_int.write
                  [xself]
                    memory > xints
                    seq > @
                      seq
                        xints.write (((unsupported)).apply ((((xsys).xmaxsize).add 1)) (((((xsys).xmaxsize).neg).sub 2)) ((((unsupported)).apply (2) (1000))))
                        (((unsupported)).apply ((xi)) ((xints)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xi)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOverflowError)))))
                              bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply (((xself).xcid)) ((xi)))
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_initial.write
                  [xself]
                    memory > xids
                    memory > xmain
                    seq > @
                      seq
                        xmain.write ((((xinterpreters).xget_main)).apply)
                        xids.write ((((xinterpreters).xlist_all)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xids)) ((((unsupported)).apply ((xmain)))))
                xtest_after_creating.write
                  [xself]
                    memory > xfirst
                    memory > xids
                    memory > xmain
                    memory > xsecond
                    seq > @
                      seq
                        xmain.write ((((xinterpreters).xget_main)).apply)
                        xfirst.write ((((xinterpreters).xcreate)).apply)
                        xsecond.write ((((xinterpreters).xcreate)).apply)
                        xids.write ((((xinterpreters).xlist_all)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xids)) ((((unsupported)).apply ((xmain)) ((xfirst)) ((xsecond)))))
                xtest_after_destroying.write
                  [xself]
                    memory > xfirst
                    memory > xids
                    memory > xmain
                    memory > xsecond
                    seq > @
                      seq
                        xmain.write ((((xinterpreters).xget_main)).apply)
                        xfirst.write ((((xinterpreters).xcreate)).apply)
                        xsecond.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xfirst)))
                        xids.write ((((xinterpreters).xlist_all)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xids)) ((((unsupported)).apply ((xmain)) ((xsecond)))))
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_main.write
                  [xself]
                    memory > xcur
                    memory > xmain
                    seq > @
                      seq
                        xmain.write ((((xinterpreters).xget_main)).apply)
                        xcur.write ((((xinterpreters).xget_current)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcur)) ((xmain)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcur)) (((xinterpreters).xInterpreterID)))
                xtest_subinterpreter.write
                  [xself]
                    memory > xcur
                    memory > xout
                    memory > xmain
                    memory > xinterp
                    seq > @
                      seq
                        xmain.write ((((xinterpreters).xget_main)).apply)
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xinterp)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xcur.write (((xint)).apply (((((xout).xstrip)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xexpected)))) (((((xinterpreters).xlist_all)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcur)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xcur)) ((xmain)))
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_from_main.write
                  [xself]
                    memory > xmain
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xexpected)))) (((((xinterpreters).xlist_all)).apply)))
                        xmain.write ((((xinterpreters).xget_main)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmain)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmain)) (((xinterpreters).xInterpreterID)))
                xtest_from_subinterpreter.write
                  [xself]
                    memory > xout
                    memory > xmain
                    memory > xinterp
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xexpected)))) (((((xinterpreters).xlist_all)).apply)))
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xinterp)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xmain.write (((xint)).apply (((((xout).xstrip)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmain)) ((xexpected)))
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_main.write
                  [xself]
                    memory > xmain
                    seq > @
                      seq
                        xmain.write ((((xinterpreters).xget_main)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xinterpreters).xis_running)).apply ((xmain)))))
                xtest_subinterpreter.write
                  [xself]
                    memory > xinterp
                    seq > @
                      seq
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xinterpreters).xis_running)).apply ((xinterp)))))
                        (((unsupported)).apply ((((x_running)).apply ((xinterp)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xinterpreters).xis_running)).apply ((xinterp)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xinterpreters).xis_running)).apply ((xinterp)))))
                xtest_from_subinterpreter.write
                  [xself]
                    memory > xout
                    memory > xinterp
                    seq > @
                      seq
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xinterp)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xstrip)).apply)) ("True"))
                xtest_already_destroyed.write
                  [xself]
                    memory > xinterp
                    seq > @
                      seq
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xinterp)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          bogusForceDataize.write ((((xinterpreters).xis_running)).apply ((xinterp)))
                xtest_does_not_exist.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                        bogusForceDataize.write ((((xinterpreters).xis_running)).apply (1000000))
                xtest_bad_id.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                        bogusForceDataize.write ((((xinterpreters).xis_running)).apply ((1.neg)))
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_with_int.write
                  [xself]
                    memory > xid
                    seq > @
                      seq
                        xid.write (((unsupported)).apply (((xinterpreters).xInterpreterID)) (10) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((xid)))) (10))
                xtest_coerce_id.write
                  [xself]
                    memory > x__index__
                    memory > xid
                    seq > @
                      seq
                        (((unsupported)).apply ((xstr)))
                          x__index__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (11))
                        xid.write (((unsupported)).apply (((xinterpreters).xInterpreterID)) ((((xInt)).apply)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((xid)))) (10))
                xtest_bad_id.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xinterpreters).xInterpreterID)) ((((xobject)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xinterpreters).xInterpreterID)) (10.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xinterpreters).xInterpreterID)) ("10"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xinterpreters).xInterpreterID)) ("10"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xinterpreters).xInterpreterID)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xinterpreters).xInterpreterID)) ((((unsupported)).apply (2) (64))))
                xtest_does_not_exist.write
                  [xself]
                    memory > xid
                    seq > @
                      seq
                        xid.write ((((xinterpreters).xchannel_create)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          bogusForceDataize.write ((((xinterpreters).xInterpreterID)).apply (((((xint)).apply ((xid))).add 1)))
                xtest_str.write
                  [xself]
                    memory > xid
                    seq > @
                      seq
                        xid.write (((unsupported)).apply (((xinterpreters).xInterpreterID)) (10) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xid)))) ("10"))
                xtest_repr.write
                  [xself]
                    memory > xid
                    seq > @
                      seq
                        xid.write (((unsupported)).apply (((xinterpreters).xInterpreterID)) (10) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xid)))) ("InterpreterID(10)"))
                xtest_equality.write
                  [xself]
                    memory > xid2
                    memory > xid1
                    memory > xid3
                    seq > @
                      seq
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xid2.write ((((xinterpreters).xInterpreterID)).apply ((((xint)).apply ((xid1)))))
                        xid3.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xid1).eq (xid1))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xid1).eq (xid2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xid1).eq (((xint)).apply ((xid1))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xint)).apply ((xid1))).eq (xid1))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xid1).eq (((xfloat)).apply ((((xint)).apply ((xid1))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfloat)).apply ((((xint)).apply ((xid1))))).eq (xid1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xid1).eq ((((xfloat)).apply ((((xint)).apply ((xid1))))).add 0.1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xid1).eq (((xstr)).apply ((((xint)).apply ((xid1))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xid1).eq (((unsupported)).apply (2) (1000)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xid1).eq (((xfloat)).apply ("inf")))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xid1).eq "spam")))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xid1).eq (xid3))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xid1).neq (xid1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xid1).neq (xid2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xid1).neq (xid3))))
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_in_main.write
                  [xself]
                    memory > xid
                    seq > @
                      seq
                        xid.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xid)) (((xinterpreters).xInterpreterID)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xid)) (((((xinterpreters).xlist_all)).apply)))
                xtest_unique_id.write
                  [xself]
                    memory > xid
                    memory > xseen
                    seq > @
                      (((unsupported)).apply)
                        xseen.write (((xset)).apply)
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (100))))
                          seq
                            xid.write ((((xinterpreters).xcreate)).apply)
                            bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid)))
                            bogusForceDataize.write ((((xseen).xadd)).apply ((xid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xseen)))) (100))
                xtest_in_thread.write
                  [xself]
                    memory > xlock
                    memory > xt
                    memory > xid
                    memory > xf
                    seq > @
                      seq
                        xlock.write ((((xthreading).xLock)).apply)
                        xid.write "None: is there a None literal in the EO language?"
                        xf.write
                          []
                            memory > xid
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xid.write ((((xinterpreters).xcreate)).apply)
                                bogusForceDataize.write ((((xlock).xacquire)).apply)
                                bogusForceDataize.write ((((xlock).xrelease)).apply)
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                        (((unsupported)).apply ((xlock)))
                          bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xid)) (((((xinterpreters).xlist_all)).apply)))
                xtest_in_subinterpreter.write
                  [xself]
                    memory > xid2
                    memory > xout
                    memory > xid1
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xmain)))) (((((xinterpreters).xlist_all)).apply)))
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xid2.write (((xint)).apply (((((xout).xstrip)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xinterpreters).xlist_all)).apply)))) ((((unsupported)).apply ((xmain)) ((xid1)) ((xid2)))))
                xtest_in_threaded_subinterpreter.write
                  [xself]
                    memory > xt
                    memory > xid2
                    memory > xid1
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xmain)))) (((((xinterpreters).xlist_all)).apply)))
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xid2.write "None: is there a None literal in the EO language?"
                        xf.write
                          []
                            memory > xid2
                            memory > xout
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xout.write (((x_run_output)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                                xid2.write (((xint)).apply (((((xout).xstrip)).apply)))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xinterpreters).xlist_all)).apply)))) ((((unsupported)).apply ((xmain)) ((xid1)) ((xid2)))))
                xtest_after_destroy_all.write
                  [xself]
                    memory > xbefore
                    memory > xid
                    memory > xids
                    seq > @
                      seq
                        xbefore.write (((xset)).apply (((((xinterpreters).xlist_all)).apply)))
                        xids.write (((unsupported)).apply)
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (3))))
                          seq
                            xid.write ((((xinterpreters).xcreate)).apply)
                            bogusForceDataize.write ((((xids).xappend)).apply ((xid)))
                        (((unsupported)).apply ((xid)) ((xids)))
                          bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid)))
                        xid.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xinterpreters).xlist_all)).apply)))) (((xbefore).or (((unsupported)).apply ((xid))))))
                xtest_after_destroy_some.write
                  [xself]
                    memory > xid1
                    memory > xid3
                    memory > xid2
                    memory > xbefore
                    memory > xid
                    seq > @
                      seq
                        xbefore.write (((xset)).apply (((((xinterpreters).xlist_all)).apply)))
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xid2.write ((((xinterpreters).xcreate)).apply)
                        xid3.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid1)))
                        bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid3)))
                        xid.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xinterpreters).xlist_all)).apply)))) (((xbefore).or (((unsupported)).apply ((xid)) ((xid2))))))
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_one.write
                  [xself]
                    memory > xid2
                    memory > xid1
                    memory > xid3
                    seq > @
                      seq
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xid2.write ((((xinterpreters).xcreate)).apply)
                        xid3.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xid2)) (((((xinterpreters).xlist_all)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid2)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xid2)) (((((xinterpreters).xlist_all)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xid1)) (((((xinterpreters).xlist_all)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xid3)) (((((xinterpreters).xlist_all)).apply)))
                xtest_all.write
                  [xself]
                    memory > xbefore
                    memory > xid
                    memory > xids
                    seq > @
                      seq
                        xbefore.write (((xset)).apply (((((xinterpreters).xlist_all)).apply)))
                        xids.write (((xset)).apply)
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (3))))
                          seq
                            xid.write ((((xinterpreters).xcreate)).apply)
                            bogusForceDataize.write ((((xids).xadd)).apply ((xid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xinterpreters).xlist_all)).apply)))) (((xbefore).or (xids))))
                        (((unsupported)).apply ((xid)) ((xids)))
                          bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xinterpreters).xlist_all)).apply)))) ((xbefore)))
                xtest_main.write
                  [xself]
                    memory > xt
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xmain)))) (((((xinterpreters).xlist_all)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xmain)))
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                                bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xmain)))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                xtest_already_destroyed.write
                  [xself]
                    memory > xid
                    seq > @
                      seq
                        xid.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid)))
                xtest_does_not_exist.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                        bogusForceDataize.write ((((xinterpreters).xdestroy)).apply (1000000))
                xtest_bad_id.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                        bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((1.neg)))
                xtest_from_current.write
                  [xself]
                    memory > xscript
                    memory > xid
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xmain)))) (((((xinterpreters).xlist_all)).apply)))
                        xid.write ((((xinterpreters).xcreate)).apply)
                        xscript.write (((xdedent)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid)) ((xscript)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xinterpreters).xlist_all)).apply)))) ((((unsupported)).apply ((xmain)) ((xid)))))
                xtest_from_sibling.write
                  [xself]
                    memory > xid2
                    memory > xscript
                    memory > xid1
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xmain)))) (((((xinterpreters).xlist_all)).apply)))
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xid2.write ((((xinterpreters).xcreate)).apply)
                        xscript.write (((xdedent)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid1)) ((xscript)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply (((((xinterpreters).xlist_all)).apply)))) ((((unsupported)).apply ((xmain)) ((xid1)))))
                xtest_from_other_thread.write
                  [xself]
                    memory > xt
                    memory > xid
                    memory > xf
                    seq > @
                      seq
                        xid.write ((((xinterpreters).xcreate)).apply)
                        xf.write
                          []
                            seq > @
                              bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xid)))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                xtest_still_running.write
                  [xself]
                    memory > xinterp
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xmain)))) (((((xinterpreters).xlist_all)).apply)))
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        (((unsupported)).apply ((((x_running)).apply ((xinterp)))))
                          seq
                            (((unsupported)).apply (((xself).xassertTrue)) (((((xinterpreters).xis_running)).apply ((xinterp)))) ("Interp {interp} should be running before destruction."))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xRuntimeError)) ("Should not be able to destroy interp {interp} while it's still running."))))
                              bogusForceDataize.write ((((xinterpreters).xdestroy)).apply ((xinterp)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xinterpreters).xis_running)).apply ((xinterp)))))
            (((unsupported)).apply ((xTestBase)))
              seq
                xSCRIPT.write (((xdedent)).apply ((((unsupported)).apply)))
                xFILENAME.write "spam"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply (((xself).xid)) (((((xinterpreters).xcreate)).apply)))
                        (((unsupported)).apply (((xself).x_fs)) ("None: is there a None literal in the EO language?"))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_fs)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write (((((xself).x_fs).xclose)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                xfs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_fs)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).x_fs)) ((((xFSFixture)).apply ((xself)))))
                        (((unsupported)).apply (((xself).x_fs)))
                xtest_success.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xscript)) ((xfile)))) ((((x_captured_script)).apply ("print(\"it worked!\", end=\"\")"))))
                        (((unsupported)).apply ((xfile)))
                          seq
                            bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((xscript)))
                            xout.write ((((xfile).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("it worked!"))
                xtest_in_thread.write
                  [xself]
                    memory > xt
                    memory > xout
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xscript)) ((xfile)))) ((((x_captured_script)).apply ("print(\"it worked!\", end=\"\")"))))
                        (((unsupported)).apply ((xfile)))
                          seq
                            xf.write
                              []
                                seq > @
                                  bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((xscript)))
                            xt.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                            bogusForceDataize.write ((((xt).xstart)).apply)
                            bogusForceDataize.write ((((xt).xjoin)).apply)
                            xout.write ((((xfile).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("it worked!"))
                xtest_create_thread.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xscript)) ((xfile)))) ((((x_captured_script)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xfile)))
                          seq
                            bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((xscript)))
                            xout.write ((((xfile).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("it worked!"))
                xtest_fork.write
                  [xself]
                    memory > xexpected
                    memory > xscript
                    memory > xcontent
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xNamedTemporaryFile)).apply ("w+"))) ((xfile)))
                          seq
                            bogusForceDataize.write ((((xfile).xwrite)).apply (""))
                            bogusForceDataize.write ((((xfile).xflush)).apply)
                            xexpected.write "spam spam spam spam spam"
                            xscript.write (((xdedent)).apply ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((xscript)))
                            bogusForceDataize.write ((((xfile).xseek)).apply (0))
                            xcontent.write ((((xfile).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontent)) ((xexpected)))
                xtest_already_running.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((x_running)).apply (((xself).xid)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ("print(\"spam\")"))
                xtest_does_not_exist.write
                  [xself]
                    memory > xid
                    seq > @
                      seq
                        xid.write 1
                        while.
                          (((unsupported)).apply ((xid)) (((((xinterpreters).xlist_all)).apply)))
                          [unused]
                            seq > @
                              (((unsupported)).apply ((xid)) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid)) ("print(\"spam\")"))
                xtest_error_id.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((1.neg)) ("print(\"spam\")"))
                xtest_bad_id.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ("spam") ("print(\"spam\")"))
                xtest_bad_script.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) (10))
                xtest_bytes_for_script.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ("print(\"spam\")"))
                xassert_run_failed.write
                  [xself xexctype xmsg]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xRunFailedError)))) ((xcaught)))
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xmsg)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((xstr)).apply (((xcaught).xexception))).xsplit)).apply (":"))) (0))) ((((xstr)).apply ((xexctype)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcaught).xexception)))) (((("{}: {}".xformat)).apply ((xexctype)) ((xmsg)))))
                xtest_invalid_syntax.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassert_run_failed)).apply ((xSyntaxError)))))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ("print(\"spam\""))
                xtest_failure.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassert_run_failed)).apply ((xException)) ("spam"))))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ("raise Exception(\"spam\")"))
                xtest_SystemExit.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassert_run_failed)).apply ((xSystemExit)) ("42"))))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ("raise SystemExit(42)"))
                xtest_sys_exit.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassert_run_failed)).apply ((xSystemExit)))))
                          bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply (((((xself).xassert_run_failed)).apply ((xSystemExit)) ("42"))))
                          bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((((xdedent)).apply ((((unsupported)).apply)))))
                xtest_with_shared.write
                  [xself]
                    memory > xns
                    memory > xscript
                    memory > xshared
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                        xshared.write (((unsupported)).apply ("spam") ("ham") ("eggs") ("-1") ("cheddar") ("None: is there a None literal in the EO language?"))
                        xscript.write (((xdedent)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((xscript)) ((xshared)))
                        (((unsupported)).apply ((((xopen)).apply ((xr)) ("rb"))) ((xchan)))
                          xns.write ((((xpickle).xload)).apply ((xchan)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("spam"))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("eggs"))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("result"))) (41))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply ((xns)) ("cheddar"))))
                xtest_shared_overwrites.write
                  [xself]
                    memory > xns
                    memory > xscript
                    memory > xshared
                    seq > @
                      seq
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xshared.write (((unsupported)).apply ("spam") ("ham"))
                        xscript.write (((xdedent)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((xscript)) ((xshared)))
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                        xscript.write (((xdedent)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((xscript)))
                        (((unsupported)).apply ((((xopen)).apply ((xr)) ("rb"))) ((xchan)))
                          xns.write ((((xpickle).xload)).apply ((xchan)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xns)) ("ns1"))) ("spam"))) ("eggs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xns)) ("ns2"))) ("spam"))) ("ham"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("spam"))) ("ham"))
                xtest_shared_overwrites_default_vars.write
                  [xself]
                    memory > xns
                    memory > xscript
                    memory > xshared
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                        xshared.write (((unsupported)).apply ("__name__") ("not __main__"))
                        xscript.write (((xdedent)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((xscript)) ((xshared)))
                        (((unsupported)).apply ((((xopen)).apply ((xr)) ("rb"))) ((xchan)))
                          xns.write ((((xpickle).xload)).apply ((xchan)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xns)) ("__name__"))) ("not __main__"))
                xtest_main_reused.write
                  [xself]
                    memory > xns2
                    memory > xns1
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((xopen)).apply ((xr)) ("rb"))) ((xchan)))
                          xns1.write ((((xpickle).xload)).apply ((xchan)))
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((xopen)).apply ((xr)) ("rb"))) ((xchan)))
                          xns2.write ((((xpickle).xload)).apply ((xchan)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spam") ((xns1)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("eggs") ((xns1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("eggs") ((xns2)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spam") ((xns2)))
                xtest_execution_namespace_is_main.write
                  [xself]
                    memory > xns
                    memory > xscript
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((((xos).xpipe)).apply)))
                        xscript.write (((xdedent)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply (((xself).xid)) ((xscript)))
                        (((unsupported)).apply ((((xopen)).apply ((xr)) ("rb"))) ((xchan)))
                          xns.write ((((xpickle).xload)).apply ((xchan)))
                        bogusForceDataize.write ((((xns).xpop)).apply ("__builtins__"))
                        bogusForceDataize.write ((((xns).xpop)).apply ("__loader__"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xns)) ((((unsupported)).apply ("__name__") ("__main__") ("__annotations__") ((((unsupported)).apply)) ("__doc__") ("None: is there a None literal in the EO language?") ("__package__") ("None: is there a None literal in the EO language?") ("__spec__") ("None: is there a None literal in the EO language?") ("spam") (42))))
                xtest_still_running_at_exit.write
                  [xself]
                    memory > xscript
                    memory > xretcode
                    memory > xfilename
                    seq > @
                      (((unsupported)).apply)
                        xscript.write (((xdedent)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xdirname)))
                          seq
                            xfilename.write ((((xscript_helper).xmake_script)).apply ((xdirname)) ("interp") ((xscript)))
                            (((unsupported)).apply (((((xscript_helper).xspawn_python)).apply ((xfilename)))) ((xproc)))
                              xretcode.write ((((xproc).xwait)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xretcode)) (0))
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_default_kwargs.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((xcid)))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcid).xend)) ("both"))
                xtest_with_kwargs.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcid).xend)) ("send"))
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE) (FALSE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcid).xend)) ("send"))
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcid).xend)) ("recv"))
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE) (FALSE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcid).xend)) ("recv"))
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcid).xend)) ("both"))
                xtest_coerce_id.write
                  [xself]
                    memory > x__index__
                    memory > xcid
                    seq > @
                      seq
                        (((unsupported)).apply ((xstr)))
                          x__index__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (11))
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) ((((xInt)).apply)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply ((xcid)))) (10))
                xtest_bad_id.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xinterpreters).x_channel_id)) ((((xobject)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xinterpreters).x_channel_id)) (10.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xinterpreters).x_channel_id)) ("10"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xinterpreters).x_channel_id)) ("10"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xinterpreters).x_channel_id)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xinterpreters).x_channel_id)) ((((unsupported)).apply (2) (64))))
                xtest_bad_kwargs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                        (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (FALSE) (FALSE))
                xtest_does_not_exist.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelNotFoundError)))))
                          bogusForceDataize.write ((((xinterpreters).x_channel_id)).apply (((((xint)).apply ((xcid))).add 1)))
                xtest_str.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xcid)))) ("10"))
                xtest_repr.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xcid)))) ("ChannelID(10)"))
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xcid)))) ("ChannelID(10, send=True)"))
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xcid)))) ("ChannelID(10, recv=True)"))
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) (10) (TRUE) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xcid)))) ("ChannelID(10)"))
                xtest_equality.write
                  [xself]
                    memory > xcid1
                    memory > xcid3
                    memory > xcid2
                    seq > @
                      seq
                        xcid1.write ((((xinterpreters).xchannel_create)).apply)
                        xcid2.write ((((xinterpreters).x_channel_id)).apply ((((xint)).apply ((xcid1)))))
                        xcid3.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcid1).eq (xcid1))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcid1).eq (xcid2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcid1).eq (((xint)).apply ((xcid1))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xint)).apply ((xcid1))).eq (xcid1))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcid1).eq (((xfloat)).apply ((((xint)).apply ((xcid1))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfloat)).apply ((((xint)).apply ((xcid1))))).eq (xcid1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcid1).eq ((((xfloat)).apply ((((xint)).apply ((xcid1))))).add 0.1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcid1).eq (((xstr)).apply ((((xint)).apply ((xcid1))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcid1).eq (((unsupported)).apply (2) (1000)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcid1).eq (((xfloat)).apply ("inf")))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcid1).eq "spam")))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcid1).eq (xcid3))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcid1).neq (xcid1))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcid1).neq (xcid2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcid1).neq (xcid3))))
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_create_cid.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcid)) (((xinterpreters).xChannelID)))
                xtest_sequential_ids.write
                  [xself]
                    memory > xid1
                    memory > xid3
                    memory > xid2
                    memory > xbefore
                    memory > xafter
                    seq > @
                      seq
                        xbefore.write ((((xinterpreters).xchannel_list_all)).apply)
                        xid1.write ((((xinterpreters).xchannel_create)).apply)
                        xid2.write ((((xinterpreters).xchannel_create)).apply)
                        xid3.write ((((xinterpreters).xchannel_create)).apply)
                        xafter.write ((((xinterpreters).xchannel_list_all)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xid2)) (((((xint)).apply ((xid1))).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xid3)) (((((xint)).apply ((xid2))).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xset)).apply ((xafter))).sub (((xset)).apply ((xbefore))))) ((((unsupported)).apply ((xid1)) ((xid2)) ((xid3)))))
                xtest_ids_global.write
                  [xself]
                    memory > xid1
                    memory > xcid1
                    memory > xout
                    memory > xid2
                    memory > xcid2
                    seq > @
                      seq
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xcid1.write (((xint)).apply (((((xout).xstrip)).apply)))
                        xid2.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xid2)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xcid2.write (((xint)).apply (((((xout).xstrip)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcid2)) (((((xint)).apply ((xcid1))).add 1)))
                xtest_send_recv_main.write
                  [xself]
                    memory > xorig
                    memory > xcid
                    memory > xobj
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        xorig.write "spam"
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ((xorig)))
                        xobj.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ((xorig)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xobj)) ((xorig)))
                xtest_send_recv_same_interpreter.write
                  [xself]
                    memory > xout
                    memory > xid1
                    seq > @
                      seq
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                xtest_send_recv_different_interpreters.write
                  [xself]
                    memory > xout
                    memory > xid1
                    memory > xcid
                    memory > xobj
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xobj.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ("spam"))
                xtest_send_recv_different_threads.write
                  [xself]
                    memory > xt
                    memory > xcid
                    memory > xobj
                    memory > xf
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        xf.write
                          []
                            memory > xobj
                            seq > @
                              seq
                                while.
                                  TRUE
                                  [unused]
                                    seq > @
                                      (((unsupported)).apply (((xinterpreters).xChannelEmptyError)))
                                        seq
                                          xobj.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                                          (((unsupported)).apply)
                                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.1))
                                bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ((xobj)))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                        xobj.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ("spam"))
                xtest_send_recv_different_interpreters_and_threads.write
                  [xself]
                    memory > xid1
                    memory > xcid
                    memory > xout
                    memory > xt
                    memory > xf
                    memory > xobj
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xout.write "None: is there a None literal in the EO language?"
                        xf.write
                          []
                            memory > xout
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xout.write (((x_run_output)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xf)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xt).xjoin)).apply)
                        xobj.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ("eggs"))
                xtest_send_not_found.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelNotFoundError)))))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply (10) ("spam"))
                xtest_recv_not_found.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelNotFoundError)))))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply (10))
                xtest_recv_empty.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelEmptyError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_run_string_arg_unresolved.write
                  [xself]
                    memory > xout
                    memory > xcid
                    memory > xobj
                    memory > xinterp
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xinterp)) ((((xdedent)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ((xdict)) (((xcid).xsend)))))
                        xobj.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xstrip)).apply)) ("send"))
                xtest_run_string_arg_resolved.write
                  [xself]
                    memory > xout
                    memory > xcid
                    memory > xobj
                    memory > xinterp
                    seq > @
                      (((unsupported)).apply)
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        xcid.write (((unsupported)).apply (((xinterpreters).x_channel_id)) ((xcid)) (TRUE))
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        xout.write (((x_run_output)).apply ((xinterp)) ((((xdedent)).apply ((((unsupported)).apply)))) ((((unsupported)).apply ((xdict)) (((xcid).xsend)))))
                        xobj.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xstrip)).apply)) ("send"))
                xtest_close_single_user.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply ((xcid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_close_multiple_users.write
                  [xself]
                    memory > xid2
                    memory > xid1
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xid2.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid2)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply ((xcid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xRunFailedError)))) ((xcm)))
                          bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ChannelClosedError") ((((xstr)).apply (((xcm).xexception)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xRunFailedError)))) ((xcm)))
                          bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid2)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ChannelClosedError") ((((xstr)).apply (((xcm).xexception)))))
                xtest_close_multiple_times.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply ((xcid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply ((xcid)))
                xtest_close_empty.write
                  [xself]
                    memory > xtests
                    memory > xcid
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply (FALSE) (FALSE))) ((((unsupported)).apply (TRUE) (FALSE))) ((((unsupported)).apply (FALSE) (TRUE))) ((((unsupported)).apply (TRUE) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsend)) ((xrecv)))) ((xtests)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((unsupported)).apply ((xsend)) ((xrecv)))))))
                            seq
                              xcid.write ((((xinterpreters).xchannel_create)).apply)
                              bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                              bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                              (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) ((xsend)) ((xrecv)))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                                bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                                bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_close_defaults_with_unused_items.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("ham"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelNotEmptyError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                xtest_close_recv_with_unused_items_unforced.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("ham"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelNotEmptyError)))))
                          (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) (TRUE))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) (TRUE))
                xtest_close_send_with_unused_items_unforced.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("ham"))
                        (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_close_both_with_unused_items_unforced.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("ham"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelNotEmptyError)))))
                          (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) (TRUE) (TRUE))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) (TRUE))
                xtest_close_recv_with_unused_items_forced.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("ham"))
                        (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) (TRUE) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_close_send_with_unused_items_forced.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("ham"))
                        (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) (TRUE) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_close_both_with_unused_items_forced.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("ham"))
                        (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) (TRUE) (TRUE) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_close_never_used.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply ((xcid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_close_by_unassociated_interp.write
                  [xself]
                    memory > xcid
                    memory > xinterp
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xinterp)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply ((xcid)))
                xtest_close_used_multiple_times_by_single_user.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        (((unsupported)).apply (((xinterpreters).xchannel_close)) ((xcid)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
            (((unsupported)).apply ((xTestBase)))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                xtest_single_user.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        (((unsupported)).apply (((xinterpreters).xchannel_release)) ((xcid)) (TRUE) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_multiple_users.write
                  [xself]
                    memory > xid2
                    memory > xout
                    memory > xid1
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        xid1.write ((((xinterpreters).xcreate)).apply)
                        xid2.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xout.write (((x_run_output)).apply ((xid2)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xid1)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xstrip)).apply)) ("b'spam'"))
                xtest_no_kwargs.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_release)).apply ((xcid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_multiple_times.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        (((unsupported)).apply (((xinterpreters).xchannel_release)) ((xcid)) (TRUE) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          (((unsupported)).apply (((xinterpreters).xchannel_release)) ((xcid)) (TRUE) (TRUE))
                xtest_with_unused_items.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("ham"))
                        (((unsupported)).apply (((xinterpreters).xchannel_release)) ((xcid)) (TRUE) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_never_used.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_release)).apply ((xcid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_by_unassociated_interp.write
                  [xself]
                    memory > xcid
                    memory > xobj
                    memory > xinterp
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xinterp)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        xobj.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_release)).apply ((xcid)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ("spam"))
                xtest_close_if_unassociated.write
                  [xself]
                    memory > xcid
                    memory > xinterp
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        xinterp.write ((((xinterpreters).xcreate)).apply)
                        bogusForceDataize.write ((((xinterpreters).xrun_string)).apply ((xinterp)) ((((xdedent)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                xtest_partially.write
                  [xself]
                    memory > xcid
                    memory > xobj
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        (((unsupported)).apply (((xinterpreters).xchannel_release)) ((xcid)) (TRUE))
                        xobj.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ("spam"))
                xtest_used_multiple_times_by_single_user.write
                  [xself]
                    memory > xcid
                    seq > @
                      seq
                        xcid.write ((((xinterpreters).xchannel_create)).apply)
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("spam"))
                        bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
                        (((unsupported)).apply (((xinterpreters).xchannel_release)) ((xcid)) (TRUE) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply ((xcid)) ("eggs"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply ((xcid)))
            (((unsupported)).apply ((((xnamedtuple)).apply ("ChannelCloseFixture") ("end interp other extra creator"))))
              seq
                xQUICK.write FALSE
                x__new__.write
                  [xcls xend xinterp xother xextra xcreator]
                    memory > xknown
                    memory > xself
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xend)) ((((unsupported)).apply ("send") ("recv"))))))
                        ((xcls).xQUICK).if
                          xknown.write (((unsupported)).apply)
                          seq
                            xinterp.write ((((xInterpreter).xfrom_raw)).apply ((xinterp)))
                            xother.write ((((xInterpreter).xfrom_raw)).apply ((xother)))
                            xextra.write ((((xInterpreter).xfrom_raw)).apply ((xextra)))
                            xknown.write (((unsupported)).apply (((xinterp).xname)) ((xinterp)) (((xother).xname)) ((xother)) (((xextra).xname)) ((xextra)))
                        ((xcreator).not).if
                          xcreator.write "same"
                        xself.write ((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xend)) ((xinterp)) ((xother)) ((xextra)) ((xcreator)))
                        (((unsupported)).apply (((xself).x_prepped)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).x_state)) ((((xChannelState)).apply)))
                        (((unsupported)).apply (((xself).x_known)) ((xknown)))
                        (((unsupported)).apply ((xself)))
                xstate.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_state)))
                xcid.write
                  [xself]
                    memory > xcreator
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xAttributeError)))
                          (((unsupported)).apply (((xself).x_cid)))
                          seq
                            xcreator.write ((((xself).x_get_interpreter)).apply (((xself).xcreator)))
                            (((unsupported)).apply (((xself).x_cid)) (((((xself).x_new_channel)).apply ((xcreator)))))
                            (((unsupported)).apply (((xself).x_cid)))
                xget_interpreter.write
                  [xself xinterp]
                    seq > @
                      seq
                        xinterp.write ((((xself).x_get_interpreter)).apply ((xinterp)))
                        bogusForceDataize.write ((((xself).x_prep_interpreter)).apply ((xinterp)))
                        (((unsupported)).apply ((xinterp)))
                xexpect_closed_error.write
                  [xself xend]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xend)) ("None: is there a None literal in the EO language?")).if
                          xend.write ((xself).xend)
                        (((xend).eq "recv").and ((((xself).xstate).xclosed).eq "send")).if
                          (((unsupported)).apply (FALSE))
                        (((unsupported)).apply ((((xbool)).apply ((((xself).xstate).xclosed)))))
                xprep_interpreter.write
                  [xself xinterp]
                    seq > @
                      bogusForceDataize.write ((((xself).x_prep_interpreter)).apply ((xinterp)))
                xrecord_action.write
                  [xself xaction xresult]
                    seq > @
                      (((unsupported)).apply (((xself).x_state)) ((xresult)))
                xclean_up.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xclean_up_interpreters)).apply)
                        bogusForceDataize.write (((xclean_up_channels)).apply)
                x_new_channel.write
                  [xself xcreator]
                    memory > xch
                    seq > @
                      seq
                        (((xcreator).xname).eq "main").if
                          (((unsupported)).apply (((((xinterpreters).xchannel_create)).apply)))
                          seq
                            xch.write ((((xinterpreters).xchannel_create)).apply)
                            bogusForceDataize.write (((xrun_interp)).apply (((xcreator).xid)) ((((unsupported)).apply)))
                            (((unsupported)).apply (((xself).x_cid)) (((((xinterpreters).xchannel_recv)).apply ((xch)))))
                        (((unsupported)).apply (((xself).x_cid)))
                x_get_interpreter.write
                  [xself xinterp]
                    memory > xname
                    seq > @
                      (((unsupported)).apply ((xinterp)) ((((unsupported)).apply ("same") ("interp")))).if
                        (((unsupported)).apply (((xself).xinterp)))
                        ((xinterp).eq "other").if
                          (((unsupported)).apply (((xself).xother)))
                          ((xinterp).eq "extra").if
                            (((unsupported)).apply (((xself).xextra)))
                            seq
                              xname.write (xinterp)
                              (((unsupported)).apply ((xKeyError)))
                                xinterp.write (((unsupported)).apply (((xself).x_known)) ((xname)))
                                (((unsupported)).apply ((xinterp)) ((((unsupported)).apply (((xself).x_known)) ((xname)))) ((((xInterpreter)).apply ((xname)))))
                              (((unsupported)).apply ((xinterp)))
                x_prep_interpreter.write
                  [xself xinterp]
                    seq > @
                      seq
                        (((unsupported)).apply (((xinterp).xid)) (((xself).x_prepped))).if
                          (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).x_prepped).xadd)).apply (((xinterp).xid)))
                        (((xinterp).xname).eq "main").if
                          (((unsupported)).apply)
                        bogusForceDataize.write (((xrun_interp)).apply (((xinterp).xid)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xTestBase)) (((((xunittest).xskip)).apply ("these tests take several hours to run"))))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                xiter_action_sets.write
                  [xself]
                    memory > xactions
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply ((xcloseactions)) (((((xself).x_iter_close_action_sets)).apply ("same") ("other"))))
                          seq
                            (((unsupported)).apply ((xcloseactions)))
                            (((unsupported)).apply ((xpostactions)) (((((xself).x_iter_post_close_action_sets)).apply)))
                              (((unsupported)).apply (((xcloseactions).add (xpostactions))))
                        (((unsupported)).apply ((xcloseactions)) (((((xself).x_iter_close_action_sets)).apply ("other") ("extra"))))
                          seq
                            (((unsupported)).apply ((xcloseactions)))
                            (((unsupported)).apply ((xpostactions)) (((((xself).x_iter_post_close_action_sets)).apply)))
                              (((unsupported)).apply (((xcloseactions).add (xpostactions))))
                        (((unsupported)).apply ((xuseactions)) (((((xself).x_iter_use_action_sets)).apply ("same") ("other"))))
                          seq
                            (((unsupported)).apply ((xuseactions)))
                            (((unsupported)).apply ((xcloseactions)) (((((xself).x_iter_close_action_sets)).apply ("same") ("other"))))
                              seq
                                xactions.write ((xuseactions).add (xcloseactions))
                                (((unsupported)).apply ((xactions)))
                                (((unsupported)).apply ((xpostactions)) (((((xself).x_iter_post_close_action_sets)).apply)))
                                  (((unsupported)).apply (((xactions).add (xpostactions))))
                            (((unsupported)).apply ((xcloseactions)) (((((xself).x_iter_close_action_sets)).apply ("other") ("extra"))))
                              seq
                                xactions.write ((xuseactions).add (xcloseactions))
                                (((unsupported)).apply ((xactions)))
                                (((unsupported)).apply ((xpostactions)) (((((xself).x_iter_post_close_action_sets)).apply)))
                                  (((unsupported)).apply (((xactions).add (xpostactions))))
                        (((unsupported)).apply ((xuseactions)) (((((xself).x_iter_use_action_sets)).apply ("other") ("extra"))))
                          seq
                            (((unsupported)).apply ((xuseactions)))
                            (((unsupported)).apply ((xcloseactions)) (((((xself).x_iter_close_action_sets)).apply ("same") ("other"))))
                              seq
                                xactions.write ((xuseactions).add (xcloseactions))
                                (((unsupported)).apply ((xactions)))
                                (((unsupported)).apply ((xpostactions)) (((((xself).x_iter_post_close_action_sets)).apply)))
                                  (((unsupported)).apply (((xactions).add (xpostactions))))
                            (((unsupported)).apply ((xcloseactions)) (((((xself).x_iter_close_action_sets)).apply ("other") ("extra"))))
                              seq
                                xactions.write ((xuseactions).add (xcloseactions))
                                (((unsupported)).apply ((xactions)))
                                (((unsupported)).apply ((xpostactions)) (((((xself).x_iter_post_close_action_sets)).apply)))
                                  (((unsupported)).apply (((xactions).add (xpostactions))))
                x_iter_use_action_sets.write
                  [xself xinterp1 xinterp2]
                    memory > xinterps
                    seq > @
                      seq
                        xinterps.write (((unsupported)).apply ((xinterp1)) ((xinterp2)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("recv") ((xinterp1)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("recv") ((xinterp2)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("recv") ((xinterp1)))) ((((xChannelAction)).apply ("use") ("recv") ((xinterp2)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("send") ((xinterp1)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("send") ((xinterp2)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("send") ((xinterp1)))) ((((xChannelAction)).apply ("use") ("send") ((xinterp2)))))))
                        (((unsupported)).apply ((xinterp1)) ((xinterps)))
                          (((unsupported)).apply ((xinterp2)) ((xinterps)))
                            (((unsupported)).apply ((xinterp3)) ((xinterps)))
                              (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("send") ((xinterp1)))) ((((xChannelAction)).apply ("use") ("send") ((xinterp2)))) ((((xChannelAction)).apply ("use") ("recv") ((xinterp3)))))))
                        (((unsupported)).apply ((xinterp1)) ((xinterps)))
                          (((unsupported)).apply ((xinterp2)) ((xinterps)))
                            (((unsupported)).apply ((xinterp3)) ((xinterps)))
                              (((unsupported)).apply ((xinterp4)) ((xinterps)))
                                (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("send") ((xinterp1)))) ((((xChannelAction)).apply ("use") ("send") ((xinterp2)))) ((((xChannelAction)).apply ("use") ("recv") ((xinterp3)))) ((((xChannelAction)).apply ("use") ("recv") ((xinterp4)))))))
                x_iter_close_action_sets.write
                  [xself xinterp1 xinterp2]
                    memory > xop
                    memory > xends
                    memory > xinterps
                    seq > @
                      seq
                        xends.write (((unsupported)).apply ("recv") ("send"))
                        xinterps.write (((unsupported)).apply ((xinterp1)) ((xinterp2)))
                        (((unsupported)).apply ((xforce)) ((((unsupported)).apply (TRUE) (FALSE))))
                          seq
                            xop.write ((xforce).if "force-close" "close")
                            (((unsupported)).apply ((xinterp)) ((xinterps)))
                              (((unsupported)).apply ((xend)) ((xends)))
                                (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ((xop)) ((xend)) ((xinterp)))))))
                        (((unsupported)).apply ((xrecvop)) ((((unsupported)).apply ("close") ("force-close"))))
                          (((unsupported)).apply ((xsendop)) ((((unsupported)).apply ("close") ("force-close"))))
                            (((unsupported)).apply ((xrecv)) ((xinterps)))
                              (((unsupported)).apply ((xsend)) ((xinterps)))
                                (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ((xrecvop)) ("recv") ((xrecv)))) ((((xChannelAction)).apply ((xsendop)) ("send") ((xsend)))))))
                x_iter_post_close_action_sets.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xinterp)) ((((unsupported)).apply ("same") ("extra") ("other"))))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("recv") ((xinterp)))))))
                          (((unsupported)).apply ((((unsupported)).apply ((((xChannelAction)).apply ("use") ("send") ((xinterp)))))))
                xrun_actions.write
                  [xself xfix xactions]
                    seq > @
                      (((unsupported)).apply ((xaction)) ((xactions)))
                        bogusForceDataize.write ((((xself).xrun_action)).apply ((xfix)) ((xaction)))
                xrun_action.write
                  [xself xfix xaction xhideclosed]
                    memory > xend
                    memory > xresult
                    memory > x_cid
                    memory > xinterp
                    seq > @
                      (((unsupported)).apply)
                        xend.write ((((xaction).xresolve_end)).apply (((xfix).xend)))
                        xinterp.write ((((xaction).xresolve_interp)).apply (((xfix).xinterp)) (((xfix).xother)) (((xfix).xextra)))
                        bogusForceDataize.write ((((xfix).xprep_interpreter)).apply ((xinterp)))
                        (((xinterp).xname).eq "main").if
                          seq
                            xresult.write (((unsupported)).apply ((xrun_action)) (((xfix).xcid)) (((xaction).xaction)) ((xend)) (((xfix).xstate)) ((xhideclosed)))
                            bogusForceDataize.write ((((xfix).xrecord_action)).apply ((xaction)) ((xresult)))
                          seq
                            x_cid.write ((((xinterpreters).xchannel_create)).apply)
                            bogusForceDataize.write (((xrun_interp)).apply (((xinterp).xid)) ((((unsupported)).apply)))
                            xresult.write (((unsupported)).apply ((xChannelState)) (((((xint).xfrom_bytes)).apply (((((xinterpreters).xchannel_recv)).apply ((x_cid)))) ("little"))) ((((xbool)).apply (((((xinterpreters).xchannel_recv)).apply ((x_cid)))))))
                            bogusForceDataize.write ((((xfix).xrecord_action)).apply ((xaction)) ((xresult)))
                xiter_fixtures.write
                  [xself]
                    memory > xinterpreters
                    seq > @
                      seq
                        xinterpreters.write (((unsupported)).apply ((((unsupported)).apply ("main") ("interp") ("extra"))) ((((unsupported)).apply ("interp") ("main") ("extra"))) ((((unsupported)).apply ("interp1") ("interp2") ("extra"))) ((((unsupported)).apply ("interp1") ("interp2") ("main"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xinterp)) ((xother)) ((xextra)))) ((xinterpreters)))
                          (((unsupported)).apply ((xcreator)) ((((unsupported)).apply ("same") ("other") ("creator"))))
                            (((unsupported)).apply ((xend)) ((((unsupported)).apply ("send") ("recv"))))
                              (((unsupported)).apply ((((xChannelCloseFixture)).apply ((xend)) ((xinterp)) ((xother)) ((xextra)) ((xcreator)))))
                x_close.write
                  [xself xfix xforce]
                    memory > xop
                    memory > xclose
                    seq > @
                      (((unsupported)).apply)
                        xop.write ((xforce).if "force-close" "close")
                        xclose.write (((xChannelAction)).apply ((xop)) (((xfix).xend)) ("same"))
                        (((((xfix).xexpect_closed_error)).apply).not).if
                          (((unsupported)).apply (((xself).xrun_action)) ((xfix)) ((xclose)) (FALSE))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                            (((unsupported)).apply (((xself).xrun_action)) ((xfix)) ((xclose)) (FALSE))
                x_assert_closed_in_interp.write
                  [xself xfix xinterp]
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply ((xinterp)) ("None: is there a None literal in the EO language?")).or (((xinterp).xname).eq "main")).if
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                              bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply (((xfix).xcid)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                              bogusForceDataize.write ((((xinterpreters).xchannel_send)).apply (((xfix).xcid)) ("spam"))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                              bogusForceDataize.write ((((xinterpreters).xchannel_close)).apply (((xfix).xcid)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xinterpreters).xChannelClosedError)))))
                              (((unsupported)).apply (((xinterpreters).xchannel_close)) (((xfix).xcid)) (TRUE))
                          seq
                            bogusForceDataize.write (((xrun_interp)).apply (((xinterp).xid)) ((((unsupported)).apply)))
                            bogusForceDataize.write (((xrun_interp)).apply (((xinterp).xid)) ((((unsupported)).apply)))
                            bogusForceDataize.write (((xrun_interp)).apply (((xinterp).xid)) ((((unsupported)).apply)))
                            bogusForceDataize.write (((xrun_interp)).apply (((xinterp).xid)) ((((unsupported)).apply)))
                x_assert_closed.write
                  [xself xfix]
                    memory > xinterp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xfix).xstate).xclosed)))
                        (((unsupported)).apply ((x_)) ((((xrange)).apply ((((xfix).xstate).xpending)))))
                          bogusForceDataize.write ((((xinterpreters).xchannel_recv)).apply (((xfix).xcid)))
                        bogusForceDataize.write ((((xself).x_assert_closed_in_interp)).apply ((xfix)))
                        (((unsupported)).apply ((xinterp)) ((((unsupported)).apply ("same") ("other"))))
                          seq
                            xinterp.write ((((xfix).xget_interpreter)).apply ((xinterp)))
                            (((xinterp).xname).eq "main").if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).x_assert_closed_in_interp)).apply ((xfix)) ((xinterp)))
                        xinterp.write ((((xfix).xget_interpreter)).apply ("fresh"))
                        bogusForceDataize.write ((((xself).x_assert_closed_in_interp)).apply ((xfix)) ((xinterp)))
                x_iter_close_tests.write
                  [xself xverbose]
                    memory > xi
                    seq > @
                      (((unsupported)).apply)
                        xi.write 1
                        (((unsupported)).apply ((xactions)) (((((xself).xiter_action_sets)).apply)))
                          seq
                            bogusForceDataize.write (((xprint)).apply)
                            (((unsupported)).apply ((xfix)) (((((xself).xiter_fixtures)).apply)))
                              seq
                                (((unsupported)).apply ((xi)) (2))
                                ((xi).greater 1000).if
                                  (((unsupported)).apply)
                                (xverbose).if
                                  seq
                                    ((((xi).sub 1).mod 6).eq 0).if
                                      bogusForceDataize.write (((xprint)).apply)
                                    bogusForceDataize.write (((xprint)).apply ((xi)) ((xfix)) (((("({} actions)".xformat)).apply ((((xlen)).apply ((xactions)))))))
                                  seq
                                    ((((xi).sub 1).mod 6).eq 0).if
                                      (((unsupported)).apply ((xprint)) (" ") (""))
                                    (((unsupported)).apply ((xprint)) (".") (""))
                                    bogusForceDataize.write (((((xsys).xstdout).xflush)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xfix)) ((xactions)))))
                            (xverbose).if
                              bogusForceDataize.write (((xprint)).apply ("---"))
                        bogusForceDataize.write (((xprint)).apply)
                x_skim_close_tests.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xChannelCloseFixture).xQUICK)) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xfix)) ((xactions)))) (((((xself).x_iter_close_tests)).apply)))
                xtest_close.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xfix)) ((xactions)))) (((((xself).x_iter_close_tests)).apply)))
                        seq
                          (((unsupported)).apply (((((xself).xsubTest)).apply (((("{} {}  {}".xformat)).apply ((xi)) ((xfix)) ((xactions)))))))
                            seq
                              bogusForceDataize.write ((((xfix).xprep_interpreter)).apply (((xfix).xinterp)))
                              bogusForceDataize.write ((((xself).xrun_actions)).apply ((xfix)) ((xactions)))
                              (((unsupported)).apply (((xself).x_close)) ((xfix)) (FALSE))
                              bogusForceDataize.write ((((xself).x_assert_closed)).apply ((xfix)))
                          bogusForceDataize.write ((((xfix).xclean_up)).apply)
                xtest_force_close.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xfix)) ((xactions)))) (((((xself).x_iter_close_tests)).apply)))
                        seq
                          (((unsupported)).apply (((((xself).xsubTest)).apply (((("{} {}  {}".xformat)).apply ((xi)) ((xfix)) ((xactions)))))))
                            seq
                              bogusForceDataize.write ((((xfix).xprep_interpreter)).apply (((xfix).xinterp)))
                              bogusForceDataize.write ((((xself).xrun_actions)).apply ((xfix)) ((xactions)))
                              (((unsupported)).apply (((xself).x_close)) ((xfix)) (TRUE))
                              bogusForceDataize.write ((((xself).x_assert_closed)).apply ((xfix)))
                          bogusForceDataize.write ((((xfix).xclean_up)).apply)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)