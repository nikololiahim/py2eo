memory > xfill_type
memory > xstr
memory > xtempfile
memory > xcm
memory > xOtherBytesSubclass
memory > xarray
memory > xC
memory > xcopy
memory > xAttributeError
memory > xUnicodeDecodeError
memory > xstep
memory > xc
memory > xSubclassTest
memory > xmethname
memory > xdata
memory > xpickle
memory > xlist
memory > xc_long
memory > xindex
memory > xpythonapi
memory > xValueError
memory > xFixedStringTest
memory > xpy_formatter
memory > xB
memory > xpy_object
memory > xBadInt
memory > xpos
memory > xfunc2
memory > xBytesWarning
memory > xS
memory > xrange
memory > xexpr
memory > xb
memory > xstop
memory > xvalue
memory > xBufferBlocked
memory > xtest
memory > xZeroDivisionError
memory > xeval
memory > xformatstr
memory > xStopIteration
memory > xIndexError
memory > xbytearray
memory > xMemoryError
memory > xstart
memory > xproto
memory > xIterationBlocked
memory > xopen
memory > xreversed
memory > xkw
memory > xtype
memory > xf
memory > xrepr
memory > xint
memory > xre
memory > xgetbuffer_with_null_view
memory > xit
memory > xBadIterable
memory > xX
memory > xc_int
memory > xOverflowError
memory > xx
memory > xBaseBytesTest
memory > xi
memory > xba
memory > xMAX_Py_ssize_t
memory > xIndexable
memory > x_b
memory > xsuper
memory > xs
memory > xc_char_p
memory > xsys
memory > xissubclass
memory > xbytes
memory > xtuple
memory > xB1
memory > xNotImplemented
memory > xByteArraySubclass
memory > xfloat
memory > xchr
memory > xBytesSubclassBlocked
memory > xargs
memory > xOSError
memory > xsubclass
memory > xos
memory > xc_size_t
memory > xc_ulong
memory > xbb
memory > xgetattr
memory > xid
memory > xSyntaxError
memory > xUnicodeEncodeError
memory > xiter
memory > xformat
memory > x__file__
memory > xord
memory > xunittest
memory > xelem
memory > xc_uint
memory > xc_ssize_t
memory > xenc
memory > xhash
memory > xY
memory > xnext
memory > xmap
memory > xIntBlocked
memory > xobject
memory > xmemoryview
memory > xA
memory > xctypes_type
memory > xB2
memory > x_a
memory > xkwargs
memory > xisinstance
memory > xBytesSubclass
memory > xlen
memory > xBufferError
memory > xmethod
memory > x__name__
memory > xa
memory > xTypeError
memory > xcopy_method
[] > test_bytes
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_endswith
        memory > xtest_setitem_error
        memory > xtest_center
        memory > xtest_format
        memory > xtest_rmod
        memory > xtest_partition_string_error
        memory > xtest_insert
        memory > xtest_del_expand
        memory > xtest_constructor_overflow
        memory > xtest_from_iterable
        memory > xcontains_bytes
        memory > xtest_from_buffer
        memory > xtest_rjust
        memory > xtest_getslice
        memory > xtest_init_override
        memory > xtest_pickle
        memory > xtest_decode
        memory > xtest_append
        memory > xtest_resize_forbidden
        memory > x__index__
        memory > xtest_constructor_type_errors
        memory > xtest_rsplit_unicodewhitespace
        memory > xtest_constructor_value_errors
        memory > xtest_find_etc_raise_correct_error_messages
        memory > xtest_split_string_error
        memory > xtest_obsolete_write_lock
        memory > xtest_from_mutating_list
        memory > xtest_hex_separator_five_bytes
        memory > xtest_from_ssize
        memory > xtest_integer_arguments_out_of_byte_range
        memory > xtest_imod
        memory > xtest_irepeat_1char
        memory > xtest_from_tuple
        memory > xtest_bytes_blocking
        memory > xtest_from_bytearray
        memory > xtest_nohash
        memory > xtest_bytearray_api
        memory > xtest_split_int_error
        memory > xtest_doc
        memory > xtest_split_unicodewhitespace
        memory > xtest_fifo_overrun
        memory > xtest_nosort
        memory > xtest_from_int
        memory > xtest_rfind
        memory > xtest_rindex
        memory > xtest_return_self
        memory > xtest_from_index
        memory > xtest_iterator_length_hint
        memory > xtest_partition_bytearray_doesnt_share_nullstring
        memory > xtest_index
        memory > xtest_from_format
        memory > xtest_rpartition
        memory > xtest_pop
        memory > xtest_compare_to_str
        memory > xtest_maketrans
        memory > xtest_to_str
        memory > xtest_empty_sequence
        memory > xtest_extend
        memory > xtest_remove
        memory > xtest_buffer_is_readonly
        memory > xtest_pickling
        memory > xtest_irepeat
        memory > xcheck_bytes_warnings
        memory > xtest_ljust
        memory > xtest_count
        memory > xtest_init_alloc
        memory > xfixtype
        memory > xtest_setslice_trap
        memory > xtest_repeat
        memory > xtest_repeat_after_setslice
        memory > xtest_setslice
        memory > xtest_extended_set_del_slice
        memory > xtest_regexps
        memory > xtest_replace
        memory > xtest_hex_separator_six_bytes
        memory > xtest_translate
        memory > xtest_literal
        memory > xtest_basic
        memory > xtest_join
        memory > xtest_copy
        memory > xtest_none_arguments
        memory > xtest_exhausted_iterator
        memory > xtest_hex
        memory > xtest_split_bytearray
        memory > xtest_extended_getslice
        memory > xtest_contains
        memory > xtest_partition
        memory > xbasetype
        memory > xtest_iconcat
        memory > xtest_setslice_extend
        memory > xtest_repr_str
        memory > xtest_mod
        memory > xtest_encoding
        memory > xtest_basics
        memory > xtest_compare
        memory > xtest_strip_int_error
        memory > xtest_concat
        memory > xtest_ord
        memory > xtest_strip_string_error
        memory > x__init__
        memory > xtest_iterator_pickling2
        memory > xtest_find
        memory > xtest_clear
        memory > xtest_rsplit_bytearray
        memory > xtest_getitem_error
        memory > xtest_setitem
        memory > xtest_fromhex
        memory > xtest_replace_int_error
        memory > xtest_xjust_int_error
        memory > xtest_free_after_iterating
        memory > xtest_reverse
        memory > xtest_iterator_pickling
        memory > xtest_reversed
        memory > xtest_startswith
        memory > xtest_alloc
        memory > xtest_hex_separator_basics
        memory > xtest_from_list
        memory > xtest_partition_int_error
        memory > xtest_custom
        memory > xtest_copied
        memory > xtest_compare_bytes_to_bytearray
        memory > xtype2test
        memory > xtest_returns_new_copy
        memory > xtest_delitem
        memory > xtest_constructor_exceptions
        memory > xmarshal
        memory > xtest_repeat_1char
        memory > xtest_strip_bytearray
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((xsys).xflags).xbytes_warning).if
              xcheck_bytes_warnings.write
                [xfunc]
                  memory > xwrapper
                  seq > @
                    seq
                      xwrapper.write
                        []
                          seq > @
                            (((unsupported)).apply)
                              (((unsupported)).apply ((((((xtest).xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xBytesWarning)))))))
                                (((unsupported)).apply ((((xfunc)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))))
                      (((unsupported)).apply ((xwrapper)))
              xcheck_bytes_warnings.write
                [xfunc]
                  seq > @
                    (((unsupported)).apply ((xfunc2)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                x__index__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)))
            (((unsupported)).apply)
              seq
                xtest_basics.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xb)))) (((xself).xtype2test)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).x__class__)) (((xself).xtype2test)))
                xtest_copy.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xself).xtype2test)).apply ("abcd"))
                        (((unsupported)).apply ((xcopy_method)) ((((unsupported)).apply (((xcopy).xcopy)) (((xcopy).xdeepcopy)))))
                          seq
                            xb.write (((xcopy_method)).apply ((xa)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xa)))) ((((xtype)).apply ((xb)))))
                xtest_empty_sequence.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xb)))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) (0))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) (1))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) (((xsys).xmaxsize)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((((xsys).xmaxsize).add 1)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (10) (100))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((2.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((((xsys).xmaxsize).neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) (((((xsys).xmaxsize).neg).sub 1)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) (((((xsys).xmaxsize).neg).sub 2)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply ((((unsupported)).apply ((xb)) (((((unsupported)).apply (10) (100)).neg)))))))
                xtest_from_iterable.write
                  [xself]
                    memory > x__getitem__
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ((((xrange)).apply (256))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xb)))) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (256))))))
                        xb.write ((((xself).xtype2test)).apply ((((unsupported)).apply (42))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("*"))
                        xb.write ((((xself).xtype2test)).apply ((((unsupported)).apply (43) (45))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xtuple)).apply ((xb)))) ((((unsupported)).apply ((((unsupported)).apply (43) (45))) ((((unsupported)).apply (45) (43))))))
                        xb.write ((((xself).xtype2test)).apply ((((xiter)).apply ((((xrange)).apply (256))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xb)))) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (256))))))
                        xb.write ((((xself).xtype2test)).apply ((((unsupported)).apply ((xi)) ((xi)) ((((xrange)).apply (256))) (((xi).mod 2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xb)))) (128))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ((((xlist)).apply ((((xrange)).apply (256))))) ((((unsupported)).apply (1) (2))))))
                        (((unsupported)).apply)
                          x__getitem__.write
                            [xself xi]
                              seq > @
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ((xi)))))
                        xb.write ((((xself).xtype2test)).apply ((((xS)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("x01x02x03"))
                xtest_from_tuple.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ((((xtuple)).apply ((((xrange)).apply (256))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xb)))) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (256))))))
                        xb.write ((((xself).xtype2test)).apply ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("x01x02x03"))
                xtest_from_list.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ((((xlist)).apply ((((xrange)).apply (256))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xb)))) (256))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (256))))))
                        xb.write ((((xself).xtype2test)).apply ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("x01x02x03"))
                xtest_from_mutating_list.write
                  [xself]
                    memory > x__index__
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__index__.write
                            [xself]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xa).xclear)).apply)
                                  (((unsupported)).apply (42))
                        xa.write (((unsupported)).apply ((((xX)).apply)) ((((xX)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xa)))) ("*"))
                        (((unsupported)).apply)
                          x__index__.write
                            [xself]
                              seq > @
                                seq
                                  ((((xlen)).apply ((xa))).less 1000).if
                                    bogusForceDataize.write ((((xa).xappend)).apply ((xself)))
                                  (((unsupported)).apply (42))
                        xa.write (((unsupported)).apply ((((xY)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xa)))) (("*".mul 1000)))
                xtest_from_index.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ((((unsupported)).apply ((((xIndexable)).apply)) ((((xIndexable)).apply (1))) ((((xIndexable)).apply (254))) ((((xIndexable)).apply (255))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply (0) (1) (254) (255))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply ((((xIndexable)).apply ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply ((((xIndexable)).apply (256))))))
                xtest_from_buffer.write
                  [xself]
                    memory > x__index__
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xself).xtype2test)).apply (((((xarray).xarray)).apply ("B") ((((unsupported)).apply (1) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ("x01x02x03"))
                        xa.write ((((xself).xtype2test)).apply ("x01x02x03"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ("x01x02x03"))
                        (((unsupported)).apply ((xbytes)))
                          x__index__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xTypeError)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xtype2test)).apply ((((xB)).apply ("foobar"))))) ("foobar"))
                xtest_from_ssize.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xtype2test)).apply (0))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xtype2test)).apply (1))) ("x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xtype2test)).apply (5))) ("x00x00x00x00x00"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xtype2test)).apply ("0") ("ascii"))) ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xtype2test)).apply ("0"))) ("0"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xself).xtype2test)) ((((xsys).xmaxsize).add 1)))
                xtest_constructor_type_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) (0.0))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) ((((unsupported)).apply ("0"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) ((((unsupported)).apply (0.0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) ((((unsupported)).apply ((((xC)).apply)))))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xself).xtype2test)) ("ascii"))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xself).xtype2test)) ("ignore"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) (0) ("ascii"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) ("") ("ascii"))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xself).xtype2test)) (0) ("ignore"))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xself).xtype2test)) ("") ("ignore"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) (""))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xself).xtype2test)) ("") ("ignore"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) ("") ("ascii"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xtype2test)) ("") ("ascii") ("ignore"))
                xtest_constructor_value_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply ((((xsys).xmaxsize).neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply (((((xsys).xmaxsize).neg).sub 1)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply (((((xsys).xmaxsize).neg).sub 2)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply (((((unsupported)).apply (10) (100)).neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply (256))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply (257))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply (((xsys).xmaxsize)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply ((((xsys).xmaxsize).add 1)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xtype2test)) ((((unsupported)).apply ((((unsupported)).apply (10) (100))))))
                xtest_constructor_overflow.write
                  [xself]
                    memory > xsize
                    seq > @
                      (((unsupported)).apply)
                        xsize.write (xMAX_Py_ssize_t)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOverflowError)) ((xMemoryError)))) (((xself).xtype2test)) ((xsize)))
                        (((unsupported)).apply ((((unsupported)).apply ((xOverflowError)) ((xMemoryError)))))
                          bogusForceDataize.write (((xbytearray)).apply (((xsize).sub 4)))
                xtest_constructor_exceptions.write
                  [xself]
                    memory > x__index__
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__index__.write
                            [xself]
                              seq > @
                                unsupported
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) (((xself).xtype2test)) ((((xBadInt)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) (((xself).xtype2test)) ((((unsupported)).apply ((((xBadInt)).apply)))))
                        (((unsupported)).apply)
                          x__iter__.write
                            [xself]
                              seq > @
                                unsupported
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) (((xself).xtype2test)) ((((xBadIterable)).apply)))
                xtest_compare.write
                  [xself]
                    memory > xb3
                    memory > xb1
                    memory > xb2
                    seq > @
                      seq
                        xb1.write ((((xself).xtype2test)).apply ((((unsupported)).apply (1) (2) (3))))
                        xb2.write ((((xself).xtype2test)).apply ((((unsupported)).apply (1) (2) (3))))
                        xb3.write ((((xself).xtype2test)).apply ((((unsupported)).apply (1) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb1)) ((xb2)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xb2).neq (xb3))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xb1).leq (xb2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xb1).leq (xb3))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xb1).less (xb3))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xb1).geq (xb2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xb3).geq (xb2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xb3).greater (xb2))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xb1).neq (xb2))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xb2).eq (xb3))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xb1).greater (xb2))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xb1).greater (xb3))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xb1).geq (xb3))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xb1).less (xb2))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xb3).less (xb2))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xb3).leq (xb2))))
                xtest_compare_to_str.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test)).apply ("0a0b0c")).eq "abc")) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test)).apply ("000a000b000c")).eq "abc")) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test)).apply ("a0b0c0")).eq "abc")) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test)).apply ("a000b000c000")).eq "abc")) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test)).apply).eq (((xstr)).apply))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test)).apply).neq (((xstr)).apply))) (TRUE))
                xtest_reversed.write
                  [xself]
                    memory > xinput
                    memory > xb
                    memory > xoutput
                    seq > @
                      seq
                        xinput.write (((xlist)).apply ((((xmap)).apply ((xord)) ("Hello"))))
                        xb.write ((((xself).xtype2test)).apply ((xinput)))
                        xoutput.write (((xlist)).apply ((((xreversed)).apply ((xb)))))
                        bogusForceDataize.write ((((xinput).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ((xinput)))
                xtest_getslice.write
                  [xself]
                    memory > xby
                    memory > xb
                    seq > @
                      seq
                        xby.write
                          [xs]
                            seq > @
                              (((unsupported)).apply (((((xself).xtype2test)).apply ((((xmap)).apply ((xord)) ((xs)))))))
                        xb.write (((xby)).apply ("Hello, world"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (5))))) ((((xby)).apply ("Hello"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (1) (5))))) ((((xby)).apply ("ello"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (5) (7))))) ((((xby)).apply (", "))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (7))))) ((((xby)).apply ("world"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (7) (12))))) ((((xby)).apply ("world"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (7) (100))))) ((((xby)).apply ("world"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((7.neg)))))) ((((xby)).apply ("Hello"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((11.neg)) ((7.neg)))))) ((((xby)).apply ("ello"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((7.neg)) ((5.neg)))))) ((((xby)).apply (", "))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((5.neg)))))) ((((xby)).apply ("world"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((5.neg)) (12))))) ((((xby)).apply ("world"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((5.neg)) (100))))) ((((xby)).apply ("world"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((100.neg)) (5))))) ((((xby)).apply ("Hello"))))
                xtest_extended_getslice.write
                  [xself]
                    memory > xL
                    memory > xindices
                    memory > xb
                    seq > @
                      seq
                        xL.write (((xlist)).apply ((((xrange)).apply (255))))
                        xb.write ((((xself).xtype2test)).apply ((xL)))
                        xindices.write (((unsupported)).apply (0) ("None: is there a None literal in the EO language?") (1) (3) (19) (100) (((xsys).xmaxsize)) ((1.neg)) ((2.neg)) ((31.neg)) ((100.neg)))
                        (((unsupported)).apply ((xstart)) ((xindices)))
                          (((unsupported)).apply ((xstop)) ((xindices)))
                            (((unsupported)).apply ((xstep)) ((((unsupported)).apply ((xindices)) ((((unsupported)).apply (1))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))) (((((xself).xtype2test)).apply ((((unsupported)).apply ((xL)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))))))
                xtest_encoding.write
                  [xself]
                    memory > xsample
                    memory > xb
                    seq > @
                      seq
                        xsample.write "Hello worldnu1234u5678u9abc"
                        (((unsupported)).apply ((xenc)) ((((unsupported)).apply ("utf-8") ("utf-16"))))
                          seq
                            xb.write ((((xself).xtype2test)).apply ((xsample)) ((xenc)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xself).xtype2test)).apply (((((xsample).xencode)).apply ((xenc)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeEncodeError)) (((xself).xtype2test)) ((xsample)) ("latin-1"))
                        xb.write ((((xself).xtype2test)).apply ((xsample)) ("latin-1") ("ignore"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xself).xtype2test)).apply ((((unsupported)).apply ((xsample)) ((((unsupported)).apply ((3.neg)))))) ("utf-8"))))
                xtest_decode.write
                  [xself]
                    memory > xsample
                    memory > xb
                    seq > @
                      seq
                        xsample.write "Hello worldnu1234u5678u9abc"
                        (((unsupported)).apply ((xenc)) ((((unsupported)).apply ("utf-8") ("utf-16"))))
                          seq
                            xb.write ((((xself).xtype2test)).apply ((xsample)) ((xenc)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xdecode)).apply ((xenc)))) ((xsample)))
                        xsample.write "Hello worldnx80x81xfexff"
                        xb.write ((((xself).xtype2test)).apply ((xsample)) ("latin-1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeDecodeError)) (((xb).xdecode)) ("utf-8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xdecode)).apply ("utf-8") ("ignore"))) ("Hello worldn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xb).xdecode)) ("ignore") ("utf-8"))) ("Hello worldn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("xe2x98x83")).xdecode)).apply)) ("u2603"))
                xtest_from_int.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xself).xtype2test)).apply)))
                        xb.write ((((xself).xtype2test)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xself).xtype2test)).apply (((((unsupported)).apply (0)).mul 10)))))
                        xb.write ((((xself).xtype2test)).apply (10000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xself).xtype2test)).apply (((((unsupported)).apply (0)).mul 10000)))))
                xtest_concat.write
                  [xself]
                    memory > xb1
                    memory > xb2
                    seq > @
                      seq
                        xb1.write ((((xself).xtype2test)).apply ("abc"))
                        xb2.write ((((xself).xtype2test)).apply ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb1).add (xb2))) ("abcdef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb1).add (((xbytes)).apply ("def")))) ("abcdef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("def")).add (xb1))) ("defabc"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((xb1).add "def")))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (("abc".add (xb2))))))
                xtest_repeat.write
                  [xself]
                    memory > xc
                    seq > @
                      (((unsupported)).apply ((xb)) ((((unsupported)).apply ("abc") (((((xself).xtype2test)).apply ("abc"))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).mul 3)) ("abcabcabc"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).mul 0)) (""))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).mul (1.neg))) (""))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((xb).mul 3.14)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply ((3.14.mul (xb))))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOverflowError)) ((xMemoryError)))))))
                            xc.write ((xb).mul ((xsys).xmaxsize))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOverflowError)) ((xMemoryError)))))))
                            (((unsupported)).apply ((xb)) (((xsys).xmaxsize)))
                xtest_repeat_1char.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test)).apply ("x")).mul 100)) (((((xself).xtype2test)).apply (((((unsupported)).apply ((((xord)).apply ("x")))).mul 100)))))
                xtest_contains.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("abc"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xord)).apply ("a"))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xint)).apply ((((xord)).apply ("a"))))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (200) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((unsupported)).apply ((((unsupported)).apply (300) ((xb)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((unsupported)).apply ((((unsupported)).apply ((1.neg)) ((xb)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((unsupported)).apply ((((unsupported)).apply ((((xsys).xmaxsize).add 1)) ((xb)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xb)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply ((((unsupported)).apply ((((xfloat)).apply ((((xord)).apply ("a"))))) ((xb)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply ((((unsupported)).apply ("a") ((xb)))))))
                        (((unsupported)).apply ((xf)) ((((unsupported)).apply ((xbytes)) ((xbytearray)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((xf)).apply (""))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((xf)).apply ("a"))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((xf)).apply ("b"))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((xf)).apply ("c"))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((xf)).apply ("ab"))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((xf)).apply ("bc"))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((xf)).apply ("abc"))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((xf)).apply ("ac"))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((xf)).apply ("d"))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((xf)).apply ("dab"))) ((xb)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((xf)).apply ("abd"))) ((xb)))
                xtest_fromhex.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xtype2test).xfromhex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xtype2test).xfromhex)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test).xfromhex)).apply (""))) (((((xself).xtype2test)).apply)))
                        xb.write (((xbytearray)).apply ((((unsupported)).apply (26) (43) (48))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test).xfromhex)).apply ("1a2B30"))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test).xfromhex)).apply ("  1A 2B  30   "))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test).xfromhex)).apply (" 1An2Bt30v"))) ((xb)))
                        (((unsupported)).apply ((xc)) ("x09x0Ax0Bx0Cx0Dx20"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test).xfromhex)).apply ((xc)))) (((((xself).xtype2test)).apply)))
                        (((unsupported)).apply ((xc)) ("x1Cx1Dx1Ex1Fx85xa0u2000u2002u2028"))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xtype2test).xfromhex)) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test).xfromhex)).apply ("0000"))) ("00"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xtype2test).xfromhex)) ("1B"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xtype2test).xfromhex)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xtype2test).xfromhex)) ("rt"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xtype2test).xfromhex)) ("1a b cd"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xtype2test).xfromhex)) ("x00"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xtype2test).xfromhex)) ("12   x00   34"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xpos)))) ((((unsupported)).apply ((((unsupported)).apply ("12 x4 56") (3))) ((((unsupported)).apply ("12 3x 56") (4))) ((((unsupported)).apply ("12 xy 56") (3))) ((((unsupported)).apply ("12 3xff 56") (4))))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcm)))
                              bogusForceDataize.write (((((xself).xtype2test).xfromhex)).apply ((xdata)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (("at position %s".mod (xpos))) ((((xstr)).apply (((xcm).xexception)))))
                xtest_hex.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xtype2test).xhex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xtype2test).xhex)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("")).xhex)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xbytearray)).apply ((((unsupported)).apply (26) (43) (48)))).xhex)).apply)) ("1a2b30"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("x1ax2bx30")).xhex)).apply)) ("1a2b30"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xmemoryview)).apply ("x1ax2bx30")).xhex)).apply)) ("1a2b30"))
                xtest_hex_separator_basics.write
                  [xself]
                    memory > xvalue
                    memory > xthree_bytes
                    seq > @
                      seq
                        xthree_bytes.write ((((xself).xtype2test)).apply ("xb9x01xef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply)) ("b901ef"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xthree_bytes).xhex)).apply (""))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xthree_bytes).xhex)).apply ("xx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":") (0))) ("b901ef"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xthree_bytes).xhex)).apply ("None: is there a None literal in the EO language?") (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xthree_bytes).xhex)).apply ("xff"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xthree_bytes).xhex)).apply ("xff"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xthree_bytes).xhex)).apply ("x80"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xthree_bytes).xhex)).apply ((((xchr)).apply (256))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":") (0))) ("b901ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply ("x00"))) ("b9x0001x00ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply ("x00"))) ("b9x0001x00ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply ("x7f"))) ("b9x7f01x7fef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply ("x7f"))) ("b9x7f01x7fef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":") (3))) ("b901ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":") (4))) ("b901ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":") ((4.neg)))) ("b901ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":"))) ("b9:01:ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply ("$"))) ("b9$01$ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":") (1))) ("b9:01:ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":") ((1.neg)))) ("b9:01:ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":") (2))) ("b9:01ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply (":") (1))) ("b9:01:ef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xthree_bytes).xhex)).apply ("*") ((2.neg)))) ("b901*ef"))
                        xvalue.write "{s005000000000worldi002000000000s005000000000helloi0010000000000"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xvalue).xhex)).apply (".") (8))) ("7b7305000000776f.726c646902000000.730500000068656c.6c6f690100000030"))
                xtest_hex_separator_five_bytes.write
                  [xself]
                    memory > xfive_bytes
                    seq > @
                      seq
                        xfive_bytes.write ((((xself).xtype2test)).apply ((((xrange)).apply (90) (95))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfive_bytes).xhex)).apply)) ("5a5b5c5d5e"))
                xtest_hex_separator_six_bytes.write
                  [xself]
                    memory > xsix_bytes
                    seq > @
                      seq
                        xsix_bytes.write ((((xself).xtype2test)).apply ((((unsupported)).apply (((xx).mul 3)) ((xx)) ((((xrange)).apply (1) (7))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply)) ("0306090c0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply (".") (1))) ("03.06.09.0c.0f.12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply (" ") (2))) ("0306 090c 0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply ("-") (3))) ("030609-0c0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply (":") (4))) ("0306:090c0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply (":") (5))) ("03:06090c0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply (":") (6))) ("0306090c0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply (":") (95))) ("0306090c0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply ("_") ((3.neg)))) ("030609_0c0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply (":") ((4.neg)))) ("0306090c:0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply ("@") ((5.neg)))) ("0306090c0f@12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply (":") ((6.neg)))) ("0306090c0f12"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsix_bytes).xhex)).apply (" ") ((95.neg)))) ("0306090c0f12"))
                xtest_join.write
                  [xself]
                    memory > xdot_join
                    memory > xexpected
                    memory > xseq
                    memory > xlst
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("")).xjoin)).apply ((((unsupported)).apply)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("")).xjoin)).apply ((((unsupported)).apply (""))))) (""))
                        (((unsupported)).apply ((xlst)) ((((unsupported)).apply ((((unsupported)).apply ("abc"))) ((((unsupported)).apply ("a") ("bc"))) ((((unsupported)).apply ("ab") ("c"))) ((((unsupported)).apply ("a") ("b") ("c"))))))
                          seq
                            xlst.write (((xlist)).apply ((((xmap)).apply (((xself).xtype2test)) ((xlst)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("")).xjoin)).apply ((xlst)))) ("abc"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("")).xjoin)).apply ((((xtuple)).apply ((xlst)))))) ("abc"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("")).xjoin)).apply ((((xiter)).apply ((xlst)))))) ("abc"))
                        xdot_join.write (((((xself).xtype2test)).apply (".:")).xjoin)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdot_join)).apply ((((unsupported)).apply ("ab") ("cd"))))) ("ab.:cd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdot_join)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("ab"))) ("cd"))))) ("ab.:cd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdot_join)).apply ((((unsupported)).apply ("ab") ((((xmemoryview)).apply ("cd"))))))) ("ab.:cd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdot_join)).apply ((((unsupported)).apply ((((xbytearray)).apply ("ab"))) ("cd"))))) ("ab.:cd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdot_join)).apply ((((unsupported)).apply ("ab") ((((xbytearray)).apply ("cd"))))))) ("ab.:cd"))
                        xseq.write ((((unsupported)).apply ("abc")).mul 1000)
                        xexpected.write ("abc".add (".:abc".mul 999))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdot_join)).apply ((xseq)))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply (" ")).xjoin)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xdot_join)).apply ((((unsupported)).apply ((((xbytearray)).apply ("ab"))) ("cd") ("ef"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xdot_join)).apply ((((unsupported)).apply ((((xmemoryview)).apply ("ab"))) ("cd") ("ef"))))
                xtest_count.write
                  [xself]
                    memory > xw
                    memory > xp
                    memory > xb
                    memory > xi
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("mississippi"))
                        xi.write 105
                        xp.write 112
                        xw.write 119
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ("i"))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ("ss"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ("w"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ((xi)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ((xw)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ("i") (6))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ("p") (6))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ("i") (1) (3))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ("p") (7) (9))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ((xi)) (6))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ((xp)) (6))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ((xi)) (1) (3))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcount)).apply ((xp)) (7) (9))) (1))
                xtest_startswith.write
                  [xself]
                    memory > xb
                    memory > xexc
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("hello"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((((xself).xtype2test)).apply).xstartswith)).apply ("anything"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xb).xstartswith)).apply ("hello"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xb).xstartswith)).apply ("hel"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xb).xstartswith)).apply ("h"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xb).xstartswith)).apply ("hellow"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xb).xstartswith)).apply ("ha"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xb).xstartswith)).apply ((((unsupported)).apply ("h"))))
                        xexc.write (((xstr)).apply (((xcm).xexception)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("bytes") ((xexc)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("tuple") ((xexc)))
                xtest_endswith.write
                  [xself]
                    memory > xb
                    memory > xexc
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("hello"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((xbytearray)).apply).xendswith)).apply ("anything"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xb).xendswith)).apply ("hello"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xb).xendswith)).apply ("llo"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xb).xendswith)).apply ("o"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xb).xendswith)).apply ("whello"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xb).xendswith)).apply ("no"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write ((((xb).xendswith)).apply ((((unsupported)).apply ("o"))))
                        xexc.write (((xstr)).apply (((xcm).xexception)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("bytes") ((xexc)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("tuple") ((xexc)))
                xtest_find.write
                  [xself]
                    memory > xw
                    memory > xb
                    memory > xi
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("mississippi"))
                        xi.write 105
                        xw.write 119
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ("ss"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ("w"))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ("mississippian"))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ((xi)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ((xw)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ("ss") (3))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ("ss") (1) (7))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ("ss") (1) (3))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ((xi)) (6))) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ((xi)) (1) (3))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xfind)).apply ((xw)) (1) (3))) ((1.neg)))
                        (((unsupported)).apply ((xindex)) ((((unsupported)).apply ((1.neg)) (256) ((((xsys).xmaxsize).add 1)))))
                          bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xValueError)) ("byte must be in range(0, 256)") (((xb).xfind)) ((xindex)))
                xtest_rfind.write
                  [xself]
                    memory > xw
                    memory > xb
                    memory > xi
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("mississippi"))
                        xi.write 105
                        xw.write 119
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ("ss"))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ("w"))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ("mississippian"))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ((xi)))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ((xw)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ("ss") (3))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ("ss") (0) (6))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ((xi)) (1) (3))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ((xi)) (3) (9))) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrfind)).apply ((xw)) (1) (3))) ((1.neg)))
                xtest_index.write
                  [xself]
                    memory > xw
                    memory > xb
                    memory > xi
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("mississippi"))
                        xi.write 105
                        xw.write 119
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xindex)).apply ("ss"))) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xindex)) ("w"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xindex)) ("mississippian"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xindex)).apply ((xi)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xindex)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xindex)).apply ("ss") (3))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xindex)).apply ("ss") (1) (7))) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xindex)) ("ss") (1) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xindex)).apply ((xi)) (6))) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xindex)).apply ((xi)) (1) (3))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xindex)) ((xw)) (1) (3))
                xtest_rindex.write
                  [xself]
                    memory > xw
                    memory > xb
                    memory > xi
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("mississippi"))
                        xi.write 105
                        xw.write 119
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrindex)).apply ("ss"))) (5))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xrindex)) ("w"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xrindex)) ("mississippian"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrindex)).apply ((xi)))) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xrindex)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrindex)).apply ("ss") (3))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrindex)).apply ("ss") (0) (6))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrindex)).apply ((xi)) (1) (3))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrindex)).apply ((xi)) (3) (9))) (7))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xrindex)) ((xw)) (1) (3))
                xtest_mod.write
                  [xself]
                    memory > xorig
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("hello, %b!"))
                        xorig.write (xb)
                        xb.write ((xb).mod "world")
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("hello, world!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xorig)) ("hello, %b!"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xb)) ((xorig)))))
                        xb.write ((((xself).xtype2test)).apply ("%s / 100 = %d%%"))
                        xa.write ((xb).mod (((unsupported)).apply ("seventy-nine") (79)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ("seventy-nine / 100 = 79%"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xa)))) (((xself).xtype2test)))
                        xb.write ((((xself).xtype2test)).apply ("hello,x00%b!"))
                        xb.write ((xb).mod "world")
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("hello,x00world!"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xb)))) (((xself).xtype2test)))
                xtest_imod.write
                  [xself]
                    memory > xorig
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("hello, %b!"))
                        xorig.write (xb)
                        (((unsupported)).apply ((xb)) ("world"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("hello, world!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xorig)) ("hello, %b!"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xb)) ((xorig)))))
                        xb.write ((((xself).xtype2test)).apply ("%s / 100 = %d%%"))
                        (((unsupported)).apply ((xb)) ((((unsupported)).apply ("seventy-nine") (79))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("seventy-nine / 100 = 79%"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xb)))) (((xself).xtype2test)))
                        xb.write ((((xself).xtype2test)).apply ("hello,x00%b!"))
                        (((unsupported)).apply ((xb)) ("world"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("hello,x00world!"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xb)))) (((xself).xtype2test)))
                xtest_rmod.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((((xself).xtype2test)).apply ("abc")).x__rmod__)).apply ("%r"))) ((xNotImplemented)))
                xtest_replace.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("mississippi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xreplace)).apply ("i") ("a"))) ("massassappa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xreplace)).apply ("ss") ("x"))) ("mixixippi"))
                xtest_replace_int_error.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("a b")).xreplace)) (32) (""))
                xtest_split_string_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("a b")).xsplit)) (" "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("a b")).xrsplit)) (" "))
                xtest_split_int_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("a b")).xsplit)) (32))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("a b")).xrsplit)) (32))
                xtest_split_unicodewhitespace.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)).apply ((xb)) ((((unsupported)).apply ("ax1Cb") ("ax1Db") ("ax1Eb") ("ax1Fb"))))
                          seq
                            xb.write ((((xself).xtype2test)).apply ((xb)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xsplit)).apply)) ((((unsupported)).apply ((xb)))))
                        xb.write ((((xself).xtype2test)).apply ("x09x0Ax0Bx0Cx0Dx1Cx1Dx1Ex1F"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xsplit)).apply)) ((((unsupported)).apply ("x1cx1dx1ex1f"))))
                xtest_rsplit_unicodewhitespace.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("x09x0Ax0Bx0Cx0Dx1Cx1Dx1Ex1F"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrsplit)).apply)) ((((unsupported)).apply ("x1cx1dx1ex1f"))))
                xtest_partition.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("mississippi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xpartition)).apply ("ss"))) ((((unsupported)).apply ("mi") ("ss") ("issippi"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xpartition)).apply ("w"))) ((((unsupported)).apply ("mississippi") ("") (""))))
                xtest_rpartition.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("mississippi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrpartition)).apply ("ss"))) ((((unsupported)).apply ("missi") ("ss") ("ippi"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrpartition)).apply ("i"))) ((((unsupported)).apply ("mississipp") ("i") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrpartition)).apply ("w"))) ((((unsupported)).apply ("") ("") ("mississippi"))))
                xtest_partition_string_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("a b")).xpartition)) (" "))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("a b")).xrpartition)) (" "))
                xtest_partition_int_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("a b")).xpartition)) (32))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("a b")).xrpartition)) (32))
                xtest_pickling.write
                  [xself]
                    memory > xps
                    memory > xq
                    memory > xb
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        (((unsupported)).apply ((xb)) ((((unsupported)).apply ("") ("a") ("abc") ("xffabx80") ("0037700"))))
                          seq
                            xb.write ((((xself).xtype2test)).apply ((xb)))
                            xps.write ((((xpickle).xdumps)).apply ((xb)) ((xproto)))
                            xq.write ((((xpickle).xloads)).apply ((xps)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xq)))
                xtest_iterator_pickling.write
                  [xself]
                    memory > xd
                    memory > xitorg
                    memory > xit
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        (((unsupported)).apply ((xb)) ((((unsupported)).apply ("") ("a") ("abc") ("xffabx80") ("0037700"))))
                          seq
                            (((unsupported)).apply ((xit)) ((xitorg)) ((((xiter)).apply (((((xself).xtype2test)).apply ((xb)))))))
                            xdata.write (((xlist)).apply (((((xself).xtype2test)).apply ((xb)))))
                            xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                            xit.write ((((xpickle).xloads)).apply ((xd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xitorg)))) ((((xtype)).apply ((xit)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((xdata)))
                            xit.write ((((xpickle).xloads)).apply ((xd)))
                            ((xb).not).if
                              (((unsupported)).apply)
                            bogusForceDataize.write (((xnext)).apply ((xit)))
                            xd.write ((((xpickle).xdumps)).apply ((xit)) ((xproto)))
                            xit.write ((((xpickle).xloads)).apply ((xd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (1))))))
                xtest_strip_bytearray.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("abc")).xstrip)).apply ((((xmemoryview)).apply ("ac"))))) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("abc")).xlstrip)).apply ((((xmemoryview)).apply ("ac"))))) ("bc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xtype2test)).apply ("abc")).xrstrip)).apply ((((xmemoryview)).apply ("ac"))))) ("ab"))
                xtest_strip_string_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("abc")).xstrip)) ("ac"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("abc")).xlstrip)) ("ac"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("abc")).xrstrip)) ("ac"))
                xtest_strip_int_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply (" abc ")).xstrip)) (32))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply (" abc ")).xlstrip)) (32))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply (" abc ")).xrstrip)) (32))
                xtest_center.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("abc"))
                        (((unsupported)).apply ((xfill_type)) ((((unsupported)).apply ((xbytes)) ((xbytearray)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xcenter)).apply (7) ((((xfill_type)).apply ("-"))))) (((((xself).xtype2test)).apply ("--abc--"))))
                xtest_ljust.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("abc"))
                        (((unsupported)).apply ((xfill_type)) ((((unsupported)).apply ((xbytes)) ((xbytearray)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xljust)).apply (7) ((((xfill_type)).apply ("-"))))) (((((xself).xtype2test)).apply ("abc----"))))
                xtest_rjust.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("abc"))
                        (((unsupported)).apply ((xfill_type)) ((((unsupported)).apply ((xbytes)) ((xbytearray)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xrjust)).apply (7) ((((xfill_type)).apply ("-"))))) (((((xself).xtype2test)).apply ("----abc"))))
                xtest_xjust_int_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("abc")).xcenter)) (7) (32))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("abc")).xljust)) (7) (32))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((((xself).xtype2test)).apply ("abc")).xrjust)) (7) (32))
                xtest_ord.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("0Ax7fx80xff"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xord)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((xi)) (((xi).add 1)))))))) ((xi)) ((((xrange)).apply ((((xlen)).apply ((xb)))))))) ((((unsupported)).apply (0) (65) (127) (128) (255))))
                xtest_maketrans.write
                  [xself]
                    memory > xtranstable
                    seq > @
                      seq
                        xtranstable.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test).xmaketrans)).apply ("abc") ("xyz"))) ((xtranstable)))
                        xtranstable.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtype2test).xmaketrans)).apply ("375376377") ("xyz"))) ((xtranstable)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xtype2test).xmaketrans)) ("abc") ("xyzq"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xtype2test).xmaketrans)) ("abc") ("def"))
                xtest_none_arguments.write
                  [xself]
                    memory > xo
                    memory > xl
                    memory > xx
                    memory > xh
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("hello"))
                        xl.write ((((xself).xtype2test)).apply ("l"))
                        xh.write ((((xself).xtype2test)).apply ("h"))
                        xx.write ((((xself).xtype2test)).apply ("x"))
                        xo.write ((((xself).xtype2test)).apply ("o"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2) (((((xb).xfind)).apply ((xl)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (3) (((((xb).xfind)).apply ((xl)) ((2.neg)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2) (((((xb).xfind)).apply ((xl)) ("None: is there a None literal in the EO language?") ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (0) (((((xb).xfind)).apply ((xh)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (3) (((((xb).xrfind)).apply ((xl)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (3) (((((xb).xrfind)).apply ((xl)) ((2.neg)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2) (((((xb).xrfind)).apply ((xl)) ("None: is there a None literal in the EO language?") ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (0) (((((xb).xrfind)).apply ((xh)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2) (((((xb).xindex)).apply ((xl)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (3) (((((xb).xindex)).apply ((xl)) ((2.neg)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2) (((((xb).xindex)).apply ((xl)) ("None: is there a None literal in the EO language?") ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (0) (((((xb).xindex)).apply ((xh)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (3) (((((xb).xrindex)).apply ((xl)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (3) (((((xb).xrindex)).apply ((xl)) ((2.neg)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2) (((((xb).xrindex)).apply ((xl)) ("None: is there a None literal in the EO language?") ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (0) (((((xb).xrindex)).apply ((xh)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (2) (((((xb).xcount)).apply ((xl)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (1) (((((xb).xcount)).apply ((xl)) ((2.neg)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (1) (((((xb).xcount)).apply ((xl)) ("None: is there a None literal in the EO language?") ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (0) (((((xb).xcount)).apply ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) (((((xb).xendswith)).apply ((xo)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) (((((xb).xendswith)).apply ((xo)) ((2.neg)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) (((((xb).xendswith)).apply ((xl)) ("None: is there a None literal in the EO language?") ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) (((((xb).xendswith)).apply ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) (((((xb).xstartswith)).apply ((xh)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) (((((xb).xstartswith)).apply ((xl)) ((2.neg)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (TRUE) (((((xb).xstartswith)).apply ((xh)) ("None: is there a None literal in the EO language?") ((2.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (FALSE) (((((xb).xstartswith)).apply ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                xtest_integer_arguments_out_of_byte_range.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("hello"))
                        (((unsupported)).apply ((xmethod)) ((((unsupported)).apply (((xb).xcount)) (((xb).xfind)) (((xb).xindex)) (((xb).xrfind)) (((xb).xrindex)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xmethod)) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xmethod)) (256))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xmethod)) (9999))
                xtest_find_etc_raise_correct_error_messages.write
                  [xself]
                    memory > xx
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("hello"))
                        xx.write ((((xself).xtype2test)).apply ("x"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("bfindb") (((xb).xfind)) ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("brfindb") (((xb).xrfind)) ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("bindexb") (((xb).xindex)) ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("brindexb") (((xb).xrindex)) ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("bcountb") (((xb).xcount)) ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("bstartswithb") (((xb).xstartswith)) ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("bendswithb") (((xb).xendswith)) ((xx)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_free_after_iterating.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xtest).xsupport).xcheck_free_after_iterating)).apply ((xself)) ((xiter)) (((xself).xtype2test)))
                        bogusForceDataize.write (((((xtest).xsupport).xcheck_free_after_iterating)).apply ((xself)) ((xreversed)) (((xself).xtype2test)))
                xtest_translate.write
                  [xself]
                    memory > xd
                    memory > xrosetta
                    memory > xc
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("hello"))
                        xrosetta.write (((xbytearray)).apply ((((xrange)).apply (256))))
                        (((unsupported)).apply ((((unsupported)).apply ((xrosetta)) ((((xord)).apply ("o"))))) ((((xord)).apply ("e"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xtranslate)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xtranslate)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xtranslate)) ((((xbytes)).apply ((((xrange)).apply (255))))))
                        xc.write ((((xb).xtranslate)).apply ((xrosetta)) ("hello"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("hello"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) (((xself).xtype2test)))
                        xc.write ((((xb).xtranslate)).apply ((xrosetta)))
                        xd.write ((((xb).xtranslate)).apply ((xrosetta)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ((xd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ("helle"))
                        xc.write ((((xb).xtranslate)).apply ((xrosetta)) ("l"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ("hee"))
                        xc.write ((((xb).xtranslate)).apply ("None: is there a None literal in the EO language?") ("e"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ("hllo"))
                        xc.write (((unsupported)).apply (((xb).xtranslate)) ((xrosetta)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ("helle"))
                        xc.write (((unsupported)).apply (((xb).xtranslate)) ((xrosetta)) ("l"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ("hee"))
                        xc.write (((unsupported)).apply (((xb).xtranslate)) ("None: is there a None literal in the EO language?") ("e"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ("hllo"))
            (((unsupported)).apply ((xBaseBytesTest)) (((xunittest).xTestCase)))
              seq
                xtype2test.write (xbytes)
                xtest_getitem_error.write
                  [xself]
                    memory > xmsg
                    memory > xb
                    seq > @
                      seq
                        xb.write "python"
                        xmsg.write "byte indices must be integers or slices"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((xb)) ("a"))
                xtest_buffer_is_readonly.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)).apply ((x__file__)) (((xos).xO_RDONLY)))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xfd)) ("rb") (0))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).xreadinto)) (""))
                xtest_custom.write
                  [xself]
                    memory > x__index__
                    memory > x__bytes__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__bytes__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((((xA)).apply)))) ("abc"))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xbytes)) ((((xA)).apply)))
                        (((unsupported)).apply)
                          x__bytes__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xbytes)) ((((xA)).apply)))
                        (((unsupported)).apply)
                          seq
                            x__bytes__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("a"))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((((xA)).apply)))) ("a"))
                        (((unsupported)).apply ((xstr)))
                          x__bytes__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((((xA)).apply ("u20ac"))))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((((xA)).apply ("u20ac"))) ("iso8859-15"))) ("xa4"))
                        (((unsupported)).apply)
                          x__bytes__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((xOtherBytesSubclass)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((((xA)).apply)))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xbytes)).apply ((((xA)).apply)))))) ((xOtherBytesSubclass)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xBytesSubclass)).apply ((((xA)).apply)))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xBytesSubclass)).apply ((((xA)).apply)))))) ((xBytesSubclass)))
                xtest_from_format.write
                  [xself]
                    memory > xPyBytes_FromFormat
                    memory > xptr
                    memory > xsize_max
                    memory > xptr_format
                    memory > xptr_formatter
                    memory > xsizeof_ptr
                    memory > x_testcapi
                    memory > xctypes
                    seq > @
                      seq
                        xctypes.write (((((xtest).xsupport).ximport_module)).apply ("ctypes"))
                        x_testcapi.write (((((xtest).xsupport).ximport_module)).apply ("_testcapi"))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xPyBytes_FromFormat.write ((xpythonapi).xPyBytes_FromFormat)
                        (((unsupported)).apply (((xPyBytes_FromFormat).xargtypes)) ((((unsupported)).apply ((xc_char_p)))))
                        (((unsupported)).apply (((xPyBytes_FromFormat).xrestype)) ((xpy_object)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("format"))) ("format"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("Hello %s !") ("world"))) ("Hello world !"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("c=%c") ((((xc_int)).apply (0))))) ("c=0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("c=%c") ((((xc_int)).apply ((((xord)).apply ("@"))))))) ("c=@"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("c=%c") ((((xc_int)).apply (255))))) ("c=xff"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("d=%d ld=%ld zd=%zd") ((((xc_int)).apply (1))) ((((xc_long)).apply (2))) ((((xc_size_t)).apply (3))))) ("d=1 ld=2 zd=3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("d=%d ld=%ld zd=%zd") ((((xc_int)).apply ((1.neg)))) ((((xc_long)).apply ((2.neg)))) ((((xc_size_t)).apply ((3.neg)))))) ("d=-1 ld=-2 zd=-3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("u=%u lu=%lu zu=%zu") ((((xc_uint)).apply (123))) ((((xc_ulong)).apply (456))) ((((xc_size_t)).apply (789))))) ("u=123 lu=456 zu=789"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("i=%i") ((((xc_int)).apply (123))))) ("i=123"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("i=%i") ((((xc_int)).apply ((123.neg)))))) ("i=-123"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("x=%x") ((((xc_int)).apply (2748))))) ("x=abc"))
                        xsizeof_ptr.write ((((xctypes).xsizeof)).apply ((xc_char_p)))
                        (((xos).xname).eq "nt").if
                          seq
                            xptr_format.write ((("0x%0{}X".xformat)).apply ((2.mul (xsizeof_ptr))))
                            xptr_formatter.write
                              [xptr]
                                seq > @
                                  (((unsupported)).apply (((xptr_format).mod (xptr))))
                          xptr_formatter.write
                            [xptr]
                              seq > @
                                (((unsupported)).apply (("%#x".mod (xptr))))
                        xptr.write 11259375
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("ptr=%p") ((((xc_char_p)).apply ((xptr)))))) ((((("ptr=".add (((xptr_formatter)).apply ((xptr)))).xencode)).apply ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("s=%s") ((((xc_char_p)).apply ("cstr"))))) ("s=cstr"))
                        xsize_max.write ((((xc_size_t)).apply ((1.neg))).xvalue)
                        (((unsupported)).apply ((((unsupported)).apply ((xformatstr)) ((xctypes_type)) ((xvalue)) ((xpy_formatter)))) ((((unsupported)).apply ((((unsupported)).apply ("%d") ((xc_int)) (((x_testcapi).xINT_MIN)) ((xstr)))) ((((unsupported)).apply ("%d") ((xc_int)) (((x_testcapi).xINT_MAX)) ((xstr)))) ((((unsupported)).apply ("%ld") ((xc_long)) (((x_testcapi).xLONG_MIN)) ((xstr)))) ((((unsupported)).apply ("%ld") ((xc_long)) (((x_testcapi).xLONG_MAX)) ((xstr)))) ((((unsupported)).apply ("%lu") ((xc_ulong)) (((x_testcapi).xULONG_MAX)) ((xstr)))) ((((unsupported)).apply ("%zd") ((xc_ssize_t)) (((x_testcapi).xPY_SSIZE_T_MIN)) ((xstr)))) ((((unsupported)).apply ("%zd") ((xc_ssize_t)) (((x_testcapi).xPY_SSIZE_T_MAX)) ((xstr)))) ((((unsupported)).apply ("%zu") ((xc_size_t)) ((xsize_max)) ((xstr)))) ((((unsupported)).apply ("%p") ((xc_char_p)) ((xsize_max)) ((xptr_formatter)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ((xformatstr)) ((((xctypes_type)).apply ((xvalue)))))) (((((((xpy_formatter)).apply ((xvalue))).xencode)).apply ("ascii"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("%5s") ("a"))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("%.3s") ("abcdef"))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("%%"))) ("%"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("[%%]"))) ("[%]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("%%%c") ((((xc_int)).apply ((((xord)).apply ("_"))))))) ("%_"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("%%s"))) ("%s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("%"))) ("%"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("x=%i y=%") ((((xc_int)).apply (2))) ((((xc_int)).apply (3))))) ("x=2 y=%"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xPyBytes_FromFormat)) ("%c") ((((xc_int)).apply ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xPyBytes_FromFormat)) ("%c") ((((xc_int)).apply (256))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply (""))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xPyBytes_FromFormat)).apply ("%s") (""))) (""))
                xtest_bytes_blocking.write
                  [xself]
                    memory > xi
                    memory > x__bytes__
                    seq > @
                      seq
                        (((unsupported)).apply ((xlist)))
                          x__bytes__.write "None: is there a None literal in the EO language?"
                        xi.write (((unsupported)).apply (0) (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xi)))) ("x00x01x02x03"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xbytes)) ((((xIterationBlocked)).apply ((xi)))))
                        (((unsupported)).apply ((xint)))
                          x__bytes__.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply (3))) ("000"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xbytes)) ((((xIntBlocked)).apply (3))))
                        (((unsupported)).apply ((xbytes)))
                          x__bytes__.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ("ab"))) ("ab"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xbytes)) ((((xBytesSubclassBlocked)).apply ("ab"))))
                        (((unsupported)).apply ((xbytearray)))
                          x__bytes__.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((((unsupported)).apply ((xba)) ((xbb)))) ((((unsupported)).apply ((((xbytearray)).apply ("ab"))) ((((xBufferBlocked)).apply ("ab"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xba)))) ("ab"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xbytes)) ((xbb)))
            (((unsupported)).apply ((xBaseBytesTest)) (((xunittest).xTestCase)))
              seq
                xtype2test.write (xbytearray)
                xtest_getitem_error.write
                  [xself]
                    memory > xmsg
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("python"))
                        xmsg.write "bytearray indices must be integers or slices"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((xb)) ("a"))
                xtest_setitem_error.write
                  [xself]
                    memory > xmsg
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("python"))
                        xmsg.write "bytearray indices must be integers or slices"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xb)) ("a"))) ("python"))
                xtest_nohash.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xhash)) ((((xbytearray)).apply)))
                xtest_bytearray_api.write
                  [xself]
                    memory > xb
                    memory > xtfn
                    memory > xsample
                    memory > xshort_sample
                    memory > xn
                    seq > @
                      seq
                        xshort_sample.write "Hello worldn"
                        xsample.write ((xshort_sample).add ("0".mul (20.sub (((xlen)).apply ((xshort_sample))))))
                        xtfn.write ((((xtempfile).xmktemp)).apply)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((xopen)).apply ((xtfn)) ("wb"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)).apply ((xshort_sample)))
                            (((unsupported)).apply ((((xopen)).apply ((xtfn)) ("rb"))) ((xf)))
                              seq
                                xb.write (((xbytearray)).apply (20))
                                xn.write ((((xf).xreadinto)).apply ((xb)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) ((((xlen)).apply ((xshort_sample)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((xsample)))))
                            (((unsupported)).apply ((((xopen)).apply ((xtfn)) ("wb"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)).apply ((xb)))
                            (((unsupported)).apply ((((xopen)).apply ((xtfn)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ((xsample)))
                          (((unsupported)).apply ((xOSError)))
                            bogusForceDataize.write ((((xos).xremove)).apply ((xtfn)))
                xtest_reverse.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("hello"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xreverse)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("olleh"))
                        xb.write (((xbytearray)).apply ("hello1"))
                        bogusForceDataize.write ((((xb).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("1olleh"))
                        xb.write (((xbytearray)).apply)
                        bogusForceDataize.write ((((xb).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xb)))
                xtest_clear.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("python"))
                        bogusForceDataize.write ((((xb).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (""))
                        xb.write (((xbytearray)).apply (""))
                        bogusForceDataize.write ((((xb).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (""))
                        xb.write (((xbytearray)).apply (""))
                        bogusForceDataize.write ((((xb).xappend)).apply ((((xord)).apply ("r"))))
                        bogusForceDataize.write ((((xb).xclear)).apply)
                        bogusForceDataize.write ((((xb).xappend)).apply ((((xord)).apply ("p"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("p"))
                xtest_copy.write
                  [xself]
                    memory > xbb
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("abc"))
                        xbb.write ((((xb).xcopy)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbb)) ("abc"))
                        xb.write (((xbytearray)).apply (""))
                        xbb.write ((((xb).xcopy)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbb)) (""))
                        xb.write (((xbytearray)).apply ("abc"))
                        xbb.write ((((xb).xcopy)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xbb)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xb)) ((xbb)))
                        bogusForceDataize.write ((((xbb).xappend)).apply ((((xord)).apply ("d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbb)) ("abcd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("abc"))
                xtest_regexps.write
                  [xself]
                    memory > xby
                    memory > xb
                    seq > @
                      seq
                        xby.write
                          [xs]
                            seq > @
                              (((unsupported)).apply ((((xbytearray)).apply ((((xmap)).apply ((xord)) ((xs)))))))
                        xb.write (((xby)).apply ("Hello, world"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xre).xfindall)).apply ("w+") ((xb)))) ((((unsupported)).apply ((((xby)).apply ("Hello"))) ((((xby)).apply ("world"))))))
                xtest_setitem.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ((((unsupported)).apply (1) (2) (3))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) (1))) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (1) (100) (3))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((1.neg)))) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (1) (100) (200))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) (0))) ((((xIndexable)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (10) (100) (200))))))
                        (((unsupported)).apply ((xIndexError)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) (3))) (0))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Didn't raise IndexError"))
                        (((unsupported)).apply ((xIndexError)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) ((10.neg)))) (0))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Didn't raise IndexError"))
                        (((unsupported)).apply ((xValueError)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) (0))) (256))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Didn't raise ValueError"))
                        (((unsupported)).apply ((xValueError)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) (0))) ((((xIndexable)).apply ((1.neg)))))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Didn't raise ValueError"))
                        (((unsupported)).apply ((xTypeError)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) (0))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Didn't raise TypeError"))
                xtest_delitem.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ((((xrange)).apply (10))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) (0))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((xrange)).apply (1) (10))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((1.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((xrange)).apply (1) (9))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) (4))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (1) (2) (3) (4) (6) (7) (8))))))
                xtest_setslice.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (10))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (0) (5))))) ((((xbytearray)).apply ((((unsupported)).apply (1) (1) (1) (1) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (1) (1) (1) (1) (1) (5) (6) (7) (8) (9))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (0) ((5.neg)))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (5) (6) (7) (8) (9))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (0) (0))))) ((((xbytearray)).apply ((((unsupported)).apply (0) (1) (2) (3) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((xrange)).apply (10))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((7.neg)) ((3.neg)))))) ((((xbytearray)).apply ((((unsupported)).apply (100) (101))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (0) (1) (2) (100) (101) (7) (8) (9))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (3) (5))))) ((((unsupported)).apply (3) (4) (5) (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((xrange)).apply (10))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (3) (0))))) ((((unsupported)).apply (42) (42) (42))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (0) (1) (2) (42) (42) (42) (3) (4) (5) (6) (7) (8) (9))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (3))))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (0) (1) (2) (102) (111) (111))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (3))))) ((((xmemoryview)).apply ("foo"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (102) (111) (111) (102) (111) (111))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (3) (4))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((((unsupported)).apply (102) (111) (111) (111) (111))))))
                        (((unsupported)).apply ((xelem)) ((((unsupported)).apply (5) ((5.neg)) (0) ((((xint)).apply ((((unsupported)).apply)))) ("str") (2.3) ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ("a") ("b"))) ((((unsupported)).apply ((((unsupported)).apply)))))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (3) (4))))) ((xelem)))
                        (((unsupported)).apply ((xelem)) ((((unsupported)).apply ((((unsupported)).apply (254) (255) (256))) ((((unsupported)).apply ((256.neg)) (9000))))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (3) (4))))) ((xelem)))
                xtest_setslice_extend.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ((((xrange)).apply (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (100))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (10))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (10) (100))))))
                        bogusForceDataize.write ((((xb).xextend)).apply ((((xrange)).apply (100) (110))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (10) (110))))))
                xtest_fifo_overrun.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply (10))
                        bogusForceDataize.write ((((xb).xpop)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (1))))))))))
                        (((unsupported)).apply ((xb)) ((((xbytes)).apply (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)))))))
                xtest_del_expand.write
                  [xself]
                    memory > xsize
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply (10))
                        xsize.write ((((xsys).xgetsizeof)).apply ((xb)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (1))))))))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (((((xsys).xgetsizeof)).apply ((xb)))) ((xsize)))
                xtest_extended_set_del_slice.write
                  [xself]
                    memory > xL
                    memory > xindices
                    memory > xb
                    memory > xdata
                    seq > @
                      seq
                        xindices.write (((unsupported)).apply (0) ("None: is there a None literal in the EO language?") (1) (3) (19) (300) ((((unsupported)).apply (1) (333))) (((xsys).xmaxsize)) ((1.neg)) ((2.neg)) ((31.neg)) ((300.neg)))
                        (((unsupported)).apply ((xstart)) ((xindices)))
                          (((unsupported)).apply ((xstop)) ((xindices)))
                            (((unsupported)).apply ((xstep)) ((((unsupported)).apply ((xindices)) ((((unsupported)).apply (1))))))
                              seq
                                xL.write (((xlist)).apply ((((xrange)).apply (255))))
                                xb.write (((xbytearray)).apply ((xL)))
                                xdata.write (((unsupported)).apply ((xL)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))
                                bogusForceDataize.write ((((xdata).xreverse)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xL)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))) ((xdata)))
                                (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))) ((xdata)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((xL)))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xL)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))))))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((xL)))))
                xtest_setslice_trap.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ((((xrange)).apply (256))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (8))))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply (((((xlist)).apply ((((xrange)).apply (8)))).add (((xlist)).apply ((((xrange)).apply (256)))))))))
                xtest_iconcat.write
                  [xself]
                    memory > xb1
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("abc"))
                        xb1.write (xb)
                        (((unsupported)).apply ((xb)) ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("abcdef"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xb1)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xb)) ((xb1)))
                        (((unsupported)).apply ((xb)) ("xyz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("abcdefxyz"))
                        (((unsupported)).apply ((xTypeError)))
                          (((unsupported)).apply ((xb)) (""))
                          bogusForceDataize.write ((((xself).xfail)).apply ("bytes += unicode didn't raise TypeError"))
                xtest_irepeat.write
                  [xself]
                    memory > xb1
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("abc"))
                        xb1.write (xb)
                        (((unsupported)).apply ((xb)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("abcabcabc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xb1)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xb)) ((xb1)))
                xtest_irepeat_1char.write
                  [xself]
                    memory > xb1
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("x"))
                        xb1.write (xb)
                        (((unsupported)).apply ((xb)) (100))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (("x".mul 100)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xb1)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xb)) ((xb1)))
                xtest_alloc.write
                  [xself]
                    memory > xalloc
                    memory > xseq
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply)
                        xalloc.write ((((xb).x__alloc__)).apply)
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xalloc)) (0))
                        xseq.write (((unsupported)).apply ((xalloc)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          seq
                            (((unsupported)).apply ((xb)) ("x"))
                            xalloc.write ((((xb).x__alloc__)).apply)
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((xalloc)) ((((xlen)).apply ((xb)))))
                            (((unsupported)).apply ((xalloc)) ((xseq))).if
                              bogusForceDataize.write ((((xseq).xappend)).apply ((xalloc)))
                xtest_init_alloc.write
                  [xself]
                    memory > xalloc
                    memory > xb
                    memory > xg
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply)
                        xg.write
                          []
                            memory > xalloc
                            memory > xa
                            seq > @
                              (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (100))))
                                seq
                                  (((unsupported)).apply ((xi)))
                                  xa.write (((xlist)).apply ((xb)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((((xlist)).apply ((((xrange)).apply (1) (((((xlen)).apply ((xa))).add 1)))))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xb)))) ((((xlen)).apply ((xa)))))
                                  bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((xlen)).apply ((xb)))) ((xi)))
                                  xalloc.write ((((xb).x__alloc__)).apply)
                                  bogusForceDataize.write ((((xself).xassertGreater)).apply ((xalloc)) ((((xlen)).apply ((xb)))))
                        bogusForceDataize.write ((((xb).x__init__)).apply ((((xg)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (1) (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xb)))) (99))
                        xalloc.write ((((xb).x__alloc__)).apply)
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xalloc)) ((((xlen)).apply ((xb)))))
                xtest_extend.write
                  [xself]
                    memory > xorig
                    memory > xa
                    seq > @
                      seq
                        xorig.write "hello"
                        xa.write (((xbytearray)).apply ((xorig)))
                        bogusForceDataize.write ((((xa).xextend)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((xorig).add (xorig))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (5))))) ((xorig)))
                        xa.write (((xbytearray)).apply (""))
                        bogusForceDataize.write ((((xa).xextend)).apply ((((xmap)).apply ((xint)) (((xorig).mul 25)))))
                        bogusForceDataize.write ((((xa).xextend)).apply ((((unsupported)).apply ((((xint)).apply ((xx)))) ((xx)) (((xorig).mul 25)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((xorig).mul 50)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((5.neg)))))) ((xorig)))
                        xa.write (((xbytearray)).apply (""))
                        bogusForceDataize.write ((((xa).xextend)).apply ((((xiter)).apply ((((xmap)).apply ((xint)) (((xorig).mul 50)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((xorig).mul 50)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((5.neg)))))) ((xorig)))
                        xa.write (((xbytearray)).apply (""))
                        bogusForceDataize.write ((((xa).xextend)).apply ((((xlist)).apply ((((xmap)).apply ((xint)) (((xorig).mul 50)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((xorig).mul 50)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((5.neg)))))) ((xorig)))
                        xa.write (((xbytearray)).apply (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xa).xextend)) ((((unsupported)).apply (0) (1) (2) (256))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xa).xextend)) ((((unsupported)).apply (0) (1) (2) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xa)))) (0))
                        xa.write (((xbytearray)).apply (""))
                        bogusForceDataize.write ((((xa).xextend)).apply ((((unsupported)).apply ((((xIndexable)).apply ((((xord)).apply ("a"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ("a"))
                xtest_remove.write
                  [xself]
                    memory > xc
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("hello"))
                        bogusForceDataize.write ((((xb).xremove)).apply ((((xord)).apply ("l"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("helo"))
                        bogusForceDataize.write ((((xb).xremove)).apply ((((xord)).apply ("l"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("heo"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((unsupported)).apply (((((xb).xremove)).apply ((((xord)).apply ("l"))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((unsupported)).apply (((((xb).xremove)).apply (400))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((((xb).xremove)).apply ("e"))))))
                        bogusForceDataize.write ((((xb).xremove)).apply ((((xord)).apply ("o"))))
                        bogusForceDataize.write ((((xb).xremove)).apply ((((xord)).apply ("h"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("e"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((((xb).xremove)).apply ("e"))))))
                        bogusForceDataize.write ((((xb).xremove)).apply ((((xIndexable)).apply ((((xord)).apply ("e"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (""))
                        xc.write (((xbytearray)).apply ((((unsupported)).apply (126) (127) (128) (129))))
                        bogusForceDataize.write ((((xc).xremove)).apply (127))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ((((xbytes)).apply ((((unsupported)).apply (126) (128) (129))))))
                        bogusForceDataize.write ((((xc).xremove)).apply (129))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) ((((xbytes)).apply ((((unsupported)).apply (126) (128))))))
                xtest_pop.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("world"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xpop)).apply)) ((((xord)).apply ("d"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xpop)).apply (0))) ((((xord)).apply ("w"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xpop)).apply ((2.neg)))) ((((xord)).apply ("r"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply (((((xb).xpop)).apply (10))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) ((((unsupported)).apply (((((((xbytearray)).apply).xpop)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xbytearray)).apply ("xff")).xpop)).apply)) (255))
                xtest_nosort.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) ((((unsupported)).apply (((((((xbytearray)).apply).xsort)).apply)))))
                xtest_append.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("hell"))
                        bogusForceDataize.write ((((xb).xappend)).apply ((((xord)).apply ("o"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("hello"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xappend)).apply (100))) ("None: is there a None literal in the EO language?"))
                        xb.write (((xbytearray)).apply)
                        bogusForceDataize.write ((((xb).xappend)).apply ((((xord)).apply ("A"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xb)))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((((xb).xappend)).apply ("o"))))))
                        xb.write (((xbytearray)).apply)
                        bogusForceDataize.write ((((xb).xappend)).apply ((((xIndexable)).apply ((((xord)).apply ("A"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("A"))
                xtest_insert.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("msssspp"))
                        bogusForceDataize.write ((((xb).xinsert)).apply (1) ((((xord)).apply ("i"))))
                        bogusForceDataize.write ((((xb).xinsert)).apply (4) ((((xord)).apply ("i"))))
                        bogusForceDataize.write ((((xb).xinsert)).apply ((2.neg)) ((((xord)).apply ("i"))))
                        bogusForceDataize.write ((((xb).xinsert)).apply (1000) ((((xord)).apply ("i"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("mississippi"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((unsupported)).apply (((((xb).xinsert)).apply (0) ("1"))))))
                        xb.write (((xbytearray)).apply)
                        bogusForceDataize.write ((((xb).xinsert)).apply (0) ((((xIndexable)).apply ((((xord)).apply ("A"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("A"))
                xtest_copied.write
                  [xself]
                    memory > xt
                    memory > xx
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("abc"))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xb)) (((((xb).xreplace)).apply ("abc") ("cde") (0))))
                        xt.write (((xbytearray)).apply ((((unsupported)).apply ((xi)) ((xi)) ((((xrange)).apply (256))))))
                        xx.write (((xbytearray)).apply (""))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xx)) (((((xx).xtranslate)).apply ((xt)))))
                xtest_partition_bytearray_doesnt_share_nullstring.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)) ((xc)))) (((((((xbytearray)).apply ("x")).xpartition)).apply ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (""))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xb)) ((xc)))
                        (((unsupported)).apply ((xb)) ("!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)) ((xc)))) (((((((xbytearray)).apply ("x")).xpartition)).apply ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((xc)) ((xa)))) (((((((xbytearray)).apply ("x")).xrpartition)).apply ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (""))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xb)) ((xc)))
                        (((unsupported)).apply ((xb)) ("!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xb)) ((xa)))) (((((((xbytearray)).apply ("x")).xrpartition)).apply ("y"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc)) (""))
                xtest_resize_forbidden.write
                  [xself]
                    memory > xorig
                    memory > xb
                    memory > xdelitem
                    memory > xresize
                    memory > xv
                    memory > xdelslice
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ((((xrange)).apply (10))))
                        xv.write (((xmemoryview)).apply ((xb)))
                        xresize.write
                          [xn]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (1) ((1.neg)))))) ((((xrange)).apply (((xn).add 1)) (((2.mul (xn)).sub 1)))))
                        bogusForceDataize.write (((xresize)).apply (10))
                        xorig.write (((unsupported)).apply ((xb)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xresize)) (11))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xorig)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xresize)) (9))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xorig)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xresize)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xorig)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xb).xpop)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xorig)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xb).xremove)) ((((unsupported)).apply ((xb)) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xorig)))
                        xdelitem.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) (1))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xdelitem)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xorig)))
                        xdelslice.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (1) ((1.neg)) (2))))) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xdelslice)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xorig)))
                xtest_obsolete_write_lock.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xgetbuffer_with_null_view)) ((((xbytearray)).apply)))
                xtest_iterator_pickling2.write
                  [xself]
                    memory > xitorig
                    memory > xd
                    memory > xorig
                    memory > xdata
                    seq > @
                      seq
                        xorig.write (((xbytearray)).apply ("abc"))
                        xdata.write (((xlist)).apply ("qwerty"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xitorig.write (((xiter)).apply ((xorig)))
                            xd.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorig)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xb)))) (((((xpickle).xloads)).apply ((xd)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply)))) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorig)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((xdata)))
                            bogusForceDataize.write (((xnext)).apply ((xitorig)))
                            xd.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorig)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xb)))) (((((xpickle).xloads)).apply ((xd)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply)))) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorig)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (1))))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (1) ((((xlen)).apply ((xorig)))))))
                              bogusForceDataize.write (((xnext)).apply ((xitorig)))
                            xd.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorig)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xb)))) (((((xpickle).xloads)).apply ((xd)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply)))) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorig)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((((xlen)).apply ((xorig)))))))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xitorig)))
                            xd.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorig)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xb)))) (((((xpickle).xloads)).apply ((xd)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply)))) ((xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply)))
                xtest_exhausted_iterator.write ((((xtest).xlist_tests).xCommonTest).xtest_exhausted_iterator)
                xtest_iterator_length_hint.write
                  [xself]
                    memory > xit
                    memory > xba
                    seq > @
                      seq
                        xba.write (((xbytearray)).apply ("ab"))
                        xit.write (((xiter)).apply ((xba)))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xba).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply)))
                xtest_repeat_after_setslice.write
                  [xself]
                    memory > xb1
                    memory > xb
                    memory > xb3
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply ("abc"))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply (2))))) ("x"))
                        xb1.write ((xb).mul 1)
                        xb3.write ((xb).mul 3)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb1)) ("xc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb1)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb3)) ("xcxcxc"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_repr_str.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xf)) ((((unsupported)).apply ((xstr)) ((xrepr)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xbytearray)).apply)))) ("bytearray(b'')"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xbytearray)).apply ((((unsupported)).apply (0))))))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((xbytearray)).apply ((((unsupported)).apply (0) (1) (254) (255))))))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ("abc"))) ("b'abc'"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ("'"))) ("b\"'\""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ("'\""))) ("b''\"'"))
                xtest_format.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xb)) ((((unsupported)).apply ("abc") ((((xbytearray)).apply ("abc"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xb)))) ((((xstr)).apply ((xb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xformat)).apply ((xb)) (""))) ((((xstr)).apply ((xb)))))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) (("b%sb".mod ((((xre).xescape)).apply (((((xtype)).apply ((xb))).x__name__))))))))
                              bogusForceDataize.write (((xformat)).apply ((xb)) ("s"))
                xtest_compare_bytes_to_bytearray.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("abc".eq (((xbytes)).apply ("abc")))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("ab".neq (((xbytes)).apply ("abc")))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("ab".leq (((xbytes)).apply ("abc")))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("ab".less (((xbytes)).apply ("abc")))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("abc".geq (((xbytes)).apply ("ab")))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("abc".greater (((xbytes)).apply ("ab")))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("abc".neq (((xbytes)).apply ("abc")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("ab".eq (((xbytes)).apply ("abc")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("ab".greater (((xbytes)).apply ("abc")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("ab".geq (((xbytes)).apply ("abc")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("abc".less (((xbytes)).apply ("ab")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("abc".leq (((xbytes)).apply ("ab")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("abc")).eq "abc")) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("ab")).neq "abc")) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("ab")).leq "abc")) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("ab")).less "abc")) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("abc")).geq "ab")) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("abc")).greater "ab")) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("abc")).neq "abc")) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("ab")).eq "abc")) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("ab")).greater "abc")) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("ab")).geq "abc")) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("abc")).less "ab")) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbytes)).apply ("abc")).leq "ab")) (FALSE))
                xtest_doc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xbytearray).x__doc__)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xbytearray).x__doc__).xstartswith)).apply ("bytearray("))) (((xbytearray).x__doc__)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xbytes).x__doc__)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xbytes).x__doc__).xstartswith)).apply ("bytes("))) (((xbytes).x__doc__)))
                xtest_from_bytearray.write
                  [xself]
                    memory > xsample
                    memory > xbuf
                    memory > xb
                    seq > @
                      seq
                        xsample.write (((xbytes)).apply ("Hello worldnx80x81xfexff"))
                        xbuf.write (((xmemoryview)).apply ((xsample)))
                        xb.write (((xbytearray)).apply ((xbuf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((xsample)))))
                xtest_to_str.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (""))) ("b''"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ("x"))) ("b'x'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ("x80"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xbytearray)).apply (""))))) ("bytearray(b'')"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xbytearray)).apply ("x"))))) ("bytearray(b'x')"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xbytearray)).apply ("x80"))))) ((((unsupported)).apply)))
                xtest_literal.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("Wonderful spam") ("Wonderful spam"))) ((((unsupported)).apply ("Wonderful spam too") ("Wonderful spam too"))) ((((unsupported)).apply ("xaax00000200") ("xaax00000200"))) ((((unsupported)).apply ("xaax00000200") ("xaax00000200"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((xs)))) ((xtests)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((xbytearray)).apply ((xs)) ("latin-1"))))
                        (((unsupported)).apply ((xc)) ((((xrange)).apply (128) (256))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xSyntaxError)) ((xeval)) (("b\"%s\"".mod (((xchr)).apply ((xc))))))
                xtest_split_bytearray.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((("a b".xsplit)).apply ((((xmemoryview)).apply (" "))))) ((((unsupported)).apply ("a") ("b"))))
                xtest_rsplit_bytearray.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((("a b".xrsplit)).apply ((((xmemoryview)).apply (" "))))) ((((unsupported)).apply ("a") ("b"))))
                xtest_return_self.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write (((xbytearray)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((((xb).xreplace)).apply ("") (""))) ((xb)))
                xtest_compare.write
                  [xself]
                    memory > xbytes_warning
                    seq > @
                      (((unsupported)).apply)
                        xbytes_warning.write
                          []
                            seq > @
                              (((unsupported)).apply ((((((xtest).xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xBytesWarning)))))))
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
                        (((unsupported)).apply ((((xbytes_warning)).apply)))
                          unsupported
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xmarshal.write
                  [xself xx]
                    seq > @
                      (((unsupported)).apply ((((xbytearray)).apply ((xx)))))
                xtest_returns_new_copy.write
                  [xself]
                    memory > xval
                    memory > xsep
                    memory > xnewval
                    memory > xmethod
                    seq > @
                      seq
                        xval.write ((((xself).xmarshal)).apply ("1234"))
                        (((unsupported)).apply ((xmethname)) ((((unsupported)).apply ("zfill") ("rjust") ("ljust") ("center"))))
                          seq
                            xmethod.write (((xgetattr)).apply ((xval)) ((xmethname)))
                            xnewval.write (((xmethod)).apply (3))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xval)) ((xnewval)))
                            bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xval)) ((xnewval)) (((xmethname).add " returned self on a mutable object")))
                        (((unsupported)).apply ((xexpr)) ((((unsupported)).apply ("val.split()[0]") ("val.rsplit()[0]") ("val.partition(b\".\")[0]") ("val.rpartition(b\".\")[2]") ("val.splitlines()[0]") ("val.replace(b\"\", b\"\")"))))
                          seq
                            xnewval.write (((xeval)).apply ((xexpr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xval)) ((xnewval)))
                            bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xval)) ((xnewval)) (((xexpr).add " returned val on a mutable object")))
                        xsep.write ((((xself).xmarshal)).apply (""))
                        xnewval.write ((((xsep).xjoin)).apply ((((unsupported)).apply ((xval)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xval)) ((xnewval)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xval)) ((xnewval)))
            (((unsupported)).apply ((((xtest).xstring_tests).xBaseTest)))
              seq
                xfixtype.write
                  [xself xobj]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xobj)) ((xstr))).if
                          (((unsupported)).apply (((((xself).xtype2test)).apply (((((xobj).xencode)).apply ("utf-8"))))))
                        (((unsupported)).apply (((((((xsuper)).apply).xfixtype)).apply ((xobj)))))
                xcontains_bytes.write TRUE
            (((unsupported)).apply ((xFixedStringTest)) (((xunittest).xTestCase)))
              xtype2test.write (xbytearray)
            (((unsupported)).apply ((xFixedStringTest)) (((xunittest).xTestCase)))
              xtype2test.write (xbytes)
            (((unsupported)).apply)
              seq
                xtest_basic.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xself).xtype2test)) (((xself).xbasetype)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xself).xtype2test)).apply)) (((xself).xbasetype)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((unsupported)).apply ("abcd") ("efgh"))))
                        (((unsupported)).apply ((((unsupported)).apply ((x_a)) ((x_b)))) ((((unsupported)).apply (((((xself).xtype2test)).apply ((xa)))) (((((xself).xtype2test)).apply ((xb)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((x_a).eq (x_a))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((x_a).neq (x_b))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((x_a).less (x_b))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((x_a).leq (x_b))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((x_b).geq (x_a))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((x_b).greater (x_a))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((x_a)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).add (xb))) (((x_a).add (x_b))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).add (xb))) (((xa).add (x_b))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).add (xb))) (((x_a).add (xb))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xa).mul 5).eq ((x_a).mul 5))))
                xtest_join.write
                  [xself]
                    memory > xs1
                    memory > xs2
                    memory > xs3
                    seq > @
                      seq
                        xs1.write ((((xself).xtype2test)).apply ("abcd"))
                        xs2.write (((((((xself).xbasetype)).apply).xjoin)).apply ((((unsupported)).apply ((xs1)))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xs1)) ((xs2)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xs2)))) (((xself).xbasetype)) ((((xtype)).apply ((xs2)))))
                        xs3.write ((((xs1).xjoin)).apply ((((unsupported)).apply ("abcd"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xs3)))) (((xself).xbasetype)))
                xtest_pickle.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xself).xtype2test)).apply ("abcd"))
                        (((unsupported)).apply (((xa).xx)) (10))
                        (((unsupported)).apply (((xa).xy)) (((((xself).xtype2test)).apply ("efgh"))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xb.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xa)) ((xproto)))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xa)))) ((((xid)).apply ((xb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xx)) (((xb).xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xy)) (((xb).xy)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xa)))) ((((xtype)).apply ((xb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xa).xy)))) ((((xtype)).apply (((xb).xy)))))
                xtest_copy.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xself).xtype2test)).apply ("abcd"))
                        (((unsupported)).apply (((xa).xx)) (10))
                        (((unsupported)).apply (((xa).xy)) (((((xself).xtype2test)).apply ("efgh"))))
                        (((unsupported)).apply ((xcopy_method)) ((((unsupported)).apply (((xcopy).xcopy)) (((xcopy).xdeepcopy)))))
                          seq
                            xb.write (((xcopy_method)).apply ((xa)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xa)))) ((((xid)).apply ((xb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xx)) (((xb).xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xy)) (((xb).xy)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xa)))) ((((xtype)).apply ((xb)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xa).xy)))) ((((xtype)).apply (((xb).xy)))))
                xtest_fromhex.write
                  [xself]
                    memory > x__new__
                    memory > x__init__
                    memory > xb
                    seq > @
                      seq
                        xb.write (((((xself).xtype2test).xfromhex)).apply ("1a2B30"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("x1ax2bx30"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xb)))) (((xself).xtype2test)))
                        (((unsupported)).apply (((xself).xbasetype)))
                          x__new__.write
                            [xcls xvalue]
                              memory > xme
                              seq > @
                                seq
                                  xme.write (((((xself).xbasetype).x__new__)).apply ((xcls)) ((xvalue)))
                                  (((unsupported)).apply (((xme).xfoo)) ("bar"))
                                  (((unsupported)).apply ((xme)))
                        xb.write ((((xB1).xfromhex)).apply ("1a2B30"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("x1ax2bx30"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xb)))) ((xB1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).xfoo)) ("bar"))
                        (((unsupported)).apply (((xself).xbasetype)))
                          x__init__.write
                            [xme]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((xself).xbasetype)) ((xbytes))).if
                                    bogusForceDataize.write (((((xself).xbasetype).x__init__)).apply ((xme)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                  (((unsupported)).apply (((xme).xfoo)) ("bar"))
                        xb.write ((((xB2).xfromhex)).apply ("1a2B30"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ("x1ax2bx30"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xb)))) ((xB2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).xfoo)) ("bar"))
            (((unsupported)).apply ((xbytearray)))
            (((unsupported)).apply ((xbytes)))
            (((unsupported)).apply ((xbytes)))
            (((unsupported)).apply ((xSubclassTest)) (((xunittest).xTestCase)))
              seq
                xbasetype.write (xbytearray)
                xtype2test.write (xByteArraySubclass)
                xtest_init_override.write
                  [xself]
                    memory > xx
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xbytearray)))
                          x__init__.write
                            [xme xnewarg]
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((xbytearray).x__init__)).apply ((xme)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        xx.write (((xsubclass)).apply (4) ("abcd"))
                        xx.write (((unsupported)).apply ((xsubclass)) (4) ("abcd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ("abcd"))
                        xx.write (((unsupported)).apply ((xsubclass)) (4) ("abcd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ("abcd"))
            (((unsupported)).apply ((xSubclassTest)) (((xunittest).xTestCase)))
              seq
                xbasetype.write (xbytes)
                xtype2test.write (xBytesSubclass)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)