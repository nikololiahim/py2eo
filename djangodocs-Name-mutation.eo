memory > xk
memory > xDirective
memory > xConsoleNode
memory > xHTMLTranslator
memory > xstr
memory > xt
memory > xStandaloneHTMLBuilder
memory > xVersionDirective
memory > xopen
memory > xsuper
memory > xCodeBlock
memory > xos
memory > xCmdoption
memory > xViewList
memory > xc
memory > xbold
memory > xre
memory > xsum
memory > xnodes
memory > xi
memory > xaddnodes
memory > xDjangoStandaloneHTMLBuilder
memory > xgetattr
memory > xExtensionError
memory > xn
memory > xjson
memory > xisinstance
memory > xline
memory > xlen
memory > xDjangoHTMLTranslator
memory > xfp
memory > x__name__
memory > xConsoleDirective
memory > xlogging
memory > xa
[] > djangodocs
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdepart_console_dummy
        memory > xoptional_arguments
        memory > xfinish
        memory > xsimple_option_desc_re2
        memory > xversion_text
        memory > xrun
        memory > xsetup
        memory > xhas_content
        memory > xsphinx_version
        memory > xlogger
        memory > xvisit_desc_parameterlist
        memory > xhtml_page_context_hook
        memory > x__getattr__
        memory > xrequired_arguments
        memory > xdepart_desc_parameterlist
        memory > xvisit_section
        memory > xparse_django_admin_node
        memory > xvisit_console_dummy
        memory > xvisit_versionmodified
        memory > xfinal_argument_whitespace
        memory > xdefault_role_error
        memory > xvisit_table
        memory > x__init__
        memory > xWIN_PROMPT
        memory > xname
        memory > xtagname
        memory > xdepart_versionmodified
        memory > xoption_spec
        memory > xdepart_table
        memory > xvisit_console_html
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xlogger.write ((((xlogging).xgetLogger)).apply ((x__name__)))
            xsimple_option_desc_re2.write ((((xre).xcompile)).apply ("([-_a-zA-Z0-9]+)(s*.*?)(?=,s+(?:/|-|--)|$)"))
            xsetup.write
              [xapp]
                seq > @
                  seq
                    (((unsupported)).apply (((xapp).xadd_crossref_type)) ("setting") ("setting") ("pair: %s; setting"))
                    (((unsupported)).apply (((xapp).xadd_crossref_type)) ("templatetag") ("ttag") ("pair: %s; template tag"))
                    (((unsupported)).apply (((xapp).xadd_crossref_type)) ("templatefilter") ("tfilter") ("pair: %s; template filter"))
                    (((unsupported)).apply (((xapp).xadd_crossref_type)) ("fieldlookup") ("lookup") ("pair: %s; field lookup type"))
                    (((unsupported)).apply (((xapp).xadd_object_type)) ("django-admin") ("djadmin") ("pair: %s; django-admin command") ((xparse_django_admin_node)))
                    bogusForceDataize.write ((((xapp).xadd_directive)).apply ("django-admin-option") ((xCmdoption)))
                    bogusForceDataize.write ((((xapp).xadd_config_value)).apply ("django_next_version") ("0.0") (TRUE))
                    bogusForceDataize.write ((((xapp).xadd_directive)).apply ("versionadded") ((xVersionDirective)))
                    bogusForceDataize.write ((((xapp).xadd_directive)).apply ("versionchanged") ((xVersionDirective)))
                    bogusForceDataize.write ((((xapp).xadd_builder)).apply ((xDjangoStandaloneHTMLBuilder)))
                    bogusForceDataize.write ((((xapp).xset_translator)).apply ("djangohtml") ((xDjangoHTMLTranslator)))
                    bogusForceDataize.write ((((xapp).xset_translator)).apply ("json") ((xDjangoHTMLTranslator)))
                    (((unsupported)).apply (((xapp).xadd_node)) ((xConsoleNode)) ((((unsupported)).apply ((xvisit_console_html)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xvisit_console_dummy)) ((xdepart_console_dummy)))) ((((unsupported)).apply ((xvisit_console_dummy)) ((xdepart_console_dummy)))) ((((unsupported)).apply ((xvisit_console_dummy)) ((xdepart_console_dummy)))) ((((unsupported)).apply ((xvisit_console_dummy)) ((xdepart_console_dummy)))))
                    bogusForceDataize.write ((((xapp).xadd_directive)).apply ("console") ((xConsoleDirective)))
                    bogusForceDataize.write ((((xapp).xconnect)).apply ("html-page-context") ((xhtml_page_context_hook)))
                    bogusForceDataize.write ((((xapp).xadd_role)).apply ("default-role-error") ((xdefault_role_error)))
                    (((unsupported)).apply ((((unsupported)).apply ("parallel_read_safe") (TRUE))))
            (((unsupported)).apply ((xDirective)))
              seq
                xhas_content.write TRUE
                xrequired_arguments.write 1
                xoptional_arguments.write 1
                xfinal_argument_whitespace.write TRUE
                xoption_spec.write (((unsupported)).apply)
                xrun.write
                  [xself]
                    memory > xret
                    memory > xenv
                    memory > xmsg
                    memory > xnode
                    seq > @
                      seq
                        ((((xlen)).apply (((xself).xarguments))).greater 1).if
                          seq
                            xmsg.write (((unsupported)).apply (((((unsupported)).apply).xformat)) (((xself).xname)))
                            (((unsupported)).apply (((((xself).xerror)).apply ((xmsg)))))
                        xenv.write (((((xself).xstate).xdocument).xsettings).xenv)
                        xret.write (((unsupported)).apply)
                        xnode.write ((((xaddnodes).xversionmodified)).apply)
                        bogusForceDataize.write ((((xret).xappend)).apply ((xnode)))
                        ((((unsupported)).apply (((xself).xarguments)) (0)).eq (((xenv).xconfig).xdjango_next_version)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xnode)) ("version"))) ("Development version"))
                          (((unsupported)).apply ((((unsupported)).apply ((xnode)) ("version"))) ((((unsupported)).apply (((xself).xarguments)) (0))))
                        (((unsupported)).apply ((((unsupported)).apply ((xnode)) ("type"))) (((xself).xname)))
                        ((xself).xcontent).if
                          bogusForceDataize.write (((((xself).xstate).xnested_parse)).apply (((xself).xcontent)) (((xself).xcontent_offset)) ((xnode)))
                        (((unsupported)).apply ((xExtensionError)))
                          bogusForceDataize.write (((((((xenv).xget_domain)).apply ("changeset")).xnote_changeset)).apply ((xnode)))
                          bogusForceDataize.write ((((xenv).xnote_versionchange)).apply ((((unsupported)).apply ((xnode)) ("type"))) ((((unsupported)).apply ((xnode)) ("version"))) ((xnode)) (((xself).xlineno)))
                        (((unsupported)).apply ((xret)))
            (((unsupported)).apply ((xHTMLTranslator)))
              seq
                (((unsupported)).apply)
                xvisit_table.write
                  [xself xnode]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcontext).xappend)).apply (((xself).xcompact_p)))
                        (((unsupported)).apply (((xself).xcompact_p)) (TRUE))
                        ((xsphinx_version).geq (((unsupported)).apply (4) (3))).if
                          bogusForceDataize.write (((((xself).x_table_row_indices).xappend)).apply (0))
                          (((unsupported)).apply (((xself).x_table_row_index)) (0))
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply ((((unsupported)).apply (((xself).xstarttag)) ((xnode)) ("table") ("docutils"))))
                xdepart_table.write
                  [xself xnode]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcompact_p)) ((((((xself).xcontext).xpop)).apply)))
                        ((xsphinx_version).geq (((unsupported)).apply (4) (3))).if
                          bogusForceDataize.write (((((xself).x_table_row_indices).xpop)).apply)
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply ("</table>n"))
                xvisit_desc_parameterlist.write
                  [xself xnode]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply ("("))
                        (((unsupported)).apply (((xself).xfirst_param)) (1))
                        (((unsupported)).apply (((xself).xoptional_param_level)) (0))
                        (((unsupported)).apply (((xself).xparam_separator)) (((xnode).xchild_text_separator)))
                        (((unsupported)).apply (((xself).xrequired_params_left)) ((((xsum)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xc)) (((xaddnodes).xdesc_parameter)))) ((xc)) (((xnode).xchildren)))))))
                xdepart_desc_parameterlist.write
                  [xself xnode]
                    seq > @
                      bogusForceDataize.write (((((xself).xbody).xappend)).apply (")"))
                xversion_text.write (((unsupported)).apply ("versionchanged") ("Changed in Django %s") ("versionadded") ("New in Django %s"))
                xvisit_versionmodified.write
                  [xself xnode]
                    memory > xversion_text
                    memory > xtitle
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply ((((unsupported)).apply (((xself).xstarttag)) ((xnode)) ("div") ((((unsupported)).apply ((xnode)) ("type"))))))
                        xversion_text.write (((((xself).xversion_text).xget)).apply ((((unsupported)).apply ((xnode)) ("type"))))
                        (xversion_text).if
                          seq
                            xtitle.write ("%s%s".mod (((unsupported)).apply (((xversion_text).mod (((unsupported)).apply ((xnode)) ("version")))) (((((xlen)).apply ((xnode))).if ":" "."))))
                            bogusForceDataize.write (((((xself).xbody).xappend)).apply (("<span class=\"title\">%s</span> ".mod (xtitle))))
                xdepart_versionmodified.write
                  [xself xnode]
                    seq > @
                      bogusForceDataize.write (((((xself).xbody).xappend)).apply ("</div>n"))
                xvisit_section.write
                  [xself xnode]
                    memory > xold_ids
                    seq > @
                      seq
                        xold_ids.write ((((xnode).xget)).apply ("ids") ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xnode)) ("ids"))) ((((unsupported)).apply (("s-".add (xi))) ((xi)) ((xold_ids)))))
                        bogusForceDataize.write ((((((unsupported)).apply ((xnode)) ("ids")).xextend)).apply ((xold_ids)))
                        bogusForceDataize.write ((((((xsuper)).apply).xvisit_section)).apply ((xnode)))
                        (((unsupported)).apply ((((unsupported)).apply ((xnode)) ("ids"))) ((xold_ids)))
            xparse_django_admin_node.write
              [xenv xsig xsignode]
                memory > xtitle
                memory > xcommand
                seq > @
                  seq
                    xcommand.write (((unsupported)).apply (((((xsig).xsplit)).apply (" "))) (0))
                    (((unsupported)).apply ((((unsupported)).apply (((xenv).xref_context)) ("std:program"))) ((xcommand)))
                    xtitle.write ("django-admin %s".mod (xsig))
                    (((unsupported)).apply ((xsignode)) (((((xaddnodes).xdesc_name)).apply ((xtitle)) ((xtitle)))))
                    (((unsupported)).apply ((xcommand)))
            (((unsupported)).apply ((xStandaloneHTMLBuilder)))
              seq
                (((unsupported)).apply)
                xname.write "djangohtml"
                xfinish.write
                  [xself]
                    memory > xtemplatebuiltins
                    memory > xxrefs
                    memory > xoutfilename
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xfinish)).apply)
                        bogusForceDataize.write ((((xlogger).xinfo)).apply ((((xbold)).apply ("writing templatebuiltins.js..."))))
                        xxrefs.write (((unsupported)).apply ((((unsupported)).apply ((((xself).xenv).xdomaindata)) ("std"))) ("objects"))
                        xtemplatebuiltins.write (((unsupported)).apply ("ttags") ((((unsupported)).apply ((xn)) ((((unsupported)).apply ((((unsupported)).apply ((xt)) ((xn)))) ((((unsupported)).apply ((xk)) ((xa)))))) (((((xxrefs).xitems)).apply)) ((((xt).eq "templatetag").and ((xk).eq "ref/templates/builtins"))))) ("tfilters") ((((unsupported)).apply ((xn)) ((((unsupported)).apply ((((unsupported)).apply ((xt)) ((xn)))) ((((unsupported)).apply ((xk)) ((xa)))))) (((((xxrefs).xitems)).apply)) ((((xt).eq "templatefilter").and ((xk).eq "ref/templates/builtins"))))))
                        xoutfilename.write (((((xos).xpath).xjoin)).apply (((xself).xoutdir)) ("templatebuiltins.js"))
                        (((unsupported)).apply ((((xopen)).apply ((xoutfilename)) ("w"))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xfp).xwrite)).apply ("var django_template_builtins = "))
                            bogusForceDataize.write ((((xjson).xdump)).apply ((xtemplatebuiltins)) ((xfp)))
                            bogusForceDataize.write ((((xfp).xwrite)).apply (";n"))
            (((unsupported)).apply (((xnodes).xliteral_block)))
              seq
                (((unsupported)).apply)
                xtagname.write "ConsoleNode"
                x__init__.write
                  [xself xlitblk_obj]
                    seq > @
                      (((unsupported)).apply (((xself).xwrapped)) ((xlitblk_obj)))
                x__getattr__.write
                  [xself xattr]
                    seq > @
                      seq
                        ((xattr).eq "wrapped").if
                          (((unsupported)).apply ((((xself).x__dict__).xwrapped)))
                        (((unsupported)).apply ((((xgetattr)).apply (((xself).xwrapped)) ((xattr)))))
            xvisit_console_dummy.write
              [xself xnode]
                seq > @
                  seq
                    unsupported
                    bogusForceDataize.write ((((xself).xvisit_literal_block)).apply ((xnode)))
            xdepart_console_dummy.write
              [xself xnode]
                seq > @
                  seq
                    unsupported
                    bogusForceDataize.write ((((xself).xdepart_literal_block)).apply ((xnode)))
            xvisit_console_html.write
              [xself xnode]
                memory > xwarner
                memory > xuid
                memory > xhighlighted
                memory > xwin_text
                memory > xhighlight_args
                memory > xlinenos
                seq > @
                  seq
                    unsupported
                    ((((unsupported)).apply ((((xself).xbuilder).xname)) ((((unsupported)).apply ("djangohtml") ("json")))).and (((unsupported)).apply ((xnode)) ("win_console_text"))).if
                      seq
                        (((unsupported)).apply ((((xself).xdocument).x_console_directive_used_flag)) (TRUE))
                        xuid.write (((unsupported)).apply ((xnode)) ("uid"))
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply (((((unsupported)).apply).mod (((unsupported)).apply ("id") ((xuid))))))
                        (((unsupported)).apply (((xnodes).xSkipNode)))
                          bogusForceDataize.write ((((xself).xvisit_literal_block)).apply ((xnode)))
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply ("</section>n"))
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply (("<section class=\"c-content-win\" id=\"c-content-%(id)s-win\">n".mod (((unsupported)).apply ("id") ((xuid))))))
                        xwin_text.write (((unsupported)).apply ((xnode)) ("win_console_text"))
                        xhighlight_args.write (((unsupported)).apply ("force") (TRUE))
                        xlinenos.write ((((xnode).xget)).apply ("linenos") (FALSE))
                        xwarner.write
                          [xmsg]
                            seq > @
                              bogusForceDataize.write (((((xself).xbuilder).xwarn)).apply ((xmsg)) ((((unsupported)).apply ((((xself).xbuilder).xcurrent_docname)) (((xnode).xline)))))
                        xhighlighted.write (((unsupported)).apply ((((xself).xhighlighter).xhighlight_block)) ((xwin_text)) ("doscon") ((xwarner)) ((xlinenos)) ((((unsupported)).apply ((xhighlight_args)))))
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply ((xhighlighted)))
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply ("</section>n"))
                        bogusForceDataize.write (((((xself).xbody).xappend)).apply ("</div>n"))
                        (((unsupported)).apply (((xnodes).xSkipNode)))
                      bogusForceDataize.write ((((xself).xvisit_literal_block)).apply ((xnode)))
            (((unsupported)).apply ((xCodeBlock)))
              seq
                (((unsupported)).apply)
                xrequired_arguments.write 0
                xWIN_PROMPT.write "...> "
                xrun.write
                  [xself]
                    memory > xargs_to_win
                    memory > xlit_blk_obj
                    memory > xwin_content
                    memory > xcode_block_to_win
                    memory > xcmdline_to_win
                    memory > xenv
                    seq > @
                      seq
                        xargs_to_win.write
                          [xcmdline]
                            memory > xout
                            memory > xchanged
                            memory > xtoken
                            seq > @
                              seq
                                xchanged.write FALSE
                                xout.write (((unsupported)).apply)
                                (((unsupported)).apply ((xtoken)) (((((xcmdline).xsplit)).apply)))
                                  seq
                                    ((((unsupported)).apply ((xtoken)) ((((unsupported)).apply (2)))).eq "./").if
                                      seq
                                        xtoken.write (((unsupported)).apply ((xtoken)) ((((unsupported)).apply (2))))
                                        xchanged.write TRUE
                                      ((((unsupported)).apply ((xtoken)) ((((unsupported)).apply (2)))).eq "~/").if
                                        seq
                                          xtoken.write ("%HOMEPATH%\\".add (((unsupported)).apply ((xtoken)) ((((unsupported)).apply (2)))))
                                          xchanged.write TRUE
                                        ((xtoken).eq "make").if
                                          seq
                                            xtoken.write "make.bat"
                                            xchanged.write TRUE
                                    ((((unsupported)).apply ("://") ((xtoken))).and (((unsupported)).apply ("git") ((xcmdline)))).if
                                      seq
                                        bogusForceDataize.write ((((xout).xappend)).apply (((((xtoken).xreplace)).apply ("/") ("\\"))))
                                        xchanged.write TRUE
                                      bogusForceDataize.write ((((xout).xappend)).apply ((xtoken)))
                                (xchanged).if
                                  (((unsupported)).apply ((((" ".xjoin)).apply ((xout)))))
                                (((unsupported)).apply ((xcmdline)))
                        xcmdline_to_win.write
                          [xline]
                            seq > @
                              seq
                                ((((xline).xstartswith)).apply ("# ")).if
                                  (((unsupported)).apply (("REM ".add (((xargs_to_win)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply (2)))))))))
                                ((((xline).xstartswith)).apply ("$ # ")).if
                                  (((unsupported)).apply (("REM ".add (((xargs_to_win)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply (4)))))))))
                                ((((xline).xstartswith)).apply ("$ ./manage.py")).if
                                  (((unsupported)).apply (("manage.py ".add (((xargs_to_win)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply (13)))))))))
                                ((((xline).xstartswith)).apply ("$ manage.py")).if
                                  (((unsupported)).apply (("manage.py ".add (((xargs_to_win)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply (11)))))))))
                                ((((xline).xstartswith)).apply ("$ ./runtests.py")).if
                                  (((unsupported)).apply (("runtests.py ".add (((xargs_to_win)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply (15)))))))))
                                ((((xline).xstartswith)).apply ("$ ./")).if
                                  (((unsupported)).apply ((((xargs_to_win)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply (4))))))))
                                ((((xline).xstartswith)).apply ("$ python3")).if
                                  (((unsupported)).apply (("py ".add (((xargs_to_win)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply (9)))))))))
                                ((((xline).xstartswith)).apply ("$ python")).if
                                  (((unsupported)).apply (("py ".add (((xargs_to_win)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply (8)))))))))
                                ((((xline).xstartswith)).apply ("$ ")).if
                                  (((unsupported)).apply ((((xargs_to_win)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply (2))))))))
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xcode_block_to_win.write
                          [xcontent]
                            memory > xmodline
                            memory > xlines
                            memory > xbchanged
                            seq > @
                              seq
                                xbchanged.write FALSE
                                xlines.write (((unsupported)).apply)
                                (((unsupported)).apply ((xline)) ((xcontent)))
                                  seq
                                    xmodline.write (((xcmdline_to_win)).apply ((xline)))
                                    (((unsupported)).apply ((xmodline)) ("None: is there a None literal in the EO language?")).if
                                      bogusForceDataize.write ((((xlines).xappend)).apply ((xline)))
                                      seq
                                        bogusForceDataize.write ((((xlines).xappend)).apply ((((xself).xWIN_PROMPT).add (xmodline))))
                                        xbchanged.write TRUE
                                (xbchanged).if
                                  (((unsupported)).apply ((((xViewList)).apply ((xlines)))))
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xenv.write (((((xself).xstate).xdocument).xsettings).xenv)
                        (((unsupported)).apply (((xself).xarguments)) ((((unsupported)).apply ("console"))))
                        xlit_blk_obj.write (((unsupported)).apply (((((((xsuper)).apply).xrun)).apply)) (0))
                        (((unsupported)).apply (((((xenv).xapp).xbuilder).xname)) ((((unsupported)).apply ("djangohtml") ("json")))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xlit_blk_obj)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlit_blk_obj)) ("uid"))) ((((xstr)).apply (((((xenv).xnew_serialno)).apply ("console"))))))
                        xwin_content.write (((xcode_block_to_win)).apply (((xself).xcontent)))
                        (((unsupported)).apply ((xwin_content)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xlit_blk_obj)) ("win_console_text"))) ("None: is there a None literal in the EO language?"))
                          seq
                            (((unsupported)).apply (((xself).xcontent)) ((xwin_content)))
                            (((unsupported)).apply ((((unsupported)).apply ((xlit_blk_obj)) ("win_console_text"))) (((((unsupported)).apply (((((((xsuper)).apply).xrun)).apply)) (0)).xrawsource)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xConsoleNode)).apply ((xlit_blk_obj)))))))
            xhtml_page_context_hook.write
              [xapp xpagename xtemplatename xcontext xdoctree]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("include_console_assets"))) ((((xgetattr)).apply ((xdoctree)) ("_console_directive_used_flag") (FALSE))))
            xdefault_role_error.write
              [xname xrawtext xtext xlineno xinliner xoptions xcontent]
                memory > xmsg
                seq > @
                  (((unsupported)).apply)
                    xmsg.write ("Default role used (`single backticks`): %s. Did you mean to use two backticks for ``code``, or miss an underscore for a `link`_ ?".mod (xrawtext))
                    (((unsupported)).apply (((xlogger).xwarning)) ((xmsg)) ((((unsupported)).apply ((((xinliner).xdocument).xcurrent_source)) ((xlineno)))))
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xnodes).xText)).apply ((xtext)))))) ((((unsupported)).apply)))))