memory > xImportError
memory > xdatetime
memory > xRuntimeError
memory > xsignal
memory > xstr
memory > xtrace
memory > xtempfile
memory > xrepr
memory > xhasattr
memory > xstderr
memory > xexc
memory > xfilter
memory > xdict
memory > xcm
memory > xexc_code
memory > xscript_helper
memory > xstdout
memory > xfilename
memory > xoutput
memory > xopen
memory > xdedent
memory > xkw
memory > xsupport
memory > xsys
memory > xsubprocess
memory > xos
memory > xis_android
memory > xname
memory > xunittest
memory > xsysconfig
memory > xfaulthandler
memory > xfp
memory > xexitcode
memory > x__name__
[] > test_faulthandler
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcheck_fatal_error
        memory > xtest_sigabrt
        memory > xtest_raise_exception
        memory > xtest_dump_traceback_later
        memory > xtest_read_null
        memory > xtest_disable
        memory > xtest_stack_overflow
        memory > xtest_sigsegv
        memory > xtest_dump_traceback_file
        memory > xtest_fatal_error_without_gil
        memory > xtest_fatal_error_c_thread
        memory > xcheck_register
        memory > xtest_dump_traceback_later_file
        memory > xtest_fatal_error
        memory > xtest_unregister
        memory > xcheck_stderr_none
        memory > xtest_dump_traceback_later_twice
        memory > xtest_raise_nonfatal_exception
        memory > xtest_enable_single_thread
        memory > xcheck_error
        memory > xtest_sys_xoptions
        memory > xtest_env_var
        memory > xtest_disable_windows_exc_handler
        memory > xtest_dump_traceback_fd
        memory > xtest_register_fd
        memory > xtest_sigfpe
        memory > x_config_args
        memory > xtest_ignore_exception
        memory > x_testcapi
        memory > xcheck_dump_traceback_threads
        memory > xUB_SANITIZER
        memory > xcheck_dump_traceback_later
        memory > xtemporary_filename
        memory > xtest_dump_traceback_threads
        memory > xskip_segfault_on_android
        memory > xtest_dump_traceback_later_fd
        memory > xtest_dump_traceback
        memory > xtest_register_chain
        memory > xtest_gil_released
        memory > xexpected_traceback
        memory > xtest_register
        memory > xtest_disabled_by_default
        memory > xtest_is_enabled
        memory > x_cflags
        memory > xTIMEOUT
        memory > xMEMORY_SANITIZER
        memory > xtest_enable_fd
        memory > xtest_sigill
        memory > xget_output
        memory > xtest_dump_traceback_later_repeat
        memory > xtest_register_threads
        memory > xcheck_dump_traceback
        memory > xcheck_windows_exception
        memory > xtest_register_file
        memory > xtest_truncate
        memory > xtest_stderr_None
        memory > xtest_dump_traceback_threads_file
        memory > xMS_WINDOWS
        memory > xtest_sigbus
        memory > xtest_enable_file
        memory > xtest_dump_traceback_later_cancel
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              x_testcapi.write "None: is there a None literal in the EO language?"
            xTIMEOUT.write 0.5
            xMS_WINDOWS.write (((xos).xname).eq "nt")
            x_cflags.write (((((xsysconfig).xget_config_var)).apply ("CFLAGS")).or "")
            x_config_args.write (((((xsysconfig).xget_config_var)).apply ("CONFIG_ARGS")).or "")
            xUB_SANITIZER.write ((((unsupported)).apply ("-fsanitize=undefined") ((x_cflags))).or (((unsupported)).apply ("--with-undefined-behavior-sanitizer") ((x_config_args))))
            xMEMORY_SANITIZER.write ((((unsupported)).apply ("-fsanitize=memory") ((x_cflags))).or (((unsupported)).apply ("--with-memory-sanitizer") ((x_config_args))))
            xexpected_traceback.write
              [xlineno1 xlineno2 xheader xmin_count]
                memory > xregex
                seq > @
                  (((unsupported)).apply)
                    xregex.write (xheader)
                    (((unsupported)).apply ((xregex)) (("  File \"<string>\", line %s in funcn".mod (xlineno1))))
                    (((unsupported)).apply ((xregex)) (("  File \"<string>\", line %s in <module>".mod (xlineno2))))
                    (1.less (xmin_count)).if
                      (((unsupported)).apply ((("^".sub (((xregex).sub "n").mul ((xmin_count).sub 1))).sub (xregex))))
                      (((unsupported)).apply ((("^".sub (xregex)).sub "$")))
            xskip_segfault_on_android.write
              [xtest]
                seq > @
                  (((unsupported)).apply (((((((xunittest).xskipIf)).apply ((xis_android)) ("raising SIGSEGV on Android is unreliable"))).apply ((xtest)))))
            xtemporary_filename.write
              []
                memory > xfilename
                seq > @
                  (((unsupported)).apply)
                    xfilename.write ((((xtempfile).xmktemp)).apply)
                    (((unsupported)).apply)
                      (((unsupported)).apply ((xfilename)))
                      bogusForceDataize.write ((((xsupport).xunlink)).apply ((xfilename)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xget_output.write
                  [xself xcode xfilename xfd]
                    memory > xprocess
                    memory > xoutput
                    memory > xexitcode
                    memory > xpass_fds
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xcode.write ((((((xdedent)).apply ((xcode))).xstrip)).apply)
                        xpass_fds.write (((unsupported)).apply)
                        (((unsupported)).apply ((xfd)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xpass_fds).xappend)).apply ((xfd)))
                        (((unsupported)).apply (((((xsupport).xSuppressCrashReport)).apply)))
                          seq
                            xprocess.write (((unsupported)).apply (((xscript_helper).xspawn_python)) ("-c") ((xcode)) ((xpass_fds)))
                            (((unsupported)).apply ((xprocess)))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xprocess).xcommunicate)).apply)))
                                xexitcode.write ((((xprocess).xwait)).apply)
                        xoutput.write ((((xsupport).xstrip_python_stderr)).apply ((xstdout)))
                        xoutput.write ((((xoutput).xdecode)).apply ("ascii") ("backslashreplace"))
                        (xfilename).if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (""))
                            (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("rb"))) ((xfp)))
                              xoutput.write ((((xfp).xread)).apply)
                            xoutput.write ((((xoutput).xdecode)).apply ("ascii") ("backslashreplace"))
                          (((unsupported)).apply ((xfd)) ("None: is there a None literal in the EO language?")).if
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) (""))
                              bogusForceDataize.write ((((xos).xlseek)).apply ((xfd)) (((xos).xSEEK_SET)) (0))
                              (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xfd)) ("rb") (FALSE))) ((xfp)))
                                xoutput.write ((((xfp).xread)).apply)
                              xoutput.write ((((xoutput).xdecode)).apply ("ascii") ("backslashreplace"))
                        (((unsupported)).apply ((((unsupported)).apply (((((xoutput).xsplitlines)).apply)) ((xexitcode)))))
                xcheck_error.write
                  [xself xcode xline_number xfatal_error xfilename xall_threads xother_regex xfd xknow_current_thread xpy_fatal_error]
                    memory > xregex
                    memory > xheader
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (xall_threads).if
                          (xknow_current_thread).if
                            xheader.write "Current thread 0x[0-9a-f]-"
                            xheader.write "Thread 0x[0-9a-f]-"
                          xheader.write "Stack"
                        xregex.write (((unsupported)).apply)
                        (xpy_fatal_error).if
                          (((unsupported)).apply ((xfatal_error)) ("nPython runtime state: initialized"))
                        xregex.write ((((((unsupported)).apply (((((xdedent)).apply ((xregex))).xformat)) ((xline_number)) ((xfatal_error)) ((xheader))).xstrip)).apply)
                        (xother_regex).if
                          (((unsupported)).apply ((xregex)) (("|".sub (xother_regex))))
                        (((unsupported)).apply ((((unsupported)).apply ((xoutput)) ((xexitcode)))) ((((unsupported)).apply (((xself).xget_output)) ((xcode)) ((xfilename)) ((xfd)))))
                        xoutput.write ((("n".xjoin)).apply ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xoutput)) ((xregex)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xexitcode)) (0))
                xcheck_fatal_error.write
                  [xself xcode xline_number xname_regex]
                    memory > xfatal_error
                    seq > @
                      (((unsupported)).apply)
                        xfatal_error.write ("Fatal Python error: %s".mod (xname_regex))
                        bogusForceDataize.write ((((xself).xcheck_error)).apply ((xcode)) ((xline_number)) ((xfatal_error)) ((((unsupported)).apply ((xkw)))))
                xcheck_windows_exception.write
                  [xself xcode xline_number xname_regex]
                    memory > xfatal_error
                    seq > @
                      (((unsupported)).apply)
                        xfatal_error.write ("Windows fatal exception: %s".mod (xname_regex))
                        bogusForceDataize.write ((((xself).xcheck_error)).apply ((xcode)) ((xline_number)) ((xfatal_error)) ((((unsupported)).apply ((xkw)))))
                xtest_read_null.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        ((xMS_WINDOWS).not).if
                          bogusForceDataize.write ((((xself).xcheck_fatal_error)).apply ((((unsupported)).apply)) (3) ("(?:Segmentation fault|Bus error|Illegal instruction)"))
                          bogusForceDataize.write ((((xself).xcheck_windows_exception)).apply ((((unsupported)).apply)) (3) ("access violation"))
                xtest_sigsegv.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)).apply ((((unsupported)).apply)) (3) ("Segmentation fault"))
                xtest_fatal_error_c_thread.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_fatal_error)) ((((unsupported)).apply)) (3) ("in new thread") (FALSE) (TRUE))
                xtest_sigabrt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_fatal_error)).apply ((((unsupported)).apply)) (3) ("Aborted"))
                xtest_sigfpe.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)).apply ((((unsupported)).apply)) (3) ("Floating point exception"))
                xtest_sigbus.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)).apply ((((unsupported)).apply)) (5) ("Bus error"))
                xtest_sigill.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)).apply ((((unsupported)).apply)) (5) ("Illegal instruction"))
                xtest_fatal_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_fatal_error)) ((((unsupported)).apply)) (2) ("xyz") (TRUE))
                xtest_fatal_error_without_gil.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_fatal_error)) ((((unsupported)).apply)) (2) ("xyz") (TRUE))
                xtest_stack_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_fatal_error)) ((((unsupported)).apply)) (3) ("(?:Segmentation fault|Bus error)") ("unable to raise a stack overflow"))
                xtest_gil_released.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_fatal_error)).apply ((((unsupported)).apply)) (3) ("Segmentation fault"))
                xtest_enable_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xtemporary_filename)).apply)) ((xfilename)))
                          (((unsupported)).apply (((xself).xcheck_fatal_error)) ((((unsupported)).apply (((((unsupported)).apply).xformat)) ((((xrepr)).apply ((xfilename)))))) (4) ("Segmentation fault") ((xfilename)))
                xtest_enable_fd.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryFile)).apply ("wb-"))) ((xfp)))
                          seq
                            xfd.write ((((xfp).xfileno)).apply)
                            (((unsupported)).apply (((xself).xcheck_fatal_error)) (((((unsupported)).apply).mod (xfd))) (4) ("Segmentation fault") ((xfd)))
                xtest_enable_single_thread.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_fatal_error)) ((((unsupported)).apply)) (3) ("Segmentation fault") (FALSE))
                xtest_disable.write
                  [xself]
                    memory > xcode
                    memory > xstderr
                    memory > xnot_expected
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        xnot_expected.write "Fatal Python error"
                        (((unsupported)).apply ((((unsupported)).apply ((xstderr)) ((xexitcode)))) (((((xself).xget_output)).apply ((xcode)))))
                        xstderr.write ((("n".xjoin)).apply ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xnot_expected)) ((xstderr)))) (("%r is present in %r".mod (((unsupported)).apply ((xnot_expected)) ((xstderr))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xexitcode)) (0))
                xtest_is_enabled.write
                  [xself]
                    memory > xwas_enabled
                    memory > xorig_stderr
                    seq > @
                      seq
                        xorig_stderr.write ((xsys).xstderr)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xsys).xstderr)) (((xsys).x__stderr__)))
                            xwas_enabled.write ((((xfaulthandler).xis_enabled)).apply)
                            (((unsupported)).apply)
                              seq
                                bogusForceDataize.write ((((xfaulthandler).xenable)).apply)
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfaulthandler).xis_enabled)).apply)))
                                bogusForceDataize.write ((((xfaulthandler).xdisable)).apply)
                                bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xfaulthandler).xis_enabled)).apply)))
                              (xwas_enabled).if
                                bogusForceDataize.write ((((xfaulthandler).xenable)).apply)
                                bogusForceDataize.write ((((xfaulthandler).xdisable)).apply)
                          (((unsupported)).apply (((xsys).xstderr)) ((xorig_stderr)))
                xtest_disabled_by_default.write
                  [xself]
                    memory > xcode
                    memory > xargs
                    memory > xoutput
                    seq > @
                      seq
                        xcode.write "import faulthandler; print(faulthandler.is_enabled())"
                        xargs.write (((unsupported)).apply (((xsys).xexecutable)) ("-E") ("-c") ((xcode)))
                        xoutput.write ((((xsubprocess).xcheck_output)).apply ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xrstrip)).apply)) ("False"))
                xtest_sys_xoptions.write
                  [xself]
                    memory > xcode
                    memory > xenv
                    memory > xargs
                    memory > xoutput
                    seq > @
                      seq
                        xcode.write "import faulthandler; print(faulthandler.is_enabled())"
                        xargs.write (((xfilter)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply (((xsys).xexecutable)) (((((xsys).xflags).xignore_environment).if "-E" "")) ("-X") ("faulthandler") ("-c") ((xcode)))))
                        xenv.write (((((xos).xenviron).xcopy)).apply)
                        bogusForceDataize.write ((((xenv).xpop)).apply ("PYTHONFAULTHANDLER") ("None: is there a None literal in the EO language?"))
                        xoutput.write (((unsupported)).apply (((xsubprocess).xcheck_output)) ((xargs)) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xrstrip)).apply)) ("True"))
                xtest_env_var.write
                  [xself]
                    memory > xcode
                    memory > xenv
                    memory > xargs
                    memory > xoutput
                    seq > @
                      seq
                        xcode.write "import faulthandler; print(faulthandler.is_enabled())"
                        xargs.write (((unsupported)).apply (((xsys).xexecutable)) ("-c") ((xcode)))
                        xenv.write (((xdict)).apply (((xos).xenviron)))
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PYTHONFAULTHANDLER"))) (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PYTHONDEVMODE"))) (""))
                        xoutput.write (((unsupported)).apply (((xsubprocess).xcheck_output)) ((xargs)) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xrstrip)).apply)) ("False"))
                        xenv.write (((xdict)).apply (((xos).xenviron)))
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PYTHONFAULTHANDLER"))) ("1"))
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PYTHONDEVMODE"))) (""))
                        xoutput.write (((unsupported)).apply (((xsubprocess).xcheck_output)) ((xargs)) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xrstrip)).apply)) ("True"))
                xcheck_dump_traceback.write
                  [xself xfilename xfd]
                    memory > xcode
                    memory > xexpected
                    memory > xlineno
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        xcode.write (((unsupported)).apply (((xcode).xformat)) ((xfilename)) ((xfd)))
                        (xfilename).if
                          xlineno.write 9
                          (((unsupported)).apply ((xfd)) ("None: is there a None literal in the EO language?")).if
                            xlineno.write 11
                            xlineno.write 14
                        xexpected.write (((unsupported)).apply ("Stack (most recent call first):") (("  File \"<string>\", line %s in funcB".mod (xlineno))) ("  File \"<string>\", line 17 in funcA") ("  File \"<string>\", line 19 in <module>"))
                        (((unsupported)).apply ((((unsupported)).apply ((xtrace)) ((xexitcode)))) (((((xself).xget_output)).apply ((xcode)) ((xfilename)) ((xfd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtrace)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexitcode)) (0))
                xtest_dump_traceback.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_dump_traceback)).apply)
                xtest_dump_traceback_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xtemporary_filename)).apply)) ((xfilename)))
                        (((unsupported)).apply (((xself).xcheck_dump_traceback)) ((xfilename)))
                xtest_dump_traceback_fd.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryFile)).apply ("wb-"))) ((xfp)))
                          (((unsupported)).apply (((xself).xcheck_dump_traceback)) (((((xfp).xfileno)).apply)))
                xtest_truncate.write
                  [xself]
                    memory > xexpected
                    memory > xcode
                    memory > xmaxlen
                    memory > xfunc_name
                    memory > xtruncated
                    seq > @
                      seq
                        xmaxlen.write 500
                        xfunc_name.write ("x".mul ((xmaxlen).sub 50))
                        xtruncated.write (("x".mul (xmaxlen)).sub "...")
                        xcode.write (((unsupported)).apply)
                        xcode.write (((unsupported)).apply (((xcode).xformat)) ((xfunc_name)))
                        xexpected.write (((unsupported)).apply ("Stack (most recent call first):") (("  File \"<string>\", line 4 in %s".mod (xtruncated))) ("  File \"<string>\", line 6 in <module>"))
                        (((unsupported)).apply ((((unsupported)).apply ((xtrace)) ((xexitcode)))) (((((xself).xget_output)).apply ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtrace)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexitcode)) (0))
                xcheck_dump_traceback_threads.write
                  [xself xfilename]
                    memory > xcode
                    memory > xregex
                    memory > xlineno
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xcode.write (((unsupported)).apply)
                        xcode.write (((unsupported)).apply (((xcode).xformat)) ((((xrepr)).apply ((xfilename)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xoutput)) ((xexitcode)))) (((((xself).xget_output)).apply ((xcode)) ((xfilename)))))
                        xoutput.write ((("n".xjoin)).apply ((xoutput)))
                        (xfilename).if
                          xlineno.write 8
                          xlineno.write 10
                        xregex.write (((unsupported)).apply)
                        xregex.write ((((((xdedent)).apply ((((unsupported)).apply (((xregex).xformat)) ((xlineno))))).xstrip)).apply)
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xoutput)) ((xregex)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexitcode)) (0))
                xtest_dump_traceback_threads.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_dump_traceback_threads)).apply ("None: is there a None literal in the EO language?"))
                xtest_dump_traceback_threads_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xtemporary_filename)).apply)) ((xfilename)))
                        bogusForceDataize.write ((((xself).xcheck_dump_traceback_threads)).apply ((xfilename)))
                xcheck_dump_traceback_later.write
                  [xself xrepeat xcancel xloops xfilename xfd]
                    memory > xheader
                    memory > xcount
                    memory > xtrace
                    memory > xcode
                    memory > xregex
                    memory > xtimeout_str
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xtimeout_str.write (((xstr)).apply ((((unsupported)).apply (((xdatetime).xtimedelta)) ((xTIMEOUT)))))
                        xcode.write (((unsupported)).apply)
                        xcode.write (((unsupported)).apply (((xcode).xformat)) ((xTIMEOUT)) ((xrepeat)) ((xcancel)) ((xloops)) ((xfilename)) ((xfd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtrace)) ((xexitcode)))) (((((xself).xget_output)).apply ((xcode)) ((xfilename)))))
                        xtrace.write ((("n".xjoin)).apply ((xtrace)))
                        ((xcancel).not).if
                          seq
                            xcount.write (xloops)
                            (xrepeat).if
                              (((unsupported)).apply ((xcount)) (2))
                            xheader.write ("Timeout (%s)!nThread 0x[0-9a-f]- (most recent call first):n".mod (xtimeout_str))
                            xregex.write (((unsupported)).apply ((xexpected_traceback)) (17) (26) ((xheader)) ((xcount)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((xtrace)) ((xregex)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtrace)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexitcode)) (0))
                xtest_dump_traceback_later.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_dump_traceback_later)).apply)
                xtest_dump_traceback_later_repeat.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_dump_traceback_later)) (TRUE))
                xtest_dump_traceback_later_cancel.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_dump_traceback_later)) (TRUE))
                xtest_dump_traceback_later_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xtemporary_filename)).apply)) ((xfilename)))
                        (((unsupported)).apply (((xself).xcheck_dump_traceback_later)) ((xfilename)))
                xtest_dump_traceback_later_fd.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryFile)).apply ("wb-"))) ((xfp)))
                          (((unsupported)).apply (((xself).xcheck_dump_traceback_later)) (((((xfp).xfileno)).apply)))
                xtest_dump_traceback_later_twice.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_dump_traceback_later)) (2))
                xcheck_register.write
                  [xself xfilename xall_threads xunregister xchain xfd]
                    memory > xsignum
                    memory > xcode
                    memory > xtrace
                    memory > xregex
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xsignum.write ((xsignal).xSIGUSR1)
                        xcode.write (((unsupported)).apply)
                        xcode.write (((unsupported)).apply (((xcode).xformat)) ((xall_threads)) ((xsignum)) ((xunregister)) ((xchain)) ((xfilename)) ((xfd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtrace)) ((xexitcode)))) (((((xself).xget_output)).apply ((xcode)) ((xfilename)))))
                        xtrace.write ((("n".xjoin)).apply ((xtrace)))
                        ((xunregister).not).if
                          seq
                            (xall_threads).if
                              xregex.write "Current thread 0x[0-9a-f]- (most recent call first):n"
                              xregex.write "Stack (most recent call first):n"
                            xregex.write (((xexpected_traceback)).apply (14) (32) ((xregex)))
                            bogusForceDataize.write ((((xself).xassertRegex)).apply ((xtrace)) ((xregex)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtrace)) (""))
                        (xunregister).if
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xexitcode)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexitcode)) (0))
                xtest_register.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_register)).apply)
                xtest_unregister.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_register)) (TRUE))
                xtest_register_file.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xtemporary_filename)).apply)) ((xfilename)))
                        (((unsupported)).apply (((xself).xcheck_register)) ((xfilename)))
                xtest_register_fd.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryFile)).apply ("wb-"))) ((xfp)))
                          (((unsupported)).apply (((xself).xcheck_register)) (((((xfp).xfileno)).apply)))
                xtest_register_threads.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_register)) (TRUE))
                xtest_register_chain.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_register)) (TRUE))
                xcheck_stderr_none.write
                  [xself]
                    memory > xstderr
                    seq > @
                      (((unsupported)).apply)
                        xstderr.write ((xsys).xstderr)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xsys).xstderr)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xexception)))) ("sys.stderr is None"))
                          (((unsupported)).apply (((xsys).xstderr)) ((xstderr)))
                xtest_stderr_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xcheck_stderr_none)).apply)))
                          bogusForceDataize.write ((((xfaulthandler).xenable)).apply)
                        (((unsupported)).apply (((((xself).xcheck_stderr_none)).apply)))
                          bogusForceDataize.write ((((xfaulthandler).xdump_traceback)).apply)
                        (((xhasattr)).apply ((xfaulthandler)) ("dump_traceback_later")).if
                          (((unsupported)).apply (((((xself).xcheck_stderr_none)).apply)))
                            bogusForceDataize.write ((((xfaulthandler).xdump_traceback_later)).apply ((((unsupported)).apply)))
                        (((xhasattr)).apply ((xfaulthandler)) ("register")).if
                          (((unsupported)).apply (((((xself).xcheck_stderr_none)).apply)))
                            bogusForceDataize.write ((((xfaulthandler).xregister)).apply (((xsignal).xSIGUSR1)))
                xtest_raise_exception.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xexc)) ((xname)))) ((((unsupported)).apply ((((unsupported)).apply ("EXCEPTION_ACCESS_VIOLATION") ("access violation"))) ((((unsupported)).apply ("EXCEPTION_INT_DIVIDE_BY_ZERO") ("int divide by zero"))) ((((unsupported)).apply ("EXCEPTION_STACK_OVERFLOW") ("stack overflow"))))))
                          bogusForceDataize.write ((((xself).xcheck_windows_exception)).apply ((((unsupported)).apply)) (3) ((xname)))
                xtest_ignore_exception.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xexc_code)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                          seq
                            xcode.write (((unsupported)).apply)
                            xcode.write (((xdedent)).apply ((xcode)))
                            (((unsupported)).apply ((((unsupported)).apply ((xoutput)) ((xexitcode)))) (((((xself).xget_output)).apply ((xcode)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexitcode)) ((xexc_code)))
                xtest_raise_nonfatal_exception.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xexc)) ((((unsupported)).apply (0) (878082192) (1073741824) (1073745920) (1879048192) (2147483647))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xoutput)) ((xexitcode)))) (((((xself).xget_output)).apply ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xexitcode)) ((((unsupported)).apply ((xexc)) (((xexc).and (268435456.neg))))))
                xtest_disable_windows_exc_handler.write
                  [xself]
                    memory > xcode
                    seq > @
                      (((unsupported)).apply)
                        xcode.write (((xdedent)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xoutput)) ((xexitcode)))) (((((xself).xget_output)).apply ((xcode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexitcode)) ((((unsupported)).apply)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)