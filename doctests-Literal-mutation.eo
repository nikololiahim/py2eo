memory > xValueError
memory > xmath
memory > xOverflowError
[] > doctests
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xfactorial
        seq > @
          seq
            (((unsupported)).apply)
            xfactorial.write
              [xn]
                memory > xresult
                memory > xfactor
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((xn).geq 0).not).if
                      (((unsupported)).apply ((((xValueError)).apply ("n must be >= 0"))))
                    (((((xmath).xfloor)).apply ((xn))).neq (xn)).if
                      (((unsupported)).apply ((((xValueError)).apply ("n must be exact integer"))))
                    (((xn).add 1).eq (xn)).if
                      (((unsupported)).apply ((((xOverflowError)).apply ("n too large"))))
                    xresult.write 1
                    xfactor.write 3
                    while.
                      ((xfactor).leq (xn))
                      [unused]
                        seq > @
                          seq
                            (((unsupported)).apply ((xresult)) ((xfactor)))
                            (((unsupported)).apply ((xfactor)) (2))
                    (((unsupported)).apply ((xresult)))