memory > xBadClass
memory > xNT
memory > xk
memory > xNode
memory > xGeneric
memory > xtypes
memory > xD
memory > xEmployee
memory > xC
memory > xcopy
memory > xType
memory > xACM
memory > xImportError
memory > xTest
memory > xAttributeError
memory > xMyOrdDict
memory > xCSub
memory > xBadPG
memory > xClassVar
memory > xPSub
memory > x__call__
memory > xKT
memory > xNoTpCheck
memory > xmod_generics_cache
memory > xget_type_hints
memory > xMyList
memory > xpickle
memory > xmessage
memory > xCoolEmployee
memory > xlist
memory > xPNonCall
memory > xall
memory > xBPoint
memory > xcontextlib
memory > xRuntimeError
memory > xMyCall
memory > xel
memory > xForRefExample
memory > xparent
memory > xMySet
memory > xCG
memory > xKeyboardInterrupt
memory > xNoReturn
memory > xlocals
memory > xPG
memory > xMyDeque
memory > xVisitor
memory > xNonPR
memory > xProtocol
memory > xsome_xrepr
memory > xOther1
memory > xMyTup
memory > xMM2
memory > xT2
memory > xz
memory > xTuple
memory > xValueError
memory > xdeepcopy
memory > xabc
memory > xfrozenset
memory > xFinalException
memory > xZ
memory > xLiteral
memory > xlabel
memory > xstr
memory > xOptions
memory > xMM
memory > xHasCallProtocol
memory > xYAxis
memory > xMyTuple
memory > xtyping
memory > xMySimpleMapping
memory > xMyChain
memory > xBase
memory > xD1
memory > xCP
memory > xCoolEmployeeWithDefault
memory > xTestCase
memory > xProto
memory > xt
memory > xAPoint
memory > xB
memory > xexec
memory > xIO
memory > xMatch
memory > xrange
memory > xManager
memory > xNoneAndForward
memory > xfinal
memory > xS
memory > xPosition
memory > xb
memory > xG
memory > xSkipTest
memory > xIntListVisitor
memory > xT
memory > xCustom
memory > xDerived
memory > xBadP
memory > xBasicUser
memory > xcollections
memory > xNotImplementedError
memory > xBar
memory > xbytearray
memory > xMyCounter
memory > xStopIteration
memory > xKeyError
memory > xNotACM
memory > xMutableMapping
memory > xproto
memory > xbase
memory > xP
memory > xTypedDict
memory > xBinaryIO
memory > xAsyncIteratorWrapper
memory > xother_a
memory > xmain
memory > xTypeVar
memory > xFoo
memory > xPM
memory > xcallable
memory > xCM
memory > xW
memory > xOther
memory > xtype
memory > xMyFrozenSet
memory > xget_origin
memory > xf
memory > xP1
memory > xPR
memory > xset
memory > xXAxis
memory > xint
memory > xrepr
memory > xTextIO
memory > xget_args
memory > xOther2
memory > xre
memory > xcool
memory > xException
memory > xthing
memory > xhasattr
memory > xXMeth
memory > xMyDefDict
memory > xElement
memory > xX
memory > xann_module
memory > xTP
memory > xAnyStr
memory > xx
memory > xNamedTuple
memory > xMyPoint
memory > xF
memory > xclazz
memory > xI
memory > xXRepr
memory > xNewType
memory > xsuper
memory > xs
memory > xsys
memory > xFounder
memory > xMMC
memory > xbool
memory > xPattern
memory > xList
memory > xlog_level
memory > xM
memory > xbytes
memory > xtuple
memory > xBaseException
memory > xissubclass
memory > xglobals
memory > xRecursionError
memory > xDeprecationWarning
memory > x__all__
memory > xP2
memory > xcls
memory > xruntime_checkable
memory > xLoop
memory > xMeta
memory > xfloat
memory > xD2
memory > xargs
memory > xobj
memory > xPoint
memory > xann_module3
memory > xBP
memory > xC1
memory > xdir
memory > xSimpleMapping
memory > xAny
memory > xweakref
memory > xT1
memory > xgetattr
memory > xv
memory > xSyntaxError
memory > xvars
memory > xmeaning
memory > xann_module2
memory > xlst
memory > xe
memory > xABase
memory > xLabelPoint2D
memory > xiter
memory > xlog_path
memory > xPoint2D
memory > xE
memory > xname
memory > xattr
memory > xCoordinate
memory > xCC
memory > xCallable
memory > xex
memory > xEmpty
memory > xVT
memory > xNonP
memory > xy
memory > xMyMapping
memory > xConcrete
memory > xhash
memory > xMyDict
memory > xY
memory > xobject
memory > xA
memory > xMyDef
memory > xBaseTestCase
memory > xMMB
memory > xMyChainMap
memory > xkwargs
memory > xFinal
memory > xC2
memory > xBad
memory > xisinstance
memory > xNameError
memory > xOptional
memory > xfoo
memory > xMMA
memory > xdict
memory > xcast
memory > xUser
memory > xlen
memory > xEllipsis
memory > xUnion
memory > xHasForeignBaseClass
memory > xTypeError
memory > xOKClass
memory > x__name__
memory > xno_type_check
[] > test_typing
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_mutablesequence
        memory > xXK
        memory > xtest_noreturn_subclass_type_error
        memory > xtest_typeddict_create_errors
        memory > xtest_collections_protocols_allowed
        memory > xtest_forwardref_subclass_type_error
        memory > x__str__
        memory > xtest_subclassing_subclasshook
        memory > xtest_abstractset
        memory > xtest_union_constrained
        memory > xtest_subclassing_register
        memory > xtest_counter_subclass_instantiation
        memory > xtest_coroutine
        memory > xtest_type_typevar
        memory > xtest_ellipsis_in_generic
        memory > xASYNCIO
        memory > xtest_chain_repr
        memory > xtest_frozenset
        memory > xtest_orig_bases
        memory > xtest_typeddict_special_keyword_names
        memory > xtest_cannot_subclass
        memory > xtest_forward_equality_namespace
        memory > xtest_base_class_kept
        memory > xtest_collections_as_base
        memory > xtest_eq_hash
        memory > xtest_no_isinstance
        memory > xtest_typevar_subclass_type_error
        memory > xtest_pickle
        memory > xtest_namedtuple_special_keyword_names
        memory > xget
        memory > xtest_literals_inside_other_types
        memory > xtest_cannot_instantiate_vars
        memory > xtest_protocols_support_register
        memory > xdouble
        memory > xtest_type_erasure_special
        memory > xtest_parameterized_slots_dict
        memory > xtest_false_subclasses
        memory > xtest_no_bivariant
        memory > xtest_issubclass_fails_correctly
        memory > xtest_py36_class_syntax_usage
        memory > xtest_multiple_inheritance
        memory > xtest_basic_plain
        memory > xtest_subclassing
        memory > xtest_cannot_instantiate_abstract
        memory > xtest_union_object
        memory > xmeth
        memory > xtest_no_instantiation
        memory > xtest_defaultdict_subclass
        memory > xtest_hashable
        memory > xtest_protocols_isinstance_py36
        memory > xtest_io_submodule
        memory > xtest_deque
        memory > xtest_type_optional
        memory > xg_with
        memory > xtest_function_repr_union
        memory > xtest_cannot_init
        memory > xtest_type_basic
        memory > xtest_weakref_all
        memory > xtest_noreturn_instance_type_error
        memory > xtest_ordereddict_instantiation
        memory > xtest_union_generalization
        memory > xtest_callable_instance_works
        memory > xtest_typevar_instance_type_error
        memory > xtest_no_generator_instantiation
        memory > xtest_tuple_subclass
        memory > xtest_any_instance_type_error
        memory > xtest_protocols_isinstance
        memory > xtest_forwardref_instance_type_error
        memory > xtest_chainmap_subclass
        memory > xtest_protocols_pickleable
        memory > xtest_frozenset_subclass_instantiation
        memory > xtest_all
        memory > xtest_callable_wrong_forms
        memory > xtest_multi_subscr_base
        memory > xtest_new_repr
        memory > xtest_protocol_checks_after_subscript
        memory > xtest_get_type_hints_from_various_objects
        memory > xtest_missing__name__
        memory > xtest_extended_generic_rules_repr
        memory > xtest_forward_equality_hash
        memory > xassertNotIsSubclass
        memory > xtest_all_exported_names
        memory > xtest_immutability_by_copy_and_pickle
        memory > xtest_generator
        memory > xtest_generic_protocols_repr
        memory > xtest_optional
        memory > xtest_namedtuple_keyword_usage
        memory > xtest_awaitable
        memory > xtest_multiple_inheritance_special
        memory > xtest_supports_index
        memory > xtest_generic_errors
        memory > xfunc
        memory > xtest_copy_generic_instances
        memory > xtest_no_async_generator_instantiation
        memory > xtest_init_called
        memory > xtest_counter
        memory > xtest_union_union
        memory > xtest_none_on_callable_blocks_implementation
        memory > xtest_generic_protocols_special_from_generic
        memory > xtest_repr
        memory > xtest_mutablemapping
        memory > xtest_subprotocols_extending
        memory > xtest_default_globals
        memory > xtest_fail_with_bare_generic
        memory > xtest_illegal_parameters_do_not_raise_runtime_errors
        memory > xtest_union_compare_other
        memory > xtest_cannot_instantiate
        memory > x__getitem__
        memory > xtest_deque_instantiation
        memory > xtest_union_forward_recursion
        memory > xtest_init
        memory > xtest_forward_repr
        memory > xtest_naive_runtime_checks
        memory > xtest_unordered
        memory > xtest_parameterized_slots
        memory > xtest_collection
        memory > xtest_textio
        memory > xtest_basics_functional_syntax
        memory > xtest_ordereddict_subclass
        memory > xtest_bytestring
        memory > xtest_delayed_syntax_error
        memory > xtest_init_subclass_super_called
        memory > xtest_repr_2
        memory > xtest_new_with_args2
        memory > xtest_builtin_protocol_whitelist
        memory > xtest_union_unique
        memory > xtest_annotation_usage_with_default
        memory > xtest_non_protocol_subclasses
        memory > xtest_new_no_args
        memory > xtest_union_any
        memory > xtest_set_subclass_instantiation
        memory > xtest_get_type_hints_wrapped_decoratored_func
        memory > xtest_new_repr_bare
        memory > xtest_constrained_error
        memory > xtest_subscript_meta
        memory > xtest_async_contextmanager
        memory > xtest_forward_recursion_actually
        memory > xtest_no_tuple_instantiation
        memory > xtest_new_repr_complex
        memory > xclear_caches
        memory > xtest_get_args
        memory > xtest_any_subclass_type_error
        memory > xtest_syntax_error
        memory > xtest_type_erasure
        memory > xtest_extended_generic_rules_subclassing
        memory > xtest_defining_generic_protocols
        memory > xtest_namedtuple_pyversion
        memory > xLabel
        memory > xASYNCIO_TESTS
        memory > xtest_async_generator
        memory > xtest_protocols_issubclass
        memory > xtest_no_set_instantiation
        memory > xtest_single_class_disappears
        memory > xtest_basic_protocol
        memory > xtest_supports_float
        memory > xtest_any_works_with_alias
        memory > xtest_none_on_non_callable_doesnt_block_implementation
        memory > xtest_container
        memory > xtest_subprotocols_merging
        memory > xtest_eq_2
        memory > xtest_abc_registry_kept
        memory > xtest_overload_fails
        memory > xtest_callable_instance_type_error
        memory > xtest_none_treated_correctly
        memory > xtest_union_str_pattern
        memory > xtest_multiple_bases
        memory > xtest_nested_classvar_fails_forward_ref_check
        memory > xtest_namedtuple_errors
        memory > xtest_subclass_error
        memory > xtest_basic
        memory > xtest_bundled_protocol_instance_works
        memory > xtest_not_generic
        memory > xtest_generic_hashes
        memory > xtest_get_type_hints_ClassVar
        memory > xtest_annotation_usage_with_methods
        memory > xtest_no_type_check_forward_ref_as_string
        memory > xtest_get_type_hints_modules_forwardref
        memory > xtest_forward_equality_gth
        memory > xtest_cannot_subclass_var_itself
        memory > xtest_supports_abs
        memory > xtest_async_iterator
        memory > xgth
        memory > xtest_mutableset
        memory > xtest_typeddict_errors
        memory > xtest_generic_protocols_special_from_protocol
        memory > xtest_list_subclass
        memory > xtest_nested
        memory > xtest_get_type_hints_for_builtins
        memory > xtest_dict_subclass
        memory > xtest_extended_generic_rules_eq
        memory > xtest_no_type_check
        memory > x__setitem__
        memory > xtest_no_isinstance_or_issubclass
        memory > xtest_get_type_hints_modules
        memory > xtest_respect_no_type_check
        memory > xtest_mapping
        memory > xtest_annotation_usage
        memory > xtest_total
        memory > xtest_iterator
        memory > xassertIsSubclass
        memory > xtest_new_with_args
        memory > xtest_no_dict_instantiation
        memory > xtest_get_origin
        memory > xtest_no_multiple_subscripts
        memory > xtest_implicit_any
        memory > xtest_protocols_in_unions
        memory > xtest_everything_implements_empty_protocol
        memory > xtest_supports_bytes
        memory > xtest_no_list_instantiation
        memory > xtest_no_runtime_deco_on_nominal
        memory > xtest_defining_generic_protocols_old_style
        memory > xtest_basics_keywords_syntax
        memory > xtest_final_unmodified
        memory > xtest_errors
        memory > xtest_dict
        memory > xtest_counter_instantiation
        memory > x__add__
        memory > xtest_basics
        memory > xtest_function_implements_protocol
        memory > xtest_io
        memory > x__init__
        memory > xtest_cannot_subclass_vars
        memory > xtest_bound_errors
        memory > xtest_no_type_check_no_bases
        memory > xtest_generic_forward_ref
        memory > xtest_iterable
        memory > xtest_subscripted_generics_as_proxies
        memory > xtest_reversible
        memory > xtest_all_repr_eq_any
        memory > xtest_sized
        memory > xtest_union_forward
        memory > xtest_abc_bases
        memory > xtest_tuple_instance_type_error
        memory > xtest_name_error
        memory > xtest_contextmanager
        memory > xtest_defaultdict_instantiation
        memory > xtest_supports_round
        memory > xtest_async_iterable
        memory > xtest_previous_behavior
        memory > xtest_no_subclassing
        memory > xtest_etree
        memory > xtest_no_redefinition
        memory > xtest_callable_forward
        memory > xtest_supports_complex
        memory > xtest_protocols_isinstance_init
        memory > xtest_get_type_hints_classes
        memory > xtest_custom_subclasshook
        memory > xtest_union_instance_type_error
        memory > xtest_sequence
        memory > xtest_supports_int
        memory > xtest_protocols_bad_subscripts
        memory > xtest_chainmap_instantiation
        memory > xtest_fail_with_bare_union
        memory > xXV
        memory > xtest_no_frozenset_instantiation
        memory > xtest_no_type_check_class
        memory > xtest_empty
        memory > xtest_re_submodule
        memory > xtest_get_type_hints_for_object_with_annotations
        memory > xtest_no_eval_union
        memory > xtest_callable_with_ellipsis_forward
        memory > xtest_self_subclass
        memory > xtest_type_error
        memory > xtest_binaryio
        memory > xtest_copy_and_pickle
        memory > xtest_callable_with_ellipsis
        memory > xtest_no_inheritance_from_nominal
        memory > xtest_protocols_issubclass_non_callable
        memory > xtest_meta_no_type_check
        memory > xtest_final_forward_ref
        memory > xtest_eq_1
        memory > xtest_equality
        memory > xtest_init_subclass
        memory > xtest_alias_equality
        memory > xtest_overload_succeeds
        memory > xnested
        memory > xtest_forward_equality
        memory > xtest_set
        memory > xtest_tuple_forward
        memory > xtest_copy_and_deepcopy
        memory > xtest_list
        memory > xtest_generic_protocols_eq
        memory > xtest_subclassing_async_generator
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xassertIsSubclass.write
                  [xself xcls xclass_or_tuple xmsg]
                    memory > xmessage2
                    seq > @
                      (((unsupported)).apply)
                        ((((xissubclass)).apply ((xcls)) ((xclass_or_tuple))).not).if
                          seq
                            xmessage2.write ("%r is not a subclass of %r".mod (((unsupported)).apply ((xcls)) ((xclass_or_tuple))))
                            (((unsupported)).apply ((xmsg)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((xmessage)) ((" : %s".mod (xmsg))))
                            (((unsupported)).apply (((((xself).xfailureException)).apply ((xmessage)))))
                xassertNotIsSubclass.write
                  [xself xcls xclass_or_tuple xmsg]
                    memory > xmessage
                    seq > @
                      (((unsupported)).apply)
                        (((xissubclass)).apply ((xcls)) ((xclass_or_tuple))).if
                          seq
                            xmessage.write ("%r is a subclass of %r".mod (((unsupported)).apply ((xcls)) ((xclass_or_tuple))))
                            (((unsupported)).apply ((xmsg)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((xmessage)) ((" : %s".mod (xmsg))))
                            (((unsupported)).apply (((((xself).xfailureException)).apply ((xmessage)))))
                xclear_caches.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xf)) (((xtyping).x_cleanups)))
                        bogusForceDataize.write (((xf)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xEmployee)))
            (((unsupported)).apply ((xEmployee)))
            (((unsupported)).apply ((xManager)) ((xFounder)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_any_instance_type_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        bogusForceDataize.write (((xisinstance)).apply (42) ((xAny)))
                xtest_any_subclass_type_error.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xEmployee)) ((xAny)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xAny)) ((xEmployee)))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xAny)))) ("typing.Any"))
                xtest_errors.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply (42) ((xAny)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xAny)) ((xint)))
                xtest_cannot_subclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xAny)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((xtype)).apply ((xAny)))))
                xtest_cannot_instantiate.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xAny)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((xAny)))).apply)
                xtest_any_works_with_alias.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xtyping).xMatch)) ((xAny)))
                        (((unsupported)).apply (((xtyping).xPattern)) ((xAny)))
                        (((unsupported)).apply (((xtyping).xIO)) ((xAny)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_noreturn_instance_type_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        bogusForceDataize.write (((xisinstance)).apply (42) ((xNoReturn)))
                xtest_noreturn_subclass_type_error.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xEmployee)) ((xNoReturn)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xNoReturn)) ((xEmployee)))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xNoReturn)))) ("typing.NoReturn"))
                xtest_not_generic.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply ((xNoReturn)) ((xint)))
                xtest_cannot_subclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xNoReturn)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((xtype)).apply ((xNoReturn)))))
                xtest_cannot_instantiate.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xNoReturn)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((xNoReturn)))).apply)
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basic_plain.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xT)) ((xT)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xT)) ((xTypeVar)))
                xtest_typevar_instance_type_error.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply (42) ((xT)))
                xtest_typevar_subclass_type_error.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xint)) ((xT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xT)) ((xint)))
                xtest_constrained_error.write
                  [xself]
                    memory > xX
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        seq
                          xX.write (((xTypeVar)).apply ("X") ((xint)))
                          unsupported
                xtest_union_unique.write
                  [xself]
                    memory > xY
                    memory > xX
                    seq > @
                      seq
                        xX.write (((xTypeVar)).apply ("X"))
                        xY.write (((xTypeVar)).apply ("Y"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xX)) ((xY)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xUnion)) ((xX)))) ((xX)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xUnion)) ((xX)))) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xX)) ((xY)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xX)) ((xX)))))) ((xX)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xX)) ((xint)))))) ((((unsupported)).apply ((xUnion)) ((xX)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xX)) ((xint)))))) ((((unsupported)).apply ((xUnion)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xX)) ((xint))))).x__args__)) ((((unsupported)).apply ((xX)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xX)) ((xint))))).x__parameters__)) ((((unsupported)).apply ((xX)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xX)) ((xint))))).x__origin__)) ((xUnion)))
                xtest_union_constrained.write
                  [xself]
                    memory > xA
                    seq > @
                      seq
                        xA.write (((xTypeVar)).apply ("A") ((xstr)) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xA)) ((xstr)))))) ((((unsupported)).apply ((xUnion)) ((xA)))))
                xtest_repr.write
                  [xself]
                    memory > xT_co
                    memory > xT_contra
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xT)))) ("~T"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xKT)))) ("~KT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xVT)))) ("~VT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xAnyStr)))) ("~AnyStr"))
                        xT_co.write (((unsupported)).apply ((xTypeVar)) ("T_co") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xT_co)))) ("+T_co"))
                        xT_contra.write (((unsupported)).apply ((xTypeVar)) ("T_contra") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xT_contra)))) ("-T_contra"))
                xtest_no_redefinition.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xTypeVar)).apply ("T"))) ((((xTypeVar)).apply ("T"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xTypeVar)).apply ("T") ((xint)) ((xstr)))) ((((xTypeVar)).apply ("T") ((xint)) ((xstr)))))
                xtest_cannot_subclass_vars.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply ((((xTypeVar)).apply ("T"))))
                xtest_cannot_subclass_var_itself.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply ((xTypeVar)))
                xtest_cannot_instantiate_vars.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        bogusForceDataize.write (((((xTypeVar)).apply ("A"))).apply)
                xtest_bound_errors.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xTypeVar)) ("X") (42))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xTypeVar)) ("X") ((xstr)) ((xfloat)) ((xEmployee)))
                xtest_missing__name__.write
                  [xself]
                    memory > xcode
                    seq > @
                      seq
                        xcode.write "import typingnT = typing.TypeVar('T')n"
                        bogusForceDataize.write (((xexec)).apply ((xcode)) ((((unsupported)).apply)))
                xtest_no_bivariant.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                        (((unsupported)).apply ((xTypeVar)) ("T") (TRUE) (TRUE))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        xu.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xfloat)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xu)) ((xUnion)))
                xtest_subclass_error.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xint)) ((xUnion)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xUnion)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xint)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))) ((xint)))
                xtest_union_any.write
                  [xself]
                    memory > xu2
                    memory > xu3
                    memory > xu1
                    memory > xu
                    seq > @
                      seq
                        xu.write (((unsupported)).apply ((xUnion)) ((xAny)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xu)) ((xAny)))
                        xu1.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xAny)))))
                        xu2.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xAny)) ((xint)))))
                        xu3.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xAny)) ((xobject)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xu1)) ((xu2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xu1)) ((xAny)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xu2)) ((xAny)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xu3)) ((xAny)))
                xtest_union_object.write
                  [xself]
                    memory > xu2
                    memory > xu1
                    memory > xu
                    seq > @
                      seq
                        xu.write (((unsupported)).apply ((xUnion)) ((xobject)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xu)) ((xobject)))
                        xu1.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xobject)))))
                        xu2.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xobject)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xu1)) ((xu2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xu1)) ((xobject)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xu2)) ((xobject)))
                xtest_unordered.write
                  [xself]
                    memory > xu2
                    memory > xu1
                    seq > @
                      seq
                        xu1.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xfloat)))))
                        xu2.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xfloat)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xu1)) ((xu2)))
                xtest_single_class_disappears.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write (((unsupported)).apply ((xUnion)) ((xEmployee)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xt)) ((xEmployee)))
                xtest_base_class_kept.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        xu.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xEmployee)) ((xManager)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xu)) ((xEmployee)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xEmployee)) (((xu).x__args__)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xManager)) (((xu).x__args__)))
                xtest_union_union.write
                  [xself]
                    memory > xv
                    memory > xu
                    seq > @
                      seq
                        xu.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xfloat)))))
                        xv.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xu)) ((xEmployee)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xfloat)) ((xEmployee)))))))
                xtest_repr.write
                  [xself]
                    memory > xu
                    memory > xT
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xUnion)))) ("typing.Union"))
                        xu.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xEmployee)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xu)))) (("typing.Union[%s.Employee, int]".mod (x__name__))))
                        xu.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xEmployee)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xu)))) (("typing.Union[int, %s.Employee]".mod (x__name__))))
                        xT.write (((xTypeVar)).apply ("T"))
                        xu.write (((unsupported)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xT)) ((xint)))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xu)))) ((((xrepr)).apply ((xint)))))
                        xu.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((xint)))) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xu)))) ("typing.Union[typing.List[int], int]"))
                xtest_cannot_subclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xUnion)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((xtype)).apply ((xUnion)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))))
                xtest_cannot_instantiate.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xUnion)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((xUnion)))).apply)
                        xu.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xfloat)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xu)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((xu)))).apply)
                xtest_union_generalization.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply (((xtyping).xIterable)) ((xint))))))).eq (xstr))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply (((xtyping).xIterable)) ((xint))))))).eq (((unsupported)).apply (((xtyping).xIterable)) ((xint))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xstr)) (((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply (((xtyping).xIterable)) ((xint))))))).x__args__)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply (((xtyping).xIterable)) ((xint)))) (((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply (((xtyping).xIterable)) ((xint))))))).x__args__)))
                xtest_union_compare_other.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xUnion)) ((xobject)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xUnion)) ((xAny)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xClassVar)) ((xUnion)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xOptional)) ((xUnion)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) ((xOptional)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xOptional)) (((xtyping).xMapping)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xOptional)) (((xtyping).xMutableMapping)))) ((xUnion)))
                xtest_optional.write
                  [xself]
                    memory > xo
                    memory > xu
                    seq > @
                      seq
                        xo.write (((unsupported)).apply ((xOptional)) ((xint)))
                        xu.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xo)) ((xu)))
                xtest_empty.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply ((xUnion)) ((((unsupported)).apply)))
                xtest_union_instance_type_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        bogusForceDataize.write (((xisinstance)).apply (42) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))))
                xtest_no_eval_union.write
                  [xself]
                    memory > xu
                    memory > xf
                    seq > @
                      seq
                        xu.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((((xget_type_hints)).apply ((xf)))) ("x"))) ((xu)))
                xtest_function_repr_union.write
                  [xself]
                    memory > xfun
                    seq > @
                      seq
                        xfun.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xfun)) ((xint)))))))) ("typing.Union[fun, int]"))
                xtest_union_str_pattern.write
                  [xself]
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((xPattern)))))
                        unsupported
                xtest_etree.write
                  [xself]
                    memory > xElem
                    seq > @
                      seq
                        (((unsupported)).apply ((xImportError)))
                          (((unsupported)).apply)
                          (((unsupported)).apply ((((xSkipTest)).apply ("cElementTree not found"))))
                        (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xElement)) ((xstr)))))
                        xElem.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xElement)).apply ((((unsupported)).apply ((xargs)))))))
                        (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xElem)) ((xstr)))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xTuple)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xstr)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xtuple)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xstr)))))))
                        (((unsupported)).apply ((xtuple)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xtuple)) ((xTuple)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xTP)) ((xTuple)))))
                xtest_equality.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xTuple)) ((xint)))) ((((unsupported)).apply ((xTuple)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply)))))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xTuple)) ((xint)))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xTuple)) ((xint)))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply)))))))
                xtest_tuple_subclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((xMyTuple)) ((xTuple)))))
                xtest_tuple_instance_type_error.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((((unsupported)).apply (0) (0))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply (0) (0))) ((xTuple)))
                xtest_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xTuple)))) ("typing.Tuple"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply)))))) ("typing.Tuple[()]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xfloat)))))))) ("typing.Tuple[int, float]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply)))))))) ("typing.Tuple[int, ...]"))
                xtest_errors.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply (42) ((xTuple)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply (42) ((((unsupported)).apply ((xTuple)) ((xint)))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_self_subclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((((xtype)).apply ((((unsupported)).apply ((xx)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply ((((xtype)).apply ((((unsupported)).apply ((xx)))))) ((xCallable)))))
                xtest_eq_hash.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))))))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xstr)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xstr)))) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)) ((xint)))) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))) ((xCallable)))
                xtest_cannot_instantiate.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xCallable)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((xCallable)))).apply)
                        xc.write (((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xstr)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xc)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((xc)))).apply)
                xtest_callable_wrong_forms.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)))) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)))) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)) (1))) (2))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xCallable)) ((xint)))
                xtest_callable_instance_works.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xf)) ((xCallable)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ("None: is there a None literal in the EO language?") ((xCallable)))
                xtest_callable_instance_type_error.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xf)) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xf)) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xAny)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xAny)))))))
                xtest_repr.write
                  [xself]
                    memory > xct2
                    memory > xctv
                    memory > xct0
                    seq > @
                      seq
                        xct0.write (((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xbool)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xct0)))) ("typing.Callable[[], bool]"))
                        xct2.write (((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xstr)) ((xfloat)))) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xct2)))) ("typing.Callable[[str, float], int]"))
                        xctv.write (((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xctv)))) ("typing.Callable[..., str]"))
                xtest_callable_with_ellipsis.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xfoo)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("a") ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xT)))))))))
                xtest_ellipsis_in_generic.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xtyping).xList)) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xstr)))))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xLiteral)) (1))
                        (((unsupported)).apply ((xLiteral)) ((((unsupported)).apply (1) (2) (3))))
                        (((unsupported)).apply ((xLiteral)) ((((unsupported)).apply ("x") ("y") ("z"))))
                        (((unsupported)).apply ((xLiteral)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xLiteral)) (TRUE))
                        (((unsupported)).apply ((xLiteral)) ((((unsupported)).apply (1) ("2") (FALSE))))
                        (((unsupported)).apply ((xLiteral)) ((((unsupported)).apply ((((unsupported)).apply ((xLiteral)) ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ((xLiteral)) ((((unsupported)).apply (4) (5))))))))
                        (((unsupported)).apply ((xLiteral)) ((((unsupported)).apply ("foo") ("bar"))))
                xtest_illegal_parameters_do_not_raise_runtime_errors.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xLiteral)) ((xint)))
                        (((unsupported)).apply ((xLiteral)) ((((unsupported)).apply (((((unsupported)).apply).add 2)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xLiteral)) ((((unsupported)).apply ("foo") (3) ("bar") (4))))
                        (((unsupported)).apply ((xLiteral)) ((xT)))
                xtest_literals_inside_other_types.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xList)) ((((unsupported)).apply ((xLiteral)) ((((unsupported)).apply (1) (2) (3))))))
                        (((unsupported)).apply ((xList)) ((((unsupported)).apply ((xLiteral)) ((((unsupported)).apply ("foo") ("bar") ("baz"))))))
                xtest_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xLiteral)) (1))))) ("typing.Literal[1]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xLiteral)) ((((unsupported)).apply (1) (TRUE) ("foo"))))))) ("typing.Literal[1, True, 'foo']"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xLiteral)) ((xint)))))) ("typing.Literal[int]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xLiteral)))) ("typing.Literal"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xLiteral)) ("None: is there a None literal in the EO language?"))))) ("typing.Literal[None]"))
                xtest_cannot_init.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xLiteral)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply ((xLiteral)) (1))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((xLiteral)))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((((unsupported)).apply ((xLiteral)) (1))))).apply)
                xtest_no_isinstance_or_issubclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply (1) ((((unsupported)).apply ((xLiteral)) (1))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((xint)) ((((unsupported)).apply ((xLiteral)) (1))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply (1) ((((unsupported)).apply ((xLiteral)) (1))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xint)) ((((unsupported)).apply ((xLiteral)) (1))))
                xtest_no_subclassing.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xLiteral)) (1))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xLiteral)))
                xtest_no_multiple_subscripts.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xLiteral)) (1))) (1))
            xXK.write (((xTypeVar)).apply ("XK") ((xstr)) ((xbytes)))
            xXV.write (((xTypeVar)).apply ("XV"))
            (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((((unsupported)).apply ((xXK)) ((xXV)))))))
              seq
                x__getitem__.write
                  [xself xkey]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                x__setitem__.write
                  [xself xkey xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                xget.write
                  [xself xkey xdefault]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
            (((unsupported)).apply ((((unsupported)).apply ((xSimpleMapping)) ((((unsupported)).apply ((xXK)) ((xXV)))))))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xstore)) ((((unsupported)).apply)))
                x__getitem__.write
                  [xself xkey]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xstore)) ((xkey)))))
                x__setitem__.write
                  [xself xkey xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xstore)) ((xkey)))) ((xvalue)))
                xget.write
                  [xself xkey xdefault]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xstore)) ((xkey)))))
                          (((unsupported)).apply ((xdefault)))
            (((unsupported)).apply ((xProtocol)))
              seq
                (((unsupported)).apply ((xx)) ((xint)))
                (((unsupported)).apply ((xy)) ((xint)))
            (((unsupported)).apply ((xCoordinate)) ((xProtocol)) ((xruntime_checkable)))
              (((unsupported)).apply ((xlabel)) ((xstr)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply ((xx)) ((xint)))
                (((unsupported)).apply ((xy)) ((xint)))
                (((unsupported)).apply ((xlabel)) ((xstr)))
            (((unsupported)).apply ((xProtocol)))
              (((unsupported)).apply ((xx)) ((xint)))
            (((unsupported)).apply ((xProtocol)))
              (((unsupported)).apply ((xy)) ((xint)))
            (((unsupported)).apply ((xXAxis)) ((xYAxis)) ((xProtocol)) ((xruntime_checkable)))
            (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
              seq
                (((unsupported)).apply ((xattr)) ((xint)))
                xmeth.write
                  [xself xarg]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
            (((unsupported)).apply ((xProto)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply ((xattr)) ((xint)) (1))
                xmeth.write
                  [xself xarg]
                    seq > @
                      (((unsupported)).apply)
                        ((xarg).eq "this").if
                          (((unsupported)).apply (1))
                        (((unsupported)).apply (0))
            (((unsupported)).apply ((xNamedTuple)))
              seq
                (((unsupported)).apply ((xx)) ((xint)))
                (((unsupported)).apply ((xy)) ((xint)))
            (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
              (((unsupported)).apply ((x__call__)) (((xtyping).xCallable)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basic_protocol.write
                  [xself]
                    memory > xmeth
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xmeth.write
                            [xself]
                              seq > @
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          xmeth.write
                            [xself]
                              seq > @
                        xf.write
                          []
                            seq > @
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xD)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xD)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xC)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xC)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply (((xtypes).xFunctionType)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((xf)) ((xP)))
                xtest_everything_implements_empty_protocol.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                        (((unsupported)).apply)
                        xf.write
                          []
                            seq > @
                        (((unsupported)).apply ((xthing)) ((((unsupported)).apply ((xobject)) ((xtype)) ((xtuple)) ((xC)) (((xtypes).xFunctionType)))))
                          bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xthing)) ((xEmpty)))
                        (((unsupported)).apply ((xthing)) ((((unsupported)).apply ((((xobject)).apply)) (1) ((((unsupported)).apply)) ((xtyping)) ((xf)))))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xthing)) ((xEmpty)))
                xtest_function_implements_protocol.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xf)) ((xHasCallProtocol)))
                xtest_no_inheritance_from_nominal.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xProtocol)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xC)) ((xProtocol)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xProtocol)) ((xC)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xBP)) ((xC)) ((xProtocol)))
                        (((unsupported)).apply ((xBP)) ((xC)))
                        (((unsupported)).apply ((xC)) ((xBP)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xD)).apply)) ((xE)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xE)).apply)) ((xD)))
                xtest_no_instantiation.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xP)).apply)
                        (((unsupported)).apply ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xC)))
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xPG)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply ((xPG)) ((xint)))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply ((xPG)) ((xT)))).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xPG)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((((unsupported)).apply ((xCG)) ((xint)))).apply)) ((xCG)))
                xtest_cannot_instantiate_abstract.write
                  [xself]
                    memory > xameth
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xameth.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((xNotImplementedError)))
                        (((unsupported)).apply ((xP)))
                        (((unsupported)).apply ((xB)))
                          xameth.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (26))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xB)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xP)))
                xtest_subprotocols_extending.write
                  [xself]
                    memory > xmeth1
                    memory > xmeth2
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)))
                          xmeth1.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((xP1)) ((xProtocol)) ((xruntime_checkable)))
                          xmeth2.write
                            [xself]
                              seq > @
                        (((unsupported)).apply)
                          seq
                            xmeth1.write
                              [xself]
                                seq > @
                            xmeth2.write
                              [xself]
                                seq > @
                        (((unsupported)).apply)
                          xmeth1.write
                            [xself]
                              seq > @
                        (((unsupported)).apply)
                          xmeth2.write
                            [xself]
                              seq > @
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xC1)).apply)) ((xP2)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xC2)).apply)) ((xP2)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xC1)) ((xP2)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xC2)) ((xP2)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xP2)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xC)) ((xP2)))
                xtest_subprotocols_merging.write
                  [xself]
                    memory > xmeth1
                    memory > xmeth2
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)))
                          xmeth1.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((xProtocol)))
                          xmeth2.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((xP1)) ((xP2)) ((xProtocol)) ((xruntime_checkable)))
                        (((unsupported)).apply)
                          seq
                            xmeth1.write
                              [xself]
                                seq > @
                            xmeth2.write
                              [xself]
                                seq > @
                        (((unsupported)).apply)
                          xmeth1.write
                            [xself]
                              seq > @
                        (((unsupported)).apply)
                          xmeth2.write
                            [xself]
                              seq > @
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xC1)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xC2)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xC1)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xC2)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xC)) ((xP)))
                xtest_protocols_issubclass.write
                  [xself]
                    memory > xx
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xx.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))) ((xruntime_checkable)))
                          xx.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply ((xProtocol)))
                          xx.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))))
                          xx.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply)
                          xx.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xC)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xC)) ((xPG)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xBadP)) ((xPG)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xC)) ((((unsupported)).apply ((xPG)) ((xT)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xC)) ((((unsupported)).apply ((xPG)) ((xC)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xC)) ((xBadP)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xC)) ((xBadPG)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xP)) ((((unsupported)).apply ((xPG)) ((xT)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xPG)) ((((unsupported)).apply ((xPG)) ((xint)))))
                xtest_protocols_issubclass_non_callable.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xx.write 1
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xx.write 1
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xC)) ((xPNonCall)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xPNonCall)))
                        bogusForceDataize.write ((((xPNonCall).xregister)).apply ((xC)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xC)) ((xPNonCall)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xPNonCall)))
                        (((unsupported)).apply ((xPNonCall)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xC)) ((xD)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xC)).apply)) ((xD)))
                        bogusForceDataize.write ((((xD).xregister)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xC)) ((xD)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xD)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xD)) ((xPNonCall)))
                xtest_protocols_isinstance.write
                  [xself]
                    memory > xmeth
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xmeth.write
                            [xx]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))) ((xruntime_checkable)))
                          xmeth.write
                            [xx]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply ((xProtocol)))
                          xmeth.write
                            [xx]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))))
                          xmeth.write
                            [xx]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply)
                          xmeth.write
                            [xx]
                              seq > @
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xPG)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((((xC)).apply)) ((((unsupported)).apply ((xPG)) ((xT)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((((xC)).apply)) ((((unsupported)).apply ((xPG)) ((xC)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((((xC)).apply)) ((xBadP)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((((xC)).apply)) ((xBadPG)))
                xtest_protocols_isinstance_py36.write
                  [xself]
                    memory > xmeth
                    memory > xlabel
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__init__.write
                            [xself xx xy xlabel]
                              seq > @
                                seq
                                  (((unsupported)).apply (((xself).xx)) ((xx)))
                                  (((unsupported)).apply (((xself).xy)) ((xy)))
                                  (((unsupported)).apply (((xself).xlabel)) ((xlabel)))
                        (((unsupported)).apply)
                          seq
                            xlabel.write "B"
                            x__init__.write
                              [xself xx xy]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xx)) ((xx)))
                                    (((unsupported)).apply (((xself).xy)) ((xy)))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xattr]
                                seq > @
                                  (((unsupported)).apply (((xself).xattr)) ((xattr)))
                            xmeth.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply (0))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xAPoint)).apply (1) (2) ("A"))) ((xPoint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xBPoint)).apply (1) (2))) ((xPoint)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xMyPoint)).apply)) ((xPoint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xBPoint)).apply (1) (2))) ((xPosition)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xOther)).apply)) ((xProto)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xConcrete)).apply)) ((xProto)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply (42))) ((xProto)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xBad)).apply)) ((xProto)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xBad)).apply)) ((xPoint)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xBad)).apply)) ((xPosition)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xBad)).apply)) ((xConcrete)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xOther)).apply)) ((xConcrete)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xNT)).apply (1) (2))) ((xPosition)))
                xtest_protocols_isinstance_init.write
                  [xself]
                    memory > xx
                    memory > x__init__
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xx.write 1
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))) ((xruntime_checkable)))
                          xx.write 1
                        (((unsupported)).apply)
                          x__init__.write
                            [xself xx]
                              seq > @
                                (((unsupported)).apply (((xself).xx)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply (1))) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply (1))) ((xPG)))
                xtest_protocol_checks_after_subscript.write
                  [xself]
                    memory > xCI
                    memory > xCA
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xP)) ((xT)))))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xCA.write (((unsupported)).apply ((xC)) ((xAny)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xOther1)).apply)) ((xC)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xOther2)) ((xC)))
                        (((unsupported)).apply ((((unsupported)).apply ((xC)) ((xAny)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xC)) ((xAny)))))
                        xCI.write (((unsupported)).apply ((xC)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xD1)).apply)) ((xC)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xD2)) ((xC)))
                xtest_protocols_support_register.write
                  [xself]
                    memory > xx
                    memory > xmeth
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xx.write 1
                        (((unsupported)).apply ((xProtocol)))
                          xmeth.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((xPM)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xD).xregister)).apply ((xC)))
                        bogusForceDataize.write ((((xP).xregister)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xD)))
                xtest_none_on_non_callable_doesnt_block_implementation.write
                  [xself]
                    memory > xx
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xx.write 1
                        (((unsupported)).apply)
                          xx.write 1
                        (((unsupported)).apply ((xA)))
                          xx.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xx)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xB)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xP)))
                xtest_none_on_callable_blocks_implementation.write
                  [xself]
                    memory > xx
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xx.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply)
                          xx.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply ((xA)))
                          xx.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xx)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xB)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xC)).apply)) ((xP)))
                xtest_non_protocol_subclasses.write
                  [xself]
                    memory > xx
                    memory > xmeth
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)))
                          xx.write 1
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xmeth.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((xP)))
                          xx.write 1
                        (((unsupported)).apply ((xPR)))
                        (((unsupported)).apply)
                          xx.write 1
                        (((unsupported)).apply)
                          xmeth.write
                            [xself]
                              seq > @
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xC)).apply)) ((xNonP)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xD)).apply)) ((xNonPR)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xC)) ((xNonP)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xD)) ((xNonPR)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xNonPR)).apply)) ((xPR)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xNonPR)) ((xPR)))
                xtest_custom_subclasshook.write
                  [xself]
                    memory > xx
                    memory > x__subclasshook__
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)))
                          xx.write 1
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          xx.write 1
                        (((unsupported)).apply ((xP)))
                          x__subclasshook__.write
                            [xcls xother]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((((xother).x__name__).xstartswith)).apply ("OK"))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xOKClass)).apply)) ((xC)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xBadClass)).apply)) ((xC)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xOKClass)) ((xC)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xBadClass)) ((xC)))
                xtest_issubclass_fails_correctly.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xx.write 1
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((((xC)).apply)) ((xP)))
                xtest_defining_generic_protocols.write
                  [xself]
                    memory > xS
                    memory > xmeth
                    memory > xy
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xS.write (((xTypeVar)).apply ("S"))
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((((unsupported)).apply ((xT)) ((xS)))))) ((xruntime_checkable)))
                          xmeth.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((((unsupported)).apply ((xPR)) ((((unsupported)).apply ((xint)) ((xT)))))) ((((unsupported)).apply ((xProtocol)) ((xT)))))
                          xy.write 1
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xPR)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xP)) ((((unsupported)).apply ((xint)) ((xstr)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xPR)) ((((unsupported)).apply ((xint)) (1))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xPR)) ((((unsupported)).apply ((xint)) ((xClassVar)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xPR)) ((((unsupported)).apply ((xint)) ((xT)))))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((((unsupported)).apply ((xC)) ((xstr)))).apply)) ((xC)))
                xtest_defining_generic_protocols_old_style.write
                  [xself]
                    memory > xmeth
                    memory > xT
                    memory > xx
                    memory > xy
                    memory > xbar
                    memory > xS
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xS.write (((xTypeVar)).apply ("S"))
                        (((unsupported)).apply ((xProtocol)) ((((unsupported)).apply ((xGeneric)) ((((unsupported)).apply ((xT)) ((xS)))))) ((xruntime_checkable)))
                          xmeth.write
                            [xself]
                              seq > @
                        (((unsupported)).apply ((((unsupported)).apply ((xPR)) ((((unsupported)).apply ((xint)) ((xstr)))))) ((xProtocol)))
                          xy.write 1
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((((unsupported)).apply ((xPR)) ((((unsupported)).apply ((xint)) ((xstr)))))) ((xPR)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xP)) ((xPR)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xPR)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xPR)) ((((unsupported)).apply ((xint)) (1))))
                        (((unsupported)).apply ((xProtocol)) ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          xbar.write
                            [xself xx]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((xProtocol)))
                          xbar.write
                            [xself xx]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xP1)) ((xstr)))) ((xProtocol)) ((xruntime_checkable)))
                          xx.write 1
                        (((unsupported)).apply)
                          seq
                            xx.write 1
                            xbar.write
                              [xself xx]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xTest)).apply)) ((xPSub)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xPR)) ((((unsupported)).apply ((xint)) ((xClassVar)))))
                xtest_init_called.write
                  [xself]
                    memory > x__init__
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xP)) ((xT)))))
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xtest)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xC)) ((xint)))).apply).xtest)) ("OK"))
                xtest_protocols_bad_subscripts.write
                  [xself]
                    memory > xS
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xS.write (((xTypeVar)).apply ("S"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((((unsupported)).apply ((xT)) ((xT)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))) ((((unsupported)).apply ((xProtocol)) ((xS)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xtyping).xMapping)) ((((unsupported)).apply ((xT)) ((xS)))))) ((((unsupported)).apply ((xProtocol)) ((xT)))))
                xtest_generic_protocols_repr.write
                  [xself]
                    memory > xS
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xS.write (((xTypeVar)).apply ("S"))
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((((unsupported)).apply ((xT)) ((xS)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply ((((unsupported)).apply ((xP)) ((((unsupported)).apply ((xT)) ((xS))))))).xendswith)).apply ("P[~T, ~S]"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply ((((unsupported)).apply ((xP)) ((((unsupported)).apply ((xint)) ((xstr))))))).xendswith)).apply ("P[int, str]"))))
                xtest_generic_protocols_eq.write
                  [xself]
                    memory > xS
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xS.write (((xTypeVar)).apply ("S"))
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((((unsupported)).apply ((xT)) ((xS)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xP)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xP)) ((((unsupported)).apply ((xint)) ((xT)))))) ((((unsupported)).apply ((xP)) ((((unsupported)).apply ((xint)) ((xT)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xP)) ((((unsupported)).apply ((xT)) ((xT)))))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xS)))))))) ((((unsupported)).apply ((xint)) ((xstr)))))) ((((unsupported)).apply ((xP)) ((((unsupported)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xstr)))))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xstr)))))))))))
                xtest_generic_protocols_special_from_generic.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xP).x__parameters__)) ((((unsupported)).apply ((xT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xP)) ((xint))).x__parameters__)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xP)) ((xint))).x__args__)) ((((unsupported)).apply ((xint)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply ((xP)) ((xint))).x__origin__)) ((xP)))
                xtest_generic_protocols_special_from_protocol.write
                  [xself]
                    memory > xx
                    memory > xmeth
                    memory > xT
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xx.write 1
                        (((unsupported)).apply ((xProtocol)))
                          xmeth.write
                            [xself]
                              seq > @
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))))
                          seq
                            xx.write 1
                            xmeth.write
                              [xself]
                                seq > @
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xP).x_is_protocol)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xPR).x_is_protocol)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xPG).x_is_protocol)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xP).x_is_runtime_protocol)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xPR).x_is_runtime_protocol)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xPG)) ((xint))).x_is_protocol)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtyping).x_get_protocol_attrs)).apply ((xP)))) ((((unsupported)).apply ("meth"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtyping).x_get_protocol_attrs)).apply ((xPR)))) ((((unsupported)).apply ("x"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfrozenset)).apply (((((xtyping).x_get_protocol_attrs)).apply ((xPG)))))) ((((xfrozenset)).apply ((((unsupported)).apply ("x") ("meth"))))))
                xtest_no_runtime_deco_on_nominal.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xruntime_checkable)))
                        (((unsupported)).apply ((xProtocol)))
                          xx.write 1
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xProto)) ((xruntime_checkable)))
                xtest_none_treated_correctly.write
                  [xself]
                    memory > xx
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)) ((xruntime_checkable)))
                          xx.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xobject)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xB)).apply)) ((xP)))
                        (((unsupported)).apply)
                          xx.write 1
                        (((unsupported)).apply)
                          xx.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xD)).apply)) ((xP)))
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xx)) (1))
                        (((unsupported)).apply)
                          x__init__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (((xself).xx)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC)).apply)) ((xP)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xD)).apply)) ((xP)))
                xtest_protocols_in_unions.write
                  [xself]
                    memory > xx
                    memory > xAlias2
                    memory > xAlias
                    seq > @
                      seq
                        (((unsupported)).apply ((xProtocol)))
                          xx.write "None: is there a None literal in the EO language?"
                        xAlias.write (((unsupported)).apply (((xtyping).xUnion)) ((((unsupported)).apply (((xtyping).xIterable)) ((xP)))))
                        xAlias2.write (((unsupported)).apply (((xtyping).xUnion)) ((((unsupported)).apply ((xP)) (((xtyping).xIterable)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xAlias)) ((xAlias2)))
                xtest_protocols_pickleable.write
                  [xself]
                    memory > xD
                    memory > xc
                    memory > xz
                    memory > xT
                    memory > xx
                    memory > xs
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xProtocol)) ((xT)))) ((xruntime_checkable)))
                          xx.write 1
                        (((unsupported)).apply ((((unsupported)).apply ((xP)) ((xint)))))
                        xc.write (((xCP)).apply)
                        (((unsupported)).apply (((xc).xfoo)) (42))
                        (((unsupported)).apply (((xc).xbar)) ("abc"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xz.write ((((xpickle).xdumps)).apply ((xc)) ((xproto)))
                            xx.write ((((xpickle).xloads)).apply ((xz)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xfoo)) (42))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xbar)) ("abc"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xx)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x__dict__)) ((((unsupported)).apply ("foo") (42) ("bar") ("abc"))))
                            xs.write ((((xpickle).xdumps)).apply ((xP)))
                            xD.write ((((xpickle).xloads)).apply ((xs)))
                            (((unsupported)).apply)
                              xx.write 1
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xE)).apply)) ((xD)))
                xtest_supports_int.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xint)) (((xtyping).xSupportsInt)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xstr)) (((xtyping).xSupportsInt)))
                xtest_supports_float.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xfloat)) (((xtyping).xSupportsFloat)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xstr)) (((xtyping).xSupportsFloat)))
                xtest_supports_complex.write
                  [xself]
                    memory > x__complex__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__complex__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xC)) (((xtyping).xSupportsComplex)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xstr)) (((xtyping).xSupportsComplex)))
                xtest_supports_bytes.write
                  [xself]
                    memory > x__bytes__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__bytes__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (""))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xB)) (((xtyping).xSupportsBytes)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xstr)) (((xtyping).xSupportsBytes)))
                xtest_supports_abs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xfloat)) (((xtyping).xSupportsAbs)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xint)) (((xtyping).xSupportsAbs)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xstr)) (((xtyping).xSupportsAbs)))
                xtest_supports_round.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xissubclass)).apply ((xfloat)) (((xtyping).xSupportsRound)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xfloat)) (((xtyping).xSupportsRound)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xint)) (((xtyping).xSupportsRound)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xstr)) (((xtyping).xSupportsRound)))
                xtest_reversible.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xlist)) (((xtyping).xReversible)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xint)) (((xtyping).xReversible)))
                xtest_supports_index.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xint)) (((xtyping).xSupportsIndex)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xstr)) (((xtyping).xSupportsIndex)))
                xtest_bundled_protocol_instance_works.write
                  [xself]
                    memory > xc
                    memory > x__int__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (0) (((xtyping).xSupportsAbs)))
                        (((unsupported)).apply (((xtyping).xSupportsInt)))
                          x__int__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (42))
                        (((unsupported)).apply ((xC1)))
                        xc.write (((xC2)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xc)) ((xC1)))
                xtest_collections_protocols_allowed.write
                  [xself]
                    memory > xclose
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)).apply ((((xcollections).xabc).xIterable)) ((xProtocol)) ((xruntime_checkable)))
                          xclose.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply)))
                            xclose.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (0))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xB)) ((xCustom)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xA)) ((xCustom)))
                xtest_builtin_protocol_whitelist.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xTestCase)) ((xProtocol)))
                        (((unsupported)).apply (((xtyping).xContextManager)) ((xProtocol)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xY
                    memory > xX
                    memory > xSM1
                    seq > @
                      seq
                        xX.write (((unsupported)).apply ((xSimpleMapping)) ((((unsupported)).apply ((xstr)) ((xAny)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xX).x__parameters__)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xX)) ((xstr)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xX)) ((((unsupported)).apply ((xstr)) ((xstr)))))
                        xY.write (((unsupported)).apply ((xSimpleMapping)) ((((unsupported)).apply ((xXK)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xY).x__parameters__)) ((((unsupported)).apply ((xXK)))))
                        (((unsupported)).apply ((xY)) ((xstr)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xY)) ((((unsupported)).apply ((xstr)) ((xstr)))))
                        xSM1.write (((unsupported)).apply ((xSimpleMapping)) ((((unsupported)).apply ((xstr)) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xSM1)) ((xSimpleMapping)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xSM1)).apply)) ((xSimpleMapping)))
                xtest_generic_errors.write
                  [xself]
                    memory > xS
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xS.write (((xTypeVar)).apply ("S"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply ((xGeneric)) ((xT)))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((xT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((xS)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((((unsupported)).apply ((xGeneric)) ((xT)))))
                            (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xList)) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xlist)) ((((unsupported)).apply ((xList)) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xGeneric)))
                            (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((((unsupported)).apply ((xGeneric)) ((xS)))))
                            (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xList)) ((xT)))) ((((unsupported)).apply ((xGeneric)) ((xS)))))
                            (((unsupported)).apply)
                xtest_init.write
                  [xself]
                    memory > xS
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xS.write (((xTypeVar)).apply ("S"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xGeneric)) ((((unsupported)).apply ((xT)) ((xT)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xGeneric)) ((((unsupported)).apply ((xT)) ((xS)) ((xT)))))
                xtest_init_subclass.write
                  [xself]
                    memory > x__init_subclass__
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xGeneric)) ((xT)))))
                          x__init_subclass__.write
                            [xcls]
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((((xsuper)).apply).x__init_subclass__)).apply ((((unsupported)).apply ((xkwargs)))))
                                  (((unsupported)).apply (((xcls).xattr)) (42))
                        (((unsupported)).apply ((xX)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xY).xattr)) (42))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        (((unsupported)).apply (((xX).xattr)) (1))
                        (((unsupported)).apply (((xY).xattr)) (2))
                        (((unsupported)).apply ((xY)))
                        (((unsupported)).apply ((((unsupported)).apply ((xX)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xY).xattr)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xZ).xattr)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xW).xattr)) (42))
                xtest_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xSimpleMapping)))) ("<class '{__name__}.SimpleMapping'>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xMySimpleMapping)))) ("<class '{__name__}.MySimpleMapping'>"))
                xtest_chain_repr.write
                  [xself]
                    memory > xZ
                    memory > xS
                    memory > xT
                    memory > xX
                    memory > xY
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xS.write (((xTypeVar)).apply ("S"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        xX.write (((unsupported)).apply ((xC)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xS)) ((xT)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xX)) ((((unsupported)).apply ((xC)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xS)) ((xT)))))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xX)) ((((unsupported)).apply ((xC)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xS)))))))))
                        xY.write (((unsupported)).apply ((xX)) ((((unsupported)).apply ((xT)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xY)) ((((unsupported)).apply ((xX)) ((((unsupported)).apply ((xT)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xY)) ((((unsupported)).apply ((xX)) ((((unsupported)).apply ((xS)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xY)) ((((unsupported)).apply ((xX)) ((((unsupported)).apply ((xT)) ((xstr)))))))
                        xZ.write (((unsupported)).apply ((xY)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xZ)) ((((unsupported)).apply ((xY)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xZ)) ((((unsupported)).apply ((xY)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xZ)) ((((unsupported)).apply ((xY)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xstr)).apply ((xZ))).xendswith)).apply (".C[typing.Tuple[str, int]]"))))
                xtest_new_repr.write
                  [xself]
                    memory > xS
                    memory > xT
                    memory > xU
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xU.write (((unsupported)).apply ((xTypeVar)) ("U") (TRUE))
                        xS.write (((xTypeVar)).apply ("S"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xList)))) ("typing.List"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xList)) ((xT)))))) ("typing.List[~T]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xList)) ((xU)))))) ("typing.List[+U]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((xS)))) ((xT)))) ((xint)))))) ("typing.List[int]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xList)) ((xint)))))) ("typing.List[int]"))
                xtest_new_repr_complex.write
                  [xself]
                    memory > xTS
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xTS.write (((xTypeVar)).apply ("TS"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((((unsupported)).apply (((xtyping).xMapping)) ((((unsupported)).apply ((xT)) ((xTS)))))) ((((unsupported)).apply ((xTS)) ((xT)))))))) ("typing.Mapping[~TS, ~T]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xTS)))))))) ((((unsupported)).apply ((xint)) ((xT)))))))) ("typing.List[typing.Tuple[int, ~T]]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xT)))))))) ((((unsupported)).apply ((xList)) ((xint)))))))) ("typing.List[typing.Tuple[typing.List[int], typing.List[int]]]"))
                xtest_new_repr_bare.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))) ("typing.Generic[~T]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply (((xtyping).xProtocol)) ((xT)))))) ("typing.Protocol[~T]"))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xAny)) ((xAny)))))))
                          (((unsupported)).apply)
                        bogusForceDataize.write (((xrepr)).apply (((xC).x__mro__)))
                xtest_dict.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        xb.write (((xB)).apply)
                        (((unsupported)).apply (((xb).xfoo)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).x__dict__)) ((((unsupported)).apply ("foo") (42))))
                        (((unsupported)).apply ((((unsupported)).apply ((xB)) ((xint)))))
                        xc.write (((xC)).apply)
                        (((unsupported)).apply (((xc).xbar)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).x__dict__)) ((((unsupported)).apply ("bar") ("abc"))))
                xtest_subscripted_generics_as_proxies.write
                  [xself]
                    memory > xx
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          xx.write "def"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ((xint))).xx)) ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ((((unsupported)).apply ((xC)) ((xint))))).xx)) ("def"))
                        (((unsupported)).apply (((((unsupported)).apply ((xC)) ((((unsupported)).apply ((xC)) ((xint))))).xx)) ("changed"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xx)) ("changed"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ((xstr))).xx)) ("changed"))
                        (((unsupported)).apply (((((unsupported)).apply ((xC)) ((((unsupported)).apply ((xList)) ((xstr))))).xz)) ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xz)) ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ((((unsupported)).apply ((xTuple)) ((xint))))).xz)) ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC)).apply).xx)) ("changed"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xC)) ((((unsupported)).apply ((xTuple)) ((xstr)))))).apply).xz)) ("new"))
                        (((unsupported)).apply ((((unsupported)).apply ((xC)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xD)) ((xint))).xx)) ("changed"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xD).xz)) ("new"))
                        (((unsupported)).apply (((xD).xz)) ("from derived z"))
                        (((unsupported)).apply (((((unsupported)).apply ((xD)) ((xint))).xx)) ("from derived x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).xx)) ("changed"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ((xint))).xz)) ("new"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xD).xx)) ("from derived x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xD)) ((xstr))).xz)) ("from derived z"))
                xtest_abc_registry_kept.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((xcollections).xabc).xMapping)) ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xC).xregister)).apply ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (1) ((xC)))
                        (((unsupported)).apply ((xC)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (1) ((xC)))
                        bogusForceDataize.write ((((xC).x_abc_registry_clear)).apply)
                        bogusForceDataize.write ((((xC).x_abc_caches_clear)).apply)
                xtest_false_subclasses.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xMutableMapping)) ((((unsupported)).apply ((xstr)) ((xstr)))))))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((unsupported)).apply)) ((xMyMapping)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xdict)) ((xMyMapping)))
                xtest_abc_bases.write
                  [xself]
                    memory > x__iter__
                    memory > x__getitem__
                    memory > x__delitem__
                    memory > x__setitem__
                    memory > x__len__
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xMutableMapping)) ((((unsupported)).apply ((xstr)) ((xstr)))))))
                          seq
                            x__getitem__.write
                              [xself xk]
                                seq > @
                                  (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                            x__setitem__.write
                              [xself xk xv]
                                seq > @
                            x__delitem__.write
                              [xself xk]
                                seq > @
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply)))))
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (0))
                        bogusForceDataize.write ((((((xMM)).apply).xupdate)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xMM)).apply)) ((((xcollections).xabc).xMutableMapping)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xMM)).apply)) ((xMutableMapping)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xMM)).apply)) ((xList)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((unsupported)).apply)) ((xMM)))
                xtest_multiple_bases.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xMutableMapping)) ((((unsupported)).apply ((xstr)) ((xstr)))))) ((((xcollections).xabc).xMutableMapping)))
                        (((unsupported)).apply ((((xcollections).xabc).xMutableMapping)) ((((unsupported)).apply ((xMutableMapping)) ((((unsupported)).apply ((xstr)) ((xstr)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xMM2).x__bases__)) ((((unsupported)).apply ((((xcollections).xabc).xMutableMapping)) ((xGeneric)))))
                xtest_orig_bases.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xstr)) ((xT)))))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__orig_bases__)) ((((unsupported)).apply ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xstr)) ((xT)))))))))
                xtest_naive_runtime_checks.write
                  [xself]
                    memory > xnaive_list_base_check
                    memory > xnaive_dict_check
                    memory > xnaive_generic_check
                    seq > @
                      seq
                        xnaive_dict_check.write
                          [xobj xtp]
                            seq > @
                              seq
                                ((((xlen)).apply (((xtp).x__parameters__))).greater 0).if
                                  (((unsupported)).apply ((xNotImplementedError)))
                                ((xtp).x__args__).if
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xKT)) ((xVT)))) (((xtp).x__args__)))
                                    (((unsupported)).apply ((((xall)).apply ((((unsupported)).apply (((((xisinstance)).apply ((xk)) ((xKT))).and (((xisinstance)).apply ((xv)) ((xVT))))) ((((unsupported)).apply ((xk)) ((xv)))) (((((xobj).xitems)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xnaive_dict_check)).apply ((((unsupported)).apply ("x") (1))) ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xstr)) ((xint)))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xnaive_dict_check)).apply ((((unsupported)).apply (1) ("x"))) ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xstr)) ((xint)))))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNotImplementedError)))))
                          bogusForceDataize.write (((xnaive_dict_check)).apply ((((unsupported)).apply (1) ("x"))) ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xstr)) ((xT)))))))
                        xnaive_generic_check.write
                          [xobj xtp]
                            seq > @
                              seq
                                ((((xhasattr)).apply ((xobj)) ("__orig_class__")).not).if
                                  (((unsupported)).apply ((xNotImplementedError)))
                                (((unsupported)).apply ((((xobj).x__orig_class__).eq (xtp))))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xnaive_generic_check)).apply ((((((unsupported)).apply ((xNode)) ((xint)))).apply)) ((((unsupported)).apply ((xNode)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xnaive_generic_check)).apply ((((((unsupported)).apply ((xNode)) ((xstr)))).apply)) ((((unsupported)).apply ((xNode)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xnaive_generic_check)).apply ((((((unsupported)).apply ((xNode)) ((xstr)))).apply)) ((xList)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNotImplementedError)))))
                          bogusForceDataize.write (((xnaive_generic_check)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply ((xNode)) ((xint)))))
                        xnaive_list_base_check.write
                          [xobj xtp]
                            seq > @
                              (((unsupported)).apply ((((xall)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xx)) ((((unsupported)).apply (((((unsupported)).apply (((xtp).x__orig_bases__)) (0)).x__args__)) (0))))) ((xx)) ((xobj)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xList)) ((xint)))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xnaive_list_base_check)).apply ((((unsupported)).apply (1) (2) (3))) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xnaive_list_base_check)).apply ((((unsupported)).apply ("a") ("b"))) ((xC)))))
                xtest_multi_subscr_base.write
                  [xself]
                    memory > xV
                    memory > xT
                    memory > xU
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xU.write (((xTypeVar)).apply ("U"))
                        xV.write (((xTypeVar)).apply ("V"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((xT)))) ((xU)))) ((xV)))))
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xC)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((xT)))) ((xU)))) ((xV)))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__parameters__)) ((((unsupported)).apply ((xV)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xD).x__parameters__)) ((((unsupported)).apply ((xV)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ((xint))).x__parameters__)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xD)) ((xint))).x__parameters__)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ((xint))).x__args__)) ((((unsupported)).apply ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xD)) ((xint))).x__args__)) ((((unsupported)).apply ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__bases__)) ((((unsupported)).apply ((xlist)) ((xGeneric)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xD).x__bases__)) ((((unsupported)).apply ((xC)) ((xlist)) ((xGeneric)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__orig_bases__)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((xT)))) ((xU)))) ((xV)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xD).x__orig_bases__)) ((((unsupported)).apply ((xC)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((xT)))) ((xU)))) ((xV)))))))
                xtest_subscript_meta.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((xtype)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xType)) ((xMeta)))) ((((unsupported)).apply ((xType)) ((xMeta)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xT)) ((xint)))))) ((xMeta)))) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xMeta)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xMeta))))).x__args__)) ((((unsupported)).apply ((xEllipsis)) ((xMeta)))))
                xtest_generic_hashes.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                            (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xA)) ((xA)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmod_generics_cache).xA)) ((xstr)))) ((((unsupported)).apply (((xmod_generics_cache).xA)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xB).xA)) (((xB).xA)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xmod_generics_cache).xB).xA)) ((((unsupported)).apply (((xB).xA)) ((xstr)))))) ((((unsupported)).apply ((((xmod_generics_cache).xB).xA)) ((((unsupported)).apply (((xB).xA)) ((xstr)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xA)) (((xB).xA)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xA)) (((xmod_generics_cache).xA)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xA)) ((((xmod_generics_cache).xB).xA)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xB).xA)) (((xmod_generics_cache).xA)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xB).xA)) ((((xmod_generics_cache).xB).xA)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xA)) ((xstr)))) ((((unsupported)).apply (((xB).xA)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xA)) ((((unsupported)).apply ((xList)) ((xAny)))))) ((((unsupported)).apply (((xB).xA)) ((((unsupported)).apply ((xList)) ((xAny)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xA)) ((xstr)))) ((((unsupported)).apply (((xmod_generics_cache).xA)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xA)) ((xstr)))) ((((unsupported)).apply ((((xmod_generics_cache).xB).xA)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply (((xB).xA)) ((xint)))) ((((unsupported)).apply (((xmod_generics_cache).xA)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply (((xB).xA)) ((((unsupported)).apply ((xList)) ((xAny)))))) ((((unsupported)).apply ((((xmod_generics_cache).xB).xA)) ((((unsupported)).apply ((xList)) ((xAny)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xA)) ((xstr)))))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply (((xB).xA)) ((xstr)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xA)) ((((unsupported)).apply ((xList)) ((xAny)))))))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply (((xB).xA)) ((((unsupported)).apply ((xList)) ((xAny)))))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xA)) ((xstr)))))))) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply (((xmod_generics_cache).xA)) ((xstr)))))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((((unsupported)).apply ((xA)) ((xstr)))) ((((unsupported)).apply ((xA)) ((xstr)))))))) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((((unsupported)).apply ((xA)) ((xstr)))) ((((unsupported)).apply (((xmod_generics_cache).xA)) ((xstr)))))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply (((xtyping).xFrozenSet)) ((((unsupported)).apply ((xA)) ((xstr)))))) ((((unsupported)).apply (((xtyping).xFrozenSet)) ((((unsupported)).apply ((((xmod_generics_cache).xB).xA)) ((xstr)))))))
                        ((((unsupported)).apply (((xsys).xversion_info)) ((((unsupported)).apply (2)))).greater (((unsupported)).apply (3) (2))).if
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xA)) ((xstr))))))).xendswith)).apply ("<locals>.A[str]]"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply (((xB).xA)) ((xstr))))))).xendswith)).apply ("<locals>.B.A[str]]"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply (((xmod_generics_cache).xA)) ((xstr))))))).xendswith)).apply ("mod_generics_cache.A[str]]"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xrepr)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((((xmod_generics_cache).xB).xA)) ((xstr))))))).xendswith)).apply ("mod_generics_cache.B.A[str]]"))))
                xtest_extended_generic_rules_eq.write
                  [xself]
                    memory > xT
                    memory > xU
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xU.write (((xTypeVar)).apply ("U"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xT)))))) ((xint)))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xtyping).xIterable)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xT)))))))) ((xT)))) ((((unsupported)).apply (((xtyping).xIterable)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xT)))))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xint)))))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xU)))))) ((((unsupported)).apply ((xT)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xT)) ((xint)))))) ((xint)))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xT)) ((xU)))))) ((((unsupported)).apply ((xint)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))))))) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))))
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xBase)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xT)) ((xBase)))))) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xBase)) ((xDerived)))))))) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xBase)) ((xDerived)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xT)) ((xint)))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xT)))) ((xT)))))) ((xKT)))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xKT)))) ((xKT)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xList)) ((xT)))))))) ((xint)))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xList)) ((xint)))))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xT)))) ((xU)))))) ((((unsupported)).apply ((((unsupported)).apply)) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xT)))) ((xU)))))) ((((unsupported)).apply ((((unsupported)).apply)) ((xint)))))
                xtest_extended_generic_rules_repr.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrepr)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xTuple)) ((xCallable))))))).xreplace)).apply ("typing.") (""))) ("Union[Tuple, Callable]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrepr)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xTuple)) ((xint))))))))).xreplace)).apply ("typing.") (""))) ("Union[Tuple, Tuple[int]]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrepr)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xOptional)) ((xT)))))))) ((xint))))).xreplace)).apply ("typing.") (""))) ("Callable[..., Union[int, NoneType]]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xrepr)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xList)) ((xT)))))))) ((xint))))).xreplace)).apply ("typing.") (""))) ("Callable[[], List[int]]"))
                xtest_generic_forward_ref.write
                  [xself]
                    memory > xbarfoo2
                    memory > xCT
                    memory > xT
                    memory > xbarfoo
                    memory > xfoobar
                    memory > xAT
                    seq > @
                      seq
                        xfoobar.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xfoobar)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("x") ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xList)) ((xCC)))))))))
                        xT.write (((xTypeVar)).apply ("T"))
                        xAT.write (((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((((unsupported)).apply)))))
                        xbarfoo.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((((xget_type_hints)).apply ((xbarfoo)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ("x"))) ((xAT)))
                        xCT.write (((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((xList)) ((xT)))))))
                        xbarfoo2.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((((xget_type_hints)).apply ((xbarfoo2)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ("x"))) ((xCT)))
                xtest_extended_generic_rules_subclassing.write
                  [xself]
                    memory > x__call__
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xKT)))))))
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((((unsupported)).apply)))))))
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xT)))) ((xT)))))))
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xint)))))))
                          x__call__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xT1).x__parameters__)) ((((unsupported)).apply ((xT)) ((xKT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xT1)) ((((unsupported)).apply ((xint)) ((xstr))))).x__args__)) ((((unsupported)).apply ((xint)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xT1)) ((((unsupported)).apply ((xint)) ((xT))))).x__origin__)) ((xT1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xT2).x__parameters__)) ((((unsupported)).apply ((xT)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xT1)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xT2)) ((((unsupported)).apply ((xint)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((xrepr)).apply ((((unsupported)).apply ((xC1)) ((xint))))).xsplit)).apply ("."))) ((1.neg)))) ("C1[int]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC2).x__parameters__)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xC2)).apply)) ((((xcollections).xabc).xCallable)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xC2)) ((((xcollections).xabc).xCallable)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xC1)) ((((xcollections).xabc).xCallable)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xT1)).apply)) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xT2)) ((xtuple)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply)))))) (((xtyping).xSequence)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply)))))) (((xtyping).xIterable)))
                xtest_fail_with_bare_union.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xList)) ((xUnion)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xTuple)) ((xOptional)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xClassVar)) ((xClassVar)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xList)) ((((unsupported)).apply ((xClassVar)) ((xint)))))
                xtest_fail_with_bare_generic.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xList)) ((xGeneric)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xList)) (((xtyping).xProtocol)))
                xtest_type_erasure_special.write
                  [xself]
                    memory > x__call__
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        bogusForceDataize.write ((((xself).xclear_caches)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xT)))))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyTup)) ((xint)))).apply).x__class__)) ((xMyTup)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyTup)) ((xint)))).apply).x__orig_class__)) ((((unsupported)).apply ((xMyTup)) ((xint)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xT)))))))
                          x__call__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyCall)) ((xT)))).apply).x__class__)) ((xMyCall)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyCall)) ((xT)))).apply).x__orig_class__)) ((((unsupported)).apply ((xMyCall)) ((xT)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xT)) ((xT)))))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyDict)) ((xint)))).apply).x__class__)) ((xMyDict)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyDict)) ((xint)))).apply).x__orig_class__)) ((((unsupported)).apply ((xMyDict)) ((xint)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xDefaultDict)) ((((unsupported)).apply ((xstr)) ((xT)))))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyDef)) ((xint)))).apply).x__class__)) ((xMyDef)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyDef)) ((xint)))).apply).x__orig_class__)) ((((unsupported)).apply ((xMyDef)) ((xint)))))
                        (((xsys).xversion_info).geq (((unsupported)).apply (3) (3))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xtyping).xChainMap)) ((((unsupported)).apply ((xstr)) ((xT)))))))
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyChain)) ((xint)))).apply).x__class__)) ((xMyChain)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((xMyChain)) ((xint)))).apply).x__orig_class__)) ((((unsupported)).apply ((xMyChain)) ((xint)))))
                xtest_all_repr_eq_any.write
                  [xself]
                    memory > xobjs
                    seq > @
                      seq
                        xobjs.write (((unsupported)).apply ((((xgetattr)).apply ((xtyping)) ((xel)))) ((xel)) (((xtyping).x__all__)))
                        (((unsupported)).apply ((xobj)) ((xobjs)))
                          seq
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xrepr)).apply ((xobj)))) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xobj)) ((xobj)))
                            ((((xgetattr)).apply ((xobj)) ("__parameters__") ("None: is there a None literal in the EO language?")).and ((((xlen)).apply (((xobj).x__parameters__))).eq 1)).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xobj)) ((xAny))).x__args__)) ((((unsupported)).apply ((xAny)))))
                            (((xisinstance)).apply ((xobj)) ((xtype))).if
                              (((unsupported)).apply ((xbase)) (((xobj).x__mro__)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xrepr)).apply ((xbase)))) (""))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbase)) ((xbase)))
                xtest_pickle.write
                  [xself]
                    memory > xsamples
                    memory > xc
                    memory > xz
                    memory > xT
                    memory > xmore_samples
                    memory > xx
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xB)) ((xint)))))
                        xc.write (((xC)).apply)
                        (((unsupported)).apply (((xc).xfoo)) (42))
                        (((unsupported)).apply (((xc).xbar)) ("abc"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xz.write ((((xpickle).xdumps)).apply ((xc)) ((xproto)))
                            xx.write ((((xpickle).xloads)).apply ((xz)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xfoo)) (42))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).xbar)) ("abc"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x__dict__)) ((((unsupported)).apply ("foo") (42) ("bar") ("abc"))))
                        xsamples.write (((unsupported)).apply ((xAny)) ((xUnion)) ((xTuple)) ((xCallable)) ((xClassVar)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))) ((((unsupported)).apply ((xClassVar)) ((xList)))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xstr)))) ((xbytes)))))) (((xtyping).xDefaultDict)) ((((unsupported)).apply (((xtyping).xFrozenSet)) ((xint)))))
                        (((unsupported)).apply ((xs)) ((xsamples)))
                          (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            seq
                              xz.write ((((xpickle).xdumps)).apply ((xs)) ((xproto)))
                              xx.write ((((xpickle).xloads)).apply ((xz)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xx)))
                        xmore_samples.write (((unsupported)).apply ((xList)) (((xtyping).xIterable)) (((xtyping).xType)) ((((unsupported)).apply ((xList)) ((xint)))) ((((unsupported)).apply (((xtyping).xType)) (((xtyping).xMapping)))) ((((unsupported)).apply (((xtyping).xAbstractSet)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xstr)))))))))
                        (((unsupported)).apply ((xs)) ((xmore_samples)))
                          (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            seq
                              xz.write ((((xpickle).xdumps)).apply ((xs)) ((xproto)))
                              xx.write ((((xpickle).xloads)).apply ((xz)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xx)))
                xtest_copy_and_deepcopy.write
                  [xself]
                    memory > xthings
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          (((unsupported)).apply)
                        xthings.write (((unsupported)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xT)) ((xint)))))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xint)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xT)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xint)))) ((xint)))))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xAny)) ((xAny)))))) ((((unsupported)).apply ((xNode)) ((xT)))) ((((unsupported)).apply ((xNode)) ((xint)))) ((((unsupported)).apply ((xNode)) ((xAny)))) ((((unsupported)).apply (((xtyping).xIterable)) ((xT)))) ((((unsupported)).apply (((xtyping).xIterable)) ((xAny)))) ((((unsupported)).apply (((xtyping).xIterable)) ((xint)))) ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xint)) ((xstr)))))) ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xT)) ((xAny)))))) ((((unsupported)).apply ((xClassVar)) ((xint)))) ((((unsupported)).apply ((xClassVar)) ((((unsupported)).apply ((xList)) ((xT)))))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ("T") ("T"))))) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ("T") ((xint)))))) ((((unsupported)).apply ((xList)) ("T"))) ((((unsupported)).apply (((xtyping).xMapping)) ((((unsupported)).apply ("T") ((xint)))))))
                        (((unsupported)).apply ((xt)) (((xthings).add (((unsupported)).apply ((xAny))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((((xcopy)).apply ((xt)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((((xdeepcopy)).apply ((xt)))))
                xtest_immutability_by_copy_and_pickle.write
                  [xself]
                    memory > xTLB
                    memory > xTL
                    memory > xTLV
                    memory > xTPB
                    memory > xTP
                    memory > xTPV
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xTP.write (((xTypeVar)).apply ("TP"))
                        xTPB.write (((unsupported)).apply ((xTypeVar)) ("TPB") ((xint)))
                        xTPV.write (((xTypeVar)).apply ("TPV") ((xbytes)) ((xstr)))
                        (((unsupported)).apply ((xX)) ((((unsupported)).apply ((xTP)) ((xTPB)) ((xTPV)) ((xList)) (((xtyping).xMapping)) ((xClassVar)) (((xtyping).xIterable)) ((xUnion)) ((xAny)) ((xTuple)) ((xCallable)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcopy)).apply ((xX)))) ((xX)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xdeepcopy)).apply ((xX)))) ((xX)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xX)))))) ((xX)))
                        xTL.write (((xTypeVar)).apply ("TL"))
                        xTLB.write (((unsupported)).apply ((xTypeVar)) ("TLB") ((xint)))
                        xTLV.write (((xTypeVar)).apply ("TLV") ((xbytes)) ((xstr)))
                        (((unsupported)).apply ((xX)) ((((unsupported)).apply ((xTL)) ((xTLB)) ((xTLV)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcopy)).apply ((xX)))) ((xX)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xdeepcopy)).apply ((xX)))) ((xX)))
                xtest_copy_generic_instances.write
                  [xself]
                    memory > xc
                    memory > x__init__
                    memory > xci
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          x__init__.write
                            [xself xattr]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((xself).xattr)) ((xattr)))
                        xc.write (((xC)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopy)).apply ((xc))).xattr)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdeepcopy)).apply ((xc))).xattr)) (42))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xcopy)).apply ((xc)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xdeepcopy)).apply ((xc)))) ((xc)))
                        (((unsupported)).apply (((xc).xattr)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopy)).apply ((xc))).xattr)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdeepcopy)).apply ((xc))).xattr)) (1))
                        xci.write (((((unsupported)).apply ((xC)) ((xint)))).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopy)).apply ((xci))).xattr)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdeepcopy)).apply ((xci))).xattr)) (42))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xcopy)).apply ((xci)))) ((xci)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xdeepcopy)).apply ((xci)))) ((xci)))
                        (((unsupported)).apply (((xci).xattr)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcopy)).apply ((xci))).xattr)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdeepcopy)).apply ((xci))).xattr)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xci).x__orig_class__)) ((((unsupported)).apply ((xC)) ((xint)))))
                xtest_weakref_all.write
                  [xself]
                    memory > xthings
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        xthings.write (((unsupported)).apply ((xAny)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xT)) ((xint)))))) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xT)))))) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xAny)) ((xAny)))))) ((((unsupported)).apply ((xOptional)) ((((unsupported)).apply ((xList)) ((xint)))))) ((((unsupported)).apply (((xtyping).xMapping)) ((((unsupported)).apply ((xint)) ((xstr)))))) ((((unsupported)).apply ((((xtyping).xre).xMatch)) ((xbytes)))) ((((unsupported)).apply (((xtyping).xIterable)) ("whatever"))))
                        (((unsupported)).apply ((xt)) ((xthings)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xweakref).xref)).apply ((xt)))).apply)) ((xt)))
                xtest_parameterized_slots.write
                  [xself]
                    memory > xc
                    memory > xT
                    memory > xc_int
                    memory > x__slots__
                    memory > xfoo
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          x__slots__.write (((unsupported)).apply ("potato"))
                        xc.write (((xC)).apply)
                        xc_int.write (((((unsupported)).apply ((xC)) ((xint)))).apply)
                        (((unsupported)).apply (((xc).xpotato)) (0))
                        (((unsupported)).apply (((xc_int).xpotato)) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xc).xtomato)) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xc_int).xtomato)) (0))
                        xfoo.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xget_type_hints)).apply ((xfoo)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ("x"))) ((((unsupported)).apply ((xC)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcopy)).apply ((((unsupported)).apply ((xC)) ((xint)))))) ((((xdeepcopy)).apply ((((unsupported)).apply ((xC)) ((xint)))))))
                xtest_parameterized_slots_dict.write
                  [xself]
                    memory > xd
                    memory > xd_int
                    memory > x__slots__
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          x__slots__.write (((unsupported)).apply ("banana") (42))
                        xd.write (((xD)).apply)
                        xd_int.write (((((unsupported)).apply ((xD)) ((xint)))).apply)
                        (((unsupported)).apply (((xd).xbanana)) ("yes"))
                        (((unsupported)).apply (((xd_int).xbanana)) ("yes"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xd).xfoobar)) ("no"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xd_int).xfoobar)) ("no"))
                xtest_errors.write
                  [xself]
                    memory > xB
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        seq
                          xB.write (((unsupported)).apply ((xSimpleMapping)) ((((unsupported)).apply ((xXK)) ((xAny)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xB)))))
                xtest_repr_2.write
                  [xself]
                    memory > xX
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__module__)) ((x__name__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__qualname__)) ("GenericTests.test_repr_2.<locals>.C"))
                        xX.write (((unsupported)).apply ((xC)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xX).x__module__)) ((x__name__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((xrepr)).apply ((xX))).xsplit)).apply ("."))) ((1.neg)))) ("C[int]"))
                        (((unsupported)).apply ((((unsupported)).apply ((xC)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xY).x__module__)) ((x__name__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xY).x__qualname__)) ("GenericTests.test_repr_2.<locals>.Y"))
                xtest_eq_1.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xGeneric)) ((xGeneric)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xGeneric)) ((xKT)))) ((((unsupported)).apply ((xGeneric)) ((xVT)))))
                xtest_eq_2.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xA)) ((xA)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xA)) ((xB)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xA)) ((xT)))) ((((unsupported)).apply ((xA)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xA)) ((xT)))) ((((unsupported)).apply ((xB)) ((xT)))))
                xtest_multiple_inheritance.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((((unsupported)).apply ((xT)) ((xVT)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((((unsupported)).apply ((xKT)) ((xT)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xA)) ((((unsupported)).apply ((xT)) ((xVT)))))) ((((unsupported)).apply ((xGeneric)) ((((unsupported)).apply ((xVT)) ((xT)) ((xKT)))))) ((((unsupported)).apply ((xB)) ((((unsupported)).apply ((xKT)) ((xT)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__parameters__)) ((((unsupported)).apply ((xVT)) ((xT)) ((xKT)))))
                xtest_multiple_inheritance_special.write
                  [xself]
                    memory > xS
                    seq > @
                      seq
                        xS.write (((xTypeVar)).apply ("S"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xS)))))
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xList)) ((xint)))) ((xB)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xC).x__mro__)) ((((unsupported)).apply ((xC)) ((xlist)) ((xB)) ((xGeneric)) ((xobject)))))
                xtest_init_subclass_super_called.write
                  [xself]
                    memory > x__init_subclass__
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply)
                          x__init_subclass__.write
                            [xcls]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((xbase)) (((xcls).x__bases__)))
                                    ((((unsupported)).apply ((xbase)) ((xFinal))).and (((xissubclass)).apply ((xbase)) ((xFinal)))).if
                                      (((unsupported)).apply ((((xFinalException)).apply ((xbase)))))
                                  bogusForceDataize.write ((((((xsuper)).apply).x__init_subclass__)).apply ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((xFinal)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFinalException)))))
                          (((unsupported)).apply ((xTest)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFinalException)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xTest)) ((xint)))))
                xtest_nested.write
                  [xself]
                    memory > xget
                    memory > xG
                    memory > xappend
                    memory > xset
                    memory > xvisit
                    memory > xV
                    memory > xa
                    seq > @
                      seq
                        xG.write (xGeneric)
                        (((unsupported)).apply ((((unsupported)).apply ((xG)) ((xT)))))
                          seq
                            xa.write "None: is there a None literal in the EO language?"
                            xset.write
                              [xself xa]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xa)) ((xa)))
                            xget.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xa)))
                            xvisit.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xa)))
                        xV.write (((unsupported)).apply ((xVisitor)) ((((unsupported)).apply (((xtyping).xList)) ((xint)))))
                        (((unsupported)).apply ((xV)))
                          xappend.write
                            [xself xx]
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write (((((xself).xa).xappend)).apply ((xx)))
                        xa.write (((xIntListVisitor)).apply)
                        bogusForceDataize.write ((((xa).xset)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xa).xappend)).apply (1))
                        bogusForceDataize.write ((((xa).xappend)).apply (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xget)).apply)) ((((unsupported)).apply (1) (42))))
                xtest_type_erasure.write
                  [xself]
                    memory > x__init__
                    memory > xfoo
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          x__init__.write
                            [xself xlabel xleft xright]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((xself).xlabel)) ((xlabel)))
                                  (((unsupported)).apply (((xself).xleft)) ((xleft)))
                                  (((unsupported)).apply (((xself).xright)) ((xright)))
                        xfoo.write
                          [xx]
                            memory > xc
                            memory > xb
                            memory > xa
                            seq > @
                              (((unsupported)).apply)
                                xa.write (((xNode)).apply ((xx)))
                                xb.write (((((unsupported)).apply ((xNode)) ((xT)))).apply ((xx)))
                                xc.write (((((unsupported)).apply ((xNode)) ((xAny)))).apply ((xx)))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xa)))) ((xNode)))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xb)))) ((xNode)))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xc)))) ((xNode)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xlabel)) ((xx)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).xlabel)) ((xx)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xlabel)) ((xx)))
                        bogusForceDataize.write (((xfoo)).apply (42))
                xtest_implicit_any.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        (((unsupported)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xD).x__parameters__)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xException)))))
                          (((unsupported)).apply ((xD)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xException)))))
                          (((unsupported)).apply ((xD)) ((xAny)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xException)))))
                          (((unsupported)).apply ((xD)) ((xT)))
                xtest_new_with_args.write
                  [xself]
                    memory > x__new__
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        (((unsupported)).apply)
                          x__new__.write
                            [xcls xarg]
                              memory > xobj
                              seq > @
                                seq
                                  xobj.write ((((((xsuper)).apply).x__new__)).apply ((xcls)))
                                  (((unsupported)).apply (((xobj).xarg)) ((xarg)))
                                  (((unsupported)).apply ((xobj)))
                        (((unsupported)).apply ((xA)) ((xB)))
                        xc.write (((xC)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xarg)) ("foo"))
                xtest_new_with_args2.write
                  [xself]
                    memory > xc
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__init__.write
                            [xself xarg]
                              seq > @
                                seq
                                  (((unsupported)).apply (((xself).xfrom_a)) ((xarg)))
                                  bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))) ((xA)))
                          x__init__.write
                            [xself xarg]
                              seq > @
                                seq
                                  (((unsupported)).apply (((xself).xfrom_c)) ((xarg)))
                                  bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xarg)))
                        xc.write (((xC)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xfrom_a)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xfrom_c)) ("foo"))
                xtest_new_no_args.write
                  [xself]
                    memory > x__new__
                    memory > xc
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xA)).apply ("foo"))
                        (((unsupported)).apply)
                          x__new__.write
                            [xcls]
                              memory > xobj
                              seq > @
                                seq
                                  xobj.write ((((((xsuper)).apply).x__new__)).apply ((xcls)))
                                  (((unsupported)).apply (((xobj).xfrom_b)) ("b"))
                                  (((unsupported)).apply ((xobj)))
                        (((unsupported)).apply ((xA)) ((xB)))
                          seq
                            x__init__.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply (((xself).xarg)) ((xarg)))
                            x__new__.write
                              [xcls xarg]
                                memory > xobj
                                seq > @
                                  seq
                                    xobj.write ((((((xsuper)).apply).x__new__)).apply ((xcls)))
                                    (((unsupported)).apply (((xobj).xfrom_c)) ("c"))
                                    (((unsupported)).apply ((xobj)))
                        xc.write (((xC)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xarg)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xfrom_b)) ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xfrom_c)) ("c"))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xClassVar)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xClassVar)) ((((unsupported)).apply ((xint)) ((xstr)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xClassVar)) ((xint)))) ((xstr)))
                xtest_repr.write
                  [xself]
                    memory > xcv
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xClassVar)))) ("typing.ClassVar"))
                        xcv.write (((unsupported)).apply ((xClassVar)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xcv)))) ("typing.ClassVar[int]"))
                        xcv.write (((unsupported)).apply ((xClassVar)) ((xEmployee)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xcv)))) (("typing.ClassVar[%s.Employee]".mod (x__name__))))
                xtest_cannot_subclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((xtype)).apply ((xClassVar)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((xtype)).apply ((((unsupported)).apply ((xClassVar)) ((xint)))))))
                xtest_cannot_init.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xClassVar)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((xClassVar)))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((((unsupported)).apply ((xClassVar)) ((((unsupported)).apply ((xOptional)) ((xint)))))))).apply)
                xtest_no_isinstance.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply (1) ((((unsupported)).apply ((xClassVar)) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xint)) ((xClassVar)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xFinal)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xFinal)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xFinal)) ((((unsupported)).apply ((xint)) ((xstr)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xFinal)) ((xint)))) ((xstr)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xOptional)) ((((unsupported)).apply ((xFinal)) ((xint)))))
                xtest_repr.write
                  [xself]
                    memory > xcv
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xFinal)))) ("typing.Final"))
                        xcv.write (((unsupported)).apply ((xFinal)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xcv)))) ("typing.Final[int]"))
                        xcv.write (((unsupported)).apply ((xFinal)) ((xEmployee)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xcv)))) (("typing.Final[%s.Employee]".mod (x__name__))))
                xtest_cannot_subclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((xtype)).apply ((xFinal)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((((xtype)).apply ((((unsupported)).apply ((xFinal)) ((xint)))))))
                xtest_cannot_init.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xFinal)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((xFinal)))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((xtype)).apply ((((unsupported)).apply ((xFinal)) ((((unsupported)).apply ((xOptional)) ((xint)))))))).apply)
                xtest_no_isinstance.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply (1) ((((unsupported)).apply ((xFinal)) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xint)) ((xFinal)))
                xtest_final_unmodified.write
                  [xself]
                    memory > xfunc
                    seq > @
                      seq
                        xfunc.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xfunc)) ((((xfinal)).apply ((xfunc)))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcast)).apply ((xint)) (42))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcast)).apply ((xfloat)) (42))) (42))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xcast)).apply ((xfloat)) (42))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcast)).apply ((xAny)) (42))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcast)).apply ((xlist)) (42))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcast)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((xfloat)))))) (42))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcast)).apply ((xAnyStr)) (42))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcast)).apply ("None: is there a None literal in the EO language?") (42))) (42))
                xtest_errors.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xcast)).apply (42) (42))
                        bogusForceDataize.write (((xcast)).apply ("hello") (42))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xt
                    memory > xadd_both
                    memory > xboth_hints
                    memory > xleft_hints
                    memory > xadd_left
                    memory > x__init__
                    memory > xright_hints
                    memory > xadd_right
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          seq
                            x__init__.write
                              [xself xlabel]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xlabel)) ((xlabel)))
                                    (((unsupported)).apply (((xself).xleft)) (((xself).xright)) ("None: is there a None literal in the EO language?"))
                            xadd_both.write
                              [xself xleft xright xstuff xblah]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xleft)) ((xleft)))
                                    (((unsupported)).apply (((xself).xright)) ((xright)))
                            xadd_left.write
                              [xself xnode]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((xself).xadd_both)).apply ((xnode)) ("None: is there a None literal in the EO language?"))
                            xadd_right.write
                              [xself xnode]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((xself).xadd_both)).apply ("None: is there a None literal in the EO language?") ((xnode)))
                        xt.write (((unsupported)).apply ((xNode)) ((xint)))
                        xboth_hints.write (((xget_type_hints)).apply (((xt).xadd_both)) ((((xglobals)).apply)) ((((xlocals)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xboth_hints)) ("left"))) ((((unsupported)).apply ((xOptional)) ((((unsupported)).apply ((xNode)) ((xT)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xboth_hints)) ("right"))) ((((unsupported)).apply ((xOptional)) ((((unsupported)).apply ((xNode)) ((xT)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xboth_hints)) ("left"))) ((((unsupported)).apply ((xboth_hints)) ("right"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xboth_hints)) ("stuff"))) ((((unsupported)).apply ((xOptional)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("blah") ((xboth_hints)))
                        xleft_hints.write (((xget_type_hints)).apply (((xt).xadd_left)) ((((xglobals)).apply)) ((((xlocals)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xleft_hints)) ("node"))) ((((unsupported)).apply ((xOptional)) ((((unsupported)).apply ((xNode)) ((xT)))))))
                        xright_hints.write (((xget_type_hints)).apply (((xt).xadd_right)) ((((xglobals)).apply)) ((((xlocals)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xright_hints)) ("node"))) ((((unsupported)).apply ((xOptional)) ((((unsupported)).apply ((xNode)) ((xT)))))))
                xtest_forwardref_instance_type_error.write
                  [xself]
                    memory > xfr
                    seq > @
                      seq
                        xfr.write ((((xtyping).xForwardRef)).apply ("int"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply (42) ((xfr)))
                xtest_forwardref_subclass_type_error.write
                  [xself]
                    memory > xfr
                    seq > @
                      seq
                        xfr.write ((((xtyping).xForwardRef)).apply ("int"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xint)) ((xfr)))
                xtest_forward_equality.write
                  [xself]
                    memory > xfr
                    seq > @
                      seq
                        xfr.write ((((xtyping).xForwardRef)).apply ("int"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfr)) (((((xtyping).xForwardRef)).apply ("int"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xList)) ("int"))) ((((unsupported)).apply ((xList)) ((xint)))))
                xtest_forward_equality_gth.write
                  [xself]
                    memory > xc2
                    memory > xc2_gth
                    memory > xc1_gth
                    memory > xfoo
                    memory > xc1
                    seq > @
                      seq
                        xc1.write ((((xtyping).xForwardRef)).apply ("C"))
                        xc1_gth.write ((((xtyping).xForwardRef)).apply ("C"))
                        xc2.write ((((xtyping).xForwardRef)).apply ("C"))
                        xc2_gth.write ((((xtyping).xForwardRef)).apply ("C"))
                        (((unsupported)).apply)
                        xfoo.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xfoo)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("a") ((xC)) ("b") ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc1)) ((xc2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc1)) ((xc1_gth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xc1_gth)) ((xc2_gth)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xList)) ((xc1)))) ((((unsupported)).apply ((xList)) ((xc1_gth)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xList)) ((xc1)))) ((((unsupported)).apply ((xList)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xList)) ((xc1_gth)))) ((((unsupported)).apply ((xList)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xc1)) ((xc1_gth)))))) ((((unsupported)).apply ((xUnion)) ((xc1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xc1)) ((xc1_gth)) ((xint)))))) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xc1)) ((xint)))))))
                xtest_forward_equality_hash.write
                  [xself]
                    memory > xc2
                    memory > xc2_gth
                    memory > xc1_gth
                    memory > xfoo
                    memory > xc1
                    seq > @
                      seq
                        xc1.write ((((xtyping).xForwardRef)).apply ("int"))
                        xc1_gth.write ((((xtyping).xForwardRef)).apply ("int"))
                        xc2.write ((((xtyping).xForwardRef)).apply ("int"))
                        xc2_gth.write ((((xtyping).xForwardRef)).apply ("int"))
                        xfoo.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xget_type_hints)).apply ((xfoo)) ((((xglobals)).apply)) ((((xlocals)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xc1)))) ((((xhash)).apply ((xc2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xc1_gth)))) ((((xhash)).apply ((xc2_gth)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xc1)))) ((((xhash)).apply ((xc1_gth)))))
                xtest_forward_equality_namespace.write
                  [xself]
                    memory > xnamespace1
                    memory > xnamespace2
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnamespace1.write
                          []
                            memory > xfun
                            memory > xa
                            seq > @
                              seq
                                xa.write ((((xtyping).xForwardRef)).apply ("A"))
                                xfun.write
                                  [xx]
                                    seq > @
                                      (((unsupported)).apply)
                                bogusForceDataize.write (((xget_type_hints)).apply ((xfun)) ((((xglobals)).apply)) ((((xlocals)).apply)))
                                (((unsupported)).apply ((xa)))
                        xnamespace2.write
                          []
                            memory > xfun
                            memory > xa
                            seq > @
                              seq
                                xa.write ((((xtyping).xForwardRef)).apply ("A"))
                                (((unsupported)).apply)
                                xfun.write
                                  [xx]
                                    seq > @
                                      (((unsupported)).apply)
                                bogusForceDataize.write (((xget_type_hints)).apply ((xfun)) ((((xglobals)).apply)) ((((xlocals)).apply)))
                                (((unsupported)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnamespace1)).apply)) ((((xnamespace1)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xnamespace1)).apply)) ((((xnamespace2)).apply)))
                xtest_forward_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xList)) ("int"))))) ("typing.List[ForwardRef('int')]"))
                xtest_union_forward.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xfoo)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("a") ((((unsupported)).apply ((xUnion)) ((xT)))))))
                xtest_tuple_forward.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xfoo)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("a") ((((unsupported)).apply ((xTuple)) ((xT)))))))
                xtest_forward_recursion_actually.write
                  [xself]
                    memory > xr1
                    memory > xr2
                    memory > xnamespace2
                    memory > xcmp
                    memory > xnamespace1
                    seq > @
                      seq
                        xnamespace1.write
                          []
                            memory > xret
                            memory > xfun
                            memory > xA
                            memory > xa
                            seq > @
                              seq
                                xa.write ((((xtyping).xForwardRef)).apply ("A"))
                                xA.write (xa)
                                xfun.write
                                  [xx]
                                    seq > @
                                      (((unsupported)).apply)
                                xret.write (((xget_type_hints)).apply ((xfun)) ((((xglobals)).apply)) ((((xlocals)).apply)))
                                (((unsupported)).apply ((xa)))
                        xnamespace2.write
                          []
                            memory > xret
                            memory > xfun
                            memory > xA
                            memory > xa
                            seq > @
                              seq
                                xa.write ((((xtyping).xForwardRef)).apply ("A"))
                                xA.write (xa)
                                xfun.write
                                  [xx]
                                    seq > @
                                      (((unsupported)).apply)
                                xret.write (((xget_type_hints)).apply ((xfun)) ((((xglobals)).apply)) ((((xlocals)).apply)))
                                (((unsupported)).apply ((xa)))
                        xcmp.write
                          [xo1 xo2]
                            seq > @
                              (((unsupported)).apply (((xo1).eq (xo2))))
                        xr1.write (((xnamespace1)).apply)
                        xr2.write (((xnamespace2)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xr1)) ((xr2)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRecursionError)) ((xcmp)) ((xr1)) ((xr2)))
                xtest_union_forward_recursion.write
                  [xself]
                    memory > xValue
                    memory > xValueList
                    seq > @
                      seq
                        xValueList.write (((unsupported)).apply ((xList)) ("Value"))
                        xValue.write (((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((xValueList)))))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ((((unsupported)).apply ((xList)) ((xValue)))))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xValue)) ((xValueList)))))))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((xValue)))) ((xValueList)))))))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xValue)) ((((unsupported)).apply ((xList)) ((xValue)))) ((xValueList)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xC)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((xget_type_hints)).apply ((xC)) ((((xglobals)).apply)) ((((xlocals)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xC)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ("Value"))))))))))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xD)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ("Value"))))))))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xE)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ("Value"))))))))))))))) ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ("Value"))))))))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xF)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("foo") ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ("Value"))))))))) ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((((unsupported)).apply ((xList)) ("Value"))))))))))))))))))))))
                xtest_callable_forward.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xfoo)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("a") ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((xT)))) ((xT)))))))))
                xtest_callable_with_ellipsis_forward.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xfoo)) ((((xglobals)).apply)) ((((xlocals)).apply)))) ((((unsupported)).apply ("a") ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xT)))))))))
                xtest_syntax_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                        (((unsupported)).apply ((xGeneric)) ("/T"))
                xtest_delayed_syntax_error.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSyntaxError)))))
                          bogusForceDataize.write (((xget_type_hints)).apply ((xfoo)))
                xtest_type_error.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xget_type_hints)).apply ((xfoo)))
                xtest_name_error.write
                  [xself]
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNameError)))))
                          bogusForceDataize.write (((xget_type_hints)).apply ((xfoo)) ((((xlocals)).apply)))
                xtest_no_type_check.write
                  [xself]
                    memory > xfoo
                    memory > xth
                    seq > @
                      seq
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        xth.write (((xget_type_hints)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xth)) ((((unsupported)).apply)))
                xtest_no_type_check_class.write
                  [xself]
                    memory > xith
                    memory > xcth
                    memory > xfoo
                    seq > @
                      seq
                        (((unsupported)).apply ((xno_type_check)))
                          xfoo.write
                            [xa]
                              seq > @
                                (((unsupported)).apply)
                        xcth.write (((xget_type_hints)).apply (((xC).xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcth)) ((((unsupported)).apply)))
                        xith.write (((xget_type_hints)).apply (((((xC)).apply).xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xith)) ((((unsupported)).apply)))
                xtest_no_type_check_no_bases.write
                  [xself]
                    memory > xmeth
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xmeth.write
                            [xself xx]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                        (((unsupported)).apply ((xC)) ((xno_type_check)))
                          xc.write (xC)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply (((xC).xmeth)))) ((((unsupported)).apply ("x") ((xint)))))
                xtest_no_type_check_forward_ref_as_string.write
                  [xself]
                    memory > xexpected_result
                    seq > @
                      seq
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ((((unsupported)).apply (((xtyping).xClassVar)) ((xint)))) (7))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ((((unsupported)).apply ((xClassVar)) ((xint)))) (7))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ("typing.ClassVar[int]") (7))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ("ClassVar[int]") (7))
                        xexpected_result.write (((unsupported)).apply ("foo") ((((unsupported)).apply (((xtyping).xClassVar)) ((xint)))))
                        (((unsupported)).apply ((xclazz)) ((((unsupported)).apply ((xC)) ((xD)) ((xE)) ((xF)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_type_hints)).apply ((xclazz)))) ((xexpected_result)))
                xtest_nested_classvar_fails_forward_ref_check.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ("typing.ClassVar[typing.ClassVar[int]]") (7))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xfoo)) ((((unsupported)).apply ((xClassVar)) ("ClassVar[int]"))) (7))
                        (((unsupported)).apply ((xclazz)) ((((unsupported)).apply ((xE)) ((xF)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            bogusForceDataize.write (((xget_type_hints)).apply ((xclazz)))
                xtest_meta_no_type_check.write
                  [xself]
                    memory > xmagic_decorator
                    memory > xth
                    memory > xith
                    memory > xfoo
                    memory > xcth
                    seq > @
                      seq
                        xmagic_decorator.write
                          [xfunc]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xfunc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmagic_decorator).x__name__)) ("magic_decorator"))
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((xmagic_decorator)))
                          xfoo.write
                            [xa]
                              seq > @
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfoo).x__name__)) ("foo"))
                        xth.write (((xget_type_hints)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xth)) ((((unsupported)).apply)))
                        xcth.write (((xget_type_hints)).apply (((xC).xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcth)) ((((unsupported)).apply)))
                        xith.write (((xget_type_hints)).apply (((((xC)).apply).xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xith)) ((((unsupported)).apply)))
                xtest_default_globals.write
                  [xself]
                    memory > xns
                    memory > xcode
                    memory > xhints
                    seq > @
                      seq
                        xcode.write "class C:n    def foo(self, a: 'C') -> 'D': passnclass D:n    def bar(self, b: 'D') -> C: passn"
                        xns.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ((xcode)) ((xns)))
                        xhints.write (((xget_type_hints)).apply (((((unsupported)).apply ((xns)) ("C")).xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhints)) ((((unsupported)).apply ("a") ((((unsupported)).apply ((xns)) ("C"))) ("return") ((((unsupported)).apply ((xns)) ("D"))))))
                xtest_final_forward_ref.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xgth)).apply ((xLoop)) ((((xglobals)).apply)))) ("attr"))) ((((unsupported)).apply ((xFinal)) ((xLoop)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((((xgth)).apply ((xLoop)) ((((xglobals)).apply)))) ("attr"))) ((((unsupported)).apply ((xFinal)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((((xgth)).apply ((xLoop)) ((((xglobals)).apply)))) ("attr"))) ((xFinal)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_overload_fails.write
                  [xself]
                    memory > xblah
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          seq
                            xblah.write
                              []
                                seq > @
                                  (((unsupported)).apply)
                            bogusForceDataize.write (((xblah)).apply)
                xtest_overload_succeeds.write
                  [xself]
                    memory > xblah
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xblah.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xblah.write
                          []
                            seq > @
                        bogusForceDataize.write (((xblah)).apply)
            xASYNCIO_TESTS.write (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              bogusForceDataize.write (((xexec)).apply ((xASYNCIO_TESTS)))
              xASYNCIO.write FALSE
              xASYNCIO.write TRUE
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              (((unsupported)).apply ((xy)) ((xfloat)))
            (((unsupported)).apply ((xA)))
              seq
                (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xClassVar)) ((((unsupported)).apply ((xOptional)) ("B"))))) ("None: is there a None literal in the EO language?"))
                (((unsupported)).apply ((xy)) ((xint)))
                (((unsupported)).apply ((xb)) ((xint)))
            (((unsupported)).apply ((xB)))
              (((unsupported)).apply ((xz)) ((((unsupported)).apply ((xClassVar)) ("CSub"))) ((((xB)).apply)))
            (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
              (((unsupported)).apply ((xlst)) ((((unsupported)).apply ((xClassVar)) ((((unsupported)).apply ((xList)) ((xT)))))) ((((unsupported)).apply)))
            (((unsupported)).apply)
              (((unsupported)).apply ((xattr)) ((((unsupported)).apply ((xFinal)) ("Loop"))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply ((xparent)) ("NoneAndForward"))
                (((unsupported)).apply ((xmeaning)) ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply ((xNamedTuple)))
              seq
                (((unsupported)).apply ((xname)) ((xstr)))
                (((unsupported)).apply ((xcool)) ((xint)))
            (((unsupported)).apply ((xNamedTuple)))
              seq
                (((unsupported)).apply ((xname)) ((xstr)))
                (((unsupported)).apply ((xcool)) ((xint)) (0))
            (((unsupported)).apply ((xNamedTuple)))
              seq
                (((unsupported)).apply ((xx)) ((xint)))
                xdouble.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((2.mul ((xself).xx))))
            (((unsupported)).apply ((xNamedTuple)))
              seq
                (((unsupported)).apply ((xx)) ((xint)))
                (((unsupported)).apply ((xy)) ((xint)) (1))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("{self.x} -> {self.y}"))
                x__add__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (0))
            xLabel.write (((xTypedDict)).apply ("Label") ((((unsupported)).apply ((((unsupported)).apply ("label") ((xstr)))))))
            (((unsupported)).apply ((xTypedDict)))
              seq
                (((unsupported)).apply ((xx)) ((xint)))
                (((unsupported)).apply ((xy)) ((xint)))
            (((unsupported)).apply ((xPoint2D)) ((xLabel)))
              (((unsupported)).apply)
            (((unsupported)).apply ((xTypedDict)) (FALSE))
              seq
                (((unsupported)).apply ((xlog_level)) ((xint)))
                (((unsupported)).apply ((xlog_path)) ((xstr)))
            (((unsupported)).apply (((xmod_generics_cache).xA)))
              seq
                (((unsupported)).apply ((xsome_xrepr)) ("XRepr"))
                (((unsupported)).apply ((xother_a)) ("mod_generics_cache.A"))
            xg_with.write
              [xam]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xx)) ((xint)))
                    (((unsupported)).apply ((xam)) ((xx)))
                      (((unsupported)).apply ((xx)))
            (((unsupported)).apply ((xStopIteration)))
              bogusForceDataize.write ((((((xg_with)).apply ((((xACM)).apply))).xsend)).apply ("None: is there a None literal in the EO language?"))
              (((unsupported)).apply (((((unsupported)).apply (((xe).xargs)) (0)).eq 42)))
            xgth.write (xget_type_hints)
            (((unsupported)).apply)
              seq
                xfunc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                xnested.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_get_type_hints_from_various_objects.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xgth)).apply (123))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xgth)).apply ("abc"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xgth)).apply ("None: is there a None literal in the EO language?"))
                xtest_get_type_hints_modules.write
                  [xself]
                    memory > xann_module_type_hints
                    seq > @
                      seq
                        xann_module_type_hints.write (((unsupported)).apply (1) (2) ("f") ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((xint)))))) ("x") ((xint)) ("y") ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xann_module)))) ((xann_module_type_hints)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xann_module2)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xann_module3)))) ((((unsupported)).apply)))
                xtest_get_type_hints_modules_forwardref.write
                  [xself]
                    memory > xmgc_hints
                    seq > @
                      (((unsupported)).apply)
                        xmgc_hints.write (((unsupported)).apply ("default_a") ((((unsupported)).apply ((xOptional)) (((xmod_generics_cache).xA)))) ("default_b") ((((unsupported)).apply ((xOptional)) (((xmod_generics_cache).xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xmod_generics_cache)))) ((xmgc_hints)))
                xtest_get_type_hints_classes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xann_module).xC)))) ((((unsupported)).apply ("y") ((((unsupported)).apply ((xOptional)) (((xann_module).xC)))))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xgth)).apply (((xann_module).xj_class)))) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xann_module).xM)))) ((((unsupported)).apply ("123") (123) ("o") ((xtype)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xann_module).xD)))) ((((unsupported)).apply ("j") ((xstr)) ("k") ((xstr)) ("y") ((((unsupported)).apply ((xOptional)) (((xann_module).xC)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xann_module).xY)))) ((((unsupported)).apply ("z") ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xann_module).xh_class)))) ((((unsupported)).apply ("y") ((((unsupported)).apply ((xOptional)) (((xann_module).xC)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xann_module).xS)))) ((((unsupported)).apply ("x") ((xstr)) ("y") ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xann_module).xfoo)))) ((((unsupported)).apply ("x") ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xNoneAndForward)))) ((((unsupported)).apply ("parent") ((xNoneAndForward)) ("meaning") ((((xtype)).apply ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xHasForeignBaseClass)))) ((((unsupported)).apply ("some_xrepr") ((xXRepr)) ("other_a") (((xmod_generics_cache).xA)) ("some_b") (((xmod_generics_cache).xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xXRepr).x__new__)))) ((((unsupported)).apply ("x") ((xint)) ("y") ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xmod_generics_cache).xB)))) ((((unsupported)).apply ("my_inner_a1") ((((xmod_generics_cache).xB).xA)) ("my_inner_a2") ((((xmod_generics_cache).xB).xA)) ("my_outer_a") (((xmod_generics_cache).xA)))))
                xtest_respect_no_type_check.write
                  [xself]
                    memory > xmeth
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xno_type_check)))
                          (((unsupported)).apply)
                            x__init__.write
                              [xself xx]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xNoTpCheck).x__no_type_check__)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xNoTpCheck).xInn).x__init__).x__no_type_check__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((((xann_module2).xNTC).xmeth)))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                          xmeth.write
                            [xx]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                        (((unsupported)).apply ((xABase)) ((xno_type_check)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xABase).xmeth)))) ((((unsupported)).apply ("x") ((xint)))))
                xtest_get_type_hints_for_builtins.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xint)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xtype)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xdir)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xlen)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xobject).x__str__)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((((xobject)).apply).x__str__)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xstr).xjoin)))) ((((unsupported)).apply)))
                xtest_previous_behavior.write
                  [xself]
                    memory > xtestg
                    memory > xtestf
                    seq > @
                      seq
                        xtestf.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtestf).x__annotations__)) ("x"))) ("int"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xtestf)))) ((((unsupported)).apply ("x") ((xint)))))
                        xtestg.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xtestg)))) ((((unsupported)).apply ("x") ((((xtype)).apply ("None: is there a None literal in the EO language?"))))))
                xtest_get_type_hints_for_object_with_annotations.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        xb.write (((xB)).apply)
                        (((unsupported)).apply (((xb).x__annotations__)) ((((unsupported)).apply ("x") ("A"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xb)) ((((xlocals)).apply)))) ((((unsupported)).apply ("x") ((xA)))))
                xtest_get_type_hints_ClassVar.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xann_module2).xCV)) (((xann_module2).x__dict__)))) ((((unsupported)).apply ("var") ((((unsupported)).apply (((xtyping).xClassVar)) (((xann_module2).xCV)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xB)) ((((xglobals)).apply)))) ((((unsupported)).apply ("y") ((xint)) ("x") ((((unsupported)).apply ((xClassVar)) ((((unsupported)).apply ((xOptional)) ((xB)))))) ("b") ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xCSub)) ((((xglobals)).apply)))) ((((unsupported)).apply ("z") ((((unsupported)).apply ((xClassVar)) ((xCSub)))) ("y") ((xint)) ("b") ((xint)) ("x") ((((unsupported)).apply ((xClassVar)) ((((unsupported)).apply ((xOptional)) ((xB)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply ((xG)))) ((((unsupported)).apply ("lst") ((((unsupported)).apply ((xClassVar)) ((((unsupported)).apply ((xList)) ((xT)))))))))
                xtest_get_type_hints_wrapped_decoratored_func.write
                  [xself]
                    memory > xexpects
                    seq > @
                      seq
                        xexpects.write (((unsupported)).apply ("self") ((xForRefExample)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xForRefExample).xfunc)))) ((xexpects)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgth)).apply (((xForRefExample).xnested)))) ((xexpects)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_get_origin.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((((unsupported)).apply ((xC)) ((xint)))))) ((xC)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((((unsupported)).apply ((xC)) ((xT)))))) ((xC)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((xint)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((((unsupported)).apply ((xClassVar)) ((xint)))))) ((xClassVar)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))))) ((xUnion)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((((unsupported)).apply ((xLiteral)) ((((unsupported)).apply (42) (43))))))) ((xLiteral)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((((unsupported)).apply ((xFinal)) ((((unsupported)).apply ((xList)) ((xint)))))))) ((xFinal)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((xGeneric)))) ((xGeneric)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))) ((xGeneric)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xT)))))))) ((xint)))))) ((xlist)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((xList)))) ((xlist)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((xTuple)))) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_origin)).apply ((xCallable)))) ((((xcollections).xabc).xCallable)))
                xtest_get_args.write
                  [xself]
                    memory > xT
                    seq > @
                      seq
                        xT.write (((xTypeVar)).apply ("T"))
                        (((unsupported)).apply ((((unsupported)).apply ((xGeneric)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xC)) ((xint)))))) ((((unsupported)).apply ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xC)) ((xT)))))) ((((unsupported)).apply ((xT)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((xint)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xClassVar)) ((xint)))))) ((((unsupported)).apply ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((xstr)))))))) ((((unsupported)).apply ((xint)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xLiteral)) ((((unsupported)).apply (42) (43))))))) ((((unsupported)).apply (42) (43))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xFinal)) ((((unsupported)).apply ((xList)) ((xint)))))))) ((((unsupported)).apply ((((unsupported)).apply ((xList)) ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xint)))))))))) ((xstr)))))) ((((unsupported)).apply ((xint)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xstr)) ((xint)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((xT)))))))))) ((((unsupported)).apply ((xOptional)) ((xint)))))))) ((((unsupported)).apply ((xint)) ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((((unsupported)).apply ((xOptional)) ((xint)))) ((((unsupported)).apply ((xOptional)) ((xint)))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xT)))))) ((xint)))))) ((((unsupported)).apply ((((unsupported)).apply)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply)) ((xint)))))))) ((((unsupported)).apply ((((unsupported)).apply)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((((unsupported)).apply)))))))) ((xstr)))))))))))) ((((unsupported)).apply ((xint)) ((((unsupported)).apply ((xCallable)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xT)) ((((unsupported)).apply)))))))) ((xstr)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply ((xint)) ((((unsupported)).apply)))))))) ((((unsupported)).apply ((xint)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((((unsupported)).apply ((xTuple)) ((((unsupported)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((xList)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((xTuple)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_args)).apply ((xCallable)))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_hashable.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (42) (((xtyping).xHashable)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xHashable)))
                xtest_iterable.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xIterable)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xIterable)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xIterable)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xIterable)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xlist)) (((xtyping).xIterable)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xlist)) (((xtyping).xIterable)))
                xtest_iterator.write
                  [xself]
                    memory > xit
                    seq > @
                      seq
                        xit.write (((xiter)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xit)) (((xtyping).xIterator)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xIterator)))
                xtest_awaitable.write
                  [xself]
                    memory > xns
                    memory > xg
                    memory > xfoo
                    seq > @
                      (((unsupported)).apply)
                        xns.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ("async def foo() -> typing.Awaitable[int]:n    return await AwaitableWrapper(42)n") ((((xglobals)).apply)) ((xns)))
                        xfoo.write (((unsupported)).apply ((xns)) ("foo"))
                        xg.write (((xfoo)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xg)) (((xtyping).xAwaitable)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((xfoo)) (((xtyping).xAwaitable)))
                        bogusForceDataize.write ((((xg).xsend)).apply ("None: is there a None literal in the EO language?"))
                xtest_coroutine.write
                  [xself]
                    memory > xns
                    memory > xg
                    memory > xfoo
                    seq > @
                      (((unsupported)).apply)
                        xns.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ("async def foo():n    returnn") ((((xglobals)).apply)) ((xns)))
                        xfoo.write (((unsupported)).apply ((xns)) ("foo"))
                        xg.write (((xfoo)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xg)) (((xtyping).xCoroutine)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((xg)) ((((unsupported)).apply (((xtyping).xCoroutine)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((xfoo)) (((xtyping).xCoroutine)))
                        (((unsupported)).apply ((xStopIteration)))
                          bogusForceDataize.write ((((xg).xsend)).apply ("None: is there a None literal in the EO language?"))
                xtest_async_iterable.write
                  [xself]
                    memory > xbase_it
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xbase_it.write (((xrange)).apply (10))
                        xit.write (((xAsyncIteratorWrapper)).apply ((xbase_it)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xit)) (((xtyping).xAsyncIterable)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xit)) (((xtyping).xAsyncIterable)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xAsyncIterable)))
                xtest_async_iterator.write
                  [xself]
                    memory > xbase_it
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xbase_it.write (((xrange)).apply (10))
                        xit.write (((xAsyncIteratorWrapper)).apply ((xbase_it)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xit)) (((xtyping).xAsyncIterator)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xAsyncIterator)))
                xtest_sized.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xSized)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xSized)))
                xtest_container.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xContainer)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xContainer)))
                xtest_collection.write
                  [xself]
                    seq > @
                      (((xhasattr)).apply ((xtyping)) ("Collection")).if
                        seq
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xtuple)).apply)) (((xtyping).xCollection)))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xfrozenset)).apply)) (((xtyping).xCollection)))
                          bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xdict)) (((xtyping).xCollection)))
                          bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xCollection)))
                xtest_abstractset.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xset)).apply)) (((xtyping).xAbstractSet)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xAbstractSet)))
                xtest_mutableset.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xset)).apply)) (((xtyping).xMutableSet)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xfrozenset)).apply)) (((xtyping).xMutableSet)))
                xtest_mapping.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xMapping)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xMapping)))
                xtest_mutablemapping.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xMutableMapping)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xMutableMapping)))
                xtest_sequence.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xSequence)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xSequence)))
                xtest_mutablesequence.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xMutableSequence)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((unsupported)).apply)) (((xtyping).xMutableSequence)))
                xtest_bytestring.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ("") (((xtyping).xByteString)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xbytearray)).apply (""))) (((xtyping).xByteString)))
                xtest_list.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xlist)) (((xtyping).xList)))
                xtest_deque.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply (((xcollections).xdeque)) (((xtyping).xDeque)))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xDeque)) ((xint)))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xMyDeque)).apply)) (((xcollections).xdeque)))
                xtest_counter.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsSubclass)).apply (((xcollections).xCounter)) (((xtyping).xCounter)))
                xtest_set.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xset)) (((xtyping).xSet)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xfrozenset)) (((xtyping).xSet)))
                xtest_frozenset.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xfrozenset)) (((xtyping).xFrozenSet)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xset)) (((xtyping).xFrozenSet)))
                xtest_dict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xdict)) (((xtyping).xDict)))
                xtest_no_list_instantiation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtyping).xList)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xList)) ((xT)))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xList)) ((xint)))).apply)
                xtest_list_subclass.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xList)) ((xint)))))
                        xa.write (((xMyList)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xa)) ((xMyList)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xa)) (((xtyping).xSequence)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMyList)) ((xlist)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xlist)) ((xMyList)))
                xtest_no_dict_instantiation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtyping).xDict)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xKT)) ((xVT)))))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xstr)) ((xint)))))).apply)
                xtest_dict_subclass.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xDict)) ((((unsupported)).apply ((xstr)) ((xint)))))))
                        xd.write (((xMyDict)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xd)) ((xMyDict)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xd)) (((xtyping).xMutableMapping)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMyDict)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xdict)) ((xMyDict)))
                xtest_defaultdict_instantiation.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((((xtyping).xDefaultDict)).apply)))) (((xcollections).xdefaultdict)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xDefaultDict)) ((((unsupported)).apply ((xKT)) ((xVT)))))).apply)))) (((xcollections).xdefaultdict)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xDefaultDict)) ((((unsupported)).apply ((xstr)) ((xint)))))).apply)))) (((xcollections).xdefaultdict)))
                xtest_defaultdict_subclass.write
                  [xself]
                    memory > xdd
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xDefaultDict)) ((((unsupported)).apply ((xstr)) ((xint)))))))
                        xdd.write (((xMyDefDict)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xdd)) ((xMyDefDict)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMyDefDict)) (((xcollections).xdefaultdict)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply (((xcollections).xdefaultdict)) ((xMyDefDict)))
                xtest_ordereddict_instantiation.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((((xtyping).xOrderedDict)).apply)))) (((xcollections).xOrderedDict)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xOrderedDict)) ((((unsupported)).apply ((xKT)) ((xVT)))))).apply)))) (((xcollections).xOrderedDict)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xOrderedDict)) ((((unsupported)).apply ((xstr)) ((xint)))))).apply)))) (((xcollections).xOrderedDict)))
                xtest_ordereddict_subclass.write
                  [xself]
                    memory > xod
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xOrderedDict)) ((((unsupported)).apply ((xstr)) ((xint)))))))
                        xod.write (((xMyOrdDict)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xod)) ((xMyOrdDict)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMyOrdDict)) (((xcollections).xOrderedDict)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply (((xcollections).xOrderedDict)) ((xMyOrdDict)))
                xtest_chainmap_instantiation.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((((xtyping).xChainMap)).apply)))) (((xcollections).xChainMap)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xChainMap)) ((((unsupported)).apply ((xKT)) ((xVT)))))).apply)))) (((xcollections).xChainMap)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xChainMap)) ((((unsupported)).apply ((xstr)) ((xint)))))).apply)))) (((xcollections).xChainMap)))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xChainMap)) ((((unsupported)).apply ((xKT)) ((xVT)))))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply ((xCM)) ((((unsupported)).apply ((xint)) ((xstr)))))).apply)))) ((xCM)))
                xtest_chainmap_subclass.write
                  [xself]
                    memory > xcm
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xChainMap)) ((((unsupported)).apply ((xstr)) ((xint)))))))
                        xcm.write (((xMyChainMap)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcm)) ((xMyChainMap)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMyChainMap)) (((xcollections).xChainMap)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply (((xcollections).xChainMap)) ((xMyChainMap)))
                xtest_deque_instantiation.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((((xtyping).xDeque)).apply)))) (((xcollections).xdeque)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xDeque)) ((xT)))).apply)))) (((xcollections).xdeque)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xDeque)) ((xint)))).apply)))) (((xcollections).xdeque)))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xDeque)) ((xT)))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply ((xD)) ((xint)))).apply)))) ((xD)))
                xtest_counter_instantiation.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((((xtyping).xCounter)).apply)))) (((xcollections).xCounter)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xCounter)) ((xT)))).apply)))) (((xcollections).xCounter)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply (((xtyping).xCounter)) ((xint)))).apply)))) (((xcollections).xCounter)))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xCounter)) ((xT)))))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((((unsupported)).apply ((xC)) ((xint)))).apply)))) ((xC)))
                xtest_counter_subclass_instantiation.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xCounter)) ((xint)))))
                        xd.write (((xMyCounter)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xd)) ((xMyCounter)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xd)) (((xtyping).xCounter)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xd)) (((xcollections).xCounter)))
                xtest_no_set_instantiation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtyping).xSet)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xSet)) ((xT)))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xSet)) ((xint)))).apply)
                xtest_set_subclass_instantiation.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xSet)) ((xint)))))
                        xd.write (((xMySet)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xd)) ((xMySet)))
                xtest_no_frozenset_instantiation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtyping).xFrozenSet)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xFrozenSet)) ((xT)))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xFrozenSet)) ((xint)))).apply)
                xtest_frozenset_subclass_instantiation.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xFrozenSet)) ((xint)))))
                        xd.write (((xMyFrozenSet)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xd)) ((xMyFrozenSet)))
                xtest_no_tuple_instantiation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xTuple)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply ((xTuple)) ((xT)))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply ((xTuple)) ((xint)))).apply)
                xtest_generator.write
                  [xself]
                    memory > xg
                    memory > xfoo
                    seq > @
                      seq
                        xfoo.write
                          []
                            seq > @
                              (((unsupported)).apply (42))
                        xg.write (((xfoo)).apply)
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((((xtype)).apply ((xg)))) (((xtyping).xGenerator)))
                xtest_no_generator_instantiation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtyping).xGenerator)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xGenerator)) ((((unsupported)).apply ((xT)) ((xT)) ((xT)))))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xGenerator)) ((((unsupported)).apply ((xint)) ((xint)) ((xint)))))).apply)
                xtest_async_generator.write
                  [xself]
                    memory > xns
                    memory > xg
                    seq > @
                      seq
                        xns.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ("async def f():n    yield 42n") ((((xglobals)).apply)) ((xns)))
                        xg.write (((((unsupported)).apply ((xns)) ("f"))).apply)
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((((xtype)).apply ((xg)))) (((xtyping).xAsyncGenerator)))
                xtest_no_async_generator_instantiation.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xtyping).xAsyncGenerator)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xAsyncGenerator)) ((((unsupported)).apply ((xT)) ((xT)))))).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((((unsupported)).apply (((xtyping).xAsyncGenerator)) ((((unsupported)).apply ((xint)) ((xint)))))).apply)
                xtest_subclassing.write
                  [xself]
                    memory > x__getitem__
                    memory > x__delitem__
                    memory > x__setitem__
                    memory > x__len__
                    memory > xg
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)).apply (((xtyping).xMutableMapping)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xMMA)).apply)
                        (((unsupported)).apply ((xMMA)))
                          seq
                            x__getitem__.write
                              [xself xk]
                                seq > @
                                  (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                            x__setitem__.write
                              [xself xk xv]
                                seq > @
                            x__delitem__.write
                              [xself xk]
                                seq > @
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply)))))
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xMMC)).apply)))) (0))
                        (((unsupported)).apply ((((xcallable)).apply (((xMMC).xupdate)))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xMMC)).apply)) (((xtyping).xMapping)))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xMutableMapping)) ((((unsupported)).apply ((xKT)) ((xVT)))))))
                          seq
                            x__getitem__.write
                              [xself xk]
                                seq > @
                                  (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                            x__setitem__.write
                              [xself xk xv]
                                seq > @
                            x__delitem__.write
                              [xself xk]
                                seq > @
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply)))))
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xMMB)).apply)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((unsupported)).apply ((xMMB)) ((((unsupported)).apply ((xstr)) ((xstr)))))).apply)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((unsupported)).apply ((xMMB)) ((((unsupported)).apply ((xKT)) ((xVT)))))).apply)))) (0))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xdict)) ((xMMA)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xdict)) ((xMMB)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMMA)) (((xtyping).xMapping)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMMB)) (((xtyping).xMapping)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMMC)) (((xtyping).xMapping)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((((unsupported)).apply ((xMMB)) ((((unsupported)).apply ((xKT)) ((xVT)))))).apply)) (((xtyping).xMapping)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((((unsupported)).apply ((xMMB)) ((((unsupported)).apply ((xKT)) ((xVT)))))).apply)) ((((xcollections).xabc).xMapping)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMMA)) ((((xcollections).xabc).xMapping)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMMB)) ((((xcollections).xabc).xMapping)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMMC)) ((((xcollections).xabc).xMapping)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((((unsupported)).apply ((xMMB)) ((((unsupported)).apply ((xstr)) ((xstr)))))) (((xtyping).xMapping)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xMMC)) ((xMMA)))
                        (((unsupported)).apply (((xtyping).xIterable)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xlist)) ((xI)))
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xGenerator)) ((((unsupported)).apply ((xint)) ((xint)) ((xint)))))))
                          (((unsupported)).apply)
                        xg.write
                          []
                            seq > @
                              (((unsupported)).apply (0))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xG)) (((xtyping).xGenerator)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xG)) (((xtyping).xIterable)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xG)) ((((xcollections).xabc).xGenerator)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xG)) ((((xcollections).xabc).xIterable)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((((xtype)).apply ((xg)))) ((xG)))
                xtest_subclassing_async_generator.write
                  [xself]
                    memory > xg
                    memory > xathrow
                    memory > xinstance
                    memory > xns
                    memory > xasend
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtyping).xAsyncGenerator)) ((((unsupported)).apply ((xint)) ((xint)))))))
                          seq
                            xasend.write
                              [xself xvalue]
                                seq > @
                            xathrow.write
                              [xself xtyp xval xtb]
                                seq > @
                                  (((unsupported)).apply)
                        xns.write (((unsupported)).apply)
                        bogusForceDataize.write (((xexec)).apply ("async def g(): yield 0") ((((xglobals)).apply)) ((xns)))
                        xg.write (((unsupported)).apply ((xns)) ("g"))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xG)) (((xtyping).xAsyncGenerator)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xG)) (((xtyping).xAsyncIterable)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xG)) ((((xcollections).xabc).xAsyncGenerator)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xG)) ((((xcollections).xabc).xAsyncIterable)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((((xtype)).apply ((xg)))) ((xG)))
                        xinstance.write (((xG)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinstance)) (((xtyping).xAsyncGenerator)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinstance)) (((xtyping).xAsyncIterable)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinstance)) ((((xcollections).xabc).xAsyncGenerator)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinstance)) ((((xcollections).xabc).xAsyncIterable)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xtype)).apply ((xg)))) ((xG)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((xg)) ((xG)))
                xtest_subclassing_subclasshook.write
                  [xself]
                    memory > x__subclasshook__
                    seq > @
                      seq
                        (((unsupported)).apply (((xtyping).xIterable)))
                          x__subclasshook__.write
                            [xcls xother]
                              seq > @
                                (((unsupported)).apply)
                                  (((xother).x__name__).eq "Foo").if
                                    (((unsupported)).apply (TRUE))
                                    (((unsupported)).apply (FALSE))
                        (((unsupported)).apply ((xBase)))
                          (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xFoo)) ((xBase)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xFoo)) ((xC)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xBar)) ((xC)))
                xtest_subclassing_register.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xtyping).xContainer)))
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xA)))
                          (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xA).xregister)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xC)) ((xA)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xC)) ((xB)))
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xB).xregister)).apply ((xD)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xD)) ((xA)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xD)) ((xB)))
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((((xcollections).xabc).xMutableMapping).xregister)).apply ((xM)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xM)) (((xtyping).xMapping)))
                xtest_collections_as_base.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xcollections).xabc).xMapping)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xM)) (((xtyping).xMapping)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xM)) (((xtyping).xIterable)))
                        (((unsupported)).apply ((((xcollections).xabc).xMutableSequence)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xS)) (((xtyping).xMutableSequence)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xS)) (((xtyping).xIterable)))
                        (((unsupported)).apply ((((xcollections).xabc).xIterable)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xI)) (((xtyping).xIterable)))
                        (((unsupported)).apply ((((xcollections).xabc).xMapping)) (((xabc).xABCMeta)))
                          (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xA).xregister)).apply ((xB)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xB)) (((xtyping).xMapping)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_contextmanager.write
                  [xself]
                    memory > xmanager
                    memory > xcm
                    seq > @
                      seq
                        xmanager.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (42))
                        xcm.write (((xmanager)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xcm)) (((xtyping).xContextManager)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply (42) (((xtyping).xContextManager)))
                xtest_async_contextmanager.write
                  [xself]
                    memory > xmanager
                    memory > xcm
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xACM)).apply)) (((xtyping).xAsyncContextManager)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((((xNotACM)).apply)) (((xtyping).xAsyncContextManager)))
                        xmanager.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (42))
                        xcm.write (((xmanager)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((xcm)) (((xtyping).xAsyncContextManager)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xtyping).xAsyncContextManager)) ((xint))).x__args__)) ((((unsupported)).apply ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply (42) ((((unsupported)).apply (((xtyping).xAsyncContextManager)) ((xint)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xtyping).xAsyncContextManager)) ((((unsupported)).apply ((xint)) ((xstr)))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_type_basic.write
                  [xself]
                    memory > xnew_user
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xUser)))
                        (((unsupported)).apply ((xUser)))
                        xnew_user.write
                          [xuser_class]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xuser_class)).apply)))
                        bogusForceDataize.write (((xnew_user)).apply ((xBasicUser)))
                xtest_type_typevar.write
                  [xself]
                    memory > xnew_user
                    memory > xU
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xUser)))
                        (((unsupported)).apply ((xUser)))
                        xU.write (((unsupported)).apply ((xTypeVar)) ("U") ((xUser)))
                        xnew_user.write
                          [xuser_class]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xuser_class)).apply)))
                        bogusForceDataize.write (((xnew_user)).apply ((xBasicUser)))
                xtest_type_optional.write
                  [xself]
                    memory > xfoo
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply ((xOptional)) ((((unsupported)).apply ((xType)) ((xBaseException)))))
                        xfoo.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xa)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                                  (((unsupported)).apply ((((xa)).apply)))
                        (((unsupported)).apply ((((xisinstance)).apply ((((xfoo)).apply ((xKeyboardInterrupt)))) ((xKeyboardInterrupt)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xfoo)).apply ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basic.write
                  [xself]
                    memory > xUserName
                    memory > xUserId
                    seq > @
                      seq
                        xUserId.write (((xNewType)).apply ("UserId") ((xint)))
                        xUserName.write (((xNewType)).apply ("UserName") ((xstr)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xUserId)).apply (5))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xUserName)).apply ("Joe"))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xUserId)).apply (5)).add 1)) (6))
                xtest_errors.write
                  [xself]
                    memory > xUserName
                    memory > xUserId
                    seq > @
                      seq
                        xUserId.write (((xNewType)).apply ("UserId") ((xint)))
                        xUserName.write (((xNewType)).apply ("UserName") ((xstr)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xUserId)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xUserName)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                (((unsupported)).apply ((xNamedTuple)))
                  seq
                    (((unsupported)).apply ((xname)) ((xstr)))
                    (((unsupported)).apply ((xcool)) ((xint)))
                xtest_basics.write
                  [xself]
                    memory > xjoe
                    memory > xEmp
                    memory > xjim
                    seq > @
                      seq
                        xEmp.write (((xNamedTuple)).apply ("Emp") ((((unsupported)).apply ((((unsupported)).apply ("name") ((xstr)))) ((((unsupported)).apply ("id") ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xEmp)) ((xtuple)))
                        xjoe.write (((xEmp)).apply ("Joe") (42))
                        xjim.write (((unsupported)).apply ((xEmp)) ("Jim") (1))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xjoe)) ((xEmp)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xjoe)) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xjoe).xname)) ("Joe"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xjoe).xid)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xjim).xname)) ("Jim"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xjim).xid)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__name__)) ("Emp"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x_fields)) ((((unsupported)).apply ("name") ("id"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__annotations__)) (((((xcollections).xOrderedDict)).apply ((((unsupported)).apply ((((unsupported)).apply ("name") ((xstr)))) ((((unsupported)).apply ("id") ((xint)))))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xEmp).x_field_types)) (((xEmp).x__annotations__)))
                xtest_namedtuple_pyversion.write
                  [xself]
                    memory > xwhatever
                    seq > @
                      ((((unsupported)).apply (((xsys).xversion_info)) ((((unsupported)).apply (2)))).less (((unsupported)).apply (3) (6))).if
                        seq
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            (((unsupported)).apply ((xNamedTuple)) ("Name") ((xint)) ((xstr)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            (((unsupported)).apply ((xNamedTuple)))
                              xwhatever.write 0
                xtest_annotation_usage.write
                  [xself]
                    memory > xtim
                    seq > @
                      seq
                        xtim.write (((xCoolEmployee)).apply ("Tim") (9000))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xtim)) ((xCoolEmployee)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xtim)) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtim).xname)) ("Tim"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtim).xcool)) (9000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCoolEmployee).x__name__)) ("CoolEmployee"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCoolEmployee).x_fields)) ((((unsupported)).apply ("name") ("cool"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCoolEmployee).x__annotations__)) ((((unsupported)).apply (((xcollections).xOrderedDict)) ((xstr)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xCoolEmployee).x_field_types)) (((xCoolEmployee).x__annotations__)))
                xtest_annotation_usage_with_default.write
                  [xself]
                    memory > xcooler_employee
                    memory > xjelle
                    seq > @
                      seq
                        xjelle.write (((xCoolEmployeeWithDefault)).apply ("Jelle"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xjelle)) ((xCoolEmployeeWithDefault)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xjelle)) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xjelle).xname)) ("Jelle"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xjelle).xcool)) (0))
                        xcooler_employee.write (((xCoolEmployeeWithDefault)).apply ("Sjoerd") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcooler_employee).xcool)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCoolEmployeeWithDefault).x__name__)) ("CoolEmployeeWithDefault"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCoolEmployeeWithDefault).x_fields)) ((((unsupported)).apply ("name") ("cool"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCoolEmployeeWithDefault).x_field_types)) ((((unsupported)).apply ((xdict)) ((xstr)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCoolEmployeeWithDefault).x_field_defaults)) ((((unsupported)).apply ((xdict)) (0))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xexec)).apply ((((unsupported)).apply)))
                xtest_annotation_usage_with_methods.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xXMeth)).apply (1)).xdouble)).apply)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xXMeth)).apply (42)).xx)) ((((unsupported)).apply ((((xXMeth)).apply (42))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xXRepr)).apply (42))))) ("42 -> 1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xXRepr)).apply (1) (2)).add (((xXRepr)).apply (3)))) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write (((xexec)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write (((xexec)).apply ((((unsupported)).apply)))
                xtest_namedtuple_keyword_usage.write
                  [xself]
                    memory > xLocalEmployee
                    memory > xnick
                    seq > @
                      seq
                        xLocalEmployee.write (((unsupported)).apply ((xNamedTuple)) ("LocalEmployee") ((xstr)) ((xint)))
                        xnick.write (((xLocalEmployee)).apply ("Nick") (25))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xnick)) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnick).xname)) ("Nick"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xLocalEmployee).x__name__)) ("LocalEmployee"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xLocalEmployee).x_fields)) ((((unsupported)).apply ("name") ("age"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xLocalEmployee).x__annotations__)) ((((unsupported)).apply ((xdict)) ((xstr)) ((xint)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xLocalEmployee).x_field_types)) (((xLocalEmployee).x__annotations__)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xNamedTuple)) ("Name") ((((unsupported)).apply ((((unsupported)).apply ("x") ((xint)))))) ((xstr)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xNamedTuple)) ("Name") (1) ("a"))
                xtest_namedtuple_special_keyword_names.write
                  [xself]
                    memory > xNT
                    memory > xa
                    seq > @
                      seq
                        xNT.write (((unsupported)).apply ((xNamedTuple)) ("NT") ((xtype)) ((xobject)) ((xstr)) ((xlist)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xNT).x__name__)) ("NT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xNT).x_fields)) ((((unsupported)).apply ("cls") ("self") ("typename") ("fields"))))
                        xa.write (((unsupported)).apply ((xNT)) ((xstr)) (42) ("foo") ((((unsupported)).apply ((((unsupported)).apply ("bar") ((xtuple)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xcls)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xself)) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xtypename)) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xfields)) ((((unsupported)).apply ((((unsupported)).apply ("bar") ((xtuple)))))))
                xtest_namedtuple_errors.write
                  [xself]
                    memory > xEmp
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xNamedTuple).x__new__)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xNamedTuple)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xNamedTuple)).apply ("Emp") ((((unsupported)).apply ((((unsupported)).apply ("name") ((xstr)))))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xNamedTuple)).apply ("Emp") ((((unsupported)).apply ((((unsupported)).apply ("_name") ((xstr)))))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xEmp.write (((unsupported)).apply ((xNamedTuple)) ("Emp") ((xstr)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__name__)) ("Emp"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x_fields)) ((((unsupported)).apply ("name") ("id"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xEmp.write (((unsupported)).apply ((xNamedTuple)) ("Emp") ((((unsupported)).apply ((((unsupported)).apply ("name") ((xstr)))) ((((unsupported)).apply ("id") ((xint)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__name__)) ("Emp"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x_fields)) ((((unsupported)).apply ("name") ("id"))))
                xtest_copy_and_pickle.write
                  [xself]
                    memory > xjane
                    memory > xEmp
                    memory > xjane2
                    memory > xz
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xEmp.write (((xNamedTuple)).apply ("Emp") ((((unsupported)).apply ((((unsupported)).apply ("name") ((xstr)))) ((((unsupported)).apply ("cool") ((xint)))))))
                        (((unsupported)).apply ((xcls)) ((((unsupported)).apply ((xEmp)) ((xCoolEmployee)) (((xself).xNestedEmployee)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcls)))))
                            seq
                              xjane.write (((xcls)).apply ("jane") (37))
                              (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                seq
                                  xz.write ((((xpickle).xdumps)).apply ((xjane)) ((xproto)))
                                  xjane2.write ((((xpickle).xloads)).apply ((xz)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xjane2)) ((xjane)))
                                  bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xjane2)) ((xcls)))
                              xjane2.write (((xcopy)).apply ((xjane)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xjane2)) ((xjane)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xjane2)) ((xcls)))
                              xjane2.write (((xdeepcopy)).apply ((xjane)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xjane2)) ((xjane)))
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xjane2)) ((xcls)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics_functional_syntax.write
                  [xself]
                    memory > xEmp
                    memory > xjim
                    seq > @
                      seq
                        xEmp.write (((xTypedDict)).apply ("Emp") ((((unsupported)).apply ("name") ((xstr)) ("id") ((xint)))))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xEmp)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xEmp)) (((xtyping).xMutableMapping)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xEmp)) ((((xcollections).xabc).xSequence)))
                        xjim.write (((unsupported)).apply ((xEmp)) ("Jim") (1))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xjim)))) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xjim)) ("name"))) ("Jim"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xjim)) ("id"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__name__)) ("Emp"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__module__)) ((x__name__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__bases__)) ((((unsupported)).apply ((xdict)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__annotations__)) ((((unsupported)).apply ("name") ((xstr)) ("id") ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__total__)) (TRUE))
                xtest_basics_keywords_syntax.write
                  [xself]
                    memory > xEmp
                    memory > xjim
                    seq > @
                      seq
                        xEmp.write (((unsupported)).apply ((xTypedDict)) ("Emp") ((xstr)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xEmp)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((xEmp)) (((xtyping).xMutableMapping)))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xEmp)) ((((xcollections).xabc).xSequence)))
                        xjim.write (((unsupported)).apply ((xEmp)) ("Jim") (1))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xjim)))) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xjim)) ("name"))) ("Jim"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xjim)) ("id"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__name__)) ("Emp"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__module__)) ((x__name__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__bases__)) ((((unsupported)).apply ((xdict)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__annotations__)) ((((unsupported)).apply ("name") ((xstr)) ("id") ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xEmp).x__total__)) (TRUE))
                xtest_typeddict_special_keyword_names.write
                  [xself]
                    memory > xTD
                    memory > xa
                    seq > @
                      seq
                        xTD.write (((unsupported)).apply ((xTypedDict)) ("TD") ((xtype)) ((xobject)) ((xstr)) ((xint)) ((xlist)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xTD).x__name__)) ("TD"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xTD).x__annotations__)) ((((unsupported)).apply ("cls") ((xtype)) ("self") ((xobject)) ("typename") ((xstr)) ("_typename") ((xint)) ("fields") ((xlist)) ("_fields") ((xdict)))))
                        xa.write (((unsupported)).apply ((xTD)) ((xstr)) (42) ("foo") (53) ((((unsupported)).apply ((((unsupported)).apply ("bar") ((xtuple)))))) ((((unsupported)).apply ("baz") ((xset)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ("cls"))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ("self"))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ("typename"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ("_typename"))) (53))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ("fields"))) ((((unsupported)).apply ((((unsupported)).apply ("bar") ((xtuple)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ("_fields"))) ((((unsupported)).apply ("baz") ((xset)))))
                xtest_typeddict_create_errors.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xTypedDict).x__new__)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xTypedDict)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xTypedDict)).apply ("Emp") ((((unsupported)).apply ((((unsupported)).apply ("name") ((xstr)))))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xTypedDict)) ("Emp") ((xstr)) ((xint)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xTypedDict)) ("Emp") ((((unsupported)).apply ("name") ((xstr)) ("id") ((xint)))))
                xtest_typeddict_errors.write
                  [xself]
                    memory > xEmp
                    memory > xjim
                    seq > @
                      seq
                        xEmp.write (((xTypedDict)).apply ("Emp") ((((unsupported)).apply ("name") ((xstr)) ("id") ((xint)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xTypedDict).x__module__)) ("typing"))
                        xjim.write (((unsupported)).apply ((xEmp)) ("Jim") (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((((unsupported)).apply)) ((xEmp)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply ((xjim)) ((xEmp)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((xdict)) ((xEmp)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xTypedDict)) ("Hi") (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xTypedDict)).apply ("Hi") ((((unsupported)).apply ((((unsupported)).apply ("x") ((xint)))) ((((unsupported)).apply ("y") (1))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xTypedDict)) ("Hi") ((((unsupported)).apply ((((unsupported)).apply ("x") ((xint)))))) ((xint)))
                xtest_py36_class_syntax_usage.write
                  [xself]
                    memory > xother
                    memory > xnot_origin
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xLabelPoint2D).x__name__)) ("LabelPoint2D"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xLabelPoint2D).x__module__)) ((x__name__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xLabelPoint2D).x__annotations__)) ((((unsupported)).apply ("x") ((xint)) ("y") ((xint)) ("label") ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xLabelPoint2D).x__bases__)) ((((unsupported)).apply ((xdict)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xLabelPoint2D).x__total__)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertNotIsSubclass)).apply ((xLabelPoint2D)) (((xtyping).xSequence)))
                        xnot_origin.write (((unsupported)).apply ((xPoint2D)) (0) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnot_origin)) ("x"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnot_origin)) ("y"))) (1))
                        xother.write (((unsupported)).apply ((xLabelPoint2D)) (0) (1) ("hi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xother)) ("label"))) ("hi"))
                xtest_pickle.write
                  [xself]
                    memory > xjane
                    memory > xz
                    memory > xjane2
                    memory > xZZ
                    memory > xEmpD
                    memory > xEmpDnew
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xEmpD.write (((unsupported)).apply ((xTypedDict)) ("EmpD") ((xstr)) ((xint)))
                        xjane.write (((xEmpD)).apply ((((unsupported)).apply ("name") ("jane") ("id") (37))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xz.write ((((xpickle).xdumps)).apply ((xjane)) ((xproto)))
                            xjane2.write ((((xpickle).xloads)).apply ((xz)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xjane2)) ((xjane)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xjane2)) ((((unsupported)).apply ("name") ("jane") ("id") (37))))
                            xZZ.write ((((xpickle).xdumps)).apply ((xEmpD)) ((xproto)))
                            xEmpDnew.write ((((xpickle).xloads)).apply ((xZZ)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xEmpDnew)).apply ((((unsupported)).apply ("name") ("jane") ("id") (37))))) ((xjane)))
                xtest_optional.write
                  [xself]
                    memory > xEmpD
                    seq > @
                      seq
                        xEmpD.write (((unsupported)).apply ((xTypedDict)) ("EmpD") ((xstr)) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtyping).xOptional)) ((xEmpD)))) ((((unsupported)).apply (((xtyping).xUnion)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xEmpD)))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply (((xtyping).xList)) ((xEmpD)))) ((((unsupported)).apply (((xtyping).xTuple)) ((xEmpD)))))
                xtest_total.write
                  [xself]
                    memory > xD
                    seq > @
                      seq
                        xD.write (((unsupported)).apply ((xTypedDict)) ("D") ((((unsupported)).apply ("x") ((xint)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xD)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xD)) (1))) ((((unsupported)).apply ("x") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xD).x__total__)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xOptions)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xOptions)) (2))) ((((unsupported)).apply ("log_level") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xOptions).x__total__)) (FALSE))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_io.write
                  [xself]
                    memory > xstuff
                    memory > xa
                    seq > @
                      seq
                        xstuff.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xa).xreadline)).apply)))
                        xa.write (((unsupported)).apply (((xstuff).x__annotations__)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).x__parameters__)) ((((unsupported)).apply ((xAnyStr)))))
                xtest_textio.write
                  [xself]
                    memory > xstuff
                    memory > xa
                    seq > @
                      seq
                        xstuff.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xa).xreadline)).apply)))
                        xa.write (((unsupported)).apply (((xstuff).x__annotations__)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).x__parameters__)) ((((unsupported)).apply)))
                xtest_binaryio.write
                  [xself]
                    memory > xstuff
                    memory > xa
                    seq > @
                      seq
                        xstuff.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((((xa).xreadline)).apply)))
                        xa.write (((unsupported)).apply (((xstuff).x__annotations__)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).x__parameters__)) ((((unsupported)).apply)))
                xtest_io_submodule.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xIO)) (((xtyping).xIO)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xTextIO)) (((xtyping).xTextIO)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xBinaryIO)) (((xtyping).xBinaryIO)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((x__all__)))) ((((xset)).apply ((((unsupported)).apply ("IO") ("TextIO") ("BinaryIO"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((x__name__)) ("typing.io"))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                xtest_basics.write
                  [xself]
                    memory > xmat
                    memory > xpat
                    seq > @
                      seq
                        xpat.write ((((xre).xcompile)).apply ("[a-z]+") (((xre).xI)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply (((xpat).x__class__)) ((xPattern)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((((xtype)).apply ((xpat)))) ((xPattern)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpat)) ((xPattern)))
                        xmat.write ((((xpat).xsearch)).apply ("12345abcde....."))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply (((xmat).x__class__)) ((xMatch)))
                        bogusForceDataize.write ((((xself).xassertIsSubclass)).apply ((((xtype)).apply ((xmat)))) ((xMatch)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmat)) ((xMatch)))
                        (((unsupported)).apply ((xPattern)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((xbytes)))))))
                        (((unsupported)).apply ((xMatch)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xbytes)) ((xstr)))))))
                xtest_alias_equality.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xPattern)) ((xstr)))) ((((unsupported)).apply ((xPattern)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xPattern)) ((xstr)))) ((((unsupported)).apply ((xPattern)) ((xbytes)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xPattern)) ((xstr)))) ((((unsupported)).apply ((xMatch)) ((xstr)))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xPattern)) ((xstr)))) ((xstr)))
                xtest_errors.write
                  [xself]
                    memory > xm
                    seq > @
                      seq
                        xm.write (((unsupported)).apply ((xMatch)) ((((unsupported)).apply ((xUnion)) ((((unsupported)).apply ((xstr)) ((xbytes)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xm)) ((xstr)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xisinstance)).apply (42) ((((unsupported)).apply ((xPattern)) ((xstr)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xissubclass)).apply ((((unsupported)).apply ((xPattern)) ((xbytes)))) ((((unsupported)).apply ((xPattern)) ((xstr)))))
                xtest_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xPattern)))) ("typing.Pattern"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xPattern)) ((xstr)))))) ("typing.Pattern[str]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xPattern)) ((xbytes)))))) ("typing.Pattern[bytes]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xMatch)))) ("typing.Match"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xMatch)) ((xstr)))))) ("typing.Match[str]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xMatch)) ((xbytes)))))) ("typing.Match[bytes]"))
                xtest_re_submodule.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xMatch)) (((xtyping).xMatch)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xPattern)) (((xtyping).xPattern)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((x__all__)))) ((((xset)).apply ((((unsupported)).apply ("Match") ("Pattern"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((x__name__)) ("typing.re"))
                xtest_cannot_subclass.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xex)))
                          (((unsupported)).apply (((xtyping).xMatch)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xex).xexception)))) ("type 're.Match' is not an acceptable base type"))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                unsupported
                xtest_all.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("AbstractSet") ((xa)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ValuesView") ((xa)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("cast") ((xa)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("overload") ((xa)))
                        (((xhasattr)).apply ((xcontextlib)) ("AbstractContextManager")).if
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("ContextManager") ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("io") ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("re") ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("os") ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("sys") ((xa)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Text") ((xa)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("SupportsBytes") ((xa)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("SupportsComplex") ((xa)))
                xtest_all_exported_names.write
                  [xself]
                    memory > xactual_all
                    memory > xcomputed_all
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xactual_all.write (((xset)).apply (((xtyping).x__all__)))
                        xcomputed_all.write (((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xv)))) (((((((xvars)).apply ((xtyping))).xitems)).apply)) (((((unsupported)).apply ((xk)) ((xactual_all))).or (((((((((((xk).xstartswith)).apply ("_")).not).and (((unsupported)).apply ((xk)) ((((xtyping).xio).x__all__)))).and (((unsupported)).apply ((xk)) ((((xtyping).xre).x__all__)))).and (((unsupported)).apply ((xk)) ((((unsupported)).apply ("io") ("re"))))).and (((((xk).xendswith)).apply ((((unsupported)).apply ("Meta") ("_contra") ("_co")))).not)).and ((((((xk).xupper)).apply).eq (xk)).not)).and ((((xgetattr)).apply ((xv)) ("__module__") ("None: is there a None literal in the EO language?")).eq ((xtyping).x__name__))))))
                        bogusForceDataize.write ((((xself).xassertSetEqual)).apply ((xcomputed_all)) ((xactual_all)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xmain)).apply)