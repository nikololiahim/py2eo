memory > xthreading
memory > xfileobj
memory > xsocket
memory > xb
memory > xMockSelector
memory > xx
memory > xsupport
memory > xargs
memory > xgetattr
memory > xtelnetlib
memory > xEOFError
memory > xdata
memory > xlist
memory > xconn
memory > xout
memory > xNotImplementedError
memory > x_
memory > xcmd
memory > xtype
memory > xtn
memory > xExpectAndReadTestCase
memory > xTelnetAlike
memory > xbytes
memory > xnego_collector
memory > xSocketStub
memory > xunittest
memory > xobject
memory > xaddr
memory > xisinstance
memory > xlen
memory > xselectors
memory > x__name__
memory > xkey
memory > xa
[] > test_telnetlib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xfileno
        memory > x_read_eager
        memory > xtest_read_all
        memory > xcmds
        memory > xdo_nego
        memory > xtestGetters
        memory > xtest_read_until
        memory > x__init__
        memory > xserver
        memory > xread_very_lazy
        memory > xtest_SB_commands
        memory > x_test_command
        memory > xtest_IAC_commands
        memory > xtestTimeoutValue
        memory > xclose
        memory > xunregister
        memory > xtest_debuglevel_reads
        memory > xtest_socket
        memory > xselect
        memory > xtest_write
        memory > xmsg
        memory > xtest_debuglevel_write
        memory > xtestTimeoutNone
        memory > xsetUp
        memory > xget_map
        memory > xrecv
        memory > xtest_read_some
        memory > xregister
        memory > xtestBasic
        memory > xsendall
        memory > xtest_debug_accepts_str_port
        memory > xHOST
        memory > xresolution
        memory > xtest_telnet
        memory > xtestTimeoutDefault
        memory > xtest_read_eager
        memory > xsock_avail
        memory > xtearDown
        memory > xtest_expect
        memory > xtestContextManager
        memory > xtest_read_lazy
        memory > xtestTimeoutOpen
        memory > xtl
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xHOST.write ((xsupport).xHOST)
            xserver.write
              [xevt xserv]
                seq > @
                  seq
                    bogusForceDataize.write ((((xserv).xlisten)).apply)
                    bogusForceDataize.write ((((xevt).xset)).apply)
                    (((unsupported)).apply (((xsocket).xtimeout)))
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddr)))) (((((xserv).xaccept)).apply)))
                        bogusForceDataize.write ((((xconn).xclose)).apply)
                      bogusForceDataize.write ((((xserv).xclose)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xevt)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xsock)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                        bogusForceDataize.write (((((xself).xsock).xsettimeout)).apply (60))
                        (((unsupported)).apply (((xself).xport)) (((((xsupport).xbind_port)).apply (((xself).xsock)))))
                        (((unsupported)).apply (((xself).xthread)) ((((unsupported)).apply (((xthreading).xThread)) ((xserver)) ((((unsupported)).apply (((xself).xevt)) (((xself).xsock)))))))
                        bogusForceDataize.write (((((xself).xthread).xsetDaemon)).apply (TRUE))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        bogusForceDataize.write (((((xself).xevt).xwait)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xthread).xjoin)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xthread)))))
                xtestBasic.write
                  [xself]
                    memory > xtelnet
                    seq > @
                      seq
                        xtelnet.write ((((xtelnetlib).xTelnet)).apply ((xHOST)) (((xself).xport)))
                        bogusForceDataize.write (((((xtelnet).xsock).xclose)).apply)
                xtestContextManager.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtelnetlib).xTelnet)).apply ((xHOST)) (((xself).xport)))) ((xtn)))
                          bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xtn).xget_socket)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xtn).xget_socket)).apply)))
                xtestTimeoutDefault.write
                  [xself]
                    memory > xtelnet
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((((xsocket).xgetdefaulttimeout)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (30))
                        (((unsupported)).apply)
                          xtelnet.write ((((xtelnetlib).xTelnet)).apply ((xHOST)) (((xself).xport)))
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtelnet).xsock).xgettimeout)).apply)) (30))
                        bogusForceDataize.write (((((xtelnet).xsock).xclose)).apply)
                xtestTimeoutNone.write
                  [xself]
                    memory > xtelnet
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((((xsocket).xgetdefaulttimeout)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (30))
                        (((unsupported)).apply)
                          xtelnet.write (((unsupported)).apply (((xtelnetlib).xTelnet)) ((xHOST)) (((xself).xport)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((((xtelnet).xsock).xgettimeout)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write (((((xtelnet).xsock).xclose)).apply)
                xtestTimeoutValue.write
                  [xself]
                    memory > xtelnet
                    seq > @
                      seq
                        xtelnet.write (((unsupported)).apply (((xtelnetlib).xTelnet)) ((xHOST)) (((xself).xport)) (30))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtelnet).xsock).xgettimeout)).apply)) (30))
                        bogusForceDataize.write (((((xtelnet).xsock).xclose)).apply)
                xtestTimeoutOpen.write
                  [xself]
                    memory > xtelnet
                    seq > @
                      seq
                        xtelnet.write ((((xtelnetlib).xTelnet)).apply)
                        (((unsupported)).apply (((xtelnet).xopen)) ((xHOST)) (((xself).xport)) (30))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtelnet).xsock).xgettimeout)).apply)) (30))
                        bogusForceDataize.write (((((xtelnet).xsock).xclose)).apply)
                xtestGetters.write
                  [xself]
                    memory > xt_sock
                    memory > xtelnet
                    seq > @
                      seq
                        xtelnet.write (((unsupported)).apply (((xtelnetlib).xTelnet)) ((xHOST)) (((xself).xport)) (30))
                        xt_sock.write ((xtelnet).xsock)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtelnet).xget_socket)).apply)) ((xt_sock)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtelnet).xfileno)).apply)) (((((xt_sock).xfileno)).apply)))
                        bogusForceDataize.write (((((xtelnet).xsock).xclose)).apply)
            (((unsupported)).apply ((xobject)))
              seq
                unsupported
                x__init__.write
                  [xself xreads]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xreads)) ((((xlist)).apply ((xreads)))))
                        (((unsupported)).apply (((xself).xwrites)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xblock)) (FALSE))
                xsendall.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write (((((xself).xwrites).xappend)).apply ((xdata)))
                xrecv.write
                  [xself xsize]
                    memory > xout
                    seq > @
                      seq
                        xout.write ""
                        while.
                          (((xself).xreads).and ((((xlen)).apply ((xout))).less (xsize)))
                          [unused]
                            seq > @
                              (((unsupported)).apply ((xout)) ((((((xself).xreads).xpop)).apply (0))))
                        ((((xlen)).apply ((xout))).greater (xsize)).if
                          seq
                            bogusForceDataize.write (((((xself).xreads).xinsert)).apply (0) ((((unsupported)).apply ((xout)) ((((unsupported)).apply ((xsize)))))))
                            xout.write (((unsupported)).apply ((xout)) ((((unsupported)).apply ((xsize)))))
                        (((unsupported)).apply ((xout)))
            (((unsupported)).apply (((xtelnetlib).xTelnet)))
              seq
                xfileno.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xNotImplementedError)).apply)))
                xclose.write
                  [xself]
                    seq > @
                xsock_avail.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xsock).xblock).not)))
                xmsg.write
                  [xself xmsg]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xout)))
                          bogusForceDataize.write (((((xtelnetlib).xTelnet).xmsg)).apply ((xself)) ((xmsg)) ((((unsupported)).apply ((xargs)))))
                        (((unsupported)).apply (((xself).x_messages)) (((((xout).xgetvalue)).apply)))
                        (((unsupported)).apply)
            (((unsupported)).apply (((xselectors).xBaseSelector)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xkeys)) ((((unsupported)).apply)))
                xresolution.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply)))
                xregister.write
                  [xself xfileobj xevents xdata]
                    memory > xkey
                    seq > @
                      (((unsupported)).apply)
                        xkey.write ((((xselectors).xSelectorKey)).apply ((xfileobj)) (0) ((xevents)) ((xdata)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xkeys)) ((xfileobj)))) ((xkey)))
                        (((unsupported)).apply ((xkey)))
                xunregister.write
                  [xself xfileobj]
                    seq > @
                      (((unsupported)).apply ((((((xself).xkeys).xpop)).apply ((xfileobj)))))
                xselect.write
                  [xself xtimeout]
                    memory > xblock
                    seq > @
                      (((unsupported)).apply)
                        xblock.write FALSE
                        (((unsupported)).apply ((xfileobj)) (((xself).xkeys)))
                          (((xisinstance)).apply ((xfileobj)) ((xTelnetAlike))).if
                            seq
                              xblock.write (((xfileobj).xsock).xblock)
                              (((unsupported)).apply)
                        (xblock).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkey)) (((xkey).xevents)))) ((xkey)) ((((((xself).xkeys).xvalues)).apply)))))
                xget_map.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xkeys)))
            xtest_socket.write
              [xreads]
                memory > xold_conn
                memory > xnew_conn
                seq > @
                  (((unsupported)).apply)
                    xnew_conn.write
                      []
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((xSocketStub)).apply ((xreads)))))
                    (((unsupported)).apply)
                      seq
                        xold_conn.write ((xsocket).xcreate_connection)
                        (((unsupported)).apply (((xsocket).xcreate_connection)) ((xnew_conn)))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                      (((unsupported)).apply (((xsocket).xcreate_connection)) ((xold_conn)))
                    (((unsupported)).apply)
            xtest_telnet.write
              [xreads xcls]
                memory > xtelnet
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xx)) ((xreads)))
                      (((unsupported)).apply ((((unsupported)).apply ((((xtype)).apply ((xx)))) ((xbytes)))) ((xx)))
                    (((unsupported)).apply ((((xtest_socket)).apply ((xreads)))))
                      seq
                        xtelnet.write (((xcls)).apply ("dummy") (0))
                        (((unsupported)).apply (((xtelnet).x_messages)) (""))
                    (((unsupported)).apply ((xtelnet)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xold_selector)) (((xtelnetlib).x_TelnetSelector)))
                        (((unsupported)).apply (((xtelnetlib).x_TelnetSelector)) ((xMockSelector)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xtelnetlib).x_TelnetSelector)) (((xself).xold_selector)))
            (((unsupported)).apply ((xExpectAndReadTestCase)))
              seq
                xtest_read_until.write
                  [xself]
                    memory > xdata
                    memory > xwant
                    memory > xtelnet
                    memory > xreads
                    memory > xexpect
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xwant.write (((unsupported)).apply ("xxxmatchyyy"))
                        xtelnet.write (((xtest_telnet)).apply ((xwant)))
                        xdata.write ((((xtelnet).xread_until)).apply ("match"))
                        (((unsupported)).apply (((xself).xassertEqual)) ((xdata)) ("xxxmatch") ((((unsupported)).apply (((xtelnet).xcookedq)) (((xtelnet).xrawq)) ((((xtelnet).xsock).xreads)))))
                        xreads.write (((unsupported)).apply (("x".mul 50)) ("match") (("y".mul 50)))
                        xexpect.write ((("".xjoin)).apply ((((unsupported)).apply ((xreads)) ((((unsupported)).apply ((1.neg)))))))
                        xtelnet.write (((xtest_telnet)).apply ((xreads)))
                        xdata.write ((((xtelnet).xread_until)).apply ("match"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xexpect)))
                xtest_read_all.write
                  [xself]
                    memory > xreads
                    memory > xexpect
                    memory > xtelnet
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xreads.write (((unsupported)).apply (("x".mul 500)) (("y".mul 500)) (("z".mul 500)))
                        xexpect.write ((("".xjoin)).apply ((xreads)))
                        xtelnet.write (((xtest_telnet)).apply ((xreads)))
                        xdata.write ((((xtelnet).xread_all)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xexpect)))
                        (((unsupported)).apply)
                xtest_read_some.write
                  [xself]
                    memory > xtelnet
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xtelnet.write (((xtest_telnet)).apply ((((unsupported)).apply (("x".mul 500)))))
                        xdata.write ((((xtelnet).xread_some)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xlen)).apply ((xdata))).geq 1)))
                        xtelnet.write (((xtest_telnet)).apply)
                        xdata.write ((((xtelnet).xread_some)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") ((xdata)))
                x_read_eager.write
                  [xself xfunc_name]
                    memory > xwant
                    memory > xtelnet
                    memory > xfunc
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xwant.write ("x".mul 100)
                        xtelnet.write (((xtest_telnet)).apply ((((unsupported)).apply ((xwant)))))
                        xfunc.write (((xgetattr)).apply ((xtelnet)) ((xfunc_name)))
                        (((unsupported)).apply ((((xtelnet).xsock).xblock)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") ((((xfunc)).apply)))
                        (((unsupported)).apply ((((xtelnet).xsock).xblock)) (FALSE))
                        xdata.write ""
                        while.
                          TRUE
                          [unused]
                            seq > @
                              (((unsupported)).apply ((xEOFError)))
                                (((unsupported)).apply ((xdata)) ((((xfunc)).apply)))
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xwant)))
                xtest_read_eager.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_read_eager)).apply ("read_eager"))
                        bogusForceDataize.write ((((xself).x_read_eager)).apply ("read_very_eager"))
                xread_very_lazy.write
                  [xself]
                    memory > xwant
                    memory > xtelnet
                    memory > xdata
                    seq > @
                      seq
                        xwant.write ("x".mul 100)
                        xtelnet.write (((xtest_telnet)).apply ((((unsupported)).apply ((xwant)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (((((xtelnet).xread_very_lazy)).apply)))
                        while.
                          (((xtelnet).xsock).xreads)
                          [unused]
                            seq > @
                              bogusForceDataize.write ((((xtelnet).xfill_rawq)).apply)
                        xdata.write ((((xtelnet).xread_very_lazy)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xwant)) ((xdata)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xEOFError)) (((xtelnet).xread_very_lazy)))
                xtest_read_lazy.write
                  [xself]
                    memory > xwant
                    memory > xtelnet
                    memory > xread_data
                    memory > xdata
                    seq > @
                      seq
                        xwant.write ("x".mul 100)
                        xtelnet.write (((xtest_telnet)).apply ((((unsupported)).apply ((xwant)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (((((xtelnet).xread_lazy)).apply)))
                        xdata.write ""
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xEOFError)))
                                  seq
                                    xread_data.write ((((xtelnet).xread_lazy)).apply)
                                    (((unsupported)).apply ((xdata)) ((xread_data)))
                                    ((xread_data).not).if
                                      bogusForceDataize.write ((((xtelnet).xfill_rawq)).apply)
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xwant).xstartswith)).apply ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xwant)))
            (((unsupported)).apply ((xobject)))
              seq
                x__init__.write
                  [xself xsb_getter]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xseen)) (""))
                        (((unsupported)).apply (((xself).xsb_getter)) ((xsb_getter)))
                        (((unsupported)).apply (((xself).xsb_seen)) (""))
                xdo_nego.write
                  [xself xsock xcmd xopt]
                    memory > xsb_data
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xseen)) (((xcmd).add (xopt))))
                        (((xcmd).eq ((xtl).xSE)).and ((xself).xsb_getter)).if
                          seq
                            xsb_data.write ((((xself).xsb_getter)).apply)
                            (((unsupported)).apply (((xself).xsb_seen)) ((xsb_data)))
            xtl.write (xtelnetlib)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_write.write
                  [xself]
                    memory > xdata_sample
                    memory > xtelnet
                    memory > xwritten
                    seq > @
                      seq
                        xdata_sample.write (((unsupported)).apply ("data sample without IAC") ((("data sample with".add ((xtl).xIAC)).add " one IAC")) ((((("a few".add ((xtl).xIAC)).add ((xtl).xIAC)).add " iacs").add ((xtl).xIAC))) (((xtl).xIAC)) (""))
                        (((unsupported)).apply ((xdata)) ((xdata_sample)))
                          seq
                            xtelnet.write (((xtest_telnet)).apply)
                            bogusForceDataize.write ((((xtelnet).xwrite)).apply ((xdata)))
                            xwritten.write ((("".xjoin)).apply ((((xtelnet).xsock).xwrites)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdata).xreplace)).apply (((xtl).xIAC)) ((((xtl).xIAC).add ((xtl).xIAC))))) ((xwritten)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcmds.write (((unsupported)).apply (((xtl).xAO)) (((xtl).xAYT)) (((xtl).xBRK)) (((xtl).xEC)) (((xtl).xEL)) (((xtl).xGA)) (((xtl).xIP)) (((xtl).xNOP)))
                x_test_command.write
                  [xself xdata]
                    memory > xnego
                    memory > xtelnet
                    memory > xcmd
                    memory > xdata_len
                    memory > xtxt
                    seq > @
                      seq
                        unsupported
                        xtelnet.write (((xtest_telnet)).apply ((xdata)))
                        xdata_len.write (((xlen)).apply (((("".xjoin)).apply ((xdata)))))
                        xnego.write (((xnego_collector)).apply)
                        bogusForceDataize.write ((((xtelnet).xset_option_negotiation_callback)).apply (((xnego).xdo_nego)))
                        xtxt.write ((((xtelnet).xread_all)).apply)
                        xcmd.write ((xnego).xseen)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xlen)).apply ((xcmd))).greater 0)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((xcmd)) ((((unsupported)).apply (1))))) (((xself).xcmds)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcmd)) ((((unsupported)).apply (1) (2))))) (((xtl).xNOOPT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata_len)) ((((xlen)).apply (((xtxt).add (xcmd))))))
                        (((unsupported)).apply (((xnego).xsb_getter)) ("None: is there a None literal in the EO language?"))
                xtest_IAC_commands.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xcmd)) (((xself).xcmds)))
                          seq
                            bogusForceDataize.write ((((xself).x_test_command)).apply ((((unsupported)).apply (((xtl).xIAC)) ((xcmd)))))
                            bogusForceDataize.write ((((xself).x_test_command)).apply ((((unsupported)).apply (("x".mul 100)) (((xtl).xIAC)) ((xcmd)) (("y".mul 100)))))
                            bogusForceDataize.write ((((xself).x_test_command)).apply ((((unsupported)).apply (("x".mul 10)) (((xtl).xIAC)) ((xcmd)) (("y".mul 10)))))
                        bogusForceDataize.write ((((xself).x_test_command)).apply ((((unsupported)).apply ((((xtl).xIAC).add (xcmd))) ((xcmd)) (((xself).xcmds)))))
                xtest_SB_commands.write
                  [xself]
                    memory > xnego
                    memory > xtelnet
                    memory > xsend
                    memory > xtxt
                    memory > xwant_sb_data
                    seq > @
                      seq
                        xsend.write (((unsupported)).apply ((((((xtl).xIAC).add ((xtl).xSB)).add ((xtl).xIAC)).add ((xtl).xSE))) ((((((((xtl).xIAC).add ((xtl).xSB)).add ((xtl).xIAC)).add ((xtl).xIAC)).add ((xtl).xIAC)).add ((xtl).xSE))) (((((((((xtl).xIAC).add ((xtl).xSB)).add ((xtl).xIAC)).add ((xtl).xIAC)).add "aa").add ((xtl).xIAC)).add ((xtl).xSE))) (((((((((xtl).xIAC).add ((xtl).xSB)).add "bb").add ((xtl).xIAC)).add ((xtl).xIAC)).add ((xtl).xIAC)).add ((xtl).xSE))) ((((((((((xtl).xIAC).add ((xtl).xSB)).add "cc").add ((xtl).xIAC)).add ((xtl).xIAC)).add "dd").add ((xtl).xIAC)).add ((xtl).xSE))))
                        xtelnet.write (((xtest_telnet)).apply ((xsend)))
                        xnego.write (((xnego_collector)).apply (((xtelnet).xread_sb_data)))
                        bogusForceDataize.write ((((xtelnet).xset_option_negotiation_callback)).apply (((xnego).xdo_nego)))
                        xtxt.write ((((xtelnet).xread_all)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtxt)) (""))
                        xwant_sb_data.write ((((((((xtl).xIAC).add ((xtl).xIAC)).add "aabb").add ((xtl).xIAC)).add "cc").add ((xtl).xIAC)).add "dd")
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnego).xsb_seen)) ((xwant_sb_data)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") (((((xtelnet).xread_sb_data)).apply)))
                        (((unsupported)).apply (((xnego).xsb_getter)) ("None: is there a None literal in the EO language?"))
                xtest_debuglevel_reads.write
                  [xself]
                    memory > xgiven_a_expect_b
                    memory > xtxt
                    memory > xtelnet
                    seq > @
                      seq
                        xgiven_a_expect_b.write (((unsupported)).apply ((((unsupported)).apply ("a") (": recv b''n"))) ((((unsupported)).apply ((((xtl).xIAC).add (((xbytes)).apply ((((unsupported)).apply (88)))))) (": IAC 88 not recognizedn"))) ((((unsupported)).apply (((((xtl).xIAC).add ((xtl).xDO)).add (((xbytes)).apply ((((unsupported)).apply (1)))))) (": IAC DO 1n"))) ((((unsupported)).apply (((((xtl).xIAC).add ((xtl).xDONT)).add (((xbytes)).apply ((((unsupported)).apply (1)))))) (": IAC DONT 1n"))) ((((unsupported)).apply (((((xtl).xIAC).add ((xtl).xWILL)).add (((xbytes)).apply ((((unsupported)).apply (1)))))) (": IAC WILL 1n"))) ((((unsupported)).apply (((((xtl).xIAC).add ((xtl).xWONT)).add (((xbytes)).apply ((((unsupported)).apply (1)))))) (": IAC WONT 1n"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((xgiven_a_expect_b)))
                          seq
                            xtelnet.write (((xtest_telnet)).apply ((((unsupported)).apply ((xa)))))
                            bogusForceDataize.write ((((xtelnet).xset_debuglevel)).apply (1))
                            xtxt.write ((((xtelnet).xread_all)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xb)) (((xtelnet).x_messages)))
                        (((unsupported)).apply)
                xtest_debuglevel_write.write
                  [xself]
                    memory > xexpected
                    memory > xtelnet
                    seq > @
                      seq
                        xtelnet.write (((xtest_telnet)).apply)
                        bogusForceDataize.write ((((xtelnet).xset_debuglevel)).apply (1))
                        bogusForceDataize.write ((((xtelnet).xwrite)).apply ("xxx"))
                        xexpected.write "send b'xxx'n"
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xexpected)) (((xtelnet).x_messages)))
                xtest_debug_accepts_str_port.write
                  [xself]
                    memory > xtelnet
                    seq > @
                      seq
                        (((unsupported)).apply ((((xtest_socket)).apply ((((unsupported)).apply)))))
                          seq
                            xtelnet.write (((xTelnetAlike)).apply ("dummy") ("0"))
                            (((unsupported)).apply (((xtelnet).x_messages)) (""))
                        bogusForceDataize.write ((((xtelnet).xset_debuglevel)).apply (1))
                        bogusForceDataize.write ((((xtelnet).xmsg)).apply ("test"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((xtelnet).x_messages)) ("0.*test"))
            (((unsupported)).apply ((xExpectAndReadTestCase)))
              xtest_expect.write
                [xself]
                  memory > xwant
                  memory > xtelnet
                  seq > @
                    seq
                      (((unsupported)).apply)
                      xwant.write (((unsupported)).apply (("x".mul 10)) ("match") (("y".mul 10)))
                      xtelnet.write (((xtest_telnet)).apply ((xwant)))
                      (((unsupported)).apply ((((unsupported)).apply ((x_)) ((x_)) ((xdata)))) (((((xtelnet).xexpect)).apply ((((unsupported)).apply ("match"))))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) (((("".xjoin)).apply ((((unsupported)).apply ((xwant)) ((((unsupported)).apply ((1.neg)))))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)