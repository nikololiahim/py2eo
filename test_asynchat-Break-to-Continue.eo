memory > xclient
memory > xValueError
memory > xecho_client
memory > xsocket
memory > xecho_server
memory > xbytearray
memory > xl
memory > xtime
memory > xasynchat
memory > xunittest
memory > xasyncore
memory > xmemoryview
memory > xlen
memory > xthreading
memory > xevent
memory > xerrno
memory > xTestAsynchat
memory > xerror
memory > xconn
memory > xs
memory > xsupport
memory > xsys
memory > xBlockingIOError
memory > xTypeError
memory > x__name__
[] > test_asynchat
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcollect_incoming_data
        memory > xline_terminator_check
        memory > xnumeric_terminator_check
        memory > xtest_blockingioerror
        memory > xtest_line_terminator3
        memory > xsetUp
        memory > xTIMEOUT
        memory > xrun
        memory > xtest_numeric_terminator1
        memory > xtest_line_terminator1
        memory > xtest_empty_line
        memory > xusepoll
        memory > xSERVER_QUIT
        memory > xtest_none_terminator
        memory > xfound_terminator
        memory > xchunk_size
        memory > xtest_numeric_terminator2
        memory > xstart_echo_server
        memory > xtest_close_when_done
        memory > xtest_push
        memory > x__init__
        memory > xtest_disallow_negative_terminator
        memory > xHOST
        memory > xtest_line_terminator2
        memory > xtest_find_prefix_at_end
        memory > xtest_simple_producer
        memory > xtearDown
        memory > xtest_string_producer
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xHOST.write ((xsupport).xHOST)
            xSERVER_QUIT.write "QUITn"
            xTIMEOUT.write 3.0
            (((unsupported)).apply (((xthreading).xThread)))
              seq
                xchunk_size.write 1
                x__init__.write
                  [xself xevent]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)).apply ((xself)))
                        (((unsupported)).apply (((xself).xevent)) ((xevent)))
                        (((unsupported)).apply (((xself).xsock)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                        (((unsupported)).apply (((xself).xport)) (((((xsupport).xbind_port)).apply (((xself).xsock)))))
                        (((unsupported)).apply (((xself).xstart_resend_event)) ("None: is there a None literal in the EO language?"))
                xrun.write
                  [xself]
                    memory > xn
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xsock).xlisten)).apply)
                        bogusForceDataize.write (((((xself).xevent).xset)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xclient)))) ((((((xself).xsock).xaccept)).apply)))
                        (((unsupported)).apply (((xself).xbuffer)) (""))
                        while.
                          (((unsupported)).apply ((xSERVER_QUIT)) (((xself).xbuffer)))
                          [unused]
                            seq > @
                              seq
                                xdata.write ((((xconn).xrecv)).apply (1))
                                ((xdata).not).if
                                  (((unsupported)).apply)
                                (((unsupported)).apply (((xself).xbuffer)) ((((xself).xbuffer).add (xdata))))
                        (((unsupported)).apply (((xself).xbuffer)) ((((((xself).xbuffer).xreplace)).apply ((xSERVER_QUIT)) (""))))
                        ((xself).xstart_resend_event).if
                          bogusForceDataize.write (((((xself).xstart_resend_event).xwait)).apply)
                        (((unsupported)).apply)
                          while.
                            ((xself).xbuffer)
                            [unused]
                              seq > @
                                seq
                                  xn.write ((((xconn).xsend)).apply ((((unsupported)).apply (((xself).xbuffer)) ((((unsupported)).apply (((xself).xchunk_size)))))))
                                  bogusForceDataize.write ((((xtime).xsleep)).apply (0.001))
                                  (((unsupported)).apply (((xself).xbuffer)) ((((unsupported)).apply (((xself).xbuffer)) ((((unsupported)).apply ((xn)))))))
                        bogusForceDataize.write ((((xconn).xclose)).apply)
                        bogusForceDataize.write (((((xself).xsock).xclose)).apply)
            (((unsupported)).apply (((xasynchat).xasync_chat)))
              seq
                x__init__.write
                  [xself xterminator xserver_port]
                    memory > xhandle_expt
                    memory > xhandle_connect
                    seq > @
                      seq
                        bogusForceDataize.write (((((xasynchat).xasync_chat).x__init__)).apply ((xself)))
                        (((unsupported)).apply (((xself).xcontents)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcreate_socket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))
                        bogusForceDataize.write ((((xself).xconnect)).apply ((((unsupported)).apply ((xHOST)) ((xserver_port)))))
                        bogusForceDataize.write ((((xself).xset_terminator)).apply ((xterminator)))
                        (((unsupported)).apply (((xself).xbuffer)) (""))
                        xhandle_connect.write
                          [xself]
                            seq > @
                        (((xsys).xplatform).eq "darwin").if
                          xhandle_expt.write
                            [xself]
                              seq > @
                xcollect_incoming_data.write
                  [xself xdata]
                    seq > @
                      (((unsupported)).apply (((xself).xbuffer)) ((xdata)))
                xfound_terminator.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcontents).xappend)).apply (((xself).xbuffer)))
                        (((unsupported)).apply (((xself).xbuffer)) (""))
            xstart_echo_server.write
              []
                memory > xs
                memory > xevent
                seq > @
                  seq
                    xevent.write ((((xthreading).xEvent)).apply)
                    xs.write (((xecho_server)).apply ((xevent)))
                    bogusForceDataize.write ((((xs).xstart)).apply)
                    bogusForceDataize.write ((((xevent).xwait)).apply)
                    bogusForceDataize.write ((((xevent).xclear)).apply)
                    bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                    (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xevent)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xusepoll.write FALSE
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_threads)) (((((xsupport).xthreading_setup)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xthreading_cleanup)).apply ((((unsupported)).apply (((xself).x_threads)))))
                xline_terminator_check.write
                  [xself xterm xserver_chunk]
                    memory > xs
                    memory > xc
                    memory > xevent
                    seq > @
                      seq
                        xevent.write ((((xthreading).xEvent)).apply)
                        xs.write (((xecho_server)).apply ((xevent)))
                        (((unsupported)).apply (((xs).xchunk_size)) ((xserver_chunk)))
                        bogusForceDataize.write ((((xs).xstart)).apply)
                        bogusForceDataize.write ((((xevent).xwait)).apply)
                        bogusForceDataize.write ((((xevent).xclear)).apply)
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                        xc.write (((xecho_client)).apply ((xterm)) (((xs).xport)))
                        bogusForceDataize.write ((((xc).xpush)).apply ("hello "))
                        bogusForceDataize.write ((((xc).xpush)).apply (("world".add (xterm))))
                        bogusForceDataize.write ((((xc).xpush)).apply (("I'm not dead yet!".add (xterm))))
                        bogusForceDataize.write ((((xc).xpush)).apply ((xSERVER_QUIT)))
                        (((unsupported)).apply (((xasyncore).xloop)) (((xself).xusepoll)) (300) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xs)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xcontents)) ((((unsupported)).apply ("hello world") ("I'm not dead yet!"))))
                xtest_line_terminator1.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xl)) ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xline_terminator_check)).apply ("n") ((xl)))
                xtest_line_terminator2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xl)) ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xline_terminator_check)).apply ("rn") ((xl)))
                xtest_line_terminator3.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xl)) ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xline_terminator_check)).apply ("qqq") ((xl)))
                xnumeric_terminator_check.write
                  [xself xtermlen]
                    memory > xc
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xevent)))) ((((xstart_echo_server)).apply)))
                        xc.write (((xecho_client)).apply ((xtermlen)) (((xs).xport)))
                        xdata.write "hello world, I'm not dead yet!n"
                        bogusForceDataize.write ((((xc).xpush)).apply ((xdata)))
                        bogusForceDataize.write ((((xc).xpush)).apply ((xSERVER_QUIT)))
                        (((unsupported)).apply (((xasyncore).xloop)) (((xself).xusepoll)) (300) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xs)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xcontents)) ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xtermlen)))))))))
                xtest_numeric_terminator1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xnumeric_terminator_check)).apply (1))
                xtest_numeric_terminator2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xnumeric_terminator_check)).apply (6))
                xtest_none_terminator.write
                  [xself]
                    memory > xc
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xevent)))) ((((xstart_echo_server)).apply)))
                        xc.write (((xecho_client)).apply ("None: is there a None literal in the EO language?") (((xs).xport)))
                        xdata.write "hello world, I'm not dead yet!n"
                        bogusForceDataize.write ((((xc).xpush)).apply ((xdata)))
                        bogusForceDataize.write ((((xc).xpush)).apply ((xSERVER_QUIT)))
                        (((unsupported)).apply (((xasyncore).xloop)) (((xself).xusepoll)) (300) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xs)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xcontents)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xbuffer)) ((xdata)))
                xtest_simple_producer.write
                  [xself]
                    memory > xc
                    memory > xp
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xevent)))) ((((xstart_echo_server)).apply)))
                        xc.write (((xecho_client)).apply ("n") (((xs).xport)))
                        xdata.write "hello worldnI'm not dead yet!n"
                        xp.write (((unsupported)).apply (((xasynchat).xsimple_producer)) (((xdata).add (xSERVER_QUIT))) (8))
                        bogusForceDataize.write ((((xc).xpush_with_producer)).apply ((xp)))
                        (((unsupported)).apply (((xasyncore).xloop)) (((xself).xusepoll)) (300) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xs)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xcontents)) ((((unsupported)).apply ("hello world") ("I'm not dead yet!"))))
                xtest_string_producer.write
                  [xself]
                    memory > xc
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xevent)))) ((((xstart_echo_server)).apply)))
                        xc.write (((xecho_client)).apply ("n") (((xs).xport)))
                        xdata.write "hello worldnI'm not dead yet!n"
                        bogusForceDataize.write ((((xc).xpush_with_producer)).apply (((xdata).add (xSERVER_QUIT))))
                        (((unsupported)).apply (((xasyncore).xloop)) (((xself).xusepoll)) (300) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xs)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xcontents)) ((((unsupported)).apply ("hello world") ("I'm not dead yet!"))))
                xtest_empty_line.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xevent)))) ((((xstart_echo_server)).apply)))
                        xc.write (((xecho_client)).apply ("n") (((xs).xport)))
                        bogusForceDataize.write ((((xc).xpush)).apply ("hello worldnnI'm not dead yet!n"))
                        bogusForceDataize.write ((((xc).xpush)).apply ((xSERVER_QUIT)))
                        (((unsupported)).apply (((xasyncore).xloop)) (((xself).xusepoll)) (300) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xs)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xcontents)) ((((unsupported)).apply ("hello world") ("") ("I'm not dead yet!"))))
                xtest_close_when_done.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xevent)))) ((((xstart_echo_server)).apply)))
                        (((unsupported)).apply (((xs).xstart_resend_event)) (((((xthreading).xEvent)).apply)))
                        xc.write (((xecho_client)).apply ("n") (((xs).xport)))
                        bogusForceDataize.write ((((xc).xpush)).apply ("hello worldnI'm not dead yet!n"))
                        bogusForceDataize.write ((((xc).xpush)).apply ((xSERVER_QUIT)))
                        bogusForceDataize.write ((((xc).xclose_when_done)).apply)
                        (((unsupported)).apply (((xasyncore).xloop)) (((xself).xusepoll)) (300) ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xs).xstart_resend_event).xset)).apply)
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xs)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xcontents)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply (((xs).xbuffer)))) (0))
                xtest_push.write
                  [xself]
                    memory > xc
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xevent)))) ((((xstart_echo_server)).apply)))
                        xc.write (((xecho_client)).apply ("n") (((xs).xport)))
                        xdata.write "bytesn"
                        bogusForceDataize.write ((((xc).xpush)).apply ((xdata)))
                        bogusForceDataize.write ((((xc).xpush)).apply ((((xbytearray)).apply ((xdata)))))
                        bogusForceDataize.write ((((xc).xpush)).apply ((((xmemoryview)).apply ((xdata)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xc).xpush)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xc).xpush)) ("unicode"))
                        bogusForceDataize.write ((((xc).xpush)).apply ((xSERVER_QUIT)))
                        (((unsupported)).apply (((xasyncore).xloop)) (((xself).xusepoll)) (300) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xsupport).xjoin_thread)) ((xs)) ((xTIMEOUT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xc).xcontents)) ((((unsupported)).apply ("bytes") ("bytes") ("bytes"))))
            (((unsupported)).apply ((xTestAsynchat)))
              xusepoll.write TRUE
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_blockingioerror.write
                [xself]
                  memory > xdispatcher
                  memory > xsock
                  seq > @
                    seq
                      xsock.write (((((xunittest).xmock).xMock)).apply)
                      (((unsupported)).apply ((((xsock).xrecv).xside_effect)) ((((xBlockingIOError)).apply (((xerrno).xEAGAIN)))))
                      xdispatcher.write ((((xasynchat).xasync_chat)).apply)
                      bogusForceDataize.write ((((xdispatcher).xset_socket)).apply ((xsock)))
                      bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xdispatcher).xdel_channel)))
                      (((unsupported)).apply (((((((xunittest).xmock).xpatch).xobject)).apply ((xdispatcher)) ("handle_error"))) ((xerror)))
                        bogusForceDataize.write ((((xdispatcher).xhandle_read)).apply)
                      bogusForceDataize.write ((((xself).xassertFalse)).apply (((xerror).xcalled)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_find_prefix_at_end.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xasynchat).xfind_prefix_at_end)).apply ("qwertyr") ("rn"))) (1))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xasynchat).xfind_prefix_at_end)).apply ("qwertydkjf") ("rn"))) (0))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_disallow_negative_terminator.write
                [xself]
                  memory > xclient
                  seq > @
                    seq
                      xclient.write ((((xasynchat).xasync_chat)).apply)
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xclient).xset_terminator)) ((1.neg)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)