159c159
<                           xmod.write ((((ximportlib).ximport_module)).apply (("test.encoded_modules.module_".add (xmodname))))
---
>                           xmod.write ((((ximportlib).ximport_module)).apply (("test.encoded_modules.module_".sub (xmodname))))
167c167
<                           (((unsupported)).apply ((((unsupported)).apply (((((ximp).xfind_module)).apply (("module_".add (xmod))) (((xself).xtest_path)))) (0))) ((xfd)))
---
>                           (((unsupported)).apply ((((unsupported)).apply (((((ximp).xfind_module)).apply (("module_".sub (xmod))) (((xself).xtest_path)))) (0))) ((xfd)))
178c178
<                             (((unsupported)).apply ((((unsupported)).apply ((xfp)) ((xfilename)) ((xinfo)))) (((((ximp).xfind_module)).apply (("module_".add (xmod))) (((xself).xtest_path)))))
---
>                             (((unsupported)).apply ((((unsupported)).apply ((xfp)) ((xfilename)) ((xinfo)))) (((((ximp).xfind_module)).apply (("module_".sub (xmod))) (((xself).xtest_path)))))
201c201
<                             (((unsupported)).apply ((((xopen)).apply (((xtemp_mod_name).add ".py")) ("w"))) ((xfile)))
---
>                             (((unsupported)).apply ((((xopen)).apply (((xtemp_mod_name).sub ".py")) ("w"))) ((xfile)))
208,209c208,209
<                             bogusForceDataize.write ((((xsupport).xunlink)).apply (((xtemp_mod_name).add ".py")))
<                             bogusForceDataize.write ((((xsupport).xunlink)).apply (((xtemp_mod_name).add ".pyc")))
---
>                             bogusForceDataize.write ((((xsupport).xunlink)).apply (((xtemp_mod_name).sub ".py")))
>                             bogusForceDataize.write ((((xsupport).xunlink)).apply (((xtemp_mod_name).sub ".pyc")))
233,234c233,234
<                         xtemp_mod_name.write ("test_imp_helper_".add (xdecoded_char))
<                         xtest_package_name.write ("test_imp_helper_package_".add (xdecoded_char))
---
>                         xtemp_mod_name.write ("test_imp_helper_".sub (xdecoded_char))
>                         xtest_package_name.write ("test_imp_helper_package_".sub (xdecoded_char))
239c239
<                             (((unsupported)).apply ((((xopen)).apply (((xtemp_mod_name).add ".py")) ("w"))) ((xfile)))
---
>                             (((unsupported)).apply ((((xopen)).apply (((xtemp_mod_name).sub ".py")) ("w"))) ((xfile)))
254c254
<                                 xmod.write ((((ximp).xload_source)).apply ((xtemp_mod_name)) (((xtemp_mod_name).add ".py")))
---
>                                 xmod.write ((((ximp).xload_source)).apply ((xtemp_mod_name)) (((xtemp_mod_name).sub ".py")))
260c260
<                                   xmod.write ((((ximp).xload_compiled)).apply ((xtemp_mod_name)) (((((ximp).xcache_from_source)).apply (((xtemp_mod_name).add ".py")))))
---
>                                   xmod.write ((((ximp).xload_compiled)).apply ((xtemp_mod_name)) (((((ximp).xcache_from_source)).apply (((xtemp_mod_name).sub ".py")))))
275,276c275,276
<                                 bogusForceDataize.write ((((xsupport).xunlink)).apply (((xtemp_mod_name).add (xext))))
<                                 bogusForceDataize.write ((((xsupport).xunlink)).apply (((xinit_file_name).add (xext))))
---
>                                 bogusForceDataize.write ((((xsupport).xunlink)).apply (((xtemp_mod_name).sub (xext))))
>                                 bogusForceDataize.write ((((xsupport).xunlink)).apply (((xinit_file_name).sub (xext))))
393c393
<                             xsource.write (((xsupport).xTESTFN).add ".py")
---
>                             xsource.write (((xsupport).xTESTFN).sub ".py")
414c414
<                             bogusForceDataize.write ((((ximp).xload_source)).apply ((xmodname)) (((x__file__).add "0")))
---
>                             bogusForceDataize.write ((((ximp).xload_source)).apply ((xmodname)) (((x__file__).sub "0")))
453c453
<                             xargs.write ((xinterp_args).add (((unsupported)).apply ("-c") ("import _imp; print(_imp.check_hash_based_pycs)")))
---
>                             xargs.write ((xinterp_args).sub (((unsupported)).apply ("-c") ("import _imp; print(_imp.check_hash_based_pycs)")))