memory > xlist
memory > xo
memory > xrandom
memory > xd
memory > xk
memory > xMyRef
memory > xthreading
memory > xD
memory > xC
memory > xcopy
memory > xth
memory > xII
memory > xAttributeError
memory > xc
memory > xstr
memory > xwr
memory > xc2
memory > xq
memory > xobjects
memory > xReferencesTestCase
memory > xrange
memory > xFinalizeTestCase
memory > xDummyKey
memory > x_testcapi
memory > xWeakMethodTestCase
memory > xcollections
memory > xMyObj
memory > xStopIteration
memory > xKeyError
memory > xMappingTestCase
memory > xFoo
memory > xkw
memory > xprint
memory > xTestBase
memory > xtype
memory > xset
memory > xrepr
memory > xint
memory > xException
memory > xr
memory > xhasattr
memory > xBogusError
memory > xtime
memory > xoperator
memory > xi
memory > xF
memory > xsuper
memory > xsupport
memory > xsys
memory > xbool
memory > xList
memory > xbytes
memory > xNotImplemented
memory > xDeprecationWarning
memory > xfloat
memory > xObjectWithDel
memory > xgc
memory > xargs
memory > xWeakValueDictionaryTestCase
memory > xdir
memory > xweakref
memory > xitem
memory > xgetattr
memory > xv
memory > xid
memory > xWeakKeyDictionaryTestCase
memory > xObject
memory > xiter
memory > xCallable
memory > xunittest
memory > xex
memory > xTarget
memory > xDummyValue
memory > xhash
memory > xnext
memory > xmap
memory > xn
memory > xobject
memory > xA
memory > xmapping_tests
memory > xMyFinalizer
memory > xReferenceError
memory > xkwargs
memory > xRefCycle
memory > xop
memory > xisinstance
memory > xc1
memory > xlen
memory > xdict
memory > xTypeError
memory > xJ
memory > x__name__
memory > xSubclassableWeakrefTestCase
[] > test_weakref
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_callback_gcs
        memory > xtest_arg_errors
        memory > xtest_proxy_reuse
        memory > xcreate_bound_method
        memory > xtest_proxy_deletion
        memory > xcreate_function
        memory > xtest_callbacks_protected
        memory > xcheck_shared_without_callback
        memory > xtest_multiple_selfref_callbacks
        memory > xtest_callback_attribute_after_deletion
        memory > xtest_threaded_weak_value_dict_copy
        memory > xtest_weak_keys
        memory > x__eq__
        memory > xcheck_basic_callback
        memory > xtest_trashcan_16602
        memory > xtest_make_weak_valued_dict_from_dict
        memory > x__repr__
        memory > x__call__
        memory > xtest_make_weak_valued_dict_repr
        memory > xtest_callback_in_cycle_1
        memory > xcheck_update
        memory > xtest_threaded_weak_value_dict_deepcopy
        memory > xtest_make_weak_valued_dict_misc
        memory > xtest_cfunction
        memory > xtest_alive
        memory > xtest_proxy_unicode
        memory > xtest_subclass_refs
        memory > xtest_gc_during_proxy_creation
        memory > xtest_weak_keyed_cascading_deletes
        memory > x_reference
        memory > xtest_make_weak_keyed_dict_from_dict
        memory > xtest_multiple_callbacks
        memory > xtest_finalize
        memory > xtest_no_cycles
        memory > xcheck_len_race
        memory > xtest_subclass_refs_dont_conflate_callbacks
        memory > x_collect_if_necessary
        memory > xcheck_weak_destroy_while_iterating
        memory > xtest_classes
        memory > xtest_basic_ref
        memory > xtest_constructor_kwargs
        memory > xother_method
        memory > xtest_weak_keyed_dict_popitem
        memory > xtest_make_weak_keyed_dict_from_weak_keyed_dict
        memory > xmake_weak_keyed_dict
        memory > xtest_proxy_ref
        memory > xcheck_len_cycles
        memory > xbar
        memory > xtest_weak_keyed_dict_setdefault
        memory > xcheck_iters
        memory > xtest_callback_when_method_dead
        memory > x_subclass
        memory > xtest_main
        memory > xtest_getweakrefs
        memory > xtest_weak_values
        memory > xrun_in_child
        memory > xcollect_in_thread
        memory > xtest_init
        memory > xtest_callback_in_cycle_4
        memory > xsome_method
        memory > xtest_shared_proxy_without_callback
        memory > xcheck_weak_destroy_and_mutate_while_iterating
        memory > xtest_getweakrefcount
        memory > xtest_weak_keyed_len_cycles
        memory > xlibreftest
        memory > xsetUp
        memory > x__ref
        memory > xtest_set_callback_attribute
        memory > x__lt__
        memory > xtest_proxy_div
        memory > xcheck_basic_ref
        memory > xtest_weak_valued_dict_popitem
        memory > xtest_weak_keyed_delitem
        memory > xtest_proxy_iter
        memory > xtest_weak_valued_dict_update
        memory > xtest_gc_during_ref_creation
        memory > xtest_weak_keyed_len_race
        memory > xtest_method_dead
        memory > xtest_make_weak_valued_dict_from_weak_valued_dict
        memory > xtest_weak_keys_destroy_while_iterating
        memory > xcheck_popitem
        memory > xtest_weak_keyed_dict_update
        memory > xmake_weak_valued_dict
        memory > xtest_make_weak_keyed_dict_repr
        memory > xtest_order
        memory > xtest_weak_valued_iters
        memory > xcheck_proxy
        memory > xtest_callbacks_on_callback
        memory > xtest_threaded_weak_valued_pop
        memory > xtest_callback_in_cycle_3
        memory > xtest_weak_values_destroy_while_iterating
        memory > xtest_threaded_weak_key_dict_copy
        memory > xcheck_gc_during_creation
        memory > xtest_callback_attribute
        memory > xtest_newstyle_number_ops
        memory > xref_from_del
        memory > xtest_remove_closure
        memory > xtest_shared_ref_without_callback
        memory > xcheck_weak_del_and_len_while_iterating
        memory > x__init__
        memory > xtest_callback_in_cycle_2
        memory > xtest_basic_callback
        memory > xtest_weak_valued_delitem
        memory > xtest_threaded_weak_valued_consistency
        memory > xtest_weak_valued_len_race
        memory > xtest_callable_proxy
        memory > xtest_ref_reuse
        memory > x__hash__
        memory > xtest_weak_keyed_bad_delitem
        memory > xtest_threaded_weak_key_dict_deepcopy
        memory > xtest_callback_when_object_dead
        memory > xtest_subclass_refs_with_slots
        memory > xtest_all_freed
        memory > xtest_subclass_refs_with_cycle
        memory > xcallback
        memory > xtest_ordering
        memory > xtest_subclass_refs_dont_replace_standard_refs
        memory > xCOUNT
        memory > xcheck_setdefault
        memory > xtest_weak_valued_len_cycles
        memory > xtest_object_dead
        memory > xtest_proxy_bool
        memory > xtest_proxy_matmul
        memory > xcheck_threaded_weak_dict_copy
        memory > xtype2test
        memory > x__test__
        memory > xtest_basic_proxy
        memory > xtest_weak_valued_dict_setdefault
        memory > xtest_hashing
        memory > x_global_var
        memory > xtest_sf_bug_840829
        memory > xtest_equality
        memory > xtest_ref_created_during_del
        memory > xtest_callback_in_cycle_resurrection
        memory > xtest_weak_keyed_iters
        memory > xtest_threaded_weak_valued_setdefault
        memory > xtest_proxy_index
        memory > xmethod
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xref_from_del.write "None: is there a None literal in the EO language?"
            x_global_var.write "foobar"
            (((unsupported)).apply)
              xmethod.write
                [xself]
                  seq > @
            (((unsupported)).apply)
              seq
                xbar.write "None: is there a None literal in the EO language?"
                x__call__.write
                  [xself xx]
                    seq > @
                      (((unsupported)).apply (((xself).xbar)) ((xx)))
            xcreate_function.write
              []
                memory > xf
                seq > @
                  seq
                    xf.write
                      []
                        seq > @
                    (((unsupported)).apply ((xf)))
            xcreate_bound_method.write
              []
                seq > @
                  (((unsupported)).apply (((((xC)).apply).xmethod)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xarg]
                    seq > @
                      (((unsupported)).apply (((xself).xarg)) ((xarg)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<Object %r>".mod ((xself).xarg))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xother)) ((xObject))).if
                          (((unsupported)).apply ((((xself).xarg).eq ((xother).xarg))))
                        (((unsupported)).apply ((xNotImplemented)))
                x__lt__.write
                  [xself xother]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xother)) ((xObject))).if
                          (((unsupported)).apply ((((xself).xarg).less ((xother).xarg))))
                        (((unsupported)).apply ((xNotImplemented)))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xhash)).apply (((xself).xarg)))))
                xsome_method.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (4))
                xother_method.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (5))
            (((unsupported)).apply)
              x__init__.write
                [xself]
                  seq > @
                    (((unsupported)).apply (((xself).xcycle)) ((xself)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcbcalled)) (0))
                xcallback.write
                  [xself xref]
                    seq > @
                      (((unsupported)).apply (((xself).xcbcalled)) (1))
            xcollect_in_thread.write
              [xperiod]
                memory > xcollect
                memory > xt
                memory > xplease_stop
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xplease_stop.write FALSE
                    xcollect.write
                      []
                        seq > @
                          while.
                            ((xplease_stop).not)
                            [unused]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xtime).xsleep)).apply ((xperiod)))
                                  bogusForceDataize.write ((((xgc).xcollect)).apply)
                    (((unsupported)).apply (((((xsupport).xdisable_gc)).apply)))
                      seq
                        xt.write (((unsupported)).apply (((xthreading).xThread)) ((xcollect)))
                        bogusForceDataize.write ((((xt).xstart)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                          seq
                            xplease_stop.write TRUE
                            bogusForceDataize.write ((((xt).xjoin)).apply)
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_basic_ref.write
                  [xself]
                    memory > xo
                    memory > xwr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_basic_ref)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xcheck_basic_ref)).apply ((xcreate_function)))
                        bogusForceDataize.write ((((xself).xcheck_basic_ref)).apply ((xcreate_bound_method)))
                        xo.write (((xC)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xo)))
                        bogusForceDataize.write (((xrepr)).apply ((xwr)))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        bogusForceDataize.write (((xrepr)).apply ((xwr)))
                xtest_basic_callback.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_basic_callback)).apply ((xC)))
                        bogusForceDataize.write ((((xself).xcheck_basic_callback)).apply ((xcreate_function)))
                        bogusForceDataize.write ((((xself).xcheck_basic_callback)).apply ((xcreate_bound_method)))
                xtest_cfunction.write
                  [xself]
                    memory > xcreate_cfunction
                    memory > xwr
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xcreate_cfunction.write ((x_testcapi).xcreate_cfunction)
                        xf.write (((xcreate_cfunction)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xwr)).apply)) ((xf)))
                        (((unsupported)).apply ((((unsupported)).apply ((xf)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xwr)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_basic_ref)).apply ((xcreate_cfunction)))
                        bogusForceDataize.write ((((xself).xcheck_basic_callback)).apply ((xcreate_cfunction)))
                xtest_multiple_callbacks.write
                  [xself]
                    memory > xo
                    memory > xref2
                    memory > xref1
                    seq > @
                      seq
                        xo.write (((xC)).apply)
                        xref1.write ((((xweakref).xref)).apply ((xo)) (((xself).xcallback)))
                        xref2.write ((((xweakref).xref)).apply ((xo)) (((xself).xcallback)))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xref1)).apply)) ("expected reference to be invalidated"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xref2)).apply)) ("expected reference to be invalidated"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xcbcalled)) (2) ("callback not called the right number of times"))
                xtest_multiple_selfref_callbacks.write
                  [xself]
                    memory > xref1
                    memory > xcallback
                    memory > xc
                    seq > @
                      seq
                        xcallback.write
                          [xobject xself]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xref)).apply)
                        xc.write (((xC)).apply)
                        (((unsupported)).apply (((xself).xref)) (((((xweakref).xref)).apply ((xc)) ((xcallback)))))
                        xref1.write ((((xweakref).xref)).apply ((xc)) ((xcallback)))
                        (((unsupported)).apply ((((unsupported)).apply ((xc)))))
                xtest_constructor_kwargs.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xC)).apply)
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xweakref).xref)) ((xc)) ("None: is there a None literal in the EO language?"))
                xtest_proxy_ref.write
                  [xself]
                    memory > xo
                    memory > xref2
                    memory > xcheck
                    memory > xref1
                    seq > @
                      seq
                        xo.write (((xC)).apply)
                        (((unsupported)).apply (((xo).xbar)) (1))
                        xref1.write ((((xweakref).xproxy)).apply ((xo)) (((xself).xcallback)))
                        xref2.write ((((xweakref).xproxy)).apply ((xo)) (((xself).xcallback)))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        xcheck.write
                          [xproxy]
                            seq > @
                              unsupported
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xReferenceError)) ((xcheck)) ((xref1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xReferenceError)) ((xcheck)) ((xref2)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xReferenceError)) ((xbool)) (((((xweakref).xproxy)).apply ((((xC)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xcbcalled)) (2))
                xcheck_basic_ref.write
                  [xself xfactory]
                    memory > xo
                    memory > xref
                    memory > xo2
                    seq > @
                      seq
                        xo.write (((xfactory)).apply)
                        xref.write ((((xweakref).xref)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((xref)).apply)) ("weak reference to live object should be live"))
                        xo2.write (((xref)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xo)) ((xo2)) ("<ref>() should return original object if live"))
                xcheck_basic_callback.write
                  [xself xfactory]
                    memory > xo
                    memory > xref
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcbcalled)) (0))
                        xo.write (((xfactory)).apply)
                        xref.write ((((xweakref).xref)).apply ((xo)) (((xself).xcallback)))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xcbcalled)) (1) ("callback did not properly set 'cbcalled'"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xref)).apply)) ("ref2 should be dead after deleting object reference"))
                xtest_ref_reuse.write
                  [xself]
                    memory > xo
                    memory > xproxy
                    memory > xref2
                    memory > xref1
                    seq > @
                      seq
                        xo.write (((xC)).apply)
                        xref1.write ((((xweakref).xref)).apply ((xo)))
                        xproxy.write ((((xweakref).xproxy)).apply ((xo)))
                        xref2.write ((((xweakref).xref)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xref1)) ((xref2)) ("reference object w/out callback should be re-used"))
                        xo.write (((xC)).apply)
                        xproxy.write ((((xweakref).xproxy)).apply ((xo)))
                        xref1.write ((((xweakref).xref)).apply ((xo)))
                        xref2.write ((((xweakref).xref)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xref1)) ((xref2)) ("reference object w/out callback should be re-used"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply ((xo)))) (2) ("wrong weak ref count for object"))
                        (((unsupported)).apply ((((unsupported)).apply ((xproxy)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply ((xo)))) (1) ("wrong weak ref count for object after deleting proxy"))
                xtest_proxy_reuse.write
                  [xself]
                    memory > xproxy2
                    memory > xo
                    memory > xref
                    memory > xproxy1
                    seq > @
                      seq
                        xo.write (((xC)).apply)
                        xproxy1.write ((((xweakref).xproxy)).apply ((xo)))
                        xref.write ((((xweakref).xref)).apply ((xo)))
                        xproxy2.write ((((xweakref).xproxy)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xproxy1)) ((xproxy2)) ("proxy object w/out callback should have been re-used"))
                xtest_basic_proxy.write
                  [xself]
                    memory > xp2
                    memory > xo
                    memory > xL
                    memory > xL2
                    memory > xp
                    memory > xL3
                    memory > xp3
                    seq > @
                      seq
                        xo.write (((xC)).apply)
                        bogusForceDataize.write ((((xself).xcheck_proxy)).apply ((xo)) (((((xweakref).xproxy)).apply ((xo)))))
                        xL.write ((((xcollections).xUserList)).apply)
                        xp.write ((((xweakref).xproxy)).apply ((xL)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xp)) ("proxy for empty UserList should be false"))
                        bogusForceDataize.write ((((xp).xappend)).apply (12))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xL)))) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xp)) ("proxy for non-empty UserList should be true"))
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((((unsupported)).apply)))) ((((unsupported)).apply (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xL)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xp)))) (2))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (3) ((xp)) ("proxy didn't support __contains__() properly"))
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) (1))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xL)) (1))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) (1))) (5))
                        xL2.write ((((xcollections).xUserList)).apply ((xL)))
                        xp2.write ((((xweakref).xproxy)).apply ((xL2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xp)) ((xp2)))
                        xL3.write ((((xcollections).xUserList)).apply ((((xrange)).apply (10))))
                        xp3.write ((((xweakref).xproxy)).apply ((xL3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xL3)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xp3)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xL3)) ((((unsupported)).apply (5))))) ((((unsupported)).apply ((xp3)) ((((unsupported)).apply (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xL3)) ((((unsupported)).apply (5))))) ((((unsupported)).apply ((xp3)) ((((unsupported)).apply (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xL3)) ((((unsupported)).apply (2) (5))))) ((((unsupported)).apply ((xp3)) ((((unsupported)).apply (2) (5))))))
                xtest_proxy_unicode.write
                  [xself]
                    memory > x__str__
                    memory > xinstance
                    memory > x__bytes__
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("string"))
                            x__bytes__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("bytes"))
                        xinstance.write (((xC)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("__bytes__") ((((xdir)).apply (((((xweakref).xproxy)).apply ((xinstance)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply (((((xweakref).xproxy)).apply ((xinstance)))))) ("bytes"))
                xtest_proxy_index.write
                  [xself]
                    memory > x__index__
                    memory > xo
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__index__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (10))
                        xo.write (((xC)).apply)
                        xp.write ((((xweakref).xproxy)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoperator).xindex)).apply ((xp)))) (10))
                xtest_proxy_div.write
                  [xself]
                    memory > x__ifloordiv__
                    memory > x__floordiv__
                    memory > xo
                    memory > xp
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__floordiv__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (42))
                            x__ifloordiv__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (21))
                        xo.write (((xC)).apply)
                        xp.write ((((xweakref).xproxy)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) (5))) (42))
                        (((unsupported)).apply ((xp)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xp)) (21))
                xtest_proxy_matmul.write
                  [xself]
                    memory > xo
                    memory > x__rmatmul__
                    memory > xp
                    memory > x__matmul__
                    memory > x__imatmul__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__matmul__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (1729))
                            x__rmatmul__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((163.neg)))
                            x__imatmul__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply (561))
                        xo.write (((xC)).apply)
                        xp.write ((((xweakref).xproxy)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) (5))) (1729))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (5) ((xp)))) ((163.neg)))
                        (((unsupported)).apply ((xp)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xp)) (561))
                xtest_shared_ref_without_callback.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_shared_without_callback)).apply (((xweakref).xref)))
                xtest_shared_proxy_without_callback.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_shared_without_callback)).apply (((xweakref).xproxy)))
                xcheck_shared_without_callback.write
                  [xself xmakeref]
                    memory > xp1
                    memory > xo
                    memory > xp2
                    seq > @
                      seq
                        xo.write (((xObject)).apply (1))
                        xp1.write (((xmakeref)).apply ((xo)) ("None: is there a None literal in the EO language?"))
                        xp2.write (((xmakeref)).apply ((xo)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xp1)) ((xp2)) ("both callbacks were None in the C API"))
                        (((unsupported)).apply ((((unsupported)).apply ((xp1)) ((xp2)))))
                        xp1.write (((xmakeref)).apply ((xo)))
                        xp2.write (((xmakeref)).apply ((xo)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xp1)) ((xp2)) ("callbacks were NULL, None in the C API"))
                        (((unsupported)).apply ((((unsupported)).apply ((xp1)) ((xp2)))))
                        xp1.write (((xmakeref)).apply ((xo)))
                        xp2.write (((xmakeref)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xp1)) ((xp2)) ("both callbacks were NULL in the C API"))
                        (((unsupported)).apply ((((unsupported)).apply ((xp1)) ((xp2)))))
                        xp1.write (((xmakeref)).apply ((xo)) ("None: is there a None literal in the EO language?"))
                        xp2.write (((xmakeref)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xp1)) ((xp2)) ("callbacks were None, NULL in the C API"))
                xtest_callable_proxy.write
                  [xself]
                    memory > xo
                    memory > xref1
                    seq > @
                      seq
                        xo.write (((xCallable)).apply)
                        xref1.write ((((xweakref).xproxy)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xcheck_proxy)).apply ((xo)) ((xref1)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xref1)))) (((xweakref).xCallableProxyType)) ("proxy is not of callable type"))
                        bogusForceDataize.write (((xref1)).apply ("twinkies!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xo).xbar)) ("twinkies!") ("call through proxy not passed through to original"))
                        (((unsupported)).apply ((xref1)) ("Splat."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xo).xbar)) ("Splat.") ("call through proxy not passed through to original"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xref1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xref1)) (1) (2) (3))
                xcheck_proxy.write
                  [xself xo xproxy]
                    seq > @
                      seq
                        (((unsupported)).apply (((xo).xfoo)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xproxy).xfoo)) (1) ("proxy does not reflect attribute addition"))
                        (((unsupported)).apply (((xo).xfoo)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xproxy).xfoo)) (2) ("proxy does not reflect attribute modification"))
                        (((unsupported)).apply ((((unsupported)).apply (((xo).xfoo)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xproxy)) ("foo"))) ("proxy does not reflect attribute removal"))
                        (((unsupported)).apply (((xproxy).xfoo)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xo).xfoo)) (1) ("object does not reflect attribute addition via proxy"))
                        (((unsupported)).apply (((xproxy).xfoo)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xo).xfoo)) (2) ("object does not reflect attribute modification via proxy"))
                        (((unsupported)).apply ((((unsupported)).apply (((xproxy).xfoo)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xo)) ("foo"))) ("object does not reflect attribute removal via proxy"))
                xtest_proxy_deletion.write
                  [xself]
                    memory > xresult
                    memory > xf
                    memory > x__delitem__
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            xresult.write "None: is there a None literal in the EO language?"
                            x__delitem__.write
                              [xself xaccessor]
                                seq > @
                                  (((unsupported)).apply (((xself).xresult)) ((xaccessor)))
                        xg.write (((xFoo)).apply)
                        xf.write ((((xweakref).xproxy)).apply ((xg)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xf)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xresult)) (0))
                xtest_proxy_bool.write
                  [xself]
                    memory > xlyst
                    seq > @
                      seq
                        (((unsupported)).apply ((xlist)))
                        xlyst.write (((xList)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbool)).apply (((((xweakref).xproxy)).apply ((xlyst)))))) ((((xbool)).apply ((xlyst)))))
                xtest_proxy_iter.write
                  [xself]
                    memory > xp
                    memory > xobj
                    memory > x__iter__
                    seq > @
                      seq
                        xobj.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply)
                          x__iter__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)).apply)
                                  (((unsupported)).apply ((((unsupported)).apply ((xobj)))))
                                  (((unsupported)).apply ((xNotImplemented)))
                        xobj.write (((xMyObj)).apply)
                        xp.write ((((xweakref).xproxy)).apply ((xobj)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ("blech") ((xp)))
                xtest_getweakrefcount.write
                  [xself]
                    memory > xo
                    memory > xproxy1
                    memory > xproxy2
                    memory > xref1
                    memory > xref2
                    seq > @
                      seq
                        xo.write (((xC)).apply)
                        xref1.write ((((xweakref).xref)).apply ((xo)))
                        xref2.write ((((xweakref).xref)).apply ((xo)) (((xself).xcallback)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply ((xo)))) (2) ("got wrong number of weak reference objects"))
                        xproxy1.write ((((xweakref).xproxy)).apply ((xo)))
                        xproxy2.write ((((xweakref).xproxy)).apply ((xo)) (((xself).xcallback)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply ((xo)))) (4) ("got wrong number of weak reference objects"))
                        (((unsupported)).apply ((((unsupported)).apply ((xref1)) ((xref2)) ((xproxy1)) ((xproxy2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply ((xo)))) (0) ("weak reference objects not unlinked from referent when discarded."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply (1))) (0) ("got wrong number of weak reference objects for int"))
                xtest_getweakrefs.write
                  [xself]
                    memory > xo
                    memory > xref2
                    memory > xref1
                    seq > @
                      seq
                        xo.write (((xC)).apply)
                        xref1.write ((((xweakref).xref)).apply ((xo)) (((xself).xcallback)))
                        xref2.write ((((xweakref).xref)).apply ((xo)) (((xself).xcallback)))
                        (((unsupported)).apply ((((unsupported)).apply ((xref1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefs)).apply ((xo)))) ((((unsupported)).apply ((xref2)))) ("list of refs does not match"))
                        xo.write (((xC)).apply)
                        xref1.write ((((xweakref).xref)).apply ((xo)) (((xself).xcallback)))
                        xref2.write ((((xweakref).xref)).apply ((xo)) (((xself).xcallback)))
                        (((unsupported)).apply ((((unsupported)).apply ((xref2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefs)).apply ((xo)))) ((((unsupported)).apply ((xref1)))) ("list of refs does not match"))
                        (((unsupported)).apply ((((unsupported)).apply ((xref1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefs)).apply ((xo)))) ((((unsupported)).apply)) ("list of refs not cleared"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefs)).apply (1))) ((((unsupported)).apply)) ("list of refs does not match for int"))
                xtest_newstyle_number_ops.write
                  [xself]
                    memory > xp
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xfloat)))
                        xf.write (((xF)).apply (2.0))
                        xp.write ((((xweakref).xproxy)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).add 1.0)) (3.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((1.0.add (xp))) (3.0))
                xtest_callbacks_protected.write
                  [xself]
                    memory > xencapsulate
                    memory > xdata
                    memory > xremove
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        xdata.write (((unsupported)).apply)
                        xremove.write
                          [xk]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xk)))))))
                        xencapsulate.write
                          []
                            memory > xf
                            seq > @
                              seq
                                xf.write (((unsupported)).apply ((((unsupported)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply ((xdata)) (((((xweakref).xref)).apply ((xf)) ((xremove)))))) ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply ((xBogusError)))
                        (((unsupported)).apply ((xBogusError)))
                          bogusForceDataize.write (((xencapsulate)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("exception not properly restored"))
                        (((unsupported)).apply ((xBogusError)))
                          bogusForceDataize.write (((xencapsulate)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("exception not properly restored"))
                xtest_sf_bug_840829.write
                  [xself]
                    memory > xc
                    memory > xc1
                    memory > xwr
                    memory > xc2
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                        xc.write (((xC)).apply)
                        xwr.write ((((xweakref).xref)).apply ((xc)) ((((unsupported)).apply (((((xgc).xcollect)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xc)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xwr)))))
                        xc1.write (((xC)).apply)
                        (((unsupported)).apply (((xc1).xi)) ((((xC)).apply)))
                        xwr.write ((((xweakref).xref)).apply (((xc1).xi)) ((((unsupported)).apply (((((xgc).xcollect)).apply)))))
                        xc2.write (((xC)).apply)
                        (((unsupported)).apply (((xc2).xc1)) ((xc1)))
                        (((unsupported)).apply ((((unsupported)).apply ((xc1)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xc2)))))
                xtest_callback_in_cycle_1.write
                  [xself]
                    memory > xacallback
                    memory > xI
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                        (((unsupported)).apply ((xobject)))
                          xacallback.write
                            [xself xignore]
                              seq > @
                                unsupported
                        xI.write (((xII)).apply)
                        (((unsupported)).apply (((xI).xJ)) ((xJ)))
                        (((unsupported)).apply (((xI).xwr)) (((((xweakref).xref)).apply ((xJ)) (((xI).xacallback)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xI)) ((xJ)) ((xII)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_callback_in_cycle_2.write
                  [xself]
                    memory > xacallback
                    memory > xI
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                        (((unsupported)).apply)
                          xacallback.write
                            [xself xignore]
                              seq > @
                                unsupported
                        xI.write (((xII)).apply)
                        (((unsupported)).apply (((xI).xJ)) ((xJ)))
                        (((unsupported)).apply (((xI).xwr)) (((((xweakref).xref)).apply ((xJ)) (((xI).xacallback)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xI)) ((xJ)) ((xII)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_callback_in_cycle_3.write
                  [xself]
                    memory > xcb
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          xcb.write
                            [xself xignore]
                              seq > @
                                seq
                                  unsupported
                                  unsupported
                                  unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xc1)) ((xc2)))) ((((unsupported)).apply ((((xC)).apply)) ((((xC)).apply)))))
                        (((unsupported)).apply (((xc2).xme)) ((xc2)))
                        (((unsupported)).apply (((xc2).xc1)) ((xc1)))
                        (((unsupported)).apply (((xc2).xwr)) (((((xweakref).xref)).apply ((xc1)) (((xc2).xcb)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xc1)) ((xc2)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_callback_in_cycle_4.write
                  [xself]
                    memory > xcb
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                          xcb.write
                            [xself xignore]
                              seq > @
                                seq
                                  unsupported
                                  unsupported
                                  unsupported
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xc1)) ((xc2)))) ((((unsupported)).apply ((((xD)).apply)) ((((xC)).apply)))))
                        (((unsupported)).apply (((xc2).xme)) ((xc2)))
                        (((unsupported)).apply (((xc2).xc1)) ((xc1)))
                        (((unsupported)).apply (((xc2).xwr)) (((((xweakref).xref)).apply ((xc1)) (((xc2).xcb)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xc1)) ((xc2)) ((xC)) ((xD)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_callback_in_cycle_resurrection.write
                  [xself]
                    memory > xwr
                    memory > xalist
                    memory > xacallback
                    memory > x__init__
                    memory > xC_went_away
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xalist.write (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xattribute)) ((xvalue)))
                            xacallback.write
                              [xself xignore]
                                seq > @
                                  bogusForceDataize.write ((((xalist).xappend)).apply (((xself).xc)))
                        (((unsupported)).apply ((((unsupported)).apply ((xc1)) ((xc2)))) ((((unsupported)).apply ((((xC)).apply (1))) ((((xC)).apply (2))))))
                        (((unsupported)).apply (((xc1).xc)) ((xc2)))
                        (((unsupported)).apply (((xc2).xc)) ((xc1)))
                        (((unsupported)).apply (((xc1).xwr)) (((((xweakref).xref)).apply ((xc2)) (((xc1).xacallback)))))
                        (((unsupported)).apply (((xc2).xwr)) (((((xweakref).xref)).apply ((xc1)) (((xc2).xacallback)))))
                        xC_went_away.write
                          [xignore]
                            seq > @
                              bogusForceDataize.write ((((xalist).xappend)).apply ("C went away"))
                        xwr.write ((((xweakref).xref)).apply ((xC)) ((xC_went_away)))
                        (((unsupported)).apply ((((unsupported)).apply ((xc1)) ((xc2)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xalist)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xalist)) ((((unsupported)).apply ("C went away"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xalist)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xalist)) ((((unsupported)).apply)))
                xtest_callbacks_on_callback.write
                  [xself]
                    memory > xcb
                    memory > xalist
                    memory > xsafe_callback
                    memory > xcallback
                    memory > xexternal_wr
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xalist.write (((unsupported)).apply)
                        xsafe_callback.write
                          [xignore]
                            seq > @
                              bogusForceDataize.write ((((xalist).xappend)).apply ("safe_callback called"))
                        (((unsupported)).apply ((xobject)))
                          xcb.write
                            [xself xignore]
                              seq > @
                                bogusForceDataize.write ((((xalist).xappend)).apply ("cb called"))
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xd)))) ((((unsupported)).apply ((((xC)).apply)) ((((xC)).apply)))))
                        (((unsupported)).apply (((xc).xother)) ((xd)))
                        (((unsupported)).apply (((xd).xother)) ((xc)))
                        xcallback.write ((xc).xcb)
                        (((unsupported)).apply (((xc).xwr)) (((((xweakref).xref)).apply ((xd)) ((xcallback)))))
                        (((unsupported)).apply (((xd).xwr)) (((((xweakref).xref)).apply ((xcallback)) (((xd).xcb)))))
                        xexternal_wr.write ((((xweakref).xref)).apply ((xcallback)) ((xsafe_callback)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xexternal_wr)).apply)) ((xcallback)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcallback)) ((xc)) ((xd)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xalist)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xalist)) ((((unsupported)).apply ("safe_callback called"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexternal_wr)).apply)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xalist)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xalist)) ((((unsupported)).apply)))
                xtest_gc_during_ref_creation.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_gc_during_creation)).apply (((xweakref).xref)))
                xtest_gc_during_proxy_creation.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_gc_during_creation)).apply (((xweakref).xproxy)))
                xcheck_gc_during_creation.write
                  [xself xmakeref]
                    memory > xcallback
                    memory > xreferenced
                    memory > xthresholds
                    memory > xa
                    seq > @
                      seq
                        xthresholds.write ((((xgc).xget_threshold)).apply)
                        bogusForceDataize.write ((((xgc).xset_threshold)).apply (1) (1) (1))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply)
                        xcallback.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xreferenced.write (((xA)).apply)
                        xa.write (((xA)).apply)
                        (((unsupported)).apply (((xa).xa)) ((xa)))
                        (((unsupported)).apply (((xa).xwr)) ((((xmakeref)).apply ((xreferenced)))))
                        (((unsupported)).apply)
                          seq
                            xa.write (((xA)).apply)
                            bogusForceDataize.write ((((xweakref).xref)).apply ((xreferenced)) ((xcallback)))
                          bogusForceDataize.write ((((xgc).xset_threshold)).apply ((((unsupported)).apply ((xthresholds)))))
                xtest_ref_created_during_del.write
                  [xself]
                    memory > x__del__
                    memory > xw
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          x__del__.write
                            [xself]
                              memory > xref_from_del
                              seq > @
                                seq
                                  (((unsupported)).apply)
                                  xref_from_del.write ((((xweakref).xref)).apply ((xself)))
                        xw.write (((xTarget)).apply)
                xtest_init.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write ((((xweakref).xref)).apply ((xException)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xr).x__init__)) (0) (0) (0) (0) (0))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_classes.write
                  [xself]
                    memory > xl
                    memory > xA
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                        xl.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xweakref).xref)).apply ((xint)))
                        xa.write ((((xweakref).xref)).apply ((xA)) (((xl).xappend)))
                        xA.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xl)) ((((unsupported)).apply ((xa)))))
                xtest_equality.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xz
                    memory > xb
                    memory > xx
                    memory > xy
                    memory > xa
                    seq > @
                      seq
                        xx.write (((xObject)).apply (1))
                        xy.write (((xObject)).apply (1))
                        xz.write (((xObject)).apply (2))
                        xa.write ((((xweakref).xref)).apply ((xx)))
                        xb.write ((((xweakref).xref)).apply ((xy)))
                        xc.write ((((xweakref).xref)).apply ((xz)))
                        xd.write ((((xweakref).xref)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).eq (xb))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xa).neq (xb))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xa).eq (xc))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).neq (xc))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).eq (xd))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xa).neq (xd))))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((xr)) ((((unsupported)).apply ((xa)) ((xb)) ((xc)))))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xr)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xa).eq (xb))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).neq (xb))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xa).eq (xc))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).neq (xc))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).eq (xd))) ((((unsupported)).apply ((xa)) ((xd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).neq (xd))) ((((unsupported)).apply ((xa)) ((xd)))))
                xtest_ordering.write
                  [xself]
                    memory > xx
                    memory > xy
                    memory > xa
                    memory > xb
                    memory > xops
                    seq > @
                      seq
                        xops.write (((unsupported)).apply (((xoperator).xlt)) (((xoperator).xgt)) (((xoperator).xle)) (((xoperator).xge)))
                        xx.write (((xObject)).apply (1))
                        xy.write (((xObject)).apply (1))
                        xa.write ((((xweakref).xref)).apply ((xx)))
                        xb.write ((((xweakref).xref)).apply ((xy)))
                        (((unsupported)).apply ((xop)) ((xops)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xop)) ((xa)) ((xb)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        (((unsupported)).apply ((xop)) ((xops)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xop)) ((xa)) ((xb)))
                xtest_hashing.write
                  [xself]
                    memory > xx
                    memory > xy
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xx.write (((xObject)).apply (42))
                        xy.write (((xObject)).apply (42))
                        xa.write ((((xweakref).xref)).apply ((xx)))
                        xb.write ((((xweakref).xref)).apply ((xy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xa)))) ((((xhash)).apply (42))))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xa)))) ((((xhash)).apply (42))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xhash)) ((xb)))
                xtest_trashcan_16602.write
                  [xself]
                    memory > xc
                    memory > x__init__
                    memory > xd
                    memory > xroot
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__init__.write
                            [xself xparent]
                              memory > xwself
                              memory > xcb
                              seq > @
                                seq
                                  ((xparent).not).if
                                    (((unsupported)).apply)
                                  xwself.write ((((xweakref).xref)).apply ((xself)))
                                  xcb.write
                                    [xwparent]
                                      memory > xo
                                      seq > @
                                        xo.write (((xwself)).apply)
                                  (((unsupported)).apply (((xself).xwparent)) (((((xweakref).xref)).apply ((xparent)) ((xcb)))))
                        xd.write ((((xweakref).xWeakKeyDictionary)).apply)
                        (((unsupported)).apply ((xroot)) ((xc)) ((((xC)).apply ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (100))))
                          (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xc)))) ((xc)) ((((xC)).apply ((xc)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xroot)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_callback_attribute.write
                  [xself]
                    memory > xx
                    memory > xcallback
                    memory > xref2
                    memory > xref1
                    seq > @
                      seq
                        xx.write (((xObject)).apply (1))
                        xcallback.write (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xref1.write ((((xweakref).xref)).apply ((xx)) ((xcallback)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xref1).x__callback__)) ((xcallback)))
                        xref2.write ((((xweakref).xref)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xref2).x__callback__)))
                xtest_callback_attribute_after_deletion.write
                  [xself]
                    memory > xx
                    memory > xref
                    seq > @
                      seq
                        xx.write (((xObject)).apply (1))
                        xref.write ((((xweakref).xref)).apply ((xx)) (((xself).xcallback)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xref).x__callback__)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xref).x__callback__)))
                xtest_set_callback_attribute.write
                  [xself]
                    memory > xx
                    memory > xcallback
                    memory > xref1
                    seq > @
                      seq
                        xx.write (((xObject)).apply (1))
                        xcallback.write (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        xref1.write ((((xweakref).xref)).apply ((xx)) ((xcallback)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xref1).x__callback__)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                xtest_callback_gcs.write
                  [xself]
                    memory > x__del__
                    memory > xx
                    memory > xref1
                    seq > @
                      seq
                        (((unsupported)).apply ((xObject)))
                          x__del__.write
                            [xself]
                              seq > @
                        xx.write (((xObjectWithDel)).apply (1))
                        xref1.write ((((xweakref).xref)).apply ((xx)) ((((unsupported)).apply (((((xsupport).xgc_collect)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
            (((unsupported)).apply ((xTestBase)))
              seq
                xtest_subclass_refs.write
                  [xself]
                    memory > xmr
                    memory > xo
                    memory > x__init__
                    memory > x__call__
                    seq > @
                      seq
                        (((unsupported)).apply (((xweakref).xref)))
                          seq
                            x__init__.write
                              [xself xob xcallback xvalue]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                                    bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xob)) ((xcallback)))
                            x__call__.write
                              [xself]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xcalled)) (TRUE))
                                    (((unsupported)).apply (((((((xsuper)).apply).x__call__)).apply)))
                        xo.write (((xObject)).apply ("foo"))
                        xmr.write (((unsupported)).apply ((xMyRef)) ((xo)) (24))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xmr)).apply)) ((xo)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmr).xcalled)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmr).xvalue)) (24))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xmr)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmr).xcalled)))
                xtest_subclass_refs_dont_replace_standard_refs.write
                  [xself]
                    memory > xo
                    memory > xrefs
                    memory > xr1
                    memory > xr2
                    memory > xr3
                    seq > @
                      seq
                        (((unsupported)).apply (((xweakref).xref)))
                        xo.write (((xObject)).apply (42))
                        xr1.write (((xMyRef)).apply ((xo)))
                        xr2.write ((((xweakref).xref)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xr1)) ((xr2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefs)).apply ((xo)))) ((((unsupported)).apply ((xr2)) ((xr1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply ((xo)))) (2))
                        xr3.write (((xMyRef)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply ((xo)))) (3))
                        xrefs.write ((((xweakref).xgetweakrefs)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xrefs)))) (3))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xr2)) ((((unsupported)).apply ((xrefs)) (0))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xr1)) ((((unsupported)).apply ((xrefs)) ((((unsupported)).apply (1))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xr3)) ((((unsupported)).apply ((xrefs)) ((((unsupported)).apply (1))))))
                xtest_subclass_refs_dont_conflate_callbacks.write
                  [xself]
                    memory > xrefs
                    memory > xo
                    memory > xr1
                    memory > xr2
                    seq > @
                      seq
                        (((unsupported)).apply (((xweakref).xref)))
                        xo.write (((xObject)).apply (42))
                        xr1.write (((xMyRef)).apply ((xo)) ((xid)))
                        xr2.write (((xMyRef)).apply ((xo)) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xr1)) ((xr2)))
                        xrefs.write ((((xweakref).xgetweakrefs)).apply ((xo)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xr1)) ((xrefs)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xr2)) ((xrefs)))
                xtest_subclass_refs_with_slots.write
                  [xself]
                    memory > xmeth
                    memory > xo
                    memory > xr
                    memory > x__slots__
                    memory > x__init__
                    memory > x__new__
                    seq > @
                      seq
                        (((unsupported)).apply (((xweakref).xref)))
                          seq
                            x__slots__.write (((unsupported)).apply ("slot1") ("slot2"))
                            x__new__.write
                              [xtype xob xcallback xslot1 xslot2]
                                seq > @
                                  (((unsupported)).apply ((((((xweakref).xref).x__new__)).apply ((xtype)) ((xob)) ((xcallback)))))
                            x__init__.write
                              [xself xob xcallback xslot1 xslot2]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xslot1)) ((xslot1)))
                                    (((unsupported)).apply (((xself).xslot2)) ((xslot2)))
                            xmeth.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xself).xslot1).add ((xself).xslot2))))
                        xo.write (((xObject)).apply (42))
                        xr.write (((xMyRef)).apply ((xo)) ("None: is there a None literal in the EO language?") ("abc") ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xr).xslot1)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xr).xslot2)) ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xr).xmeth)).apply)) ("abcdef"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xr)) ("__dict__"))))
                xtest_subclass_refs_with_cycle.write
                  [xself]
                    memory > xo
                    memory > xcallback
                    memory > xr1
                    memory > xr2
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xweakref).xref)))
                        xcallback.write
                          [xw]
                            seq > @
                              (((unsupported)).apply (((xself).xcbcalled)) (1))
                        xo.write (((xC)).apply)
                        xr1.write (((xMyRef)).apply ((xo)) ((xcallback)))
                        (((unsupported)).apply (((xr1).xo)) ((xo)))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xr1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xcbcalled)) (0))
                        xo.write (((xC)).apply)
                        xr1.write (((xMyRef)).apply ((xo)) ((xcallback)))
                        xr2.write (((xMyRef)).apply ((xo)) ((xcallback)))
                        (((unsupported)).apply (((xr1).xr)) ((xr2)))
                        (((unsupported)).apply (((xr2).xo)) ((xo)))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xr2)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xr1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xcbcalled)) (0))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                x_subclass.write
                  [xself]
                    memory > xsome_method
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xObject)))
                          xsome_method.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (6))
                        (((unsupported)).apply ((xC)))
                xtest_alive.write
                  [xself]
                    memory > xo
                    memory > xr
                    seq > @
                      seq
                        xo.write (((xObject)).apply (1))
                        xr.write ((((xweakref).xWeakMethod)).apply (((xo).xsome_method)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xr)) (((xweakref).xReferenceType)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xr)).apply)) ((((xtype)).apply (((xo).xsome_method)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xr)).apply).x__self__)) ((xo)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xr)).apply).x__func__)) ((((xo).xsome_method).x__func__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xr)).apply)).apply)) (4))
                xtest_object_dead.write
                  [xself]
                    memory > xo
                    memory > xr
                    seq > @
                      seq
                        xo.write (((xObject)).apply (1))
                        xr.write ((((xweakref).xWeakMethod)).apply (((xo).xsome_method)))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xr)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_method_dead.write
                  [xself]
                    memory > xo
                    memory > xC
                    memory > xr
                    seq > @
                      seq
                        xC.write ((((xself).x_subclass)).apply)
                        xo.write (((xC)).apply (1))
                        xr.write ((((xweakref).xWeakMethod)).apply (((xo).xsome_method)))
                        (((unsupported)).apply ((((unsupported)).apply (((xC).xsome_method)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xr)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_callback_when_object_dead.write
                  [xself]
                    memory > xC
                    memory > xcb
                    memory > xo
                    memory > xr
                    memory > xcalls
                    seq > @
                      seq
                        xC.write ((((xself).x_subclass)).apply)
                        xcalls.write (((unsupported)).apply)
                        xcb.write
                          [xarg]
                            seq > @
                              bogusForceDataize.write ((((xcalls).xappend)).apply ((xarg)))
                        xo.write (((xC)).apply (1))
                        xr.write ((((xweakref).xWeakMethod)).apply (((xo).xsome_method)) ((xcb)))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalls)) ((((unsupported)).apply ((xr)))))
                        (((unsupported)).apply (((xC).xsome_method)) (((xObject).xsome_method)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalls)) ((((unsupported)).apply ((xr)))))
                xtest_callback_when_method_dead.write
                  [xself]
                    memory > xC
                    memory > xcb
                    memory > xo
                    memory > xr
                    memory > xcalls
                    seq > @
                      seq
                        xC.write ((((xself).x_subclass)).apply)
                        xcalls.write (((unsupported)).apply)
                        xcb.write
                          [xarg]
                            seq > @
                              bogusForceDataize.write ((((xcalls).xappend)).apply ((xarg)))
                        xo.write (((xC)).apply (1))
                        xr.write ((((xweakref).xWeakMethod)).apply (((xo).xsome_method)) ((xcb)))
                        (((unsupported)).apply ((((unsupported)).apply (((xC).xsome_method)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalls)) ((((unsupported)).apply ((xr)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalls)) ((((unsupported)).apply ((xr)))))
                xtest_no_cycles.write
                  [xself]
                    memory > xo
                    memory > xr
                    memory > xwr
                    memory > xcb
                    seq > @
                      (((unsupported)).apply)
                        xo.write (((xObject)).apply (1))
                        xcb.write
                          [x_]
                            seq > @
                        xr.write ((((xweakref).xWeakMethod)).apply (((xo).xsome_method)) ((xcb)))
                        xwr.write ((((xweakref).xref)).apply ((xr)))
                        (((unsupported)).apply ((((unsupported)).apply ((xr)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xwr)).apply)) ("None: is there a None literal in the EO language?"))
                xtest_equality.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xz
                    memory > xrefs
                    memory > xb
                    memory > x_ne
                    memory > xf
                    memory > xx
                    memory > x_eq
                    memory > xe
                    memory > xy
                    memory > xa
                    seq > @
                      seq
                        x_eq.write
                          [xa xb]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).eq (xb))))
                                bogusForceDataize.write ((((xself).xassertFalse)).apply (((xa).neq (xb))))
                        x_ne.write
                          [xa xb]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((xa).neq (xb))))
                                bogusForceDataize.write ((((xself).xassertFalse)).apply (((xa).eq (xb))))
                        xx.write (((xObject)).apply (1))
                        xy.write (((xObject)).apply (1))
                        xa.write ((((xweakref).xWeakMethod)).apply (((xx).xsome_method)))
                        xb.write ((((xweakref).xWeakMethod)).apply (((xy).xsome_method)))
                        xc.write ((((xweakref).xWeakMethod)).apply (((xx).xother_method)))
                        xd.write ((((xweakref).xWeakMethod)).apply (((xy).xother_method)))
                        bogusForceDataize.write (((x_eq)).apply ((xa)) ((xb)))
                        bogusForceDataize.write (((x_eq)).apply ((xc)) ((xd)))
                        bogusForceDataize.write (((x_ne)).apply ((xa)) ((xc)))
                        bogusForceDataize.write (((x_ne)).apply ((xa)) ((xd)))
                        bogusForceDataize.write (((x_ne)).apply ((xb)) ((xc)))
                        bogusForceDataize.write (((x_ne)).apply ((xb)) ((xd)))
                        xz.write (((xObject)).apply (2))
                        xe.write ((((xweakref).xWeakMethod)).apply (((xz).xsome_method)))
                        xf.write ((((xweakref).xWeakMethod)).apply (((xz).xother_method)))
                        bogusForceDataize.write (((x_ne)).apply ((xa)) ((xe)))
                        bogusForceDataize.write (((x_ne)).apply ((xa)) ((xf)))
                        bogusForceDataize.write (((x_ne)).apply ((xb)) ((xe)))
                        bogusForceDataize.write (((x_ne)).apply ((xb)) ((xf)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xrefs.write (((unsupported)).apply ((xa)) ((xb)) ((xc)) ((xd)) ((xe)) ((xf)))
                        (((unsupported)).apply ((xq)) ((xrefs)))
                          (((unsupported)).apply ((xr)) ((xrefs)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xq).eq (xr))) ((((unsupported)).apply ((xq)) ((xr)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xq).neq (xr))) ((((unsupported)).apply ((xq)) ((xr)))))
                xtest_hashing.write
                  [xself]
                    memory > xc
                    memory > xha
                    memory > xb
                    memory > xx
                    memory > xy
                    memory > xa
                    seq > @
                      seq
                        xx.write (((xObject)).apply (1))
                        xy.write (((xObject)).apply (1))
                        xa.write ((((xweakref).xWeakMethod)).apply (((xx).xsome_method)))
                        xb.write ((((xweakref).xWeakMethod)).apply (((xy).xsome_method)))
                        xc.write ((((xweakref).xWeakMethod)).apply (((xy).xother_method)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xa)))) ((((xhash)).apply ((xb)))))
                        xha.write (((xhash)).apply ((xa)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xa)))) ((xha)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xb)))) ((xha)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xhash)) ((xc)))
            (((unsupported)).apply ((xTestBase)))
              seq
                xCOUNT.write 10
                xcheck_len_cycles.write
                  [xself xdict_type xcons]
                    memory > xn1
                    memory > xit
                    memory > xitems
                    memory > xdct
                    memory > xn2
                    memory > xN
                    seq > @
                      seq
                        xN.write 20
                        xitems.write (((unsupported)).apply ((((xRefCycle)).apply)) ((xi)) ((((xrange)).apply ((xN)))))
                        xdct.write (((xdict_type)).apply ((((unsupported)).apply ((((xcons)).apply ((xo)))) ((xo)) ((xitems)))))
                        xit.write ((((xdct).xitems)).apply)
                        (((unsupported)).apply ((xStopIteration)))
                          bogusForceDataize.write (((xnext)).apply ((xit)))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xn1.write (((xlen)).apply ((xdct)))
                        (((unsupported)).apply ((((unsupported)).apply ((xit)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        xn2.write (((xlen)).apply ((xdct)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xn1)) ((((unsupported)).apply (0) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn2)) (0))
                xtest_weak_keyed_len_cycles.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_len_cycles)).apply (((xweakref).xWeakKeyDictionary)) ((((unsupported)).apply ((((unsupported)).apply ((xk)) (1))))))
                xtest_weak_valued_len_cycles.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_len_cycles)).apply (((xweakref).xWeakValueDictionary)) ((((unsupported)).apply ((((unsupported)).apply (1) ((xk)))))))
                xcheck_len_race.write
                  [xself xdict_type xcons]
                    memory > xn1
                    memory > xit
                    memory > xitems
                    memory > xdct
                    memory > xn2
                    memory > xN
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xgc).xset_threshold)) ((((unsupported)).apply (((((xgc).xget_threshold)).apply)))))
                        (((unsupported)).apply ((xth)) ((((xrange)).apply (1) (100))))
                          seq
                            xN.write 20
                            bogusForceDataize.write ((((xgc).xcollect)).apply (0))
                            bogusForceDataize.write ((((xgc).xset_threshold)).apply ((xth)) ((xth)) ((xth)))
                            xitems.write (((unsupported)).apply ((((xRefCycle)).apply)) ((xi)) ((((xrange)).apply ((xN)))))
                            xdct.write (((xdict_type)).apply ((((unsupported)).apply ((((xcons)).apply ((xo)))) ((xo)) ((xitems)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xitems)))))
                            xit.write ((((xdct).xitems)).apply)
                            (((unsupported)).apply ((xStopIteration)))
                              bogusForceDataize.write (((xnext)).apply ((xit)))
                            xn1.write (((xlen)).apply ((xdct)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)))))
                            xn2.write (((xlen)).apply ((xdct)))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xn1)) (0))
                            bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xn1)) ((xN)))
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xn2)) (0))
                            bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xn2)) ((xn1)))
                xtest_weak_keyed_len_race.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_len_race)).apply (((xweakref).xWeakKeyDictionary)) ((((unsupported)).apply ((((unsupported)).apply ((xk)) (1))))))
                xtest_weak_valued_len_race.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_len_race)).apply (((xweakref).xWeakValueDictionary)) ((((unsupported)).apply ((((unsupported)).apply (1) ((xk)))))))
                xtest_weak_values.write
                  [xself]
                    memory > xdict
                    memory > xitems1
                    memory > xitems2
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_valued_dict)).apply)))
                        (((unsupported)).apply ((xo)) ((xobjects)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply ((xo)))) (1))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xo)) ((((unsupported)).apply ((xdict)) (((xo).xarg)))) ("wrong object returned by weak dict!"))
                        xitems1.write (((xlist)).apply (((((xdict).xitems)).apply)))
                        xitems2.write (((xlist)).apply ((((((((xdict).xcopy)).apply).xitems)).apply)))
                        bogusForceDataize.write ((((xitems1).xsort)).apply)
                        bogusForceDataize.write ((((xitems2).xsort)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xitems1)) ((xitems2)) ("cloning of weak-valued dictionary did not work!"))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems1)) ((xitems2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xself).xCOUNT)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xobjects)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) ((((xself).xCOUNT).sub 1)) ("deleting object did not cause dictionary update"))
                        (((unsupported)).apply ((((unsupported)).apply ((xobjects)) ((xo)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (0) ("deleting the values did not clear the dictionary"))
                        xdict.write ((((xweakref).xWeakValueDictionary)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xdict).x__getitem__)) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) (2))) ((((xC)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xdict).x__getitem__)) (2))
                xtest_weak_keys.write
                  [xself]
                    memory > xitems1
                    memory > xo
                    memory > xitems2
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_keyed_dict)).apply)))
                        (((unsupported)).apply ((xo)) ((xobjects)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xweakref).xgetweakrefcount)).apply ((xo)))) (1) (("wrong number of weak references to %r!".mod (xo))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xo).xarg)) ((((unsupported)).apply ((xdict)) ((xo)))) ("wrong object returned by weak dict!"))
                        xitems1.write ((((xdict).xitems)).apply)
                        xitems2.write (((((((xdict).xcopy)).apply).xitems)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((xitems1)))) ((((xset)).apply ((xitems2)))) ("cloning of weak-keyed dictionary did not work!"))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems1)) ((xitems2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xself).xCOUNT)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xobjects)) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) ((((xself).xCOUNT).sub 1)) ("deleting object did not cause dictionary update"))
                        (((unsupported)).apply ((((unsupported)).apply ((xobjects)) ((xo)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (0) ("deleting the keys did not clear the dictionary"))
                        xo.write (((xObject)).apply (42))
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xo)))) ("What is the meaning of the universe?"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xo)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (34) ((xdict)))
                xtest_weak_keyed_iters.write
                  [xself]
                    memory > xrefs
                    memory > xob
                    memory > xobjects2
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_keyed_dict)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_iters)).apply ((xdict)))
                        xrefs.write ((((xdict).xkeyrefs)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xrefs)))) ((((xlen)).apply ((xobjects)))))
                        xobjects2.write (((xlist)).apply ((xobjects)))
                        (((unsupported)).apply ((xwr)) ((xrefs)))
                          seq
                            xob.write (((xwr)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xob)) ((xdict)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xob)) ((xdict)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xob).xarg)) ((((unsupported)).apply ((xdict)) ((xob)))))
                            bogusForceDataize.write ((((xobjects2).xremove)).apply ((xob)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xobjects2)))) (0))
                        xobjects2.write (((xlist)).apply ((xobjects)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply (((((xdict).xkeyrefs)).apply)))))) ((((xlen)).apply ((xobjects)))))
                        (((unsupported)).apply ((xwr)) (((((xdict).xkeyrefs)).apply)))
                          seq
                            xob.write (((xwr)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xob)) ((xdict)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xob)) ((xdict)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xob).xarg)) ((((unsupported)).apply ((xdict)) ((xob)))))
                            bogusForceDataize.write ((((xobjects2).xremove)).apply ((xob)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xobjects2)))) (0))
                xtest_weak_valued_iters.write
                  [xself]
                    memory > xrefs
                    memory > xob
                    memory > xobjects2
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_valued_dict)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_iters)).apply ((xdict)))
                        xrefs.write ((((xdict).xvaluerefs)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xrefs)))) ((((xlen)).apply ((xobjects)))))
                        xobjects2.write (((xlist)).apply ((xobjects)))
                        (((unsupported)).apply ((xwr)) ((xrefs)))
                          seq
                            xob.write (((xwr)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xob)) ((((unsupported)).apply ((xdict)) (((xob).xarg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xob).xarg)) (((((unsupported)).apply ((xdict)) (((xob).xarg))).xarg)))
                            bogusForceDataize.write ((((xobjects2).xremove)).apply ((xob)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xobjects2)))) (0))
                        xobjects2.write (((xlist)).apply ((xobjects)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply (((((xdict).xitervaluerefs)).apply)))))) ((((xlen)).apply ((xobjects)))))
                        (((unsupported)).apply ((xwr)) (((((xdict).xitervaluerefs)).apply)))
                          seq
                            xob.write (((xwr)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xob)) ((((unsupported)).apply ((xdict)) (((xob).xarg)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xob).xarg)) (((((unsupported)).apply ((xdict)) (((xob).xarg))).xarg)))
                            bogusForceDataize.write ((((xobjects2).xremove)).apply ((xob)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xobjects2)))) (0))
                xcheck_iters.write
                  [xself xdict]
                    memory > xkeys
                    memory > xvalues
                    memory > xitems
                    seq > @
                      seq
                        xitems.write (((xlist)).apply (((((xdict).xitems)).apply)))
                        (((unsupported)).apply ((xitem)) (((((xdict).xitems)).apply)))
                          bogusForceDataize.write ((((xitems).xremove)).apply ((xitem)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xitems)) ("items() did not touch all items"))
                        xkeys.write (((xlist)).apply (((((xdict).xkeys)).apply)))
                        (((unsupported)).apply ((xk)) ((xdict)))
                          bogusForceDataize.write ((((xkeys).xremove)).apply ((xk)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xkeys)) ("__iter__() did not touch all keys"))
                        xkeys.write (((xlist)).apply (((((xdict).xkeys)).apply)))
                        (((unsupported)).apply ((xk)) (((((xdict).xkeys)).apply)))
                          bogusForceDataize.write ((((xkeys).xremove)).apply ((xk)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xkeys)) ("iterkeys() did not touch all keys"))
                        xvalues.write (((xlist)).apply (((((xdict).xvalues)).apply)))
                        (((unsupported)).apply ((xv)) (((((xdict).xvalues)).apply)))
                          bogusForceDataize.write ((((xvalues).xremove)).apply ((xv)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xvalues)) ("itervalues() did not touch all values"))
                xcheck_weak_destroy_while_iterating.write
                  [xself xdict xobjects xiter_name]
                    memory > xn
                    memory > xit
                    seq > @
                      seq
                        xn.write (((xlen)).apply ((xdict)))
                        xit.write (((xiter)).apply ((((((xgetattr)).apply ((xdict)) ((xiter_name)))).apply)))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xobjects)) ((1.neg)))))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xlen)).apply ((((xlist)).apply ((xit)))))) ((((unsupported)).apply ((((xlen)).apply ((xobjects)))) (((((xlen)).apply ((xobjects))).sub 1)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xit)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xn).sub 1)))
                xcheck_weak_destroy_and_mutate_while_iterating.write
                  [xself xdict xtestcontext]
                    memory > xddict
                    seq > @
                      seq
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((((unsupported)).apply ((xk)) ((xv)))))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xk)) ((xdict)))
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((((unsupported)).apply ((xk)) ((xv)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xdict).x__delitem__)) ((xk)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xk)) ((xdict)))
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((((unsupported)).apply ((xk)) ((xv)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xdict).xpop)) ((xk)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xk)) ((xdict)))
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((((unsupported)).apply ((xk)) ((xv)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xk)))) ((xv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdict)) ((xk)))) ((xv)))
                        xddict.write ((((xcopy).xcopy)).apply ((xdict)))
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((((unsupported)).apply ((xk)) ((xv)))))
                          bogusForceDataize.write ((((xdict).xupdate)).apply ((xddict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdict)) ((xddict)))
                        (((unsupported)).apply ((((xtestcontext)).apply)) ((((unsupported)).apply ((xk)) ((xv)))))
                          bogusForceDataize.write ((((xdict).xclear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (0))
                xcheck_weak_del_and_len_while_iterating.write
                  [xself xdict xtestcontext]
                    memory > xn
                    memory > xo
                    seq > @
                      seq
                        xo.write (((xObject)).apply (123456))
                        (((unsupported)).apply ((((xtestcontext)).apply)))
                          seq
                            xn.write (((xlen)).apply ((xdict)))
                            bogusForceDataize.write ((((xdict).xpop)).apply ((((xnext)).apply (((((xdict).xkeys)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xn).sub 1)))
                            (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xo)))) ((xo)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) ((xn)))
                        (((unsupported)).apply ((((xtestcontext)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xn).sub 1)))
                            bogusForceDataize.write ((((xdict).xpopitem)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xn).sub 2)))
                        (((unsupported)).apply ((((xtestcontext)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xn).sub 3)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdict)) ((((xnext)).apply (((((xdict).xkeys)).apply)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xn).sub 4)))
                        (((unsupported)).apply ((((xtestcontext)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xn).sub 5)))
                            bogusForceDataize.write ((((xdict).xpopitem)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (((xn).sub 6)))
                        (((unsupported)).apply ((((xtestcontext)).apply)))
                          seq
                            bogusForceDataize.write ((((xdict).xclear)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdict)))) (0))
                xtest_weak_keys_destroy_while_iterating.write
                  [xself]
                    memory > xtestcontext
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_keyed_dict)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_while_iterating)).apply ((xdict)) ((xobjects)) ("keys"))
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_while_iterating)).apply ((xdict)) ((xobjects)) ("items"))
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_while_iterating)).apply ((xdict)) ((xobjects)) ("values"))
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_while_iterating)).apply ((xdict)) ((xobjects)) ("keyrefs"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_keyed_dict)).apply)))
                        xtestcontext.write
                          []
                            memory > xv
                            memory > xit
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                  seq
                                    xit.write (((xiter)).apply (((((xdict).xitems)).apply)))
                                    bogusForceDataize.write (((xnext)).apply ((xit)))
                                    xv.write (((((xobjects).xpop)).apply).xarg)
                                    bogusForceDataize.write ((((xgc).xcollect)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply ((((xObject)).apply ((xv)))) ((xv)))))
                                  seq
                                    xit.write "None: is there a None literal in the EO language?"
                                    bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_and_mutate_while_iterating)).apply ((xdict)) ((xtestcontext)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_keyed_dict)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_weak_del_and_len_while_iterating)).apply ((xdict)) ((xtestcontext)))
                xtest_weak_values_destroy_while_iterating.write
                  [xself]
                    memory > xtestcontext
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_valued_dict)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_while_iterating)).apply ((xdict)) ((xobjects)) ("keys"))
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_while_iterating)).apply ((xdict)) ((xobjects)) ("items"))
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_while_iterating)).apply ((xdict)) ((xobjects)) ("values"))
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_while_iterating)).apply ((xdict)) ((xobjects)) ("itervaluerefs"))
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_while_iterating)).apply ((xdict)) ((xobjects)) ("valuerefs"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_valued_dict)).apply)))
                        xtestcontext.write
                          []
                            memory > xk
                            memory > xit
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                  seq
                                    xit.write (((xiter)).apply (((((xdict).xitems)).apply)))
                                    bogusForceDataize.write (((xnext)).apply ((xit)))
                                    xk.write (((((xobjects).xpop)).apply).xarg)
                                    bogusForceDataize.write ((((xgc).xcollect)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply ((xk)) ((((xObject)).apply ((xk)))))))
                                  seq
                                    xit.write "None: is there a None literal in the EO language?"
                                    bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xcheck_weak_destroy_and_mutate_while_iterating)).apply ((xdict)) ((xtestcontext)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))) (((((xself).xmake_weak_valued_dict)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_weak_del_and_len_while_iterating)).apply ((xdict)) ((xtestcontext)))
                xtest_make_weak_keyed_dict_from_dict.write
                  [xself]
                    memory > xdict
                    memory > xo
                    seq > @
                      seq
                        xo.write (((xObject)).apply (3))
                        xdict.write ((((xweakref).xWeakKeyDictionary)).apply ((((unsupported)).apply ((xo)) (364))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdict)) ((xo)))) (364))
                xtest_make_weak_keyed_dict_from_weak_keyed_dict.write
                  [xself]
                    memory > xdict
                    memory > xdict2
                    memory > xo
                    seq > @
                      seq
                        xo.write (((xObject)).apply (3))
                        xdict.write ((((xweakref).xWeakKeyDictionary)).apply ((((unsupported)).apply ((xo)) (364))))
                        xdict2.write ((((xweakref).xWeakKeyDictionary)).apply ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdict)) ((xo)))) (364))
                xmake_weak_keyed_dict.write
                  [xself]
                    memory > xdict
                    memory > xobjects
                    seq > @
                      seq
                        xdict.write ((((xweakref).xWeakKeyDictionary)).apply)
                        xobjects.write (((xlist)).apply ((((xmap)).apply ((xObject)) ((((xrange)).apply (((xself).xCOUNT)))))))
                        (((unsupported)).apply ((xo)) ((xobjects)))
                          (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xo)))) (((xo).xarg)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))))
                xtest_make_weak_valued_dict_from_dict.write
                  [xself]
                    memory > xdict
                    memory > xo
                    seq > @
                      seq
                        xo.write (((xObject)).apply (3))
                        xdict.write ((((xweakref).xWeakValueDictionary)).apply ((((unsupported)).apply (364) ((xo)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdict)) (364))) ((xo)))
                xtest_make_weak_valued_dict_from_weak_valued_dict.write
                  [xself]
                    memory > xdict
                    memory > xdict2
                    memory > xo
                    seq > @
                      seq
                        xo.write (((xObject)).apply (3))
                        xdict.write ((((xweakref).xWeakValueDictionary)).apply ((((unsupported)).apply (364) ((xo)))))
                        xdict2.write ((((xweakref).xWeakValueDictionary)).apply ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdict)) (364))) ((xo)))
                xtest_make_weak_valued_dict_misc.write
                  [xself]
                    memory > xd
                    memory > xo
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xweakref).xWeakValueDictionary).x__init__)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xweakref).xWeakValueDictionary)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xweakref).xWeakValueDictionary)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        xo.write (((xObject)).apply (3))
                        (((unsupported)).apply ((xkw)) ((((unsupported)).apply ("self") ("dict") ("other") ("iterable"))))
                          seq
                            xd.write ((((xweakref).xWeakValueDictionary)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkw)) ((xo)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xd).xkeys)).apply)))) ((((unsupported)).apply ((xkw)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((xkw)))) ((xo)))
                xmake_weak_valued_dict.write
                  [xself]
                    memory > xdict
                    memory > xobjects
                    seq > @
                      seq
                        xdict.write ((((xweakref).xWeakValueDictionary)).apply)
                        xobjects.write (((xlist)).apply ((((xmap)).apply ((xObject)) ((((xrange)).apply (((xself).xCOUNT)))))))
                        (((unsupported)).apply ((xo)) ((xobjects)))
                          (((unsupported)).apply ((((unsupported)).apply ((xdict)) (((xo).xarg)))) ((xo)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xobjects)))))
                xcheck_popitem.write
                  [xself xklass xkey1 xvalue1 xkey2 xvalue2]
                    memory > xweakdict
                    seq > @
                      seq
                        xweakdict.write (((xklass)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xweakdict)) ((xkey1)))) ((xvalue1)))
                        (((unsupported)).apply ((((unsupported)).apply ((xweakdict)) ((xkey2)))) ((xvalue2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xweakdict)))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) (((((xweakdict).xpopitem)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xweakdict)))) (1))
                        (((unsupported)).apply ((xk)) ((xkey1))).if
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((xv)) ((xvalue1)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((xv)) ((xvalue2)))
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) (((((xweakdict).xpopitem)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xweakdict)))) (0))
                        (((unsupported)).apply ((xk)) ((xkey1))).if
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((xv)) ((xvalue1)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((xv)) ((xvalue2)))
                xtest_weak_valued_dict_popitem.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_popitem)).apply (((xweakref).xWeakValueDictionary)) ("key1") ((((xC)).apply)) ("key2") ((((xC)).apply)))
                xtest_weak_keyed_dict_popitem.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_popitem)).apply (((xweakref).xWeakKeyDictionary)) ((((xC)).apply)) ("value 1") ((((xC)).apply)) ("value 2"))
                xcheck_setdefault.write
                  [xself xklass xkey xvalue1 xvalue2]
                    memory > xo
                    memory > xweakdict
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xvalue1)) ((xvalue2)) ("invalid test -- value parameters must be distinct objects"))
                        xweakdict.write (((xklass)).apply)
                        xo.write ((((xweakdict).xsetdefault)).apply ((xkey)) ((xvalue1)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xo)) ((xvalue1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey)) ((xweakdict)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xweakdict).xget)).apply ((xkey)))) ((xvalue1)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xweakdict)) ((xkey)))) ((xvalue1)))
                        xo.write ((((xweakdict).xsetdefault)).apply ((xkey)) ((xvalue2)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xo)) ((xvalue1)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey)) ((xweakdict)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xweakdict).xget)).apply ((xkey)))) ((xvalue1)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xweakdict)) ((xkey)))) ((xvalue1)))
                xtest_weak_valued_dict_setdefault.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_setdefault)).apply (((xweakref).xWeakValueDictionary)) ("key") ((((xC)).apply)) ((((xC)).apply)))
                xtest_weak_keyed_dict_setdefault.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_setdefault)).apply (((xweakref).xWeakKeyDictionary)) ((((xC)).apply)) ("value 1") ("value 2"))
                xcheck_update.write
                  [xself xklass xdict]
                    memory > xv
                    memory > xweakdict
                    seq > @
                      seq
                        xweakdict.write (((xklass)).apply)
                        bogusForceDataize.write ((((xweakdict).xupdate)).apply ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xweakdict)))) ((((xlen)).apply ((xdict)))))
                        (((unsupported)).apply ((xk)) (((((xweakdict).xkeys)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xk)) ((xdict)) ("mysterious new key appeared in weak dict"))
                            xv.write ((((xdict).xget)).apply ((xk)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xv)) ((((unsupported)).apply ((xweakdict)) ((xk)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xv)) (((((xweakdict).xget)).apply ((xk)))))
                        (((unsupported)).apply ((xk)) (((((xdict).xkeys)).apply)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xk)) ((xweakdict)) ("original key disappeared in weak dict"))
                            xv.write (((unsupported)).apply ((xdict)) ((xk)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xv)) ((((unsupported)).apply ((xweakdict)) ((xk)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((xv)) (((((xweakdict).xget)).apply ((xk)))))
                xtest_weak_valued_dict_update.write
                  [xself]
                    memory > xd
                    memory > xo
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_update)).apply (((xweakref).xWeakValueDictionary)) ((((unsupported)).apply (1) ((((xC)).apply)) ("a") ((((xC)).apply)) ((((xC)).apply)) ((((xC)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xweakref).xWeakValueDictionary).xupdate)))
                        xd.write ((((xweakref).xWeakValueDictionary)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xupdate)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).xupdate)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xd).xkeys)).apply)))) ((((unsupported)).apply)))
                        xo.write (((xObject)).apply (3))
                        (((unsupported)).apply ((xkw)) ((((unsupported)).apply ("self") ("dict") ("other") ("iterable"))))
                          seq
                            xd.write ((((xweakref).xWeakValueDictionary)).apply)
                            bogusForceDataize.write ((((xd).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkw)) ((xo)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xd).xkeys)).apply)))) ((((unsupported)).apply ((xkw)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xd)) ((xkw)))) ((xo)))
                xtest_weak_keyed_dict_update.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_update)).apply (((xweakref).xWeakKeyDictionary)) ((((unsupported)).apply ((((xC)).apply)) (1) ((((xC)).apply)) (2) ((((xC)).apply)) (3))))
                xtest_weak_keyed_delitem.write
                  [xself]
                    memory > xd
                    memory > xo2
                    memory > xo1
                    seq > @
                      seq
                        xd.write ((((xweakref).xWeakKeyDictionary)).apply)
                        xo1.write (((xObject)).apply ("1"))
                        xo2.write (((xObject)).apply ("2"))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xo1)))) ("something"))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xo2)))) ("something"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((xo1)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xd).xkeys)).apply)))) ((((unsupported)).apply ((xo2)))))
                xtest_weak_valued_delitem.write
                  [xself]
                    memory > xd
                    memory > xo2
                    memory > xo1
                    seq > @
                      seq
                        xd.write ((((xweakref).xWeakValueDictionary)).apply)
                        xo1.write (((xObject)).apply ("1"))
                        xo2.write (((xObject)).apply ("2"))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ("something"))) ((xo1)))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ("something else"))) ((xo2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ("something"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xd).xitems)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("something else") ((xo2)))))))
                xtest_weak_keyed_bad_delitem.write
                  [xself]
                    memory > xd
                    memory > xo
                    seq > @
                      seq
                        xd.write ((((xweakref).xWeakKeyDictionary)).apply)
                        xo.write (((xObject)).apply ("1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xd).x__delitem__)) ((xo)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) (((xd).x__getitem__)) ((xo)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).x__delitem__)) (13))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).x__getitem__)) (13))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xd).x__setitem__)) (13) (13))
                xtest_weak_keyed_cascading_deletes.write
                  [xself]
                    memory > xd
                    memory > x__eq__
                    memory > xmutate
                    memory > x__init__
                    memory > x__hash__
                    memory > xcount
                    memory > xobjs
                    seq > @
                      seq
                        xd.write ((((xweakref).xWeakKeyDictionary)).apply)
                        xmutate.write FALSE
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself xi]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xi)))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xhash)).apply (((xself).xvalue)))))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (xmutate).if
                                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xobjs)) ((1.neg)))))))
                                    (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                        xobjs.write (((unsupported)).apply ((((xC)).apply ((xi)))) ((xi)) ((((xrange)).apply (4))))
                        (((unsupported)).apply ((xo)) ((xobjs)))
                          (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xo)))) (((xo).xvalue)))
                        (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                        xobjs.write (((xlist)).apply (((((xd).xkeys)).apply)))
                        bogusForceDataize.write ((((xobjs).xreverse)).apply)
                        xmutate.write TRUE
                        xcount.write 0
                        (((unsupported)).apply ((xo)) ((xobjs)))
                          seq
                            (((unsupported)).apply ((xcount)) (1))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xd)) ((xo)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) (2))
                xtest_make_weak_valued_dict_repr.write
                  [xself]
                    memory > xdict
                    seq > @
                      seq
                        xdict.write ((((xweakref).xWeakValueDictionary)).apply)
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xdict)))) ("<WeakValueDictionary at 0x.*>"))
                xtest_make_weak_keyed_dict_repr.write
                  [xself]
                    memory > xdict
                    seq > @
                      seq
                        xdict.write ((((xweakref).xWeakKeyDictionary)).apply)
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xdict)))) ("<WeakKeyDictionary at 0x.*>"))
                xtest_threaded_weak_valued_setdefault.write
                  [xself]
                    memory > xd
                    memory > xx
                    seq > @
                      seq
                        xd.write ((((xweakref).xWeakValueDictionary)).apply)
                        (((unsupported)).apply ((((xcollect_in_thread)).apply)))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (100000))))
                            seq
                              xx.write ((((xd).xsetdefault)).apply (10) ((((xRefCycle)).apply)))
                              bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xx)) ("None: is there a None literal in the EO language?"))
                              (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                xtest_threaded_weak_valued_pop.write
                  [xself]
                    memory > xd
                    memory > xx
                    seq > @
                      seq
                        xd.write ((((xweakref).xWeakValueDictionary)).apply)
                        (((unsupported)).apply ((((xcollect_in_thread)).apply)))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (100000))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) (10))) ((((xRefCycle)).apply)))
                              xx.write ((((xd).xpop)).apply (10) (10))
                              bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xx)) ("None: is there a None literal in the EO language?"))
                xtest_threaded_weak_valued_consistency.write
                  [xself]
                    memory > xd
                    memory > xo
                    seq > @
                      seq
                        xd.write ((((xweakref).xWeakValueDictionary)).apply)
                        (((unsupported)).apply ((((xcollect_in_thread)).apply)))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (200000))))
                            seq
                              xo.write (((xRefCycle)).apply)
                              (((unsupported)).apply ((((unsupported)).apply ((xd)) (10))) ((xo)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xd)))) (1))
                              xo.write "None: is there a None literal in the EO language?"
                xcheck_threaded_weak_dict_copy.write
                  [xself xtype_ xdeepcopy]
                    memory > xd
                    memory > xpop_and_collect
                    memory > xvalues
                    memory > xkeys
                    memory > xdict_copy
                    memory > xt_copy
                    memory > x__init__
                    memory > xexc
                    memory > xt_collect
                    seq > @
                      seq
                        xexc.write (((unsupported)).apply)
                        (((unsupported)).apply)
                          x__init__.write
                            [xself xctr]
                              seq > @
                                (((unsupported)).apply (((xself).xctr)) ((xctr)))
                        (((unsupported)).apply)
                          x__init__.write
                            [xself xctr]
                              seq > @
                                (((unsupported)).apply (((xself).xctr)) ((xctr)))
                        xdict_copy.write
                          [xd xexc]
                            memory > x_
                            seq > @
                              (((unsupported)).apply ((xException)))
                                (((unsupported)).apply ((xdeepcopy)) (TRUE)).if
                                  x_.write ((((xcopy).xdeepcopy)).apply ((xd)))
                                  x_.write ((((xd).xcopy)).apply)
                                bogusForceDataize.write ((((xexc).xappend)).apply ((xex)))
                        xpop_and_collect.write
                          [xlst]
                            memory > xgc_ctr
                            memory > xi
                            seq > @
                              seq
                                xgc_ctr.write 0
                                while.
                                  (xlst)
                                  [unused]
                                    seq > @
                                      seq
                                        xi.write ((((xrandom).xrandint)).apply (0) (((((xlen)).apply ((xlst))).sub 1)))
                                        (((unsupported)).apply ((xgc_ctr)) (1))
                                        bogusForceDataize.write ((((xlst).xpop)).apply ((xi)))
                                        (((xgc_ctr).mod 10000).eq 0).if
                                          bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xtype_)) ((((unsupported)).apply (((xweakref).xWeakKeyDictionary)) (((xweakref).xWeakValueDictionary)))))
                        xd.write (((xtype_)).apply)
                        xkeys.write (((unsupported)).apply)
                        xvalues.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (70000))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((unsupported)).apply ((((xDummyKey)).apply ((xi)))) ((((xDummyValue)).apply ((xi)))))))
                            bogusForceDataize.write ((((xkeys).xappend)).apply ((xk)))
                            bogusForceDataize.write ((((xvalues).xappend)).apply ((xv)))
                            (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xk)))) ((xv)))
                            (((unsupported)).apply ((((unsupported)).apply ((xk)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xv)))))
                        xt_copy.write (((unsupported)).apply (((xthreading).xThread)) ((xdict_copy)) ((((unsupported)).apply ((xd)) ((xexc)))))
                        (((unsupported)).apply ((xtype_)) (((xweakref).xWeakKeyDictionary))).if
                          xt_collect.write (((unsupported)).apply (((xthreading).xThread)) ((xpop_and_collect)) ((((unsupported)).apply ((xkeys)))))
                          xt_collect.write (((unsupported)).apply (((xthreading).xThread)) ((xpop_and_collect)) ((((unsupported)).apply ((xvalues)))))
                        bogusForceDataize.write ((((xt_copy).xstart)).apply)
                        bogusForceDataize.write ((((xt_collect).xstart)).apply)
                        bogusForceDataize.write ((((xt_copy).xjoin)).apply)
                        bogusForceDataize.write ((((xt_collect).xjoin)).apply)
                        (xexc).if
                          (((unsupported)).apply ((((unsupported)).apply ((xexc)) (0))))
                xtest_threaded_weak_key_dict_copy.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_threaded_weak_dict_copy)).apply (((xweakref).xWeakKeyDictionary)) (FALSE))
                xtest_threaded_weak_key_dict_deepcopy.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_threaded_weak_dict_copy)).apply (((xweakref).xWeakKeyDictionary)) (TRUE))
                xtest_threaded_weak_value_dict_copy.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_threaded_weak_dict_copy)).apply (((xweakref).xWeakValueDictionary)) (FALSE))
                xtest_threaded_weak_value_dict_deepcopy.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_threaded_weak_dict_copy)).apply (((xweakref).xWeakValueDictionary)) (TRUE))
                xtest_remove_closure.write
                  [xself]
                    memory > xd
                    seq > @
                      (((unsupported)).apply)
                        xd.write ((((xweakref).xWeakValueDictionary)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xd).x_remove).x__closure__)))
            (((unsupported)).apply)
            (((unsupported)).apply (((xmapping_tests).xBasicTestMappingProtocol)))
              seq
                unsupported
                x__ref.write (((unsupported)).apply ("key1") ((((xObject)).apply (1))) ("key2") ((((xObject)).apply (2))) ("key3") ((((xObject)).apply (3))))
                xtype2test.write ((xweakref).xWeakValueDictionary)
                x_reference.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).x__ref).xcopy)).apply)))
            (((unsupported)).apply (((xmapping_tests).xBasicTestMappingProtocol)))
              seq
                unsupported
                x__ref.write (((unsupported)).apply ((((xObject)).apply ("key1"))) (1) ((((xObject)).apply ("key2"))) (2) ((((xObject)).apply ("key3"))) (3))
                xtype2test.write ((xweakref).xWeakKeyDictionary)
                x_reference.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).x__ref).xcopy)).apply)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                x_collect_if_necessary.write
                  [xself]
                    seq > @
                      ((((xsys).ximplementation).xname).neq "cpython").if
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                xtest_finalize.write
                  [xself]
                    memory > xres
                    memory > xadd
                    memory > xf
                    memory > xa
                    seq > @
                      seq
                        xadd.write
                          [xx xy xz]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xres).xappend)).apply ((((xx).add (xy)).add (xz))))
                                (((unsupported)).apply ((((xx).add (xy)).add (xz))))
                        xa.write ((((xself).xA)).apply)
                        xres.write (((unsupported)).apply)
                        xf.write (((unsupported)).apply (((xweakref).xfinalize)) ((xa)) ((xadd)) (67) (43) (89))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xalive)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xpeek)).apply)) ((((unsupported)).apply ((xa)) ((xadd)) ((((unsupported)).apply (67) (43))) ((((unsupported)).apply ("z") (89))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) (199))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xpeek)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xdetach)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xalive)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply (199))))
                        xres.write (((unsupported)).apply)
                        xf.write ((((xweakref).xfinalize)).apply ((xa)) ((xadd)) (67) (43) (89))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xpeek)).apply)) ((((unsupported)).apply ((xa)) ((xadd)) ((((unsupported)).apply (67) (43) (89))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xdetach)).apply)) ((((unsupported)).apply ((xa)) ((xadd)) ((((unsupported)).apply (67) (43) (89))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xpeek)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xdetach)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xalive)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply)))
                        xres.write (((unsupported)).apply)
                        xf.write (((unsupported)).apply (((xweakref).xfinalize)) ((xa)) ((xadd)) (67) (43) (89))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xself).x_collect_if_necessary)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xpeek)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xdetach)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xalive)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply (199))))
                xtest_arg_errors.write
                  [xself]
                    memory > xfin
                    memory > xres
                    memory > xf
                    memory > xa
                    seq > @
                      seq
                        xfin.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xres).xappend)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))))
                        xa.write ((((xself).xA)).apply)
                        xres.write (((unsupported)).apply)
                        xf.write (((unsupported)).apply (((xweakref).xfinalize)) ((xa)) ((xfin)) (1) (2) (3) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xpeek)).apply)) ((((unsupported)).apply ((xa)) ((xfin)) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ("func") (3) ("obj") (4))))))
                        bogusForceDataize.write (((xf)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ("func") (3) ("obj") (4))))))))
                        xres.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xf.write (((unsupported)).apply (((xweakref).xfinalize)) ((xa)) ((xfin)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xpeek)).apply)) ((((unsupported)).apply ((xa)) ((xfin)) ((((unsupported)).apply)) ((((unsupported)).apply ("arg") (1))))))
                        bogusForceDataize.write (((xf)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("arg") (1))))))))
                        xres.write (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          xf.write (((unsupported)).apply (((xweakref).xfinalize)) ((xa)) ((xfin)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xpeek)).apply)) ((((unsupported)).apply ((xa)) ((xfin)) ((((unsupported)).apply)) ((((unsupported)).apply ("arg") (1))))))
                        bogusForceDataize.write (((xf)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("arg") (1))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xweakref).xfinalize)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xweakref).xfinalize)))
                xtest_order.write
                  [xself]
                    memory > xexpected
                    memory > xf3
                    memory > xf2
                    memory > xf5
                    memory > xf4
                    memory > xa
                    memory > xf1
                    memory > xres
                    seq > @
                      seq
                        xa.write ((((xself).xA)).apply)
                        xres.write (((unsupported)).apply)
                        xf1.write ((((xweakref).xfinalize)).apply ((xa)) (((xres).xappend)) ("f1"))
                        xf2.write ((((xweakref).xfinalize)).apply ((xa)) (((xres).xappend)) ("f2"))
                        xf3.write ((((xweakref).xfinalize)).apply ((xa)) (((xres).xappend)) ("f3"))
                        xf4.write ((((xweakref).xfinalize)).apply ((xa)) (((xres).xappend)) ("f4"))
                        xf5.write ((((xweakref).xfinalize)).apply ((xa)) (((xres).xappend)) ("f5"))
                        (((unsupported)).apply ((((unsupported)).apply ((xf1)) ((xf4)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf2).xalive)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf3).xalive)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf5).xalive)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xf5).xdetach)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf5).xalive)))
                        bogusForceDataize.write (((xf5)).apply)
                        bogusForceDataize.write ((((xres).xappend)).apply ("A"))
                        bogusForceDataize.write (((xf3)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf3).xalive)))
                        bogusForceDataize.write ((((xres).xappend)).apply ("B"))
                        bogusForceDataize.write (((xf3)).apply)
                        bogusForceDataize.write ((((xres).xappend)).apply ("C"))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xself).x_collect_if_necessary)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf2).xalive)))
                        bogusForceDataize.write ((((xres).xappend)).apply ("D"))
                        bogusForceDataize.write (((xf2)).apply)
                        xexpected.write (((unsupported)).apply ("A") ("f3") ("B") ("C") ("f4") ("f2") ("f1") ("D"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((xexpected)))
                xtest_all_freed.write
                  [xself]
                    memory > xwr_callback
                    memory > xf
                    memory > xres
                    memory > xwr_f
                    memory > xcallback
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply (((xweakref).xfinalize)))
                        xa.write ((((xself).xA)).apply)
                        xres.write (((unsupported)).apply)
                        xcallback.write
                          []
                            seq > @
                              bogusForceDataize.write ((((xres).xappend)).apply (123))
                        xf.write (((xMyFinalizer)).apply ((xa)) ((xcallback)))
                        xwr_callback.write ((((xweakref).xref)).apply ((xcallback)))
                        xwr_f.write ((((xweakref).xref)).apply ((xf)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcallback)) ((xf)))))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((xwr_callback)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((xwr_f)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xself).x_collect_if_necessary)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xwr_callback)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xwr_f)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((((unsupported)).apply (123))))
                xrun_in_child.write
                  [xcls]
                    memory > xf3
                    memory > xerror
                    memory > xf2
                    memory > xf1
                    memory > xf4
                    seq > @
                      (((unsupported)).apply)
                        xerror.write
                          []
                            memory > xg1
                            seq > @
                              seq
                                xg1.write ((((xweakref).xfinalize)).apply ((xcls)) ((xprint)) ("g1"))
                                bogusForceDataize.write (((xprint)).apply ("f3 error"))
                                unsupported
                        xf1.write ((((xweakref).xfinalize)).apply ((xcls)) ((xprint)) ("f1") ((x_global_var)))
                        xf2.write ((((xweakref).xfinalize)).apply ((xcls)) ((xprint)) ("f2") ((x_global_var)))
                        xf3.write ((((xweakref).xfinalize)).apply ((xcls)) ((xerror)))
                        xf4.write ((((xweakref).xfinalize)).apply ((xcls)) ((xprint)) ("f4") ((x_global_var)))
                        (((unsupported)).apply ((((xf1).xatexit).eq TRUE)))
                        (((unsupported)).apply (((xf2).xatexit)) (FALSE))
                        (((unsupported)).apply ((((xf3).xatexit).eq TRUE)))
                        (((unsupported)).apply ((((xf4).xatexit).eq TRUE)))
            xlibreftest.write (((unsupported)).apply)
            x__test__.write (((unsupported)).apply ("libreftest") ((xlibreftest)))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((xReferencesTestCase)) ((xWeakMethodTestCase)) ((xMappingTestCase)) ((xWeakValueDictionaryTestCase)) ((xWeakKeyDictionaryTestCase)) ((xSubclassableWeakrefTestCase)) ((xFinalizeTestCase)))
                    bogusForceDataize.write ((((xsupport).xrun_doctest)).apply ((((unsupported)).apply (((xsys).xmodules)) ((x__name__)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)