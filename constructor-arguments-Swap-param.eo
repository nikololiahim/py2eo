+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > constructor-arguments
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      cage > tmp
      cage > assertMe
      cage > xmyC
      seq > @
        stdout "constructor-arguments\n"
        write.
          xmyC
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > lhs0
                cage > e1
                cage > xo
                cage > xc
                cage > e4
                cage > lhs2
                cage > e3
                cage > e2
                seq > @
                  stdout "xmyC\n"
                  write.
                    xc
                    []
                      newUID.apply 0 > xid
                      [xa1] > apply
                        [stackUp] > @
                          cage > pResult
                          [] > result
                            cage > xa
                            cage > x__init__
                            cage > xsum
                            xc > xclass
                            seq > initFields
                              xa.write "None: is there a None literal in the EO language?"
                              write.
                                x__init__
                                []
                                  [xselfNotCopied xa1NotCopied] > apply
                                    [stackUp] > @
                                      cage > tmp
                                      xselfNotCopied' > xself
                                      xa1NotCopied' > xa1
                                      seq > @
                                        stdout "x__init__\n"
                                        xself.<
                                        xa1.<
                                        mkCopy (xa1) > tmp1
                                        ((xself).xa).write (tmp1.copy)
                                        123
                              write.
                                xsum
                                []
                                  [xselfNotCopied] > apply
                                    [stackUp] > @
                                      cage > tmp
                                      xselfNotCopied' > xself
                                      cage > e0
                                      seq > @
                                        stdout "xsum\n"
                                        xself.<
                                        mkCopy (xself.xa) > tmp2
                                        (e0).write (tmp2.copy)
                                        ((e0).<)
                                        stackUp.forward (return (e0))
                                        123
                          seq (result.initFields) (pResult.write result) (goto ((result.x__init__.apply pResult xa1).@)) (stackUp.forward (return pResult)) > @
                  tmp.write (goto ((((xc)).apply (5)).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp3
                  (xo).write (tmp3.copy)
                  mkCopy (xo.xsum) > tmp4
                  (e2).write (tmp4.copy)
                  ((e2).<)
                  mkCopy (xo) > tmp5
                  (lhs0).write (tmp5.copy)
                  tmp.write (goto ((((e2)).apply ((lhs0))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  (lhs2).write (5)
                  [] > tmp6
                    memory > dddata
                    dddata.write (((e3).eq (lhs2))) > @
                  (e4).write (tmp6.dddata)
                  ((e4).<)
                  stackUp.forward (return (e4))
                  123
        tmp.write (goto ((((xmyC)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        stackUp.forward (return (assertMe))
  (goto (apply.@)).result > @