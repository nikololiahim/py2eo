memory > xCar
memory > xPerson
memory > xPossessedCar
memory > xTestCase
memory > xtype
memory > xrepr
memory > xconnections
memory > xbytes
memory > xIntegrityError
memory > xDatabaseOperationForbidden
memory > xtransaction
memory > xTypeError
memory > xrollback_atomics
memory > xTestData
[] > test_testcase
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_fixture_teardown_checks_constraints
        memory > xassert_no_queries
        memory > xtest_repr
        memory > xtest_known_related_objects_identity_preservation
        memory > xtest_disallowed_database_connection
        memory > xtest_book_name_deutsh
        memory > xtest_binaryfield_data_type
        memory > xtest_reset_sequences
        memory > xjim_douglas
        memory > xtest_class_attribute_equality
        memory > xtest_identity_preservation
        memory > xtest_book_name_french
        memory > xtest_class_attribute_identity
        memory > xsetUpTestData
        memory > xtest_disallowed_database_queries
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_fixture_teardown_checks_constraints.write
                  [xself]
                    memory > xcar
                    memory > xrollback_atomics2
                    seq > @
                      (((unsupported)).apply)
                        xrollback_atomics2.write ((xself).x_rollback_atomics)
                        (((unsupported)).apply (((xself).x_rollback_atomics)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply)
                          seq
                            xcar.write (((unsupported)).apply ((((xPossessedCar).xobjects).xcreate)) (1) (1))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                              bogusForceDataize.write ((((xself).x_fixture_teardown)).apply)
                            bogusForceDataize.write ((((xcar).xdelete)).apply)
                          (((unsupported)).apply (((xself).x_rollback_atomics)) ((xrollback_atomics)))
                xtest_disallowed_database_connection.write
                  [xself]
                    memory > xmessage
                    seq > @
                      seq
                        xmessage.write "Database connections to 'other' are not allowed in this test. Add 'other' to test_utils.test_testcase.TestTestCase.databases to ensure proper test isolation and silence this failure."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseOperationForbidden)) ((xmessage)))))
                          bogusForceDataize.write ((((((unsupported)).apply ((xconnections)) ("other")).xconnect)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseOperationForbidden)) ((xmessage)))))
                          bogusForceDataize.write ((((((unsupported)).apply ((xconnections)) ("other")).xtemporary_connection)).apply)
                xtest_disallowed_database_queries.write
                  [xself]
                    memory > xmessage
                    seq > @
                      seq
                        xmessage.write "Database queries to 'other' are not allowed in this test. Add 'other' to test_utils.test_testcase.TestTestCase.databases to ensure proper test isolation and silence this failure."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xDatabaseOperationForbidden)) ((xmessage)))))
                          bogusForceDataize.write ((((((((xCar).xobjects).xusing)).apply ("other")).xget)).apply)
                xtest_reset_sequences.write
                  [xself]
                    memory > xmsg
                    memory > xold_reset_sequences
                    seq > @
                      seq
                        xold_reset_sequences.write ((xself).xreset_sequences)
                        (((unsupported)).apply (((xself).xreset_sequences)) (TRUE))
                        xmsg.write "reset_sequences cannot be used on TestCase instances"
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                            bogusForceDataize.write ((((xself).x_fixture_setup)).apply)
                          (((unsupported)).apply (((xself).xreset_sequences)) ((xold_reset_sequences)))
            xassert_no_queries.write
              [xtest]
                memory > xinner
                seq > @
                  seq
                    xinner.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                              bogusForceDataize.write (((xtest)).apply ((xself)))
                    (((unsupported)).apply ((xinner)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xjim_douglas.write "None: is there a None literal in the EO language?"
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xjim_douglas)) ((((unsupported)).apply ((((xPerson).xobjects).xcreate)) ("Jim Douglas"))))
                        (((unsupported)).apply (((xcls).xcar)) ((((unsupported)).apply ((((xCar).xobjects).xcreate)) ("1963 Volkswagen Beetle"))))
                        (((unsupported)).apply (((xcls).xherbie)) ((((unsupported)).apply (((((xcls).xjim_douglas).xpossessed_cars).xcreate)) (((xcls).xcar)) (((xcls).xjim_douglas)))))
                        (((unsupported)).apply (((xcls).xperson_binary)) ((((unsupported)).apply ((((xPerson).xobjects).xcreate)) ("Person") ("binary data"))))
                        (((unsupported)).apply (((xcls).xperson_binary_get)) ((((unsupported)).apply ((((xPerson).xobjects).xget)) ((((xcls).xperson_binary).xpk)))))
                xtest_class_attribute_equality.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xjim_douglas)) ((((xself).x__class__).xjim_douglas)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xperson_binary)) ((((xself).x__class__).xperson_binary)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xperson_binary_get)) ((((xself).x__class__).xperson_binary_get)))
                xtest_class_attribute_identity.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xself).xjim_douglas)) ((((xself).x__class__).xjim_douglas)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xself).xperson_binary)) ((((xself).x__class__).xperson_binary)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xself).xperson_binary_get)) ((((xself).x__class__).xperson_binary_get)))
                xtest_binaryfield_data_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((((xself).xperson_binary).xdata)))) ("binary data"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((((xself).xperson_binary_get).xdata)))) ("binary data"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xself).xperson_binary_get).xdata)))) ((((xtype)).apply (((((xself).x__class__).xperson_binary_get).xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xself).xperson_binary).xdata)))) ((((xtype)).apply (((((xself).x__class__).xperson_binary).xdata)))))
                xtest_identity_preservation.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xself).xjim_douglas)) (((xself).xjim_douglas)))
                xtest_known_related_objects_identity_preservation.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xherbie).xcar)) (((xself).xcar)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xherbie).xbelongs_to)) (((xself).xjim_douglas)))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xTestData)).apply ("attr") ("value"))))) ("<TestData: name='attr', data='value'>"))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xcar)) ((((unsupported)).apply ((((xCar).xobjects).xcreate)) ("Volkswagen Beetle"))))
                xtest_book_name_deutsh.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xcar).xname)) ("Volkswagen Beetle"))
                        (((unsupported)).apply ((((xself).xcar).xname)) ("VW sKäfer"))
                        bogusForceDataize.write (((((xself).xcar).xsave)).apply)
                xtest_book_name_french.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xcar).xname)) ("Volkswagen Beetle"))
                        (((unsupported)).apply ((((xself).xcar).xname)) ("Volkswagen Coccinelle"))
                        bogusForceDataize.write (((((xself).xcar).xsave)).apply)