memory > xAND
memory > xobjs
memory > xPathInfo
memory > xKeyError
memory > xinstance
memory > xany
memory > xrelobj
memory > xsuper
memory > xdefaultdict
memory > xmodels
memory > xkwargs
memory > xContentType
memory > xfield
memory > xDO_NOTHING
memory > xReverseManyToOneDescriptor
memory > xAttributeError
memory > xFieldDoesNotExist
memory > xValueError
memory > xo
memory > xstr
memory > xchecks
memory > xrouter
memory > xWhereNode
memory > xset
memory > xrepr
memory > xException
memory > xfkeys
memory > xGenericRelatedObjectManager
memory > xtuple
memory > xObjectDoesNotExist
memory > xsorted
memory > xForeignObject
memory > xReverseGenericManyToOneDescriptor
memory > xmake_foreign_order_accessors
memory > xlazy_related_operation
memory > xGenericForeignKey
memory > xitertools
memory > xobj
memory > xFieldCacheMixin
memory > xgetattr
memory > xModelBase
memory > xsetattr
memory > xForeignObjectRel
memory > xcontent_type_id
memory > xisinstance
memory > xtransaction
memory > xfunctools
memory > xTypeError
memory > xGenericRel
[] > fields
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xresolve_related_fields
        memory > xget_extra_restriction
        memory > xis_relation
        memory > xmany_to_one
        memory > xremote_field
        memory > xempty_strings_allowed
        memory > xrelated_manager_cache_key
        memory > x__get__
        memory > x__init__
        memory > xrelated_model
        memory > xauto_created
        memory > x__str__
        memory > xget_prefetch_queryset
        memory > xcontribute_to_class
        memory > xvalue_to_string
        memory > xget_internal_type
        memory > xcheck
        memory > xone_to_one
        memory > xbulk_related_objects
        memory > xget_path_info
        memory > xset_attributes_from_rel
        memory > xrelated_manager_cls
        memory > xget_cache_name
        memory > x_is_matching_generic_foreign_key
        memory > x_check_object_id_field
        memory > xmany_to_many
        memory > xone_to_many
        memory > xhidden
        memory > xget_reverse_path_info
        memory > x_check_field_name
        memory > x__set__
        memory > x_check_generic_foreign_key_existence
        memory > xget_filter_kwargs_for_object
        memory > xeditable
        memory > xget_forward_related_filter
        memory > xcreate_generic_related_manager
        memory > x_get_path_info_with_parent
        memory > xget_content_type
        memory > xconcrete
        memory > x_check_content_type_field
        memory > xmti_inherited
        memory > xrel_class
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xFieldCacheMixin)))
              seq
                (((unsupported)).apply)
                xauto_created.write FALSE
                xconcrete.write FALSE
                xeditable.write FALSE
                xhidden.write FALSE
                xis_relation.write TRUE
                xmany_to_many.write FALSE
                xmany_to_one.write TRUE
                xone_to_many.write FALSE
                xone_to_one.write FALSE
                xrelated_model.write "None: is there a None literal in the EO language?"
                xremote_field.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xct_field xfk_field xfor_concrete_model]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xct_field)) ((xct_field)))
                        (((unsupported)).apply (((xself).xfk_field)) ((xfk_field)))
                        (((unsupported)).apply (((xself).xfor_concrete_model)) ((xfor_concrete_model)))
                        (((unsupported)).apply (((xself).xeditable)) (FALSE))
                        (((unsupported)).apply (((xself).xrel)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xcolumn)) ("None: is there a None literal in the EO language?"))
                xcontribute_to_class.write
                  [xself xcls xname]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                        (((unsupported)).apply (((xself).xmodel)) ((xcls)))
                        (((unsupported)).apply ((((xcls).x_meta).xadd_field)) ((xself)) (TRUE))
                        bogusForceDataize.write (((xsetattr)).apply ((xcls)) ((xname)) ((xself)))
                xget_filter_kwargs_for_object.write
                  [xself xobj]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xfk_field)) ((((xgetattr)).apply ((xobj)) (((xself).xfk_field)))) (((xself).xct_field)) ((((xgetattr)).apply ((xobj)) (((xself).xct_field)))))))
                xget_forward_related_filter.write
                  [xself xobj]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xfk_field)) (((xobj).xpk)) (((xself).xct_field)) (((((((xContentType).xobjects).xget_for_model)).apply ((xobj))).xpk)))))
                x__str__.write
                  [xself]
                    memory > xmodel
                    seq > @
                      seq
                        xmodel.write ((xself).xmodel)
                        (((unsupported)).apply (("%s.%s".mod (((unsupported)).apply ((((xmodel).x_meta).xlabel)) (((xself).xname))))))
                xcheck.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xself).x_check_field_name)).apply)))) ((((unsupported)).apply (((((xself).x_check_object_id_field)).apply)))) ((((unsupported)).apply (((((xself).x_check_content_type_field)).apply)))))))
                x_check_field_name.write
                  [xself]
                    seq > @
                      (((((xself).xname).xendswith)).apply ("_")).if
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) ("Field names must not end with an underscore.") ((xself)) ("fields.E001"))))))
                        (((unsupported)).apply ((((unsupported)).apply)))
                x_check_object_id_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xFieldDoesNotExist)))
                        bogusForceDataize.write ((((((xself).xmodel).x_meta).xget_field)).apply (((xself).xfk_field)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) (("The GenericForeignKey object ID references the nonexistent field '%s'.".mod ((xself).xfk_field))) ((xself)) ("contenttypes.E001"))))))
                        (((unsupported)).apply ((((unsupported)).apply)))
                x_check_content_type_field.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xFieldDoesNotExist)))
                          xfield.write ((((((xself).xmodel).x_meta).xget_field)).apply (((xself).xct_field)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) (("The GenericForeignKey content type references the nonexistent field '%s.%s'.".mod (((unsupported)).apply (((((xself).xmodel).x_meta).xobject_name)) (((xself).xct_field))))) ((xself)) ("contenttypes.E002"))))))
                          ((((xisinstance)).apply ((xfield)) (((xmodels).xForeignKey))).not).if
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) (("'%s.%s' is not a ForeignKey.".mod (((unsupported)).apply (((((xself).xmodel).x_meta).xobject_name)) (((xself).xct_field))))) ("GenericForeignKeys must use a ForeignKey to 'contenttypes.ContentType' as the 'content_type' field.") ((xself)) ("contenttypes.E003"))))))
                            ((((xfield).xremote_field).xmodel).neq (xContentType)).if
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) (("'%s.%s' is not a ForeignKey to 'contenttypes.ContentType'.".mod (((unsupported)).apply (((((xself).xmodel).x_meta).xobject_name)) (((xself).xct_field))))) ("GenericForeignKeys must use a ForeignKey to 'contenttypes.ContentType' as the 'content_type' field.") ((xself)) ("contenttypes.E004"))))))
                              (((unsupported)).apply ((((unsupported)).apply)))
                xget_cache_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xname)))
                xget_content_type.write
                  [xself xobj xid xusing]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xobj)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply (((((((xContentType).xobjects).xdb_manager)).apply ((((xobj).x_state).xdb))).xget_for_model)) ((xobj)) (((xself).xfor_concrete_model)))))
                          (((unsupported)).apply ((xid)) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply (((((((((xContentType).xobjects).xdb_manager)).apply ((xusing))).xget_for_id)).apply ((xid)))))
                            (((unsupported)).apply ((((xException)).apply ("Impossible arguments to GFK.get_content_type!"))))
                xget_prefetch_queryset.write
                  [xself xinstances xqueryset]
                    memory > xfk_val
                    memory > xret_val
                    memory > xinstance
                    memory > xgfk_key
                    memory > xfk_dict
                    memory > xct_attname
                    memory > xct_id
                    memory > xinstance_dict
                    memory > xct
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xqueryset)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xValueError)).apply ("Custom queryset can't be used for this lookup."))))
                        xfk_dict.write (((xdefaultdict)).apply ((xset)))
                        xinstance_dict.write (((unsupported)).apply)
                        xct_attname.write (((((((((xself).xmodel).x_meta).xget_field)).apply (((xself).xct_field))).xget_attname)).apply)
                        (((unsupported)).apply ((xinstance)) ((xinstances)))
                          seq
                            xct_id.write (((xgetattr)).apply ((xinstance)) ((xct_attname)))
                            (((unsupported)).apply ((xct_id)) ("None: is there a None literal in the EO language?")).if
                              seq
                                xfk_val.write (((xgetattr)).apply ((xinstance)) (((xself).xfk_field)))
                                (((unsupported)).apply ((xfk_val)) ("None: is there a None literal in the EO language?")).if
                                  seq
                                    bogusForceDataize.write ((((((unsupported)).apply ((xfk_dict)) ((xct_id))).xadd)).apply ((xfk_val)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xinstance_dict)) ((xct_id)))) ((xinstance)))
                        xret_val.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xct_id)) ((xfkeys)))) (((((xfk_dict).xitems)).apply)))
                          seq
                            xinstance.write (((unsupported)).apply ((xinstance_dict)) ((xct_id)))
                            xct.write (((unsupported)).apply (((xself).xget_content_type)) ((xct_id)) ((((xinstance).x_state).xdb)))
                            bogusForceDataize.write ((((xret_val).xextend)).apply ((((unsupported)).apply (((xct).xget_all_objects_for_this_type)) ((xfkeys)))))
                        xgfk_key.write
                          [xobj]
                            memory > xct_id
                            memory > xmodel
                            seq > @
                              seq
                                xct_id.write (((xgetattr)).apply ((xobj)) ((xct_attname)))
                                (((unsupported)).apply ((xct_id)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                                  seq
                                    xmodel.write ((((((unsupported)).apply (((xself).xget_content_type)) ((xct_id)) ((((xobj).x_state).xdb))).xmodel_class)).apply)
                                    (((unsupported)).apply ((((unsupported)).apply (((((((xmodel).x_meta).xpk).xget_prep_value)).apply ((((xgetattr)).apply ((xobj)) (((xself).xfk_field)))))) ((xmodel)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xret_val)) ((((unsupported)).apply ((((unsupported)).apply (((xobj).xpk)) (((xobj).x__class__)))))) ((xgfk_key)) (TRUE) (((xself).xname)) (FALSE))))
                x__get__.write
                  [xself xinstance xcls]
                    memory > xpk_match
                    memory > xpk_val
                    memory > xf
                    memory > xct_id
                    memory > xrel_obj
                    memory > xct_match
                    memory > xct
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xself)))
                        xf.write ((((((xself).xmodel).x_meta).xget_field)).apply (((xself).xct_field)))
                        xct_id.write (((xgetattr)).apply ((xinstance)) (((((xf).xget_attname)).apply)) ("None: is there a None literal in the EO language?"))
                        xpk_val.write (((xgetattr)).apply ((xinstance)) (((xself).xfk_field)))
                        xrel_obj.write (((unsupported)).apply (((xself).xget_cached_value)) ((xinstance)) ("None: is there a None literal in the EO language?"))
                        ((((unsupported)).apply ((xrel_obj)) ("None: is there a None literal in the EO language?")).and ((((xself).xis_cached)).apply ((xinstance)))).if
                          (((unsupported)).apply ((xrel_obj)))
                        (((unsupported)).apply ((xrel_obj)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xct_match.write ((xct_id).eq ((((unsupported)).apply (((xself).xget_content_type)) ((xrel_obj)) ((((xinstance).x_state).xdb))).xid))
                            xpk_match.write (((((((xrel_obj).x_meta).xpk).xto_python)).apply ((xpk_val))).eq ((xrel_obj).xpk))
                            ((xct_match).and (xpk_match)).if
                              (((unsupported)).apply ((xrel_obj)))
                              xrel_obj.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xct_id)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xct.write (((unsupported)).apply (((xself).xget_content_type)) ((xct_id)) ((((xinstance).x_state).xdb)))
                            (((unsupported)).apply ((xObjectDoesNotExist)))
                              xrel_obj.write (((unsupported)).apply (((xct).xget_object_for_this_type)) ((xpk_val)))
                        bogusForceDataize.write ((((xself).xset_cached_value)).apply ((xinstance)) ((xrel_obj)))
                        (((unsupported)).apply ((xrel_obj)))
                x__set__.write
                  [xself xinstance xvalue]
                    memory > xct
                    memory > xfk
                    seq > @
                      seq
                        xct.write "None: is there a None literal in the EO language?"
                        xfk.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xct.write (((unsupported)).apply (((xself).xget_content_type)) ((xvalue)))
                            xfk.write ((xvalue).xpk)
                        bogusForceDataize.write (((xsetattr)).apply ((xinstance)) (((xself).xct_field)) ((xct)))
                        bogusForceDataize.write (((xsetattr)).apply ((xinstance)) (((xself).xfk_field)) ((xfk)))
                        bogusForceDataize.write ((((xself).xset_cached_value)).apply ((xinstance)) ((xvalue)))
            (((unsupported)).apply ((xForeignObjectRel)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfield xto xrelated_name xrelated_query_name xlimit_choices_to]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xfield)) ((xto)) (((xrelated_query_name).or "-")) ((xrelated_query_name)) ((xlimit_choices_to)) ((xDO_NOTHING)))
            (((unsupported)).apply ((xForeignObject)))
              seq
                (((unsupported)).apply)
                xauto_created.write FALSE
                xempty_strings_allowed.write FALSE
                xmany_to_many.write FALSE
                xmany_to_one.write FALSE
                xone_to_many.write TRUE
                xone_to_one.write FALSE
                xrel_class.write (xGenericRel)
                xmti_inherited.write FALSE
                x__init__.write
                  [xself xto xobject_id_field xcontent_type_field xfor_concrete_model xrelated_query_name xlimit_choices_to]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("rel"))) ((((unsupported)).apply (((xself).xrel_class)) ((xself)) ((xto)) ((xrelated_query_name)) ((xlimit_choices_to)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("null"))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("blank"))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("on_delete"))) (((xmodels).xCASCADE)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("editable"))) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("serialize"))) (FALSE))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xto)) ((((unsupported)).apply ((xobject_id_field)))) ((((unsupported)).apply)) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xobject_id_field_name)) ((xobject_id_field)))
                        (((unsupported)).apply (((xself).xcontent_type_field_name)) ((xcontent_type_field)))
                        (((unsupported)).apply (((xself).xfor_concrete_model)) ((xfor_concrete_model)))
                xcheck.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((((xsuper)).apply).xcheck)).apply ((((unsupported)).apply ((xkwargs)))))))) ((((unsupported)).apply (((((xself).x_check_generic_foreign_key_existence)).apply)))))))
                x_is_matching_generic_foreign_key.write
                  [xself xfield]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((((xisinstance)).apply ((xfield)) ((xGenericForeignKey))).and (((xfield).xct_field).eq ((xself).xcontent_type_field_name))).and (((xfield).xfk_field).eq ((xself).xobject_id_field_name)))))
                x_check_generic_foreign_key_existence.write
                  [xself]
                    memory > xtarget
                    memory > xfields
                    seq > @
                      seq
                        xtarget.write (((xself).xremote_field).xmodel)
                        (((xisinstance)).apply ((xtarget)) ((xModelBase))).if
                          seq
                            xfields.write (((xtarget).x_meta).xprivate_fields)
                            (((xany)).apply ((((unsupported)).apply (((((xself).x_is_matching_generic_foreign_key)).apply ((xfield)))) ((xfield)) ((xfields))))).if
                              (((unsupported)).apply ((((unsupported)).apply)))
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) (("The GenericRelation defines a relation with the model '%s', but that model does not have a GenericForeignKey.".mod (((xtarget).x_meta).xlabel))) ((xself)) ("contenttypes.E004"))))))
                          (((unsupported)).apply ((((unsupported)).apply)))
                xresolve_related_fields.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xto_fields)) ((((unsupported)).apply ((((((xself).xmodel).x_meta).xpk).xname)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((((((xself).xremote_field).xmodel).x_meta).xget_field)).apply (((xself).xobject_id_field_name)))) (((((xself).xmodel).x_meta).xpk)))))))
                x_get_path_info_with_parent.write
                  [xself xfiltered_relation]
                    memory > xfield
                    memory > xparent_field_chain
                    memory > xopts
                    memory > xparent_opts
                    memory > xpath
                    memory > xtarget
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xpath.write (((unsupported)).apply)
                        xopts.write ((((((xself).xremote_field).xmodel).x_meta).xconcrete_model).x_meta)
                        xparent_opts.write ((((((xopts).xget_field)).apply (((xself).xobject_id_field_name))).xmodel).x_meta)
                        xtarget.write ((xparent_opts).xpk)
                        bogusForceDataize.write ((((xpath).xappend)).apply ((((unsupported)).apply ((xPathInfo)) ((((xself).xmodel).x_meta)) ((xparent_opts)) ((((unsupported)).apply ((xtarget)))) (((xself).xremote_field)) (TRUE) (FALSE) ((xfiltered_relation)))))
                        xparent_field_chain.write (((unsupported)).apply)
                        while.
                          ((xparent_opts).neq (xopts))
                          [unused]
                            seq > @
                              seq
                                xfield.write ((((xopts).xget_ancestor_link)).apply (((xparent_opts).xmodel)))
                                bogusForceDataize.write ((((xparent_field_chain).xappend)).apply ((xfield)))
                                xopts.write ((((xfield).xremote_field).xmodel).x_meta)
                        bogusForceDataize.write ((((xparent_field_chain).xreverse)).apply)
                        (((unsupported)).apply ((xfield)) ((xparent_field_chain)))
                          bogusForceDataize.write ((((xpath).xextend)).apply ((((xfield).xremote_field).xpath_infos)))
                        (((unsupported)).apply ((xpath)))
                xget_path_info.write
                  [xself xfiltered_relation]
                    memory > xopts
                    memory > xtarget
                    memory > xobject_id_field
                    seq > @
                      (((unsupported)).apply)
                        xopts.write ((((xself).xremote_field).xmodel).x_meta)
                        xobject_id_field.write ((((xopts).xget_field)).apply (((xself).xobject_id_field_name)))
                        (((xobject_id_field).xmodel).neq ((xopts).xmodel)).if
                          (((unsupported)).apply (((((xself).x_get_path_info_with_parent)).apply ((xfiltered_relation)))))
                          seq
                            xtarget.write ((xopts).xpk)
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xPathInfo)) ((((xself).xmodel).x_meta)) ((xopts)) ((((unsupported)).apply ((xtarget)))) (((xself).xremote_field)) (TRUE) (FALSE) ((xfiltered_relation)))))))
                xget_reverse_path_info.write
                  [xself xfiltered_relation]
                    memory > xfrom_opts
                    memory > xopts
                    seq > @
                      (((unsupported)).apply)
                        xopts.write (((xself).xmodel).x_meta)
                        xfrom_opts.write ((((xself).xremote_field).xmodel).x_meta)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xPathInfo)) ((xfrom_opts)) ((xopts)) ((((unsupported)).apply (((xopts).xpk)))) ((xself)) ((((xself).xunique).not)) (FALSE) ((xfiltered_relation)))))))
                xvalue_to_string.write
                  [xself xobj]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write ((((((xgetattr)).apply ((xobj)) (((xself).xname))).xall)).apply)
                        (((unsupported)).apply ((((xstr)).apply ((((unsupported)).apply (((xinstance).xpk)) ((xinstance)) ((xqs)))))))
                xcontribute_to_class.write
                  [xself xcls xname]
                    memory > xmake_generic_foreign_order_accessors
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("private_only"))) (TRUE))
                        bogusForceDataize.write ((((((xsuper)).apply).xcontribute_to_class)).apply ((xcls)) ((xname)) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xmodel)) ((xcls)))
                        ((xself).xmti_inherited).if
                          seq
                            (((unsupported)).apply ((((xself).xremote_field).xrelated_name)) ("-"))
                            (((unsupported)).apply ((((xself).xremote_field).xrelated_query_name)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((xsetattr)).apply ((xcls)) (((xself).xname)) ((((xReverseGenericManyToOneDescriptor)).apply (((xself).xremote_field)))))
                        ((((xcls).x_meta).xabstract).not).if
                          seq
                            xmake_generic_foreign_order_accessors.write
                              [xrelated_model xmodel]
                                seq > @
                                  ((((xself).x_is_matching_generic_foreign_key)).apply ((((xmodel).x_meta).xorder_with_respect_to))).if
                                    bogusForceDataize.write (((xmake_foreign_order_accessors)).apply ((xmodel)) ((xrelated_model)))
                            bogusForceDataize.write (((xlazy_related_operation)).apply ((xmake_generic_foreign_order_accessors)) (((xself).xmodel)) ((((xself).xremote_field).xmodel)))
                xset_attributes_from_rel.write
                  [xself]
                    seq > @
                xget_internal_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("ManyToManyField"))
                xget_content_type.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((xContentType).xobjects).xget_for_model)) (((xself).xmodel)) (((xself).xfor_concrete_model)))))
                xget_extra_restriction.write
                  [xself xalias xremote_alias]
                    memory > xcontenttype_pk
                    memory > xfield
                    memory > xlookup
                    seq > @
                      seq
                        xfield.write (((((((xself).xremote_field).xmodel).x_meta).xget_field)).apply (((xself).xcontent_type_field_name)))
                        xcontenttype_pk.write (((((xself).xget_content_type)).apply).xpk)
                        xlookup.write ((((((xfield).xget_lookup)).apply ("exact"))).apply (((((xfield).xget_col)).apply ((xremote_alias)))) ((xcontenttype_pk)))
                        (((unsupported)).apply ((((unsupported)).apply ((xWhereNode)) ((((unsupported)).apply ((xlookup)))) ((xAND)))))
                xbulk_related_objects.write
                  [xself xobjs xusing]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((((((((xself).xremote_field).xmodel).x_base_manager).xdb_manager)).apply ((xusing))).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("%s__pk".mod ((xself).xcontent_type_field_name))) (((((unsupported)).apply (((((((xContentType).xobjects).xdb_manager)).apply ((xusing))).xget_for_model)) (((xself).xmodel)) (((xself).xfor_concrete_model))).xpk)) (("%s__in".mod ((xself).xobject_id_field_name))) ((((unsupported)).apply (((xobj).xpk)) ((xobj)) ((xobjs)))))))))))
            (((unsupported)).apply ((xReverseManyToOneDescriptor)))
              seq
                (((unsupported)).apply)
                xrelated_manager_cls.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xcreate_generic_related_manager)).apply ((((((xself).xrel).xmodel).x_default_manager).x__class__)) (((xself).xrel)))))
                xrelated_manager_cache_key.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).xfield).xget_cache_name)).apply)))
            xcreate_generic_related_manager.write
              [xsuperclass xrel]
                memory > x__call__
                memory > xget_or_create
                memory > xset
                memory > x_apply_rel_filters
                memory > x_clear
                memory > x__init__
                memory > xadd
                memory > xdo_not_call_in_templates
                memory > xcreate
                memory > x_remove_prefetched_objects
                memory > xremove
                memory > x__str__
                memory > xget_prefetch_queryset
                memory > xupdate_or_create
                memory > xget_queryset
                memory > xclear
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xsuperclass)))
                      seq
                        x__init__.write
                          [xself xinstance]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                                (((unsupported)).apply (((xself).xinstance)) ((xinstance)))
                                (((unsupported)).apply (((xself).xmodel)) (((xrel).xmodel)))
                                (((unsupported)).apply (((xself).xget_content_type)) ((((unsupported)).apply (((xfunctools).xpartial)) (((((((xContentType).xobjects).xdb_manager)).apply ((((xinstance).x_state).xdb))).xget_for_model)) ((((xrel).xfield).xfor_concrete_model)))))
                                (((unsupported)).apply (((xself).xcontent_type)) (((((xself).xget_content_type)).apply ((xinstance)))))
                                (((unsupported)).apply (((xself).xcontent_type_field_name)) ((((xrel).xfield).xcontent_type_field_name)))
                                (((unsupported)).apply (((xself).xobject_id_field_name)) ((((xrel).xfield).xobject_id_field_name)))
                                (((unsupported)).apply (((xself).xprefetch_cache_name)) ((((xrel).xfield).xattname)))
                                (((unsupported)).apply (((xself).xpk_val)) (((xinstance).xpk)))
                                (((unsupported)).apply (((xself).xcore_filters)) ((((unsupported)).apply (("%s__pk".mod ((xself).xcontent_type_field_name))) ((((xself).xcontent_type).xid)) (((xself).xobject_id_field_name)) (((xself).xpk_val)))))
                        x__call__.write
                          [xself xmanager]
                            memory > xmanager_class
                            seq > @
                              (((unsupported)).apply)
                                xmanager.write (((xgetattr)).apply (((xself).xmodel)) ((xmanager)))
                                xmanager_class.write (((xcreate_generic_related_manager)).apply (((xmanager).x__class__)) ((xrel)))
                                (((unsupported)).apply ((((unsupported)).apply ((xmanager_class)) (((xself).xinstance)))))
                        xdo_not_call_in_templates.write TRUE
                        x__str__.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((xrepr)).apply ((xself)))))
                        x_apply_rel_filters.write
                          [xself xqueryset]
                            memory > xdb
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xdb.write (((xself).x_db).or (((unsupported)).apply (((xrouter).xdb_for_read)) (((xself).xmodel)) (((xself).xinstance))))
                                (((unsupported)).apply ((((((((xqueryset).xusing)).apply ((xdb))).xfilter)).apply ((((unsupported)).apply (((xself).xcore_filters)))))))
                        x_remove_prefetched_objects.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xKeyError)))))
                                bogusForceDataize.write ((((((xself).xinstance).x_prefetched_objects_cache).xpop)).apply (((xself).xprefetch_cache_name)))
                        xget_queryset.write
                          [xself]
                            memory > xqueryset
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xKeyError)))))
                                (((unsupported)).apply ((((unsupported)).apply ((((xself).xinstance).x_prefetched_objects_cache)) (((xself).xprefetch_cache_name)))))
                                seq
                                  xqueryset.write ((((((xsuper)).apply).xget_queryset)).apply)
                                  (((unsupported)).apply (((((xself).x_apply_rel_filters)).apply ((xqueryset)))))
                        xget_prefetch_queryset.write
                          [xself xinstances xqueryset]
                            memory > xcontent_type_queries
                            memory > xcontent_type_id_field_name
                            memory > xobject_id_converter
                            memory > xquery
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xqueryset)) ("None: is there a None literal in the EO language?")).if
                                  xqueryset.write ((((((xsuper)).apply).xget_queryset)).apply)
                                (((unsupported)).apply (((xqueryset).x_add_hints)) ((((unsupported)).apply ((xinstances)) (0))))
                                xqueryset.write ((((xqueryset).xusing)).apply ((((xqueryset).x_db).or ((xself).x_db))))
                                xcontent_type_queries.write (((unsupported)).apply (((((xmodels).xQ)).apply ((((unsupported)).apply ("{self.content_type_field_name}__pk") ((xcontent_type_id)))) ((((unsupported)).apply ("{self.object_id_field_name}__in") ((((unsupported)).apply (((xobj).xpk)) ((xobj)) ((xobjs)))))))) ((((unsupported)).apply ((xcontent_type_id)) ((xobjs)))) (((((xitertools).xgroupby)).apply ((((unsupported)).apply ((xsorted)) ((xinstances)) ((((unsupported)).apply ((((((xself).xget_content_type)).apply ((xobj))).xpk)))))) ((((unsupported)).apply ((((((xself).xget_content_type)).apply ((xobj))).xpk)))))))
                                xquery.write (((unsupported)).apply (((xmodels).xQ)) ((((unsupported)).apply ((xcontent_type_queries)))) ((((xmodels).xQ).xOR)))
                                xobject_id_converter.write ((((((unsupported)).apply ((xinstances)) (0)).x_meta).xpk).xto_python)
                                xcontent_type_id_field_name.write ("%s_id".mod ((xself).xcontent_type_field_name))
                                (((unsupported)).apply ((((unsupported)).apply (((((xqueryset).xfilter)).apply ((xquery)))) ((((unsupported)).apply ((((unsupported)).apply ((((xobject_id_converter)).apply ((((xgetattr)).apply ((xrelobj)) (((xself).xobject_id_field_name)))))) ((((xgetattr)).apply ((xrelobj)) ((xcontent_type_id_field_name)))))))) ((((unsupported)).apply ((((unsupported)).apply (((xobj).xpk)) ((((((xself).xget_content_type)).apply ((xobj))).xpk)))))) (FALSE) (((xself).xprefetch_cache_name)) (FALSE))))
                        xadd.write
                          [xself xbulk]
                            memory > xpks
                            memory > xdb
                            memory > xcheck_and_update_obj
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_remove_prefetched_objects)).apply)
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                xcheck_and_update_obj.write
                                  [xobj]
                                    seq > @
                                      seq
                                        ((((xisinstance)).apply ((xobj)) (((xself).xmodel))).not).if
                                          (((unsupported)).apply ((((xTypeError)).apply (("'%s' instance expected, got %r".mod (((unsupported)).apply (((((xself).xmodel).x_meta).xobject_name)) ((xobj))))))))
                                        bogusForceDataize.write (((xsetattr)).apply ((xobj)) (((xself).xcontent_type_field_name)) (((xself).xcontent_type)))
                                        bogusForceDataize.write (((xsetattr)).apply ((xobj)) (((xself).xobject_id_field_name)) (((xself).xpk_val)))
                                (xbulk).if
                                  seq
                                    xpks.write (((unsupported)).apply)
                                    (((unsupported)).apply ((xobj)) ((xobjs)))
                                      seq
                                        ((((xobj).x_state).xadding).or ((((xobj).x_state).xdb).neq (xdb))).if
                                          (((unsupported)).apply ((((xValueError)).apply (("%r instance isn't saved. Use bulk=False or save the object first.".mod (xobj))))))
                                        bogusForceDataize.write (((xcheck_and_update_obj)).apply ((xobj)))
                                        bogusForceDataize.write ((((xpks).xappend)).apply (((xobj).xpk)))
                                    bogusForceDataize.write ((((((unsupported)).apply ((((((((xself).xmodel).x_base_manager).xusing)).apply ((xdb))).xfilter)) ((xpks))).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcontent_type_field_name)) (((xself).xcontent_type)) (((xself).xobject_id_field_name)) (((xself).xpk_val)))))))
                                  (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) (FALSE))))
                                    (((unsupported)).apply ((xobj)) ((xobjs)))
                                      seq
                                        bogusForceDataize.write (((xcheck_and_update_obj)).apply ((xobj)))
                                        bogusForceDataize.write ((((xobj).xsave)).apply)
                        (((unsupported)).apply (((xadd).xalters_data)) (TRUE))
                        xremove.write
                          [xself xbulk]
                            seq > @
                              (((unsupported)).apply)
                                ((xobjs).not).if
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_clear)).apply ((((unsupported)).apply (((xself).xfilter)) ((((unsupported)).apply (((xo).xpk)) ((xo)) ((xobjs)))))) ((xbulk)))
                        (((unsupported)).apply (((xremove).xalters_data)) (TRUE))
                        xclear.write
                          [xself xbulk]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_clear)).apply ((xself)) ((xbulk)))
                        (((unsupported)).apply (((xclear).xalters_data)) (TRUE))
                        x_clear.write
                          [xself xqueryset xbulk]
                            memory > xdb
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).x_remove_prefetched_objects)).apply)
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                xqueryset.write ((((xqueryset).xusing)).apply ((xdb)))
                                (xbulk).if
                                  bogusForceDataize.write ((((xqueryset).xdelete)).apply)
                                  (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) (FALSE))))
                                    (((unsupported)).apply ((xobj)) ((xqueryset)))
                                      bogusForceDataize.write ((((xobj).xdelete)).apply)
                        (((unsupported)).apply (((x_clear).xalters_data)) (TRUE))
                        xset.write
                          [xself xobjs xbulk xclear]
                            memory > xdb
                            memory > xold_objs
                            memory > xnew_objs
                            seq > @
                              (((unsupported)).apply)
                                xobjs.write (((xtuple)).apply ((xobjs)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                (((unsupported)).apply ((((unsupported)).apply (((xtransaction).xatomic)) ((xdb)) (FALSE))))
                                  (xclear).if
                                    seq
                                      bogusForceDataize.write ((((xself).xclear)).apply)
                                      (((unsupported)).apply (((xself).xadd)) ((((unsupported)).apply ((xobjs)))) ((xbulk)))
                                    seq
                                      xold_objs.write (((xset)).apply ((((((((xself).xusing)).apply ((xdb))).xall)).apply)))
                                      xnew_objs.write (((unsupported)).apply)
                                      (((unsupported)).apply ((xobj)) ((xobjs)))
                                        (((unsupported)).apply ((xobj)) ((xold_objs))).if
                                          bogusForceDataize.write ((((xold_objs).xremove)).apply ((xobj)))
                                          bogusForceDataize.write ((((xnew_objs).xappend)).apply ((xobj)))
                                      bogusForceDataize.write ((((xself).xremove)).apply ((((unsupported)).apply ((xold_objs)))))
                                      (((unsupported)).apply (((xself).xadd)) ((((unsupported)).apply ((xnew_objs)))) ((xbulk)))
                        (((unsupported)).apply (((xset).xalters_data)) (TRUE))
                        xcreate.write
                          [xself]
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).x_remove_prefetched_objects)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) (((xself).xcontent_type_field_name)))) (((xself).xcontent_type)))
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) (((xself).xobject_id_field_name)))) (((xself).xpk_val)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                (((unsupported)).apply ((((((((((xsuper)).apply).xusing)).apply ((xdb))).xcreate)).apply ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((xcreate).xalters_data)) (TRUE))
                        xget_or_create.write
                          [xself]
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) (((xself).xcontent_type_field_name)))) (((xself).xcontent_type)))
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) (((xself).xobject_id_field_name)))) (((xself).xpk_val)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                (((unsupported)).apply ((((((((((xsuper)).apply).xusing)).apply ((xdb))).xget_or_create)).apply ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((xget_or_create).xalters_data)) (TRUE))
                        xupdate_or_create.write
                          [xself]
                            memory > xdb
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) (((xself).xcontent_type_field_name)))) (((xself).xcontent_type)))
                                (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) (((xself).xobject_id_field_name)))) (((xself).xpk_val)))
                                xdb.write (((unsupported)).apply (((xrouter).xdb_for_write)) (((xself).xmodel)) (((xself).xinstance)))
                                (((unsupported)).apply ((((((((((xsuper)).apply).xusing)).apply ((xdb))).xupdate_or_create)).apply ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((xupdate_or_create).xalters_data)) (TRUE))
                    (((unsupported)).apply ((xGenericRelatedObjectManager)))