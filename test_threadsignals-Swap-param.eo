memory > xThreadSignals
memory > xKeyboardInterrupt
memory > xsignal
memory > xrange
memory > x_
memory > xsignal_blackboard
memory > xtime
memory > xos
memory > xunittest
memory > x__name__
memory > xsupport
memory > xsys
[] > test_threadsignals
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xspawnSignallingThread
        memory > xsend_signals
        memory > xtest_rlock_acquire_interruption
        memory > xUSING_PTHREAD_COND
        memory > xacquire_retries_on_intr
        memory > xhandle_signals
        memory > xtest_main
        memory > xsignalled_all
        memory > xtest_lock_acquire_retries_on_intr
        memory > xregisterSignals
        memory > xthread
        memory > xprocess_pid
        memory > xtest_lock_acquire_interruption
        memory > xtest_interrupted_timed_acquire
        memory > xtest_signals
        memory > xtest_rlock_acquire_retries_on_intr
        memory > xalarm_interrupt
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            ((((unsupported)).apply (((xsys).xplatform)) ((((unsupported)).apply (3)))).eq "win").if
              (((unsupported)).apply (((((xunittest).xSkipTest)).apply (("Can't test signal on %s".mod ((xsys).xplatform))))))
            xprocess_pid.write ((((xos).xgetpid)).apply)
            xsignalled_all.write ((((xthread).xallocate_lock)).apply)
            xUSING_PTHREAD_COND.write (((((xsys).xthread_info).xname).eq "pthread").and ((((xsys).xthread_info).xlock).eq "mutex+cond"))
            xregisterSignals.write
              [xfor_usr1 xfor_usr2 xfor_alrm]
                memory > xusr2
                memory > xalrm
                memory > xusr1
                seq > @
                  seq
                    xusr1.write ((((xsignal).xsignal)).apply (((xsignal).xSIGUSR1)) ((xfor_usr1)))
                    xusr2.write ((((xsignal).xsignal)).apply (((xsignal).xSIGUSR2)) ((xfor_usr2)))
                    xalrm.write ((((xsignal).xsignal)).apply (((xsignal).xSIGALRM)) ((xfor_alrm)))
                    (((unsupported)).apply ((((unsupported)).apply ((xusr1)) ((xusr2)) ((xalrm)))))
            xhandle_signals.write
              [xsig xframe]
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsignal_blackboard)) ((xsig)))) ("tripped"))) (1))
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsignal_blackboard)) ((xsig)))) ("tripped_by"))) (((((xthread).xget_ident)).apply)))
            xsend_signals.write
              []
                seq > @
                  seq
                    bogusForceDataize.write ((((xos).xkill)).apply ((xprocess_pid)) (((xsignal).xSIGUSR1)))
                    bogusForceDataize.write ((((xos).xkill)).apply ((xprocess_pid)) (((xsignal).xSIGUSR2)))
                    bogusForceDataize.write ((((xsignalled_all).xrelease)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_signals.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xsupport).xwait_threads_exit)).apply)))
                          seq
                            bogusForceDataize.write ((((xsignalled_all).xacquire)).apply)
                            bogusForceDataize.write ((((xself).xspawnSignallingThread)).apply)
                            bogusForceDataize.write ((((xsignalled_all).xacquire)).apply)
                        (((((unsupported)).apply ((((unsupported)).apply ((xsignal_blackboard)) (((xsignal).xSIGUSR1)))) ("tripped")).eq 0).or ((((unsupported)).apply ((((unsupported)).apply ((xsignal_blackboard)) (((xsignal).xSIGUSR2)))) ("tripped")).eq 0)).if
                          (((unsupported)).apply)
                            seq
                              bogusForceDataize.write ((((xsignal).xalarm)).apply (1))
                              bogusForceDataize.write ((((xsignal).xpause)).apply)
                            bogusForceDataize.write ((((xsignal).xalarm)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsignal_blackboard)) (((xsignal).xSIGUSR1)))) ("tripped"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsignal_blackboard)) (((xsignal).xSIGUSR1)))) ("tripped_by"))) (((((xthread).xget_ident)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsignal_blackboard)) (((xsignal).xSIGUSR2)))) ("tripped"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsignal_blackboard)) (((xsignal).xSIGUSR2)))) ("tripped_by"))) (((((xthread).xget_ident)).apply)))
                        bogusForceDataize.write ((((xsignalled_all).xrelease)).apply)
                xspawnSignallingThread.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xthread).xstart_new_thread)).apply ((xsend_signals)) ((((unsupported)).apply)))
                xalarm_interrupt.write
                  [xself xsig xframe]
                    seq > @
                      (((unsupported)).apply ((xKeyboardInterrupt)))
                xtest_lock_acquire_interruption.write
                  [xself]
                    memory > xlock
                    memory > xt1
                    memory > xoldalrm
                    memory > xdt
                    seq > @
                      (((unsupported)).apply)
                        xoldalrm.write ((((xsignal).xsignal)).apply (((xsignal).xSIGALRM)) (((xself).xalarm_interrupt)))
                        (((unsupported)).apply)
                          seq
                            xlock.write ((((xthread).xallocate_lock)).apply)
                            bogusForceDataize.write ((((xlock).xacquire)).apply)
                            bogusForceDataize.write ((((xsignal).xalarm)).apply (1))
                            xt1.write ((((xtime).xmonotonic)).apply)
                            (((unsupported)).apply (((xself).xassertRaises)) ((xKeyboardInterrupt)) (((xlock).xacquire)) (5))
                            xdt.write (((((xtime).xmonotonic)).apply).sub (xt1))
                            bogusForceDataize.write ((((xself).xassertLess)).apply ((xdt)) (3.0))
                          seq
                            bogusForceDataize.write ((((xsignal).xalarm)).apply (0))
                            bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGALRM)) ((xoldalrm)))
                xtest_rlock_acquire_interruption.write
                  [xself]
                    memory > xrlock
                    memory > xdt
                    memory > xoldalrm
                    memory > xother_thread
                    memory > xt1
                    seq > @
                      (((unsupported)).apply)
                        xoldalrm.write ((((xsignal).xsignal)).apply (((xsignal).xSIGALRM)) (((xself).xalarm_interrupt)))
                        (((unsupported)).apply)
                          seq
                            xrlock.write ((((xthread).xRLock)).apply)
                            xother_thread.write
                              []
                                seq > @
                                  bogusForceDataize.write ((((xrlock).xacquire)).apply)
                            (((unsupported)).apply (((((xsupport).xwait_threads_exit)).apply)))
                              seq
                                bogusForceDataize.write ((((xthread).xstart_new_thread)).apply ((xother_thread)) ((((unsupported)).apply)))
                                while.
                                  (((unsupported)).apply (((xrlock).xacquire)) (FALSE))
                                  [unused]
                                    seq > @
                                      seq
                                        bogusForceDataize.write ((((xrlock).xrelease)).apply)
                                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                                bogusForceDataize.write ((((xsignal).xalarm)).apply (1))
                                xt1.write ((((xtime).xmonotonic)).apply)
                                (((unsupported)).apply (((xself).xassertRaises)) ((xKeyboardInterrupt)) (((xrlock).xacquire)) (5))
                                xdt.write (((((xtime).xmonotonic)).apply).sub (xt1))
                                bogusForceDataize.write ((((xself).xassertLess)).apply ((xdt)) (3.0))
                          seq
                            bogusForceDataize.write ((((xsignal).xalarm)).apply (0))
                            bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGALRM)) ((xoldalrm)))
                xacquire_retries_on_intr.write
                  [xself xlock]
                    memory > xmy_handler
                    memory > xresult
                    memory > xother_thread
                    memory > xold_handler
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xsig_recvd)) (FALSE))
                        xmy_handler.write
                          [xsignal xframe]
                            seq > @
                              (((unsupported)).apply (((xself).xsig_recvd)) (TRUE))
                        xold_handler.write ((((xsignal).xsignal)).apply (((xsignal).xSIGUSR1)) ((xmy_handler)))
                        (((unsupported)).apply)
                          seq
                            xother_thread.write
                              []
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xlock).xacquire)).apply)
                                    bogusForceDataize.write ((((xtime).xsleep)).apply (0.5))
                                    bogusForceDataize.write ((((xos).xkill)).apply ((xprocess_pid)) (((xsignal).xSIGUSR1)))
                                    bogusForceDataize.write ((((xtime).xsleep)).apply (0.5))
                                    bogusForceDataize.write ((((xlock).xrelease)).apply)
                            (((unsupported)).apply (((((xsupport).xwait_threads_exit)).apply)))
                              seq
                                bogusForceDataize.write ((((xthread).xstart_new_thread)).apply ((xother_thread)) ((((unsupported)).apply)))
                                while.
                                  (((unsupported)).apply (((xlock).xacquire)) (FALSE))
                                  [unused]
                                    seq > @
                                      seq
                                        bogusForceDataize.write ((((xlock).xrelease)).apply)
                                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.01))
                                xresult.write ((((xlock).xacquire)).apply)
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((xself).xsig_recvd)))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((xresult)))
                          bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGUSR1)) ((xold_handler)))
                xtest_lock_acquire_retries_on_intr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xacquire_retries_on_intr)).apply (((((xthread).xallocate_lock)).apply)))
                xtest_rlock_acquire_retries_on_intr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xacquire_retries_on_intr)).apply (((((xthread).xRLock)).apply)))
                xtest_interrupted_timed_acquire.write
                  [xself]
                    memory > xsend_signals
                    memory > xmy_handler
                    memory > xtimed_acquire
                    memory > xdone
                    memory > xold_handler
                    memory > xlock
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xstart)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xend)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xsigs_recvd)) (0))
                        xdone.write ((((xthread).xallocate_lock)).apply)
                        bogusForceDataize.write ((((xdone).xacquire)).apply)
                        xlock.write ((((xthread).xallocate_lock)).apply)
                        bogusForceDataize.write ((((xlock).xacquire)).apply)
                        xmy_handler.write
                          [xsignum xframe]
                            seq > @
                              (((unsupported)).apply (((xself).xsigs_recvd)) (1))
                        xold_handler.write ((((xsignal).xsignal)).apply (((xsignal).xSIGUSR1)) ((xmy_handler)))
                        (((unsupported)).apply)
                          seq
                            xtimed_acquire.write
                              []
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xstart)) (((((xtime).xmonotonic)).apply)))
                                    (((unsupported)).apply (((xlock).xacquire)) (0.5))
                                    (((unsupported)).apply (((xself).xend)) (((((xtime).xmonotonic)).apply)))
                            xsend_signals.write
                              []
                                seq > @
                                  seq
                                    (((unsupported)).apply ((x_)) ((((xrange)).apply (40))))
                                      seq
                                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.02))
                                        bogusForceDataize.write ((((xos).xkill)).apply ((xprocess_pid)) (((xsignal).xSIGUSR1)))
                                    bogusForceDataize.write ((((xdone).xrelease)).apply)
                            (((unsupported)).apply (((((xsupport).xwait_threads_exit)).apply)))
                              seq
                                bogusForceDataize.write ((((xthread).xstart_new_thread)).apply ((xsend_signals)) ((((unsupported)).apply)))
                                bogusForceDataize.write (((xtimed_acquire)).apply)
                                bogusForceDataize.write ((((xdone).xacquire)).apply)
                                bogusForceDataize.write ((((xself).xassertLess)).apply ((((xself).xend).sub ((xself).xstart))) (2.0))
                                bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xself).xend).sub ((xself).xstart))) (0.3))
                                bogusForceDataize.write ((((xself).xassertGreater)).apply (((xself).xsigs_recvd)) (0))
                          bogusForceDataize.write ((((xsignal).xsignal)).apply (((xsignal).xSIGUSR1)) ((xold_handler)))
            xtest_main.write
              []
                memory > xsignal_blackboard
                memory > xoldsigs
                seq > @
                  seq
                    (((unsupported)).apply)
                    xsignal_blackboard.write (((unsupported)).apply (((xsignal).xSIGUSR1)) ((((unsupported)).apply ("tripped") (0) ("tripped_by") (0))) (((xsignal).xSIGUSR2)) ((((unsupported)).apply ("tripped") (0) ("tripped_by") (0))) (((xsignal).xSIGALRM)) ((((unsupported)).apply ("tripped") (0) ("tripped_by") (0))))
                    xoldsigs.write (((xregisterSignals)).apply ((xhandle_signals)) ((xhandle_signals)) ((xhandle_signals)))
                    (((unsupported)).apply)
                      bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((xThreadSignals)))
                      bogusForceDataize.write (((xregisterSignals)).apply ((((unsupported)).apply ((xoldsigs)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)