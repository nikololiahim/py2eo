memory > xValueError
memory > x_
memory > xKeyError
memory > xUstarReadTest
memory > xUnicodeError
memory > xk
memory > xscript_helper
memory > xDetectReadTest
memory > xMyBytesIO
memory > xRandom
memory > xImportError
memory > xAttributeError
memory > xrc
memory > xc
memory > xopt
memory > xAppendTestBase
memory > xlist
memory > xfilename_2
memory > xRuntimeError
memory > xWriteTestBase
memory > xCreateTest
memory > xtardata
memory > xtobj
memory > xtarfile
memory > xReadTest
memory > xpwd
memory > xCommonReadTest
memory > xstr
memory > xio
memory > xout
memory > xtarinfo
memory > xAssertionError
memory > xFileNotFoundError
memory > xt
memory > xBz2Test
memory > xLzmaTest
memory > xBadFile
memory > xrange
memory > xsize
memory > xtarfl
memory > xfiletype
memory > xb
memory > xNumericOwnerTest
memory > xexctype
memory > xgrp
memory > xchar
memory > xStreamReadTest
memory > xGNUWriteTest
memory > xerr
memory > xtf
memory > xtype
memory > xpathlib
memory > xfobj2
memory > xmock_listdir
memory > xint
memory > xsha256
memory > xcontents
memory > xf
memory > xException
memory > xhasattr
memory > xx
memory > xLongnameTest
memory > xUnicodeTest
memory > xsuper
memory > xsupport
memory > xsys
memory > xWriteTest
memory > xm1
memory > xbytes
memory > xdirname_1
memory > xm
memory > xgid
memory > xfloat
memory > xsrc
memory > xfobj1
memory > xGzipTest
memory > xargs
memory > xOSError
memory > xos
memory > xencoding
memory > xMiscReadTestBase
memory > xtesttarnames
memory > xval
memory > xgetattr
memory > xv
memory > xPermissionError
memory > xtar
memory > xe
memory > xtar_name
memory > xuid
memory > xname
memory > xzip
memory > xunittest
memory > xexc
memory > xEOFError
memory > xTarTest
memory > xfobj
memory > xobject
memory > xListTest
memory > xfilename_1
memory > xtyp
memory > xStreamWriteTest
memory > xkwargs
memory > xm2
memory > xisinstance
memory > xlen
memory > xFileExistsError
memory > xTypeError
memory > x__name__
memory > xkey
memory > xa
[] > test_tarfile
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_open_nonwritable_fileobj
        memory > xtest_find_gnusparse_00
        memory > xtest_find_umlauts
        memory > xtest_longlink_1023
        memory > xtest_fileobj_with_offset
        memory > xtest_parallel_iteration
        memory > xtest_check_members
        memory > x_make_test_archive
        memory > xtest_hardlink_extraction2
        memory > xtest_find_gnusparse_10
        memory > xtest_incomplete
        memory > xtest_cwd
        memory > xtest_extract_without_numeric_owner
        memory > xtest_fileobj_iter
        memory > xtest_fileobj_symlink1
        memory > xtest__all__
        memory > xtest_detect_fileobj
        memory > xtest_fileobj_link1
        memory > xtest_unicode_argument
        memory > xtest_link_size
        memory > xtest_empty_tarfile
        memory > xtest_pax_number_fields
        memory > xsha256_sparse
        memory > xtest_unicode_longname2
        memory > xtest_non_existent_tarfile
        memory > xtest_file_mode
        memory > xtest_find_dirtype_with_size
        memory > xxzname
        memory > xtest_premature_eof
        memory > xtest_stream_padding
        memory > xtest_extract_command_invalid_file
        memory > x_testfunc_fileobj
        memory > xsha256_regtype
        memory > xtest_bad_use
        memory > xtest_eof_marker
        memory > xfile_path
        memory > xtest_truncated_longname
        memory > xtest_init_close_fobj
        memory > xmode
        memory > xbz2name
        memory > xtest_trailing_garbage
        memory > xtarfilecmd_failure
        memory > xtaropen
        memory > xdotlessname
        memory > xtest_pathnames
        memory > xtest_create_command_verbose
        memory > xtest_uname_unicode
        memory > xtest_longname_1025
        memory > xtest_list_command_invalid_file
        memory > xtest_file_size
        memory > xtarextdir
        memory > xtest_create
        memory > xtest_filter
        memory > xtest_bytes_name_attribute
        memory > xtest_pax_limits
        memory > xtest_longnamelink_1025
        memory > xtmpname
        memory > xtest_create_pathlike_name
        memory > xtest_header_offset
        memory > xtest_sparse_file_01
        memory > xtest_find_fifotype
        memory > xtest_fileobj_link2
        memory > xtest_unicode_longname3
        memory > x_test_error
        memory > xtest_pax_extended_header
        memory > xtest_xstar_type
        memory > xtest_keyword_only
        memory > xtest_read_through
        memory > xtest_read_longlink
        memory > xtest_append_compressed
        memory > xtest_eof
        memory > xtest_illegal_mode_arg
        memory > x_test_ustar_name
        memory > x_create_testtar
        memory > xtest_partial_input
        memory > xtest_create_command
        memory > x_calc_size
        memory > xtest_fileobj_no_close
        memory > xtest_fileobj_text
        memory > xtest_write_number_fields
        memory > xtest_create_command_dotless_filename
        memory > xtest_symlink_extraction1
        memory > xtest_list_verbose
        memory > xtest_fileobj_symlink2
        memory > xroot_is_uid_gid_0
        memory > xtest_find_pax_umlauts
        memory > x_test_ustar_link
        memory > xtest_unicode_filename_error
        memory > xtearDownClass
        memory > xtest_extract_command
        memory > xtest_ordered_recursion
        memory > xtearDownModule
        memory > xtest_read_longname
        memory > xtest_longname_1024
        memory > xprefix
        memory > xtarfilecmd
        memory > xtest_extractall_pathlike_name
        memory > xtest_fileobj_regular_file
        memory > xtest_extractall
        memory > xtest_abs_pathnames
        memory > xtest_extract_with_numeric_owner
        memory > xtest_find_regtype
        memory > x_test_fileobj_link
        memory > xtest_unicode_name2
        memory > xtest_partial_input_bz2
        memory > xtest_unicode_link1
        memory > xtest_no_name_argument
        memory > xsetUp
        memory > xsetUpClass
        memory > xtest_extract_hardlink
        memory > xtest_extractall_symlinks
        memory > x_test_pathname
        memory > xtarname
        memory > xtest_find_gnusparse_01
        memory > xtest_premature_end_of_archive
        memory > xtest_iso8859_1_filename
        memory > xtest_find_sparse
        memory > xtest_pax_global_headers
        memory > xtest_find_gnusparse
        memory > xtest_no_name_attribute
        memory > xtest_longnamelink_1024
        memory > xtest_gnu_limits
        memory > xtest_dereference_hardlink
        memory > xtest_ignore_zeros
        memory > x_fs_supports_holes
        memory > xtest_int_name_attribute
        memory > xopen
        memory > xlongnametype
        memory > xtest_extract_command_different_directory
        memory > xtest_fileobj_readlines
        memory > xtest_null
        memory > xtest_test_command_invalid_file
        memory > xtest_longname_1023
        memory > xtest_issue14160
        memory > xgzipname
        memory > xtest_find_ustar_longname
        memory > xtest_create_taropen_pathlike_name
        memory > xtest_find_regtype_oldv7
        memory > xtest_symlink_extraction2
        memory > xtest_extract_directory
        memory > xtest_empty_name_attribute
        memory > xtest_list_command
        memory > xtest_create_command_compressed
        memory > xdecompressor
        memory > xtest_utf7_filename
        memory > xtest_create_command_dot_started_filename
        memory > xtest_sparse_file_old
        memory > xtest_find_lnktype
        memory > xtest_longlink_1025
        memory > xtest_basic
        memory > xtest_find_chrtype
        memory > xmake_simple_tarfile
        memory > xtest_extract_command_verbose
        memory > xgzip
        memory > xtest_find_symtype
        memory > xtest_read_number_fields
        memory > xtest_detect_stream_bz2
        memory > xtest_list_command_verbose
        memory > xtest_v7_dirtype
        memory > x_test_partial_input
        memory > xtest_create_existing_taropen
        memory > x_test
        memory > xbz2
        memory > xtest_unicode_link2
        memory > xtest_non_existing
        memory > xtest_fileobj
        memory > xtest_create_existing
        memory > xtest_char_fields
        memory > xtest_exception
        memory > xtest_add_hardlink
        memory > x_test_unicode_filename
        memory > xrequires_name_attribute
        memory > xtest_unicode_name1
        memory > xtest_bad_pax_header
        memory > xsha256sum
        memory > x_testfunc_file
        memory > xtest_find_blktype
        memory > x_test_link_extraction
        memory > xtest_unicode_longname4
        memory > xtest_null_tarfile
        memory > xtest_empty_fileobj
        memory > xtest_compare_members
        memory > xtest_closed
        memory > xtest_unicode_longname1
        memory > xtest_extract_pathlike_name
        memory > xtest_longnamelink_1023
        memory > xtest_invalid
        memory > xtest_binary_header
        memory > xtest_test_command_verbose
        memory > xtest_100_char_name
        memory > xtest_pathlike_name
        memory > x_length
        memory > xtest_existing
        memory > xformat
        memory > x_test_sparse_file
        memory > xtest_add_twice
        memory > xtest_find_dirtype
        memory > xtest_no_eof
        memory > xtest_list_members
        memory > xtest_add_self
        memory > xsuffix
        memory > xtest_hardlink_extraction1
        memory > xtest_number_field_limits
        memory > xtest_utf8_filename
        memory > xtest_extractall_with_numeric_owner
        memory > xtest_empty
        memory > xtest_test_command
        memory > xtest_detect_file
        memory > xtest_longlink_1024
        memory > xtest_sparse_file_00
        memory > x_test_modes
        memory > xtearDown
        memory > xtest_directory_size
        memory > xtest_tar_size
        memory > x_add_testfile
        memory > xtest_find_members
        memory > xtest_symlink_size
        memory > xsubdir
        memory > xtest_fileobj_seek
        memory > xtest_provoke_stream_error
        memory > xtest_gettarinfo_pathlike_name
        memory > xtest_find_conttype
        memory > xsetUpModule
        memory > xtest_sparse_file_10
        memory > xtest_length_zero_header
        memory > xtest_ustar_limits
        memory > xtest_pax_global_header
        memory > xtest_fail_comp
        memory > x_test_member
        memory > xtest_source_directory_not_leaked
        memory > x_setup_test
        memory > xtest_create_taropen
        memory > xlzma
        memory > xtest_list
        memory > xTEMPDIR
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xgzip.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xbz2.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xlzma.write "None: is there a None literal in the EO language?"
            xsha256sum.write
              [xdata]
                seq > @
                  (((unsupported)).apply (((((((xsha256)).apply ((xdata))).xhexdigest)).apply)))
            xTEMPDIR.write ((((((xos).xpath).xabspath)).apply (((xsupport).xTESTFN))).sub "-tardir")
            xtarextdir.write ((xTEMPDIR).sub "-extract-test")
            xtarname.write ((((xsupport).xfindfile)).apply ("testtar.tar"))
            xgzipname.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("testtar.tar.gz"))
            xbz2name.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("testtar.tar.bz2"))
            xxzname.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("testtar.tar.xz"))
            xtmpname.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("tmp.tar"))
            xdotlessname.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("testtar"))
            xsha256_regtype.write "e09e4bc8b3c9d9177e77256353b36c159f5f040531bbd4b024a8f9b9196c71ce"
            xsha256_sparse.write "4f05a776071146756345ceee937b33fc5644f5a96b9780d1c7d6a32cdf164d7b"
            (((unsupported)).apply)
              seq
                xtarname.write (xtarname)
                xsuffix.write ""
                xopen.write ((xio).xFileIO)
                xtaropen.write (((xtarfile).xTarFile).xtaropen)
                xmode.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xprefix).sub ((xself).xsuffix))))
            (((unsupported)).apply (((xsupport).xrequires_gzip)))
              seq
                xtarname.write (xgzipname)
                xsuffix.write "gz"
                xopen.write ((xgzip).if ((xgzip).xGzipFile) "None: is there a None literal in the EO language?")
                xtaropen.write (((xtarfile).xTarFile).xgzopen)
            (((unsupported)).apply (((xsupport).xrequires_bz2)))
              seq
                xtarname.write (xbz2name)
                xsuffix.write "bz2"
                xopen.write ((xbz2).if ((xbz2).xBZ2File) "None: is there a None literal in the EO language?")
                xtaropen.write (((xtarfile).xTarFile).xbz2open)
            (((unsupported)).apply (((xsupport).xrequires_lzma)))
              seq
                xtarname.write (xxzname)
                xsuffix.write "xz"
                xopen.write ((xlzma).if ((xlzma).xLZMAFile) "None: is there a None literal in the EO language?")
                xtaropen.write (((xtarfile).xTarFile).xxzopen)
            (((unsupported)).apply ((xTarTest)))
              seq
                xprefix.write "r:"
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtar)) ((((unsupported)).apply (((xtarfile).xopen)) (((xself).xtarname)) (((xself).xmode)) ("iso8859-1"))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xtar).xclose)).apply)
            (((unsupported)).apply ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xtest_fileobj_regular_file.write
                  [xself]
                    memory > xtarinfo
                    memory > xdata
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/regtype"))
                        (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ((xtarinfo)))) ((xfobj)))
                          seq
                            xdata.write ((((xfobj).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdata)))) (((xtarinfo).xsize)) ("regular file extraction failed"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsha256sum)).apply ((xdata)))) ((xsha256_regtype)) ("regular file extraction failed"))
                xtest_fileobj_readlines.write
                  [xself]
                    memory > xlines2
                    memory > xtarinfo
                    memory > xlines1
                    memory > xfobj2
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xtar).xextract)).apply ("ustar/regtype") ((xTEMPDIR)))
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/regtype"))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("ustar/regtype"))) ("r"))) ((xfobj1)))
                          xlines1.write ((((xfobj1).xreadlines)).apply)
                        (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ((xtarinfo)))) ((xfobj)))
                          seq
                            xfobj2.write ((((xio).xTextIOWrapper)).apply ((xfobj)))
                            xlines2.write ((((xfobj2).xreadlines)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines1)) ((xlines2)) ("fileobj.readlines() failed"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlines2)))) (114) ("fileobj.readlines() failed"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlines2)) (83))) ("I will gladly admit that Python is not the fastest running scripting language.n") ("fileobj.readlines() failed"))
                xtest_fileobj_iter.write
                  [xself]
                    memory > xlines2
                    memory > xtarinfo
                    memory > xlines1
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xtar).xextract)).apply ("ustar/regtype") ((xTEMPDIR)))
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/regtype"))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("ustar/regtype"))) ("r"))) ((xfobj1)))
                          xlines1.write ((((xfobj1).xreadlines)).apply)
                        (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ((xtarinfo)))) ((xfobj2)))
                          seq
                            xlines2.write (((xlist)).apply (((((xio).xTextIOWrapper)).apply ((xfobj2)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines1)) ((xlines2)) ("fileobj.__iter__() failed"))
                xtest_fileobj_seek.write
                  [xself]
                    memory > xdata
                    memory > xtarinfo
                    memory > xs1
                    memory > xtext
                    memory > xs
                    memory > xs2
                    memory > xline
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xtar).xextract)).apply ("ustar/regtype") ((xTEMPDIR)))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("ustar/regtype"))) ("rb"))) ((xfobj)))
                          xdata.write ((((xfobj).xread)).apply)
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/regtype"))
                        (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ((xtarinfo)))) ((xfobj)))
                          seq
                            xtext.write ((((xfobj).xread)).apply)
                            bogusForceDataize.write ((((xfobj).xseek)).apply (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (0) (((((xfobj).xtell)).apply)) ("seek() to file's start failed"))
                            bogusForceDataize.write ((((xfobj).xseek)).apply (2048) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (2048) (((((xfobj).xtell)).apply)) ("seek() to absolute position failed"))
                            bogusForceDataize.write ((((xfobj).xseek)).apply ((1024.neg)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (1024) (((((xfobj).xtell)).apply)) ("seek() to negative relative position failed"))
                            bogusForceDataize.write ((((xfobj).xseek)).apply (1024) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (2048) (((((xfobj).xtell)).apply)) ("seek() to positive relative position failed"))
                            xs.write ((((xfobj).xread)).apply (10))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (2048) (2058))))) ("read() after seek failed"))
                            bogusForceDataize.write ((((xfobj).xseek)).apply (0) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xsize)) (((((xfobj).xtell)).apply)) ("seek() to file's end failed"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfobj).xread)).apply)) ("") ("read() at file's end did not return empty string"))
                            bogusForceDataize.write ((((xfobj).xseek)).apply ((((xtarinfo).xsize).neg)) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (0) (((((xfobj).xtell)).apply)) ("relative seek() to file's end failed"))
                            bogusForceDataize.write ((((xfobj).xseek)).apply (512))
                            xs1.write ((((xfobj).xreadlines)).apply)
                            bogusForceDataize.write ((((xfobj).xseek)).apply (512))
                            xs2.write ((((xfobj).xreadlines)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs1)) ((xs2)) ("readlines() after seek failed"))
                            bogusForceDataize.write ((((xfobj).xseek)).apply (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xfobj).xreadline)).apply)))) (((((xfobj).xtell)).apply)) ("tell() after readline() failed"))
                            bogusForceDataize.write ((((xfobj).xseek)).apply (512))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xlen)).apply (((((xfobj).xreadline)).apply))).sub 512)) (((((xfobj).xtell)).apply)) ("tell() after seek() and readline() failed"))
                            bogusForceDataize.write ((((xfobj).xseek)).apply (0))
                            xline.write ((((xfobj).xreadline)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfobj).xread)).apply)) ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((((xlen)).apply ((xline)))))))) ("read() after readline() failed"))
                xtest_fileobj_text.write
                  [xself]
                    memory > xfobj
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ("ustar/regtype"))) ((xfobj)))
                        seq
                          xfobj.write ((((xio).xTextIOWrapper)).apply ((xfobj)))
                          xdata.write (((((((xfobj).xread)).apply).xencode)).apply ("iso8859-1"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsha256sum)).apply ((xdata)))) ((xsha256_regtype)))
                          (((unsupported)).apply ((xAttributeError)))
                            bogusForceDataize.write ((((xfobj).xseek)).apply (100))
                            bogusForceDataize.write ((((xself).xfail)).apply ("seeking failed in text mode"))
                x_test_fileobj_link.write
                  [xself xlnktype xregtype]
                    seq > @
                      (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ((xlnktype)))) ((xa)) ((((((xself).xtar).xextractfile)).apply ((xregtype)))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xname)) (((xb).xname)))
                xtest_fileobj_link1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_fileobj_link)).apply ("ustar/lnktype") ("ustar/regtype"))
                xtest_fileobj_link2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_fileobj_link)).apply ("./ustar/linktest2/lnktype") ("ustar/linktest1/regtype"))
                xtest_fileobj_symlink1.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_fileobj_link)).apply ("ustar/symtype") ("ustar/regtype"))
                xtest_fileobj_symlink2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_fileobj_link)).apply ("./ustar/linktest2/symtype") ("ustar/linktest1/regtype"))
                xtest_issue14160.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_fileobj_link)).apply ("symtype2") ("ustar/regtype"))
            (((unsupported)).apply ((xGzipTest)) ((xUstarReadTest)))
            (((unsupported)).apply ((xBz2Test)) ((xUstarReadTest)))
            (((unsupported)).apply ((xLzmaTest)) ((xUstarReadTest)))
            (((unsupported)).apply ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtar)) ((((unsupported)).apply (((xtarfile).xopen)) (((xself).xtarname)) (((xself).xmode)))))
                xtest_list.write
                  [xself]
                    memory > xtio
                    memory > xout
                    memory > xconv
                    seq > @
                      seq
                        xtio.write (((unsupported)).apply (((xio).xTextIOWrapper)) (((((xio).xBytesIO)).apply)) ("ascii") ("n"))
                        (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xsys)) ("stdout") ((xtio)))))
                          (((unsupported)).apply ((((xself).xtar).xlist)) (FALSE))
                        xout.write (((((((xtio).xdetach)).apply).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ustar/conttype") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ustar/regtype") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ustar/lnktype") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((("ustar".sub ("/12345".mul 40)).sub "67/longname")) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("./ustar/linktest2/symtype") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("./ustar/linktest2/lnktype") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ustar/dirtype/") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ustar/dirtype-with-size/") ((xout)))
                        xconv.write
                          [xb]
                            memory > xs
                            seq > @
                              seq
                                xs.write ((((xb).xdecode)).apply ((((xself).xtar).xencoding)) ("surrogateescape"))
                                (((unsupported)).apply (((((xs).xencode)).apply ("ascii") ("backslashreplace"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xconv)).apply ("ustar/umlauts-xc4xd6xdcxe4xf6xfcxdf"))) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xconv)).apply ("misc/regtype-hpux-signed-chksum-xc4xd6xdcxe4xf6xfcxdf"))) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xconv)).apply ("misc/regtype-old-v7-signed-chksum-xc4xd6xdcxe4xf6xfcxdf"))) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xconv)).apply ("pax/bad-pax-xe4xf6xfc"))) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xconv)).apply ("pax/hdrcharset-xe4xf6xfc"))) ((xout)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xout)) ("ustar/conttype ?r?nustar/regtype ?r?n"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("link to") ((xout)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("->") ((xout)))
                xtest_list_verbose.write
                  [xself]
                    memory > xtio
                    memory > xout
                    seq > @
                      seq
                        xtio.write (((unsupported)).apply (((xio).xTextIOWrapper)) (((((xio).xBytesIO)).apply)) ("ascii") ("n"))
                        (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xsys)) ("stdout") ((xtio)))))
                          (((unsupported)).apply ((((xself).xtar).xlist)) (TRUE))
                        xout.write (((((((xtio).xdetach)).apply).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((xout)) (("?rw-r--r-- tarfile/tarfiles-7011 d{4}-dd-dds-dd:dd:dd ustar/w-type ?r?n".mul 2)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ustar/symtype -> regtype") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("./ustar/linktest2/symtype -> ../linktest1/regtype") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("./ustar/linktest2/lnktype link to ./ustar/linktest1/regtype") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((("gnu".sub ("/123".mul 125)).sub "/longlink link to gnu").sub ("/123".mul 125)).sub "/longname")) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((("pax".sub ("/123".mul 125)).sub "/longlink link to pax").sub ("/123".mul 125)).sub "/longname")) ((xout)))
                xtest_list_members.write
                  [xself]
                    memory > xtio
                    memory > xout
                    memory > xmembers
                    seq > @
                      seq
                        xtio.write (((unsupported)).apply (((xio).xTextIOWrapper)) (((((xio).xBytesIO)).apply)) ("ascii") ("n"))
                        xmembers.write
                          [xtar]
                            seq > @
                              (((unsupported)).apply ((xtarinfo)) (((((xtar).xgetmembers)).apply)))
                                (((unsupported)).apply ("reg") (((xtarinfo).xname))).if
                                  (((unsupported)).apply ((xtarinfo)))
                        (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xsys)) ("stdout") ((xtio)))))
                          (((unsupported)).apply ((((xself).xtar).xlist)) (FALSE) ((((xmembers)).apply (((xself).xtar)))))
                        xout.write (((((((xtio).xdetach)).apply).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("ustar/regtype") ((xout)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("ustar/conttype") ((xout)))
            (((unsupported)).apply ((xGzipTest)) ((xListTest)))
            (((unsupported)).apply ((xBz2Test)) ((xListTest)))
            (((unsupported)).apply ((xLzmaTest)) ((xListTest)))
            (((unsupported)).apply ((xReadTest)))
              seq
                xtest_empty_tarfile.write
                  [xself]
                    memory > xtar
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)) ((((((xself).xmode).xreplace)).apply ("r") ("w"))))))
                        (((unsupported)).apply (((xtarfile).xReadError)))
                          seq
                            xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                            bogusForceDataize.write ((((xtar).xgetnames)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("tarfile.open() failed on empty archive"))
                          bogusForceDataize.write ((((xself).xassertListEqual)).apply (((((xtar).xgetmembers)).apply)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_non_existent_tarfile.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xFileNotFoundError)) ("xxx"))))
                        bogusForceDataize.write ((((xtarfile).xopen)).apply ("xxx") (((xself).xmode)))
                xtest_null_tarfile.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xtmpname)) ("wb"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xtarfile).xReadError)) (((xtarfile).xopen)) ((xtmpname)) (((xself).xmode)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xtarfile).xReadError)) (((xtarfile).xopen)) ((xtmpname)))
                xtest_ignore_zeros.write
                  [xself]
                    memory > xtar
                    memory > xtarinfo
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((((((((xRandom)).apply (0)).xgetrandbits)).apply ((512.mul 8))).xto_bytes)).apply (512) ("big"))
                        (((unsupported)).apply ((xchar)) ((((unsupported)).apply ("0") ("a"))))
                          seq
                            (((unsupported)).apply (((((xself).xopen)).apply ((xtmpname)) ("w"))) ((xfobj)))
                              seq
                                bogusForceDataize.write ((((xfobj).xwrite)).apply (((xchar).mul 1024)))
                                xtarinfo.write ((((xtarfile).xTarInfo)).apply ("foo"))
                                (((unsupported)).apply (((xtarinfo).xsize)) ((((xlen)).apply ((xdata)))))
                                bogusForceDataize.write ((((xfobj).xwrite)).apply (((((xtarinfo).xtobuf)).apply)))
                                bogusForceDataize.write ((((xfobj).xwrite)).apply ((xdata)))
                            xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("r") (TRUE))
                            (((unsupported)).apply)
                              bogusForceDataize.write ((((xself).xassertListEqual)).apply (((((xtar).xgetnames)).apply)) ((((unsupported)).apply ("foo"))) (("ignore_zeros=True should have skipped the %r-blocks".mod (xchar))))
                              bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_premature_end_of_archive.write
                  [xself]
                    memory > xt
                    seq > @
                      (((unsupported)).apply ((xsize)) ((((unsupported)).apply (512) (600) (1024) (1200))))
                        seq
                          (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)) ("w:"))) ((xtar)))
                            seq
                              xt.write ((((xtarfile).xTarInfo)).apply ("foo"))
                              (((unsupported)).apply (((xt).xsize)) (1024))
                              bogusForceDataize.write ((((xtar).xaddfile)).apply ((xt)) (((((xio).xBytesIO)).apply (("a".mul 1024)))))
                          (((unsupported)).apply ((((xopen)).apply ((xtmpname)) ("r-b"))) ((xfobj)))
                            bogusForceDataize.write ((((xfobj).xtruncate)).apply ((xsize)))
                          (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)))) ((xtar)))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xtarfile).xReadError)) ("unexpected end of data"))))
                              (((unsupported)).apply ((xt)) ((xtar)))
                          (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)))) ((xtar)))
                            seq
                              xt.write ((((xtar).xnext)).apply)
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xtarfile).xReadError)) ("unexpected end of data"))))
                                bogusForceDataize.write ((((xtar).xextract)).apply ((xt)) ((xTEMPDIR)))
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xtarfile).xReadError)) ("unexpected end of data"))))
                                bogusForceDataize.write (((((((xtar).xextractfile)).apply ((xt))).xread)).apply)
                xtest_length_zero_header.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xtarfile).xReadError)) ("file could not be opened successfully"))))
                        (((unsupported)).apply (((((xtarfile).xopen)).apply (((((xsupport).xfindfile)).apply ("recursion.tar"))))) ((xtar)))
            (((unsupported)).apply ((xCommonReadTest)))
              seq
                xrequires_name_attribute.write
                  [xself]
                    seq > @
                xtest_no_name_argument.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xrequires_name_attribute)).apply)
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtarname)) ("rb"))) ((xfobj)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xfobj).xname)) ((xstr)))
                            (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xfobj)) (((xself).xmode)))) ((xtar)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtar).xname)) ((xstr)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtar).xname)) ((((((xos).xpath).xabspath)).apply (((xfobj).xname)))))
                xtest_no_name_attribute.write
                  [xself]
                    memory > xfobj
                    memory > xtar
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtarname)) ("rb"))) ((xfobj)))
                          xdata.write ((((xfobj).xread)).apply)
                        xfobj.write ((((xio).xBytesIO)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) ((xgetattr)) ((xfobj)) ("name"))
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xfobj)) (((xself).xmode)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xtar).xname)))
                xtest_empty_name_attribute.write
                  [xself]
                    memory > xfobj
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtarname)) ("rb"))) ((xfobj)))
                          xdata.write ((((xfobj).xread)).apply)
                        xfobj.write ((((xio).xBytesIO)).apply ((xdata)))
                        (((unsupported)).apply (((xfobj).xname)) (""))
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xfobj)) (((xself).xmode)))) ((xtar)))
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xtar).xname)))
                xtest_int_name_attribute.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)).apply (((xself).xtarname)) (((xos).xO_RDONLY)))
                        (((unsupported)).apply ((((xopen)).apply ((xfd)) ("rb"))) ((xfobj)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xfobj).xname)) ((xint)))
                            (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xfobj)) (((xself).xmode)))) ((xtar)))
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xtar).xname)))
                xtest_bytes_name_attribute.write
                  [xself]
                    memory > xtarname
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xrequires_name_attribute)).apply)
                        xtarname.write ((((xos).xfsencode)).apply (((xself).xtarname)))
                        (((unsupported)).apply ((((xopen)).apply ((xtarname)) ("rb"))) ((xfobj)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xfobj).xname)) ((xbytes)))
                            (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xfobj)) (((xself).xmode)))) ((xtar)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtar).xname)) ((xbytes)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtar).xname)) ((((((xos).xpath).xabspath)).apply (((xfobj).xname)))))
                xtest_pathlike_name.write
                  [xself]
                    memory > xtarname
                    seq > @
                      seq
                        xtarname.write ((((xpathlib).xPath)).apply (((xself).xtarname)))
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) (((xself).xmode)))) ((xtar)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtar).xname)) ((xstr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtar).xname)) ((((((xos).xpath).xabspath)).apply (((((xos).xfspath)).apply ((xtarname)))))))
                        (((unsupported)).apply (((((xself).xtaropen)).apply ((xtarname)))) ((xtar)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtar).xname)) ((xstr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtar).xname)) ((((((xos).xpath).xabspath)).apply (((((xos).xfspath)).apply ((xtarname)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xtarfile).xTarFile).xopen)) ((xtarname)) (((xself).xmode)))) ((xtar)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtar).xname)) ((xstr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtar).xname)) ((((((xos).xpath).xabspath)).apply (((((xos).xfspath)).apply ((xtarname)))))))
                        (((xself).xsuffix).eq "").if
                          (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xTarFile)) ((xtarname)) ("r"))) ((xtar)))
                            seq
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtar).xname)) ((xstr)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtar).xname)) ((((((xos).xpath).xabspath)).apply (((((xos).xfspath)).apply ((xtarname)))))))
                xtest_illegal_mode_arg.write
                  [xself]
                    memory > xtar
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xtmpname)) ("wb"))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("mode must be "))))
                          xtar.write ((((xself).xtaropen)).apply ((xtmpname)) ("q"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("mode must be "))))
                          xtar.write ((((xself).xtaropen)).apply ((xtmpname)) ("rw"))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("mode must be "))))
                          xtar.write ((((xself).xtaropen)).apply ((xtmpname)) (""))
                xtest_fileobj_with_offset.write
                  [xself]
                    memory > xdata
                    memory > xt
                    memory > xtar
                    memory > xname
                    memory > xoffset
                    seq > @
                      seq
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) (((xself).xtarname)) (((xself).xmode)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xtar).xnext)).apply)
                            xt.write ((((xtar).xnext)).apply)
                            xname.write ((xt).xname)
                            xoffset.write ((xt).xoffset)
                            (((unsupported)).apply (((((xtar).xextractfile)).apply ((xt)))) ((xf)))
                              xdata.write ((((xf).xread)).apply)
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        (((unsupported)).apply (((((xself).xopen)).apply (((xself).xtarname)))) ((xfobj)))
                          seq
                            bogusForceDataize.write ((((xfobj).xseek)).apply ((xoffset)))
                            (((unsupported)).apply ((((unsupported)).apply (((xtar).xopen)) (((xself).xtarname)) ("r:") ((xfobj)))) ((xtar)))
                              seq
                                xt.write ((((xtar).xnext)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xname)) ((xname)))
                                bogusForceDataize.write ((((xtar).xgetmembers)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xtar).xextractfile)).apply ((xt))).xread)).apply)) ((xdata)) ("seek back did not work"))
                xtest_fail_comp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xtarfile).xReadError)) (((xtarfile).xopen)) ((xtarname)) (((xself).xmode)))
                        (((unsupported)).apply ((((xopen)).apply ((xtarname)) ("rb"))) ((xfobj)))
                          (((unsupported)).apply (((xself).xassertRaises)) (((xtarfile).xReadError)) (((xtarfile).xopen)) ((xfobj)) (((xself).xmode)))
                xtest_v7_dirtype.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("misc/dirtype-old-v7"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xtype)) (((xtarfile).xDIRTYPE)) ("v7 dirtype failed"))
                xtest_xstar_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xKeyError)))
                        bogusForceDataize.write (((((xself).xtar).xgetmember)).apply ("misc/regtype-xstar"))
                        bogusForceDataize.write ((((xself).xfail)).apply ("failed to find misc/regtype-xstar (mangled prefix?)"))
                xtest_check_members.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xtarinfo)) (((xself).xtar)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((xtarinfo).xmtime)))) (1041808783) (("wrong mtime for %s".mod ((xtarinfo).xname))))
                          ((((((xtarinfo).xname).xstartswith)).apply ("ustar/")).not).if
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xuname)) ("tarfile") (("wrong uname for %s".mod ((xtarinfo).xname))))
                xtest_find_members.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((((xself).xtar).xgetmembers)).apply)) ((1.neg))).xname)) ("misc/eof") ("could not find all members"))
                xtest_extract_hardlink.write
                  [xself]
                    memory > xdata
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) (1) ("iso8859-1"))) ((xtar)))
                          seq
                            bogusForceDataize.write ((((xtar).xextract)).apply ("ustar/regtype") ((xTEMPDIR)))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("ustar/regtype"))))
                            bogusForceDataize.write ((((xtar).xextract)).apply ("ustar/lnktype") ((xTEMPDIR)))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("ustar/lnktype"))))
                            (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("ustar/lnktype"))) ("rb"))) ((xf)))
                              xdata.write ((((xf).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsha256sum)).apply ((xdata)))) ((xsha256_regtype)))
                            bogusForceDataize.write ((((xtar).xextract)).apply ("ustar/symtype") ((xTEMPDIR)))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("ustar/symtype"))))
                            (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("ustar/symtype"))) ("rb"))) ((xf)))
                              xdata.write ((((xf).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsha256sum)).apply ((xdata)))) ((xsha256_regtype)))
                xtest_extractall.write
                  [xself]
                    memory > xdirectories
                    memory > xerrmsg
                    memory > xpath
                    memory > xfile_mtime
                    memory > xtar
                    memory > xformat_mtime
                    memory > xDIR
                    seq > @
                      seq
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ("iso8859-1"))
                        xDIR.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("extractall"))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xDIR)))
                        (((unsupported)).apply)
                          seq
                            xdirectories.write (((unsupported)).apply ((xt)) ((xt)) ((xtar)) (((((xt).xisdir)).apply)))
                            bogusForceDataize.write ((((xtar).xextractall)).apply ((xDIR)) ((xdirectories)))
                            (((unsupported)).apply ((xtarinfo)) ((xdirectories)))
                              seq
                                xpath.write (((((xos).xpath).xjoin)).apply ((xDIR)) (((xtarinfo).xname)))
                                (((xsys).xplatform).neq "win32").if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtarinfo).xmode).and 511)) (((((((xos).xstat)).apply ((xpath))).xst_mode).and 511)))
                                xformat_mtime.write
                                  [xmtime]
                                    seq > @
                                      (((xisinstance)).apply ((xmtime)) ((xfloat))).if
                                        (((unsupported)).apply (((("{} ({})".xformat)).apply ((xmtime)) (((((xmtime).xhex)).apply)))))
                                        (((unsupported)).apply (((("{!r} (int)".xformat)).apply ((xmtime)))))
                                xfile_mtime.write (((((xos).xpath).xgetmtime)).apply ((xpath)))
                                xerrmsg.write ((("tar mtime {0} != file time {1} of path {2!a}".xformat)).apply ((((xformat_mtime)).apply (((xtarinfo).xmtime)))) ((((xformat_mtime)).apply ((xfile_mtime)))) ((xpath)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xmtime)) ((xfile_mtime)) ((xerrmsg)))
                          seq
                            bogusForceDataize.write ((((xtar).xclose)).apply)
                            bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xDIR)))
                xtest_extract_directory.write
                  [xself]
                    memory > xtarinfo
                    memory > xextracted
                    memory > xDIR
                    memory > xdirtype
                    seq > @
                      seq
                        xdirtype.write "ustar/dirtype"
                        xDIR.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("extractdir"))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xDIR)))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ("iso8859-1"))) ((xtar)))
                            seq
                              xtarinfo.write ((((xtar).xgetmember)).apply ((xdirtype)))
                              (((unsupported)).apply (((xtar).xextract)) ((xtarinfo)) ((xDIR)))
                              xextracted.write (((((xos).xpath).xjoin)).apply ((xDIR)) ((xdirtype)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpath).xgetmtime)).apply ((xextracted)))) (((xtarinfo).xmtime)))
                              (((xsys).xplatform).neq "win32").if
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xos).xstat)).apply ((xextracted))).xst_mode).and 511)) (493))
                          bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xDIR)))
                xtest_extractall_pathlike_name.write
                  [xself]
                    memory > xdirectories
                    memory > xDIR
                    memory > xpath
                    seq > @
                      seq
                        xDIR.write (((((xpathlib).xPath)).apply ((xTEMPDIR))).div "extractall")
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply ((xDIR)))) ((((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ("iso8859-1"))) ((xtar)))
                          seq
                            xdirectories.write (((unsupported)).apply ((xt)) ((xt)) ((xtar)) (((((xt).xisdir)).apply)))
                            bogusForceDataize.write ((((xtar).xextractall)).apply ((xDIR)) ((xdirectories)))
                            (((unsupported)).apply ((xtarinfo)) ((xdirectories)))
                              seq
                                xpath.write ((xDIR).div ((xtarinfo).xname))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpath).xgetmtime)).apply ((xpath)))) (((xtarinfo).xmtime)))
                xtest_extract_pathlike_name.write
                  [xself]
                    memory > xtarinfo
                    memory > xextracted
                    memory > xDIR
                    memory > xdirtype
                    seq > @
                      seq
                        xdirtype.write "ustar/dirtype"
                        xDIR.write (((((xpathlib).xPath)).apply ((xTEMPDIR))).div "extractall")
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply ((xDIR)))) ((((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ("iso8859-1"))) ((xtar)))
                          seq
                            xtarinfo.write ((((xtar).xgetmember)).apply ((xdirtype)))
                            (((unsupported)).apply (((xtar).xextract)) ((xtarinfo)) ((xDIR)))
                            xextracted.write ((xDIR).div (xdirtype))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpath).xgetmtime)).apply ((xextracted)))) (((xtarinfo).xmtime)))
                xtest_init_close_fobj.write
                  [xself]
                    memory > xtar
                    memory > xempty
                    seq > @
                      seq
                        xempty.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("empty"))
                        (((unsupported)).apply ((((xopen)).apply ((xempty)) ("wb"))) ((xfobj)))
                          bogusForceDataize.write ((((xfobj).xwrite)).apply (""))
                        (((unsupported)).apply)
                          seq
                            xtar.write ((((xobject).x__new__)).apply (((xtarfile).xTarFile)))
                            (((unsupported)).apply (((xtarfile).xReadError)))
                              bogusForceDataize.write ((((xtar).x__init__)).apply ((xempty)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xtar).xfileobj).xclosed)))
                              bogusForceDataize.write ((((xself).xfail)).apply ("ReadError not raised"))
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xempty)))
                xtest_parallel_iteration.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xtarfile).xopen)).apply (((xself).xtarname)))) ((xtar)))
                        (((unsupported)).apply ((((unsupported)).apply ((xm1)) ((xm2)))) ((((xzip)).apply ((xtar)) ((xtar)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm1).xoffset)) (((xm2).xoffset)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm1).xget_info)).apply)) (((((xm2).xget_info)).apply)))
            (((unsupported)).apply ((xMiscReadTestBase)) (((xunittest).xTestCase)))
              xtest_fail_comp.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xGzipTest)) ((xMiscReadTestBase)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xBz2Test)) ((xMiscReadTestBase)) (((xunittest).xTestCase)))
              xrequires_name_attribute.write
                [xself]
                  seq > @
                    bogusForceDataize.write ((((xself).xskipTest)).apply ("BZ2File have no name attribute"))
            (((unsupported)).apply ((xLzmaTest)) ((xMiscReadTestBase)) (((xunittest).xTestCase)))
              xrequires_name_attribute.write
                [xself]
                  seq > @
                    bogusForceDataize.write ((((xself).xskipTest)).apply ("LZMAFile have no name attribute"))
            (((unsupported)).apply ((xCommonReadTest)) (((xunittest).xTestCase)))
              seq
                xprefix.write "r|"
                xtest_read_through.write
                  [xself]
                    memory > xbuf
                    seq > @
                      (((unsupported)).apply ((xtarinfo)) (((xself).xtar)))
                        seq
                          (((((xtarinfo).xisreg)).apply).not).if
                            (((unsupported)).apply)
                          (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ((xtarinfo)))) ((xfobj)))
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xtarfile).xStreamError)))
                                      xbuf.write ((((xfobj).xread)).apply (512))
                                      bogusForceDataize.write ((((xself).xfail)).apply ("simple read-through using TarFile.extractfile() failed"))
                                    ((xbuf).not).if
                                      (((unsupported)).apply)
                xtest_fileobj_regular_file.write
                  [xself]
                    memory > xtarinfo
                    memory > xdata
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xnext)).apply)
                        (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ((xtarinfo)))) ((xfobj)))
                          xdata.write ((((xfobj).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdata)))) (((xtarinfo).xsize)) ("regular file extraction failed"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsha256sum)).apply ((xdata)))) ((xsha256_regtype)) ("regular file extraction failed"))
                xtest_provoke_stream_error.write
                  [xself]
                    memory > xtarinfos
                    seq > @
                      seq
                        xtarinfos.write (((((xself).xtar).xgetmembers)).apply)
                        (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ((((unsupported)).apply ((xtarinfos)) (0))))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xtarfile).xStreamError)) (((xf).xread)))
                xtest_compare_members.write
                  [xself]
                    memory > xv2
                    memory > xv1
                    memory > xt2
                    memory > xtar1
                    memory > xtar2
                    memory > xt1
                    seq > @
                      seq
                        xtar1.write (((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ("iso8859-1"))
                        (((unsupported)).apply)
                          seq
                            xtar2.write ((xself).xtar)
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    xt1.write ((((xtar1).xnext)).apply)
                                    xt2.write ((((xtar2).xnext)).apply)
                                    (((unsupported)).apply ((xt1)) ("None: is there a None literal in the EO language?")).if
                                      (((unsupported)).apply)
                                    bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xt2)) ("stream.next() failed."))
                                    (((((xt2).xislnk)).apply).or ((((xt2).xissym)).apply)).if
                                      seq
                                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xtarfile).xStreamError)))))
                                          bogusForceDataize.write ((((xtar2).xextractfile)).apply ((xt2)))
                                        (((unsupported)).apply)
                                    xv1.write ((((xtar1).xextractfile)).apply ((xt1)))
                                    xv2.write ((((xtar2).xextractfile)).apply ((xt2)))
                                    (((unsupported)).apply ((xv1)) ("None: is there a None literal in the EO language?")).if
                                      (((unsupported)).apply)
                                    bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xv2)) ("stream.extractfile() failed"))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xv1).xread)).apply)) (((((xv2).xread)).apply)) ("stream extraction failed"))
                          bogusForceDataize.write ((((xtar1).xclose)).apply)
            (((unsupported)).apply ((xGzipTest)) ((xStreamReadTest)))
            (((unsupported)).apply ((xBz2Test)) ((xStreamReadTest)))
            (((unsupported)).apply ((xLzmaTest)) ((xStreamReadTest)))
            (((unsupported)).apply ((xTarTest)) (((xunittest).xTestCase)))
              seq
                x_testfunc_file.write
                  [xself xname xmode]
                    memory > xtar
                    seq > @
                      (((unsupported)).apply (((xtarfile).xReadError)))
                        xtar.write ((((xtarfile).xopen)).apply ((xname)) ((xmode)))
                        bogusForceDataize.write ((((xself).xfail)).apply)
                        bogusForceDataize.write ((((xtar).xclose)).apply)
                x_testfunc_fileobj.write
                  [xself xname xmode]
                    memory > xtar
                    seq > @
                      (((unsupported)).apply (((xtarfile).xReadError)))
                        (((unsupported)).apply ((((xopen)).apply ((xname)) ("rb"))) ((xf)))
                          xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xname)) ((xmode)) ((xf)))
                        bogusForceDataize.write ((((xself).xfail)).apply)
                        bogusForceDataize.write ((((xtar).xclose)).apply)
                x_test_modes.write
                  [xself xtestfunc]
                    seq > @
                      seq
                        ((xself).xsuffix).if
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xtarfile).xReadError)))))
                              (((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) (("r:".sub ((xself).xsuffix))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xtarfile).xReadError)))))
                              (((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) (("r|".sub ((xself).xsuffix))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xtarfile).xReadError)))))
                              (((unsupported)).apply (((xtarfile).xopen)) (((xself).xtarname)) ("r:"))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xtarfile).xReadError)))))
                              (((unsupported)).apply (((xtarfile).xopen)) (((xself).xtarname)) ("r|"))
                        bogusForceDataize.write (((xtestfunc)).apply (((xself).xtarname)) ("r"))
                        bogusForceDataize.write (((xtestfunc)).apply (((xself).xtarname)) (("r:".sub ((xself).xsuffix))))
                        bogusForceDataize.write (((xtestfunc)).apply (((xself).xtarname)) ("r:*"))
                        bogusForceDataize.write (((xtestfunc)).apply (((xself).xtarname)) (("r|".sub ((xself).xsuffix))))
                        bogusForceDataize.write (((xtestfunc)).apply (((xself).xtarname)) ("r|*"))
                xtest_detect_file.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_modes)).apply (((xself).x_testfunc_file)))
                xtest_detect_fileobj.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_modes)).apply (((xself).x_testfunc_fileobj)))
            (((unsupported)).apply ((xGzipTest)) ((xDetectReadTest)))
            (((unsupported)).apply ((xBz2Test)) ((xDetectReadTest)))
              xtest_detect_stream_bz2.write
                [xself]
                  memory > xdata
                  seq > @
                    seq
                      (((unsupported)).apply ((((xopen)).apply ((xtarname)) ("rb"))) ((xfobj)))
                        xdata.write ((((xfobj).xread)).apply)
                      (((unsupported)).apply ((((unsupported)).apply (((xbz2).xBZ2File)) ((xtmpname)) ("wb") (1))) ((xfobj)))
                        bogusForceDataize.write ((((xfobj).xwrite)).apply ((xdata)))
                      bogusForceDataize.write ((((xself).x_testfunc_file)).apply ((xtmpname)) ("r|*"))
            (((unsupported)).apply ((xLzmaTest)) ((xDetectReadTest)))
            (((unsupported)).apply ((xReadTest)) (((xunittest).xTestCase)))
              seq
                x_test_member.write
                  [xself xtarinfo xchksum]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xchksum)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((((xself).xtar).xextractfile)).apply ((xtarinfo)))) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsha256sum)).apply (((((xf).xread)).apply)))) ((xchksum)) (("wrong sha256sum for %s".mod ((xtarinfo).xname))))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("mtime"))) (1041808783))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("uid"))) (1000))
                        (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("gid"))) (100))
                        (((unsupported)).apply ("old-v7") (((xtarinfo).xname))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("uname"))) ("tarfile"))
                            (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("gname"))) ("tarfile"))
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) (((((xkwargs).xitems)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xtarinfo)) ((xk)))) ((xv)) (("wrong value in %s field of %s".mod (((unsupported)).apply ((xk)) (((xtarinfo).xname))))))
                xtest_find_regtype.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/regtype"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (7011) ((xsha256_regtype)))
                xtest_find_conttype.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/conttype"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (7011) ((xsha256_regtype)))
                xtest_find_dirtype.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/dirtype"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (0))
                xtest_find_dirtype_with_size.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/dirtype-with-size"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (255))
                xtest_find_lnktype.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/lnktype"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (0) ("ustar/regtype"))
                xtest_find_symtype.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/symtype"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (0) ("regtype"))
                xtest_find_blktype.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/blktype"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (0) (3) (0))
                xtest_find_chrtype.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/chrtype"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (0) (1) (3))
                xtest_find_fifotype.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/fifotype"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (0))
                xtest_find_sparse.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/sparse"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (86016) ((xsha256_sparse)))
                xtest_find_gnusparse.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("gnu/sparse"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (86016) ((xsha256_sparse)))
                xtest_find_gnusparse_00.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("gnu/sparse-0.0"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (86016) ((xsha256_sparse)))
                xtest_find_gnusparse_01.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("gnu/sparse-0.1"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (86016) ((xsha256_sparse)))
                xtest_find_gnusparse_10.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("gnu/sparse-1.0"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (86016) ((xsha256_sparse)))
                xtest_find_umlauts.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("ustar/umlauts-xc4xd6xdcxe4xf6xfcxdf"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (7011) ((xsha256_regtype)))
                xtest_find_ustar_longname.write
                  [xself]
                    memory > xname
                    seq > @
                      seq
                        xname.write (("ustar/".sub ("12345/".mul 39)).sub "1234567/longname")
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xname)) ((((((xself).xtar).xgetnames)).apply)))
                xtest_find_regtype_oldv7.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("misc/regtype-old-v7"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (7011) ((xsha256_regtype)))
                xtest_find_pax_umlauts.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xtar).xclose)).apply)
                        (((unsupported)).apply (((xself).xtar)) ((((unsupported)).apply (((xtarfile).xopen)) (((xself).xtarname)) (((xself).xmode)) ("iso8859-1"))))
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ("pax/umlauts-xc4xd6xdcxe4xf6xfcxdf"))
                        (((unsupported)).apply (((xself).x_test_member)) ((xtarinfo)) (7011) ((xsha256_regtype)))
            (((unsupported)).apply)
              seq
                xtest_read_longname.write
                  [xself]
                    memory > xtarinfo
                    memory > xlongname
                    seq > @
                      seq
                        xlongname.write (((((xself).xsubdir).sub "/").sub ("123/".mul 125)).sub "longname")
                        (((unsupported)).apply ((xKeyError)))
                          xtarinfo.write (((((xself).xtar).xgetmember)).apply ((xlongname)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("longname not found"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xtarinfo).xtype)) (((xtarfile).xDIRTYPE)) ("read longname as dirtype"))
                xtest_read_longlink.write
                  [xself]
                    memory > xtarinfo
                    memory > xlonglink
                    memory > xlongname
                    seq > @
                      seq
                        xlongname.write (((((xself).xsubdir).sub "/").sub ("123/".mul 125)).sub "longname")
                        xlonglink.write (((((xself).xsubdir).sub "/").sub ("123/".mul 125)).sub "longlink")
                        (((unsupported)).apply ((xKeyError)))
                          xtarinfo.write (((((xself).xtar).xgetmember)).apply ((xlonglink)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("longlink not found"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xlinkname)) ((xlongname)) ("linkname wrong"))
                xtest_truncated_longname.write
                  [xself]
                    memory > xfobj
                    memory > xtarinfo
                    memory > xoffset
                    memory > xlongname
                    seq > @
                      seq
                        xlongname.write (((((xself).xsubdir).sub "/").sub ("123/".mul 125)).sub "longname")
                        xtarinfo.write (((((xself).xtar).xgetmember)).apply ((xlongname)))
                        xoffset.write ((xtarinfo).xoffset)
                        bogusForceDataize.write ((((((xself).xtar).xfileobj).xseek)).apply ((xoffset)))
                        xfobj.write ((((xio).xBytesIO)).apply (((((((xself).xtar).xfileobj).xread)).apply ((3.mul 512)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xtarfile).xReadError)))))
                          (((unsupported)).apply (((xtarfile).xopen)) ("foo.tar") ((xfobj)))
                xtest_header_offset.write
                  [xself]
                    memory > xtarinfo
                    memory > xoffset
                    memory > xlongname
                    seq > @
                      seq
                        xlongname.write (((((xself).xsubdir).sub "/").sub ("123/".mul 125)).sub "longname")
                        xoffset.write ((((((xself).xtar).xgetmember)).apply ((xlongname))).xoffset)
                        (((unsupported)).apply ((((xopen)).apply ((xtarname)) ("rb"))) ((xfobj)))
                          seq
                            bogusForceDataize.write ((((xfobj).xseek)).apply ((xoffset)))
                            xtarinfo.write (((((xtarfile).xTarInfo).xfrombuf)).apply (((((xfobj).xread)).apply (512))) ("iso8859-1") ("strict"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xtype)) (((xself).xlongnametype)))
            (((unsupported)).apply ((xLongnameTest)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xsubdir.write "gnu"
                xlongnametype.write ((xtarfile).xGNUTYPE_LONGNAME)
                x_test_sparse_file.write
                  [xself xname]
                    memory > xs
                    memory > xdata
                    memory > xfilename
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xtar).xextract)).apply ((xname)) ((xTEMPDIR)))
                        xfilename.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ((xname)))
                        (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("rb"))) ((xfobj)))
                          xdata.write ((((xfobj).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsha256sum)).apply ((xdata)))) ((xsha256_sparse)) (("wrong sha256sum for %s".mod (xname))))
                        ((((xself).x_fs_supports_holes)).apply).if
                          seq
                            xs.write ((((xos).xstat)).apply ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertLess)).apply ((((xs).xst_blocks).mul 512)) (((xs).xst_size)))
                xtest_sparse_file_old.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_sparse_file)).apply ("gnu/sparse"))
                xtest_sparse_file_00.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_sparse_file)).apply ("gnu/sparse-0.0"))
                xtest_sparse_file_01.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_sparse_file)).apply ("gnu/sparse-0.1"))
                xtest_sparse_file_10.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_sparse_file)).apply ("gnu/sparse-1.0"))
                x_fs_supports_holes.write
                  []
                    memory > xname
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        (((((xsys).xplatform).xstartswith)).apply ("linux")).if
                          seq
                            xname.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("sparse-test"))
                            (((unsupported)).apply ((((xopen)).apply ((xname)) ("wb"))) ((xfobj)))
                              seq
                                bogusForceDataize.write ((((xfobj).xseek)).apply (4096))
                                bogusForceDataize.write ((((xfobj).xwrite)).apply (("x".mul 4096)))
                                bogusForceDataize.write ((((xfobj).xtruncate)).apply)
                            xs.write ((((xos).xstat)).apply ((xname)))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((xname)))
                            (((unsupported)).apply (((((xs).xst_blocks).mul 512).less ((xs).xst_size))))
                          (((unsupported)).apply (FALSE))
            (((unsupported)).apply ((xLongnameTest)) ((xReadTest)) (((xunittest).xTestCase)))
              seq
                xsubdir.write "pax"
                xlongnametype.write ((xtarfile).xXHDTYPE)
                xtest_pax_global_headers.write
                  [xself]
                    memory > xtar
                    memory > xtarinfo
                    seq > @
                      seq
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ("iso8859-1"))
                        (((unsupported)).apply)
                          seq
                            xtarinfo.write ((((xtar).xgetmember)).apply ("pax/regtype1"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xuname)) ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xgname)) ("bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtarinfo).xpax_headers).xget)).apply ("VENDOR.umlauts"))) ("xc4xd6xdcxe4xf6xfcxdf"))
                            xtarinfo.write ((((xtar).xgetmember)).apply ("pax/regtype2"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xuname)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xgname)) ("bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtarinfo).xpax_headers).xget)).apply ("VENDOR.umlauts"))) ("xc4xd6xdcxe4xf6xfcxdf"))
                            xtarinfo.write ((((xtar).xgetmember)).apply ("pax/regtype3"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xuname)) ("tarfile"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xgname)) ("tarfile"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtarinfo).xpax_headers).xget)).apply ("VENDOR.umlauts"))) ("xc4xd6xdcxe4xf6xfcxdf"))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_pax_number_fields.write
                  [xself]
                    memory > xtar
                    memory > xtarinfo
                    seq > @
                      seq
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ("iso8859-1"))
                        (((unsupported)).apply)
                          seq
                            xtarinfo.write ((((xtar).xgetmember)).apply ("pax/regtype4"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xsize)) (7011))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xuid)) (123))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xgid)) (123))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xmtime)) (1041808783.0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((xtarinfo).xmtime)))) ((xfloat)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((unsupported)).apply (((xtarinfo).xpax_headers)) ("atime"))))) (1041808783.0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfloat)).apply ((((unsupported)).apply (((xtarinfo).xpax_headers)) ("ctime"))))) (1041808783.0))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
            (((unsupported)).apply ((xTarTest)))
              seq
                xtest_fileobj_no_close.write
                  [xself]
                    memory > xfobj
                    memory > xdata
                    seq > @
                      seq
                        xfobj.write ((((xio).xBytesIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xfobj)) (((xself).xmode)))) ((xtar)))
                          bogusForceDataize.write ((((xtar).xaddfile)).apply (((((xtarfile).xTarInfo)).apply ("foo"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xfobj).xclosed)) ("external fileobjs must never closed"))
                        xdata.write ((((xfobj).xgetvalue)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xtar)))))
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xfobj).xclosed)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) (((((xfobj).xgetvalue)).apply)))
                xtest_eof_marker.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))) ((xtar)))
                          seq
                            xt.write ((((xtarfile).xTarInfo)).apply ("foo"))
                            (((unsupported)).apply (((xt).xsize)) ((((xtarfile).xRECORDSIZE).sub ((xtarfile).xBLOCKSIZE))))
                            bogusForceDataize.write ((((xtar).xaddfile)).apply ((xt)) (((((xio).xBytesIO)).apply (("a".mul ((xt).xsize))))))
                        (((unsupported)).apply (((((xself).xopen)).apply ((xtmpname)) ("rb"))) ((xfobj)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xfobj).xread)).apply)))) ((((xtarfile).xRECORDSIZE).mul 2)))
            (((unsupported)).apply ((xWriteTestBase)) (((xunittest).xTestCase)))
              seq
                xprefix.write "w:"
                xtest_100_char_name.write
                  [xself]
                    memory > xtar
                    memory > xt
                    memory > xname
                    seq > @
                      seq
                        xname.write ("0123456789".mul 10)
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                        (((unsupported)).apply)
                          seq
                            xt.write ((((xtarfile).xTarInfo)).apply ((xname)))
                            bogusForceDataize.write ((((xtar).xaddfile)).apply ((xt)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xtar).xgetnames)).apply)) (0))) ((xname)) ("failed to store 100 char filename"))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_tar_size.write
                  [xself]
                    memory > xtar
                    memory > xpath
                    seq > @
                      seq
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                        (((unsupported)).apply)
                          seq
                            xpath.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("file"))
                            (((unsupported)).apply ((((xopen)).apply ((xpath)) ("wb"))) ((xfobj)))
                              bogusForceDataize.write ((((xfobj).xwrite)).apply ("aaa"))
                            bogusForceDataize.write ((((xtar).xadd)).apply ((xpath)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((((xos).xpath).xgetsize)).apply ((xtmpname)))) (0) ("tarfile is empty"))
                xtest_file_size.write
                  [xself]
                    memory > xtar
                    memory > xtarinfo
                    memory > xpath
                    seq > @
                      seq
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                        (((unsupported)).apply)
                          seq
                            xpath.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("file"))
                            (((unsupported)).apply ((((xopen)).apply ((xpath)) ("wb"))))
                            xtarinfo.write ((((xtar).xgettarinfo)).apply ((xpath)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xsize)) (0))
                            (((unsupported)).apply ((((xopen)).apply ((xpath)) ("wb"))) ((xfobj)))
                              bogusForceDataize.write ((((xfobj).xwrite)).apply ("aaa"))
                            xtarinfo.write ((((xtar).xgettarinfo)).apply ((xpath)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xsize)) (3))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_directory_size.write
                  [xself]
                    memory > xtar
                    memory > xtarinfo
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("directory"))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xpath)))
                        (((unsupported)).apply)
                          seq
                            xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                            (((unsupported)).apply)
                              seq
                                xtarinfo.write ((((xtar).xgettarinfo)).apply ((xpath)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xsize)) (0))
                              bogusForceDataize.write ((((xtar).xclose)).apply)
                          bogusForceDataize.write ((((xsupport).xrmdir)).apply ((xpath)))
                xtest_ordered_recursion.write
                  [xself]
                    memory > xpaths
                    memory > xtar
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("directory"))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xpath)))
                        bogusForceDataize.write ((((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpath)) ("1"))) ("a")).xclose)).apply)
                        bogusForceDataize.write ((((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xpath)) ("2"))) ("a")).xclose)).apply)
                        (((unsupported)).apply)
                          seq
                            xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                            (((unsupported)).apply)
                              seq
                                (((unsupported)).apply ((((((xunittest).xmock).xpatch)).apply ("os.listdir"))) ((xmock_listdir)))
                                  seq
                                    (((unsupported)).apply (((xmock_listdir).xreturn_value)) ((((unsupported)).apply ("2") ("1"))))
                                    bogusForceDataize.write ((((xtar).xadd)).apply ((xpath)))
                                xpaths.write (((unsupported)).apply)
                                (((unsupported)).apply ((xm)) (((((xtar).xgetmembers)).apply)))
                                  bogusForceDataize.write ((((xpaths).xappend)).apply ((((unsupported)).apply ((((((xos).xpath).xsplit)).apply (((xm).xname)))) ((1.neg)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpaths)) ((((unsupported)).apply ("directory") ("1") ("2"))))
                              bogusForceDataize.write ((((xtar).xclose)).apply)
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((((((xos).xpath).xjoin)).apply ((xpath)) ("1"))))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((((((xos).xpath).xjoin)).apply ((xpath)) ("2"))))
                            bogusForceDataize.write ((((xsupport).xrmdir)).apply ((xpath)))
                xtest_gettarinfo_pathlike_name.write
                  [xself]
                    memory > xpath
                    memory > xtarinfo
                    memory > xtarinfo2
                    seq > @
                      (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))) ((xtar)))
                        seq
                          xpath.write (((((xpathlib).xPath)).apply ((xTEMPDIR))).div "file")
                          (((unsupported)).apply ((((xopen)).apply ((xpath)) ("wb"))) ((xfobj)))
                            bogusForceDataize.write ((((xfobj).xwrite)).apply ("aaa"))
                          xtarinfo.write ((((xtar).xgettarinfo)).apply ((xpath)))
                          xtarinfo2.write ((((xtar).xgettarinfo)).apply (((((xos).xfspath)).apply ((xpath)))))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtarinfo).xname)) ((xstr)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xname)) (((xtarinfo2).xname)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xsize)) (3))
                xtest_link_size.write
                  [xself]
                    memory > xtarget
                    memory > xtar
                    memory > xtarinfo
                    memory > xlink
                    seq > @
                      (((unsupported)).apply)
                        xlink.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("link"))
                        xtarget.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("link_target"))
                        (((unsupported)).apply ((((xopen)).apply ((xtarget)) ("wb"))) ((xfobj)))
                          bogusForceDataize.write ((((xfobj).xwrite)).apply ("aaa"))
                        (((unsupported)).apply ((xPermissionError)))
                          bogusForceDataize.write ((((xos).xlink)).apply ((xtarget)) ((xlink)))
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("os.link(): %s".mod (xe))))
                        (((unsupported)).apply)
                          seq
                            xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                            (((unsupported)).apply)
                              seq
                                bogusForceDataize.write ((((xtar).xgettarinfo)).apply ((xtarget)))
                                xtarinfo.write ((((xtar).xgettarinfo)).apply ((xlink)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xsize)) (0))
                              bogusForceDataize.write ((((xtar).xclose)).apply)
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtarget)))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((xlink)))
                xtest_symlink_size.write
                  [xself]
                    memory > xtar
                    memory > xtarinfo
                    memory > xpath
                    seq > @
                      (((unsupported)).apply)
                        xpath.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("symlink"))
                        bogusForceDataize.write ((((xos).xsymlink)).apply ("link_target") ((xpath)))
                        (((unsupported)).apply)
                          seq
                            xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                            (((unsupported)).apply)
                              seq
                                xtarinfo.write ((((xtar).xgettarinfo)).apply ((xpath)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xsize)) (0))
                              bogusForceDataize.write ((((xtar).xclose)).apply)
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xpath)))
                xtest_add_self.write
                  [xself]
                    memory > xtar
                    memory > xdstname
                    seq > @
                      seq
                        xdstname.write (((((xos).xpath).xabspath)).apply ((xtmpname)))
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtar).xname)) ((xdstname)) ("archive name must be absolute"))
                            bogusForceDataize.write ((((xtar).xadd)).apply ((xdstname)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtar).xgetnames)).apply)) ((((unsupported)).apply)) ("added the archive to itself"))
                            (((unsupported)).apply (((((xsupport).xchange_cwd)).apply ((xTEMPDIR)))))
                              bogusForceDataize.write ((((xtar).xadd)).apply ((xdstname)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtar).xgetnames)).apply)) ((((unsupported)).apply)) ("added the archive to itself"))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_filter.write
                  [xself]
                    memory > xname
                    memory > xtar
                    memory > xtempdir
                    memory > xfilter
                    seq > @
                      seq
                        xtempdir.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("filter"))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xtempdir)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xname)) ((((unsupported)).apply ("foo") ("bar") ("baz"))))
                              seq
                                xname.write (((((xos).xpath).xjoin)).apply ((xtempdir)) ((xname)))
                                bogusForceDataize.write ((((xsupport).xcreate_empty_file)).apply ((xname)))
                            xfilter.write
                              [xtarinfo]
                                seq > @
                                  seq
                                    ((((((xos).xpath).xbasename)).apply (((xtarinfo).xname))).eq "bar").if
                                      (((unsupported)).apply)
                                    (((unsupported)).apply (((xtarinfo).xuid)) (123))
                                    (((unsupported)).apply (((xtarinfo).xuname)) ("foo"))
                                    (((unsupported)).apply ((xtarinfo)))
                            xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) (((xself).xmode)) ("iso8859-1"))
                            (((unsupported)).apply)
                              (((unsupported)).apply (((xtar).xadd)) ((xtempdir)) ("empty_dir") ((xfilter)))
                              bogusForceDataize.write ((((xtar).xclose)).apply)
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              bogusForceDataize.write ((((xtar).xadd)).apply ((xtempdir)) ("empty_dir") (TRUE) ("None: is there a None literal in the EO language?") ((xfilter)))
                            xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) ("r"))
                            (((unsupported)).apply)
                              seq
                                (((unsupported)).apply ((xtarinfo)) ((xtar)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xuid)) (123))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xuname)) ("foo"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xtar).xgetmembers)).apply)))) (3))
                              bogusForceDataize.write ((((xtar).xclose)).apply)
                          bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xtempdir)))
                x_test_pathname.write
                  [xself xpath xcmp_path xdir]
                    memory > xt
                    memory > xtar
                    memory > xfoo
                    seq > @
                      (((unsupported)).apply)
                        xfoo.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("foo"))
                        ((xdir).not).if
                          bogusForceDataize.write ((((xsupport).xcreate_empty_file)).apply ((xfoo)))
                          bogusForceDataize.write ((((xos).xmkdir)).apply ((xfoo)))
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((xtar).xadd)) ((xfoo)) ((xpath)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) ("r"))
                        (((unsupported)).apply)
                          xt.write ((((xtar).xnext)).apply)
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        ((xdir).not).if
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xfoo)))
                          bogusForceDataize.write ((((xsupport).xrmdir)).apply ((xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xname)) (((xcmp_path).or ((((xpath).xreplace)).apply (((xos).xsep)) ("/")))))
                xtest_extractall_symlinks.write
                  [xself]
                    memory > xtarget_file
                    memory > xtempdir
                    memory > xsource_file
                    memory > xtemparchive
                    seq > @
                      (((unsupported)).apply)
                        xtempdir.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("testsymlinks"))
                        xtemparchive.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("testsymlinks.tar"))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xtempdir)))
                        (((unsupported)).apply)
                          seq
                            xsource_file.write (((((xos).xpath).xjoin)).apply ((xtempdir)) ("source"))
                            xtarget_file.write (((((xos).xpath).xjoin)).apply ((xtempdir)) ("symlink"))
                            (((unsupported)).apply ((((xopen)).apply ((xsource_file)) ("w"))) ((xf)))
                              bogusForceDataize.write ((((xf).xwrite)).apply ("somethingn"))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ((xsource_file)) ((xtarget_file)))
                            (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtemparchive)) ("w"))) ((xtar)))
                              seq
                                (((unsupported)).apply (((xtar).xadd)) ((xsource_file)) ("source"))
                                (((unsupported)).apply (((xtar).xadd)) ((xtarget_file)) ("symlink"))
                            (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtemparchive)) (2))) ((xtar)))
                              (((unsupported)).apply ((xOSError)))
                                (((unsupported)).apply (((xtar).xextractall)) ((xtempdir)))
                                bogusForceDataize.write ((((xself).xfail)).apply ("extractall failed with symlinked files"))
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtemparchive)))
                            bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xtempdir)))
                xtest_pathnames.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ("foo"))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply ("foo") (".") ("bar"))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply ("foo") ("..") ("bar"))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply (".") ("foo"))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply (".") ("foo") ("."))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply (".") ("foo") (".") ("bar"))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply (".") ("foo") ("..") ("bar"))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply (".") ("foo") ("..") ("bar"))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply ("..") ("foo"))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply ("..") ("foo") (".."))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply ("..") ("foo") (".") ("bar"))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((((xos).xpath).xjoin)).apply ("..") ("foo") ("..") ("bar"))))
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply (((("foo".sub ((xos).xsep)).sub ((xos).xsep)).sub "bar")))
                        (((unsupported)).apply (((xself).x_test_pathname)) ((("foo".sub ((xos).xsep)).sub ((xos).xsep))) ("foo") (TRUE))
                xtest_abs_pathnames.write
                  [xself]
                    seq > @
                      (((xsys).xplatform).eq "win32").if
                        bogusForceDataize.write ((((xself).x_test_pathname)).apply ((((unsupported)).apply)) ("foo"))
                        seq
                          bogusForceDataize.write ((((xself).x_test_pathname)).apply ("/foo") ("foo"))
                          bogusForceDataize.write ((((xself).x_test_pathname)).apply ("///foo") ("foo"))
                xtest_cwd.write
                  [xself]
                    memory > xtar
                    seq > @
                      (((unsupported)).apply (((((xsupport).xchange_cwd)).apply ((xTEMPDIR)))))
                        seq
                          xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                          (((unsupported)).apply)
                            bogusForceDataize.write ((((xtar).xadd)).apply ("."))
                            bogusForceDataize.write ((((xtar).xclose)).apply)
                          xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) ("r"))
                          (((unsupported)).apply)
                            (((unsupported)).apply ((xt)) ((xtar)))
                              (((xt).xname).neq ".").if
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xt).xname).xstartswith)).apply ("./"))) (((xt).xname)))
                            bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_open_nonwritable_fileobj.write
                  [xself]
                    memory > xtar
                    memory > xfirst
                    memory > xf
                    memory > xwrite
                    seq > @
                      (((unsupported)).apply ((xexctype)) ((((unsupported)).apply ((xOSError)) ((xEOFError)) ((xRuntimeError)))))
                        seq
                          (((unsupported)).apply (((xio).xBytesIO)))
                            seq
                              xfirst.write TRUE
                              xwrite.write
                                [xself xdata]
                                  seq > @
                                    ((xself).xfirst).if
                                      seq
                                        (((unsupported)).apply (((xself).xfirst)) (FALSE))
                                        (((unsupported)).apply ((xexctype)))
                          xf.write (((xBadFile)).apply)
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xexctype)))))
                            xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) (((xself).xmode)) ((xf)) (((xtarfile).xPAX_FORMAT)) ((((unsupported)).apply ("non") ("empty"))))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).xclosed)))
            (((unsupported)).apply ((xGzipTest)) ((xWriteTest)))
            (((unsupported)).apply ((xBz2Test)) ((xWriteTest)))
            (((unsupported)).apply ((xLzmaTest)) ((xWriteTest)))
            (((unsupported)).apply ((xWriteTestBase)) (((xunittest).xTestCase)))
              seq
                xprefix.write "w|"
                xdecompressor.write "None: is there a None literal in the EO language?"
                xtest_stream_padding.write
                  [xself]
                    memory > xtar
                    memory > xdec
                    memory > xdata
                    seq > @
                      seq
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                        bogusForceDataize.write ((((xtar).xclose)).apply)
                        ((xself).xdecompressor).if
                          seq
                            xdec.write ((((xself).xdecompressor)).apply)
                            (((unsupported)).apply ((((xopen)).apply ((xtmpname)) ("rb"))) ((xfobj)))
                              xdata.write ((((xfobj).xread)).apply)
                            xdata.write ((((xdec).xdecompress)).apply ((xdata)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xdec).xunused_data)) ("found trailing data"))
                          (((unsupported)).apply (((((xself).xopen)).apply ((xtmpname)))) ((xfobj)))
                            xdata.write ((((xfobj).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xdata).xcount)).apply ("0"))) (((xtarfile).xRECORDSIZE)) ("incorrect zero padding"))
                xtest_file_mode.write
                  [xself]
                    memory > xtar
                    memory > xoriginal_umask
                    memory > xmode
                    seq > @
                      (((unsupported)).apply)
                        (((((xos).xpath).xexists)).apply ((xtmpname))).if
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtmpname)))
                        xoriginal_umask.write ((((xos).xumask)).apply (18))
                        (((unsupported)).apply)
                          seq
                            xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                            bogusForceDataize.write ((((xtar).xclose)).apply)
                            xmode.write ((((((xos).xstat)).apply ((xtmpname))).xst_mode).and 511)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmode)) (420) ("wrong file permissions"))
                          bogusForceDataize.write ((((xos).xumask)).apply ((xoriginal_umask)))
            (((unsupported)).apply ((xGzipTest)) ((xStreamWriteTest)))
              xtest_source_directory_not_leaked.write
                [xself]
                  memory > xpayload
                  seq > @
                    seq
                      (((unsupported)).apply)
                      bogusForceDataize.write (((((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode))).xclose)).apply)
                      xpayload.write (((unsupported)).apply ((((((xpathlib).xPath)).apply ((xtmpname))).xread_text)) ("latin-1"))
                      (((unsupported)).apply ((((unsupported)).apply ((((((xos).xpath).xdirname)).apply ((xtmpname)))) ((xpayload)))))
            (((unsupported)).apply ((xBz2Test)) ((xStreamWriteTest)))
              xdecompressor.write ((xbz2).if ((xbz2).xBZ2Decompressor) "None: is there a None literal in the EO language?")
            (((unsupported)).apply ((xLzmaTest)) ((xStreamWriteTest)))
              xdecompressor.write ((xlzma).if ((xlzma).xLZMADecompressor) "None: is there a None literal in the EO language?")
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                x_length.write
                  [xself xs]
                    memory > xblocks
                    seq > @
                      seq
                        xblocks.write ((((unsupported)).apply ((((xlen)).apply ((xs)))) (512)).sub 1)
                        (((unsupported)).apply (((xblocks).mul 512)))
                x_calc_size.write
                  [xself xname xlink]
                    memory > xcount
                    seq > @
                      (((unsupported)).apply)
                        xcount.write 512
                        ((((xlen)).apply ((xname))).greater ((xtarfile).xLENGTH_NAME)).if
                          seq
                            (((unsupported)).apply ((xcount)) (512))
                            (((unsupported)).apply ((xcount)) (((((xself).x_length)).apply ((xname)))))
                        ((((unsupported)).apply ((xlink)) ("None: is there a None literal in the EO language?")).and ((((xlen)).apply ((xlink))).greater ((xtarfile).xLENGTH_LINK))).if
                          seq
                            (((unsupported)).apply ((xcount)) (512))
                            (((unsupported)).apply ((xcount)) (((((xself).x_length)).apply ((xlink)))))
                        (((unsupported)).apply ((xcount)))
                x_test.write
                  [xself xname xlink]
                    memory > xv2
                    memory > xmember
                    memory > xv1
                    memory > xtarinfo
                    memory > xtar
                    seq > @
                      (((unsupported)).apply)
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ((xname)))
                        (xlink).if
                          seq
                            (((unsupported)).apply (((xtarinfo).xlinkname)) ((xlink)))
                            (((unsupported)).apply (((xtarinfo).xtype)) (((xtarfile).xLNKTYPE)))
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)) ("w"))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xtar).xformat)) (((xtarfile).xGNU_FORMAT)))
                            bogusForceDataize.write ((((xtar).xaddfile)).apply ((xtarinfo)))
                            xv1.write ((((xself).x_calc_size)).apply ((xname)) ((xlink)))
                            xv2.write ((xtar).xoffset)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv1)) ((xv2)) ("GNU longname/longlink creation failed"))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)))
                        (((unsupported)).apply)
                          seq
                            xmember.write ((((xtar).xnext)).apply)
                            bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xmember)) ("unable to read longname member"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xname)) (((xmember).xname)) ("unable to read longname member"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xlinkname)) (((xmember).xlinkname)) ("unable to read longname member"))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_longname_1023.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)).apply ((("longnam/".mul 127).sub "longnam")))
                xtest_longname_1024.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)).apply ((("longnam/".mul 127).sub "longname")))
                xtest_longname_1025.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)).apply ((("longnam/".mul 127).sub "longname_")))
                xtest_longlink_1023.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)).apply ("name") ((("longlnk/".mul 127).sub "longlnk")))
                xtest_longlink_1024.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)).apply ("name") ((("longlnk/".mul 127).sub "longlink")))
                xtest_longlink_1025.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)).apply ("name") ((("longlnk/".mul 127).sub "longlink_")))
                xtest_longnamelink_1023.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)).apply ((("longnam/".mul 127).sub "longnam")) ((("longlnk/".mul 127).sub "longlnk")))
                xtest_longnamelink_1024.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)).apply ((("longnam/".mul 127).sub "longname")) ((("longlnk/".mul 127).sub "longlink")))
                xtest_longnamelink_1025.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test)).apply ((("longnam/".mul 127).sub "longname_")) ((("longlnk/".mul 127).sub "longlink_")))
            (((unsupported)).apply ((xWriteTestBase)) (((xunittest).xTestCase)))
              seq
                xprefix.write "x:"
                xfile_path.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("spameggs42"))
                xsetUp.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtmpname)))
                xsetUpClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xopen)).apply (((xcls).xfile_path)) ("wb"))) ((xfobj)))
                          bogusForceDataize.write ((((xfobj).xwrite)).apply ("aaa"))
                xtearDownClass.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xcls).xfile_path)))
                xtest_create.write
                  [xself]
                    memory > xnames
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))) ((xtobj)))
                          bogusForceDataize.write ((((xtobj).xadd)).apply (((xself).xfile_path)))
                        (((unsupported)).apply (((((xself).xtaropen)).apply ((xtmpname)))) ((xtobj)))
                          xnames.write ((((xtobj).xgetnames)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnames)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spameggs42") ((((unsupported)).apply ((xnames)) (0))))
                xtest_create_existing.write
                  [xself]
                    memory > xtobj
                    memory > xnames
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))) ((xtobj)))
                          bogusForceDataize.write ((((xtobj).xadd)).apply (((xself).xfile_path)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFileExistsError)))))
                          xtobj.write ((((xtarfile).xopen)).apply ((xtmpname)) (((xself).xmode)))
                        (((unsupported)).apply (((((xself).xtaropen)).apply ((xtmpname)))) ((xtobj)))
                          xnames.write ((((xtobj).xgetnames)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnames)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spameggs42") ((((unsupported)).apply ((xnames)) (0))))
                xtest_create_taropen.write
                  [xself]
                    memory > xnames
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xtaropen)).apply ((xtmpname)) ("x"))) ((xtobj)))
                          bogusForceDataize.write ((((xtobj).xadd)).apply (((xself).xfile_path)))
                        (((unsupported)).apply (((((xself).xtaropen)).apply ((xtmpname)))) ((xtobj)))
                          xnames.write ((((xtobj).xgetnames)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnames)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spameggs42") ((((unsupported)).apply ((xnames)) (0))))
                xtest_create_existing_taropen.write
                  [xself]
                    memory > xnames
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xtaropen)).apply ((xtmpname)) ("x"))) ((xtobj)))
                          bogusForceDataize.write ((((xtobj).xadd)).apply (((xself).xfile_path)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xFileExistsError)))))
                          (((unsupported)).apply (((((xself).xtaropen)).apply ((xtmpname)) ("x"))))
                        (((unsupported)).apply (((((xself).xtaropen)).apply ((xtmpname)))) ((xtobj)))
                          xnames.write ((((xtobj).xgetnames)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnames)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spameggs42") ((((unsupported)).apply ((xnames)) (0))))
                xtest_create_pathlike_name.write
                  [xself]
                    memory > xnames
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtarfile).xopen)).apply (((((xpathlib).xPath)).apply ((xtmpname)))) (((xself).xmode)))) ((xtobj)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtobj).xname)) ((xstr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtobj).xname)) ((((((xos).xpath).xabspath)).apply ((xtmpname)))))
                            bogusForceDataize.write ((((xtobj).xadd)).apply (((((xpathlib).xPath)).apply (((xself).xfile_path)))))
                            xnames.write ((((xtobj).xgetnames)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnames)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spameggs42") ((((unsupported)).apply ((xnames)) (0))))
                        (((unsupported)).apply (((((xself).xtaropen)).apply ((xtmpname)))) ((xtobj)))
                          xnames.write ((((xtobj).xgetnames)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnames)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spameggs42") ((((unsupported)).apply ((xnames)) (0))))
                xtest_create_taropen_pathlike_name.write
                  [xself]
                    memory > xnames
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xtaropen)).apply (((((xpathlib).xPath)).apply ((xtmpname)))) ("x"))) ((xtobj)))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xtobj).xname)) ((xstr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtobj).xname)) ((((((xos).xpath).xabspath)).apply ((xtmpname)))))
                            bogusForceDataize.write ((((xtobj).xadd)).apply (((((xpathlib).xPath)).apply (((xself).xfile_path)))))
                            xnames.write ((((xtobj).xgetnames)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnames)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spameggs42") ((((unsupported)).apply ((xnames)) (0))))
                        (((unsupported)).apply (((((xself).xtaropen)).apply ((xtmpname)))) ((xtobj)))
                          xnames.write ((((xtobj).xgetnames)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnames)))) (1))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("spameggs42") ((((unsupported)).apply ((xnames)) (0))))
            (((unsupported)).apply ((xGzipTest)) ((xCreateTest)))
            (((unsupported)).apply ((xBz2Test)) ((xCreateTest)))
            (((unsupported)).apply ((xLzmaTest)) ((xCreateTest)))
            (((unsupported)).apply ((xCreateTest)))
              seq
                xprefix.write "x"
                xtest_create_taropen.write "None: is there a None literal in the EO language?"
                xtest_create_existing_taropen.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((((xhasattr)).apply ((xos)) ("link"))) ("Missing hardlink implementation"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfoo)) ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("foo"))))
                        (((unsupported)).apply (((xself).xbar)) ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ("bar"))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xfoo)) ("wb"))) ((xfobj)))
                          bogusForceDataize.write ((((xfobj).xwrite)).apply ("foo"))
                        (((unsupported)).apply ((xPermissionError)))
                          bogusForceDataize.write ((((xos).xlink)).apply (((xself).xfoo)) (((xself).xbar)))
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("os.link(): %s".mod (xe))))
                        (((unsupported)).apply (((xself).xtar)) (((((xtarfile).xopen)).apply ((xtmpname)) ("w"))))
                        bogusForceDataize.write (((((xself).xtar).xadd)).apply (((xself).xfoo)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xtar).xclose)).apply)
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xself).xfoo)))
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xself).xbar)))
                xtest_add_twice.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgettarinfo)).apply (((xself).xfoo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xtype)) (((xtarfile).xREGTYPE)) ("add file as regular failed"))
                xtest_add_hardlink.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write (((((xself).xtar).xgettarinfo)).apply (((xself).xbar)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xtype)) (((xtarfile).xLNKTYPE)) ("add file as hardlink failed"))
                xtest_dereference_hardlink.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xtar).xdereference)) (TRUE))
                        xtarinfo.write (((((xself).xtar).xgettarinfo)).apply (((xself).xbar)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtarinfo).xtype)) (((xtarfile).xREGTYPE)) ("dereferencing hardlink failed"))
            (((unsupported)).apply ((xGNUWriteTest)))
              seq
                x_test.write
                  [xself xname xlink]
                    memory > xn
                    memory > xtar
                    memory > xtarinfo
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ((xname)))
                        (xlink).if
                          seq
                            (((unsupported)).apply (((xtarinfo).xlinkname)) ((xlink)))
                            (((unsupported)).apply (((xtarinfo).xtype)) (((xtarfile).xLNKTYPE)))
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("w") (((xtarfile).xPAX_FORMAT)))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xtar).xaddfile)).apply ((xtarinfo)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        xtar.write ((((xtarfile).xopen)).apply ((xtmpname)))
                        (((unsupported)).apply)
                          (xlink).if
                            seq
                              xl.write ((((unsupported)).apply (((((xtar).xgetmembers)).apply)) (0)).xlinkname)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlink)) ((xl)) ("PAX longlink creation failed"))
                            seq
                              xn.write ((((unsupported)).apply (((((xtar).xgetmembers)).apply)) (0)).xname)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xname)) ((xn)) ("PAX longname creation failed"))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_pax_global_header.write
                  [xself]
                    memory > xtar
                    memory > xpax_headers
                    seq > @
                      seq
                        xpax_headers.write (((unsupported)).apply ("foo") ("bar") ("uid") ("0") ("mtime") ("1.23") ("test") ("xe4xf6xfc") ("xe4xf6xfc") ("test"))
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("w") (((xtarfile).xPAX_FORMAT)) ((xpax_headers)))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xtar).xaddfile)).apply (((((xtarfile).xTarInfo)).apply ("test"))))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("iso8859-1"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtar).xpax_headers)) ((xpax_headers)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((((xtar).xgetmembers)).apply)) (0)).xpax_headers)) ((xpax_headers)))
                            (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xval)))) ((((((xtar).xpax_headers).xitems)).apply)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xtype)).apply ((xkey)))) ((xbytes)))
                                bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xtype)).apply ((xval)))) ((xbytes)))
                                (((unsupported)).apply ((xkey)) (((xtarfile).xPAX_NUMBER_FIELDS))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))
                                    bogusForceDataize.write (((((unsupported)).apply (((xtarfile).xPAX_NUMBER_FIELDS)) ((xkey)))).apply ((xval)))
                                    bogusForceDataize.write ((((xself).xfail)).apply ("unable to convert pax header field"))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_pax_extended_header.write
                  [xself]
                    memory > xt
                    memory > xtar
                    memory > xpax_headers
                    seq > @
                      seq
                        xpax_headers.write (((unsupported)).apply ("path") ("foo") ("uid") ("123"))
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("w") (((xtarfile).xPAX_FORMAT)) ("iso8859-1"))
                        (((unsupported)).apply)
                          seq
                            xt.write ((((xtarfile).xTarInfo)).apply)
                            (((unsupported)).apply (((xt).xname)) ("xe4xf6xfc"))
                            (((unsupported)).apply (((xt).xuid)) ((((unsupported)).apply (8) (8))))
                            (((unsupported)).apply (((xt).xpax_headers)) ((xpax_headers)))
                            bogusForceDataize.write ((((xtar).xaddfile)).apply ((xt)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("iso8859-1"))
                        (((unsupported)).apply)
                          seq
                            xt.write (((unsupported)).apply (((((xtar).xgetmembers)).apply)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xpax_headers)) ((xpax_headers)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xname)) ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xuid)) (123))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
            (((unsupported)).apply)
              seq
                xtest_iso8859_1_filename.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_unicode_filename)).apply ("iso8859-1"))
                xtest_utf7_filename.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_unicode_filename)).apply ("utf7"))
                xtest_utf8_filename.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_unicode_filename)).apply ("utf-8"))
                x_test_unicode_filename.write
                  [xself xencoding]
                    memory > xname
                    memory > xtar
                    seq > @
                      seq
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("w") (((xself).xformat)) ((xencoding)) ("strict"))
                        (((unsupported)).apply)
                          seq
                            xname.write "xe4xf6xfc"
                            bogusForceDataize.write ((((xtar).xaddfile)).apply (((((xtarfile).xTarInfo)).apply ((xname)))))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ((xencoding)))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((((xtar).xgetmembers)).apply)) (0)).xname)) ((xname)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_unicode_filename_error.write
                  [xself]
                    memory > xtar
                    memory > xtarinfo
                    seq > @
                      seq
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("w") (((xself).xformat)) ("ascii") ("strict"))
                        (((unsupported)).apply)
                          seq
                            xtarinfo.write ((((xtarfile).xTarInfo)).apply)
                            (((unsupported)).apply (((xtarinfo).xname)) ("xe4xf6xfc"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeError)) (((xtar).xaddfile)) ((xtarinfo)))
                            (((unsupported)).apply (((xtarinfo).xname)) ("foo"))
                            (((unsupported)).apply (((xtarinfo).xuname)) ("xe4xf6xfc"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeError)) (((xtar).xaddfile)) ((xtarinfo)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_unicode_argument.write
                  [xself]
                    memory > xtar
                    seq > @
                      seq
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ("r") ("iso8859-1") ("strict"))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xt)) ((xtar)))
                            seq
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xt).xname)))) ((xstr)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xt).xlinkname)))) ((xstr)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xt).xuname)))) ((xstr)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xt).xgname)))) ((xstr)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                xtest_uname_unicode.write
                  [xself]
                    memory > xt
                    memory > xtar
                    seq > @
                      seq
                        xt.write ((((xtarfile).xTarInfo)).apply ("foo"))
                        (((unsupported)).apply (((xt).xuname)) ("xe4xf6xfc"))
                        (((unsupported)).apply (((xt).xgname)) ("xe4xf6xfc"))
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("w") (((xself).xformat)) ("iso8859-1"))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xtar).xaddfile)).apply ((xt)))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
                        xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("iso8859-1"))
                        (((unsupported)).apply)
                          seq
                            xt.write ((((xtar).xgetmember)).apply ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xuname)) ("xe4xf6xfc"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xgname)) ("xe4xf6xfc"))
                            (((xself).xformat).neq ((xtarfile).xPAX_FORMAT)).if
                              seq
                                bogusForceDataize.write ((((xtar).xclose)).apply)
                                xtar.write (((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("ascii"))
                                xt.write ((((xtar).xgetmember)).apply ("foo"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xuname)) ("udce4udcf6udcfc"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xgname)) ("udce4udcf6udcfc"))
                          bogusForceDataize.write ((((xtar).xclose)).apply)
            (((unsupported)).apply ((xUnicodeTest)) (((xunittest).xTestCase)))
              seq
                xformat.write ((xtarfile).xUSTAR_FORMAT)
                xtest_unicode_name1.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply (("0123456789".mul 10)))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply ((("0123456789".mul 10).sub "0")) ((xValueError)))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply ((("0123456789".mul 9).sub "01234567xff")))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply ((("0123456789".mul 9).sub "012345678xff")) ((xValueError)))
                xtest_unicode_name2.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply ((("0123456789".mul 9).sub "012345xffxff")))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply ((("0123456789".mul 9).sub "0123456xffxff")) ((xValueError)))
                xtest_unicode_longname1.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply (((("0123456789".mul 15).sub "01234/").sub ("0123456789".mul 10))))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply (((("0123456789".mul 15).sub "0123/4").sub ("0123456789".mul 10))) ((xValueError)))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply (((("0123456789".mul 15).sub "012xff/").sub ("0123456789".mul 10))))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply (((("0123456789".mul 15).sub "0123xff/").sub ("0123456789".mul 10))) ((xValueError)))
                xtest_unicode_longname2.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply (((("0123456789".mul 15).sub "01xff/2").sub ("0123456789".mul 10))) ((xValueError)))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply (((("0123456789".mul 15).sub "01xffxff/").sub ("0123456789".mul 10))) ((xValueError)))
                xtest_unicode_longname3.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply (((("0123456789".mul 15).sub "01xffxff/2").sub ("0123456789".mul 10))) ((xValueError)))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply ((((("0123456789".mul 15).sub "01234/").sub ("0123456789".mul 9)).sub "01234567xff")))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply ((((("0123456789".mul 15).sub "01234/").sub ("0123456789".mul 9)).sub "012345678xff")) ((xValueError)))
                xtest_unicode_longname4.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply ((((("0123456789".mul 15).sub "01234/").sub ("0123456789".mul 9)).sub "012345xffxff")))
                        bogusForceDataize.write ((((xself).x_test_ustar_name)).apply ((((("0123456789".mul 15).sub "01234/").sub ("0123456789".mul 9)).sub "0123456xffxff")) ((xValueError)))
                x_test_ustar_name.write
                  [xself xname xexc]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("w") (((xself).xformat)) ("utf-8"))) ((xtar)))
                          seq
                            xt.write ((((xtarfile).xTarInfo)).apply ((xname)))
                            (((unsupported)).apply ((xexc)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xtar).xaddfile)).apply ((xt)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexc)) (((xtar).xaddfile)) ((xt)))
                        (((unsupported)).apply ((xexc)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("r") ("utf-8"))) ((xtar)))
                            (((unsupported)).apply ((xt)) ((xtar)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xname)) (((xt).xname)))
                                (((unsupported)).apply)
                xtest_unicode_link1.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_ustar_link)).apply (("0123456789".mul 10)))
                        bogusForceDataize.write ((((xself).x_test_ustar_link)).apply ((("0123456789".mul 10).sub "0")) ((xValueError)))
                        bogusForceDataize.write ((((xself).x_test_ustar_link)).apply ((("0123456789".mul 9).sub "01234567xff")))
                        bogusForceDataize.write ((((xself).x_test_ustar_link)).apply ((("0123456789".mul 9).sub "012345678xff")) ((xValueError)))
                xtest_unicode_link2.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_ustar_link)).apply ((("0123456789".mul 9).sub "012345xffxff")))
                        bogusForceDataize.write ((((xself).x_test_ustar_link)).apply ((("0123456789".mul 9).sub "0123456xffxff")) ((xValueError)))
                x_test_ustar_link.write
                  [xself xname xexc]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("w") (((xself).xformat)) ("utf-8"))) ((xtar)))
                          seq
                            xt.write ((((xtarfile).xTarInfo)).apply ("foo"))
                            (((unsupported)).apply (((xt).xlinkname)) ((xname)))
                            (((unsupported)).apply ((xexc)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xtar).xaddfile)).apply ((xt)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexc)) (((xtar).xaddfile)) ((xt)))
                        (((unsupported)).apply ((xexc)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtmpname)) ("r") ("utf-8"))) ((xtar)))
                            (((unsupported)).apply ((xt)) ((xtar)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xname)) (((xt).xlinkname)))
                                (((unsupported)).apply)
            (((unsupported)).apply ((xUnicodeTest)) (((xunittest).xTestCase)))
              seq
                xformat.write ((xtarfile).xGNU_FORMAT)
                xtest_bad_pax_header.write
                  [xself]
                    memory > xt
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xname)))) ((((unsupported)).apply ((((unsupported)).apply ("utf-8") ("pax/bad-pax-udce4udcf6udcfc"))) ((((unsupported)).apply ("iso8859-1") ("pax/bad-pax-xe4xf6xfc"))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ((xencoding)) ("surrogateescape"))) ((xtar)))
                          (((unsupported)).apply ((xKeyError)))
                            xt.write ((((xtar).xgetmember)).apply ((xname)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("unable to read bad GNU tar pax header"))
            (((unsupported)).apply ((xUnicodeTest)) (((xunittest).xTestCase)))
              seq
                xformat.write ((xtarfile).xPAX_FORMAT)
                xtest_unicode_filename_error.write "None: is there a None literal in the EO language?"
                xtest_binary_header.write
                  [xself]
                    memory > xt
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xencoding)) ((xname)))) ((((unsupported)).apply ((((unsupported)).apply ("utf-8") ("pax/hdrcharset-udce4udcf6udcfc"))) ((((unsupported)).apply ("iso8859-1") ("pax/hdrcharset-xe4xf6xfc"))))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ((xencoding)) ("surrogateescape"))) ((xtar)))
                          (((unsupported)).apply ((xKeyError)))
                            xt.write ((((xtar).xgetmember)).apply ((xname)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("unable to read POSIX.1-2008 binary header"))
            (((unsupported)).apply)
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtarname)) ((xtmpname)))
                        (((((xos).xpath).xexists)).apply (((xself).xtarname))).if
                          bogusForceDataize.write ((((xsupport).xunlink)).apply (((xself).xtarname)))
                x_create_testtar.write
                  [xself xmode]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xtarname)) ("iso8859-1"))) ((xsrc)))
                          seq
                            xt.write ((((xsrc).xgetmember)).apply ("ustar/regtype"))
                            (((unsupported)).apply (((xt).xname)) ("foo"))
                            (((unsupported)).apply (((((xsrc).xextractfile)).apply ((xt)))) ((xf)))
                              (((unsupported)).apply (((((xtarfile).xopen)).apply (((xself).xtarname)) ((xmode)))) ((xtar)))
                                bogusForceDataize.write ((((xtar).xaddfile)).apply ((xt)) ((xf)))
                xtest_append_compressed.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_create_testtar)).apply (("w:".sub ((xself).xsuffix))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xtarfile).xReadError)) (((xtarfile).xopen)) ((xtmpname)) ("a"))
            (((unsupported)).apply ((xAppendTestBase)) (((xunittest).xTestCase)))
              seq
                xtest_append_compressed.write "None: is there a None literal in the EO language?"
                x_add_testfile.write
                  [xself xfileobj]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) (((xself).xtarname)) ("a") ((xfileobj)))) ((xtar)))
                          bogusForceDataize.write ((((xtar).xaddfile)).apply (((((xtarfile).xTarInfo)).apply ("bar"))))
                x_test.write
                  [xself xnames xfileobj]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) (((xself).xtarname)) ((xfileobj)))) ((xtar)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtar).xgetnames)).apply)) ((xnames)))
                xtest_non_existing.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_add_testfile)).apply)
                        bogusForceDataize.write ((((xself).x_test)).apply)
                xtest_empty.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((((xtarfile).xopen)).apply (((xself).xtarname)) ("w:")).xclose)).apply)
                        bogusForceDataize.write ((((xself).x_add_testfile)).apply)
                        bogusForceDataize.write ((((xself).x_test)).apply)
                xtest_empty_fileobj.write
                  [xself]
                    memory > xfobj
                    seq > @
                      seq
                        xfobj.write ((((xio).xBytesIO)).apply (("0".mul 1024)))
                        bogusForceDataize.write ((((xself).x_add_testfile)).apply ((xfobj)))
                        bogusForceDataize.write ((((xfobj).xseek)).apply (0))
                        (((unsupported)).apply (((xself).x_test)) ((xfobj)))
                xtest_fileobj.write
                  [xself]
                    memory > xfobj
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_create_testtar)).apply)
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtarname)) ("rb"))) ((xfobj)))
                          xdata.write ((((xfobj).xread)).apply)
                        xfobj.write ((((xio).xBytesIO)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).x_add_testfile)).apply ((xfobj)))
                        bogusForceDataize.write ((((xfobj).xseek)).apply (0))
                        (((unsupported)).apply (((xself).x_test)) ((((unsupported)).apply ("foo") ("bar"))) ((xfobj)))
                xtest_existing.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_create_testtar)).apply)
                        bogusForceDataize.write ((((xself).x_add_testfile)).apply)
                        (((unsupported)).apply (((xself).x_test)) ((((unsupported)).apply ("foo") ("bar"))))
                x_test_error.write
                  [xself xdata]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply (((xself).xtarname)) ("wb"))) ((xfobj)))
                          bogusForceDataize.write ((((xfobj).xwrite)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xtarfile).xReadError)) (((xself).x_add_testfile)))
                xtest_null.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_error)).apply (""))
                xtest_incomplete.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_error)).apply (("0".mul 13)))
                xtest_premature_eof.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((((((xtarfile).xTarInfo)).apply ("foo")).xtobuf)).apply)
                        bogusForceDataize.write ((((xself).x_test_error)).apply ((xdata)))
                xtest_trailing_garbage.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((((((xtarfile).xTarInfo)).apply ("foo")).xtobuf)).apply)
                        bogusForceDataize.write ((((xself).x_test_error)).apply (((xdata).sub ("0".mul 13))))
                xtest_invalid.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_error)).apply (("a".mul 512)))
            (((unsupported)).apply ((xGzipTest)) ((xAppendTestBase)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xBz2Test)) ((xAppendTestBase)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((xLzmaTest)) ((xAppendTestBase)) (((xunittest).xTestCase)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_ustar_limits.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply (("0123456789".mul 10)))
                        bogusForceDataize.write ((((xtarinfo).xtobuf)).apply (((xtarfile).xUSTAR_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ((("0123456789".mul 10).sub "0")))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtarinfo).xtobuf)) (((xtarfile).xUSTAR_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ((("123/".mul 62).sub "longname")))
                        bogusForceDataize.write ((((xtarinfo).xtobuf)).apply (((xtarfile).xUSTAR_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ((("1234567/".mul 31).sub "longname")))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtarinfo).xtobuf)) (((xtarfile).xUSTAR_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ((("123/".mul 126).sub "longname")))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtarinfo).xtobuf)) (((xtarfile).xUSTAR_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ("longlink"))
                        (((unsupported)).apply (((xtarinfo).xlinkname)) ((("123/".mul 126).sub "longname")))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtarinfo).xtobuf)) (((xtarfile).xUSTAR_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ("name"))
                        (((unsupported)).apply (((xtarinfo).xuid)) (2097152))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtarinfo).xtobuf)) (((xtarfile).xUSTAR_FORMAT)))
                xtest_gnu_limits.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ((("123/".mul 126).sub "longname")))
                        bogusForceDataize.write ((((xtarinfo).xtobuf)).apply (((xtarfile).xGNU_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ("longlink"))
                        (((unsupported)).apply (((xtarinfo).xlinkname)) ((("123/".mul 126).sub "longname")))
                        bogusForceDataize.write ((((xtarinfo).xtobuf)).apply (((xtarfile).xGNU_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ("name"))
                        (((unsupported)).apply (((xtarinfo).xuid)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtarinfo).xtobuf)) (((xtarfile).xGNU_FORMAT)))
                xtest_pax_limits.write
                  [xself]
                    memory > xtarinfo
                    seq > @
                      seq
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ((("123/".mul 126).sub "longname")))
                        bogusForceDataize.write ((((xtarinfo).xtobuf)).apply (((xtarfile).xPAX_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ("longlink"))
                        (((unsupported)).apply (((xtarinfo).xlinkname)) ((("123/".mul 126).sub "longname")))
                        bogusForceDataize.write ((((xtarinfo).xtobuf)).apply (((xtarfile).xPAX_FORMAT)))
                        xtarinfo.write ((((xtarfile).xTarInfo)).apply ("name"))
                        (((unsupported)).apply (((xtarinfo).xuid)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xtarinfo).xtobuf)).apply (((xtarfile).xPAX_FORMAT)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_char_fields.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xstn)).apply ("foo") (8) ("ascii") ("strict"))) ("foo00000"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xstn)).apply ("foobar") (3) ("ascii") ("strict"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnts)).apply ("foo00000") ("ascii") ("strict"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnts)).apply ("foo0bar0") ("ascii") ("strict"))) ("foo"))
                xtest_read_number_fields.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ("0000001x00"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ("7777777x00"))) (2097151))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ("x80x00x00x00x00x20x00x00"))) (2097152))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ("x80x00x00x00xffxffxffxff"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ("xffxffxffxffxffxffxffxff"))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ("xffxffxffxffxffxffxffx9c"))) ((100.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ("xffx00x00x00x00x00x00x00"))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ("0"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ("       0"))) (0))
                xtest_write_number_fields.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xitn)).apply (1))) ("0000001x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xitn)).apply (2097151))) ("7777777x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtarfile).xitn)) (2097152) (((xtarfile).xGNU_FORMAT)))) ("x80x00x00x00x00x20x00x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtarfile).xitn)) ((((unsupported)).apply)) (((xtarfile).xGNU_FORMAT)))) ("x80x00x00x00xffxffxffxff"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtarfile).xitn)) ((1.neg)) (((xtarfile).xGNU_FORMAT)))) ("xffxffxffxffxffxffxffxff"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtarfile).xitn)) ((100.neg)) (((xtarfile).xGNU_FORMAT)))) ("xffxffxffxffxffxffxffx9c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtarfile).xitn)) (((((unsupported)).apply).neg)) (((xtarfile).xGNU_FORMAT)))) ("xffx00x00x00x00x00x00x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtarfile).xitn)) ((100.0.neg)) (((xtarfile).xGNU_FORMAT)))) ("xffxffxffxffxffxffxffx9c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtarfile).xitn)) (((((unsupported)).apply (8) (12)).sub 0.0)) (((xtarfile).xGNU_FORMAT)))) ("x80x00x00x10x00x00x00x00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtarfile).xnti)).apply ((((unsupported)).apply (((xtarfile).xitn)) ((0.1.neg)) (((xtarfile).xGNU_FORMAT)))))) (0))
                xtest_number_field_limits.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xtarfile).xitn)).apply ((1.neg)) (8) (((xtarfile).xUSTAR_FORMAT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xtarfile).xitn)).apply (2097152) (8) (((xtarfile).xUSTAR_FORMAT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xtarfile).xitn)).apply (((((unsupported)).apply).neg)) (6) (((xtarfile).xGNU_FORMAT)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xtarfile).xitn)).apply ((((unsupported)).apply)) (6) (((xtarfile).xGNU_FORMAT)))
                xtest__all__.write
                  [xself]
                    memory > xblacklist
                    seq > @
                      seq
                        xblacklist.write (((unsupported)).apply ("version") ("grp") ("pwd") ("symlink_exception") ("NUL") ("BLOCKSIZE") ("RECORDSIZE") ("GNU_MAGIC") ("POSIX_MAGIC") ("LENGTH_NAME") ("LENGTH_LINK") ("LENGTH_PREFIX") ("REGTYPE") ("AREGTYPE") ("LNKTYPE") ("SYMTYPE") ("CHRTYPE") ("BLKTYPE") ("DIRTYPE") ("FIFOTYPE") ("CONTTYPE") ("GNUTYPE_LONGNAME") ("GNUTYPE_LONGLINK") ("GNUTYPE_SPARSE") ("XHDTYPE") ("XGLTYPE") ("SOLARIS_XHDTYPE") ("SUPPORTED_TYPES") ("REGULAR_TYPES") ("GNU_TYPES") ("PAX_FIELDS") ("PAX_NAME_FIELDS") ("PAX_NUMBER_FIELDS") ("stn") ("nts") ("nti") ("itn") ("calc_chksums") ("copyfileobj") ("filemode") ("EmptyHeaderError") ("TruncatedHeaderError") ("EOFHeaderError") ("InvalidHeaderError") ("SubsequentHeaderError") ("ExFileObject") ("main"))
                        (((unsupported)).apply (((xsupport).xcheck__all__)) ((xself)) ((xtarfile)) ((xblacklist)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtarfilecmd.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xscript_helper).xassert_python_ok)).apply ("-m") ("tarfile") ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((((xout).xreplace)).apply ((((((xos).xlinesep).xencode)).apply)) ("n"))))
                xtarfilecmd_failure.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xscript_helper).xassert_python_failure)).apply ("-m") ("tarfile") ((((unsupported)).apply ((xargs)))))))
                xmake_simple_tarfile.write
                  [xself xtar_name]
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)).apply (((((xsupport).xfindfile)).apply ("tokenize_tests.txt"))) (((((xsupport).xfindfile)).apply ("tokenize_tests-no-coding-cookie-and-utf8-bom-sig-only.txt"))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xtar_name)))
                        (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtar_name)) ("w"))) ((xtf)))
                          (((unsupported)).apply ((xtardata)) ((xfiles)))
                            (((unsupported)).apply (((xtf).xadd)) ((xtardata)) ((((((xos).xpath).xbasename)).apply ((xtardata)))))
                xtest_bad_use.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xself).xtarfilecmd_failure)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("usage") (((((xerr).xlower)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("error") (((((xerr).xlower)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("required") (((((xerr).xlower)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xself).xtarfilecmd_failure)).apply ("-l") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xerr).xstrip)).apply)) (""))
                xtest_test_command.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply ((xtar_name)) ((xtesttarnames)))
                        (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("-t") ("--test"))))
                          seq
                            xout.write ((((xself).xtarfilecmd)).apply ((xopt)) ((xtar_name)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                xtest_test_command_verbose.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply ((xtar_name)) ((xtesttarnames)))
                        (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("-v") ("--verbose"))))
                          seq
                            xout.write ((((xself).xtarfilecmd)).apply ((xopt)) ("-t") ((xtar_name)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("is a tar archive.n") ((xout)))
                xtest_test_command_invalid_file.write
                  [xself]
                    memory > xzipname
                    memory > xdata
                    seq > @
                      seq
                        xzipname.write ((((xsupport).xfindfile)).apply ("zipdir.zip"))
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xself).xtarfilecmd_failure)).apply ("-t") ((xzipname)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (" is not a tar archive.") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1))
                        (((unsupported)).apply ((xtar_name)) ((xtesttarnames)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtar_name)))))
                            seq
                              (((unsupported)).apply ((((xopen)).apply ((xtar_name)) ("rb"))) ((xf)))
                                xdata.write ((((xf).xread)).apply)
                              (((unsupported)).apply)
                                seq
                                  (((unsupported)).apply ((((xopen)).apply ((xtmpname)) ("wb"))) ((xf)))
                                    bogusForceDataize.write ((((xf).xwrite)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (511))))))
                                  (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xself).xtarfilecmd_failure)).apply ("-t") ((xtmpname)))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1))
                                bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtmpname)))
                xtest_list_command.write
                  [xself]
                    memory > xexpected
                    memory > xout
                    seq > @
                      (((unsupported)).apply ((xtar_name)) ((xtesttarnames)))
                        seq
                          (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xt)))
                            (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtar_name)) ("r"))) ((xtf)))
                              (((unsupported)).apply (((xtf).xlist)) (FALSE))
                          xexpected.write (((((((xt).xgetvalue)).apply).xencode)).apply ("ascii") ("backslashreplace"))
                          (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("-l") ("--list"))))
                            seq
                              xout.write (((unsupported)).apply (((xself).xtarfilecmd)) ((xopt)) ((xtar_name)) ("ascii"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ((xexpected)))
                xtest_list_command_verbose.write
                  [xself]
                    memory > xexpected
                    memory > xout
                    seq > @
                      (((unsupported)).apply ((xtar_name)) ((xtesttarnames)))
                        seq
                          (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xt)))
                            (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtar_name)) ("r"))) ((xtf)))
                              (((unsupported)).apply (((xtf).xlist)) (TRUE))
                          xexpected.write (((((((xt).xgetvalue)).apply).xencode)).apply ("ascii") ("backslashreplace"))
                          (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("-v") ("--verbose"))))
                            seq
                              xout.write (((unsupported)).apply (((xself).xtarfilecmd)) ((xopt)) ("-l") ((xtar_name)) ("ascii"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ((xexpected)))
                xtest_list_command_invalid_file.write
                  [xself]
                    memory > xzipname
                    seq > @
                      seq
                        xzipname.write ((((xsupport).xfindfile)).apply ("zipdir.zip"))
                        (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xself).xtarfilecmd_failure)).apply ("-l") ((xzipname)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (" is not a tar archive.") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1))
                xtest_create_command.write
                  [xself]
                    memory > xout
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)).apply (((((xsupport).xfindfile)).apply ("tokenize_tests.txt"))) (((((xsupport).xfindfile)).apply ("tokenize_tests-no-coding-cookie-and-utf8-bom-sig-only.txt"))))
                        (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("-c") ("--create"))))
                          (((unsupported)).apply)
                            seq
                              xout.write ((((xself).xtarfilecmd)).apply ((xopt)) ((xtmpname)) ((((unsupported)).apply ((xfiles)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                              (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)))) ((xtar)))
                                bogusForceDataize.write ((((xtar).xgetmembers)).apply)
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtmpname)))
                xtest_create_command_verbose.write
                  [xself]
                    memory > xout
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)).apply (((((xsupport).xfindfile)).apply ("tokenize_tests.txt"))) (((((xsupport).xfindfile)).apply ("tokenize_tests-no-coding-cookie-and-utf8-bom-sig-only.txt"))))
                        (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("-v") ("--verbose"))))
                          (((unsupported)).apply)
                            seq
                              xout.write ((((xself).xtarfilecmd)).apply ((xopt)) ("-c") ((xtmpname)) ((((unsupported)).apply ((xfiles)))))
                              bogusForceDataize.write ((((xself).xassertIn)).apply (" file created.") ((xout)))
                              (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)))) ((xtar)))
                                bogusForceDataize.write ((((xtar).xgetmembers)).apply)
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtmpname)))
                xtest_create_command_dotless_filename.write
                  [xself]
                    memory > xout
                    memory > xfiles
                    seq > @
                      seq
                        xfiles.write (((unsupported)).apply (((((xsupport).xfindfile)).apply ("tokenize_tests.txt"))))
                        (((unsupported)).apply)
                          seq
                            xout.write ((((xself).xtarfilecmd)).apply ("-c") ((xdotlessname)) ((((unsupported)).apply ((xfiles)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                            (((unsupported)).apply (((((xtarfile).xopen)).apply ((xdotlessname)))) ((xtar)))
                              bogusForceDataize.write ((((xtar).xgetmembers)).apply)
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xdotlessname)))
                xtest_create_command_dot_started_filename.write
                  [xself]
                    memory > xout
                    memory > xfiles
                    memory > xtar_name
                    seq > @
                      seq
                        xtar_name.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) (".testtar"))
                        xfiles.write (((unsupported)).apply (((((xsupport).xfindfile)).apply ("tokenize_tests.txt"))))
                        (((unsupported)).apply)
                          seq
                            xout.write ((((xself).xtarfilecmd)).apply ("-c") ((xtar_name)) ((((unsupported)).apply ((xfiles)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                            (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtar_name)))) ((xtar)))
                              bogusForceDataize.write ((((xtar).xgetmembers)).apply)
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtar_name)))
                xtest_create_command_compressed.write
                  [xself]
                    memory > xout
                    memory > xfiles
                    memory > xtar_name
                    seq > @
                      seq
                        xfiles.write (((unsupported)).apply (((((xsupport).xfindfile)).apply ("tokenize_tests.txt"))) (((((xsupport).xfindfile)).apply ("tokenize_tests-no-coding-cookie-and-utf8-bom-sig-only.txt"))))
                        (((unsupported)).apply ((xfiletype)) ((((unsupported)).apply ((xGzipTest)) ((xBz2Test)) ((xLzmaTest)))))
                          seq
                            (((xfiletype).xopen).not).if
                              (((unsupported)).apply)
                            (((unsupported)).apply)
                              seq
                                xtar_name.write (((xtmpname).sub ".").sub ((xfiletype).xsuffix))
                                xout.write ((((xself).xtarfilecmd)).apply ("-c") ((xtar_name)) ((((unsupported)).apply ((xfiles)))))
                                (((unsupported)).apply (((((xfiletype).xtaropen)).apply ((xtar_name)))) ((xtar)))
                                  bogusForceDataize.write ((((xtar).xgetmembers)).apply)
                              bogusForceDataize.write ((((xsupport).xunlink)).apply ((xtar_name)))
                xtest_extract_command.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xmake_simple_tarfile)).apply ((xtmpname)))
                        (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("-e") ("--extract"))))
                          (((unsupported)).apply)
                            seq
                              (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply ((xtarextdir)))))
                                xout.write ((((xself).xtarfilecmd)).apply ((xopt)) ((xtmpname)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                            bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xtarextdir)))
                xtest_extract_command_verbose.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xmake_simple_tarfile)).apply ((xtmpname)))
                        (((unsupported)).apply ((xopt)) ((((unsupported)).apply ("-v") ("--verbose"))))
                          (((unsupported)).apply)
                            seq
                              (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply ((xtarextdir)))))
                                xout.write ((((xself).xtarfilecmd)).apply ((xopt)) ("-e") ((xtmpname)))
                              bogusForceDataize.write ((((xself).xassertIn)).apply (" file is extracted.") ((xout)))
                            bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xtarextdir)))
                xtest_extract_command_different_directory.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xmake_simple_tarfile)).apply ((xtmpname)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply ((xtarextdir)))))
                              xout.write ((((xself).xtarfilecmd)).apply ("-e") ((xtmpname)) ("spamdir"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                          bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xtarextdir)))
                xtest_extract_command_invalid_file.write
                  [xself]
                    memory > xzipname
                    seq > @
                      seq
                        xzipname.write ((((xsupport).xfindfile)).apply ("zipdir.zip"))
                        (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply ((xtarextdir)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xrc)) ((xout)) ((xerr)))) (((((xself).xtarfilecmd_failure)).apply ("-e") ((xzipname)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (" is not a tar archive.") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_basic.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtarname)))) ((xtar)))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((xtar).xclosed)) ("closed inside runtime context"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xtar).xclosed)) ("context manager failed"))
                xtest_closed.write
                  [xself]
                    memory > xtar
                    seq > @
                      seq
                        xtar.write ((((xtarfile).xopen)).apply ((xtarname)))
                        bogusForceDataize.write ((((xtar).xclose)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))))
                          (((unsupported)).apply ((xtar)))
                xtest_exception.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xException)))) ((xexc)))
                          (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtarname)))) ((xtar)))
                            (((unsupported)).apply ((xOSError)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xexc).xexception)) ((xOSError)) ("wrong exception raised in context manager"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xtar).xclosed)) ("context manager failed"))
                xtest_no_eof.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)) ("w"))) ((xtar)))
                            (((unsupported)).apply ((xException)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpath).xgetsize)).apply ((xtmpname)))) (0) ("context manager wrote an end-of-archive block"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xtar).xclosed)) ("context manager failed"))
                xtest_eof.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)) ("w"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((((xos).xpath).xgetsize)).apply ((xtmpname)))) (0) ("context manager wrote no end-of-archive block"))
                xtest_fileobj.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xopen)).apply ((xtmpname)) ("wb"))) ((xfobj)))
                        seq
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply (((xtarfile).xopen)) ((xfobj)) ("w"))) ((xtar)))
                              (((unsupported)).apply ((xException)))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((xfobj).xclosed)) ("external file object was closed"))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((xtar).xclosed)) ("context manager failed"))
            (((unsupported)).apply ((xReadTest)) (((xunittest).xTestCase)) (((((xunittest).xskipIf)).apply ((((xhasattr)).apply ((xos)) ("link"))) ("requires os.link to be missing"))))
              seq
                x_test_link_extraction.write
                  [xself xname]
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xtar).xextract)).apply ((xname)) ((xTEMPDIR)))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ((xname)))) ("rb"))) ((xf)))
                          xdata.write ((((xf).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsha256sum)).apply ((xdata)))) ((xsha256_regtype)))
                xtest_hardlink_extraction1.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_link_extraction)).apply ("ustar/lnktype"))
                xtest_hardlink_extraction2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_link_extraction)).apply ("./ustar/linktest2/lnktype"))
                xtest_symlink_extraction1.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_link_extraction)).apply ("ustar/symtype"))
                xtest_symlink_extraction2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_link_extraction)).apply ("./ustar/linktest2/symtype"))
            (((unsupported)).apply ((xBz2Test)) (((xunittest).xTestCase)))
              seq
                x_test_partial_input.write
                  [xself xmode]
                    memory > xhit_eof
                    memory > xseek
                    memory > xdata
                    memory > xread
                    seq > @
                      seq
                        (((unsupported)).apply (((xio).xBytesIO)))
                          seq
                            xhit_eof.write FALSE
                            xread.write
                              [xself xn]
                                seq > @
                                  seq
                                    ((xself).xhit_eof).if
                                      (((unsupported)).apply ((((xAssertionError)).apply ("infinite loop detected in tarfile.open()"))))
                                    (((unsupported)).apply (((xself).xhit_eof)) ((((((xself).xtell)).apply).eq (((xlen)).apply (((((xself).xgetvalue)).apply))))))
                                    (((unsupported)).apply (((((((xsuper)).apply ((xMyBytesIO)) ((xself))).xread)).apply ((xn)))))
                            xseek.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xhit_eof)) (FALSE))
                                    (((unsupported)).apply (((((((xsuper)).apply ((xMyBytesIO)) ((xself))).xseek)).apply ((((unsupported)).apply ((xargs)))))))
                        xdata.write ((((xbz2).xcompress)).apply ((((((((xtarfile).xTarInfo)).apply ("foo")).xtobuf)).apply)))
                        (((unsupported)).apply ((xx)) ((((xrange)).apply (((((xlen)).apply ((xdata))).sub 1)))))
                          (((unsupported)).apply (((xtarfile).xReadError)))
                            (((unsupported)).apply (((xtarfile).xopen)) ((((xMyBytesIO)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply ((xx)))))))) ((xmode)))
                xtest_partial_input.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_partial_input)).apply ("r"))
                xtest_partial_input_bz2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_test_partial_input)).apply ("r:bz2"))
            xroot_is_uid_gid_0.write
              []
                seq > @
                  seq
                    (((unsupported)).apply ((xImportError)))
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                      (((unsupported)).apply (FALSE))
                    ((((unsupported)).apply (((((xpwd).xgetpwuid)).apply (0))) (0)).neq "root").if
                      (((unsupported)).apply (FALSE))
                    ((((unsupported)).apply (((((xgrp).xgetgrgid)).apply (0))) (0)).neq "root").if
                      (((unsupported)).apply (FALSE))
                    (((unsupported)).apply (TRUE))
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((((xhasattr)).apply ((xos)) ("chown"))) ("missing os.chown"))) (((((xunittest).xskipUnless)).apply ((((xhasattr)).apply ((xos)) ("geteuid"))) ("missing os.geteuid"))))
              seq
                x_make_test_archive.write
                  [xfilename_1 xdirname_1 xfilename_2]
                    memory > xt
                    memory > xfobj
                    memory > xitems
                    seq > @
                      (((unsupported)).apply)
                        xfobj.write ((((xio).xBytesIO)).apply ("content"))
                        xitems.write (((unsupported)).apply ((((unsupported)).apply ((xfilename_1)) (99) (98) (((xtarfile).xREGTYPE)) ((xfobj)))) ((((unsupported)).apply ((xdirname_1)) (77) (76) (((xtarfile).xDIRTYPE)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xfilename_2)) (88) (87) (((xtarfile).xREGTYPE)) ((xfobj)))))
                        (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtmpname)) ("w"))) ((xtarfl)))
                          (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xuid)) ((xgid)) ((xtyp)) ((xcontents)))) ((xitems)))
                            seq
                              xt.write ((((xtarfile).xTarInfo)).apply ((xname)))
                              (((unsupported)).apply (((xt).xuid)) ((xuid)))
                              (((unsupported)).apply (((xt).xgid)) ((xgid)))
                              (((unsupported)).apply (((xt).xuname)) ("root"))
                              (((unsupported)).apply (((xt).xgname)) ("root"))
                              (((unsupported)).apply (((xt).xtype)) ((xtyp)))
                              bogusForceDataize.write ((((xtarfl).xaddfile)).apply ((xt)) ((xcontents)))
                        (((unsupported)).apply ((xtmpname)))
                x_setup_test.write
                  [xmock_geteuid]
                    memory > xfilename_2
                    memory > xtar_filename
                    memory > xfname
                    memory > xdirname_1
                    memory > xdirname
                    memory > xfilename_1
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmock_geteuid).xreturn_value)) (0))
                        xfname.write "numeric-owner-testfile"
                        xdirname.write "dir"
                        xfilename_1.write (xfname)
                        xdirname_1.write (xdirname)
                        xfilename_2.write (((((xos).xpath).xjoin)).apply ((xdirname)) ((xfname)))
                        xtar_filename.write ((((xNumericOwnerTest).x_make_test_archive)).apply ((xfilename_1)) ((xdirname_1)) ((xfilename_2)))
                        (((unsupported)).apply (((((xtarfile).xopen)).apply ((xtar_filename)))) ((xtarfl)))
                          (((unsupported)).apply ((((unsupported)).apply ((xtarfl)) ((xfilename_1)) ((xdirname_1)) ((xfilename_2)))))
                xtest_extract_with_numeric_owner.write
                  [xself xmock_geteuid xmock_chmod xmock_chown]
                    memory > xf_filename_2
                    memory > xf_filename_1
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_setup_test)).apply ((xmock_geteuid)))) ((((unsupported)).apply ((xtarfl)) ((xfilename_1)) ((x_)) ((xfilename_2)))))
                          seq
                            (((unsupported)).apply (((xtarfl).xextract)) ((xfilename_1)) ((xTEMPDIR)) (TRUE))
                            (((unsupported)).apply (((xtarfl).xextract)) ((xfilename_2)) ((xTEMPDIR)) (TRUE))
                        xf_filename_1.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ((xfilename_1)))
                        xf_filename_2.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ((xfilename_2)))
                        (((unsupported)).apply (((xmock_chown).xassert_has_calls)) ((((unsupported)).apply ((((((xunittest).xmock).xcall)).apply ((xf_filename_1)) (99) (98))) ((((((xunittest).xmock).xcall)).apply ((xf_filename_2)) (88) (87))))) (TRUE))
                xtest_extractall_with_numeric_owner.write
                  [xself xmock_geteuid xmock_chmod xmock_chown]
                    memory > xf_filename_2
                    memory > xf_filename_1
                    memory > xf_dirname_1
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_setup_test)).apply ((xmock_geteuid)))) ((((unsupported)).apply ((xtarfl)) ((xfilename_1)) ((xdirname_1)) ((xfilename_2)))))
                          (((unsupported)).apply (((xtarfl).xextractall)) ((xTEMPDIR)) (TRUE))
                        xf_filename_1.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ((xfilename_1)))
                        xf_dirname_1.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ((xdirname_1)))
                        xf_filename_2.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ((xfilename_2)))
                        (((unsupported)).apply (((xmock_chown).xassert_has_calls)) ((((unsupported)).apply ((((((xunittest).xmock).xcall)).apply ((xf_filename_1)) (99) (98))) ((((((xunittest).xmock).xcall)).apply ((xf_dirname_1)) (77) (76))) ((((((xunittest).xmock).xcall)).apply ((xf_filename_2)) (88) (87))))) (TRUE))
                xtest_extract_without_numeric_owner.write
                  [xself xmock_geteuid xmock_chmod xmock_chown]
                    memory > xf_filename_1
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_setup_test)).apply ((xmock_geteuid)))) ((((unsupported)).apply ((xtarfl)) ((xfilename_1)) ((x_)) ((x_)))))
                          (((unsupported)).apply (((xtarfl).xextract)) ((xfilename_1)) ((xTEMPDIR)) (FALSE))
                        xf_filename_1.write (((((xos).xpath).xjoin)).apply ((xTEMPDIR)) ((xfilename_1)))
                        bogusForceDataize.write ((((xmock_chown).xassert_called_with)).apply ((xf_filename_1)) (0) (0))
                xtest_keyword_only.write
                  [xself xmock_geteuid]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_setup_test)).apply ((xmock_geteuid)))) ((((unsupported)).apply ((xtarfl)) ((xfilename_1)) ((x_)) ((x_)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xtarfl).xextract)) ((xfilename_1)) ((xTEMPDIR)) (FALSE) (TRUE))
            xsetUpModule.write
              []
                memory > xdata
                memory > xtesttarnames
                seq > @
                  seq
                    bogusForceDataize.write ((((xsupport).xunlink)).apply ((xTEMPDIR)))
                    bogusForceDataize.write ((((xos).xmakedirs)).apply ((xTEMPDIR)))
                    (((unsupported)).apply)
                    xtesttarnames.write (((unsupported)).apply ((xtarname)))
                    (((unsupported)).apply ((((xopen)).apply ((xtarname)) ("rb"))) ((xfobj)))
                      xdata.write ((((xfobj).xread)).apply)
                    (((unsupported)).apply ((xc)) ((((unsupported)).apply ((xGzipTest)) ((xBz2Test)) ((xLzmaTest)))))
                      ((xc).xopen).if
                        seq
                          bogusForceDataize.write ((((xsupport).xunlink)).apply (((xc).xtarname)))
                          bogusForceDataize.write ((((xtesttarnames).xappend)).apply (((xc).xtarname)))
                          (((unsupported)).apply (((((xc).xopen)).apply (((xc).xtarname)) ("wb"))) ((xtar)))
                            bogusForceDataize.write ((((xtar).xwrite)).apply ((xdata)))
            xtearDownModule.write
              []
                seq > @
                  (((((xos).xpath).xexists)).apply ((xTEMPDIR))).if
                    bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xTEMPDIR)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)