memory > xsanepathname2url
memory > xValueError
memory > xsocket
memory > xrange
memory > xurl
memory > xurllib
memory > xerr
memory > xopen
memory > xtime
memory > xi
memory > xtuple
memory > xe
memory > xunittest
memory > xkwargs
memory > xprint
memory > xtype
memory > xsupport
memory > xsys
memory > xargs
memory > xOSError
memory > xos
memory > xisinstance
memory > xlen
memory > x__name__
memory > xlogging
[] > test_urllib2net
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_sites_no_connection_close
        memory > x_extra_handlers
        memory > xFTP_HOST
        memory > xtest_ftp_no_timeout
        memory > xsetUp
        memory > xtest_ftp_default_timeout
        memory > xtest_http_basic
        memory > x_test_urls
        memory > xtest_http_default_timeout
        memory > xtest_redirect_url_withfrag
        memory > x_wrap_with_retry_thrice
        memory > x_retry_thrice
        memory > xtest_urlwithfrag
        memory > x_urlopen_with_retry
        memory > xtest_close
        memory > xtest_ftp_timeout
        memory > xtest_custom_headers
        memory > xtest_http_no_timeout
        memory > xskip_ftp_test_on_travis
        memory > xTIMEOUT
        memory > xtest_ftp_basic
        memory > xtest_file
        memory > xtest_ftp
        memory > xtest_http_timeout
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            bogusForceDataize.write ((((xsupport).xrequires)).apply ("network"))
            xTIMEOUT.write 60
            x_retry_thrice.write
              [xfunc xexc]
                memory > xlast_exc
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xi)) ((((xrange)).apply (3))))
                      (((unsupported)).apply ((xexc)))
                        (((unsupported)).apply ((((xfunc)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        seq
                          xlast_exc.write (xe)
                          (((unsupported)).apply)
                    (((unsupported)).apply ((xlast_exc)))
            x_wrap_with_retry_thrice.write
              [xfunc xexc]
                memory > xwrapped
                seq > @
                  seq
                    xwrapped.write
                      []
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((x_retry_thrice)).apply ((xfunc)) ((xexc)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                    (((unsupported)).apply ((xwrapped)))
            xskip_ftp_test_on_travis.write ((((xunittest).xskipIf)).apply ((((unsupported)).apply ("TRAVIS") (((xos).xenviron)))) ("bpo-35411: skip FTP test on Travis CI"))
            x_urlopen_with_retry.write (((x_wrap_with_retry_thrice)).apply ((((xurllib).xrequest).xurlopen)) ((((xurllib).xerror).xURLError)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              unsupported
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_close.write
                [xself]
                  memory > xresponse
                  memory > xurl
                  memory > xsock
                  seq > @
                    seq
                      xurl.write ((xsupport).xTEST_HTTP_URL)
                      (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xurl)))))
                        seq
                          xresponse.write (((x_urlopen_with_retry)).apply ((xurl)))
                          xsock.write ((xresponse).xfp)
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((xsock).xclosed)))
                          bogusForceDataize.write ((((xresponse).xclose)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((xsock).xclosed)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xlogger
                    seq > @
                      0.if
                        seq
                          (((unsupported)).apply)
                          xlogger.write ((((xlogging).xgetLogger)).apply ("test_urllib2net"))
                          bogusForceDataize.write ((((xlogger).xaddHandler)).apply (((((xlogging).xStreamHandler)).apply)))
                xtest_ftp.write
                  [xself]
                    memory > xurls
                    seq > @
                      (((unsupported)).apply)
                        xurls.write (((unsupported)).apply ("ftp://www.pythontest.net/README") ((((unsupported)).apply ("ftp://www.pythontest.net/non-existent-file") ("None: is there a None literal in the EO language?") ((((xurllib).xerror).xURLError)))))
                        bogusForceDataize.write ((((xself).x_test_urls)).apply ((xurls)) (((((xself).x_extra_handlers)).apply)))
                xtest_file.write
                  [xself]
                    memory > xTESTFN
                    memory > xf
                    memory > xurls
                    seq > @
                      seq
                        xTESTFN.write ((xsupport).xTESTFN)
                        xf.write (((xopen)).apply ((xTESTFN)) ("w"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply ("hi theren"))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            xurls.write (((unsupported)).apply (("file:".add (((xsanepathname2url)).apply ((((((xos).xpath).xabspath)).apply ((xTESTFN))))))) ((((unsupported)).apply ("file:///nonsensename/etc/passwd") ("None: is there a None literal in the EO language?") ((((xurllib).xerror).xURLError)))))
                            (((unsupported)).apply (((xself).x_test_urls)) ((xurls)) (((((xself).x_extra_handlers)).apply)) (TRUE))
                          bogusForceDataize.write ((((xos).xremove)).apply ((xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xurllib).xrequest).xurlopen)) ("./relative_path/to/file"))
                xtest_urlwithfrag.write
                  [xself]
                    memory > xreq
                    memory > xurlwith_frag
                    memory > xres
                    seq > @
                      seq
                        xurlwith_frag.write "http://www.pythontest.net/index.html#frag"
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xurlwith_frag)))))
                          seq
                            xreq.write (((((xurllib).xrequest).xRequest)).apply ((xurlwith_frag)))
                            xres.write (((((xurllib).xrequest).xurlopen)).apply ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xres).xgeturl)).apply)) ("http://www.pythontest.net/index.html#frag"))
                xtest_redirect_url_withfrag.write
                  [xself]
                    memory > xreq
                    memory > xredirect_url_with_frag
                    memory > xres
                    seq > @
                      seq
                        xredirect_url_with_frag.write "http://www.pythontest.net/redir/with_frag/"
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xredirect_url_with_frag)))))
                          seq
                            xreq.write (((((xurllib).xrequest).xRequest)).apply ((xredirect_url_with_frag)))
                            xres.write (((((xurllib).xrequest).xurlopen)).apply ((xreq)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xres).xgeturl)).apply)) ("http://www.pythontest.net/elsewhere/#frag"))
                xtest_custom_headers.write
                  [xself]
                    memory > xopener
                    memory > xrequest
                    memory > xurl
                    seq > @
                      seq
                        xurl.write ((xsupport).xTEST_HTTP_URL)
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xurl)))))
                          seq
                            xopener.write (((((xurllib).xrequest).xbuild_opener)).apply)
                            xrequest.write (((((xurllib).xrequest).xRequest)).apply ((xurl)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xrequest).xheader_items)).apply)))
                            bogusForceDataize.write ((((xopener).xopen)).apply ((xrequest)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xrequest).xheader_items)).apply)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xrequest).xhas_header)).apply ("User-agent"))))
                            bogusForceDataize.write ((((xrequest).xadd_header)).apply ("User-Agent") ("Test-Agent"))
                            bogusForceDataize.write ((((xopener).xopen)).apply ((xrequest)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xrequest).xget_header)).apply ("User-agent"))) ("Test-Agent"))
                xtest_sites_no_connection_close.write
                  [xself]
                    memory > xreq
                    memory > xres
                    memory > xURL
                    seq > @
                      (((unsupported)).apply)
                        xURL.write "http://www.imdb.com"
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xURL)))))
                          seq
                            (((unsupported)).apply ((xValueError)))
                              (((unsupported)).apply ((((((xurllib).xrequest).xurlopen)).apply ((xURL)))) ((xres)))
                              bogusForceDataize.write ((((xself).xfail)).apply ((((unsupported)).apply)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xres)))
                            xreq.write (((((xurllib).xrequest).xurlopen)).apply ((xURL)))
                            xres.write ((((xreq).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xres)))
                x_test_urls.write
                  [xself xurls xhandlers xretry]
                    memory > xdebug
                    memory > xreq
                    memory > xmsg
                    memory > xf
                    memory > xbuf
                    memory > xexpected_err
                    memory > xurlopen
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdebug.write (((((xlogging).xgetLogger)).apply ("test_urllib2")).xdebug)
                        xurlopen.write ((((((xurllib).xrequest).xbuild_opener)).apply ((((unsupported)).apply ((xhandlers))))).xopen)
                        (xretry).if
                          xurlopen.write (((x_wrap_with_retry_thrice)).apply ((xurlopen)) ((((xurllib).xerror).xURLError)))
                        (((unsupported)).apply ((xurl)) ((xurls)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xurl)))))
                            seq
                              (((xisinstance)).apply ((xurl)) ((xtuple))).if
                                (((unsupported)).apply ((((unsupported)).apply ((xurl)) ((xreq)) ((xexpected_err)))) ((xurl)))
                                (((unsupported)).apply ((xreq)) ((xexpected_err)) ("None: is there a None literal in the EO language?"))
                              (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xurl)))))
                                (((unsupported)).apply ((xOSError)))
                                  xf.write (((xurlopen)).apply ((xurl)) ((xreq)) ((xTIMEOUT)))
                                  (xexpected_err).if
                                    seq
                                      xmsg.write ("Didn't get expected error(s) %s for %s %s, got %s: %s".mod (((unsupported)).apply ((xexpected_err)) ((xurl)) ((xreq)) ((((xtype)).apply ((xerr)))) ((xerr))))
                                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xerr)) ((xexpected_err)) ((xmsg)))
                                    (((unsupported)).apply)
                                  seq
                                    (((unsupported)).apply (((xsocket).xtimeout)))
                                      (((unsupported)).apply (((xsupport).xtime_out)) (((xsupport).xsocket_peer_reset)) (((xsupport).xioerror_peer_reset)))
                                        seq
                                          xbuf.write ((((xf).xread)).apply)
                                          bogusForceDataize.write (((xdebug)).apply (("read %d bytes".mod (((xlen)).apply ((xbuf))))))
                                      (((unsupported)).apply ((xprint)) (("<timeout: %s>".mod (xurl))) (((xsys).xstderr)))
                                    bogusForceDataize.write ((((xf).xclose)).apply)
                              bogusForceDataize.write ((((xtime).xsleep)).apply (0.1))
                x_extra_handlers.write
                  [xself]
                    memory > xcfh
                    memory > xhandlers
                    seq > @
                      seq
                        xhandlers.write (((unsupported)).apply)
                        xcfh.write (((((xurllib).xrequest).xCacheFTPHandler)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xcfh).xclear_cache)))
                        bogusForceDataize.write ((((xcfh).xsetTimeout)).apply (1))
                        bogusForceDataize.write ((((xhandlers).xappend)).apply ((xcfh)))
                        (((unsupported)).apply ((xhandlers)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_http_basic.write
                  [xself]
                    memory > xurl
                    memory > xu
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        xurl.write ((xsupport).xTEST_HTTP_URL)
                        (((unsupported)).apply ((((unsupported)).apply (((xsupport).xtransient_internet)) ((xurl)) ("None: is there a None literal in the EO language?"))))
                          seq
                            xu.write (((x_urlopen_with_retry)).apply ((xurl)))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xu).xclose)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((((xu).xfp).xraw).x_sock).xgettimeout)).apply)))
                xtest_http_default_timeout.write
                  [xself]
                    memory > xurl
                    memory > xu
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        xurl.write ((xsupport).xTEST_HTTP_URL)
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xurl)))))
                          seq
                            bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (60))
                            (((unsupported)).apply)
                              seq
                                xu.write (((x_urlopen_with_retry)).apply ((xurl)))
                                bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xu).xclose)))
                              bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xu).xfp).xraw).x_sock).xgettimeout)).apply)) (60))
                xtest_http_no_timeout.write
                  [xself]
                    memory > xurl
                    memory > xu
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        xurl.write ((xsupport).xTEST_HTTP_URL)
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xurl)))))
                          seq
                            bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (60))
                            (((unsupported)).apply)
                              seq
                                xu.write (((unsupported)).apply ((x_urlopen_with_retry)) ((xurl)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xu).xclose)))
                              bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((((((xu).xfp).xraw).x_sock).xgettimeout)).apply)))
                xtest_http_timeout.write
                  [xself]
                    memory > xurl
                    memory > xu
                    seq > @
                      seq
                        xurl.write ((xsupport).xTEST_HTTP_URL)
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xurl)))))
                          seq
                            xu.write (((unsupported)).apply ((x_urlopen_with_retry)) ((xurl)) (120))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xu).xclose)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xu).xfp).xraw).x_sock).xgettimeout)).apply)) (120))
                xFTP_HOST.write "ftp://www.pythontest.net/"
                xtest_ftp_basic.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xsupport).xtransient_internet)) (((xself).xFTP_HOST)) ("None: is there a None literal in the EO language?"))))
                          seq
                            xu.write (((x_urlopen_with_retry)).apply (((xself).xFTP_HOST)))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xu).xclose)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((((((xu).xfp).xfp).xraw).x_sock).xgettimeout)).apply)))
                xtest_ftp_default_timeout.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply (((xself).xFTP_HOST)))))
                          seq
                            bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (60))
                            (((unsupported)).apply)
                              seq
                                xu.write (((x_urlopen_with_retry)).apply (((xself).xFTP_HOST)))
                                bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xu).xclose)))
                              bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xu).xfp).xfp).xraw).x_sock).xgettimeout)).apply)) (60))
                xtest_ftp_no_timeout.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply (((xself).xFTP_HOST)))))
                          seq
                            bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (60))
                            (((unsupported)).apply)
                              seq
                                xu.write (((unsupported)).apply ((x_urlopen_with_retry)) (((xself).xFTP_HOST)) ("None: is there a None literal in the EO language?"))
                                bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xu).xclose)))
                              bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((((((xu).xfp).xfp).xraw).x_sock).xgettimeout)).apply)))
                xtest_ftp_timeout.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply (((xself).xFTP_HOST)))))
                          seq
                            xu.write (((unsupported)).apply ((x_urlopen_with_retry)) (((xself).xFTP_HOST)) (60))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xu).xclose)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xu).xfp).xfp).xraw).x_sock).xgettimeout)).apply)) (60))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)