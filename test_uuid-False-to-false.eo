memory > xinteger
memory > xpickle
memory > xbble
memory > xurn
memory > xrange
memory > xproto
memory > xversion
memory > xtime
memory > xbytes
memory > xclock_seq
memory > xobject
memory > xcopy
memory > xfalse
memory > xu
memory > xBaseTestUUID
memory > xValueError
memory > xstr
memory > xio
memory > xis_safe
memory > xfields
memory > xh
memory > xvariant
memory > xb
memory > xii
memory > xprint
memory > xtype
memory > xf
memory > xstring
memory > xint
memory > xff
memory > xx
memory > xpickled
memory > xi
memory > xbuiltins
memory > xsupport
memory > xsys
memory > xhh
memory > xcurly
memory > xsubprocess
memory > xmock
memory > xos
memory > xbb
memory > xweakref
memory > xv
memory > xbytes_le
memory > xBaseTestInternals
memory > xsetattr
memory > xshutil
memory > xunittest
memory > x__import__
memory > xhex
memory > xj
memory > xlen
memory > xdict
memory > xTypeError
memory > x__name__
[] > test_uuid
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_uuid3
        memory > xtest_find_mac
        memory > xtest_exceptions
        memory > xtest_uuid1_unknown
        memory > xtest_UUID
        memory > xtest_uuid_weakref
        memory > xtest_uuid1
        memory > xtest_uuid1_safe
        memory > xtest_pickle_roundtrip
        memory > xtest_random_getnode
        memory > ximportable
        memory > xtest_uuid1_is_unsafe
        memory > xtest_uuid4
        memory > xtest_netbios_getnode
        memory > xtest_ipconfig_getnode
        memory > xtest_uuid1_eui64
        memory > xtest_getnode
        memory > xuuid
        memory > xtest_windll_getnode
        memory > xtest_netstat_getnode
        memory > xtest_unix_getnode
        memory > xtest_unpickle_previous_python_versions
        memory > xmock_generate_time_safe
        memory > xc_uuid
        memory > xtest_uuid1_is_safe
        memory > xtest_uuid1_time
        memory > xtestIssue8621
        memory > xtest_uuid1_bogus_return_value
        memory > xtest_uuid5
        memory > xpy_uuid
        memory > xtest_ip_getnode
        memory > x_uuid
        memory > xcheck_node
        memory > xtest_ifconfig_getnode
        memory > xtest_arp_getnode
        memory > xtest_lanscan_getnode
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xpy_uuid.write (((unsupported)).apply (((xsupport).ximport_fresh_module)) ("uuid") ((((unsupported)).apply ("_uuid"))))
            xc_uuid.write (((unsupported)).apply (((xsupport).ximport_fresh_module)) ("uuid") ((((unsupported)).apply ("_uuid"))))
            ximportable.write
              [xname]
                seq > @
                  (((unsupported)).apply)
                    seq
                      bogusForceDataize.write (((x__import__)).apply ((xname)))
                      (((unsupported)).apply (TRUE))
                    (((unsupported)).apply ((xfalse)))
            (((unsupported)).apply)
              seq
                xuuid.write "None: is there a None literal in the EO language?"
                xtest_UUID.write
                  [xself]
                    memory > xequivalents
                    memory > xascending
                    memory > xresorted
                    memory > xequal
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        xascending.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((xcurly)) ((xhex)) ((xbytes)) ((xbytes_le)) ((xfields)) ((xinteger)) ((xurn)) ((xtime)) ((xclock_seq)) ((xvariant)) ((xversion)))) ((((unsupported)).apply ((((unsupported)).apply ("00000000-0000-0000-0000-000000000000") ("{00000000-0000-0000-0000-000000000000}") ("00000000000000000000000000000000") ("0000000000000000") ("0000000000000000") ((((unsupported)).apply (0) (0) (0) (0) (0) (0))) (0) ("urn:uuid:00000000-0000-0000-0000-000000000000") (0) (0) ((((xself).xuuid).xRESERVED_NCS)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("00010203-0405-0607-0809-0a0b0c0d0e0f") ("{00010203-0405-0607-0809-0a0b0c0d0e0f}") ("000102030405060708090a0b0c0d0e0f") ("0x01x02x03x04x05x06x07x08tnx0bx0cx0dx0ex0f") ("x03x02x010x05x04x07x06x08tnx0bx0cx0dx0ex0f") ((((unsupported)).apply (66051) (1029) (1543) (8) (9) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:00010203-0405-0607-0809-0a0b0c0d0e0f") ((((unsupported)).apply)) (2057) ((((xself).xuuid).xRESERVED_NCS)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("02d9e6d5-9467-382e-8f9b-9300a64ac3cd") ("{02d9e6d5-9467-382e-8f9b-9300a64ac3cd}") ("02d9e6d59467382e8f9b9300a64ac3cd") ("x02xd9xe6xd5x94x67x38x2ex8fx9bx93x00xa6x4axc3xcd") ("xd5xe6xd9x02x67x94x2ex38x8fx9bx93x00xa6x4axc3xcd") ((((unsupported)).apply (47834837) (37991) (14382) (143) (155) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:02d9e6d5-9467-382e-8f9b-9300a64ac3cd") ((((unsupported)).apply)) (3995) ((((xself).xuuid).xRFC_4122)) (3))) ((((unsupported)).apply ("12345678-1234-5678-1234-567812345678") ("{12345678-1234-5678-1234-567812345678}") ("12345678123456781234567812345678") (("x12x34x56x78".mul 4)) ("x78x56x34x12x34x12x78x56x12x34x56x78x12x34x56x78") ((((unsupported)).apply (305419896) (4660) (22136) (18) (52) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:12345678-1234-5678-1234-567812345678") ((((unsupported)).apply)) (4660) ((((xself).xuuid).xRESERVED_NCS)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("6ba7b810-9dad-11d1-80b4-00c04fd430c8") ("{6ba7b810-9dad-11d1-80b4-00c04fd430c8}") ("6ba7b8109dad11d180b400c04fd430c8") ("x6bxa7xb8x10x9dxadx11xd1x80xb4x00xc0x4fxd4x30xc8") ("x10xb8xa7x6bxadx9dxd1x11x80xb4x00xc0x4fxd4x30xc8") ((((unsupported)).apply (1806153744) (40365) (4561) (128) (180) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:6ba7b810-9dad-11d1-80b4-00c04fd430c8") ((((unsupported)).apply)) (180) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)).apply ("6ba7b811-9dad-11d1-80b4-00c04fd430c8") ("{6ba7b811-9dad-11d1-80b4-00c04fd430c8}") ("6ba7b8119dad11d180b400c04fd430c8") ("x6bxa7xb8x11x9dxadx11xd1x80xb4x00xc0x4fxd4x30xc8") ("x11xb8xa7x6bxadx9dxd1x11x80xb4x00xc0x4fxd4x30xc8") ((((unsupported)).apply (1806153745) (40365) (4561) (128) (180) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:6ba7b811-9dad-11d1-80b4-00c04fd430c8") ((((unsupported)).apply)) (180) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)).apply ("6ba7b812-9dad-11d1-80b4-00c04fd430c8") ("{6ba7b812-9dad-11d1-80b4-00c04fd430c8}") ("6ba7b8129dad11d180b400c04fd430c8") ("x6bxa7xb8x12x9dxadx11xd1x80xb4x00xc0x4fxd4x30xc8") ("x12xb8xa7x6bxadx9dxd1x11x80xb4x00xc0x4fxd4x30xc8") ((((unsupported)).apply (1806153746) (40365) (4561) (128) (180) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:6ba7b812-9dad-11d1-80b4-00c04fd430c8") ((((unsupported)).apply)) (180) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)).apply ("6ba7b814-9dad-11d1-80b4-00c04fd430c8") ("{6ba7b814-9dad-11d1-80b4-00c04fd430c8}") ("6ba7b8149dad11d180b400c04fd430c8") ("x6bxa7xb8x14x9dxadx11xd1x80xb4x00xc0x4fxd4x30xc8") ("x14xb8xa7x6bxadx9dxd1x11x80xb4x00xc0x4fxd4x30xc8") ((((unsupported)).apply (1806153748) (40365) (4561) (128) (180) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:6ba7b814-9dad-11d1-80b4-00c04fd430c8") ((((unsupported)).apply)) (180) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)).apply ("7d444840-9dc0-11d1-b245-5ffdce74fad2") ("{7d444840-9dc0-11d1-b245-5ffdce74fad2}") ("7d4448409dc011d1b2455ffdce74fad2") ("x7dx44x48x40x9dxc0x11xd1xb2x45x5fxfdxcex74xfaxd2") ("x40x48x44x7dxc0x9dxd1x11xb2x45x5fxfdxcex74xfaxd2") ((((unsupported)).apply (2101626944) (40384) (4561) (178) (69) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:7d444840-9dc0-11d1-b245-5ffdce74fad2") ((((unsupported)).apply)) (12869) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)).apply ("e902893a-9d22-3c7e-a7b8-d6e313b71d9f") ("{e902893a-9d22-3c7e-a7b8-d6e313b71d9f}") ("e902893a9d223c7ea7b8d6e313b71d9f") ("xe9x02x89x3ax9dx22x3cx7exa7xb8xd6xe3x13xb7x1dx9f") ("x3ax89x02xe9x22x9dx7ex3cxa7xb8xd6xe3x13xb7x1dx9f") ((((unsupported)).apply ((((unsupported)).apply)) (40226) (15486) (167) (184) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:e902893a-9d22-3c7e-a7b8-d6e313b71d9f") ((((unsupported)).apply)) (10168) ((((xself).xuuid).xRFC_4122)) (3))) ((((unsupported)).apply ("eb424026-6f54-4ef8-a4d0-bb658a1fc6cf") ("{eb424026-6f54-4ef8-a4d0-bb658a1fc6cf}") ("eb4240266f544ef8a4d0bb658a1fc6cf") ("xebx42x40x26x6fx54x4exf8xa4xd0xbbx65x8ax1fxc6xcf") ("x26x40x42xebx54x6fxf8x4exa4xd0xbbx65x8ax1fxc6xcf") ((((unsupported)).apply ((((unsupported)).apply)) (28500) (20216) (164) (208) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:eb424026-6f54-4ef8-a4d0-bb658a1fc6cf") ((((unsupported)).apply)) (9424) ((((xself).xuuid).xRFC_4122)) (4))) ((((unsupported)).apply ("f81d4fae-7dec-11d0-a765-00a0c91e6bf6") ("{f81d4fae-7dec-11d0-a765-00a0c91e6bf6}") ("f81d4fae7dec11d0a76500a0c91e6bf6") ("xf8x1dx4fxaex7dxecx11xd0xa7x65x00xa0xc9x1ex6bxf6") ("xaex4fx1dxf8xecx7dxd0x11xa7x65x00xa0xc9x1ex6bxf6") ((((unsupported)).apply ((((unsupported)).apply)) (32236) (4560) (167) (101) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6") ((((unsupported)).apply)) (10085) ((((xself).xuuid).xRFC_4122)) (1))) ((((unsupported)).apply ("fffefdfc-fffe-fffe-fffe-fffefdfcfbfa") ("{fffefdfc-fffe-fffe-fffe-fffefdfcfbfa}") ("fffefdfcfffefffefffefffefdfcfbfa") ("xffxfexfdxfcxffxfexffxfexffxfexffxfexfdxfcxfbxfa") ("xfcxfdxfexffxfexffxfexffxffxfexffxfexfdxfcxfbxfa") ((((unsupported)).apply ((((unsupported)).apply)) (65534) (65534) (255) (254) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:fffefdfc-fffe-fffe-fffe-fffefdfcfbfa") ((((unsupported)).apply)) (16382) ((((xself).xuuid).xRESERVED_FUTURE)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("ffffffff-ffff-ffff-ffff-ffffffffffff") ("{ffffffff-ffff-ffff-ffff-ffffffffffff}") ("ffffffffffffffffffffffffffffffff") (("xff".mul 16)) (("xff".mul 16)) ((((unsupported)).apply ((((unsupported)).apply)) (65535) (65535) (255) (255) ((((unsupported)).apply)))) ((((unsupported)).apply)) ("urn:uuid:ffffffff-ffff-ffff-ffff-ffffffffffff") ((((unsupported)).apply)) (16383) ((((xself).xuuid).xRESERVED_FUTURE)) ("None: is there a None literal in the EO language?"))))))
                          seq
                            xequivalents.write (((unsupported)).apply)
                            (((unsupported)).apply ((xu)) ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ((xstring)))) ((((((xself).xuuid).xUUID)).apply ((xcurly)))) ((((((xself).xuuid).xUUID)).apply ((xhex)))) ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((xbytes)))) ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((xbytes_le)))) ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((xfields)))) ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((xinteger)))) ((((((xself).xuuid).xUUID)).apply ((xurn)))))))
                              seq
                                bogusForceDataize.write (((xequal)).apply ((((xstr)).apply ((xu)))) ((xstring)))
                                bogusForceDataize.write (((xequal)).apply ((((xint)).apply ((xu)))) ((xinteger)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xbytes)) ((xbytes)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xbytes_le)) ((xbytes_le)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xfields)) ((xfields)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xtime_low)) ((((unsupported)).apply ((xfields)) (0))))
                                bogusForceDataize.write (((xequal)).apply (((xu).xtime_mid)) ((((unsupported)).apply ((xfields)) (1))))
                                bogusForceDataize.write (((xequal)).apply (((xu).xtime_hi_version)) ((((unsupported)).apply ((xfields)) (2))))
                                bogusForceDataize.write (((xequal)).apply (((xu).xclock_seq_hi_variant)) ((((unsupported)).apply ((xfields)) (3))))
                                bogusForceDataize.write (((xequal)).apply (((xu).xclock_seq_low)) ((((unsupported)).apply ((xfields)) (4))))
                                bogusForceDataize.write (((xequal)).apply (((xu).xnode)) ((((unsupported)).apply ((xfields)) (5))))
                                bogusForceDataize.write (((xequal)).apply (((xu).xhex)) ((xhex)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xint)) ((xinteger)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xurn)) ((xurn)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xtime)) ((xtime)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xclock_seq)) ((xclock_seq)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xvariant)) ((xvariant)))
                                bogusForceDataize.write (((xequal)).apply (((xu).xversion)) ((xversion)))
                                bogusForceDataize.write ((((xequivalents).xappend)).apply ((xu)))
                            (((unsupported)).apply ((xu)) ((xequivalents)))
                              (((unsupported)).apply ((xv)) ((xequivalents)))
                                bogusForceDataize.write (((xequal)).apply ((xu)) ((xv)))
                            bogusForceDataize.write (((xequal)).apply ((((xtype)).apply (((xu).xbytes)))) (((xbuiltins).xbytes)))
                            bogusForceDataize.write (((xequal)).apply ((((xtype)).apply (((xu).xbytes_le)))) (((xbuiltins).xbytes)))
                            bogusForceDataize.write ((((xascending).xappend)).apply ((xu)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xascending)))))))
                          (((unsupported)).apply ((xj)) ((((xrange)).apply ((((xlen)).apply ((xascending)))))))
                            seq
                              bogusForceDataize.write (((xequal)).apply (((xi).less (xj))) (((((unsupported)).apply ((xascending)) ((xi))).less (((unsupported)).apply ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)).apply (((xi).leq (xj))) (((((unsupported)).apply ((xascending)) ((xi))).leq (((unsupported)).apply ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)).apply (((xi).eq (xj))) (((((unsupported)).apply ((xascending)) ((xi))).eq (((unsupported)).apply ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)).apply (((xi).greater (xj))) (((((unsupported)).apply ((xascending)) ((xi))).greater (((unsupported)).apply ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)).apply (((xi).geq (xj))) (((((unsupported)).apply ((xascending)) ((xi))).geq (((unsupported)).apply ((xascending)) ((xj))))))
                              bogusForceDataize.write (((xequal)).apply (((xi).neq (xj))) (((((unsupported)).apply ((xascending)) ((xi))).neq (((unsupported)).apply ((xascending)) ((xj))))))
                        xresorted.write (((unsupported)).apply ((xascending)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xresorted).xreverse)).apply)
                        bogusForceDataize.write ((((xresorted).xsort)).apply)
                        bogusForceDataize.write (((xequal)).apply ((xascending)) ((xresorted)))
                xtest_exceptions.write
                  [xself]
                    memory > xargs
                    memory > xbadvalue
                    memory > xbadtype
                    memory > xu
                    seq > @
                      seq
                        xbadvalue.write (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)) ((xf)))))
                        xbadtype.write (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)) ((xf)))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply (""))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ("abc"))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ("1234567812345678123456781234567"))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ("123456781234567812345678123456789"))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ("123456781234567812345678z2345678"))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ("abc"))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) (("0".mul 15)))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) (("0".mul 17)))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ("abc"))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) (("0".mul 15)))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) (("0".mul 17)))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (1))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (1) (2) (3) (4) (5))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply ((1.neg)) (0) (0) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply ((((unsupported)).apply)) (0) (0) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) ((1.neg)) (0) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) (65536) (0) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) (0) ((1.neg)) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) (0) (65536) (0) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) (0) (0) ((1.neg)) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) (0) (0) (256) (0) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) (0) (0) (0) ((1.neg)) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) (0) (0) (0) (256) (0))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) (0) (0) (0) (0) ((1.neg)))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (0) (0) (0) (0) (0) ((((unsupported)).apply)))))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) (("00".mul 16)) (0))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) (("00".mul 16)) (6))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((1.neg)))))))
                        bogusForceDataize.write (((xbadvalue)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xuuid).xUUID)) ((((unsupported)).apply (1) (128))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xh)) ((xb)) ((xf)) ((xi)))) ((((unsupported)).apply (("00".mul 16)) (("0".mul 16)) ((((unsupported)).apply (0) (0) (0) (0) (0) (0))) (0))))
                        bogusForceDataize.write (((((xself).xuuid).xUUID)).apply ((xh)))
                        (((unsupported)).apply ((((xself).xuuid).xUUID)) ((xh)))
                        (((unsupported)).apply ((((xself).xuuid).xUUID)) ((xb)))
                        (((unsupported)).apply ((((xself).xuuid).xUUID)) ((xb)))
                        (((unsupported)).apply ((((xself).xuuid).xUUID)) ((xf)))
                        (((unsupported)).apply ((((xself).xuuid).xUUID)) ((xi)))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply)))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ((xh)) ((xb)))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ((xh)) ((xb)) ((xb)))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ((xh)) ((xb)) ((xb)) ((xf)))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ((xh)) ((xb)) ((xb)) ((xf)) ((xi)))))))
                        (((unsupported)).apply ((xhh)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("hex") ((xh)))))))))
                          (((unsupported)).apply ((xbb)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("bytes") ((xb)))))))))
                            (((unsupported)).apply ((xbble)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("bytes_le") ((xb)))))))))
                              (((unsupported)).apply ((xii)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("int") ((xi)))))))))
                                (((unsupported)).apply ((xff)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("fields") ((xf)))))))))
                                  seq
                                    xargs.write (((xdict)).apply ((((((xhh).add (xbb)).add (xbble)).add (xii)).add (xff))))
                                    ((((xlen)).apply ((xargs))).neq 0).if
                                      bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ((xh)) ((((unsupported)).apply ((xargs)))))))))
                                    ((((xlen)).apply ((xargs))).neq 1).if
                                      bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((((xself).xuuid).xUUID)).apply ((((unsupported)).apply ((xargs)))))))))
                        xu.write (((((xself).xuuid).xUUID)).apply ((xh)))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("hex") ((xh)))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("bytes") ((xb)))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("bytes_le") ((xb)))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("fields") ((xf)))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("int") ((xi)))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("time_low") (0))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("time_mid") (0))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("time_hi_version") (0))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("time_hi_version") (0))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("clock_seq_hi_variant") (0))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("clock_seq_low") (0))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply ((((xsetattr)).apply ((xu)) ("node") (0))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply (((xu).less (((xobject)).apply))))))
                        bogusForceDataize.write (((xbadtype)).apply ((((unsupported)).apply (((xu).greater (((xobject)).apply))))))
                xtest_getnode.write
                  [xself]
                    memory > xnode2
                    memory > xnode1
                    seq > @
                      seq
                        xnode1.write (((((xself).xuuid).xgetnode)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0) ((xnode1)) ((((unsupported)).apply (1) (48))))) (("%012x".mod (xnode1))))
                        xnode2.write (((((xself).xuuid).xgetnode)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnode1)) ((xnode2)) (("%012x != %012x".mod (((unsupported)).apply ((xnode1)) ((xnode2))))))
                xtest_pickle_roundtrip.write
                  [xself]
                    memory > xcheck
                    memory > xu
                    seq > @
                      seq
                        xcheck.write
                          [xactual xexpected]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xactual).xis_safe)) (((xexpected).xis_safe)))
                        (((unsupported)).apply (((((xsupport).xswap_item)).apply (((xsys).xmodules)) ("uuid") (((xself).xuuid)))))
                          (((unsupported)).apply ((xis_safe)) ((((xself).xuuid).xSafeUUID)))
                            seq
                              xu.write (((unsupported)).apply ((((xself).xuuid).xUUID)) ("d82579ce6642a0de7ddf490a7aec7aa5") ((xis_safe)))
                              bogusForceDataize.write (((xcheck)).apply (((((xcopy).xcopy)).apply ((xu)))) ((xu)))
                              bogusForceDataize.write (((xcheck)).apply (((((xcopy).xdeepcopy)).apply ((xu)))) ((xu)))
                              (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xproto)))))
                                  bogusForceDataize.write (((xcheck)).apply (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xu)) ((xproto)))))) ((xu)))
                xtest_unpickle_previous_python_versions.write
                  [xself]
                    memory > xu
                    memory > xpickled_uuids_safe
                    memory > xcheck
                    memory > xu_unsafe
                    memory > xpickled_uuids
                    memory > xpickled_uuids_unsafe
                    memory > xu_safe
                    seq > @
                      seq
                        xcheck.write
                          [xactual xexpected]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xactual).xis_safe)) (((xexpected).xis_safe)))
                        xpickled_uuids.write (((unsupported)).apply ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dS'int'nL287307832597519156748809049798316161701Lnsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}Ux03intL287307832597519156748809049798316161701Lnsb.") ("x80x02cuuidnUUIDn)x81}Ux03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00sb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dVintnL287307832597519156748809049798316161701Lnsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}Xx03x00x00x00intL287307832597519156748809049798316161701Lnsb.") ("x80x02cuuidnUUIDn)x81}Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00sb.") ("x80x03cuuidnUUIDn)x81}Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00sb.") ("x80x04x95+x00x00x00x00x00x00x00x8cx04uuidx8cx04UUIDx93)x81}x8cx03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00sb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dVintnL287307832597519156748809049798316161701LnsVis_safencuuidnSafeUUIDn(NtRsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}(Xx03x00x00x00intL287307832597519156748809049798316161701LnXx07x00x00x00is_safecuuidnSafeUUIDn(NtRub.") ("x80x02cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnNx85Rub.") ("x80x03cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnNx85Rub.") ("x80x04x95Fx00x00x00x00x00x00x00x8cx04uuidx94x8cx04UUIDx93)x81}(x8cx03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00x8cx07is_safehx00x8cx08SafeUUIDx93Nx85Rub."))
                        xpickled_uuids_safe.write (((unsupported)).apply ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dVintnL287307832597519156748809049798316161701LnsVis_safencuuidnSafeUUIDn(I0ntRsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}(Xx03x00x00x00intL287307832597519156748809049798316161701LnXx07x00x00x00is_safecuuidnSafeUUIDn(Kx00tRub.") ("x80x02cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnKx00x85Rub.") ("x80x03cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnKx00x85Rub.") ("x80x04x95Gx00x00x00x00x00x00x00x8cx04uuidx94x8cx04UUIDx93)x81}(x8cx03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00x8cx07is_safehx00x8cx08SafeUUIDx93Kx00x85Rub."))
                        xpickled_uuids_unsafe.write (((unsupported)).apply ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR(dVintnL287307832597519156748809049798316161701LnsVis_safencuuidnSafeUUIDn(I-1ntRsb.") ("ccopy_regn_reconstructorn(cuuidnUUIDnc__builtin__nobjectnNtR}(Xx03x00x00x00intL287307832597519156748809049798316161701LnXx07x00x00x00is_safecuuidnSafeUUIDn(JxffxffxffxfftRub.") ("x80x02cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnJxffxffxffxffx85Rub.") ("x80x03cuuidnUUIDn)x81}(Xx03x00x00x00intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00Xx07x00x00x00is_safecuuidnSafeUUIDnJxffxffxffxffx85Rub.") ("x80x04x95Jx00x00x00x00x00x00x00x8cx04uuidx94x8cx04UUIDx93)x81}(x8cx03intx8ax11xa5zxecznIxdf}xdexa0Bfxcey%xd8x00x8cx07is_safehx00x8cx08SafeUUIDx93Jxffxffxffxffx85Rub."))
                        xu.write (((((xself).xuuid).xUUID)).apply ("d82579ce6642a0de7ddf490a7aec7aa5"))
                        xu_safe.write (((unsupported)).apply ((((xself).xuuid).xUUID)) ("d82579ce6642a0de7ddf490a7aec7aa5") (((((xself).xuuid).xSafeUUID).xsafe)))
                        xu_unsafe.write (((unsupported)).apply ((((xself).xuuid).xUUID)) ("d82579ce6642a0de7ddf490a7aec7aa5") (((((xself).xuuid).xSafeUUID).xunsafe)))
                        (((unsupported)).apply (((((xsupport).xswap_item)).apply (((xsys).xmodules)) ("uuid") (((xself).xuuid)))))
                          seq
                            (((unsupported)).apply ((xpickled)) ((xpickled_uuids)))
                              bogusForceDataize.write (((xcheck)).apply (((((xpickle).xloads)).apply ((xpickled)))) ((xu)))
                            (((unsupported)).apply ((xpickled)) ((xpickled_uuids_safe)))
                              bogusForceDataize.write (((xcheck)).apply (((((xpickle).xloads)).apply ((xpickled)))) ((xu_safe)))
                            (((unsupported)).apply ((xpickled)) ((xpickled_uuids_unsafe)))
                              bogusForceDataize.write (((xcheck)).apply (((((xpickle).xloads)).apply ((xpickled)))) ((xu_unsafe)))
                xtest_uuid1_eui64.write
                  [xself]
                    memory > xnode
                    memory > xtoo_large_getter
                    seq > @
                      seq
                        xtoo_large_getter.write (((unsupported)).apply ((((unsupported)).apply (1) (48))))
                        (((unsupported)).apply ((((unsupported)).apply (((((xunittest).xmock).xpatch).xmultiple)) (((xself).xuuid)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((xtoo_large_getter)))))))
                          xnode.write (((((xself).xuuid).xgetnode)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0) ((xnode)) ((((unsupported)).apply (1) (48))))) (("%012x".mod (xnode))))
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply ((((xself).xuuid).xuuid1)) ((xnode)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("uuid1 was given an invalid node ID"))
                xtest_uuid1.write
                  [xself]
                    memory > xequal
                    memory > xuuids
                    memory > xu
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        (((unsupported)).apply ((xu)) ((((unsupported)).apply ((((((xself).xuuid).xuuid1)).apply)) ((xi)) ((((xrange)).apply (10))))))
                          seq
                            bogusForceDataize.write (((xequal)).apply (((xu).xvariant)) ((((xself).xuuid).xRFC_4122)))
                            bogusForceDataize.write (((xequal)).apply (((xu).xversion)) (1))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((xu).xis_safe)) ((((unsupported)).apply (((((xself).xuuid).xSafeUUID).xsafe)) (((((xself).xuuid).xSafeUUID).xunsafe)) (((((xself).xuuid).xSafeUUID).xunknown)))))
                        xuuids.write (((unsupported)).apply)
                        (((unsupported)).apply ((xu)) ((((unsupported)).apply ((((((xself).xuuid).xuuid1)).apply)) ((xi)) ((((xrange)).apply (1000))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xuuids)) ((xu)))) (1))
                        bogusForceDataize.write (((xequal)).apply ((((xlen)).apply (((((xuuids).xkeys)).apply)))) (1000))
                        xu.write (((((xself).xuuid).xuuid1)).apply (0))
                        bogusForceDataize.write (((xequal)).apply (((xu).xnode)) (0))
                        xu.write (((((xself).xuuid).xuuid1)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((xequal)).apply (((xu).xnode)) ((((unsupported)).apply)))
                        xu.write (((((xself).xuuid).xuuid1)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write (((xequal)).apply (((xu).xnode)) ((((unsupported)).apply)))
                        xu.write (((((xself).xuuid).xuuid1)).apply ((((unsupported)).apply)) (0))
                        bogusForceDataize.write (((xequal)).apply (((xu).xnode)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xequal)).apply (((((unsupported)).apply ((((xu).xclock_seq_hi_variant).and 63)) (8)).or ((xu).xclock_seq_low))) (0))
                        xu.write (((((xself).xuuid).xuuid1)).apply ((((unsupported)).apply)) (4660))
                        bogusForceDataize.write (((xequal)).apply (((xu).xnode)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xequal)).apply (((((unsupported)).apply ((((xu).xclock_seq_hi_variant).and 63)) (8)).or ((xu).xclock_seq_low))) (4660))
                        xu.write (((((xself).xuuid).xuuid1)).apply ((((unsupported)).apply)) (16383))
                        bogusForceDataize.write (((xequal)).apply (((xu).xnode)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xequal)).apply (((((unsupported)).apply ((((xu).xclock_seq_hi_variant).and 63)) (8)).or ((xu).xclock_seq_low))) (16383))
                xtest_uuid1_safe.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        ((((xself).xuuid).x_has_uuid_generate_time_safe).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("requires uuid_generate_time_safe(3)"))
                        xu.write (((((xself).xuuid).xuuid1)).apply)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xunknown)))
                xmock_generate_time_safe.write
                  [xself xsafe_value]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((xos).xname).neq "posix").if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("POSIX-only test"))
                        bogusForceDataize.write (((((xself).xuuid).x_load_system_functions)).apply)
                        xf.write (((xself).xuuid).x_generate_time_safe)
                        (((unsupported)).apply ((xf)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("need uuid._generate_time_safe"))
                        (((unsupported)).apply (((((((xunittest).xmock).xpatch).xobject)).apply (((xself).xuuid)) ("_generate_time_safe") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xf)).apply)) (0))) ((xsafe_value)))))))))
                          (((unsupported)).apply)
                xtest_uuid1_unknown.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xmock_generate_time_safe)).apply ("None: is there a None literal in the EO language?"))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xunknown)))
                xtest_uuid1_is_safe.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xmock_generate_time_safe)).apply (0))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xsafe)))
                xtest_uuid1_is_unsafe.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xmock_generate_time_safe)).apply ((1.neg)))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xunsafe)))
                xtest_uuid1_bogus_return_value.write
                  [xself]
                    memory > xu
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xmock_generate_time_safe)).apply (3))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xu).xis_safe)) (((((xself).xuuid).xSafeUUID).xunknown)))
                xtest_uuid1_time.write
                  [xself]
                    memory > xu
                    seq > @
                      seq
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).xuuid)) ("_has_uuid_generate_time_safe") ((xfalse)))) ((((((xmock).xpatch).xobject)).apply (((xself).xuuid)) ("_generate_time_safe") ("None: is there a None literal in the EO language?"))) ((((((xmock).xpatch).xobject)).apply (((xself).xuuid)) ("_last_timestamp") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((xmock).xpatch).xobject)) (((xself).xuuid)) ("getnode") ((((unsupported)).apply)))) ((((unsupported)).apply (((xmock).xpatch)) ("time.time_ns") ((((unsupported)).apply)))) ((((unsupported)).apply (((xmock).xpatch)) ("random.getrandbits") (5317))))
                          seq
                            xu.write (((((xself).xuuid).xuuid1)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xu)) ((((((xself).xuuid).xUUID)).apply ("a7a55b92-01fc-11e9-94c5-54e1acf6da7f"))))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).xuuid)) ("_has_uuid_generate_time_safe") ((xfalse)))) ((((((xmock).xpatch).xobject)).apply (((xself).xuuid)) ("_generate_time_safe") ("None: is there a None literal in the EO language?"))) ((((((xmock).xpatch).xobject)).apply (((xself).xuuid)) ("_last_timestamp") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (((xmock).xpatch)) ("time.time_ns") ((((unsupported)).apply)))))
                          seq
                            xu.write (((unsupported)).apply ((((xself).xuuid).xuuid1)) ((((unsupported)).apply)) (5317))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xu)) ((((((xself).xuuid).xUUID)).apply ("a7a55b92-01fc-11e9-94c5-54e1acf6da7f"))))
                xtest_uuid3.write
                  [xself]
                    memory > xequal
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        (((unsupported)).apply ((((unsupported)).apply ((xu)) ((xv)))) ((((unsupported)).apply ((((unsupported)).apply ((((((xself).xuuid).xuuid3)).apply ((((xself).xuuid).xNAMESPACE_DNS)) ("python.org"))) ("6fa459ea-ee8a-3ca4-894e-db77e160355e"))) ((((unsupported)).apply ((((((xself).xuuid).xuuid3)).apply ((((xself).xuuid).xNAMESPACE_URL)) ("http://python.org/"))) ("9fe8e8c4-aaa8-32a9-a55c-4535a88b748d"))) ((((unsupported)).apply ((((((xself).xuuid).xuuid3)).apply ((((xself).xuuid).xNAMESPACE_OID)) ("1.3.6.1"))) ("dd1a1cef-13d5-368a-ad82-eca71acd4cd1"))) ((((unsupported)).apply ((((((xself).xuuid).xuuid3)).apply ((((xself).xuuid).xNAMESPACE_X500)) ("c=ca"))) ("658d3002-db6b-3040-a1d1-8ddd7d189a4d"))))))
                          seq
                            bogusForceDataize.write (((xequal)).apply (((xu).xvariant)) ((((xself).xuuid).xRFC_4122)))
                            bogusForceDataize.write (((xequal)).apply (((xu).xversion)) (3))
                            bogusForceDataize.write (((xequal)).apply ((xu)) ((((((xself).xuuid).xUUID)).apply ((xv)))))
                            bogusForceDataize.write (((xequal)).apply ((((xstr)).apply ((xu)))) ((xv)))
                xtest_uuid4.write
                  [xself]
                    memory > xequal
                    memory > xuuids
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        (((unsupported)).apply ((xu)) ((((unsupported)).apply ((((((xself).xuuid).xuuid4)).apply)) ((xi)) ((((xrange)).apply (10))))))
                          seq
                            bogusForceDataize.write (((xequal)).apply (((xu).xvariant)) ((((xself).xuuid).xRFC_4122)))
                            bogusForceDataize.write (((xequal)).apply (((xu).xversion)) (4))
                        xuuids.write (((unsupported)).apply)
                        (((unsupported)).apply ((xu)) ((((unsupported)).apply ((((((xself).xuuid).xuuid4)).apply)) ((xi)) ((((xrange)).apply (1000))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xuuids)) ((xu)))) (1))
                        bogusForceDataize.write (((xequal)).apply ((((xlen)).apply (((((xuuids).xkeys)).apply)))) (1000))
                xtest_uuid5.write
                  [xself]
                    memory > xequal
                    seq > @
                      seq
                        xequal.write ((xself).xassertEqual)
                        (((unsupported)).apply ((((unsupported)).apply ((xu)) ((xv)))) ((((unsupported)).apply ((((unsupported)).apply ((((((xself).xuuid).xuuid5)).apply ((((xself).xuuid).xNAMESPACE_DNS)) ("python.org"))) ("886313e1-3b8a-5372-9b90-0c9aee199e5d"))) ((((unsupported)).apply ((((((xself).xuuid).xuuid5)).apply ((((xself).xuuid).xNAMESPACE_URL)) ("http://python.org/"))) ("4c565f0d-3f5a-5890-b41b-20cf47701c5e"))) ((((unsupported)).apply ((((((xself).xuuid).xuuid5)).apply ((((xself).xuuid).xNAMESPACE_OID)) ("1.3.6.1"))) ("1447fa61-5277-5fef-a9b3-fbc6e44f4af3"))) ((((unsupported)).apply ((((((xself).xuuid).xuuid5)).apply ((((xself).xuuid).xNAMESPACE_X500)) ("c=ca"))) ("cc957dd1-a972-5349-98cd-874190002798"))))))
                          seq
                            bogusForceDataize.write (((xequal)).apply (((xu).xvariant)) ((((xself).xuuid).xRFC_4122)))
                            bogusForceDataize.write (((xequal)).apply (((xu).xversion)) (5))
                            bogusForceDataize.write (((xequal)).apply ((xu)) ((((((xself).xuuid).xUUID)).apply ((xv)))))
                            bogusForceDataize.write (((xequal)).apply ((((xstr)).apply ((xu)))) ((xv)))
                xtestIssue8621.write
                  [xself]
                    memory > xpid
                    memory > xvalue
                    memory > xparent_value
                    memory > xchild_value
                    memory > xfds
                    seq > @
                      (((unsupported)).apply)
                        xfds.write ((((xos).xpipe)).apply)
                        xpid.write ((((xos).xfork)).apply)
                        ((xpid).eq 0).if
                          seq
                            bogusForceDataize.write ((((xos).xclose)).apply ((((unsupported)).apply ((xfds)) (0))))
                            xvalue.write (((((xself).xuuid).xuuid4)).apply)
                            bogusForceDataize.write ((((xos).xwrite)).apply ((((unsupported)).apply ((xfds)) (1))) ((((((xvalue).xhex).xencode)).apply ("latin-1"))))
                            bogusForceDataize.write ((((xos).x_exit)).apply (0))
                          seq
                            bogusForceDataize.write ((((xos).xclose)).apply ((((unsupported)).apply ((xfds)) (1))))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xos).xclose)) ((((unsupported)).apply ((xfds)) (0))))
                            xparent_value.write ((((((xself).xuuid).xuuid4)).apply).xhex)
                            bogusForceDataize.write ((((xos).xwaitpid)).apply ((xpid)) (0))
                            xchild_value.write (((((((xos).xread)).apply ((((unsupported)).apply ((xfds)) (0))) (100)).xdecode)).apply ("latin-1"))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xparent_value)) ((xchild_value)))
                xtest_uuid_weakref.write
                  [xself]
                    memory > xweak
                    memory > xstrong
                    seq > @
                      seq
                        xstrong.write (((((xself).xuuid).xuuid4)).apply)
                        xweak.write ((((xweakref).xref)).apply ((xstrong)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xstrong)) ((((xweak)).apply)))
            (((unsupported)).apply ((xBaseTestUUID)) (((xunittest).xTestCase)))
              xuuid.write (xpy_uuid)
            (((unsupported)).apply ((xBaseTestUUID)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xc_uuid)) ("requires the C _uuid module"))))
              xuuid.write (xc_uuid)
            (((unsupported)).apply)
              seq
                x_uuid.write (xpy_uuid)
                xtest_find_mac.write
                  [xself]
                    memory > xmac
                    memory > xpopen
                    memory > xdata
                    seq > @
                      (((unsupported)).apply)
                        xdata.write (((unsupported)).apply)
                        xpopen.write (((((xunittest).xmock).xMagicMock)).apply)
                        (((unsupported)).apply (((xpopen).xstdout)) (((((xio).xBytesIO)).apply (((((xdata).xencode)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply (((((xunittest).xmock).xpatch).xobject)) ((xshutil)) ("which") ("/sbin/ifconfig"))))
                          (((unsupported)).apply ((((unsupported)).apply (((((xunittest).xmock).xpatch).xobject)) ((xsubprocess)) ("Popen") ((xpopen)))))
                            xmac.write (((unsupported)).apply ((((xself).xuuid).x_find_mac)) ("ifconfig") ("") ((((unsupported)).apply ("hwaddr"))) ((((unsupported)).apply (((xx).add 1)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmac)) ((((unsupported)).apply)))
                xcheck_node.write
                  [xself xnode xrequires]
                    memory > xhex
                    seq > @
                      (((unsupported)).apply)
                        ((xrequires).and (((unsupported)).apply ((xnode)) ("None: is there a None literal in the EO language?"))).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("requires ".add (xrequires))))
                        xhex.write ("%012x".mod (xnode))
                        (((xsupport).xverbose).geq 2).if
                          (((unsupported)).apply ((xprint)) ((xhex)) (" "))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (0) ((xnode)) ((((unsupported)).apply (1) (48))))) (("%s is not an RFC 4122 node ID".mod (xhex))))
                xtest_ifconfig_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)).apply)
                        xnode.write (((((xself).xuuid).x_ifconfig_getnode)).apply)
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)) ("ifconfig"))
                xtest_ip_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)).apply)
                        xnode.write (((((xself).xuuid).x_ip_getnode)).apply)
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)) ("ip"))
                xtest_arp_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)).apply)
                        xnode.write (((((xself).xuuid).x_arp_getnode)).apply)
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)) ("arp"))
                xtest_lanscan_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)).apply)
                        xnode.write (((((xself).xuuid).x_lanscan_getnode)).apply)
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)) ("lanscan"))
                xtest_netstat_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)).apply)
                        xnode.write (((((xself).xuuid).x_netstat_getnode)).apply)
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)) ("netstat"))
                xtest_ipconfig_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)).apply)
                        xnode.write (((((xself).xuuid).x_ipconfig_getnode)).apply)
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)) ("ipconfig"))
                xtest_netbios_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)).apply)
                        xnode.write (((((xself).xuuid).x_netbios_getnode)).apply)
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)))
                xtest_random_getnode.write
                  [xself]
                    memory > xnode2
                    memory > xnode
                    seq > @
                      seq
                        xnode.write (((((xself).xuuid).x_random_getnode)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xnode).and (((unsupported)).apply (1) (40)))) (("%012x".mod (xnode))))
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)))
                        xnode2.write (((((xself).xuuid).x_random_getnode)).apply)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xnode2)) ((xnode)) (("%012x".mod (xnode))))
                xtest_unix_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)).apply)
                        (((((ximportable)).apply ("_uuid")).not).and ((((ximportable)).apply ("ctypes")).not)).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("neither _uuid extension nor ctypes available"))
                        (((unsupported)).apply ((xTypeError)))
                          xnode.write (((((xself).xuuid).x_unix_getnode)).apply)
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("requires uuid_generate_time"))
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)) ("unix"))
                xtest_windll_getnode.write
                  [xself]
                    memory > xnode
                    seq > @
                      (((unsupported)).apply)
                        xnode.write (((((xself).xuuid).x_windll_getnode)).apply)
                        bogusForceDataize.write ((((xself).xcheck_node)).apply ((xnode)))
            (((unsupported)).apply ((xBaseTestInternals)) (((xunittest).xTestCase)))
              xuuid.write (xpy_uuid)
            (((unsupported)).apply ((xBaseTestInternals)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xc_uuid)) ("requires the C _uuid module"))))
              xuuid.write (xc_uuid)
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)