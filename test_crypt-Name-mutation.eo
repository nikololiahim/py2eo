memory > xlog_rounds
memory > xValueError
memory > xstr
memory > xrange
memory > xrounds
memory > xImportError2
memory > xsys
memory > xunittest
memory > xex
memory > xlen
memory > xTypeError
memory > xmethod
memory > x__name__
[] > test_crypt
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_salt
        memory > xtest_sha2_rounds
        memory > xIMPORT_ERROR
        memory > xtest_saltedcrypt
        memory > xtest_import_failure_message
        memory > xtest_blowfish_rounds
        memory > xtest_crypt
        memory > xcrypt
        memory > xtest_invalid_rounds
        memory > xtest_methods
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError2)))
              seq
                (((unsupported)).apply)
                xIMPORT_ERROR.write "None: is there a None literal in the EO language?"
              seq
                (((xsys).xplatform).neq "win32").if
                  (((unsupported)).apply (((((xunittest).xSkipTest)).apply ((((xstr)).apply ((xex)))))))
                xcrypt.write "None: is there a None literal in the EO language?"
                xIMPORT_ERROR.write (((xstr)).apply ((xex)))
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((((xsys).xplatform).eq "win32")) ("This should only run on windows"))) (((((xunittest).xskipIf)).apply ((xcrypt)) ("import succeeded"))))
              xtest_import_failure_message.write
                [xself]
                  seq > @
                    bogusForceDataize.write ((((xself).xassertIn)).apply ("not supported") ((xIMPORT_ERROR)))
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xcrypt)) ("crypt module is required"))))
              seq
                xtest_crypt.write
                  [xself]
                    memory > xcr
                    memory > xcr2
                    seq > @
                      seq
                        xcr.write ((((xcrypt).xcrypt)).apply ("mypassword"))
                        xcr2.write ((((xcrypt).xcrypt)).apply ("mypassword") ((xcr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcr2)) ((xcr)))
                        xcr.write ((((xcrypt).xcrypt)).apply ("mypassword") ("ab"))
                        (((unsupported)).apply ((xcr)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xcr2.write ((((xcrypt).xcrypt)).apply ("mypassword") ((xcr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcr2)) ((xcr)))
                xtest_salt.write
                  [xself]
                    memory > xsalt
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xcrypt).x_saltchars)))) (64))
                        (((unsupported)).apply ((xmethod)) (((xcrypt).xmethods)))
                          seq
                            xsalt.write ((((xcrypt).xmksalt)).apply ((xmethod)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((((xlen)).apply ((xsalt))).sub ((xmethod).xsalt_chars))) ((((unsupported)).apply (0) (1) (3) (4) (6) (7))))
                            ((xmethod).xident).if
                              bogusForceDataize.write ((((xself).xassertIn)).apply (((xmethod).xident)) ((((unsupported)).apply ((xsalt)) ((((unsupported)).apply (((((xlen)).apply ((xsalt))).sub ((xmethod).xsalt_chars))))))))
                xtest_saltedcrypt.write
                  [xself]
                    memory > xcr
                    memory > xcr2
                    seq > @
                      (((unsupported)).apply ((xmethod)) (((xcrypt).xmethods)))
                        seq
                          xcr.write ((((xcrypt).xcrypt)).apply ("assword") ((xmethod)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcr)))) (((xmethod).xtotal_size)))
                          xcr2.write ((((xcrypt).xcrypt)).apply ("assword") ((xcr)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcr2)) ((xcr)))
                          xcr.write ((((xcrypt).xcrypt)).apply ("assword") (((((xcrypt).xmksalt)).apply ((xmethod)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcr)))) (((xmethod).xtotal_size)))
                xtest_methods.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xlen)).apply (((xcrypt).xmethods))).geq 1)))
                        (((((xsys).xplatform).xstartswith)).apply ("openbsd")).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcrypt).xmethods)) ((((unsupported)).apply (((xcrypt).xMETHOD_BLOWFISH)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xcrypt).xmethods)) ((1.neg)))) (((xcrypt).xMETHOD_CRYPT)))
                xtest_sha2_rounds.write
                  [xself]
                    memory > xsalt
                    memory > xcr
                    memory > xcr2
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xmethod)) ((((unsupported)).apply (((xcrypt).xMETHOD_SHA256)) (((xcrypt).xMETHOD_SHA512)))))
                          (((unsupported)).apply ((xrounds)) ((((unsupported)).apply (1000) (10000) (100000))))
                            seq
                              xsalt.write (((unsupported)).apply (((xcrypt).xmksalt)) ((xmethod)) ((xrounds)))
                              bogusForceDataize.write ((((xself).xassertIn)).apply (("$rounds=%d$".mod (xrounds))) ((xsalt)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xlen)).apply ((xsalt))).sub ((xmethod).xsalt_chars))) ((11.add (((xlen)).apply ((((xstr)).apply ((xrounds))))))))
                              xcr.write ((((xcrypt).xcrypt)).apply ("mypassword") ((xsalt)))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcr)))
                              xcr2.write ((((xcrypt).xcrypt)).apply ("mypassword") ((xcr)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcr2)) ((xcr)))
                xtest_blowfish_rounds.write
                  [xself]
                    memory > xsalt
                    memory > xcr
                    memory > xcr2
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xlog_rounds)) ((((xrange)).apply (4) (11))))
                          seq
                            xsalt.write (((unsupported)).apply (((xcrypt).xmksalt)) (((xcrypt).xMETHOD_BLOWFISH)) ((((unsupported)).apply (1) ((xlog_rounds)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (("$%02d$".mod (xlog_rounds))) ((xsalt)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((((xlen)).apply ((xsalt))).sub (((xcrypt).xMETHOD_BLOWFISH).xsalt_chars))) ((((unsupported)).apply (6) (7))))
                            xcr.write ((((xcrypt).xcrypt)).apply ("mypassword") ((xsalt)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xcr)))
                            xcr2.write ((((xcrypt).xcrypt)).apply ("mypassword") ((xcr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcr2)) ((xcr)))
                xtest_invalid_rounds.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xmethod)) ((((unsupported)).apply (((xcrypt).xMETHOD_SHA256)) (((xcrypt).xMETHOD_SHA512)) (((xcrypt).xMETHOD_BLOWFISH)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              (((unsupported)).apply (((xcrypt).xmksalt)) ((xmethod)) ("4096"))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              (((unsupported)).apply (((xcrypt).xmksalt)) ((xmethod)) (4096.0))
                            (((unsupported)).apply ((xrounds)) ((((unsupported)).apply (0) (1) ((1.neg)) ((((unsupported)).apply (1) (999))))))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                                (((unsupported)).apply (((xcrypt).xmksalt)) ((xmethod)) ((xrounds)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xcrypt).xmksalt)) (((xcrypt).xMETHOD_BLOWFISH)) (1000))
                        (((unsupported)).apply ((xmethod)) ((((unsupported)).apply (((xcrypt).xMETHOD_CRYPT)) (((xcrypt).xMETHOD_MD5)))))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("support"))))
                            (((unsupported)).apply (((xcrypt).xmksalt)) ((xmethod)) (4096))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)