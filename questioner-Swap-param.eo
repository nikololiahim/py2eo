memory > xMigrationQuestioner
memory > xenumerate
memory > xValueError
memory > xOutputWrapper
memory > xapps
memory > xany
memory > xhasattr
memory > xget_docs_version
memory > xImportError
memory > xtimezone
memory > xdatetime
memory > xlist
memory > xmigrations_import_path
memory > ximportlib
memory > xeval
memory > xNOT_PROVIDED
memory > x_
memory > xchoice
memory > xset
memory > xint
memory > xx
memory > xi
memory > xsuper
memory > xsys
memory > xLookupError
memory > xos
memory > xgetattr
memory > xSyntaxError
memory > xinput
memory > xe
memory > xNameError
memory > xMigrationLoader
memory > xlen
[] > questioner
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xask_unique_callable_default_addition
        memory > x_choice_input
        memory > xlog_lack_of_migration
        memory > xask_auto_now_add_addition
        memory > xask_merge
        memory > xask_rename
        memory > x__init__
        memory > xask_not_null_alteration
        memory > xask_not_null_addition
        memory > x_ask_default
        memory > xask_rename_model
        memory > xask_initial
        memory > x_boolean_input
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xdefaults xspecified_apps xdry_run]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xdefaults)) (((xdefaults).or (((unsupported)).apply))))
                        (((unsupported)).apply (((xself).xspecified_apps)) (((xspecified_apps).or (((xset)).apply))))
                        (((unsupported)).apply (((xself).xdry_run)) ((xdry_run)))
                xask_initial.write
                  [xself xapp_label]
                    memory > xmigrations_module
                    memory > xapp_config
                    memory > xfilenames
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xapp_label)) (((xself).xspecified_apps))).if
                          (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xLookupError)))
                          xapp_config.write ((((xapps).xget_app_config)).apply ((xapp_label)))
                          (((unsupported)).apply ((((((xself).xdefaults).xget)).apply (FALSE) ("ask_initial"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmigrations_import_path)) ((x_)))) (((((xMigrationLoader).xmigrations_module)).apply (((xapp_config).xlabel)))))
                        (((unsupported)).apply ((xmigrations_import_path)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((((xself).xdefaults).xget)).apply ("ask_initial") (FALSE))))
                        (((unsupported)).apply ((xImportError)))
                          xmigrations_module.write ((((ximportlib).ximport_module)).apply ((xmigrations_import_path)))
                          (((unsupported)).apply ((((((xself).xdefaults).xget)).apply ("ask_initial") (FALSE))))
                          seq
                            (((xgetattr)).apply ((xmigrations_module)) ("__file__") ("None: is there a None literal in the EO language?")).if
                              xfilenames.write ((((xos).xlistdir)).apply ((((((xos).xpath).xdirname)).apply (((xmigrations_module).x__file__)))))
                              (((xhasattr)).apply ((xmigrations_module)) ("__path__")).if
                                seq
                                  ((((xlen)).apply (((xmigrations_module).x__path__))).greater 1).if
                                    (((unsupported)).apply (FALSE))
                                  xfilenames.write ((((xos).xlistdir)).apply ((((unsupported)).apply ((((xlist)).apply (((xmigrations_module).x__path__)))) (0))))
                            (((unsupported)).apply (((((xany)).apply ((((unsupported)).apply (((((xx).xendswith)).apply (".py"))) ((xx)) ((xfilenames)) (((xx).neq "__init__.py"))))).not)))
                xask_not_null_addition.write
                  [xself xfield_name xmodel_name]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xask_not_null_alteration.write
                  [xself xfield_name xmodel_name]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xask_rename.write
                  [xself xmodel_name xold_name xnew_name xfield_instance]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((((xself).xdefaults).xget)).apply ("ask_rename") (FALSE))))
                xask_rename_model.write
                  [xself xold_model_state xnew_model_state]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((((xself).xdefaults).xget)).apply ("ask_rename_model") (FALSE))))
                xask_merge.write
                  [xself xapp_label]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((((xself).xdefaults).xget)).apply ("ask_merge") (FALSE))))
                xask_auto_now_add_addition.write
                  [xself xfield_name xmodel_name]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xask_unique_callable_default_addition.write
                  [xself xfield_name xmodel_name]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply ((xMigrationQuestioner)))
              seq
                x__init__.write
                  [xself xdefaults xspecified_apps xdry_run xprompt_output]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xdefaults)) ((xspecified_apps)) ((xdry_run)))
                        (((unsupported)).apply (((xself).xprompt_output)) (((xprompt_output).or (((xOutputWrapper)).apply (((xsys).xstdout))))))
                x_boolean_input.write
                  [xself xquestion xdefault]
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xprompt_output).xwrite)) ("{question} ") (""))
                        xresult.write (((xinput)).apply)
                        (((xresult).not).and (((unsupported)).apply ((xdefault)) ("None: is there a None literal in the EO language?"))).if
                          (((unsupported)).apply ((xdefault)))
                        while.
                          (((xresult).not).or (((unsupported)).apply (((((((unsupported)).apply ((xresult)) (0)).xlower)).apply)) ("yn")))
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((xself).xprompt_output).xwrite)) ("Please answer yes or no: ") (""))
                                xresult.write (((xinput)).apply)
                        (((unsupported)).apply ((((((((unsupported)).apply ((xresult)) (0)).xlower)).apply).eq "y")))
                x_choice_input.write
                  [xself xquestion xchoices]
                    memory > xvalue
                    memory > xresult
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xprompt_output).xwrite)).apply ("{question}"))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xchoice)))) ((((xenumerate)).apply ((xchoices)))))
                          bogusForceDataize.write (((((xself).xprompt_output).xwrite)).apply ((" %s) %s".mod (((unsupported)).apply (((xi).add 1)) ((xchoice))))))
                        (((unsupported)).apply ((((xself).xprompt_output).xwrite)) ("Select an option: ") (""))
                        xresult.write (((xinput)).apply)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xValueError)))
                                  xvalue.write (((xint)).apply ((xresult)))
                                  (((unsupported)).apply (0) ((xvalue)) ((((xlen)).apply ((xchoices))))).if
                                    (((unsupported)).apply ((xvalue)))
                                (((unsupported)).apply ((((xself).xprompt_output).xwrite)) ("Please select a valid option: ") (""))
                                xresult.write (((xinput)).apply)
                x_ask_default.write
                  [xself xdefault]
                    memory > xcode
                    memory > xprompt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xprompt_output).xwrite)).apply ("Please enter the default value as valid Python."))
                        (xdefault).if
                          bogusForceDataize.write (((((xself).xprompt_output).xwrite)).apply ("Accept the default '{default}' by pressing 'Enter' or provide another value."))
                        bogusForceDataize.write (((((xself).xprompt_output).xwrite)).apply ("The datetime and django.utils.timezone modules are available, so it is possible to provide e.g. timezone.now as a value."))
                        bogusForceDataize.write (((((xself).xprompt_output).xwrite)).apply ("Type 'exit' to exit this prompt"))
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                (xdefault).if
                                  xprompt.write ((("[default: {}] >>> ".xformat)).apply ((xdefault)))
                                  xprompt.write ">>> "
                                (((unsupported)).apply ((((xself).xprompt_output).xwrite)) ((xprompt)) (""))
                                xcode.write (((xinput)).apply)
                                (((xcode).not).and (xdefault)).if
                                  xcode.write (xdefault)
                                ((xcode).not).if
                                  bogusForceDataize.write (((((xself).xprompt_output).xwrite)).apply ("Please enter some code, or 'exit' (without quotes) to exit."))
                                  ((xcode).eq "exit").if
                                    bogusForceDataize.write ((((xsys).xexit)).apply (1))
                                    (((unsupported)).apply ((((unsupported)).apply ((xSyntaxError)) ((xNameError)))))
                                      (((unsupported)).apply ((((xeval)).apply ((xcode)) ((((unsupported)).apply)) ((((unsupported)).apply ("datetime") ((xdatetime)) ("timezone") ((xtimezone)))))))
                                      bogusForceDataize.write (((((xself).xprompt_output).xwrite)).apply (("Invalid input: %s".mod (xe))))
                xask_not_null_addition.write
                  [xself xfield_name xmodel_name]
                    memory > xchoice
                    seq > @
                      seq
                        unsupported
                        (((xself).xdry_run).not).if
                          seq
                            xchoice.write ((((xself).x_choice_input)).apply ("It is impossible to add a non-nullable field '{field_name}' to {model_name} without specifying a default. This is because the database needs something to populate existing rows.nPlease select a fix:") ((((unsupported)).apply ("Provide a one-off default now (will be set on all existing rows with a null value for this column)") ("Quit and manually define a default value in models.py."))))
                            ((xchoice).eq 2).if
                              bogusForceDataize.write ((((xsys).xexit)).apply (3))
                              (((unsupported)).apply (((((xself).x_ask_default)).apply)))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xask_not_null_alteration.write
                  [xself xfield_name xmodel_name]
                    memory > xchoice
                    seq > @
                      seq
                        unsupported
                        (((xself).xdry_run).not).if
                          seq
                            xchoice.write ((((xself).x_choice_input)).apply ("It is impossible to change a nullable field '{field_name}' on {model_name} to non-nullable without providing a default. This is because the database needs something to populate existing rows.nPlease select a fix:") ((((unsupported)).apply ("Provide a one-off default now (will be set on all existing rows with a null value for this column)") ("Ignore for now. Existing rows that contain NULL values will have to be handled manually, for example with a RunPython or RunSQL operation.") ("Quit and manually define a default value in models.py."))))
                            ((xchoice).eq 2).if
                              (((unsupported)).apply ((xNOT_PROVIDED)))
                              ((xchoice).eq 3).if
                                bogusForceDataize.write ((((xsys).xexit)).apply (3))
                                (((unsupported)).apply (((((xself).x_ask_default)).apply)))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xask_rename.write
                  [xself xmodel_name xold_name xnew_name xfield_instance]
                    memory > xmsg
                    seq > @
                      seq
                        unsupported
                        xmsg.write "Was %s.%s renamed to %s.%s (a %s)? [y/N]"
                        (((unsupported)).apply (((((xself).x_boolean_input)).apply (((xmsg).mod (((unsupported)).apply ((xmodel_name)) ((xold_name)) ((xmodel_name)) ((xnew_name)) ((((xfield_instance).x__class__).x__name__))))) (FALSE))))
                xask_rename_model.write
                  [xself xold_model_state xnew_model_state]
                    memory > xmsg
                    seq > @
                      seq
                        unsupported
                        xmsg.write "Was the model %s.%s renamed to %s? [y/N]"
                        (((unsupported)).apply (((((xself).x_boolean_input)).apply (((xmsg).mod (((unsupported)).apply (((xold_model_state).xapp_label)) (((xold_model_state).xname)) (((xnew_model_state).xname))))) (FALSE))))
                xask_merge.write
                  [xself xapp_label]
                    seq > @
                      (((unsupported)).apply (((((xself).x_boolean_input)).apply ((("nMerging will only work if the operations printed above do not conflictn".add "with each other (working on different fields or models)n").add "Should these migration branches be merged? [y/N]")) (FALSE))))
                xask_auto_now_add_addition.write
                  [xself xfield_name xmodel_name]
                    memory > xchoice
                    seq > @
                      seq
                        unsupported
                        (((xself).xdry_run).not).if
                          seq
                            xchoice.write ((((xself).x_choice_input)).apply ("It is impossible to add the field '{field_name}' with 'auto_now_add=True' to {model_name} without providing a default. This is because the database needs something to populate existing rows.n") ((((unsupported)).apply ("Provide a one-off default now which will be set on all existing rows") ("Quit and manually define a default value in models.py."))))
                            ((xchoice).eq 2).if
                              bogusForceDataize.write ((((xsys).xexit)).apply (3))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).x_ask_default)) ("timezone.now"))))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                xask_unique_callable_default_addition.write
                  [xself xfield_name xmodel_name]
                    memory > xversion
                    memory > xchoice
                    seq > @
                      seq
                        unsupported
                        (((xself).xdry_run).not).if
                          seq
                            xversion.write (((xget_docs_version)).apply)
                            xchoice.write ((((xself).x_choice_input)).apply ("Callable default on unique field {model_name}.{field_name} will not generate unique values upon migrating.nPlease choose how to proceed:n") ((((unsupported)).apply ("Continue making this migration as the first step in writing a manual migration to generate unique values described here: https://docs.djangoproject.com/en/{version}/howto/writing-migrations/#migrations-that-add-unique-fields.") ("Quit and edit field options in models.py."))))
                            ((xchoice).eq 2).if
                              bogusForceDataize.write ((((xsys).xexit)).apply (3))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply ((xMigrationQuestioner)))
              seq
                x__init__.write
                  [xself xdefaults xspecified_apps xdry_run xverbosity xlog]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xverbosity)) ((xverbosity)))
                        (((unsupported)).apply (((xself).xlog)) ((xlog)))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xdefaults)) ((xspecified_apps)) ((xdry_run)))
                xlog_lack_of_migration.write
                  [xself xfield_name xmodel_name xreason]
                    seq > @
                      (((xself).xverbosity).greater 0).if
                        bogusForceDataize.write ((((xself).xlog)).apply ("Field '{field_name}' on model '{model_name}' not migrated: {reason}."))
                xask_not_null_addition.write
                  [xself xfield_name xmodel_name]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_lack_of_migration)).apply ((xfield_name)) ((xmodel_name)) ("it is impossible to add a non-nullable field without specifying a default"))
                        bogusForceDataize.write ((((xsys).xexit)).apply (3))
                xask_not_null_alteration.write
                  [xself xfield_name xmodel_name]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog)).apply ("Field '{field_name}' on model '{model_name}' given a default of NOT PROVIDED and must be corrected."))
                        (((unsupported)).apply ((xNOT_PROVIDED)))
                xask_auto_now_add_addition.write
                  [xself xfield_name xmodel_name]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xlog_lack_of_migration)).apply ((xfield_name)) ((xmodel_name)) ("it is impossible to add a field with 'auto_now_add=True' without specifying a default"))
                        bogusForceDataize.write ((((xsys).xexit)).apply (3))