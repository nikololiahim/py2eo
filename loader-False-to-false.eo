memory > xModuleNotFoundError
memory > xstr
memory > xapp_label
memory > xany
memory > xmigration
memory > xsorted
memory > xgetattr
memory > xe
memory > xkey
memory > xfalse
memory > xMigrationRecorder
memory > xImportError
memory > xcandidate
memory > xc
memory > xall
memory > xlist
memory > xreplaced
memory > xmodule_name
memory > xparent
memory > xValueError
memory > ximport_module
memory > xInconsistentMigrationHistory
memory > xapps
memory > xAmbiguityError
memory > xIndexError
memory > x_
memory > xKeyError
memory > xmigration_app_label
memory > xNodeNotFoundError
memory > xMigrationGraph
memory > xset
memory > xsettings
memory > xhasattr
memory > xpkgutil
memory > xreload
memory > xbackwards
memory > xsys
memory > xm
memory > xis_pkg
memory > xtarget
memory > xapp_config
memory > xname
memory > xBadMigrationError
memory > xexplicit
memory > xexc
memory > xmigration_name
memory > xschema_editor
memory > xisinstance
memory > xlen
[] > loader
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xmigrations_module
        memory > xcheck_consistent_history
        memory > xadd_internal_dependencies
        memory > xbuild_graph
        memory > xproject_state
        memory > xload_disk
        memory > x__init__
        memory > xcollect_sql
        memory > xdetect_conflicts
        memory > xget_migration_by_prefix
        memory > xMIGRATIONS_MODULE_NAME
        memory > xadd_external_dependencies
        memory > xcheck_key
        memory > xget_migration
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xMIGRATIONS_MODULE_NAME.write "migrations"
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xconnection xload xignore_no_migrations xreplace_migrations]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xconnection)) ((xconnection)))
                        (((unsupported)).apply (((xself).xdisk_migrations)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xapplied_migrations)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xignore_no_migrations)) ((xignore_no_migrations)))
                        (((unsupported)).apply (((xself).xreplace_migrations)) ((xreplace_migrations)))
                        (xload).if
                          bogusForceDataize.write ((((xself).xbuild_graph)).apply)
                xmigrations_module.write
                  [xcls xapp_label]
                    memory > xapp_package_name
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xapp_label)) (((xsettings).xMIGRATION_MODULES))).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsettings).xMIGRATION_MODULES)) ((xapp_label)))) (TRUE))))
                          seq
                            xapp_package_name.write (((((xapps).xget_app_config)).apply ((xapp_label))).xname)
                            (((unsupported)).apply ((((unsupported)).apply (("%s.%s".mod (((unsupported)).apply ((xapp_package_name)) ((xMIGRATIONS_MODULE_NAME))))) ((xfalse)))))
                xload_disk.write
                  [xself]
                    memory > xmigration_module
                    memory > xwas_loaded
                    memory > xmodule
                    memory > xmigration_names
                    memory > xmigration_path
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xdisk_migrations)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xunmigrated_apps)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xmigrated_apps)) ((((xset)).apply)))
                        (((unsupported)).apply ((xapp_config)) (((((xapps).xget_app_configs)).apply)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xmodule_name)) ((xexplicit)))) (((((xself).xmigrations_module)).apply (((xapp_config).xlabel)))))
                            (((unsupported)).apply ((xmodule_name)) ("None: is there a None literal in the EO language?")).if
                              seq
                                bogusForceDataize.write (((((xself).xunmigrated_apps).xadd)).apply (((xapp_config).xlabel)))
                                (((unsupported)).apply)
                            xwas_loaded.write (((unsupported)).apply ((xmodule_name)) (((xsys).xmodules)))
                            (((unsupported)).apply ((xModuleNotFoundError)))
                              xmodule.write (((ximport_module)).apply ((xmodule_name)))
                              seq
                                (((xexplicit).and ((xself).xignore_no_migrations)).or (((xexplicit).not).and (((unsupported)).apply ((xMIGRATIONS_MODULE_NAME)) ((((((xe).xname).xsplit)).apply (".")))))).if
                                  seq
                                    bogusForceDataize.write (((((xself).xunmigrated_apps).xadd)).apply (((xapp_config).xlabel)))
                                    (((unsupported)).apply)
                                (((unsupported)).apply)
                              seq
                                ((((xhasattr)).apply ((xmodule)) ("__path__")).not).if
                                  seq
                                    bogusForceDataize.write (((((xself).xunmigrated_apps).xadd)).apply (((xapp_config).xlabel)))
                                    (((unsupported)).apply)
                                ((((unsupported)).apply ((((xgetattr)).apply ((xmodule)) ("__file__") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?")).and ((((xisinstance)).apply (((xmodule).x__path__)) ((xlist))).not)).if
                                  seq
                                    bogusForceDataize.write (((((xself).xunmigrated_apps).xadd)).apply (((xapp_config).xlabel)))
                                    (((unsupported)).apply)
                                (xwas_loaded).if
                                  bogusForceDataize.write (((xreload)).apply ((xmodule)))
                            bogusForceDataize.write (((((xself).xmigrated_apps).xadd)).apply (((xapp_config).xlabel)))
                            xmigration_names.write (((unsupported)).apply ((xname)) ((((unsupported)).apply ((x_)) ((xname)) ((xis_pkg)))) (((((xpkgutil).xiter_modules)).apply (((xmodule).x__path__)))) ((((xis_pkg).not).and (((unsupported)).apply ((((unsupported)).apply ((xname)) (0))) ("_~")))))
                            (((unsupported)).apply ((xmigration_name)) ((xmigration_names)))
                              seq
                                xmigration_path.write ("%s.%s".mod (((unsupported)).apply ((xmodule_name)) ((xmigration_name))))
                                (((unsupported)).apply ((xImportError)))
                                  xmigration_module.write (((ximport_module)).apply ((xmigration_path)))
                                  (((unsupported)).apply ("bad magic number") ((((xstr)).apply ((xe))))).if
                                    (((unsupported)).apply ((((xImportError)).apply (("Couldn't import %r as it appears to be a stale .pyc file.".mod (xmigration_path))))) ((xe)))
                                    (((unsupported)).apply)
                                ((((xhasattr)).apply ((xmigration_module)) ("Migration")).not).if
                                  (((unsupported)).apply ((((xBadMigrationError)).apply (("Migration %s in app %s has no Migration class".mod (((unsupported)).apply ((xmigration_name)) (((xapp_config).xlabel))))))))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xdisk_migrations)) ((((unsupported)).apply (((xapp_config).xlabel)) ((xmigration_name)))))) (((((xmigration_module).xMigration)).apply ((xmigration_name)) (((xapp_config).xlabel)))))
                xget_migration.write
                  [xself xapp_label xname_prefix]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).xgraph).xnodes)) ((((unsupported)).apply ((xapp_label)) ((xname_prefix)))))))
                xget_migration_by_prefix.write
                  [xself xapp_label xname_prefix]
                    memory > xresults
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresults.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmigration_app_label)) ((xmigration_name)))) (((xself).xdisk_migrations)))
                          (((xmigration_app_label).eq (xapp_label)).and ((((xmigration_name).xstartswith)).apply ((xname_prefix)))).if
                            bogusForceDataize.write ((((xresults).xappend)).apply ((((unsupported)).apply ((xmigration_app_label)) ((xmigration_name)))))
                        ((((xlen)).apply ((xresults))).greater 1).if
                          (((unsupported)).apply ((((xAmbiguityError)).apply (("There is more than one migration for '%s' with the prefix '%s'".mod (((unsupported)).apply ((xapp_label)) ((xname_prefix))))))))
                          ((xresults).not).if
                            (((unsupported)).apply ((((xKeyError)).apply ("There is no migration for '{app_label}' with the prefix '{name_prefix}'"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xdisk_migrations)) ((((unsupported)).apply ((xresults)) (0))))))
                xcheck_key.write
                  [xself xkey xcurrent_app]
                    seq > @
                      seq
                        ((((((unsupported)).apply ((xkey)) (1)).neq "__first__").and ((((unsupported)).apply ((xkey)) (1)).neq "__latest__")).or (((unsupported)).apply ((xkey)) (((xself).xgraph)))).if
                          (((unsupported)).apply ((xkey)))
                        ((((unsupported)).apply ((xkey)) (0)).eq (xcurrent_app)).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) (0))) (((xself).xunmigrated_apps))).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) (0))) (((xself).xmigrated_apps))).if
                          (((unsupported)).apply ((xIndexError)))
                            ((((unsupported)).apply ((xkey)) (1)).eq "__first__").if
                              (((unsupported)).apply ((((unsupported)).apply ((((((xself).xgraph).xroot_nodes)).apply ((((unsupported)).apply ((xkey)) (0))))) (0))))
                              (((unsupported)).apply ((((unsupported)).apply ((((((xself).xgraph).xleaf_nodes)).apply ((((unsupported)).apply ((xkey)) (0))))) (0))))
                            ((xself).xignore_no_migrations).if
                              (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                              (((unsupported)).apply ((((xValueError)).apply (("Dependency on app with no migrations: %s".mod (((unsupported)).apply ((xkey)) (0)))))))
                        (((unsupported)).apply ((((xValueError)).apply (("Dependency on unknown app: %s".mod (((unsupported)).apply ((xkey)) (0)))))))
                xadd_internal_dependencies.write
                  [xself xkey xmigration]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xparent)) (((xmigration).xdependencies)))
                          (((((unsupported)).apply ((xparent)) (0)).eq (((unsupported)).apply ((xkey)) (0))).and ((((unsupported)).apply ((xparent)) (1)).neq "__first__")).if
                            (((unsupported)).apply ((((xself).xgraph).xadd_dependency)) ((xmigration)) ((xkey)) ((xparent)) (TRUE))
                xadd_external_dependencies.write
                  [xself xkey xmigration]
                    memory > xchild
                    memory > xparent
                    seq > @
                      seq
                        (((unsupported)).apply ((xparent)) (((xmigration).xdependencies)))
                          seq
                            ((((unsupported)).apply ((xkey)) (0)).eq (((unsupported)).apply ((xparent)) (0))).if
                              (((unsupported)).apply)
                            xparent.write ((((xself).xcheck_key)).apply ((xparent)) ((((unsupported)).apply ((xkey)) (0))))
                            (((unsupported)).apply ((xparent)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((((xself).xgraph).xadd_dependency)) ((xmigration)) ((xkey)) ((xparent)) (TRUE))
                        (((unsupported)).apply ((xchild)) (((xmigration).xrun_before)))
                          seq
                            xchild.write ((((xself).xcheck_key)).apply ((xchild)) ((((unsupported)).apply ((xkey)) (0))))
                            (((unsupported)).apply ((xchild)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((((xself).xgraph).xadd_dependency)) ((xmigration)) ((xchild)) ((xkey)) (TRUE))
                xbuild_graph.write
                  [xself]
                    memory > xis_replaced
                    memory > xtries
                    memory > xreverse_replacements
                    memory > xapplied_statuses
                    memory > xcandidates
                    memory > xrecorder
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xload_disk)).apply)
                        (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xapplied_migrations)) ((((unsupported)).apply)))
                          seq
                            xrecorder.write (((xMigrationRecorder)).apply (((xself).xconnection)))
                            (((unsupported)).apply (((xself).xapplied_migrations)) (((((xrecorder).xapplied_migrations)).apply)))
                        (((unsupported)).apply (((xself).xgraph)) ((((xMigrationGraph)).apply)))
                        (((unsupported)).apply (((xself).xreplacements)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xmigration)))) ((((((xself).xdisk_migrations).xitems)).apply)))
                          seq
                            bogusForceDataize.write (((((xself).xgraph).xadd_node)).apply ((xkey)) ((xmigration)))
                            ((xmigration).xreplaces).if
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xreplacements)) ((xkey)))) ((xmigration)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xmigration)))) ((((((xself).xdisk_migrations).xitems)).apply)))
                          bogusForceDataize.write ((((xself).xadd_internal_dependencies)).apply ((xkey)) ((xmigration)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xmigration)))) ((((((xself).xdisk_migrations).xitems)).apply)))
                          bogusForceDataize.write ((((xself).xadd_external_dependencies)).apply ((xkey)) ((xmigration)))
                        ((xself).xreplace_migrations).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xmigration)))) ((((((xself).xreplacements).xitems)).apply)))
                            seq
                              xapplied_statuses.write (((unsupported)).apply ((((unsupported)).apply ((xtarget)) (((xself).xapplied_migrations)))) ((xtarget)) (((xmigration).xreplaces)))
                              (((xall)).apply ((xapplied_statuses))).if
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xapplied_migrations)) ((xkey)))) ((xmigration)))
                                bogusForceDataize.write (((((xself).xapplied_migrations).xpop)).apply ((xkey)) ("None: is there a None literal in the EO language?"))
                              ((((xall)).apply ((xapplied_statuses))).or ((((xany)).apply ((xapplied_statuses))).not)).if
                                bogusForceDataize.write (((((xself).xgraph).xremove_replaced_nodes)).apply ((xkey)) (((xmigration).xreplaces)))
                                bogusForceDataize.write (((((xself).xgraph).xremove_replacement_node)).apply ((xkey)) (((xmigration).xreplaces)))
                        (((unsupported)).apply ((xNodeNotFoundError)))
                          bogusForceDataize.write (((((xself).xgraph).xvalidate_consistency)).apply)
                          seq
                            xreverse_replacements.write (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xmigration)))) ((((((xself).xreplacements).xitems)).apply)))
                              (((unsupported)).apply ((xreplaced)) (((xmigration).xreplaces)))
                                bogusForceDataize.write (((((((xreverse_replacements).xsetdefault)).apply ((xreplaced)) ((((xset)).apply))).xadd)).apply ((xkey)))
                            (((unsupported)).apply (((xexc).xnode)) ((xreverse_replacements))).if
                              seq
                                xcandidates.write ((((xreverse_replacements).xget)).apply (((xexc).xnode)) ((((xset)).apply)))
                                xis_replaced.write (((xany)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcandidate)) ((((xself).xgraph).xnodes)))) ((xcandidate)) ((xcandidates)))))
                                ((xis_replaced).not).if
                                  seq
                                    xtries.write (((", ".xjoin)).apply ((((unsupported)).apply (("%s.%s".mod (xc))) ((xc)) ((xcandidates)))))
                                    (((unsupported)).apply ((((xNodeNotFoundError)).apply (((("Migration {0} depends on nonexistent node ('{1}', '{2}'). Django tried to replace migration {1}.{2} with any of [{3}] but wasn't able to because some of the replaced migrations are already applied.".xformat)).apply (((xexc).xorigin)) ((((unsupported)).apply (((xexc).xnode)) (0))) ((((unsupported)).apply (((xexc).xnode)) (1))) ((xtries)))) (((xexc).xnode)))) ((xexc)))
                            (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xgraph).xensure_not_cyclic)).apply)
                xcheck_consistent_history.write
                  [xself xconnection]
                    memory > xrecorder
                    memory > xapplied
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        xapplied.write ((((xrecorder).xapplied_migrations)).apply)
                        (((unsupported)).apply ((xmigration)) ((xapplied)))
                          seq
                            (((unsupported)).apply ((xmigration)) ((((xself).xgraph).xnodes))).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xparent)) (((((unsupported)).apply ((((xself).xgraph).xnode_map)) ((xmigration))).xparents)))
                              (((unsupported)).apply ((xparent)) ((xapplied))).if
                                seq
                                  (((unsupported)).apply ((xparent)) (((xself).xreplacements))).if
                                    (((xall)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm)) ((xapplied)))) ((xm)) (((((unsupported)).apply (((xself).xreplacements)) ((xparent))).xreplaces))))).if
                                      (((unsupported)).apply)
                                  (((unsupported)).apply ((((xInconsistentMigrationHistory)).apply (((("Migration {}.{} is applied before its dependency {}.{} on database '{}'.".xformat)).apply ((((unsupported)).apply ((xmigration)) (0))) ((((unsupported)).apply ((xmigration)) (1))) ((((unsupported)).apply ((xparent)) (0))) ((((unsupported)).apply ((xparent)) (1))) (((xconnection).xalias)))))))
                xdetect_conflicts.write
                  [xself]
                    memory > xseen_apps
                    memory > xconflicting_apps
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xseen_apps.write (((unsupported)).apply)
                        xconflicting_apps.write (((xset)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmigration_name)))) ((((((xself).xgraph).xleaf_nodes)).apply)))
                          seq
                            (((unsupported)).apply ((xapp_label)) ((xseen_apps))).if
                              bogusForceDataize.write ((((xconflicting_apps).xadd)).apply ((xapp_label)))
                            bogusForceDataize.write (((((((xseen_apps).xsetdefault)).apply ((xapp_label)) ((((xset)).apply))).xadd)).apply ((xmigration_name)))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((((xsorted)).apply ((((unsupported)).apply ((xseen_apps)) ((xapp_label)))))) ((xapp_label)) ((xconflicting_apps)))))
                xproject_state.write
                  [xself xnodes xat_end]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).xgraph).xmake_state)) ((xnodes)) ((xat_end)) (((xself).xunmigrated_apps)))))
                xcollect_sql.write
                  [xself xplan]
                    memory > xstate
                    memory > xstatements
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xstatements.write (((unsupported)).apply)
                        xstate.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((((unsupported)).apply ((xmigration)) ((xbackwards)))) ((xplan)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((((xself).xconnection).xschema_editor)) (TRUE) (((xmigration).xatomic)))) ((xschema_editor)))
                              seq
                                (((unsupported)).apply ((xstate)) ("None: is there a None literal in the EO language?")).if
                                  xstate.write (((unsupported)).apply (((xself).xproject_state)) ((((unsupported)).apply (((xmigration).xapp_label)) (((xmigration).xname)))) ((xfalse)))
                                ((xbackwards).not).if
                                  xstate.write (((unsupported)).apply (((xmigration).xapply)) ((xstate)) ((xschema_editor)) (TRUE))
                                  xstate.write (((unsupported)).apply (((xmigration).xunapply)) ((xstate)) ((xschema_editor)) (TRUE))
                            bogusForceDataize.write ((((xstatements).xextend)).apply (((xschema_editor).xcollected_sql)))
                        (((unsupported)).apply ((xstatements)))