memory > xFunc
memory > xValueError
memory > xQ
memory > xKeyTextTransform
memory > xCast
memory > xTsTzRange
memory > xIntegerArrayModel
memory > xconnection
memory > xLower
memory > xIntegerField
memory > xScene
memory > xIntegrityError
memory > xtransaction
memory > xImportError
memory > xUniqueConstraint
memory > xRoom
memory > xtimezone
memory > xdatetime
memory > xLeft
memory > xDeferrable
memory > xmodify_settings
memory > xRangesModel
memory > xSchemaTests
memory > xOpClass
memory > xpath
memory > xignore_warnings
memory > xrepr
memory > xHotelReservation
memory > xcursor
memory > xNotSupportedError
memory > xF
memory > xRemovedInDjango50Warning
memory > xCheckConstraint
memory > xExclusionConstraint
memory > xexpressions
memory > xargs
memory > xmock
memory > xeditor
memory > xNumericRange
memory > xPostgreSQLTestCase
memory > xobject
memory > xRangeOperators
memory > xDateTimeRangeField
memory > xDateRange
memory > xkwargs
memory > xRangeBoundary
memory > xempty_expressions
[] > test_constraints
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_range_overlaps_custom
        memory > xtest_deconstruct_deferrable
        memory > xtest_deferrable_with_condition
        memory > xtest_empty_expressions
        memory > xtest_range_adjacent_opclasses_deferrable
        memory > xtest_range_adjacent_opclasses
        memory > xtest_range_adjacent
        memory > xtest_deconstruct_condition
        memory > xtest_check_constraint_datetimerange_contains
        memory > xtest_eq
        memory > xtest_deconstruct_include
        memory > xtest_invalid_expressions
        memory > xtest_opclass_multiple_columns
        memory > xtest_check_constraint_range_value
        memory > xtest_gist_include_not_supported
        memory > xtest_check_constraint_daterange_contains
        memory > xtest_range_adjacent_spgist_opclass_include
        memory > xtest_opclass_func
        memory > xtest_opclass_partial
        memory > xtest_range_adjacent_spgist_include_deferrable
        memory > xtest_range_overlaps
        memory > xtest_range_adjacent_spgist_include_condition
        memory > xtest_opclasses_and_expressions_same_length
        memory > xtest_range_adjacent_opclass_condition
        memory > xtest_range_adjacent_spgist_opclasses_include
        memory > xtest_range_adjacent_gist_opclass_include
        memory > xtest_deconstruct_opclasses
        memory > xget_opclass_query
        memory > xtest_invalid_deferrable
        memory > xtest_range_overlaps_custom_opclasses
        memory > xtest_range_adjacent_gist_include
        memory > xtest_expressions_with_params
        memory > xtest_repr
        memory > x_test_range_overlaps
        memory > xtest_opclass
        memory > xtest_range_adjacent_gist_opclasses_include
        memory > xtest_range_equal_cast
        memory > xtest_range_adjacent_initially_deferred
        memory > xtest_invalid_condition
        memory > xtest_deconstruct_index_type
        memory > xtest_range_adjacent_gist_include_condition
        memory > xtest_deconstruct
        memory > xtest_invalid_include_type
        memory > xtest_invalid_opclasses_type
        memory > xtest_index_transform
        memory > xtest_warning
        memory > xtest_expressions_with_key_transform
        memory > xtest_invalid_index_type
        memory > xtest_range_adjacent_spgist_include
        memory > xtest_spgist_include_not_supported
        memory > xtest_range_adjacent_opclasses_condition
        memory > xtest_opclass_include
        memory > xget_constraints
        memory > xtest_range_adjacent_opclass
        memory > xtest_range_adjacent_gist_include_deferrable
        memory > xtest_range_adjacent_opclass_deferrable
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
            seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
            (((unsupported)).apply ((xPostgreSQLTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.postgres"))))))
              seq
                xget_opclass_query.write (((unsupported)).apply)
                xget_constraints.write
                  [xself xtable]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          (((unsupported)).apply ((((((xconnection).xintrospection).xget_constraints)).apply ((xcursor)) ((xtable)))))
                xtest_check_constraint_range_value.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "ints_between"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xCheckConstraint)) ((((unsupported)).apply ((xQ)) ((((xNumericRange)).apply (10) (30))))) ((xconstraint_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (20) (50))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (30))))
                xtest_check_constraint_daterange_contains.write
                  [xself]
                    memory > xconstraint_name
                    memory > xdate_1
                    memory > xdate_2
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "dates_contains"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xCheckConstraint)) ((((unsupported)).apply ((xQ)) ((((xF)).apply ("dates_inner"))))) ((xconstraint_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xdate_1.write ((((xdatetime).xdate)).apply (2016) (1) (1))
                        xdate_2.write ((((xdatetime).xdate)).apply (2016) (1) (4))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply ((xdate_1)) ((xdate_2)))) ((((unsupported)).apply ((xdate_1)) ((((unsupported)).apply (((xdate_2).xreplace)) (5))))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply ((xdate_1)) ((xdate_2)))) ((((unsupported)).apply ((xdate_1)) ((xdate_2)))))
                xtest_check_constraint_datetimerange_contains.write
                  [xself]
                    memory > xdatetime_2
                    memory > xconstraint_name
                    memory > xdatetime_1
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "timestamps_contains"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xCheckConstraint)) ((((unsupported)).apply ((xQ)) ((((xF)).apply ("timestamps_inner"))))) ((xconstraint_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xdatetime_1.write ((((xdatetime).xdatetime)).apply (2016) (1) (1))
                        xdatetime_2.write ((((xdatetime).xdatetime)).apply (2016) (1) (2) (12))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply ((xdatetime_1)) ((xdatetime_2)))) ((((unsupported)).apply ((xdatetime_1)) ((((unsupported)).apply (((xdatetime_2).xreplace)) (13))))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply ((xdatetime_1)) ((xdatetime_2)))) ((((unsupported)).apply ((xdatetime_1)) ((xdatetime_2)))))
                xtest_opclass.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xUniqueConstraint)) ("test_opclass") ((((unsupported)).apply ("scene"))) ((((unsupported)).apply ("varchar_pattern_ops"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xScene)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xconstraint).xname)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply (((xconstraint).xname)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("varchar_pattern_ops") (((xconstraint).xname)))))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_constraint)).apply ((xScene)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xconstraint).xname)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                xtest_opclass_multiple_columns.write
                  [xself]
                    memory > xexpected_opclasses
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xUniqueConstraint)) ("test_opclass_multiple") ((((unsupported)).apply ("scene") ("setting"))) ((((unsupported)).apply ("varchar_pattern_ops") ("text_pattern_ops"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xScene)) ((xconstraint)))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply (((xconstraint).xname)))))
                            xexpected_opclasses.write (((unsupported)).apply ((((unsupported)).apply ("varchar_pattern_ops") (((xconstraint).xname)))) ((((unsupported)).apply ("text_pattern_ops") (((xconstraint).xname)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xcursor).xfetchall)).apply)) ((xexpected_opclasses)))
                xtest_opclass_partial.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xUniqueConstraint)) ("test_opclass_partial") ((((unsupported)).apply ("scene"))) ((((unsupported)).apply ("varchar_pattern_ops"))) ((((unsupported)).apply ((xQ)) ("Sir Bedemir's Castle"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xScene)) ((xconstraint)))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply (((xconstraint).xname)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("varchar_pattern_ops") (((xconstraint).xname)))))))
                xtest_opclass_include.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint.write (((unsupported)).apply ((xUniqueConstraint)) ("test_opclass_include") ((((unsupported)).apply ("scene"))) ((((unsupported)).apply ("varchar_pattern_ops"))) ((((unsupported)).apply ("setting"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xScene)) ((xconstraint)))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply (((xconstraint).xname)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("varchar_pattern_ops") (((xconstraint).xname)))))))
                xtest_opclass_func.write
                  [xself]
                    memory > xconstraints
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint.write (((unsupported)).apply ((xUniqueConstraint)) ((((unsupported)).apply ((xOpClass)) ((((xLower)).apply ("scene"))) ("text_pattern_ops"))) ("test_opclass_func"))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xScene)) ((xconstraint)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) (((xconstraint).xname)))) ("unique"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xconstraint).xname)) ((xconstraints)))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply (((xconstraint).xname)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("text_pattern_ops") (((xconstraint).xname)))))))
                        (((unsupported)).apply ((((xScene).xobjects).xcreate)) ("Scene 10") ("The dark forest of Ewing"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          (((unsupported)).apply ((((xScene).xobjects).xcreate)) ("ScEnE 10") ("Sir Bedemir's Castle"))
                        (((unsupported)).apply ((((xScene).xobjects).xcreate)) ("Scene 5") ("Sir Bedemir's Castle"))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_constraint)).apply ((xScene)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xconstraint).xname)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                        (((unsupported)).apply ((((xScene).xobjects).xcreate)) ("ScEnE 10") ("Sir Bedemir's Castle"))
            (((unsupported)).apply ((xPostgreSQLTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.postgres"))))))
              seq
                xget_constraints.write
                  [xself xtable]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          (((unsupported)).apply ((((((xconnection).xintrospection).xget_constraints)).apply ((xcursor)) ((xtable)))))
                xtest_invalid_condition.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "ExclusionConstraint.condition must be a Q instance."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xExclusionConstraint)) ("GIST") ("exclude_invalid_condition") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))))) ((((xF)).apply ("invalid"))))
                xtest_invalid_index_type.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Exclusion constraints only support GiST or SP-GiST indexes."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xExclusionConstraint)) ("gin") ("exclude_invalid_index_type") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))))))
                xtest_invalid_expressions.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "The expressions must be a list of 2-tuples."
                        (((unsupported)).apply ((xexpressions)) ((((unsupported)).apply ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ((((unsupported)).apply ("foo_1") ("foo_2") ("foo_3"))))))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xexpressions)))) (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                            (((unsupported)).apply ((xExclusionConstraint)) ("GIST") ("exclude_invalid_expressions") ((xexpressions)))
                xtest_empty_expressions.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "At least one expression is required to define an exclusion constraint."
                        (((unsupported)).apply ((xempty_expressions)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xempty_expressions)))) (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                            (((unsupported)).apply ((xExclusionConstraint)) ("GIST") ("exclude_empty_expressions") ((xempty_expressions)))
                xtest_invalid_deferrable.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "ExclusionConstraint.deferrable must be a Deferrable instance."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xExclusionConstraint)) ("exclude_invalid_deferrable") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))))) ("invalid"))
                xtest_deferrable_with_condition.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "ExclusionConstraint with conditions cannot be deferred."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xExclusionConstraint)) ("exclude_invalid_condition") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))))) ((((unsupported)).apply ((xQ)) (FALSE))) (((xDeferrable).xDEFERRED)))
                xtest_invalid_include_type.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "ExclusionConstraint.include must be a list or tuple."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xExclusionConstraint)) ("exclude_invalid_include") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))))) ("invalid"))
                xtest_invalid_opclasses_type.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "ExclusionConstraint.opclasses must be a list or tuple."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xExclusionConstraint)) ("exclude_invalid_opclasses") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))))) ("invalid"))
                xtest_opclasses_and_expressions_same_length.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "ExclusionConstraint.expressions and ExclusionConstraint.opclasses must have the same number of elements."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xExclusionConstraint)) ("exclude_invalid_expressions_opclasses_length") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))))) ((((unsupported)).apply ("foo") ("bar"))))
                xtest_repr.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ((((xF)).apply ("room"))) (((xRangeOperators).xEQUAL)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xconstraint)))) ("<ExclusionConstraint: index_type='GIST' expressions=[(F(datespan), '&&'), (F(room), '=')] name='exclude_overlapping'>"))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ((xQ)) (FALSE))) ("SPGiST"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xconstraint)))) ("<ExclusionConstraint: index_type='SPGiST' expressions=[(F(datespan), '-|-')] name='exclude_overlapping' condition=(AND: ('cancelled', False))>"))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xADJACENT_TO)))))) (((xDeferrable).xIMMEDIATE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xconstraint)))) ("<ExclusionConstraint: index_type='GIST' expressions=[(F(datespan), '-|-')] name='exclude_overlapping' deferrable=Deferrable.IMMEDIATE>"))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ("cancelled") ("room"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xconstraint)))) ("<ExclusionConstraint: index_type='GIST' expressions=[(F(datespan), '-|-')] name='exclude_overlapping' include=('cancelled', 'room')>"))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xOpClass)) ("datespan") ("range_ops"))) (((xRangeOperators).xADJACENT_TO)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xconstraint)))) ("<ExclusionConstraint: index_type='GIST' expressions=[(OpClass(F(datespan), name=range_ops), '-|-')] name='exclude_overlapping'>"))
                xtest_eq.write
                  [xself]
                    memory > xconstraint_4
                    memory > xconstraint_8
                    memory > xconstraint_7
                    memory > xconstraint_1
                    memory > xconstraint_2
                    memory > xconstraint_6
                    memory > xconstraint_3
                    memory > xconstraint_5
                    memory > xconstraint_9
                    seq > @
                      seq
                        xconstraint_1.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ((((xF)).apply ("room"))) (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
                        xconstraint_2.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))))
                        xconstraint_3.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
                        xconstraint_4.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) (((xDeferrable).xDEFERRED)))
                        xconstraint_5.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) (((xDeferrable).xIMMEDIATE)))
                        xconstraint_6.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) (((xDeferrable).xIMMEDIATE)) ((((unsupported)).apply ("cancelled"))))
                        xconstraint_7.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ("cancelled"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xignore_warnings)) ((xRemovedInDjango50Warning)))))
                          seq
                            xconstraint_8.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ("cancelled"))) ((((unsupported)).apply ("range_ops") ("range_ops"))))
                            xconstraint_9.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ("range_ops") ("range_ops"))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_2)) ((xconstraint_9)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_7)) ((xconstraint_8)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconstraint_1)) ((xconstraint_1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xconstraint_1)) (((xmock).xANY)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_1)) ((xconstraint_2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_1)) ((xconstraint_3)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_1)) ((xconstraint_4)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_2)) ((xconstraint_3)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_2)) ((xconstraint_4)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_2)) ((xconstraint_7)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_4)) ((xconstraint_5)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_5)) ((xconstraint_6)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xconstraint_1)) ((((xobject)).apply)))
                xtest_deconstruct.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xconstraint).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.constraints.ExclusionConstraint"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("name") ("exclude_overlapping") ("expressions") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))))))
                xtest_deconstruct_index_type.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ("SPGIST") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xconstraint).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.constraints.ExclusionConstraint"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("name") ("exclude_overlapping") ("index_type") ("SPGIST") ("expressions") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))))))
                xtest_deconstruct_condition.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xconstraint).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.constraints.ExclusionConstraint"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("name") ("exclude_overlapping") ("expressions") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ("condition") ((((unsupported)).apply ((xQ)) (FALSE))))))
                xtest_deconstruct_deferrable.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))))) (((xDeferrable).xDEFERRED)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xconstraint).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.constraints.ExclusionConstraint"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("name") ("exclude_overlapping") ("expressions") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))))) ("deferrable") (((xDeferrable).xDEFERRED)))))
                xtest_deconstruct_include.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))))) ((((unsupported)).apply ("cancelled") ("room"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xconstraint).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.constraints.ExclusionConstraint"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("name") ("exclude_overlapping") ("expressions") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))))) ("include") ((((unsupported)).apply ("cancelled") ("room"))))))
                xtest_deconstruct_opclasses.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))))) ((((unsupported)).apply ("range_ops"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xconstraint).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.constraints.ExclusionConstraint"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("name") ("exclude_overlapping") ("expressions") ((((unsupported)).apply ((((unsupported)).apply ("datespan") (((xRangeOperators).xOVERLAPS)))))) ("opclasses") ((((unsupported)).apply ("range_ops"))))))
                x_test_range_overlaps.write
                  [xself xconstraint]
                    memory > xreservation
                    memory > xroom102
                    memory > xdatetimes
                    memory > xroom101
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((xconstraint).xname)) (((((xself).xget_constraints)).apply ((((xHotelReservation).x_meta).xdb_table)))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xHotelReservation)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xconstraint).xname)) (((((xself).xget_constraints)).apply ((((xHotelReservation).x_meta).xdb_table)))))
                        xroom101.write (((unsupported)).apply ((((xRoom).xobjects).xcreate)) (101))
                        xroom102.write (((unsupported)).apply ((((xRoom).xobjects).xcreate)) (102))
                        xdatetimes.write (((unsupported)).apply (((((xtimezone).xdatetime)).apply (2018) (6) (20))) (((((xtimezone).xdatetime)).apply (2018) (6) (24))) (((((xtimezone).xdatetime)).apply (2018) (6) (26))) (((((xtimezone).xdatetime)).apply (2018) (6) (28))) (((((xtimezone).xdatetime)).apply (2018) (6) (29))))
                        (((unsupported)).apply ((((xHotelReservation).xobjects).xcreate)) ((((xDateRange)).apply (((((((unsupported)).apply ((xdatetimes)) (0)).xdate)).apply)) (((((((unsupported)).apply ((xdatetimes)) (1)).xdate)).apply)))) ((((unsupported)).apply ((xdatetimes)) (0))) ((((unsupported)).apply ((xdatetimes)) (1))) ((xroom102)))
                        (((unsupported)).apply ((((xHotelReservation).xobjects).xcreate)) ((((xDateRange)).apply (((((((unsupported)).apply ((xdatetimes)) (1)).xdate)).apply)) (((((((unsupported)).apply ((xdatetimes)) (3)).xdate)).apply)))) ((((unsupported)).apply ((xdatetimes)) (1))) ((((unsupported)).apply ((xdatetimes)) (3))) ((xroom102)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          seq
                            xreservation.write (((unsupported)).apply ((xHotelReservation)) ((((unsupported)).apply (((((((unsupported)).apply ((xdatetimes)) (1)).xdate)).apply)) (((((((unsupported)).apply ((xdatetimes)) (2)).xdate)).apply)))) ((((unsupported)).apply ((xdatetimes)) (1))) ((((unsupported)).apply ((xdatetimes)) (2))) ((xroom102)))
                            bogusForceDataize.write ((((xreservation).xsave)).apply)
                        bogusForceDataize.write (((((xHotelReservation).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xHotelReservation)) ((((unsupported)).apply (((((((unsupported)).apply ((xdatetimes)) (1)).xdate)).apply)) (((((((unsupported)).apply ((xdatetimes)) (2)).xdate)).apply)))) ((((unsupported)).apply ((xdatetimes)) (1))) ((((unsupported)).apply ((xdatetimes)) (2))) ((xroom101)))) ((((unsupported)).apply ((xHotelReservation)) ((((unsupported)).apply (((((((unsupported)).apply ((xdatetimes)) (1)).xdate)).apply)) (((((((unsupported)).apply ((xdatetimes)) (1)).xdate)).apply)))) ((((unsupported)).apply ((xdatetimes)) (1))) ((((unsupported)).apply ((xdatetimes)) (2))) ((xroom102)) (TRUE))) ((((unsupported)).apply ((xHotelReservation)) ((((unsupported)).apply (((((((unsupported)).apply ((xdatetimes)) (3)).xdate)).apply)) (((((((unsupported)).apply ((xdatetimes)) (4)).xdate)).apply)))) ((((unsupported)).apply ((xdatetimes)) (3))) ((((unsupported)).apply ((xdatetimes)) (4))) ((xroom102)))))))
                xtest_range_overlaps_custom_opclasses.write
                  [xself]
                    memory > xfunction
                    memory > xoutput_field
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xFunc)))
                          seq
                            xfunction.write "TSTZRANGE"
                            xoutput_field.write (((xDateTimeRangeField)).apply)
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping_reservations_custom") ((((unsupported)).apply ((((unsupported)).apply ((((xTsTzRange)).apply ("start") ("end") ((((xRangeBoundary)).apply)))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))) ((((unsupported)).apply ("range_ops") ("gist_int4_ops"))))
                        bogusForceDataize.write ((((xself).x_test_range_overlaps)).apply ((xconstraint)))
                xtest_range_overlaps_custom.write
                  [xself]
                    memory > xfunction
                    memory > xoutput_field
                    memory > xconstraint
                    seq > @
                      seq
                        (((unsupported)).apply ((xFunc)))
                          seq
                            xfunction.write "TSTZRANGE"
                            xoutput_field.write (((xDateTimeRangeField)).apply)
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping_reservations_custom_opclass") ((((unsupported)).apply ((((unsupported)).apply ((((xOpClass)).apply ((((xTsTzRange)).apply ("start") ("end") ((((xRangeBoundary)).apply)))) ("range_ops"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ((((xOpClass)).apply ("room") ("gist_int4_ops"))) (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
                        bogusForceDataize.write ((((xself).x_test_range_overlaps)).apply ((xconstraint)))
                xtest_range_overlaps.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping_reservations") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ("room") (((xRangeOperators).xEQUAL)))))) ((((unsupported)).apply ((xQ)) (FALSE))))
                        bogusForceDataize.write ((((xself).x_test_range_overlaps)).apply ((xconstraint)))
                xtest_range_adjacent.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "ints_adjacent"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (20) (50))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (20))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (19))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (51) (60))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_expressions_with_params.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "scene_left_equal"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ((((xLeft)).apply ("scene") (4))) (((xRangeOperators).xEQUAL)))))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xScene)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                xtest_expressions_with_key_transform.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "exclude_overlapping_reservations_smoking"
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xOVERLAPS)))) ((((unsupported)).apply ((((xKeyTextTransform)).apply ("smoking") ("requirements"))) (((xRangeOperators).xEQUAL)))))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xHotelReservation)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xHotelReservation).x_meta).xdb_table)))))
                xtest_index_transform.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "first_index_equal"
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("field__0") (((xRangeOperators).xEQUAL)))))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xIntegerArrayModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xIntegerArrayModel).x_meta).xdb_table)))))
                xtest_range_adjacent_initially_deferred.write
                  [xself]
                    memory > xconstraint_name
                    memory > xquoted_name
                    memory > xconstraint
                    memory > xadjacent_range
                    seq > @
                      seq
                        xconstraint_name.write "ints_adjacent_deferred"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) (((xDeferrable).xDEFERRED)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (20) (50))))
                        xadjacent_range.write (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (20))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))))
                          (((unsupported)).apply (((((xtransaction).xatomic)).apply)) (((((xconnection).xcursor)).apply)) ((xcursor)))
                            seq
                              xquoted_name.write (((((xconnection).xops).xquote_name)).apply ((xconstraint_name)))
                              bogusForceDataize.write ((((xcursor).xexecute)).apply (("SET CONSTRAINTS %s IMMEDIATE".mod (xquoted_name))))
                        bogusForceDataize.write ((((xadjacent_range).xdelete)).apply)
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (19))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (51) (60))))
                xtest_range_adjacent_gist_include.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_gist_include"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("gist") ((((unsupported)).apply ("decimals") ("ints"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (20) (50))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (20))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (19))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (51) (60))))
                xtest_range_adjacent_spgist_include.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_spgist_include"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("spgist") ((((unsupported)).apply ("decimals") ("ints"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (20) (50))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (20))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (19))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (51) (60))))
                xtest_range_adjacent_gist_include_condition.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_gist_include_condition"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("gist") ((((unsupported)).apply ("decimals"))) ((((unsupported)).apply ((xQ)) (100))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_spgist_include_condition.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_spgist_include_condition"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("spgist") ((((unsupported)).apply ("decimals"))) ((((unsupported)).apply ((xQ)) (100))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_gist_include_deferrable.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_gist_include_deferrable"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("gist") ((((unsupported)).apply ("decimals"))) (((xDeferrable).xDEFERRED)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_spgist_include_deferrable.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_spgist_include_deferrable"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("spgist") ((((unsupported)).apply ("decimals"))) (((xDeferrable).xDEFERRED)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_gist_include_not_supported.write
                  [xself]
                    memory > xconstraint_name
                    memory > xmsg
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "ints_adjacent_gist_include_not_supported"
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("gist") ((((unsupported)).apply ("id"))))
                        xmsg.write "Covering exclusion constraints using a GiST index require PostgreSQL 12+."
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.backends.postgresql.features.DatabaseFeatures.supports_covering_gist_indexes") (FALSE))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) ((xmsg)))))
                              bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                xtest_spgist_include_not_supported.write
                  [xself]
                    memory > xconstraint_name
                    memory > xmsg
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "ints_adjacent_spgist_include_not_supported"
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("spgist") ((((unsupported)).apply ("id"))))
                        xmsg.write "Covering exclusion constraints using an SP-GiST index require PostgreSQL 14+."
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.backends.postgresql.features.DatabaseFeatures.supports_covering_spgist_indexes") (FALSE))))
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) ((xmsg)))))
                              bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                xtest_range_adjacent_opclass.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraints
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "ints_adjacent_opclass"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xOpClass)) ("ints") ("range_ops"))) (((xRangeOperators).xADJACENT_TO)))))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) ((xconstraints)))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xSchemaTests).xget_opclass_query)) ((((unsupported)).apply ((xconstraint_name)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("range_ops") ((xconstraint_name)))))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (20) (50))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (20))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (19))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (51) (60))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_opclass_condition.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "ints_adjacent_opclass_condition"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xOpClass)) ("ints") ("range_ops"))) (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ((xQ)) (100))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_opclass_deferrable.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "ints_adjacent_opclass_deferrable"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xOpClass)) ("ints") ("range_ops"))) (((xRangeOperators).xADJACENT_TO)))))) (((xDeferrable).xDEFERRED)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_gist_opclass_include.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_gist_opclass_include"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xOpClass)) ("ints") ("range_ops"))) (((xRangeOperators).xADJACENT_TO)))))) ("gist") ((((unsupported)).apply ("decimals"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_spgist_opclass_include.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_spgist_opclass_include"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xOpClass)) ("ints") ("range_ops"))) (((xRangeOperators).xADJACENT_TO)))))) ("spgist") ((((unsupported)).apply ("decimals"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_equal_cast.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      seq
                        xconstraint_name.write "exclusion_equal_room_cast"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRoom).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ((((xCast)).apply ("number") ((((xIntegerField)).apply)))) (((xRangeOperators).xEQUAL)))))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRoom)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRoom).x_meta).xdb_table)))))
            (((unsupported)).apply ((xPostgreSQLTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.postgres"))))))
              seq
                xget_constraints.write
                  [xself xtable]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          (((unsupported)).apply ((((((xconnection).xintrospection).xget_constraints)).apply ((xcursor)) ((xtable)))))
                xtest_warning.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "The opclasses argument is deprecated in favor of using django.contrib.postgres.indexes.OpClass in ExclusionConstraint.expressions."
                        (((unsupported)).apply (((((xself).xassertWarnsMessage)).apply ((xRemovedInDjango50Warning)) ((xmsg)))))
                          (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ("range_ops"))))
                xtest_repr.write
                  [xself]
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ("exclude_overlapping") ((((unsupported)).apply ((((unsupported)).apply ((((xF)).apply ("datespan"))) (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ("range_ops"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xconstraint)))) ("<ExclusionConstraint: index_type='GIST' expressions=[(F(datespan), '-|-')] name='exclude_overlapping' opclasses=['range_ops']>"))
                xtest_range_adjacent_opclasses.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraints
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_opclasses"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ("range_ops"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) ((xconstraints)))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xSchemaTests).xget_opclass_query)) ((((unsupported)).apply (((xconstraint).xname)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("range_ops") (((xconstraint).xname)))))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (20) (50))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIntegrityError)))) (((((xtransaction).xatomic)).apply)))
                          (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (20))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (10) (19))))
                        (((unsupported)).apply ((((xRangesModel).xobjects).xcreate)) ((((unsupported)).apply (51) (60))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_opclasses_condition.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_opclasses_condition"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ("range_ops"))) ((((unsupported)).apply ((xQ)) (100))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_opclasses_deferrable.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_opclasses_deferrable"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ((((unsupported)).apply ("range_ops"))) (((xDeferrable).xDEFERRED)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_gist_opclasses_include.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_gist_opclasses_include"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("gist") ((((unsupported)).apply ("range_ops"))) ((((unsupported)).apply ("decimals"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                xtest_range_adjacent_spgist_opclasses_include.write
                  [xself]
                    memory > xconstraint_name
                    memory > xconstraint
                    seq > @
                      (((unsupported)).apply)
                        xconstraint_name.write "ints_adjacent_spgist_opclasses_include"
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))
                        xconstraint.write (((unsupported)).apply ((xExclusionConstraint)) ((xconstraint_name)) ((((unsupported)).apply ((((unsupported)).apply ("ints") (((xRangeOperators).xADJACENT_TO)))))) ("spgist") ((((unsupported)).apply ("range_ops"))) ((((unsupported)).apply ("decimals"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_constraint)).apply ((xRangesModel)) ((xconstraint)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xconstraint_name)) (((((xself).xget_constraints)).apply ((((xRangesModel).x_meta).xdb_table)))))