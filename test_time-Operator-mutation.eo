memory > xplatform
memory > xdecimal
memory > xbool
memory > xPermissionError
memory > xe
memory > xPyTime_AsTimeval
memory > xthreading
memory > xPyTime_AsTimespec
memory > xImportError
memory > xLONG_MIN
memory > x_TestStrftimeYear
memory > xpickle
memory > xunreasonable
memory > xsecs
memory > xpytime_object_to_time_t
memory > xpytime_object_to_timeval
memory > x_Test4dYear
memory > xPyTime_FromSecondsObject
memory > xz
memory > xValueError
memory > xLONG_MAX
memory > xtime_t
memory > xstr
memory > xdecimal_rnd
memory > xcontext
memory > xpow2
memory > xSIZEOF_TIME_T
memory > xt
memory > xfunc
memory > xmath
memory > xpytime_object_to_timespec
memory > xrange
memory > xvalue
memory > xtup
memory > xPyTime_AsMilliseconds
memory > xdivmod
memory > x_
memory > xtime_rnd
memory > xerr
memory > xPyTime_AsMicroseconds
memory > xdirective
memory > xenviron
memory > xtype
memory > xns
memory > xset
memory > xseconds
memory > xint
memory > xunit
memory > xException
memory > xhasattr
memory > xtime
memory > xOverflowError
memory > xx
memory > xPyTime_FromSeconds
memory > xCPyTimeTestCase
memory > xsuper
memory > xsupport
memory > xsys
memory > xsorted
memory > xlocale
memory > xfloat
memory > xOSError
memory > x_TestAsctimeYear
memory > xenum
memory > xname
memory > xunittest
memory > xy
memory > xPyTime_AsSecondsDouble
memory > xn
memory > xsysconfig
memory > xfilter
memory > xabs
memory > xbigyear
memory > xlen
memory > xTypeError
memory > x__name__
memory > xyear
memory > x_PyTime
[] > test_time
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_localtime_without_arg
        memory > xtest_4dyear
        memory > xtest_monotonic_settime
        memory > xtest_strptime_bytes
        memory > xtest_default_values_for_zero
        memory > xtest_clock_realtime
        memory > xTIME_MINYEAR
        memory > xtest_time
        memory > xtest_perf_counter
        memory > xtest_AsMilliseconds
        memory > xtest_AsTimespec
        memory > xcreate_decimal_converter
        memory > xcheck_float_rounding
        memory > xtest_object_to_timeval
        memory > xtest_pthread_getcpuclockid
        memory > xROUNDING_MODES
        memory > xNS_TO_SEC
        memory > x_format
        memory > xtest_sleep
        memory > x_bounds_checking
        memory > xtest_strftime
        memory > xtest_FromSeconds
        memory > xdecimal_round
        memory > xtest_strptime_exception_context
        memory > xtime_t_filter
        memory > xSEC_TO_US
        memory > xROUND_CEILING
        memory > xtest_monotonic
        memory > x_testcapi
        memory > xtest_data_attributes
        memory > xskip_if_not_supported
        memory > xSEC_TO_NS
        memory > xtest_object_to_time_t
        memory > xtest_strftime_format_check
        memory > xtest_clock_getres
        memory > xtest_clock_settime
        memory > xsetUp
        memory > xtest_localtime_failure
        memory > xtest_strptime
        memory > xtest_mktime_error
        memory > xUS_TO_NS
        memory > xROUND_HALF_EVEN
        memory > xtest_asctime
        memory > xMS_TO_NS
        memory > xROUND_UP
        memory > xtest_bug_3061
        memory > xtest_object_to_timespec
        memory > xTIME_MAXYEAR
        memory > xtest_short_times
        memory > xtest_strptime_timezone
        memory > xtest_negative
        memory > xtest_localtime_timezone
        memory > xyearstr
        memory > xtest_thread_time
        memory > xtest_large_year
        memory > xtest_FromSecondsObject
        memory > xtest_process_time
        memory > xcheck_int_rounding
        memory > x_rounding_values
        memory > x_check_rounding
        memory > xtest_ctime
        memory > xSIZEOF_INT
        memory > xROUND_FLOOR
        memory > xtest_year
        memory > xtest_gmtime_without_arg
        memory > xtest_mktime
        memory > xtest_tzset
        memory > xtest_clock_monotonic
        memory > xtest_insane_timestamps
        memory > xcreate_converter
        memory > xtest_conversions
        memory > xtest_asctime_bounding_check
        memory > xtest_strftime_bounding_check
        memory > xtest_time_ns_type
        memory > xtest_AsTimeval
        memory > xtest_get_clock_info
        memory > xtearDown
        memory > xtest_ctime_without_arg
        memory > xOVERFLOW_SECONDS
        memory > xtest_AsMicroseconds
        memory > xtest_AsSecondsDouble
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              x_testcapi.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply)
            xSIZEOF_INT.write (((((xsysconfig).xget_config_var)).apply ("SIZEOF_INT")).or 4)
            xTIME_MAXYEAR.write ((((unsupported)).apply (1) (((8.mul (xSIZEOF_INT)).sub 1))).sub 1)
            xTIME_MINYEAR.write ((((xTIME_MAXYEAR).neg).sub 1).sub 1900)
            xSEC_TO_US.write (((unsupported)).apply (10) (6))
            xUS_TO_NS.write (((unsupported)).apply (10) (3))
            xMS_TO_NS.write (((unsupported)).apply (10) (6))
            xSEC_TO_NS.write (((unsupported)).apply (10) (9))
            xNS_TO_SEC.write (((unsupported)).apply (10) (9))
            (((unsupported)).apply (((xenum).xIntEnum)))
              seq
                xROUND_FLOOR.write 0
                xROUND_CEILING.write 1
                xROUND_HALF_EVEN.write 2
                xROUND_UP.write 3
            xROUNDING_MODES.write (((unsupported)).apply ((((unsupported)).apply (((x_PyTime).xROUND_FLOOR)) (((xdecimal).xROUND_FLOOR)))) ((((unsupported)).apply (((x_PyTime).xROUND_CEILING)) (((xdecimal).xROUND_CEILING)))) ((((unsupported)).apply (((x_PyTime).xROUND_HALF_EVEN)) (((xdecimal).xROUND_HALF_EVEN)))) ((((unsupported)).apply (((x_PyTime).xROUND_UP)) (((xdecimal).xROUND_UP)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xt)) (((((xtime).xtime)).apply)))
                xtest_data_attributes.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                xtest_time.write
                  [xself]
                    memory > xinfo
                    seq > @
                      seq
                        bogusForceDataize.write ((((xtime).xtime)).apply)
                        xinfo.write ((((xtime).xget_clock_info)).apply ("time"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xinfo).xmonotonic)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xinfo).xadjustable)))
                xtest_time_ns_type.write
                  [xself]
                    memory > xcheck_ns
                    seq > @
                      seq
                        xcheck_ns.write
                          [xsec xns]
                            memory > xsec_ns
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xns)) ((xint)))
                                xsec_ns.write (((xint)).apply (((xsec).mul (((unsupported)).apply))))
                                bogusForceDataize.write ((((xself).xassertLess)).apply (((xsec_ns).sub (xns))) ((((unsupported)).apply (50) (6))) ((((unsupported)).apply ((xsec)) ((xns)))))
                        bogusForceDataize.write (((xcheck_ns)).apply (((((xtime).xtime)).apply)) (((((xtime).xtime_ns)).apply)))
                        bogusForceDataize.write (((xcheck_ns)).apply (((((xtime).xmonotonic)).apply)) (((((xtime).xmonotonic_ns)).apply)))
                        bogusForceDataize.write (((xcheck_ns)).apply (((((xtime).xperf_counter)).apply)) (((((xtime).xperf_counter_ns)).apply)))
                        bogusForceDataize.write (((xcheck_ns)).apply (((((xtime).xprocess_time)).apply)) (((((xtime).xprocess_time_ns)).apply)))
                        (((xhasattr)).apply ((xtime)) ("thread_time")).if
                          bogusForceDataize.write (((xcheck_ns)).apply (((((xtime).xthread_time)).apply)) (((((xtime).xthread_time_ns)).apply)))
                        (((xhasattr)).apply ((xtime)) ("clock_gettime")).if
                          bogusForceDataize.write (((xcheck_ns)).apply (((((xtime).xclock_gettime)).apply (((xtime).xCLOCK_REALTIME)))) (((((xtime).xclock_gettime_ns)).apply (((xtime).xCLOCK_REALTIME)))))
                xtest_clock_realtime.write
                  [xself]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        xt.write ((((xtime).xclock_gettime)).apply (((xtime).xCLOCK_REALTIME)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xt)) ((xfloat)))
                xtest_clock_monotonic.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      (((unsupported)).apply)
                        xa.write ((((xtime).xclock_gettime)).apply (((xtime).xCLOCK_MONOTONIC)))
                        xb.write ((((xtime).xclock_gettime)).apply (((xtime).xCLOCK_MONOTONIC)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xa)) ((xb)))
                xtest_pthread_getcpuclockid.write
                  [xself]
                    memory > xclk_id
                    memory > xt1
                    memory > xt2
                    seq > @
                      (((unsupported)).apply)
                        xclk_id.write ((((xtime).xpthread_getcpuclockid)).apply (((((xthreading).xget_ident)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xtype)).apply ((xclk_id)))) ((xint)))))
                        ((((((xplatform).xsystem)).apply).eq "AIX").not).if
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xclk_id)) (((xtime).xCLOCK_THREAD_CPUTIME_ID)))
                          ((((((xsys).xmaxsize).xbit_length)).apply).greater 32).if
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xclk_id)) (((xtime).xCLOCK_THREAD_CPUTIME_ID)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xclk_id)) (((xtime).xCLOCK_THREAD_CPUTIME_ID)))
                        xt1.write ((((xtime).xclock_gettime)).apply ((xclk_id)))
                        xt2.write ((((xtime).xclock_gettime)).apply ((xclk_id)))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xt1)) ((xt2)))
                xtest_clock_getres.write
                  [xself]
                    memory > xres
                    seq > @
                      (((unsupported)).apply)
                        xres.write ((((xtime).xclock_getres)).apply (((xtime).xCLOCK_REALTIME)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xres)) (0.0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xres)) (1.0))
                xtest_clock_settime.write
                  [xself]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        xt.write ((((xtime).xclock_gettime)).apply (((xtime).xCLOCK_REALTIME)))
                        (((unsupported)).apply ((xPermissionError)))
                          bogusForceDataize.write ((((xtime).xclock_settime)).apply (((xtime).xCLOCK_REALTIME)) ((xt)))
                        (((xhasattr)).apply ((xtime)) ("CLOCK_MONOTONIC")).if
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xtime).xclock_settime)) (((xtime).xCLOCK_MONOTONIC)) (0))
                xtest_conversions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xctime)).apply (((xself).xt)))) (((((xtime).xasctime)).apply (((((xtime).xlocaltime)).apply (((xself).xt)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((((xtime).xmktime)).apply (((((xtime).xlocaltime)).apply (((xself).xt)))))))) ((((xint)).apply (((xself).xt)))))
                xtest_sleep.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtime).xsleep)) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtime).xsleep)) ((1.neg)))
                        bogusForceDataize.write ((((xtime).xsleep)).apply (1.2))
                xtest_strftime.write
                  [xself]
                    memory > xtt
                    memory > xformat
                    seq > @
                      seq
                        xtt.write ((((xtime).xgmtime)).apply (((xself).xt)))
                        (((unsupported)).apply ((xdirective)) ((((unsupported)).apply ("a") ("A") ("b") ("B") ("c") ("d") ("H") ("I") ("j") ("m") ("M") ("p") ("S") ("U") ("w") ("W") ("x") ("X") ("y") ("Y") ("Z") ("%"))))
                          seq
                            xformat.write (" %".sub (xdirective))
                            (((unsupported)).apply ((xValueError)))
                              bogusForceDataize.write ((((xtime).xstrftime)).apply ((xformat)) ((xtt)))
                              bogusForceDataize.write ((((xself).xfail)).apply (("conversion specifier: %r failed.".mod (xformat))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xtime).xstrftime)) ("%S") ((xtt)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtime).xstrftime)) ("%S0") ((xtt)))
                x_bounds_checking.write
                  [xself xfunc]
                    seq > @
                      seq
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (0) (1) (0) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (12) (1) (0) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) ((1.neg)) (1) (0) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (13) (1) (0) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (1) (0) (0) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (1) (31) (0) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) ((1.neg)) (0) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (32) (0) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (1) (1) (23) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (1) ((1.neg)) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (1) (24) (0) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (1) (1) (0) (59) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (1) (0) ((1.neg)) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (1) (0) (60) (0) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (1) (0) (0) ((1.neg)) (0) (1) ((1.neg)))))
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (1) (1) (0) (0) (60) (0) (1) ((1.neg)))))
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (1) (1) (0) (0) (61) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (1) (0) (0) (62) (0) (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply ((((unsupported)).apply (1900) (1) (1) (0) (0) (0) ((1.neg)) (1) ((1.neg)))))) ((((xfunc)).apply ((((unsupported)).apply (1900) (1) (1) (0) (0) (0) ((6.neg)) (1) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (1) (0) (0) (0) ((2.neg)) (1) ((1.neg)))))
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (1) (1) (0) (0) (0) (0) (0) ((1.neg)))))
                        bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply (1900) (1) (1) (0) (0) (0) (0) (366) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (1) (0) (0) (0) (0) ((1.neg)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xfunc)) ((((unsupported)).apply (1900) (1) (1) (0) (0) (0) (0) (367) ((1.neg)))))
                xtest_strftime_bounding_check.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_bounds_checking)).apply ((((unsupported)).apply (((((xtime).xstrftime)).apply ("") ((xtup)))))))
                xtest_strftime_format_check.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xx)) ((((unsupported)).apply ("") ("A") ("%A") ("%AA"))))
                        (((unsupported)).apply ((xy)) ((((xrange)).apply (0) (16))))
                          (((unsupported)).apply ((xz)) ((((unsupported)).apply ("%") ("A%") ("AA%") ("%A%") ("A%A%") ("%#"))))
                            (((unsupported)).apply ((xValueError)))
                              bogusForceDataize.write ((((xtime).xstrftime)).apply ((((xx).mul (xy)).sub (xz))))
                xtest_default_values_for_zero.write
                  [xself]
                    memory > xexpected
                    memory > xresult
                    seq > @
                      seq
                        xexpected.write "2000 01 01 00 00 00 1 001"
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply)))
                          xresult.write ((((xtime).xstrftime)).apply ("%Y %m %d %H %M %S %w %j") (((((unsupported)).apply (2000)).sub ((((unsupported)).apply (0)).mul 8))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((xresult)))
                xtest_strptime.write
                  [xself]
                    memory > xtt
                    memory > xstrf_output
                    memory > xformat
                    seq > @
                      (((unsupported)).apply)
                        xtt.write ((((xtime).xgmtime)).apply (((xself).xt)))
                        (((unsupported)).apply ((xdirective)) ((((unsupported)).apply ("a") ("A") ("b") ("B") ("c") ("d") ("H") ("I") ("j") ("m") ("M") ("p") ("S") ("U") ("w") ("W") ("x") ("X") ("y") ("Y") ("Z") ("%"))))
                          seq
                            xformat.write ("%".sub (xdirective))
                            xstrf_output.write ((((xtime).xstrftime)).apply ((xformat)) ((xtt)))
                            (((unsupported)).apply ((xValueError)))
                              bogusForceDataize.write ((((xtime).xstrptime)).apply ((xstrf_output)) ((xformat)))
                              bogusForceDataize.write ((((xself).xfail)).apply (("conversion specifier %r failed with '%s' input.".mod (((unsupported)).apply ((xformat)) ((xstrf_output))))))
                xtest_strptime_bytes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xtime).xstrptime)) ("2009") ("%Y"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xtime).xstrptime)) ("2009") ("%Y"))
                xtest_strptime_exception_context.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xe)))
                          bogusForceDataize.write ((((xtime).xstrptime)).apply ("") ("%D"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xe).xexception).x__suppress_context__)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xe)))
                          bogusForceDataize.write ((((xtime).xstrptime)).apply ("19") ("%Y %"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xe).xexception).x__suppress_context__)) (TRUE))
                xtest_asctime.write
                  [xself]
                    memory > xasc
                    seq > @
                      seq
                        bogusForceDataize.write ((((xtime).xasctime)).apply (((((xtime).xgmtime)).apply (((xself).xt)))))
                        (((unsupported)).apply ((xbigyear)) ((((unsupported)).apply ((xTIME_MAXYEAR)) ((xTIME_MINYEAR)))))
                          seq
                            xasc.write ((((xtime).xasctime)).apply (((((unsupported)).apply ((xbigyear)) (6) (1)).sub ((((unsupported)).apply (0)).mul 6))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xasc)) ((((unsupported)).apply (((((xlen)).apply ((((xstr)).apply ((xbigyear))))).neg)))))) ((((xstr)).apply ((xbigyear)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xtime).xasctime)) (((((unsupported)).apply (((xTIME_MAXYEAR).sub 1))).sub ((((unsupported)).apply (0)).mul 8))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xtime).xasctime)) (((((unsupported)).apply (((xTIME_MINYEAR).sub 1))).sub ((((unsupported)).apply (0)).mul 8))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xtime).xasctime)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xtime).xasctime)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xtime).xasctime)) (((((unsupported)).apply (0)).mul 10)))
                xtest_asctime_bounding_check.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_bounds_checking)).apply (((xtime).xasctime)))
                xtest_ctime.write
                  [xself]
                    memory > xt
                    memory > xtestval
                    seq > @
                      seq
                        xt.write ((((xtime).xmktime)).apply ((((unsupported)).apply (1973) (9) (16) (1) (3) (52) (0) (0) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xctime)).apply ((xt)))) ("Sun Sep 16 01:03:52 1973"))
                        xt.write ((((xtime).xmktime)).apply ((((unsupported)).apply (2000) (1) (1) (0) (0) (0) (0) (0) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xctime)).apply ((xt)))) ("Sat Jan  1 00:00:00 2000"))
                        (((unsupported)).apply ((xyear)) ((((unsupported)).apply ((100.neg)) (100) (1000) (2000) (2050) (10000))))
                          (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))))
                            xtestval.write ((((xtime).xmktime)).apply (((((unsupported)).apply ((xyear)) (1) (10)).sub ((((unsupported)).apply (0)).mul 6))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xtime).xctime)).apply ((xtestval)))) ((((unsupported)).apply (20))))) ((((xstr)).apply ((xyear)))))
                xtest_tzset.write
                  [xself]
                    memory > xorg_TZ
                    memory > xeastern
                    memory > xutc
                    memory > xvictoria
                    memory > xxmas2002
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xxmas2002.write 1040774400.0
                        xeastern.write "EST-05EDT,M4.1.0,M10.5.0"
                        xvictoria.write "AEST-10AEDT-11,M10.5.0,M3.5.0"
                        xutc.write "UTC-0"
                        xorg_TZ.write ((((xenviron).xget)).apply ("TZ") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("TZ"))) ((xeastern)))
                            bogusForceDataize.write ((((xtime).xtzset)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("TZ"))) ((xutc)))
                            bogusForceDataize.write ((((xtime).xtzset)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xgmtime)).apply ((xxmas2002)))) (((((xtime).xlocaltime)).apply ((xxmas2002)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtime).xdaylight)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtime).xtimezone)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtime).xlocaltime)).apply ((xxmas2002))).xtm_isdst)) (0))
                            (((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("TZ"))) ((xeastern)))
                            bogusForceDataize.write ((((xtime).xtzset)).apply)
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xtime).xgmtime)).apply ((xxmas2002)))) (((((xtime).xlocaltime)).apply ((xxmas2002)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtime).xtzname)) ((((unsupported)).apply ("EST") ("EDT"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xtime).xtzname)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtime).xdaylight)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtime).xtimezone)) (18000))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtime).xaltzone)) (14400))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtime).xlocaltime)).apply ((xxmas2002))).xtm_isdst)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xtime).xtzname)))) (2))
                            (((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("TZ"))) ((xvictoria)))
                            bogusForceDataize.write ((((xtime).xtzset)).apply)
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xtime).xgmtime)).apply ((xxmas2002)))) (((((xtime).xlocaltime)).apply ((xxmas2002)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply (((xtime).xtzname)) (0))) ("AESTEST") ((((unsupported)).apply (((xtime).xtzname)) (0))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply (((xtime).xtzname)) (1))) ((((unsupported)).apply ("AEDT") ("EDT"))))) ((((xstr)).apply ((((unsupported)).apply (((xtime).xtzname)) (1))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xtime).xtzname)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtime).xdaylight)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtime).xtimezone)) ((36000.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtime).xaltzone)) ((39600.neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xtime).xlocaltime)).apply ((xxmas2002))).xtm_isdst)) (1))
                          seq
                            (((unsupported)).apply ((xorg_TZ)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("TZ"))) ((xorg_TZ)))
                              (((unsupported)).apply ("TZ") ((xenviron))).if
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("TZ"))))))
                            bogusForceDataize.write ((((xtime).xtzset)).apply)
                xtest_insane_timestamps.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xfunc)) ((((unsupported)).apply (((xtime).xctime)) (((xtime).xgmtime)) (((xtime).xlocaltime)))))
                        (((unsupported)).apply ((xunreasonable)) ((((unsupported)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xfunc)) ((xunreasonable)))
                xtest_ctime_without_arg.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xtime).xctime)).apply)
                        bogusForceDataize.write ((((xtime).xctime)).apply ("None: is there a None literal in the EO language?"))
                xtest_gmtime_without_arg.write
                  [xself]
                    memory > xt1
                    memory > xgt0
                    memory > xgt1
                    memory > xt0
                    seq > @
                      seq
                        xgt0.write ((((xtime).xgmtime)).apply)
                        xgt1.write ((((xtime).xgmtime)).apply ("None: is there a None literal in the EO language?"))
                        xt0.write ((((xtime).xmktime)).apply ((xgt0)))
                        xt1.write ((((xtime).xmktime)).apply ((xgt1)))
                        (((unsupported)).apply (((xself).xassertAlmostEqual)) ((xt1)) ((xt0)) (0.2))
                xtest_localtime_without_arg.write
                  [xself]
                    memory > xt1
                    memory > xlt0
                    memory > xt0
                    memory > xlt1
                    seq > @
                      seq
                        xlt0.write ((((xtime).xlocaltime)).apply)
                        xlt1.write ((((xtime).xlocaltime)).apply ("None: is there a None literal in the EO language?"))
                        xt0.write ((((xtime).xmktime)).apply ((xlt0)))
                        xt1.write ((((xtime).xmktime)).apply ((xlt1)))
                        (((unsupported)).apply (((xself).xassertAlmostEqual)) ((xt1)) ((xt0)) (0.2))
                xtest_mktime.write
                  [xself]
                    memory > xtt
                    seq > @
                      (((unsupported)).apply ((xt)) ((((unsupported)).apply ((2.neg)) ((1.neg)) (0) (1))))
                        (((unsupported)).apply ((((unsupported)).apply ((xOverflowError)) ((xOSError)))))
                          xtt.write ((((xtime).xlocaltime)).apply ((xt)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xmktime)).apply ((xtt)))) ((xt)))
                xtest_mktime_error.write
                  [xself]
                    memory > xtt
                    memory > xtzname
                    seq > @
                      (((unsupported)).apply)
                        xtt.write ((((xtime).xgmtime)).apply (((xself).xt)))
                        xtzname.write ((((xtime).xstrftime)).apply ("%Z") ((xtt)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xtzname)) ("LMT"))
                        (((unsupported)).apply ((xOverflowError)))
                          bogusForceDataize.write ((((xtime).xmktime)).apply ((((unsupported)).apply ((1.neg)) (1) (1) (0) (0) (0) ((1.neg)) ((1.neg)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xstrftime)).apply ("%Z") ((xtt)))) ((xtzname)))
                xtest_monotonic.write
                  [xself]
                    memory > xtimes
                    memory > xinfo
                    memory > xdt
                    memory > xt2
                    memory > xt1
                    seq > @
                      seq
                        xtimes.write (((unsupported)).apply (((((xtime).xmonotonic)).apply)) ((xn)) ((((xrange)).apply (100))))
                        xt1.write (((unsupported)).apply ((xtimes)) (0))
                        (((unsupported)).apply ((xt2)) ((((unsupported)).apply ((xtimes)) ((((unsupported)).apply (1))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xt2)) ((xt1)) (("times=%s".mod (xtimes))))
                            xt1.write (xt2)
                        xt1.write ((((xtime).xmonotonic)).apply)
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.5))
                        xt2.write ((((xtime).xmonotonic)).apply)
                        xdt.write ((xt2).sub (xt1))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xt2)) ((xt1)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((0.450.leq (xdt))))
                        xinfo.write ((((xtime).xget_clock_info)).apply ("monotonic"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xinfo).xmonotonic)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xinfo).xadjustable)))
                xtest_perf_counter.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xtime).xperf_counter)).apply)
                xtest_process_time.write
                  [xself]
                    memory > xstop
                    memory > xinfo
                    memory > xstart
                    seq > @
                      seq
                        xstart.write ((((xtime).xprocess_time)).apply)
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.100))
                        xstop.write ((((xtime).xprocess_time)).apply)
                        bogusForceDataize.write ((((xself).xassertLess)).apply (((xstop).sub (xstart))) (0.020))
                        xinfo.write ((((xtime).xget_clock_info)).apply ("process_time"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xinfo).xmonotonic)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xinfo).xadjustable)))
                xtest_thread_time.write
                  [xself]
                    memory > xstop
                    memory > xinfo
                    memory > xstart
                    seq > @
                      seq
                        ((((xhasattr)).apply ((xtime)) ("thread_time")).not).if
                          (((((xsys).xplatform).xstartswith)).apply ((((unsupported)).apply ("linux") ("win")))).if
                            bogusForceDataize.write ((((xself).xfail)).apply (("time.thread_time() should be available on %r".mod (((unsupported)).apply (((xsys).xplatform))))))
                            bogusForceDataize.write ((((xself).xskipTest)).apply ("need time.thread_time"))
                        xstart.write ((((xtime).xthread_time)).apply)
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.100))
                        xstop.write ((((xtime).xthread_time)).apply)
                        bogusForceDataize.write ((((xself).xassertLess)).apply (((xstop).sub (xstart))) (0.020))
                        xinfo.write ((((xtime).xget_clock_info)).apply ("thread_time"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xinfo).xmonotonic)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xinfo).xadjustable)))
                xtest_monotonic_settime.write
                  [xself]
                    memory > xrealtime
                    memory > xt1
                    memory > xt2
                    seq > @
                      (((unsupported)).apply)
                        xt1.write ((((xtime).xmonotonic)).apply)
                        xrealtime.write ((((xtime).xclock_gettime)).apply (((xtime).xCLOCK_REALTIME)))
                        (((unsupported)).apply ((xPermissionError)))
                          bogusForceDataize.write ((((xtime).xclock_settime)).apply (((xtime).xCLOCK_REALTIME)) (((xrealtime).sub 3600)))
                          bogusForceDataize.write ((((xself).xskipTest)).apply ((xerr)))
                        xt2.write ((((xtime).xmonotonic)).apply)
                        bogusForceDataize.write ((((xtime).xclock_settime)).apply (((xtime).xCLOCK_REALTIME)) ((xrealtime)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((xt2)) ((xt1)))
                xtest_localtime_failure.write
                  [xself]
                    memory > xinvalid_time_t
                    seq > @
                      seq
                        xinvalid_time_t.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xtime_t)) ((((unsupported)).apply ((1.neg)) ((((unsupported)).apply (2) (30))) ((((unsupported)).apply (2) (33))) ((((unsupported)).apply (2) (60))))))
                          (((unsupported)).apply ((xOverflowError)) ((xOSError)))
                            bogusForceDataize.write ((((xtime).xlocaltime)).apply ((xtime_t)))
                            bogusForceDataize.write ((((xself).xskipTest)).apply ("need 64-bit time_t"))
                            seq
                              xinvalid_time_t.write (xtime_t)
                              (((unsupported)).apply)
                        (((unsupported)).apply ((xinvalid_time_t)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("unable to find an invalid time_t value"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xtime).xlocaltime)) ((xinvalid_time_t)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xtime).xctime)) ((xinvalid_time_t)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtime).xlocaltime)) ((((xfloat)).apply ("nan"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtime).xctime)) ((((xfloat)).apply ("nan"))))
                xtest_get_clock_info.write
                  [xself]
                    memory > xclocks
                    memory > xinfo
                    seq > @
                      seq
                        xclocks.write (((unsupported)).apply ("monotonic") ("perf_counter") ("process_time") ("time"))
                        (((unsupported)).apply ((xname)) ((xclocks)))
                          seq
                            xinfo.write ((((xtime).xget_clock_info)).apply ((xname)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xinfo).ximplementation)) ((xstr)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xinfo).ximplementation)) (""))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xinfo).xmonotonic)) ((xbool)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xinfo).xresolution)) ((xfloat)))
                            bogusForceDataize.write ((((xself).xassertGreater)).apply (((xinfo).xresolution)) (0.0))
                            bogusForceDataize.write ((((xself).xassertLessEqual)).apply (((xinfo).xresolution)) (1.0))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xinfo).xadjustable)) ((xbool)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xtime).xget_clock_info)) ("xxx"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xoldloc)) (((((xlocale).xsetlocale)).apply (((xlocale).xLC_ALL)))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_ALL)) (((xself).xoldloc)))
                xtest_bug_3061.write
                  [xself]
                    memory > xtmp
                    seq > @
                      seq
                        (((unsupported)).apply (((xlocale).xError)))
                          xtmp.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_ALL)) ("fr_FR"))
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("could not set locale.LC_ALL to fr_FR"))
                        bogusForceDataize.write ((((xtime).xstrftime)).apply ("%B") ((((unsupported)).apply (2009) (2) (1) (0) (0) (0) (0) (0) (0))))
            (((unsupported)).apply)
              seq
                x_format.write "%d"
                xyearstr.write
                  [xself xy]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((((((xtime).xasctime)).apply (((((unsupported)).apply ((xy))).sub ((((unsupported)).apply (0)).mul 8)))).xsplit)).apply)) ((1.neg)))))
                xtest_large_year.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xyearstr)).apply (12345))) ("12345"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xyearstr)).apply (123456789))) ("123456789"))
            (((unsupported)).apply)
              seq
                (((((xtime).xstrftime)).apply ("%Y") (((((unsupported)).apply (1)).sub ((((unsupported)).apply (0)).mul 8)))).eq "0001").if
                  x_format.write "%04d"
                  x_format.write "%d"
                xyearstr.write
                  [xself xy]
                    seq > @
                      (((unsupported)).apply (((((xtime).xstrftime)).apply ("%Y") (((((unsupported)).apply ((xy))).sub ((((unsupported)).apply (0)).mul 8))))))
                xtest_4dyear.write
                  [xself]
                    memory > xyear4d
                    seq > @
                      (((xself).x_format).eq "%04d").if
                        bogusForceDataize.write ((((xself).xtest_year)).apply ("%04d"))
                        seq
                          xyear4d.write
                            [xy]
                              seq > @
                                (((unsupported)).apply (((((xtime).xstrftime)).apply ("%4Y") (((((unsupported)).apply ((xy))).sub ((((unsupported)).apply (0)).mul 8))))))
                          (((unsupported)).apply (((xself).xtest_year)) ("%04d") ((xyear4d)))
                xskip_if_not_supported.write
                  [xy]
                    memory > xcond
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "strftime() is limited to [1; 9999] with Visual Studio"
                        (((unsupported)).apply ((xValueError)))
                          bogusForceDataize.write ((((xtime).xstrftime)).apply ("%Y") (((((unsupported)).apply ((xy))).sub ((((unsupported)).apply (0)).mul 8))))
                          xcond.write FALSE
                          xcond.write TRUE
                        (((unsupported)).apply (((((xunittest).xskipUnless)).apply ((xcond)) ((xmsg)))))
                xtest_large_year.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xsuper)).apply).xtest_large_year)).apply)))
                xtest_negative.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xsuper)).apply).xtest_negative)).apply)))
                (((unsupported)).apply ((((unsupported)).apply ((xskip_if_not_supported)))))
            (((unsupported)).apply)
              seq
                x_format.write "%d"
                xtest_year.write
                  [xself xfmt xfunc]
                    seq > @
                      (((unsupported)).apply)
                        xfmt.write ((xfmt).or ((xself).x_format))
                        xfunc.write ((xfunc).or ((xself).xyearstr))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (1))) (((xfmt).mod 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (68))) (((xfmt).mod 68)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (69))) (((xfmt).mod 69)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (99))) (((xfmt).mod 99)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (999))) (((xfmt).mod 999)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (9999))) (((xfmt).mod 9999)))
                xtest_large_year.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xyearstr)).apply (12345)).xlstrip)).apply ("-"))) ("12345"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xyearstr)).apply (123456789)).xlstrip)).apply ("-"))) ("123456789"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xself).xyearstr)).apply ((xTIME_MAXYEAR))).xlstrip)).apply ("-"))) ((((xstr)).apply ((xTIME_MAXYEAR)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xself).xyearstr)) (((xTIME_MAXYEAR).sub 1)))
                xtest_negative.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xyearstr)).apply ((1.neg)))) ((((xself).x_format).mod (1.neg))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xyearstr)).apply ((1234.neg)))) ("-1234"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xyearstr)).apply ((123456.neg)))) ("-123456"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xyearstr)).apply ((123456789.neg)))) ((((xstr)).apply ((123456789.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xyearstr)).apply ((1234567890.neg)))) ((((xstr)).apply ((1234567890.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xyearstr)).apply ((xTIME_MINYEAR)))) ((((xstr)).apply ((xTIME_MINYEAR)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xself).xyearstr)) (((xTIME_MINYEAR).sub 1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOverflowError)))))
                          bogusForceDataize.write ((((xself).xyearstr)).apply ((((xTIME_MAXYEAR).neg).sub 1)))
            (((unsupported)).apply ((x_TestAsctimeYear)) ((x_Test4dYear)) (((xunittest).xTestCase)))
            (((unsupported)).apply ((x_TestStrftimeYear)) ((x_Test4dYear)) (((xunittest).xTestCase)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_localtime_timezone.write
                  [xself]
                    memory > xlt
                    memory > xt
                    memory > xt9
                    memory > xnew_lt9
                    memory > xnew_lt
                    seq > @
                      (((unsupported)).apply)
                        xlt.write ((((xtime).xlocaltime)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xlt)) ("tm_gmtoff"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xlt)) ("tm_zone"))))
                        (((unsupported)).apply (((xlt).xtm_gmtoff)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xhasattr)).apply ((xtime)) ("timezone")).not)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xlt).xtm_gmtoff)) (((((unsupported)).apply ((((unsupported)).apply (((xtime).xtimezone)) (((xtime).xaltzone)))) (((xlt).xtm_isdst))).neg)))
                        (((unsupported)).apply (((xlt).xtm_zone)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xhasattr)).apply ((xtime)) ("tzname")).not)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xlt).xtm_zone)) ((((unsupported)).apply (((xtime).xtzname)) (((xlt).xtm_isdst)))))
                        seq
                          xt.write ((((xtime).xmktime)).apply ((xlt)))
                          xt9.write ((((xtime).xmktime)).apply ((((unsupported)).apply ((xlt)) ((((unsupported)).apply (9))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt)) ((xt9)))
                        seq
                          xnew_lt.write ((((xtime).xlocaltime)).apply ((xt)))
                          xnew_lt9.write ((((xtime).xlocaltime)).apply ((xt9)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnew_lt)) ((xlt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew_lt).xtm_gmtoff)) (((xlt).xtm_gmtoff)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew_lt).xtm_zone)) (((xlt).xtm_zone)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnew_lt9)) ((xlt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew_lt).xtm_gmtoff)) (((xlt).xtm_gmtoff)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew_lt9).xtm_zone)) (((xlt).xtm_zone)))
                xtest_strptime_timezone.write
                  [xself]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        xt.write ((((xtime).xstrptime)).apply ("UTC") ("%Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xtm_zone)) ("UTC"))
                        xt.write ((((xtime).xstrptime)).apply ("-0500") ("%z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xt).xtm_gmtoff)) ((5.mul 3600)))
                xtest_short_times.write
                  [xself]
                    memory > xst
                    memory > xlt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xst.write "ctimenstruct_timenp0n((I2007nI8nI11nI1nI24nI49nI5nI223nI1ntp1n(dp2ntp3nRp4n."
                        xlt.write ((((xpickle).xloads)).apply ((xst)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xlt).xtm_gmtoff)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xlt).xtm_zone)) ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply (((((xunittest).xskipIf)).apply ((((unsupported)).apply ((x_testcapi)) ("None: is there a None literal in the EO language?"))) ("need the _testcapi module"))))
              seq
                (((unsupported)).apply)
                xOVERFLOW_SECONDS.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    memory > xbits
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbits.write (((xSIZEOF_TIME_T).mul 8).sub 1)
                        (((unsupported)).apply (((xself).xtime_t_min)) (((((unsupported)).apply (2) ((xbits))).neg)))
                        (((unsupported)).apply (((xself).xtime_t_max)) (((((unsupported)).apply (2) ((xbits))).sub 1)))
                xtime_t_filter.write
                  [xself xseconds]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xtime_t_min)) ((xseconds)) (((xself).xtime_t_max)))))
                x_rounding_values.write
                  [xself xuse_float]
                    memory > xns
                    memory > xns_timestamps
                    memory > xunits
                    memory > xvalues
                    seq > @
                      seq
                        unsupported
                        xunits.write (((unsupported)).apply (1) ((xUS_TO_NS)) ((xMS_TO_NS)) ((xSEC_TO_NS)))
                        (xuse_float).if
                          bogusForceDataize.write ((((xunits).xappend)).apply ((((unsupported)).apply)))
                        xvalues.write (((unsupported)).apply (1) (2) (5) (7) (123) (456) (1234) (9) (99) (999) (9999) (99999) (999999) (499) (500) (501) (1499) (1500) (1501) (2500) (3500) (4500))
                        xns_timestamps.write (((unsupported)).apply (0))
                        (((unsupported)).apply ((xunit)) ((xunits)))
                          (((unsupported)).apply ((xvalue)) ((xvalues)))
                            seq
                              xns.write ((xvalue).mul (xunit))
                              bogusForceDataize.write ((((xns_timestamps).xextend)).apply ((((unsupported)).apply (((xns).neg)) ((xns)))))
                        (((unsupported)).apply ((xpow2)) ((((unsupported)).apply (0) (5) (10) (15) (22) (23) (24) (30) (33))))
                          seq
                            xns.write ((((unsupported)).apply (2) ((xpow2))).mul (xSEC_TO_NS))
                            bogusForceDataize.write ((((xns_timestamps).xextend)).apply ((((unsupported)).apply ((((xns).neg).sub 1)) (((xns).neg)) ((((xns).neg).sub 1)) (((xns).sub 1)) ((xns)) (((xns).sub 1)))))
                        (((unsupported)).apply ((xseconds)) ((((unsupported)).apply (((x_testcapi).xINT_MIN)) (((x_testcapi).xINT_MAX)))))
                          bogusForceDataize.write ((((xns_timestamps).xappend)).apply (((xseconds).mul (xSEC_TO_NS))))
                        (xuse_float).if
                          (((unsupported)).apply ((xpow2)) ((((unsupported)).apply (3) (7) (10) (15))))
                            seq
                              xns.write (((unsupported)).apply (2.0) (((xpow2).neg)))
                              bogusForceDataize.write ((((xns_timestamps).xextend)).apply ((((unsupported)).apply (((xns).neg)) ((xns)))))
                        xns.write ((((unsupported)).apply ((((unsupported)).apply (2) (63))) ((xSEC_TO_NS))).mul (xSEC_TO_NS))
                        bogusForceDataize.write ((((xns_timestamps).xextend)).apply ((((unsupported)).apply (((xns).neg)) ((xns)))))
                        (((unsupported)).apply ((xns_timestamps)))
                x_check_rounding.write
                  [xself xpytime_converter xexpected_func xuse_float xunit_to_sec xvalue_filter]
                    memory > xdebug_info
                    memory > xexpected
                    memory > xns_timestamps
                    memory > xvalid_values
                    memory > xns
                    memory > xconvert_values
                    memory > xresult
                    memory > xoverflow_values
                    seq > @
                      (((unsupported)).apply)
                        xconvert_values.write
                          [xns_timestamps]
                            memory > xvalues
                            memory > xunit_to_ns
                            seq > @
                              seq
                                (xuse_float).if
                                  seq
                                    xunit_to_ns.write ((xSEC_TO_NS).div (((xfloat)).apply ((xunit_to_sec))))
                                    xvalues.write (((unsupported)).apply (((xns).div (xunit_to_ns))) ((xns)) ((xns_timestamps)))
                                  seq
                                    xunit_to_ns.write (((unsupported)).apply ((xSEC_TO_NS)) ((xunit_to_sec)))
                                    xvalues.write (((unsupported)).apply ((((unsupported)).apply ((xns)) ((xunit_to_ns)))) ((xns)) ((xns_timestamps)))
                                (xvalue_filter).if
                                  xvalues.write (((xfilter)).apply ((xvalue_filter)) ((xvalues)))
                                (((unsupported)).apply ((((xsorted)).apply ((((xset)).apply ((xvalues)))))))
                        xns_timestamps.write ((((xself).x_rounding_values)).apply ((xuse_float)))
                        xvalid_values.write (((xconvert_values)).apply ((xns_timestamps)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtime_rnd)) ((xdecimal_rnd)))) ((xROUNDING_MODES)))
                          (((unsupported)).apply (((((xdecimal).xlocalcontext)).apply)) ((xcontext)))
                            seq
                              (((unsupported)).apply (((xcontext).xrounding)) ((xdecimal_rnd)))
                              (((unsupported)).apply ((xvalue)) ((xvalid_values)))
                                seq
                                  xdebug_info.write (((unsupported)).apply ("value") ((xvalue)) ("rounding") ((xdecimal_rnd)))
                                  (((unsupported)).apply ((xException)))
                                    seq
                                      xresult.write (((xpytime_converter)).apply ((xvalue)) ((xtime_rnd)))
                                      xexpected.write (((xexpected_func)).apply ((xvalue)))
                                    bogusForceDataize.write ((((xself).xfail)).apply (("Error on timestamp conversion: %s".mod (xdebug_info))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xexpected)) ((xdebug_info)))
                        xns.write (((xself).xOVERFLOW_SECONDS).mul (xSEC_TO_NS))
                        xns_timestamps.write (((unsupported)).apply (((xns).neg)) ((xns)))
                        xoverflow_values.write (((xconvert_values)).apply ((xns_timestamps)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtime_rnd)) ((x_)))) ((xROUNDING_MODES)))
                          (((unsupported)).apply ((xvalue)) ((xoverflow_values)))
                            seq
                              xdebug_info.write (((unsupported)).apply ("value") ((xvalue)) ("rounding") ((xtime_rnd)))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) ((xdebug_info)))))
                                bogusForceDataize.write (((xpytime_converter)).apply ((xvalue)) ((xtime_rnd)))
                xcheck_int_rounding.write
                  [xself xpytime_converter xexpected_func xunit_to_sec xvalue_filter]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_check_rounding)).apply ((xpytime_converter)) ((xexpected_func)) (FALSE) ((xunit_to_sec)) ((xvalue_filter)))
                xcheck_float_rounding.write
                  [xself xpytime_converter xexpected_func xunit_to_sec xvalue_filter]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_check_rounding)).apply ((xpytime_converter)) ((xexpected_func)) (TRUE) ((xunit_to_sec)) ((xvalue_filter)))
                xdecimal_round.write
                  [xself xx]
                    memory > xd
                    seq > @
                      seq
                        xd.write ((((xdecimal).xDecimal)).apply ((xx)))
                        xd.write ((((xd).xquantize)).apply (1))
                        (((unsupported)).apply ((((xint)).apply ((xd)))))
            (((unsupported)).apply ((xCPyTimeTestCase)) (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xOVERFLOW_SECONDS.write ((((xmath).xceil)).apply ((((((unsupported)).apply (2) (63)).sub 1).div (xSEC_TO_NS))))
                xtest_FromSeconds.write
                  [xself]
                    memory > xc_int_filter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xc_int_filter.write
                          [xsecs]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (((x_testcapi).xINT_MIN)) ((xsecs)) (((x_testcapi).xINT_MAX)))))
                        (((unsupported)).apply (((xself).xcheck_int_rounding)) ((((unsupported)).apply ((((xPyTime_FromSeconds)).apply ((xsecs)))))) ((((unsupported)).apply (((xsecs).mul (xSEC_TO_NS))))) ((xc_int_filter)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtime_rnd)) ((x_)))) ((xROUNDING_MODES)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            bogusForceDataize.write (((xPyTime_FromSeconds)).apply ((((xfloat)).apply ("nan"))))
                xtest_FromSecondsObject.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_int_rounding)).apply ((xPyTime_FromSecondsObject)) ((((unsupported)).apply (((xsecs).mul (xSEC_TO_NS))))))
                        bogusForceDataize.write ((((xself).xcheck_float_rounding)).apply ((xPyTime_FromSecondsObject)) ((((unsupported)).apply (((((xself).xdecimal_round)).apply (((xns).mul (xSEC_TO_NS))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtime_rnd)) ((x_)))) ((xROUNDING_MODES)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            bogusForceDataize.write (((xPyTime_FromSecondsObject)).apply ((((xfloat)).apply ("nan"))) ((xtime_rnd)))
                xtest_AsSecondsDouble.write
                  [xself]
                    memory > xfloat_converter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfloat_converter.write
                          [xns]
                            seq > @
                              (((((xabs)).apply ((xns))).mod (xSEC_TO_NS)).eq 0).if
                                (((unsupported)).apply ((((xfloat)).apply ((((unsupported)).apply ((xns)) ((xSEC_TO_NS)))))))
                                (((unsupported)).apply (((((xfloat)).apply ((xns))).div (xSEC_TO_NS))))
                        bogusForceDataize.write ((((xself).xcheck_int_rounding)).apply ((((unsupported)).apply ((((xPyTime_AsSecondsDouble)).apply ((xns)))))) ((xfloat_converter)) ((xNS_TO_SEC)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtime_rnd)) ((x_)))) ((xROUNDING_MODES)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                            bogusForceDataize.write (((xPyTime_AsSecondsDouble)).apply ((((xfloat)).apply ("nan"))))
                xcreate_decimal_converter.write
                  [xself xdenominator]
                    memory > xconverter
                    memory > xdenom
                    seq > @
                      seq
                        xdenom.write ((((xdecimal).xDecimal)).apply ((xdenominator)))
                        xconverter.write
                          [xvalue]
                            memory > xd
                            seq > @
                              seq
                                xd.write (((((xdecimal).xDecimal)).apply ((xvalue))).div (xdenom))
                                (((unsupported)).apply (((((xself).xdecimal_round)).apply ((xd)))))
                        (((unsupported)).apply ((xconverter)))
                xtest_AsTimeval.write
                  [xself]
                    memory > xtimeval_converter
                    memory > xseconds_filter
                    memory > xus_converter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xus_converter.write ((((xself).xcreate_decimal_converter)).apply ((xUS_TO_NS)))
                        xtimeval_converter.write
                          [xns]
                            memory > xus
                            seq > @
                              seq
                                xus.write (((xus_converter)).apply ((xns)))
                                (((unsupported)).apply ((((xdivmod)).apply ((xus)) ((xSEC_TO_US)))))
                        (((xsys).xplatform).eq "win32").if
                          seq
                            seq
                              (((unsupported)).apply)
                              (((unsupported)).apply)
                            xseconds_filter.write
                              [xsecs]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xLONG_MIN)) ((xsecs)) ((xLONG_MAX)))))
                          xseconds_filter.write ((xself).xtime_t_filter)
                        (((unsupported)).apply (((xself).xcheck_int_rounding)) ((xPyTime_AsTimeval)) ((xtimeval_converter)) ((xNS_TO_SEC)) ((xseconds_filter)))
                xtest_AsTimespec.write
                  [xself]
                    memory > xtimespec_converter
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xtimespec_converter.write
                          [xns]
                            seq > @
                              (((unsupported)).apply ((((xdivmod)).apply ((xns)) ((xSEC_TO_NS)))))
                        (((unsupported)).apply (((xself).xcheck_int_rounding)) ((((unsupported)).apply ((((xPyTime_AsTimespec)).apply ((xns)))))) ((xtimespec_converter)) ((xNS_TO_SEC)) (((xself).xtime_t_filter)))
                xtest_AsMilliseconds.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_int_rounding)).apply ((xPyTime_AsMilliseconds)) (((((xself).xcreate_decimal_converter)).apply ((xMS_TO_NS)))) ((xNS_TO_SEC)))
                xtest_AsMicroseconds.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_int_rounding)).apply ((xPyTime_AsMicroseconds)) (((((xself).xcreate_decimal_converter)).apply ((xUS_TO_NS)))) ((xNS_TO_SEC)))
            (((unsupported)).apply ((xCPyTimeTestCase)) (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xOVERFLOW_SECONDS.write (((unsupported)).apply (2) (64))
                xtest_object_to_time_t.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_int_rounding)) ((xpytime_object_to_time_t)) ((((unsupported)).apply ((xsecs)))) (((xself).xtime_t_filter)))
                        (((unsupported)).apply (((xself).xcheck_float_rounding)) ((xpytime_object_to_time_t)) (((xself).xdecimal_round)) (((xself).xtime_t_filter)))
                xcreate_converter.write
                  [xself xsec_to_unit]
                    memory > xconverter
                    seq > @
                      seq
                        xconverter.write
                          [xsecs]
                            memory > xfloatpart
                            memory > xintpart
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xfloatpart)) ((xintpart)))) (((((xmath).xmodf)).apply ((xsecs)))))
                                xintpart.write (((xint)).apply ((xintpart)))
                                (((unsupported)).apply ((xfloatpart)) ((xsec_to_unit)))
                                xfloatpart.write ((((xself).xdecimal_round)).apply ((xfloatpart)))
                                ((xfloatpart).less 0).if
                                  seq
                                    (((unsupported)).apply ((xfloatpart)) ((xsec_to_unit)))
                                    (((unsupported)).apply ((xintpart)) (1))
                                  ((xfloatpart).geq (xsec_to_unit)).if
                                    seq
                                      (((unsupported)).apply ((xfloatpart)) ((xsec_to_unit)))
                                      (((unsupported)).apply ((xintpart)) (1))
                                (((unsupported)).apply ((((unsupported)).apply ((xintpart)) ((xfloatpart)))))
                        (((unsupported)).apply ((xconverter)))
                xtest_object_to_timeval.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_int_rounding)) ((xpytime_object_to_timeval)) ((((unsupported)).apply ((((unsupported)).apply ((xsecs)) (0))))) (((xself).xtime_t_filter)))
                        (((unsupported)).apply (((xself).xcheck_float_rounding)) ((xpytime_object_to_timeval)) (((((xself).xcreate_converter)).apply ((xSEC_TO_US)))) (((xself).xtime_t_filter)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtime_rnd)) ((x_)))) ((xROUNDING_MODES)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            bogusForceDataize.write (((xpytime_object_to_timeval)).apply ((((xfloat)).apply ("nan"))) ((xtime_rnd)))
                xtest_object_to_timespec.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_int_rounding)) ((xpytime_object_to_timespec)) ((((unsupported)).apply ((((unsupported)).apply ((xsecs)) (0))))) (((xself).xtime_t_filter)))
                        (((unsupported)).apply (((xself).xcheck_float_rounding)) ((xpytime_object_to_timespec)) (((((xself).xcreate_converter)).apply ((xSEC_TO_NS)))) (((xself).xtime_t_filter)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtime_rnd)) ((x_)))) ((xROUNDING_MODES)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            bogusForceDataize.write (((xpytime_object_to_timespec)).apply ((((xfloat)).apply ("nan"))) ((xtime_rnd)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)