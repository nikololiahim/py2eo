memory > xmin
memory > xlist
memory > xrange
memory > xrandom
memory > xlen
memory > xWORDS
memory > xi
[] > lorem_ipsum
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xCOMMON_P
        memory > xwords
        memory > xWORDS2
        memory > xparagraph
        memory > xCOMMON_WORDS
        memory > xparagraphs
        memory > xsentence
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            xCOMMON_P.write "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
            xWORDS2.write (((unsupported)).apply ("exercitationem") ("perferendis") ("perspiciatis") ("laborum") ("eveniet") ("sunt") ("iure") ("nam") ("nobis") ("eum") ("cum") ("officiis") ("excepturi") ("odio") ("consectetur") ("quasi") ("aut") ("quisquam") ("vel") ("eligendi") ("itaque") ("non") ("odit") ("tempore") ("quaerat") ("dignissimos") ("facilis") ("neque") ("nihil") ("expedita") ("vitae") ("vero") ("ipsum") ("nisi") ("animi") ("cumque") ("pariatur") ("velit") ("modi") ("natus") ("iusto") ("eaque") ("sequi") ("illo") ("sed") ("ex") ("et") ("voluptatibus") ("tempora") ("veritatis") ("ratione") ("assumenda") ("incidunt") ("nostrum") ("placeat") ("aliquid") ("fuga") ("provident") ("praesentium") ("rem") ("necessitatibus") ("suscipit") ("adipisci") ("quidem") ("possimus") ("voluptas") ("debitis") ("sint") ("accusantium") ("unde") ("sapiente") ("voluptate") ("qui") ("aspernatur") ("laudantium") ("soluta") ("amet") ("quo") ("aliquam") ("saepe") ("culpa") ("libero") ("ipsa") ("dicta") ("reiciendis") ("nesciunt") ("doloribus") ("autem") ("impedit") ("minima") ("maiores") ("repudiandae") ("ipsam") ("obcaecati") ("ullam") ("enim") ("totam") ("delectus") ("ducimus") ("quis") ("voluptates") ("dolores") ("molestiae") ("harum") ("dolorem") ("quia") ("voluptatem") ("molestias") ("magni") ("distinctio") ("omnis") ("illum") ("dolorum") ("voluptatum") ("ea") ("quas") ("quam") ("corporis") ("quae") ("blanditiis") ("atque") ("deserunt") ("laboriosam") ("earum") ("consequuntur") ("hic") ("cupiditate") ("quibusdam") ("accusamus") ("ut") ("rerum") ("error") ("minus") ("eius") ("ab") ("ad") ("nemo") ("fugit") ("officia") ("at") ("in") ("id") ("quos") ("reprehenderit") ("numquam") ("iste") ("fugiat") ("sit") ("inventore") ("beatae") ("repellendus") ("magnam") ("recusandae") ("quod") ("explicabo") ("doloremque") ("aperiam") ("consequatur") ("asperiores") ("commodi") ("optio") ("dolor") ("labore") ("temporibus") ("repellat") ("veniam") ("architecto") ("est") ("esse") ("mollitia") ("nulla") ("a") ("similique") ("eos") ("alias") ("dolore") ("tenetur") ("deleniti") ("porro") ("facere") ("maxime") ("corrupti"))
            xCOMMON_WORDS.write (((unsupported)).apply ("lorem") ("ipsum") ("dolor") ("sit") ("amet") ("consectetur") ("adipisicing") ("elit") ("sed") ("do") ("eiusmod") ("tempor") ("incididunt") ("ut") ("labore") ("et") ("dolore") ("magna") ("aliqua"))
            xsentence.write
              []
                memory > xs
                memory > xsections
                seq > @
                  seq
                    (((unsupported)).apply)
                    xsections.write (((unsupported)).apply ((((" ".xjoin)).apply (((((xrandom).xsample)).apply ((xWORDS)) (((((xrandom).xrandint)).apply (3) (12))))))) ((xi)) ((((xrange)).apply (((((xrandom).xrandint)).apply (1) (5))))))
                    xs.write (((", ".xjoin)).apply ((xsections)))
                    (((unsupported)).apply (("%s%s%s".mod (((unsupported)).apply (((((((unsupported)).apply ((xs)) (0)).xupper)).apply)) ((((unsupported)).apply ((xs)) ((((unsupported)).apply (1))))) (((((xrandom).xchoice)).apply ("?.")))))))
            xparagraph.write
              []
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((" ".xjoin)).apply ((((unsupported)).apply ((((xsentence)).apply)) ((xi)) ((((xrange)).apply (((((xrandom).xrandint)).apply (1) (4))))))))))
            xparagraphs.write
              [xcount xcommon]
                memory > xparas
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xparas.write (((unsupported)).apply)
                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((xcount)))))
                      ((xcommon).and ((xi).eq 0)).if
                        bogusForceDataize.write ((((xparas).xappend)).apply ((xCOMMON_P)))
                        bogusForceDataize.write ((((xparas).xappend)).apply ((((xparagraph)).apply)))
                    (((unsupported)).apply ((xparas)))
            xwords.write
              [xcount xcommon]
                memory > xc
                memory > xword_list
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xword_list.write ((xcommon).if (((xlist)).apply ((xCOMMON_WORDS))) (((unsupported)).apply))
                    xc.write (((xlen)).apply ((xword_list)))
                    ((xcount).greater (xc)).if
                      seq
                        (((unsupported)).apply ((xcount)) ((xc)))
                        while.
                          ((xcount).greater 0)
                          [unused]
                            seq > @
                              seq
                                xc.write (((xmin)).apply ((xcount)) ((((xlen)).apply ((xWORDS)))))
                                (((unsupported)).apply ((xcount)) ((xc)))
                                (((unsupported)).apply ((xword_list)) (((((xrandom).xsample)).apply ((xWORDS)) ((xc)))))
                      xword_list.write (((unsupported)).apply ((xword_list)) ((((unsupported)).apply ((xcount)))))
                    (((unsupported)).apply ((((" ".xjoin)).apply ((xword_list)))))