memory > xk
memory > xDEFAULT_TIMEOUT
memory > xstr
memory > xvalue
memory > xKeyError
memory > xpymemcache
memory > xtime
memory > xbool
memory > xmemcache_key_warnings
memory > xv
memory > xserver
memory > xwarning
memory > xisinstance
memory > xkey
memory > xBaseMemcachedCache
memory > xValueError
memory > xBaseCache
memory > xInvalidCacheKey
memory > xint
memory > xre
memory > xsuper
memory > xpylibmc
[] > memcached
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdelete
        memory > xget
        memory > x_cache
        memory > xclear
        memory > xincr
        memory > xtouch
        memory > xclient_servers
        memory > x__init__
        memory > xadd
        memory > xvalidate_key
        memory > xget_backend_timeout
        memory > xclose
        memory > xset_many
        memory > xdelete_many
        memory > xget_many
        memory > xset
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xBaseCache)))
              seq
                x__init__.write
                  [xself xserver xparams xlibrary xvalue_not_found_exception]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xparams)))
                        (((xisinstance)).apply ((xserver)) ((xstr))).if
                          (((unsupported)).apply (((xself).x_servers)) (((((xre).xsplit)).apply ("[;,]") ((xserver)))))
                          (((unsupported)).apply (((xself).x_servers)) ((xserver)))
                        (((unsupported)).apply (((xself).xLibraryValueNotFoundException)) ((xvalue_not_found_exception)))
                        (((unsupported)).apply (((xself).x_lib)) ((xlibrary)))
                        (((unsupported)).apply (((xself).x_class)) (((xlibrary).xClient)))
                        (((unsupported)).apply (((xself).x_options)) ((((((xparams).xget)).apply ("OPTIONS")).or (((unsupported)).apply))))
                xclient_servers.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_servers)))
                x_cache.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).x_class)).apply (((xself).xclient_servers)) ((((unsupported)).apply (((xself).x_options)))))))
                xget_backend_timeout.write
                  [xself xtimeout]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((xtimeout).eq (xDEFAULT_TIMEOUT)).if
                          xtimeout.write ((xself).xdefault_timeout)
                        (((unsupported)).apply ((xtimeout)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (0))
                          ((((xint)).apply ((xtimeout))).eq 0).if
                            xtimeout.write (1.neg)
                        ((xtimeout).greater 2592000).if
                          (((unsupported)).apply ((xtimeout)) ((((xint)).apply (((((xtime).xtime)).apply)))))
                        (((unsupported)).apply ((((xint)).apply ((xtimeout)))))
                xadd.write
                  [xself xkey xvalue xtimeout xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((((xself).x_cache).xadd)).apply ((xkey)) ((xvalue)) (((((xself).xget_backend_timeout)).apply ((xtimeout)))))))
                xget.write
                  [xself xkey xdefault xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((((xself).x_cache).xget)).apply ((xkey)) ((xdefault)))))
                xset.write
                  [xself xkey xvalue xtimeout xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        ((((((xself).x_cache).xset)).apply ((xkey)) ((xvalue)) (((((xself).xget_backend_timeout)).apply ((xtimeout))))).not).if
                          bogusForceDataize.write (((((xself).x_cache).xdelete)).apply ((xkey)))
                xtouch.write
                  [xself xkey xtimeout xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((xbool)).apply ((((((xself).x_cache).xtouch)).apply ((xkey)) (((((xself).xget_backend_timeout)).apply ((xtimeout)))))))))
                xdelete.write
                  [xself xkey xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply ((((xbool)).apply ((((((xself).x_cache).xdelete)).apply ((xkey)))))))
                xget_many.write
                  [xself xkeys xversion]
                    memory > xret
                    memory > xkey_map
                    seq > @
                      (((unsupported)).apply)
                        xkey_map.write (((unsupported)).apply ((((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))) ((xkey)) ((xkey)) ((xkeys)))
                        xret.write (((((xself).x_cache).xget_multi)).apply (((((xkey_map).xkeys)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkey_map)) ((xk)))) ((xv)) ((((unsupported)).apply ((xk)) ((xv)))) (((((xret).xitems)).apply)))))
                xclose.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).x_cache).xdisconnect_all)).apply)
                xincr.write
                  [xself xkey xdelta xversion]
                    memory > xval
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        (((unsupported)).apply (((xself).xLibraryValueNotFoundException)))
                          ((xdelta).less 0).if
                            xval.write (((((xself).x_cache).xdecr)).apply ((xkey)) (((xdelta).neg)))
                            xval.write (((((xself).x_cache).xincr)).apply ((xkey)) ((xdelta)))
                          xval.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xval)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xValueError)).apply (("Key '%s' not found".mod (xkey))))))
                        (((unsupported)).apply ((xval)))
                xset_many.write
                  [xself xdata xtimeout xversion]
                    memory > xoriginal_keys
                    memory > xsafe_data
                    memory > xfailed_keys
                    memory > xsafe_key
                    seq > @
                      (((unsupported)).apply)
                        xsafe_data.write (((unsupported)).apply)
                        xoriginal_keys.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xdata).xitems)).apply)))
                          seq
                            xsafe_key.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                            (((unsupported)).apply ((((unsupported)).apply ((xsafe_data)) ((xsafe_key)))) ((xvalue)))
                            (((unsupported)).apply ((((unsupported)).apply ((xoriginal_keys)) ((xsafe_key)))) ((xkey)))
                        xfailed_keys.write (((((xself).x_cache).xset_multi)).apply ((xsafe_data)) (((((xself).xget_backend_timeout)).apply ((xtimeout)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoriginal_keys)) ((xk)))) ((xk)) ((xfailed_keys)))))
                xdelete_many.write
                  [xself xkeys xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkeys.write (((unsupported)).apply ((((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))) ((xkey)) ((xkeys)))
                        bogusForceDataize.write (((((xself).x_cache).xdelete_multi)).apply ((xkeys)))
                xclear.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).x_cache).xflush_all)).apply)
                xvalidate_key.write
                  [xself xkey]
                    seq > @
                      (((unsupported)).apply ((xwarning)) ((((xmemcache_key_warnings)).apply ((xkey)))))
                        (((unsupported)).apply ((((xInvalidCacheKey)).apply ((xwarning)))))
            (((unsupported)).apply ((xBaseMemcachedCache)))
              seq
                unsupported
                x__init__.write
                  [xself xserver xparams]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xserver)) ((xparams)) ((xpylibmc)) (((xpylibmc).xNotFound)))
                xclient_servers.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((unsupported)).apply)
                        (((unsupported)).apply ((xserver)) (((xself).x_servers)))
                          bogusForceDataize.write ((((xoutput).xappend)).apply ((((((xserver).xstartswith)).apply ("unix:")).if (((unsupported)).apply ((xserver)) ((((unsupported)).apply (5)))) (xserver))))
                        (((unsupported)).apply ((xoutput)))
                xtouch.write
                  [xself xkey xtimeout xversion]
                    seq > @
                      (((unsupported)).apply)
                        xkey.write (((unsupported)).apply (((xself).xmake_and_validate_key)) ((xkey)) ((xversion)))
                        ((xtimeout).eq 0).if
                          (((unsupported)).apply ((((((xself).x_cache).xdelete)).apply ((xkey)))))
                        (((unsupported)).apply ((((((xself).x_cache).xtouch)).apply ((xkey)) (((((xself).xget_backend_timeout)).apply ((xtimeout)))))))
                xclose.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply ((xBaseMemcachedCache)))
              seq
                unsupported
                x__init__.write
                  [xself xserver xparams]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xserver)) ((xparams)) ((xpymemcache)) ((xKeyError)))
                        (((unsupported)).apply (((xself).x_class)) ((((xself).x_lib).xHashClient)))
                        (((unsupported)).apply (((xself).x_options)) ((((unsupported)).apply ("allow_unicode_keys") (TRUE) ("default_noreply") (FALSE) ("serde") ((((xpymemcache).xserde).xpickle_serde)) (((xself).x_options)))))