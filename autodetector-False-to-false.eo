memory > xc
memory > xValueError
memory > xstr
memory > xfields
memory > xmigrations
memory > xsorted
memory > xremoved_base_field
memory > xd
memory > xapp
memory > xthrough_app_label
memory > xfalse
memory > xMigrationQuestioner
memory > xfield
memory > xoperations
memory > xto_field
memory > xCOMPILED_REGEX_TYPE
memory > xlist
memory > xindex
memory > xrem_model_name
memory > xthrough_object_name
memory > xenumerate
memory > xresolve_relation
memory > xbase_name
memory > xis_swappable_dep
memory > xstable_topological_sort
memory > xresolved_object_name
memory > xrem_field_name
memory > xremote_model_name
memory > xMigration
memory > xfrom_field
memory > xrelated_field
memory > xops
memory > xvalue
memory > xapp_label
memory > xdep
memory > xrelations
memory > xbase
memory > xop2
memory > xfoo_togethers
memory > xobject_name
memory > xtype
memory > xcallable
memory > xpath
memory > xother_operation
memory > xany
memory > xleaf
memory > xset
memory > xsettings
memory > xint
memory > xre
memory > xhasattr
memory > xunique
memory > xnew_value
memory > xsum
memory > xx
memory > xmigration
memory > xi
memory > xdep_app_label
memory > xremote_app_label
memory > xchain
memory > xold_value
memory > xm1
memory > xtuple
memory > xAlterModelOptions
memory > xalt_indexes
memory > xargs
memory > xMigrationOptimizer
memory > xalt_constraints
memory > xrelated_model_key
memory > xLookupError
memory > xmodel_name
memory > xRegexObject
memory > xgetattr
memory > xoperation
memory > xrelated_field_name
memory > xsquashed_match
memory > xconstraint
memory > xname
memory > xzip
memory > xidx
memory > xy
memory > xmodels
memory > xrem_app_label
memory > xn
memory > xrelation_related_fields
memory > xmodel_state
memory > xm2
memory > xmodel
memory > xop
memory > xdependencies
memory > xkwargs
memory > xisinstance
memory > xfield_name
memory > xfunctools
memory > xlen
memory > xresolved_app_label
memory > xdict
memory > xbase_app_label
memory > xkey
memory > xrelated_object_app_label
[] > autodetector
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_detect_changes
        memory > xgenerate_altered_db_table
        memory > xgenerate_deleted_models
        memory > xgenerate_altered_index_together
        memory > xgenerate_removed_fields
        memory > x_generate_added_field
        memory > xchanges
        memory > x__init__
        memory > x_build_migration_list
        memory > xcreate_altered_indexes
        memory > xdeep_deconstruct
        memory > xgenerate_renamed_models
        memory > xgenerate_created_proxies
        memory > xcheck_dependency
        memory > x_generate_removed_altered_foo_together
        memory > xgenerate_added_constraints
        memory > x_generate_altered_foo_together
        memory > xgenerate_altered_managers
        memory > xgenerate_removed_constraints
        memory > xgenerate_removed_altered_index_together
        memory > xgenerate_added_indexes
        memory > xgenerate_altered_unique_together
        memory > x_sort_migrations
        memory > xswappable_first_key
        memory > xgenerate_altered_fields
        memory > xonly_relation_agnostic_fields
        memory > xgenerate_renamed_fields
        memory > xgenerate_added_fields
        memory > xadd_operation
        memory > x_prepare_field_lists
        memory > xgenerate_removed_indexes
        memory > xgenerate_altered_order_with_respect_to
        memory > x_generate_removed_field
        memory > x_get_dependencies_for_foreign_key
        memory > x_optimize_migrations
        memory > x_trim_to_apps
        memory > x_resolve_dependency
        memory > xarrange_for_graph
        memory > xcreate_altered_constraints
        memory > x_get_altered_foo_together_operations
        memory > xgenerate_removed_altered_unique_together
        memory > xparse_number
        memory > xgenerate_deleted_proxies
        memory > x_generate_through_model_map
        memory > xgenerate_altered_options
        memory > xgenerate_created_models
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfrom_state xto_state xquestioner]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfrom_state)) ((xfrom_state)))
                        (((unsupported)).apply (((xself).xto_state)) ((xto_state)))
                        (((unsupported)).apply (((xself).xquestioner)) (((xquestioner).or (((xMigrationQuestioner)).apply))))
                        (((unsupported)).apply (((xself).xexisting_apps)) ((((unsupported)).apply ((xapp)) ((((unsupported)).apply ((xapp)) ((xmodel)))) (((xfrom_state).xmodels)))))
                xchanges.write
                  [xself xgraph xtrim_to_apps xconvert_apps xmigration_name]
                    memory > xchanges
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xchanges.write ((((xself).x_detect_changes)).apply ((xconvert_apps)) ((xgraph)))
                        xchanges.write ((((xself).xarrange_for_graph)).apply ((xchanges)) ((xgraph)) ((xmigration_name)))
                        (xtrim_to_apps).if
                          xchanges.write ((((xself).x_trim_to_apps)).apply ((xchanges)) ((xtrim_to_apps)))
                        (((unsupported)).apply ((xchanges)))
                xdeep_deconstruct.write
                  [xself xobj]
                    memory > xdeconstructed
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xisinstance)).apply ((xobj)) ((xlist))).if
                          (((unsupported)).apply ((((unsupported)).apply (((((xself).xdeep_deconstruct)).apply ((xvalue)))) ((xvalue)) ((xobj)))))
                          (((xisinstance)).apply ((xobj)) ((xtuple))).if
                            (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply (((((xself).xdeep_deconstruct)).apply ((xvalue)))) ((xvalue)) ((xobj)))))))
                            (((xisinstance)).apply ((xobj)) ((xdict))).if
                              (((unsupported)).apply ((((unsupported)).apply ((xkey)) (((((xself).xdeep_deconstruct)).apply ((xvalue)))) ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xobj).xitems)).apply)))))
                              (((xisinstance)).apply ((xobj)) (((xfunctools).xpartial))).if
                                (((unsupported)).apply ((((unsupported)).apply (((xobj).xfunc)) (((((xself).xdeep_deconstruct)).apply (((xobj).xargs)))) (((((xself).xdeep_deconstruct)).apply (((xobj).xkeywords)))))))
                                (((xisinstance)).apply ((xobj)) ((xCOMPILED_REGEX_TYPE))).if
                                  (((unsupported)).apply ((((xRegexObject)).apply ((xobj)))))
                                  (((xisinstance)).apply ((xobj)) ((xtype))).if
                                    (((unsupported)).apply ((xobj)))
                                    (((xhasattr)).apply ((xobj)) ("deconstruct")).if
                                      seq
                                        xdeconstructed.write ((((xobj).xdeconstruct)).apply)
                                        (((xisinstance)).apply ((xobj)) (((xmodels).xField))).if
                                          xdeconstructed.write (((unsupported)).apply ((xdeconstructed)) ((((unsupported)).apply (1))))
                                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) ((xdeconstructed)))
                                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((((unsupported)).apply (((((xself).xdeep_deconstruct)).apply ((xvalue)))) ((xvalue)) ((xargs)))) ((((unsupported)).apply ((xkey)) (((((xself).xdeep_deconstruct)).apply ((xvalue)))) ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xkwargs).xitems)).apply)))))))
                                      (((unsupported)).apply ((xobj)))
                xonly_relation_agnostic_fields.write
                  [xself xfields]
                    memory > xfields_def
                    memory > xdeconstruction
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfields_def.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xfield)))) ((((xsorted)).apply (((((xfields).xitems)).apply)))))
                          seq
                            xdeconstruction.write ((((xself).xdeep_deconstruct)).apply ((xfield)))
                            (((xfield).xremote_field).and (((xfield).xremote_field).xmodel)).if
                              bogusForceDataize.write ((((((unsupported)).apply ((xdeconstruction)) (2)).xpop)).apply ("to") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xfields_def).xappend)).apply ((xdeconstruction)))
                        (((unsupported)).apply ((xfields_def)))
                x_detect_changes.write
                  [xself xconvert_apps xgraph]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xgenerated_operations)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xaltered_indexes)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xaltered_constraints)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xold_model_keys)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xold_proxy_keys)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xold_unmanaged_keys)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xnew_model_keys)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xnew_proxy_keys)) ((((xset)).apply)))
                        (((unsupported)).apply (((xself).xnew_unmanaged_keys)) ((((xset)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_state)))) (((((((xself).xfrom_state).xmodels).xitems)).apply)))
                          ((((((xmodel_state).xoptions).xget)).apply ("managed") (TRUE)).not).if
                            bogusForceDataize.write (((((xself).xold_unmanaged_keys).xadd)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            (((unsupported)).apply ((xapp_label)) ((((xself).xfrom_state).xreal_apps))).if
                              (((((xmodel_state).xoptions).xget)).apply ("proxy")).if
                                bogusForceDataize.write (((((xself).xold_proxy_keys).xadd)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                                bogusForceDataize.write (((((xself).xold_model_keys).xadd)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_state)))) (((((((xself).xto_state).xmodels).xitems)).apply)))
                          ((((((xmodel_state).xoptions).xget)).apply ("managed") (TRUE)).not).if
                            bogusForceDataize.write (((((xself).xnew_unmanaged_keys).xadd)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            ((((unsupported)).apply ((xapp_label)) ((((xself).xfrom_state).xreal_apps))).or ((xconvert_apps).and (((unsupported)).apply ((xapp_label)) ((xconvert_apps))))).if
                              (((((xmodel_state).xoptions).xget)).apply ("proxy")).if
                                bogusForceDataize.write (((((xself).xnew_proxy_keys).xadd)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                                bogusForceDataize.write (((((xself).xnew_model_keys).xadd)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                        bogusForceDataize.write (((((xself).xfrom_state).xresolve_fields_and_relations)).apply)
                        bogusForceDataize.write (((((xself).xto_state).xresolve_fields_and_relations)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_renamed_models)).apply)
                        bogusForceDataize.write ((((xself).x_prepare_field_lists)).apply)
                        bogusForceDataize.write ((((xself).x_generate_through_model_map)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_deleted_models)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_created_models)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_deleted_proxies)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_created_proxies)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_altered_options)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_altered_managers)).apply)
                        bogusForceDataize.write ((((xself).xcreate_altered_indexes)).apply)
                        bogusForceDataize.write ((((xself).xcreate_altered_constraints)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_removed_constraints)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_removed_indexes)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_renamed_fields)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_removed_altered_unique_together)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_removed_altered_index_together)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_removed_fields)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_added_fields)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_altered_fields)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_altered_order_with_respect_to)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_altered_unique_together)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_altered_index_together)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_added_indexes)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_added_constraints)).apply)
                        bogusForceDataize.write ((((xself).xgenerate_altered_db_table)).apply)
                        bogusForceDataize.write ((((xself).x_sort_migrations)).apply)
                        bogusForceDataize.write ((((xself).x_build_migration_list)).apply ((xgraph)))
                        bogusForceDataize.write ((((xself).x_optimize_migrations)).apply)
                        (((unsupported)).apply (((xself).xmigrations)))
                x_prepare_field_lists.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xkept_model_keys)) ((((xself).xold_model_keys).and ((xself).xnew_model_keys))))
                        (((unsupported)).apply (((xself).xkept_proxy_keys)) ((((xself).xold_proxy_keys).and ((xself).xnew_proxy_keys))))
                        (((unsupported)).apply (((xself).xkept_unmanaged_keys)) ((((xself).xold_unmanaged_keys).and ((xself).xnew_unmanaged_keys))))
                        (((unsupported)).apply (((xself).xthrough_users)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xold_field_keys)) ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) (((xself).xkept_model_keys)) ((xfield_name)) (((((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name))))))).xfields)))))
                        (((unsupported)).apply (((xself).xnew_field_keys)) ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) (((xself).xkept_model_keys)) ((xfield_name)) (((((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name))))).xfields)))))
                x_generate_through_model_map.write
                  [xself]
                    memory > xthrough_key
                    memory > xold_model_state
                    memory > xold_model_name
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply (((xself).xold_model_keys)))))
                          seq
                            xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                            xold_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xfield)))) ((((((xold_model_state).xfields).xitems)).apply)))
                              ((((xhasattr)).apply ((xfield)) ("remote_field")).and (((xgetattr)).apply (((xfield).xremote_field)) ("through") ("None: is there a None literal in the EO language?"))).if
                                seq
                                  xthrough_key.write (((xresolve_relation)).apply ((((xfield).xremote_field).xthrough)) ((xapp_label)) ((xmodel_name)))
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).xthrough_users)) ((xthrough_key)))) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)) ((xfield_name)))))
                x_resolve_dependency.write
                  [xdependency]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        ((((unsupported)).apply ((xdependency)) (0)).neq "__setting__").if
                          (((unsupported)).apply ((((unsupported)).apply ((xdependency)) ((xfalse)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xresolved_app_label)) ((xresolved_object_name)))) (((((((xgetattr)).apply ((xsettings)) ((((unsupported)).apply ((xdependency)) (1)))).xsplit)).apply ("."))))
                        (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply ((xresolved_app_label)) (((((xresolved_object_name).xlower)).apply))).add (((unsupported)).apply ((xdependency)) ((((unsupported)).apply (2)))))) (TRUE))))
                x_build_migration_list.write
                  [xself xgraph]
                    memory > xchop_mode
                    memory > xinstance
                    memory > xnew_num_ops
                    memory > xoriginal_dep
                    memory > xchopped
                    memory > xdependencies
                    memory > xdeps_satisfied
                    memory > xnum_ops
                    memory > xoperation_dependencies
                    memory > xsubclass
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmigrations)) ((((unsupported)).apply)))
                        xnum_ops.write (((xsum)).apply ((((unsupported)).apply ((((xlen)).apply ((xx)))) ((xx)) ((((((xself).xgenerated_operations).xvalues)).apply)))))
                        xchop_mode.write (xfalse)
                        while.
                          (xnum_ops)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((xapp_label)) ((((xsorted)).apply (((xself).xgenerated_operations)))))
                                  seq
                                    xchopped.write (((unsupported)).apply)
                                    xdependencies.write (((xset)).apply)
                                    (((unsupported)).apply ((xoperation)) ((((xlist)).apply ((((unsupported)).apply (((xself).xgenerated_operations)) ((xapp_label)))))))
                                      seq
                                        xdeps_satisfied.write TRUE
                                        xoperation_dependencies.write (((xset)).apply)
                                        (((unsupported)).apply ((xdep)) (((xoperation).x_auto_deps)))
                                          seq
                                            xoriginal_dep.write (xdep)
                                            (((unsupported)).apply ((((unsupported)).apply ((xdep)) ((xis_swappable_dep)))) (((((xself).x_resolve_dependency)).apply ((xdep)))))
                                            ((((unsupported)).apply ((xdep)) (0)).neq (xapp_label)).if
                                              seq
                                                (((unsupported)).apply ((xother_operation)) ((((((xself).xgenerated_operations).xget)).apply ((((unsupported)).apply ((xdep)) (0))) ((((unsupported)).apply)))))
                                                  ((((xself).xcheck_dependency)).apply ((xother_operation)) ((xdep))).if
                                                    seq
                                                      xdeps_satisfied.write (xfalse)
                                                      (((unsupported)).apply)
                                                ((xdeps_satisfied).not).if
                                                  (((unsupported)).apply)
                                                  (xis_swappable_dep).if
                                                    bogusForceDataize.write ((((xoperation_dependencies).xadd)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoriginal_dep)) (0))) ((((unsupported)).apply ((xoriginal_dep)) (1))))))
                                                    (((unsupported)).apply ((((unsupported)).apply ((xdep)) (0))) (((xself).xmigrations))).if
                                                      bogusForceDataize.write ((((xoperation_dependencies).xadd)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdep)) (0))) (((((unsupported)).apply ((((unsupported)).apply (((xself).xmigrations)) ((((unsupported)).apply ((xdep)) (0))))) ((1.neg))).xname)))))
                                                      (xchop_mode).if
                                                        ((xgraph).and ((((xgraph).xleaf_nodes)).apply ((((unsupported)).apply ((xdep)) (0))))).if
                                                          bogusForceDataize.write ((((xoperation_dependencies).xadd)).apply ((((unsupported)).apply (((((xgraph).xleaf_nodes)).apply ((((unsupported)).apply ((xdep)) (0))))) (0))))
                                                          bogusForceDataize.write ((((xoperation_dependencies).xadd)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdep)) (0))) ("__first__"))))
                                                        xdeps_satisfied.write (xfalse)
                                        (xdeps_satisfied).if
                                          seq
                                            bogusForceDataize.write ((((xchopped).xappend)).apply ((xoperation)))
                                            bogusForceDataize.write ((((xdependencies).xupdate)).apply ((xoperation_dependencies)))
                                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xgenerated_operations)) ((xapp_label)))) (0))))))
                                          (((unsupported)).apply)
                                    ((xdependencies).or (xchopped)).if
                                      (((((unsupported)).apply (((xself).xgenerated_operations)) ((xapp_label))).not).or (xchop_mode)).if
                                        seq
                                          xsubclass.write (((xtype)).apply ("Migration") ((((unsupported)).apply ((xMigration)))) ((((unsupported)).apply ("operations") ((((unsupported)).apply)) ("dependencies") ((((unsupported)).apply)))))
                                          xinstance.write (((xsubclass)).apply (("auto_%i".mod ((((xlen)).apply ((((((xself).xmigrations).xget)).apply ((xapp_label)) ((((unsupported)).apply))))).add 1))) ((xapp_label)))
                                          (((unsupported)).apply (((xinstance).xdependencies)) ((((xlist)).apply ((xdependencies)))))
                                          (((unsupported)).apply (((xinstance).xoperations)) ((xchopped)))
                                          (((unsupported)).apply (((xinstance).xinitial)) ((((unsupported)).apply ((xapp_label)) (((xself).xexisting_apps)))))
                                          bogusForceDataize.write ((((((((xself).xmigrations).xsetdefault)).apply ((xapp_label)) ((((unsupported)).apply))).xappend)).apply ((xinstance)))
                                          xchop_mode.write (xfalse)
                                        (((unsupported)).apply ((((unsupported)).apply (((xself).xgenerated_operations)) ((xapp_label)))) (((xchopped).add (((unsupported)).apply (((xself).xgenerated_operations)) ((xapp_label))))))
                                xnew_num_ops.write (((xsum)).apply ((((unsupported)).apply ((((xlen)).apply ((xx)))) ((xx)) ((((((xself).xgenerated_operations).xvalues)).apply)))))
                                ((xnew_num_ops).eq (xnum_ops)).if
                                  ((xchop_mode).not).if
                                    xchop_mode.write TRUE
                                    (((unsupported)).apply ((((xValueError)).apply (("Cannot resolve operation dependencies: %r".mod ((xself).xgenerated_operations))))))
                                xnum_ops.write (xnew_num_ops)
                x_sort_migrations.write
                  [xself]
                    memory > xdependency_graph
                    memory > xdep
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xops)))) ((((xsorted)).apply ((((((xself).xgenerated_operations).xitems)).apply)))))
                          seq
                            xdependency_graph.write (((unsupported)).apply ((xop)) ((((xset)).apply)) ((xop)) ((xops)))
                            (((unsupported)).apply ((xop)) ((xops)))
                              (((unsupported)).apply ((xdep)) (((xop).x_auto_deps)))
                                seq
                                  xdep.write (((unsupported)).apply (((((xself).x_resolve_dependency)).apply ((xdep)))) (0))
                                  ((((unsupported)).apply ((xdep)) (0)).eq (xapp_label)).if
                                    (((unsupported)).apply ((xop2)) ((xops)))
                                      ((((xself).xcheck_dependency)).apply ((xop2)) ((xdep))).if
                                        bogusForceDataize.write ((((((unsupported)).apply ((xdependency_graph)) ((xop))).xadd)).apply ((xop2)))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xgenerated_operations)) ((xapp_label)))) ((((xstable_topological_sort)).apply ((xops)) ((xdependency_graph)))))
                x_optimize_migrations.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmigrations)))) ((((((xself).xmigrations).xitems)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((xm1)) ((xm2)))) ((((xzip)).apply ((xmigrations)) ((((unsupported)).apply ((xmigrations)) ((((unsupported)).apply (1))))))))
                            bogusForceDataize.write (((((xm2).xdependencies).xappend)).apply ((((unsupported)).apply ((xapp_label)) (((xm1).xname)))))
                        (((unsupported)).apply ((xmigrations)) ((((((xself).xmigrations).xvalues)).apply)))
                          (((unsupported)).apply ((xmigration)) ((xmigrations)))
                            (((unsupported)).apply (((xmigration).xdependencies)) ((((xlist)).apply ((((xset)).apply (((xmigration).xdependencies)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmigrations)))) ((((((xself).xmigrations).xitems)).apply)))
                          (((unsupported)).apply ((xmigration)) ((xmigrations)))
                            (((unsupported)).apply (((xmigration).xoperations)) (((((((xMigrationOptimizer)).apply).xoptimize)).apply (((xmigration).xoperations)) ((xapp_label)))))
                xcheck_dependency.write
                  [xself xoperation xdependency]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((unsupported)).apply ((((unsupported)).apply ((xdependency)) (2))) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((((unsupported)).apply ((xdependency)) (3))) (TRUE))).if
                          (((unsupported)).apply (((((xisinstance)).apply ((xoperation)) (((xoperations).xCreateModel))).and (((xoperation).xname_lower).eq ((((((unsupported)).apply ((xdependency)) (1)).xlower)).apply)))))
                          ((((unsupported)).apply ((((unsupported)).apply ((xdependency)) (2))) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((((unsupported)).apply ((xdependency)) (3))) (TRUE))).if
                            (((unsupported)).apply (((((((xisinstance)).apply ((xoperation)) (((xoperations).xCreateModel))).and (((xoperation).xname_lower).eq ((((((unsupported)).apply ((xdependency)) (1)).xlower)).apply))).and (((xany)).apply ((((unsupported)).apply (((((unsupported)).apply ((xdependency)) (2)).eq (xx))) ((((unsupported)).apply ((xx)) ((xy)))) (((xoperation).xfields)))))).or (((((xisinstance)).apply ((xoperation)) (((xoperations).xAddField))).and (((xoperation).xmodel_name_lower).eq ((((((unsupported)).apply ((xdependency)) (1)).xlower)).apply))).and (((xoperation).xname_lower).eq ((((((unsupported)).apply ((xdependency)) (2)).xlower)).apply))))))
                            ((((unsupported)).apply ((((unsupported)).apply ((xdependency)) (2))) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((((unsupported)).apply ((xdependency)) (3))) ((xfalse)))).if
                              (((unsupported)).apply ((((((xisinstance)).apply ((xoperation)) (((xoperations).xRemoveField))).and (((xoperation).xmodel_name_lower).eq ((((((unsupported)).apply ((xdependency)) (1)).xlower)).apply))).and (((xoperation).xname_lower).eq ((((((unsupported)).apply ((xdependency)) (2)).xlower)).apply)))))
                              ((((unsupported)).apply ((((unsupported)).apply ((xdependency)) (2))) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((((unsupported)).apply ((xdependency)) (3))) ((xfalse)))).if
                                (((unsupported)).apply (((((xisinstance)).apply ((xoperation)) (((xoperations).xDeleteModel))).and (((xoperation).xname_lower).eq ((((((unsupported)).apply ((xdependency)) (1)).xlower)).apply)))))
                                ((((unsupported)).apply ((((unsupported)).apply ((xdependency)) (2))) ("None: is there a None literal in the EO language?")).and ((((unsupported)).apply ((xdependency)) (3)).eq "alter")).if
                                  (((unsupported)).apply ((((((xisinstance)).apply ((xoperation)) (((xoperations).xAlterField))).and (((xoperation).xmodel_name_lower).eq ((((((unsupported)).apply ((xdependency)) (1)).xlower)).apply))).and (((xoperation).xname_lower).eq ((((((unsupported)).apply ((xdependency)) (2)).xlower)).apply)))))
                                  ((((unsupported)).apply ((((unsupported)).apply ((xdependency)) (2))) ("None: is there a None literal in the EO language?")).and ((((unsupported)).apply ((xdependency)) (3)).eq "order_wrt_unset")).if
                                    (((unsupported)).apply ((((((xisinstance)).apply ((xoperation)) (((xoperations).xAlterOrderWithRespectTo))).and (((xoperation).xname_lower).eq ((((((unsupported)).apply ((xdependency)) (1)).xlower)).apply))).and (((((((xoperation).xorder_with_respect_to).or "").xlower)).apply).neq ((((((unsupported)).apply ((xdependency)) (2)).xlower)).apply)))))
                                    ((((unsupported)).apply ((((unsupported)).apply ((xdependency)) (2))) ("None: is there a None literal in the EO language?")).and ((((unsupported)).apply ((xdependency)) (3)).eq "foo_together_change")).if
                                      (((unsupported)).apply (((((xisinstance)).apply ((xoperation)) ((((unsupported)).apply (((xoperations).xAlterUniqueTogether)) (((xoperations).xAlterIndexTogether))))).and (((xoperation).xname_lower).eq ((((((unsupported)).apply ((xdependency)) (1)).xlower)).apply)))))
                                      (((unsupported)).apply ((((xValueError)).apply (("Can't handle dependency %r".mod (((unsupported)).apply ((xdependency))))))))
                xadd_operation.write
                  [xself xapp_label xoperation xdependencies xbeginning]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xoperation).x_auto_deps)) (((xdependencies).or (((unsupported)).apply))))
                        (xbeginning).if
                          bogusForceDataize.write ((((((((xself).xgenerated_operations).xsetdefault)).apply ((xapp_label)) ((((unsupported)).apply))).xinsert)).apply (0) ((xoperation)))
                          bogusForceDataize.write ((((((((xself).xgenerated_operations).xsetdefault)).apply ((xapp_label)) ((((unsupported)).apply))).xappend)).apply ((xoperation)))
                xswappable_first_key.write
                  [xself xitem]
                    memory > xbase_names
                    memory > xmodel_state
                    memory > xstring_version
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xLookupError)))
                          seq
                            xmodel_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((xitem)))
                            xbase_names.write (((unsupported)).apply (((((xisinstance)).apply ((xbase)) ((xstr))).if (xbase) ((xbase).x__name__))) ((xbase)) (((xmodel_state).xbases)))
                            xstring_version.write ("%s.%s".mod (((unsupported)).apply ((((unsupported)).apply ((xitem)) (0))) ((((unsupported)).apply ((xitem)) (1)))))
                            ((((((((xmodel_state).xoptions).xget)).apply ("swappable")).or (((unsupported)).apply ("AbstractUser") ((xbase_names)))).or (((unsupported)).apply ("AbstractBaseUser") ((xbase_names)))).or ((((((xsettings).xAUTH_USER_MODEL).xlower)).apply).eq ((((xstring_version).xlower)).apply))).if
                              (((unsupported)).apply ((((unsupported)).apply (("___".add (((unsupported)).apply ((xitem)) (0)))) (("___".add (((unsupported)).apply ((xitem)) (1)))))))
                        (((unsupported)).apply ((xitem)))
                xgenerate_renamed_models.write
                  [xself]
                    memory > xrenamed_models_rel_key
                    memory > xrem_model_fields_def
                    memory > xfields
                    memory > xremoved_models
                    memory > xmodel_fields_def
                    memory > xrem_model_state
                    memory > xadded_models
                    memory > xmodel_state
                    memory > xdependencies
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xrenamed_models)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xrenamed_models_rel)) ((((unsupported)).apply)))
                        xadded_models.write (((xself).xnew_model_keys).sub ((xself).xold_model_keys))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply ((xadded_models)))))
                          seq
                            xmodel_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            xmodel_fields_def.write ((((xself).xonly_relation_agnostic_fields)).apply (((xmodel_state).xfields)))
                            xremoved_models.write (((xself).xold_model_keys).sub ((xself).xnew_model_keys))
                            (((unsupported)).apply ((((unsupported)).apply ((xrem_app_label)) ((xrem_model_name)))) ((xremoved_models)))
                              ((xrem_app_label).eq (xapp_label)).if
                                seq
                                  xrem_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xrem_app_label)) ((xrem_model_name)))))
                                  xrem_model_fields_def.write ((((xself).xonly_relation_agnostic_fields)).apply (((xrem_model_state).xfields)))
                                  ((xmodel_fields_def).eq (xrem_model_fields_def)).if
                                    (((((xself).xquestioner).xask_rename_model)).apply ((xrem_model_state)) ((xmodel_state))).if
                                      seq
                                        xdependencies.write (((unsupported)).apply)
                                        xfields.write ((((xlist)).apply ((((((xmodel_state).xfields).xvalues)).apply))).add (((unsupported)).apply (((xfield).xremote_field)) ((xrelations)) (((((((unsupported)).apply ((((xself).xto_state).xrelations)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name))))).xvalues)).apply)) ((xfield)) (((((xrelations).xvalues)).apply))))
                                        (((unsupported)).apply ((xfield)) ((xfields)))
                                          ((xfield).xis_relation).if
                                            bogusForceDataize.write ((((xdependencies).xextend)).apply (((((xself).x_get_dependencies_for_foreign_key)).apply ((xapp_label)) ((xmodel_name)) ((xfield)) (((xself).xto_state)))))
                                        (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xRenameModel)) (((xrem_model_state).xname)) (((xmodel_state).xname)))) ((xdependencies)))
                                        (((unsupported)).apply ((((unsupported)).apply (((xself).xrenamed_models)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))) ((xrem_model_name)))
                                        xrenamed_models_rel_key.write ("%s.%s".mod (((unsupported)).apply (((xrem_model_state).xapp_label)) (((xrem_model_state).xname_lower))))
                                        (((unsupported)).apply ((((unsupported)).apply (((xself).xrenamed_models_rel)) ((xrenamed_models_rel_key)))) (("%s.%s".mod (((unsupported)).apply (((xmodel_state).xapp_label)) (((xmodel_state).xname_lower))))))
                                        bogusForceDataize.write (((((xself).xold_model_keys).xremove)).apply ((((unsupported)).apply ((xrem_app_label)) ((xrem_model_name)))))
                                        bogusForceDataize.write (((((xself).xold_model_keys).xadd)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                                        (((unsupported)).apply)
                xgenerate_created_models.write
                  [xself]
                    memory > xall_added_models
                    memory > xconstraints
                    memory > xorder_with_respect_to
                    memory > xold_base_model_state
                    memory > xindex_together
                    memory > xrelations
                    memory > xindexes
                    memory > xadded_unmanaged_models
                    memory > xold_keys
                    memory > xprimary_key_rel
                    memory > xunique_together
                    memory > xremoved_base_fields
                    memory > xrelated_model_state
                    memory > xrelated_dependencies
                    memory > xnew_base_model_state
                    memory > xadded_models
                    memory > xrelated_fields
                    memory > xmodel_state
                    memory > xdependencies
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xold_keys.write (((xself).xold_model_keys).or ((xself).xold_unmanaged_keys))
                        xadded_models.write (((xself).xnew_model_keys).sub (xold_keys))
                        xadded_unmanaged_models.write (((xself).xnew_unmanaged_keys).sub (xold_keys))
                        xall_added_models.write (((xchain)).apply ((((unsupported)).apply ((xsorted)) ((xadded_models)) (((xself).xswappable_first_key)) (TRUE))) ((((unsupported)).apply ((xsorted)) ((xadded_unmanaged_models)) (((xself).xswappable_first_key)) (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xall_added_models)))
                          seq
                            xmodel_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            xrelated_fields.write (((unsupported)).apply)
                            xprimary_key_rel.write "None: is there a None literal in the EO language?"
                            (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xfield)))) ((((((xmodel_state).xfields).xitems)).apply)))
                              ((xfield).xremote_field).if
                                seq
                                  (((xfield).xremote_field).xmodel).if
                                    ((xfield).xprimary_key).if
                                      xprimary_key_rel.write (((xfield).xremote_field).xmodel)
                                      ((((xfield).xremote_field).xparent_link).not).if
                                        (((unsupported)).apply ((((unsupported)).apply ((xrelated_fields)) ((xfield_name)))) ((xfield)))
                                  (((xgetattr)).apply (((xfield).xremote_field)) ("through") ("None: is there a None literal in the EO language?")).if
                                    (((unsupported)).apply ((((unsupported)).apply ((xrelated_fields)) ((xfield_name)))) ((xfield)))
                            xindexes.write (((((xmodel_state).xoptions).xpop)).apply ("indexes"))
                            xconstraints.write (((((xmodel_state).xoptions).xpop)).apply ("constraints"))
                            xunique_together.write (((((xmodel_state).xoptions).xpop)).apply ("unique_together") ("None: is there a None literal in the EO language?"))
                            xindex_together.write (((((xmodel_state).xoptions).xpop)).apply ("index_together") ("None: is there a None literal in the EO language?"))
                            xorder_with_respect_to.write (((((xmodel_state).xoptions).xpop)).apply ("order_with_respect_to") ("None: is there a None literal in the EO language?"))
                            xdependencies.write (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ("None: is there a None literal in the EO language?") ((xfalse)))))
                            (((unsupported)).apply ((xbase)) (((xmodel_state).xbases)))
                              ((((xisinstance)).apply ((xbase)) ((xstr))).and (((unsupported)).apply (".") ((xbase)))).if
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xbase_app_label)) ((xbase_name)))) (((((xbase).xsplit)).apply (".") (1))))
                                  bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((xbase_app_label)) ((xbase_name)) ("None: is there a None literal in the EO language?") (TRUE))))
                                  xold_base_model_state.write ((((((xself).xfrom_state).xmodels).xget)).apply ((((unsupported)).apply ((xbase_app_label)) ((xbase_name)))))
                                  xnew_base_model_state.write ((((((xself).xto_state).xmodels).xget)).apply ((((unsupported)).apply ((xbase_app_label)) ((xbase_name)))))
                                  ((xold_base_model_state).and (xnew_base_model_state)).if
                                    seq
                                      xremoved_base_fields.write (((((((((xset)).apply (((xold_base_model_state).xfields))).xdifference)).apply (((xnew_base_model_state).xfields))).xintersection)).apply (((xmodel_state).xfields)))
                                      (((unsupported)).apply ((xremoved_base_field)) ((xremoved_base_fields)))
                                        bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((xbase_app_label)) ((xbase_name)) ((xremoved_base_field)) ((xfalse)))))
                            (xprimary_key_rel).if
                              bogusForceDataize.write ((((xdependencies).xappend)).apply (((((xresolve_relation)).apply ((xprimary_key_rel)) ((xapp_label)) ((xmodel_name))).add (((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE)))))
                            (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xCreateModel)) (((xmodel_state).xname)) ((((unsupported)).apply ((xd)) ((xd)) ((((((xmodel_state).xfields).xitems)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xd)) (0))) ((xrelated_fields)))))) (((xmodel_state).xoptions)) (((xmodel_state).xbases)) (((xmodel_state).xmanagers)))) ((xdependencies)) (TRUE))
                            ((((((xmodel_state).xoptions).xget)).apply ("managed") (TRUE)).not).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xfield)))) ((((xsorted)).apply (((((xrelated_fields).xitems)).apply)))))
                              seq
                                xdependencies.write ((((xself).x_get_dependencies_for_foreign_key)).apply ((xapp_label)) ((xmodel_name)) ((xfield)) (((xself).xto_state)))
                                bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ("None: is there a None literal in the EO language?") (TRUE))))
                                (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xAddField)) ((xmodel_name)) ((xname)) ((xfield)))) ((((xlist)).apply ((((xset)).apply ((xdependencies)))))))
                            (xorder_with_respect_to).if
                              (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterOrderWithRespectTo)) ((xmodel_name)) ((xorder_with_respect_to)))) ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xorder_with_respect_to)) (TRUE))) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ("None: is there a None literal in the EO language?") (TRUE))))))
                            xrelated_dependencies.write (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xname)) (TRUE))) ((xname)) ((((xsorted)).apply ((xrelated_fields)))))
                            bogusForceDataize.write ((((xrelated_dependencies).xappend)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ("None: is there a None literal in the EO language?") (TRUE))))
                            (((unsupported)).apply ((xindex)) ((xindexes)))
                              (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xAddIndex)) ((xmodel_name)) ((xindex)))) ((xrelated_dependencies)))
                            (((unsupported)).apply ((xconstraint)) ((xconstraints)))
                              (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xAddConstraint)) ((xmodel_name)) ((xconstraint)))) ((xrelated_dependencies)))
                            (xunique_together).if
                              (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterUniqueTogether)) ((xmodel_name)) ((xunique_together)))) ((xrelated_dependencies)))
                            (xindex_together).if
                              (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterIndexTogether)) ((xmodel_name)) ((xindex_together)))) ((xrelated_dependencies)))
                            xrelations.write (((xself).xto_state).xrelations)
                            (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) (((xself).xold_proxy_keys))).if
                              (((unsupported)).apply ((((unsupported)).apply ((xrelated_model_key)) ((xrelated_fields)))) (((((((unsupported)).apply ((xrelations)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name))))).xitems)).apply)))
                                seq
                                  xrelated_model_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((xrelated_model_key)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xrelated_field_name)) ((xrelated_field)))) (((((xrelated_fields).xitems)).apply)))
                                    (((unsupported)).apply (((xself).xadd_operation)) (((xrelated_model_state).xapp_label)) ((((unsupported)).apply (((xoperations).xAlterField)) (((xrelated_model_state).xname)) ((xrelated_field_name)) ((xrelated_field)))) ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ("None: is there a None literal in the EO language?") (TRUE))))))
                xgenerate_created_proxies.write
                  [xself]
                    memory > xdependencies
                    memory > xadded
                    memory > xmodel_state
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xadded.write (((xself).xnew_proxy_keys).sub ((xself).xold_proxy_keys))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply ((xadded)))))
                          seq
                            xmodel_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            (((unsupported)).apply ((((((xmodel_state).xoptions).xget)).apply ("proxy"))))
                            xdependencies.write (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ("None: is there a None literal in the EO language?") ((xfalse)))))
                            (((unsupported)).apply ((xbase)) (((xmodel_state).xbases)))
                              ((((xisinstance)).apply ((xbase)) ((xstr))).and (((unsupported)).apply (".") ((xbase)))).if
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xbase_app_label)) ((xbase_name)))) (((((xbase).xsplit)).apply (".") (1))))
                                  bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((xbase_app_label)) ((xbase_name)) ("None: is there a None literal in the EO language?") (TRUE))))
                            (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xCreateModel)) (((xmodel_state).xname)) ((((unsupported)).apply)) (((xmodel_state).xoptions)) (((xmodel_state).xbases)) (((xmodel_state).xmanagers)))) ((xdependencies)))
                xgenerate_deleted_models.write
                  [xself]
                    memory > xnew_keys
                    memory > xindex_together
                    memory > xrelations
                    memory > xdeleted_models
                    memory > xthrough_user
                    memory > xall_deleted_models
                    memory > xunique_together
                    memory > xdeleted_unmanaged_models
                    memory > xrelated_fields
                    memory > xmodel_state
                    memory > xdependencies
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_keys.write (((xself).xnew_model_keys).or ((xself).xnew_unmanaged_keys))
                        xdeleted_models.write (((xself).xold_model_keys).sub (xnew_keys))
                        xdeleted_unmanaged_models.write (((xself).xold_unmanaged_keys).sub (xnew_keys))
                        xall_deleted_models.write (((xchain)).apply ((((xsorted)).apply ((xdeleted_models)))) ((((xsorted)).apply ((xdeleted_unmanaged_models)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xall_deleted_models)))
                          seq
                            xmodel_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            xrelated_fields.write (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xfield)))) ((((((xmodel_state).xfields).xitems)).apply)))
                              ((xfield).xremote_field).if
                                seq
                                  (((xfield).xremote_field).xmodel).if
                                    (((unsupported)).apply ((((unsupported)).apply ((xrelated_fields)) ((xfield_name)))) ((xfield)))
                                  (((xgetattr)).apply (((xfield).xremote_field)) ("through") ("None: is there a None literal in the EO language?")).if
                                    (((unsupported)).apply ((((unsupported)).apply ((xrelated_fields)) ((xfield_name)))) ((xfield)))
                            xunique_together.write (((((xmodel_state).xoptions).xpop)).apply ("unique_together") ("None: is there a None literal in the EO language?"))
                            xindex_together.write (((((xmodel_state).xoptions).xpop)).apply ("index_together") ("None: is there a None literal in the EO language?"))
                            (xunique_together).if
                              bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterUniqueTogether)) ((xmodel_name)) ("None: is there a None literal in the EO language?"))))
                            (xindex_together).if
                              bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterIndexTogether)) ((xmodel_name)) ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply ((xname)) ((((xsorted)).apply ((xrelated_fields)))))
                              bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xRemoveField)) ((xmodel_name)) ((xname)))))
                            xdependencies.write (((unsupported)).apply)
                            xrelations.write (((xself).xfrom_state).xrelations)
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrelated_object_app_label)) ((xobject_name)))) ((xrelation_related_fields)))) (((((((unsupported)).apply ((xrelations)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name))))).xitems)).apply)))
                              (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xfield)))) (((((xrelation_related_fields).xitems)).apply)))
                                seq
                                  bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((xrelated_object_app_label)) ((xobject_name)) ((xfield_name)) ((xfalse)))))
                                  (((xfield).xmany_to_many).not).if
                                    bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((xrelated_object_app_label)) ((xobject_name)) ((xfield_name)) ("alter"))))
                            (((unsupported)).apply ((xname)) ((((xsorted)).apply ((xrelated_fields)))))
                              bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xname)) ((xfalse)))))
                            xthrough_user.write (((((xself).xthrough_users).xget)).apply ((((unsupported)).apply ((xapp_label)) (((xmodel_state).xname_lower)))))
                            (xthrough_user).if
                              bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((((unsupported)).apply ((xthrough_user)) (0))) ((((unsupported)).apply ((xthrough_user)) (1))) ((((unsupported)).apply ((xthrough_user)) (2))) ((xfalse)))))
                            (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xDeleteModel)) (((xmodel_state).xname)))) ((((xlist)).apply ((((xset)).apply ((xdependencies)))))))
                xgenerate_deleted_proxies.write
                  [xself]
                    memory > xdeleted
                    memory > xmodel_state
                    seq > @
                      seq
                        unsupported
                        xdeleted.write (((xself).xold_proxy_keys).sub ((xself).xnew_proxy_keys))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply ((xdeleted)))))
                          seq
                            xmodel_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            (((unsupported)).apply ((((((xmodel_state).xoptions).xget)).apply ("proxy"))))
                            bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xDeleteModel)) (((xmodel_state).xname)))))
                xgenerate_renamed_fields.write
                  [xself]
                    memory > xold_db_column
                    memory > xold_rel_to
                    memory > xold_field_dec
                    memory > xfield_dec
                    memory > xaltered_field
                    memory > xold_field
                    memory > xold_model_name
                    memory > xnew_model_state
                    memory > xfield
                    memory > xold_model_state
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xrenamed_fields)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))) ((((xsorted)).apply ((((xself).xnew_field_keys).sub ((xself).xold_field_keys))))))
                          seq
                            xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                            xold_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)))))
                            xnew_model_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            xfield.write ((((xnew_model_state).xget_field)).apply ((xfield_name)))
                            xfield_dec.write ((((xself).xdeep_deconstruct)).apply ((xfield)))
                            (((unsupported)).apply ((((unsupported)).apply ((xrem_app_label)) ((xrem_model_name)) ((xrem_field_name)))) ((((xsorted)).apply ((((xself).xold_field_keys).sub ((xself).xnew_field_keys))))))
                              (((xrem_app_label).eq (xapp_label)).and ((xrem_model_name).eq (xmodel_name))).if
                                seq
                                  xold_field.write ((((xold_model_state).xget_field)).apply ((xrem_field_name)))
                                  xold_field_dec.write ((((xself).xdeep_deconstruct)).apply ((xold_field)))
                                  ((((xfield).xremote_field).and (((xfield).xremote_field).xmodel)).and (((unsupported)).apply ("to") ((((unsupported)).apply ((xold_field_dec)) (2))))).if
                                    seq
                                      xold_rel_to.write (((unsupported)).apply ((((unsupported)).apply ((xold_field_dec)) (2))) ("to"))
                                      (((unsupported)).apply ((xold_rel_to)) (((xself).xrenamed_models_rel))).if
                                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xold_field_dec)) (2))) ("to"))) ((((unsupported)).apply (((xself).xrenamed_models_rel)) ((xold_rel_to)))))
                                  bogusForceDataize.write ((((xold_field).xset_attributes_from_name)).apply ((xrem_field_name)))
                                  xold_db_column.write (((unsupported)).apply (((((xold_field).xget_attname_column)).apply)) (1))
                                  (((xold_field_dec).eq (xfield_dec)).or (((((unsupported)).apply ((xold_field_dec)) ((((unsupported)).apply (0) (2)))).eq (((unsupported)).apply ((xfield_dec)) ((((unsupported)).apply (0) (2))))).and ((((unsupported)).apply ((xdict)) ((((unsupported)).apply ((xold_field_dec)) (2))) ((xold_db_column))).eq (((unsupported)).apply ((xfield_dec)) (2))))).if
                                    (((((xself).xquestioner).xask_rename)).apply ((xmodel_name)) ((xrem_field_name)) ((xfield_name)) ((xfield))).if
                                      seq
                                        (((xold_field).xdb_column).neq ((xfield).xdb_column)).if
                                          seq
                                            xaltered_field.write ((((xfield).xclone)).apply)
                                            (((unsupported)).apply (((xaltered_field).xname)) ((xrem_field_name)))
                                            bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterField)) ((xmodel_name)) ((xrem_field_name)) ((xaltered_field)))))
                                        bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xRenameField)) ((xmodel_name)) ((xrem_field_name)) ((xfield_name)))))
                                        bogusForceDataize.write (((((xself).xold_field_keys).xremove)).apply ((((unsupported)).apply ((xrem_app_label)) ((xrem_model_name)) ((xrem_field_name)))))
                                        bogusForceDataize.write (((((xself).xold_field_keys).xadd)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))))
                                        (((unsupported)).apply ((((unsupported)).apply (((xself).xrenamed_fields)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))))) ((xrem_field_name)))
                                        (((unsupported)).apply)
                xgenerate_added_fields.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))) ((((xsorted)).apply ((((xself).xnew_field_keys).sub ((xself).xold_field_keys))))))
                          bogusForceDataize.write ((((xself).x_generate_added_field)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))
                x_generate_added_field.write
                  [xself xapp_label xmodel_name xfield_name]
                    memory > xfield
                    memory > xdependencies
                    memory > xtime_fields
                    memory > xpreserve_default
                    seq > @
                      seq
                        xfield.write ((((((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name))))).xget_field)).apply ((xfield_name)))
                        xdependencies.write (((unsupported)).apply)
                        (((xfield).xremote_field).and (((xfield).xremote_field).xmodel)).if
                          bogusForceDataize.write ((((xdependencies).xextend)).apply (((((xself).x_get_dependencies_for_foreign_key)).apply ((xapp_label)) ((xmodel_name)) ((xfield)) (((xself).xto_state)))))
                        xtime_fields.write (((unsupported)).apply (((xmodels).xDateField)) (((xmodels).xDateTimeField)) (((xmodels).xTimeField)))
                        xpreserve_default.write ((((((xfield).xnull).or ((((xfield).xhas_default)).apply)).or ((xfield).xmany_to_many)).or (((xfield).xblank).and ((xfield).xempty_strings_allowed))).or ((((xisinstance)).apply ((xfield)) ((xtime_fields))).and ((xfield).xauto_now)))
                        ((xpreserve_default).not).if
                          seq
                            xfield.write ((((xfield).xclone)).apply)
                            ((((xisinstance)).apply ((xfield)) ((xtime_fields))).and ((xfield).xauto_now_add)).if
                              (((unsupported)).apply (((xfield).xdefault)) ((((((xself).xquestioner).xask_auto_now_add_addition)).apply ((xfield_name)) ((xmodel_name)))))
                              (((unsupported)).apply (((xfield).xdefault)) ((((((xself).xquestioner).xask_not_null_addition)).apply ((xfield_name)) ((xmodel_name)))))
                        ((((xfield).xunique).and (((unsupported)).apply (((xfield).xdefault)) (((xmodels).xNOT_PROVIDED)))).and (((xcallable)).apply (((xfield).xdefault)))).if
                          bogusForceDataize.write (((((xself).xquestioner).xask_unique_callable_default_addition)).apply ((xfield_name)) ((xmodel_name)))
                        (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xAddField)) ((xmodel_name)) ((xfield_name)) ((xfield)) ((xpreserve_default)))) ((xdependencies)))
                xgenerate_removed_fields.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))) ((((xsorted)).apply ((((xself).xold_field_keys).sub ((xself).xnew_field_keys))))))
                          bogusForceDataize.write ((((xself).x_generate_removed_field)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))
                x_generate_removed_field.write
                  [xself xapp_label xmodel_name xfield_name]
                    seq > @
                      (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xRemoveField)) ((xmodel_name)) ((xfield_name)))) ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)) ("order_wrt_unset"))) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)) ("foo_together_change"))))))
                xgenerate_altered_fields.write
                  [xself]
                    memory > xfield
                    memory > xold_field_name
                    memory > xfrom_rename_key
                    memory > xnew_field
                    memory > xrename_key
                    memory > xpreserve_default
                    memory > xnew_field_dec
                    memory > xold_model_name
                    memory > xboth_m2m
                    memory > xold_field_dec
                    memory > xnew_default
                    memory > xremote_field_name
                    memory > xfrom_fields
                    memory > xto_field_rename_key
                    memory > xneither_m2m
                    memory > xold_field
                    memory > xdependencies
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))) ((((xsorted)).apply ((((xself).xold_field_keys).and ((xself).xnew_field_keys))))))
                          seq
                            xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                            xold_field_name.write (((((xself).xrenamed_fields).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))) ((xfield_name)))
                            xold_field.write ((((((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name))))).xget_field)).apply ((xold_field_name)))
                            xnew_field.write ((((((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name))))).xget_field)).apply ((xfield_name)))
                            xdependencies.write (((unsupported)).apply)
                            ((((xhasattr)).apply ((xnew_field)) ("remote_field")).and (((xgetattr)).apply (((xnew_field).xremote_field)) ("model") ("None: is there a None literal in the EO language?"))).if
                              seq
                                xrename_key.write (((xresolve_relation)).apply ((((xnew_field).xremote_field).xmodel)) ((xapp_label)) ((xmodel_name)))
                                (((unsupported)).apply ((xrename_key)) (((xself).xrenamed_models))).if
                                  (((unsupported)).apply ((((xnew_field).xremote_field).xmodel)) ((((xold_field).xremote_field).xmodel)))
                                xremote_field_name.write (((xgetattr)).apply (((xnew_field).xremote_field)) ("field_name") ("None: is there a None literal in the EO language?"))
                                (xremote_field_name).if
                                  seq
                                    xto_field_rename_key.write ((xrename_key).add (((unsupported)).apply ((xremote_field_name))))
                                    (((unsupported)).apply ((xto_field_rename_key)) (((xself).xrenamed_fields))).if
                                      seq
                                        (((unsupported)).apply ((((xnew_field).xremote_field).xmodel)) ((((xold_field).xremote_field).xmodel)))
                                        (((unsupported)).apply ((((xnew_field).xremote_field).xfield_name)) ((((xold_field).xremote_field).xfield_name)))
                                xfrom_fields.write (((xgetattr)).apply ((xnew_field)) ("from_fields") ("None: is there a None literal in the EO language?"))
                                (xfrom_fields).if
                                  seq
                                    xfrom_rename_key.write (((unsupported)).apply ((xapp_label)) ((xmodel_name)))
                                    (((unsupported)).apply (((xnew_field).xfrom_fields)) ((((xtuple)).apply ((((unsupported)).apply ((((((xself).xrenamed_fields).xget)).apply (((xfrom_rename_key).add (((unsupported)).apply ((xfrom_field))))) ((xfrom_field)))) ((xfrom_field)) ((xfrom_fields)))))))
                                    (((unsupported)).apply (((xnew_field).xto_fields)) ((((xtuple)).apply ((((unsupported)).apply ((((((xself).xrenamed_fields).xget)).apply (((xrename_key).add (((unsupported)).apply ((xto_field))))) ((xto_field)))) ((xto_field)) (((xnew_field).xto_fields)))))))
                                bogusForceDataize.write ((((xdependencies).xextend)).apply (((((xself).x_get_dependencies_for_foreign_key)).apply ((xapp_label)) ((xmodel_name)) ((xnew_field)) (((xself).xto_state)))))
                            ((((xhasattr)).apply ((xnew_field)) ("remote_field")).and (((xgetattr)).apply (((xnew_field).xremote_field)) ("through") ("None: is there a None literal in the EO language?"))).if
                              seq
                                xrename_key.write (((xresolve_relation)).apply ((((xnew_field).xremote_field).xthrough)) ((xapp_label)) ((xmodel_name)))
                                (((unsupported)).apply ((xrename_key)) (((xself).xrenamed_models))).if
                                  (((unsupported)).apply ((((xnew_field).xremote_field).xthrough)) ((((xold_field).xremote_field).xthrough)))
                            xold_field_dec.write ((((xself).xdeep_deconstruct)).apply ((xold_field)))
                            xnew_field_dec.write ((((xself).xdeep_deconstruct)).apply ((xnew_field)))
                            (((xold_field_dec).neq (xnew_field_dec)).and ((xold_field_name).eq (xfield_name))).if
                              seq
                                xboth_m2m.write (((xold_field).xmany_to_many).and ((xnew_field).xmany_to_many))
                                xneither_m2m.write ((((xold_field).xmany_to_many).not).and (((xnew_field).xmany_to_many).not))
                                ((xboth_m2m).or (xneither_m2m)).if
                                  seq
                                    xpreserve_default.write TRUE
                                    (((((xold_field).xnull).and (((xnew_field).xnull).not)).and (((((xnew_field).xhas_default)).apply).not)).and (((xnew_field).xmany_to_many).not)).if
                                      seq
                                        xfield.write ((((xnew_field).xclone)).apply)
                                        xnew_default.write (((((xself).xquestioner).xask_not_null_alteration)).apply ((xfield_name)) ((xmodel_name)))
                                        (((unsupported)).apply ((xnew_default)) (((xmodels).xNOT_PROVIDED))).if
                                          seq
                                            (((unsupported)).apply (((xfield).xdefault)) ((xnew_default)))
                                            xpreserve_default.write (xfalse)
                                      xfield.write (xnew_field)
                                    (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterField)) ((xmodel_name)) ((xfield_name)) ((xfield)) ((xpreserve_default)))) ((xdependencies)))
                                  seq
                                    bogusForceDataize.write ((((xself).x_generate_removed_field)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))
                                    bogusForceDataize.write ((((xself).x_generate_added_field)).apply ((xapp_label)) ((xmodel_name)) ((xfield_name)))
                xcreate_altered_indexes.write
                  [xself]
                    memory > xoption_name
                    memory > xrem_idx
                    memory > xold_indexes
                    memory > xold_model_name
                    memory > xadd_idx
                    memory > xnew_model_state
                    memory > xold_model_state
                    memory > xnew_indexes
                    seq > @
                      seq
                        xoption_name.write (((xoperations).xAddIndex).xoption_name)
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply (((xself).xkept_model_keys)))))
                          seq
                            xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                            xold_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)))))
                            xnew_model_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            xold_indexes.write (((unsupported)).apply (((xold_model_state).xoptions)) ((xoption_name)))
                            xnew_indexes.write (((unsupported)).apply (((xnew_model_state).xoptions)) ((xoption_name)))
                            xadd_idx.write (((unsupported)).apply ((xidx)) ((xidx)) ((xnew_indexes)) ((((unsupported)).apply ((xidx)) ((xold_indexes)))))
                            xrem_idx.write (((unsupported)).apply ((xidx)) ((xidx)) ((xold_indexes)) ((((unsupported)).apply ((xidx)) ((xnew_indexes)))))
                            bogusForceDataize.write (((((xself).xaltered_indexes).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((unsupported)).apply ("added_indexes") ((xadd_idx)) ("removed_indexes") ((xrem_idx)))))))
                xgenerate_added_indexes.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xalt_indexes)))) ((((((xself).xaltered_indexes).xitems)).apply)))
                        (((unsupported)).apply ((xindex)) ((((unsupported)).apply ((xalt_indexes)) ("added_indexes"))))
                          bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xAddIndex)) ((xmodel_name)) ((xindex)))))
                xgenerate_removed_indexes.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xalt_indexes)))) ((((((xself).xaltered_indexes).xitems)).apply)))
                        (((unsupported)).apply ((xindex)) ((((unsupported)).apply ((xalt_indexes)) ("removed_indexes"))))
                          bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xRemoveIndex)) ((xmodel_name)) (((xindex).xname)))))
                xcreate_altered_constraints.write
                  [xself]
                    memory > xoption_name
                    memory > xrem_constraints
                    memory > xnew_constraints
                    memory > xold_model_name
                    memory > xnew_model_state
                    memory > xold_model_state
                    memory > xadd_constraints
                    memory > xold_constraints
                    seq > @
                      seq
                        xoption_name.write (((xoperations).xAddConstraint).xoption_name)
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply (((xself).xkept_model_keys)))))
                          seq
                            xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                            xold_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)))))
                            xnew_model_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            xold_constraints.write (((unsupported)).apply (((xold_model_state).xoptions)) ((xoption_name)))
                            xnew_constraints.write (((unsupported)).apply (((xnew_model_state).xoptions)) ((xoption_name)))
                            xadd_constraints.write (((unsupported)).apply ((xc)) ((xc)) ((xnew_constraints)) ((((unsupported)).apply ((xc)) ((xold_constraints)))))
                            xrem_constraints.write (((unsupported)).apply ((xc)) ((xc)) ((xold_constraints)) ((((unsupported)).apply ((xc)) ((xnew_constraints)))))
                            bogusForceDataize.write (((((xself).xaltered_constraints).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((unsupported)).apply ("added_constraints") ((xadd_constraints)) ("removed_constraints") ((xrem_constraints)))))))
                xgenerate_added_constraints.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xalt_constraints)))) ((((((xself).xaltered_constraints).xitems)).apply)))
                        (((unsupported)).apply ((xconstraint)) ((((unsupported)).apply ((xalt_constraints)) ("added_constraints"))))
                          bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xAddConstraint)) ((xmodel_name)) ((xconstraint)))))
                xgenerate_removed_constraints.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xalt_constraints)))) ((((((xself).xaltered_constraints).xitems)).apply)))
                        (((unsupported)).apply ((xconstraint)) ((((unsupported)).apply ((xalt_constraints)) ("removed_constraints"))))
                          bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xRemoveConstraint)) ((xmodel_name)) (((xconstraint).xname)))))
                x_get_dependencies_for_foreign_key.write
                  [xapp_label xmodel_name xfield xproject_state]
                    memory > xdep_object_name
                    memory > xremote_field_model
                    memory > xrelations
                    memory > xdep_app_label
                    memory > xdependencies
                    memory > xswappable_setting
                    seq > @
                      (((unsupported)).apply)
                        xremote_field_model.write "None: is there a None literal in the EO language?"
                        (((xhasattr)).apply (((xfield).xremote_field)) ("model")).if
                          xremote_field_model.write (((xfield).xremote_field).xmodel)
                          seq
                            xrelations.write (((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xremote_app_label)) ((xremote_model_name)))) ((xfields)))) (((((xrelations).xitems)).apply)))
                              (((xany)).apply ((((unsupported)).apply (((xfield).eq ((xrelated_field).xremote_field))) ((xrelated_field)) (((((xfields).xvalues)).apply))))).if
                                seq
                                  xremote_field_model.write "{remote_app_label}.{remote_model_name}"
                                  (((unsupported)).apply)
                        xswappable_setting.write (((xgetattr)).apply ((xfield)) ("swappable_setting") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xswappable_setting)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xdep_app_label.write "__setting__"
                            xdep_object_name.write (xswappable_setting)
                          (((unsupported)).apply ((((unsupported)).apply ((xdep_app_label)) ((xdep_object_name)))) ((((xresolve_relation)).apply ((xremote_field_model)) ((xapp_label)) ((xmodel_name)))))
                        xdependencies.write (((unsupported)).apply ((((unsupported)).apply ((xdep_app_label)) ((xdep_object_name)) ("None: is there a None literal in the EO language?") (TRUE))))
                        (((xgetattr)).apply (((xfield).xremote_field)) ("through") ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xthrough_app_label)) ((xthrough_object_name)))) ((((xresolve_relation)).apply ((xremote_field_model)) ((xapp_label)) ((xmodel_name)))))
                            bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((xthrough_app_label)) ((xthrough_object_name)) ("None: is there a None literal in the EO language?") (TRUE))))
                        (((unsupported)).apply ((xdependencies)))
                x_get_altered_foo_together_operations.write
                  [xself xoption_name]
                    memory > xnew_value
                    memory > xold_value
                    memory > xdependencies
                    memory > xold_model_name
                    memory > xnew_model_state
                    memory > xfield
                    memory > xold_model_state
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply (((xself).xkept_model_keys)))))
                        seq
                          xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                          xold_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)))))
                          xnew_model_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                          xold_value.write (((((xold_model_state).xoptions).xget)).apply ((xoption_name)))
                          xold_value.write ((xold_value).if (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((((xself).xrenamed_fields).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((xn)))) ((xn)))) ((xn)) ((xunique)))))) ((xunique)) ((xold_value))) (((xset)).apply))
                          xnew_value.write (((((xnew_model_state).xoptions).xget)).apply ((xoption_name)))
                          xnew_value.write ((xnew_value).if (((xset)).apply ((xnew_value))) (((xset)).apply))
                          ((xold_value).neq (xnew_value)).if
                            seq
                              xdependencies.write (((unsupported)).apply)
                              (((unsupported)).apply ((xfoo_togethers)) ((xnew_value)))
                                (((unsupported)).apply ((xfield_name)) ((xfoo_togethers)))
                                  seq
                                    xfield.write ((((xnew_model_state).xget_field)).apply ((xfield_name)))
                                    (((xfield).xremote_field).and (((xfield).xremote_field).xmodel)).if
                                      bogusForceDataize.write ((((xdependencies).xextend)).apply (((((xself).x_get_dependencies_for_foreign_key)).apply ((xapp_label)) ((xmodel_name)) ((xfield)) (((xself).xto_state)))))
                              (((unsupported)).apply ((((unsupported)).apply ((xold_value)) ((xnew_value)) ((xapp_label)) ((xmodel_name)) ((xdependencies)))))
                x_generate_removed_altered_foo_together.write
                  [xself xoperation]
                    memory > xremoval_value
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xold_value)) ((xnew_value)) ((xapp_label)) ((xmodel_name)) ((xdependencies)))) (((((xself).x_get_altered_foo_together_operations)).apply (((xoperation).xoption_name)))))
                        seq
                          xremoval_value.write ((((xnew_value).xintersection)).apply ((xold_value)))
                          ((xremoval_value).or (xold_value)).if
                            (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply ((xoperation)) ((xmodel_name)) ((((unsupported)).apply ((((unsupported)).apply (((xoperation).xoption_name)) ((xremoval_value)))))))) ((xdependencies)))
                xgenerate_removed_altered_unique_together.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_generate_removed_altered_foo_together)).apply (((xoperations).xAlterUniqueTogether)))
                xgenerate_removed_altered_index_together.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_generate_removed_altered_foo_together)).apply (((xoperations).xAlterIndexTogether)))
                x_generate_altered_foo_together.write
                  [xself xoperation]
                    memory > xremoval_value
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xold_value)) ((xnew_value)) ((xapp_label)) ((xmodel_name)) ((xdependencies)))) (((((xself).x_get_altered_foo_together_operations)).apply (((xoperation).xoption_name)))))
                        seq
                          xremoval_value.write ((((xnew_value).xintersection)).apply ((xold_value)))
                          ((xnew_value).neq (xremoval_value)).if
                            (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply ((xoperation)) ((xmodel_name)) ((((unsupported)).apply ((((unsupported)).apply (((xoperation).xoption_name)) ((xnew_value)))))))) ((xdependencies)))
                xgenerate_altered_unique_together.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_generate_altered_foo_together)).apply (((xoperations).xAlterUniqueTogether)))
                xgenerate_altered_index_together.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_generate_altered_foo_together)).apply (((xoperations).xAlterIndexTogether)))
                xgenerate_altered_db_table.write
                  [xself]
                    memory > xold_db_table_name
                    memory > xnew_db_table_name
                    memory > xmodels_to_check
                    memory > xold_model_name
                    memory > xnew_model_state
                    memory > xold_model_state
                    seq > @
                      seq
                        xmodels_to_check.write (((((xself).xkept_model_keys).xunion)).apply (((xself).xkept_proxy_keys)) (((xself).xkept_unmanaged_keys)))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply ((xmodels_to_check)))))
                          seq
                            xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                            xold_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)))))
                            xnew_model_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            xold_db_table_name.write (((((xold_model_state).xoptions).xget)).apply ("db_table"))
                            xnew_db_table_name.write (((((xnew_model_state).xoptions).xget)).apply ("db_table"))
                            ((xold_db_table_name).neq (xnew_db_table_name)).if
                              bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterModelTable)) ((xmodel_name)) ((xnew_db_table_name)))))
                xgenerate_altered_options.write
                  [xself]
                    memory > xmodels_to_check
                    memory > xold_options
                    memory > xnew_options
                    memory > xold_model_name
                    memory > xnew_model_state
                    memory > xold_model_state
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmodels_to_check.write (((((xself).xkept_model_keys).xunion)).apply (((xself).xkept_proxy_keys)) (((xself).xkept_unmanaged_keys)) ((((xself).xold_unmanaged_keys).and ((xself).xnew_model_keys))) ((((xself).xold_model_keys).and ((xself).xnew_unmanaged_keys))))
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply ((xmodels_to_check)))))
                          seq
                            xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                            xold_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)))))
                            xnew_model_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                            xold_options.write (((unsupported)).apply ((xkey)) ((xvalue)) ((((unsupported)).apply ((xkey)) ((xvalue)))) ((((((xold_model_state).xoptions).xitems)).apply)) ((((unsupported)).apply ((xkey)) (((xAlterModelOptions).xALTER_OPTION_KEYS)))))
                            xnew_options.write (((unsupported)).apply ((xkey)) ((xvalue)) ((((unsupported)).apply ((xkey)) ((xvalue)))) ((((((xnew_model_state).xoptions).xitems)).apply)) ((((unsupported)).apply ((xkey)) (((xAlterModelOptions).xALTER_OPTION_KEYS)))))
                            ((xold_options).neq (xnew_options)).if
                              bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterModelOptions)) ((xmodel_name)) ((xnew_options)))))
                xgenerate_altered_order_with_respect_to.write
                  [xself]
                    memory > xdependencies
                    memory > xold_model_state
                    memory > xold_model_name
                    memory > xnew_model_state
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply (((xself).xkept_model_keys)))))
                        seq
                          xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                          xold_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)))))
                          xnew_model_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                          ((((((xold_model_state).xoptions).xget)).apply ("order_with_respect_to")).neq (((((xnew_model_state).xoptions).xget)).apply ("order_with_respect_to"))).if
                            seq
                              xdependencies.write (((unsupported)).apply)
                              (((((xnew_model_state).xoptions).xget)).apply ("order_with_respect_to")).if
                                bogusForceDataize.write ((((xdependencies).xappend)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)) ((((unsupported)).apply (((xnew_model_state).xoptions)) ("order_with_respect_to"))) (TRUE))))
                              (((unsupported)).apply (((xself).xadd_operation)) ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterOrderWithRespectTo)) ((xmodel_name)) ((((((xnew_model_state).xoptions).xget)).apply ("order_with_respect_to"))))) ((xdependencies)))
                xgenerate_altered_managers.write
                  [xself]
                    memory > xold_model_state
                    memory > xold_model_name
                    memory > xnew_model_state
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((((xsorted)).apply (((xself).xkept_model_keys)))))
                        seq
                          xold_model_name.write (((((xself).xrenamed_models).xget)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodel_name)))
                          xold_model_state.write (((unsupported)).apply ((((xself).xfrom_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_model_name)))))
                          xnew_model_state.write (((unsupported)).apply ((((xself).xto_state).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                          (((xold_model_state).xmanagers).neq ((xnew_model_state).xmanagers)).if
                            bogusForceDataize.write ((((xself).xadd_operation)).apply ((xapp_label)) ((((unsupported)).apply (((xoperations).xAlterModelManagers)) ((xmodel_name)) (((xnew_model_state).xmanagers)))))
                xarrange_for_graph.write
                  [xself xchanges xgraph xmigration_name]
                    memory > xnew_name
                    memory > xnext_number
                    memory > xname_map
                    memory > xapp_leaf
                    memory > xnew_name_parts
                    memory > xleaves
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xleaves.write ((((xgraph).xleaf_nodes)).apply)
                        xname_map.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmigrations)))) ((((xlist)).apply (((((xchanges).xitems)).apply)))))
                          seq
                            ((xmigrations).not).if
                              (((unsupported)).apply)
                            xapp_leaf.write "None: is there a None literal in the EO language?"
                            (((unsupported)).apply ((xleaf)) ((xleaves)))
                              ((((unsupported)).apply ((xleaf)) (0)).eq (xapp_label)).if
                                seq
                                  xapp_leaf.write (xleaf)
                                  (((unsupported)).apply)
                            ((((unsupported)).apply ((xapp_leaf)) ("None: is there a None literal in the EO language?")).and ((((((xself).xquestioner).xask_initial)).apply ((xapp_label))).not)).if
                              seq
                                (((unsupported)).apply ((xmigration)) ((xmigrations)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xname_map)) ((((unsupported)).apply ((xapp_label)) (((xmigration).xname)))))) ((((unsupported)).apply ((xapp_label)) ("__first__"))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label)))))))
                                (((unsupported)).apply)
                            (((unsupported)).apply ((xapp_leaf)) ("None: is there a None literal in the EO language?")).if
                              xnext_number.write 1
                              xnext_number.write ((((((xself).xparse_number)).apply ((((unsupported)).apply ((xapp_leaf)) (1)))).or 0).add 1)
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xmigration)))) ((((xenumerate)).apply ((xmigrations)))))
                              seq
                                (((xi).eq 0).and (xapp_leaf)).if
                                  bogusForceDataize.write (((((xmigration).xdependencies).xappend)).apply ((xapp_leaf)))
                                xnew_name_parts.write (((unsupported)).apply (("%04i".mod (xnext_number))))
                                (xmigration_name).if
                                  bogusForceDataize.write ((((xnew_name_parts).xappend)).apply ((xmigration_name)))
                                  (((xi).eq 0).and ((xapp_leaf).not)).if
                                    bogusForceDataize.write ((((xnew_name_parts).xappend)).apply ("initial"))
                                    bogusForceDataize.write ((((xnew_name_parts).xappend)).apply ((((unsupported)).apply (((((xmigration).xsuggest_name)).apply)) ((((unsupported)).apply (100))))))
                                xnew_name.write ((("_".xjoin)).apply ((xnew_name_parts)))
                                (((unsupported)).apply ((((unsupported)).apply ((xname_map)) ((((unsupported)).apply ((xapp_label)) (((xmigration).xname)))))) ((((unsupported)).apply ((xapp_label)) ((xnew_name)))))
                                (((unsupported)).apply ((xnext_number)) (1))
                                (((unsupported)).apply (((xmigration).xname)) ((xnew_name)))
                        (((unsupported)).apply ((xmigrations)) (((((xchanges).xvalues)).apply)))
                          (((unsupported)).apply ((xmigration)) ((xmigrations)))
                            (((unsupported)).apply (((xmigration).xdependencies)) ((((unsupported)).apply (((((xname_map).xget)).apply ((xd)) ((xd)))) ((xd)) (((xmigration).xdependencies)))))
                        (((unsupported)).apply ((xchanges)))
                x_trim_to_apps.write
                  [xself xchanges xapp_labels]
                    memory > xrequired_apps
                    memory > xold_required_apps
                    memory > xapp_dependencies
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xapp_dependencies.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmigrations)))) (((((xchanges).xitems)).apply)))
                          (((unsupported)).apply ((xmigration)) ((xmigrations)))
                            (((unsupported)).apply ((((unsupported)).apply ((xdep_app_label)) ((xname)))) (((xmigration).xdependencies)))
                              bogusForceDataize.write (((((((xapp_dependencies).xsetdefault)).apply ((xapp_label)) ((((xset)).apply))).xadd)).apply ((xdep_app_label)))
                        xrequired_apps.write (((xset)).apply ((xapp_labels)))
                        xold_required_apps.write "None: is there a None literal in the EO language?"
                        while.
                          ((xold_required_apps).neq (xrequired_apps))
                          [unused]
                            seq > @
                              seq
                                xold_required_apps.write (((xset)).apply ((xrequired_apps)))
                                bogusForceDataize.write ((((xrequired_apps).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xapp_dependencies).xget)).apply ((xapp_label)) ((((unsupported)).apply)))) ((xapp_label)) ((xrequired_apps)))))))
                        (((unsupported)).apply ((xapp_label)) ((((xlist)).apply ((xchanges)))))
                          (((unsupported)).apply ((xapp_label)) ((xrequired_apps))).if
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xchanges)) ((xapp_label)))))))
                        (((unsupported)).apply ((xchanges)))
                xparse_number.write
                  [xcls xname]
                    memory > xmatch
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xre).xsearch)).apply (".*_squashed_(d+)") ((xname))))).if
                          (((unsupported)).apply ((((xint)).apply ((((unsupported)).apply ((xsquashed_match)) (1))))))
                        xmatch.write ((((xre).xmatch)).apply ("^d+") ((xname)))
                        (xmatch).if
                          (((unsupported)).apply ((((xint)).apply ((((unsupported)).apply ((xmatch)) (0))))))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))