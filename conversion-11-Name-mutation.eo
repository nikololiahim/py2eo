+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > conversion-11
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xtest
      seq > @
        stdout "conversion-11\n"
        write.
          xtest
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > e5
                cage > e7
                cage > e0
                cage > e4
                cage > e3
                cage > xz
                cage > xy2
                cage > e6
                cage > lhs0
                cage > xx
                cage > e1
                cage > e8
                cage > lhs2
                cage > e2
                cage > lhs7
                seq > @
                  stdout "xtest\n"
                  (xx).write (5.15)
                  (xy2).write (3.14)
                  mkCopy (xx) > tmp3
                  (lhs0).write (tmp3.copy)
                  tmp.write (goto ((((xcomplex)).apply ((xx)) ((xy))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  [] > tmp4
                    memory > dddata
                    dddata.write (((lhs0).mul (e0))) > @
                  (e1).write (tmp4.dddata)
                  ((e1).<)
                  mkCopy (e1) > tmp5
                  (xz).write (tmp5.copy)
                  mkCopy (xz.x__class__) > tmp6
                  (e2).write (tmp6.copy)
                  ((e2).<)
                  mkCopy (xcomplex) > tmp7
                  (lhs2).write (tmp7.copy)
                  [] > tmp8
                    memory > dddata
                    dddata.write (((e2).eq (lhs2))) > @
                  (e3).write (tmp8.dddata)
                  ((e3).<)
                  (e3).if
                    seq
                      mkCopy (xz.ximag) > tmp9
                      (e4).write (tmp9.copy)
                      ((e4).<)
                      mkCopy (e4.x__class__) > tmp10
                      (e5).write (tmp10.copy)
                      ((e5).<)
                      mkCopy (xz.xreal) > tmp11
                      (e6).write (tmp11.copy)
                      ((e6).<)
                      mkCopy (e6.x__class__) > tmp12
                      (e7).write (tmp12.copy)
                      ((e7).<)
                      [] > tmp13
                        memory > dddata
                        dddata.write (((e5).eq (e7))) > @
                      (e8).write (tmp13.dddata)
                      ((e8).<)
                      TRUE
                    seq
                      (lhs7).write (FALSE)
                      mkCopy (lhs7) > tmp14
                      (e8).write (tmp14.copy)
                      TRUE
                  toReturn.write ((e8))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xtest)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @