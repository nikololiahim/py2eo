memory > xPOINTER
memory > xc_int
memory > xc_char_p
memory > xint_output
memory > xvoidptr_output
memory > xc_void_p
memory > xstd_call
memory > xc_bool
memory > xchararray_output
memory > xc_double
memory > xpartial
[] > raster
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xvoid_output
        memory > xflush_ds
        memory > xget_ds_metadata_domain_list
        memory > xget_band_statistics
        memory > xcreate_ds
        memory > xget_ds_description
        memory > xset_ds_projection_ref
        memory > xfree_dsl
        memory > xconst_string_output
        memory > xget_ds_projection_ref
        memory > xget_mem_buffer_from_vsi_file
        memory > xdouble_output
        memory > xadd_band_ds
        memory > xcompute_band_statistics
        memory > xget_driver
        memory > xset_ds_metadata
        memory > xget_ds_xsize
        memory > xget_driver_description
        memory > xget_driver_count
        memory > xband_io
        memory > xcopy_ds
        memory > xget_ds_driver
        memory > xauto_create_warped_vrt
        memory > xdelete_band_nodata_value
        memory > xget_band_nodata_value
        memory > xunlink_vsi_file
        memory > xset_ds_metadata_item
        memory > xget_band_description
        memory > xclose_ds
        memory > xget_band_datatype
        memory > xget_band_index
        memory > xget_band_ysize
        memory > xget_ds_raster_band
        memory > xget_band_ds
        memory > xget_ds_geotransform
        memory > xget_band_xsize
        memory > xset_ds_geotransform
        memory > xget_ds_raster_count
        memory > xcreate_vsi_file_from_mem_buffer
        memory > xregister_all
        memory > xget_ds_metadata_item
        memory > xget_ds_info
        memory > xget_ds_ysize
        memory > xget_ds_metadata
        memory > xget_band_color_interp
        memory > xreproject_image
        memory > xget_driver_by_name
        memory > xopen_ds
        memory > xset_band_nodata_value
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            xvoid_output.write (((unsupported)).apply ((xpartial)) ((xvoid_output)) (TRUE))
            xconst_string_output.write (((unsupported)).apply ((xpartial)) ((xconst_string_output)) (TRUE))
            xdouble_output.write (((unsupported)).apply ((xpartial)) ((xdouble_output)) (TRUE))
            xregister_all.write (((unsupported)).apply ((xvoid_output)) ((((xstd_call)).apply ("GDALAllRegister"))) ((((unsupported)).apply)) (FALSE))
            xget_driver.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("GDALGetDriver"))) ((((unsupported)).apply ((xc_int)))))
            xget_driver_by_name.write (((unsupported)).apply ((xvoidptr_output)) ((((xstd_call)).apply ("GDALGetDriverByName"))) ((((unsupported)).apply ((xc_char_p)))) (FALSE))
            xget_driver_count.write (((xint_output)).apply ((((xstd_call)).apply ("GDALGetDriverCount"))) ((((unsupported)).apply)))
            xget_driver_description.write (((xconst_string_output)).apply ((((xstd_call)).apply ("GDALGetDescription"))) ((((unsupported)).apply ((xc_void_p)))))
            xcreate_ds.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("GDALCreate"))) ((((unsupported)).apply ((xc_void_p)) ((xc_char_p)) ((xc_int)) ((xc_int)) ((xc_int)) ((xc_int)) ((xc_void_p)))))
            xopen_ds.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("GDALOpen"))) ((((unsupported)).apply ((xc_char_p)) ((xc_int)))))
            xclose_ds.write (((unsupported)).apply ((xvoid_output)) ((((xstd_call)).apply ("GDALClose"))) ((((unsupported)).apply ((xc_void_p)))) (FALSE))
            xflush_ds.write (((xint_output)).apply ((((xstd_call)).apply ("GDALFlushCache"))) ((((unsupported)).apply ((xc_void_p)))))
            xcopy_ds.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("GDALCreateCopy"))) ((((unsupported)).apply ((xc_void_p)) ((xc_char_p)) ((xc_void_p)) ((xc_int)) ((((xPOINTER)).apply ((xc_char_p)))) ((xc_void_p)) ((xc_void_p)))))
            xadd_band_ds.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALAddBand"))) ((((unsupported)).apply ((xc_void_p)) ((xc_int)))))
            xget_ds_description.write (((xconst_string_output)).apply ((((xstd_call)).apply ("GDALGetDescription"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_ds_driver.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("GDALGetDatasetDriver"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_ds_info.write (((xconst_string_output)).apply ((((xstd_call)).apply ("GDALInfo"))) ((((unsupported)).apply ((xc_void_p)) ((xc_void_p)))))
            xget_ds_xsize.write (((xint_output)).apply ((((xstd_call)).apply ("GDALGetRasterXSize"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_ds_ysize.write (((xint_output)).apply ((((xstd_call)).apply ("GDALGetRasterYSize"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_ds_raster_count.write (((xint_output)).apply ((((xstd_call)).apply ("GDALGetRasterCount"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_ds_raster_band.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("GDALGetRasterBand"))) ((((unsupported)).apply ((xc_void_p)) ((xc_int)))))
            xget_ds_projection_ref.write (((xconst_string_output)).apply ((((xstd_call)).apply ("GDALGetProjectionRef"))) ((((unsupported)).apply ((xc_void_p)))))
            xset_ds_projection_ref.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALSetProjection"))) ((((unsupported)).apply ((xc_void_p)) ((xc_char_p)))))
            xget_ds_geotransform.write (((unsupported)).apply ((xvoid_output)) ((((xstd_call)).apply ("GDALGetGeoTransform"))) ((((unsupported)).apply ((xc_void_p)) ((((xPOINTER)).apply (((xc_double).mul 6)))))) (FALSE))
            xset_ds_geotransform.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALSetGeoTransform"))) ((((unsupported)).apply ((xc_void_p)) ((((xPOINTER)).apply (((xc_double).mul 6)))))))
            xget_ds_metadata.write (((unsupported)).apply ((xchararray_output)) ((((xstd_call)).apply ("GDALGetMetadata"))) ((((unsupported)).apply ((xc_void_p)) ((xc_char_p)))) (FALSE))
            xset_ds_metadata.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALSetMetadata"))) ((((unsupported)).apply ((xc_void_p)) ((((xPOINTER)).apply ((xc_char_p)))) ((xc_char_p)))))
            xget_ds_metadata_domain_list.write (((unsupported)).apply ((xchararray_output)) ((((xstd_call)).apply ("GDALGetMetadataDomainList"))) ((((unsupported)).apply ((xc_void_p)))) (FALSE))
            xget_ds_metadata_item.write (((xconst_string_output)).apply ((((xstd_call)).apply ("GDALGetMetadataItem"))) ((((unsupported)).apply ((xc_void_p)) ((xc_char_p)) ((xc_char_p)))))
            xset_ds_metadata_item.write (((xconst_string_output)).apply ((((xstd_call)).apply ("GDALSetMetadataItem"))) ((((unsupported)).apply ((xc_void_p)) ((xc_char_p)) ((xc_char_p)) ((xc_char_p)))))
            xfree_dsl.write (((unsupported)).apply ((xvoid_output)) ((((xstd_call)).apply ("CSLDestroy"))) ((((unsupported)).apply ((((xPOINTER)).apply ((xc_char_p)))))) (FALSE))
            xband_io.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALRasterIO"))) ((((unsupported)).apply ((xc_void_p)) ((xc_int)) ((xc_int)) ((xc_int)) ((xc_int)) ((xc_int)) ((xc_void_p)) ((xc_int)) ((xc_int)) ((xc_int)) ((xc_int)) ((xc_int)))))
            xget_band_xsize.write (((xint_output)).apply ((((xstd_call)).apply ("GDALGetRasterBandXSize"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_band_ysize.write (((xint_output)).apply ((((xstd_call)).apply ("GDALGetRasterBandYSize"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_band_index.write (((xint_output)).apply ((((xstd_call)).apply ("GDALGetBandNumber"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_band_description.write (((xconst_string_output)).apply ((((xstd_call)).apply ("GDALGetDescription"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_band_ds.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("GDALGetBandDataset"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_band_datatype.write (((xint_output)).apply ((((xstd_call)).apply ("GDALGetRasterDataType"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_band_color_interp.write (((xint_output)).apply ((((xstd_call)).apply ("GDALGetRasterColorInterpretation"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_band_nodata_value.write (((xdouble_output)).apply ((((xstd_call)).apply ("GDALGetRasterNoDataValue"))) ((((unsupported)).apply ((xc_void_p)) ((((xPOINTER)).apply ((xc_int)))))))
            xset_band_nodata_value.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALSetRasterNoDataValue"))) ((((unsupported)).apply ((xc_void_p)) ((xc_double)))))
            xdelete_band_nodata_value.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALDeleteRasterNoDataValue"))) ((((unsupported)).apply ((xc_void_p)))))
            xget_band_statistics.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALGetRasterStatistics"))) ((((unsupported)).apply ((xc_void_p)) ((xc_int)) ((xc_int)) ((((xPOINTER)).apply ((xc_double)))) ((((xPOINTER)).apply ((xc_double)))) ((((xPOINTER)).apply ((xc_double)))) ((((xPOINTER)).apply ((xc_double)))) ((xc_void_p)) ((xc_void_p)))))
            xcompute_band_statistics.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALComputeRasterStatistics"))) ((((unsupported)).apply ((xc_void_p)) ((xc_int)) ((((xPOINTER)).apply ((xc_double)))) ((((xPOINTER)).apply ((xc_double)))) ((((xPOINTER)).apply ((xc_double)))) ((((xPOINTER)).apply ((xc_double)))) ((xc_void_p)) ((xc_void_p)))))
            xreproject_image.write (((xvoid_output)).apply ((((xstd_call)).apply ("GDALReprojectImage"))) ((((unsupported)).apply ((xc_void_p)) ((xc_char_p)) ((xc_void_p)) ((xc_char_p)) ((xc_int)) ((xc_double)) ((xc_double)) ((xc_void_p)) ((xc_void_p)) ((xc_void_p)))))
            xauto_create_warped_vrt.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("GDALAutoCreateWarpedVRT"))) ((((unsupported)).apply ((xc_void_p)) ((xc_char_p)) ((xc_char_p)) ((xc_int)) ((xc_double)) ((xc_void_p)))))
            xcreate_vsi_file_from_mem_buffer.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("VSIFileFromMemBuffer"))) ((((unsupported)).apply ((xc_char_p)) ((xc_void_p)) ((xc_int)) ((xc_int)))))
            xget_mem_buffer_from_vsi_file.write (((xvoidptr_output)).apply ((((xstd_call)).apply ("VSIGetMemFileBuffer"))) ((((unsupported)).apply ((xc_char_p)) ((((xPOINTER)).apply ((xc_int)))) ((xc_bool)))))
            xunlink_vsi_file.write (((xint_output)).apply ((((xstd_call)).apply ("VSIUnlink"))) ((((unsupported)).apply ((xc_char_p)))))