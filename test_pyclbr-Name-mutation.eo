memory > xBuiltinFunctionType
memory > xImportError
memory > xModuleNotFoundError
memory > xFunctionType
memory > xo1
memory > xMethodType
memory > xbase
memory > xp
memory > xhasattr
memory > xi
memory > xsys
memory > xdir
memory > xgetattr
memory > xname
memory > xstaticmethod
memory > x__import__
memory > xTestCase
memory > xt
memory > xvalue
memory > xpyclbr
memory > xdedent
memory > xprint
memory > xtype
memory > xf
memory > xset
memory > xglobals
memory > xob
memory > xm
memory > xisinstance
memory > xo2
memory > xclassmethod
memory > xClassMethodType
memory > x__name__
memory > xkey
[] > test_pyclbr
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_easy
        memory > xtest_importlib_util
        memory > xtest_others
        memory > xClassMethodType2
        memory > xtest_module_has_no_spec
        memory > xsetUp
        memory > xassertListEq
        memory > xtest_decorators
        memory > xassertHaskey
        memory > xassertEqualsOrIgnored
        memory > xtearDown
        memory > xStaticMethodType
        memory > xtest_dotted_name_not_a_package
        memory > xcheckModule
        memory > xassertHasattr
        memory > xunittest_main
        memory > xtest_nested
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xStaticMethodType.write (((xtype)).apply ((((xstaticmethod)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))))
            xClassMethodType2.write (((xtype)).apply ((((xclassmethod)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xassertListEq.write
                  [xself xl1 xl2 xignore]
                    memory > xmissing
                    seq > @
                      seq
                        unsupported
                        xmissing.write ((((unsupported)).apply ((((xset)).apply ((xl1)))) ((((xset)).apply ((xl2))))).sub (((xset)).apply ((xignore))))
                        (xmissing).if
                          seq
                            (((unsupported)).apply ((xprint)) (("l1=%rnl2=%rnignore=%r".mod (((unsupported)).apply ((xl1)) ((xl2)) ((xignore))))) (((xsys).xstderr)))
                            bogusForceDataize.write ((((xself).xfail)).apply (("%r missing".mod ((((xmissing).xpop)).apply))))
                xassertHasattr.write
                  [xself xobj xattr xignore]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xattr)) ((xignore))).if
                          (((unsupported)).apply)
                        ((((xhasattr)).apply ((xobj)) ((xattr))).not).if
                          bogusForceDataize.write (((xprint)).apply ("???") ((xattr)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xobj)) ((xattr)))) (("expected hasattr(%r, %r)".mod (((unsupported)).apply ((xobj)) ((xattr))))))
                xassertHaskey.write
                  [xself xobj xkey xignore]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xkey)) ((xignore))).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xkey)) ((xobj))).if
                          (((unsupported)).apply ((xprint)) ("***") ((xkey)) (((xsys).xstderr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xkey)) ((xobj)))
                xassertEqualsOrIgnored.write
                  [xself xa xb xignore]
                    seq > @
                      seq
                        unsupported
                        ((((unsupported)).apply ((xa)) ((xignore))).and (((unsupported)).apply ((xb)) ((xignore)))).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                xcheckModule.write
                  [xself xmoduleName xmodule xignore]
                    memory > xpyclbr_bases
                    memory > xfoundMethods
                    memory > xactualMethods
                    memory > xreal_bases
                    memory > xismethod
                    memory > xdefined_in
                    memory > xitem
                    memory > xpy_item
                    memory > xdict
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xignore.write ((((xset)).apply ((xignore))).or (((xset)).apply ((((unsupported)).apply ("object")))))
                        (((unsupported)).apply ((xmodule)) ("None: is there a None literal in the EO language?")).if
                          xmodule.write (((x__import__)).apply ((xmoduleName)) ((((xglobals)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ("<silly>"))))
                        xdict.write ((((xpyclbr).xreadmodule_ex)).apply ((xmoduleName)))
                        xismethod.write
                          [xoclass xobj xname]
                            memory > xobjname
                            memory > xclassdict
                            seq > @
                              seq
                                xclassdict.write ((xoclass).x__dict__)
                                (((xisinstance)).apply ((xobj)) ((xMethodType))).if
                                  (((((xisinstance)).apply ((((unsupported)).apply ((xclassdict)) ((xname)))) ((xClassMethodType))).not).or (((unsupported)).apply (((xobj).x__self__)) ((xoclass)))).if
                                    (((unsupported)).apply (FALSE))
                                  ((((xisinstance)).apply ((xobj)) ((xFunctionType))).not).if
                                    (((unsupported)).apply (FALSE))
                                xobjname.write ((xobj).x__name__)
                                (((((xobjname).xstartswith)).apply ("__")).and (((((xobjname).xendswith)).apply ("__")).not)).if
                                  xobjname.write ("_%s%s".mod (((unsupported)).apply (((xoclass).x__name__)) ((xobjname))))
                                (((unsupported)).apply (((xobjname).eq (xname))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xvalue)))) (((((xdict).xitems)).apply)))
                          seq
                            (((unsupported)).apply ((xname)) ((xignore))).if
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertHasattr)).apply ((xmodule)) ((xname)) ((xignore)))
                            xpy_item.write (((xgetattr)).apply ((xmodule)) ((xname)))
                            (((xisinstance)).apply ((xvalue)) (((xpyclbr).xFunction))).if
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpy_item)) ((((unsupported)).apply ((xFunctionType)) ((xBuiltinFunctionType)))))
                                (((xpy_item).x__module__).neq (xmoduleName)).if
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpy_item).x__module__)) (((xvalue).xmodule)))
                              seq
                                bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xpy_item)) ((xtype)))
                                (((xpy_item).x__module__).neq (xmoduleName)).if
                                  (((unsupported)).apply)
                                xreal_bases.write (((unsupported)).apply (((xbase).x__name__)) ((xbase)) (((xpy_item).x__bases__)))
                                xpyclbr_bases.write (((unsupported)).apply ((((xgetattr)).apply ((xbase)) ("name") ((xbase)))) ((xbase)) (((xvalue).xsuper)))
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((xself).xassertListEq)).apply ((xreal_bases)) ((xpyclbr_bases)) ((xignore)))
                                  seq
                                    (((unsupported)).apply ((xprint)) (("class=%s".mod (xpy_item))) (((xsys).xstderr)))
                                    (((unsupported)).apply)
                                xactualMethods.write (((unsupported)).apply)
                                (((unsupported)).apply ((xm)) ((((((xpy_item).x__dict__).xkeys)).apply)))
                                  (((xismethod)).apply ((xpy_item)) ((((xgetattr)).apply ((xpy_item)) ((xm)))) ((xm))).if
                                    bogusForceDataize.write ((((xactualMethods).xappend)).apply ((xm)))
                                xfoundMethods.write (((unsupported)).apply)
                                (((unsupported)).apply ((xm)) ((((((xvalue).xmethods).xkeys)).apply)))
                                  (((((unsupported)).apply ((xm)) ((((unsupported)).apply (2)))).eq "__").and ((((unsupported)).apply ((xm)) ((((unsupported)).apply ((2.neg))))).neq "__")).if
                                    bogusForceDataize.write ((((xfoundMethods).xappend)).apply ((("_".add (xname)).add (xm))))
                                    bogusForceDataize.write ((((xfoundMethods).xappend)).apply ((xm)))
                                (((unsupported)).apply)
                                  seq
                                    bogusForceDataize.write ((((xself).xassertListEq)).apply ((xfoundMethods)) ((xactualMethods)) ((xignore)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpy_item).x__module__)) (((xvalue).xmodule)))
                                    bogusForceDataize.write ((((xself).xassertEqualsOrIgnored)).apply (((xpy_item).x__name__)) (((xvalue).xname)) ((xignore)))
                                  seq
                                    (((unsupported)).apply ((xprint)) (("class=%s".mod (xpy_item))) (((xsys).xstderr)))
                                    (((unsupported)).apply)
                        xdefined_in.write
                          [xitem xmodule]
                            seq > @
                              seq
                                (((xisinstance)).apply ((xitem)) ((xtype))).if
                                  (((unsupported)).apply ((((xitem).x__module__).eq ((xmodule).x__name__))))
                                (((xisinstance)).apply ((xitem)) ((xFunctionType))).if
                                  (((unsupported)).apply ((((unsupported)).apply (((xitem).x__globals__)) (((xmodule).x__dict__)))))
                                (((unsupported)).apply (FALSE))
                        (((unsupported)).apply ((xname)) ((((xdir)).apply ((xmodule)))))
                          seq
                            xitem.write (((xgetattr)).apply ((xmodule)) ((xname)))
                            (((xisinstance)).apply ((xitem)) ((((unsupported)).apply ((xtype)) ((xFunctionType))))).if
                              (((xdefined_in)).apply ((xitem)) ((xmodule))).if
                                bogusForceDataize.write ((((xself).xassertHaskey)).apply ((xdict)) ((xname)) ((xignore)))
                xtest_easy.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheckModule)).apply ("pyclbr"))
                        (((unsupported)).apply (((xself).xcheckModule)) ("doctest") ((((unsupported)).apply ("TestResults") ("_SpoofOut") ("DocTestCase") ("_DocTestSuite"))))
                        (((unsupported)).apply (((xself).xcheckModule)) ("difflib") ((((unsupported)).apply ("Match"))))
                xtest_decorators.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheckModule)) ("test.pyclbr_input") ((((unsupported)).apply ("om"))))
                xtest_nested.write
                  [xself]
                    memory > xexpected
                    memory > xcompare
                    memory > xmb
                    memory > xf2
                    memory > xactual
                    memory > xF3
                    memory > xsource
                    memory > xC2
                    memory > xC0
                    memory > xF1
                    memory > xf1
                    memory > xC1
                    memory > xc1
                    memory > xf0
                    seq > @
                      seq
                        xmb.write (xpyclbr)
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((xp)) ((xf)) ((xt)) ((xi)))) ((((unsupported)).apply ("test") ("") ("test.py") ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        xsource.write (((xdedent)).apply ((((unsupported)).apply)))
                        xactual.write ((((xmb).x_create_tree)).apply ((xm)) ((xp)) ((xf)) ((xsource)) ((xt)) ((xi)))
                        xf0.write ((((xmb).xFunction)).apply ((xm)) ("f0") ((xf)) (1))
                        xf1.write ((((xmb).x_nest_function)).apply ((xf0)) ("f1") (2))
                        xf2.write ((((xmb).x_nest_function)).apply ((xf1)) ("f2") (3))
                        xc1.write ((((xmb).x_nest_class)).apply ((xf0)) ("c1") (5))
                        xC0.write ((((xmb).xClass)).apply ((xm)) ("C0") ("None: is there a None literal in the EO language?") ((xf)) (6))
                        xF1.write ((((xmb).x_nest_function)).apply ((xC0)) ("F1") (8))
                        xC1.write ((((xmb).x_nest_class)).apply ((xC0)) ("C1") (11))
                        xC2.write ((((xmb).x_nest_class)).apply ((xC1)) ("C2") (12))
                        xF3.write ((((xmb).x_nest_function)).apply ((xC2)) ("F3") (14))
                        xexpected.write (((unsupported)).apply ("f0") ((xf0)) ("C0") ((xC0)))
                        xcompare.write
                          [xparent1 xchildren1 xparent2 xchildren2]
                            memory > xt1
                            memory > xt2
                            seq > @
                              seq
                                (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xchildren1).xkeys)).apply)) (((((xchildren2).xkeys)).apply)))
                                (((unsupported)).apply ((xob)) (((((xchildren1).xvalues)).apply)))
                                  bogusForceDataize.write ((((xself).xassertIs)).apply (((xob).xparent)) ((xparent1)))
                                (((unsupported)).apply ((xob)) (((((xchildren2).xvalues)).apply)))
                                  bogusForceDataize.write ((((xself).xassertIs)).apply (((xob).xparent)) ((xparent2)))
                                (((unsupported)).apply ((xkey)) (((((xchildren1).xkeys)).apply)))
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xo1)) ((xo2)))) ((((unsupported)).apply ((((unsupported)).apply ((xchildren1)) ((xkey)))) ((((unsupported)).apply ((xchildren2)) ((xkey)))))))
                                    xt1.write (((unsupported)).apply ((((xtype)).apply ((xo1)))) (((xo1).xname)) (((xo1).xfile)) (((xo1).xmodule)) (((xo1).xlineno)))
                                    xt2.write (((unsupported)).apply ((((xtype)).apply ((xo2)))) (((xo2).xname)) (((xo2).xfile)) (((xo2).xmodule)) (((xo2).xlineno)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xt1)) ((xt2)))
                                    (((unsupported)).apply ((((xtype)).apply ((xo1)))) (((xmb).xClass))).if
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xo1).xmethods)) (((xo2).xmethods)))
                                    bogusForceDataize.write (((xcompare)).apply ((xo1)) (((xo1).xchildren)) ((xo2)) (((xo2).xchildren)))
                        bogusForceDataize.write (((xcompare)).apply ("None: is there a None literal in the EO language?") ((xactual)) ("None: is there a None literal in the EO language?") ((xexpected)))
                xtest_others.write
                  [xself]
                    memory > xcm
                    seq > @
                      seq
                        xcm.write ((xself).xcheckModule)
                        (((unsupported)).apply ((xcm)) ("random") ((((unsupported)).apply ("Random"))))
                        (((unsupported)).apply ((xcm)) ("cgi") ((((unsupported)).apply ("log"))))
                        (((unsupported)).apply ((xcm)) ("pickle") ((((unsupported)).apply ("partial") ("PickleBuffer"))))
                        (((unsupported)).apply ((xcm)) ("aifc") ((((unsupported)).apply ("openfp") ("_aifc_params"))))
                        (((unsupported)).apply ((xcm)) ("sre_parse") ((((unsupported)).apply ("dump") ("groups") ("pos"))))
                        bogusForceDataize.write (((xcm)).apply ("pdb"))
                        (((unsupported)).apply ((xcm)) ("pydoc") ((((unsupported)).apply ("input") ("output"))))
                        bogusForceDataize.write (((xcm)).apply ("email.parser"))
                        bogusForceDataize.write (((xcm)).apply ("test.test_pyclbr"))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_modules)) ((((((xpyclbr).x_modules).xcopy)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xpyclbr).x_modules)) (((xself).x_modules)))
                xtest_dotted_name_not_a_package.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xImportError)) (((xpyclbr).xreadmodule_ex)) ("asyncore.foo"))
                xtest_module_has_no_spec.write
                  [xself]
                    memory > xmodule_name
                    seq > @
                      seq
                        xmodule_name.write "doesnotexist"
                        (((unsupported)).apply ((((unsupported)).apply ((xmodule_name)) (((xpyclbr).x_modules)))))
                        (((unsupported)).apply (((((xtest_importlib_util).xuncache)).apply ((xmodule_name)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xModuleNotFoundError)))))
                            bogusForceDataize.write ((((xpyclbr).xreadmodule_ex)).apply ((xmodule_name)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xunittest_main)).apply)