memory > xmicro
memory > xfeature
memory > xstr
memory > xlevel
memory > xminor
memory > xint
memory > xhasattr
memory > xcompile
memory > xtuple
memory > xdir
memory > xgetattr
memory > xserial
memory > x__future__
memory > xname
memory > xunittest
memory > xisinstance
memory > xlen
memory > x__name__
memory > xmajor
[] > test___future__
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_attributes
        memory > xGOOD_SERIALS
        memory > xfeatures
        memory > xtest_names
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            xGOOD_SERIALS.write (((unsupported)).apply ("alpha") ("beta") ("candidate") ("final"))
            xfeatures.write ((x__future__).xall_feature_names)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_names.write
                  [xself]
                    memory > xobj
                    memory > xgiven_feature_names
                    seq > @
                      seq
                        xgiven_feature_names.write (((unsupported)).apply ((xfeatures)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xname)) ((((xdir)).apply ((x__future__)))))
                          seq
                            xobj.write (((xgetattr)).apply ((x__future__)) ((xname)) ("None: is there a None literal in the EO language?"))
                            ((((unsupported)).apply ((xobj)) ("None: is there a None literal in the EO language?")).and (((xisinstance)).apply ((xobj)) (((x__future__).x_Feature)))).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xname)) ((xgiven_feature_names)))) (("%r should have been in all_feature_names".mod (xname))))
                                bogusForceDataize.write ((((xgiven_feature_names).xremove)).apply ((xname)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xgiven_feature_names)))) (0) (("all_feature_names has too much: %r".mod (xgiven_feature_names))))
                xtest_attributes.write
                  [xself]
                    memory > xcheck
                    memory > xvalue
                    memory > xe
                    memory > xmandatory
                    memory > xoptional
                    memory > xa
                    seq > @
                      (((unsupported)).apply ((xfeature)) ((xfeatures)))
                        seq
                          xvalue.write (((xgetattr)).apply ((x__future__)) ((xfeature)))
                          xoptional.write ((xvalue).xgetOptionalRelease)
                          xmandatory.write ((xvalue).xgetMandatoryRelease)
                          xa.write ((xself).xassertTrue)
                          xe.write ((xself).xassertEqual)
                          xcheck.write
                            [xt xname]
                              seq > @
                                seq
                                  bogusForceDataize.write (((xa)).apply ((((xisinstance)).apply ((xt)) ((xtuple)))) (("%s isn't tuple".mod (xname))))
                                  bogusForceDataize.write (((xe)).apply ((((xlen)).apply ((xt)))) (5) (("%s isn't 5-tuple".mod (xname))))
                                  (((unsupported)).apply ((((unsupported)).apply ((xmajor)) ((xminor)) ((xmicro)) ((xlevel)) ((xserial)))) ((xt)))
                                  bogusForceDataize.write (((xa)).apply ((((xisinstance)).apply ((xmajor)) ((xint)))) (("%s major isn't int".mod (xname))))
                                  bogusForceDataize.write (((xa)).apply ((((xisinstance)).apply ((xminor)) ((xint)))) (("%s minor isn't int".mod (xname))))
                                  bogusForceDataize.write (((xa)).apply ((((xisinstance)).apply ((xmicro)) ((xint)))) (("%s micro isn't int".mod (xname))))
                                  bogusForceDataize.write (((xa)).apply ((((xisinstance)).apply ((xlevel)) ((xstr)))) (("%s level isn't string".mod (xname))))
                                  bogusForceDataize.write (((xa)).apply ((((unsupported)).apply ((xlevel)) ((xGOOD_SERIALS)))) (("%s level string has unknown value".mod (xname))))
                                  bogusForceDataize.write (((xa)).apply ((((xisinstance)).apply ((xserial)) ((xint)))) (("%s serial isn't int".mod (xname))))
                          bogusForceDataize.write (((xcheck)).apply ((xoptional)) ("optional"))
                          (((unsupported)).apply ((xmandatory)) ("None: is there a None literal in the EO language?")).if
                            seq
                              bogusForceDataize.write (((xcheck)).apply ((xmandatory)) ("mandatory"))
                              bogusForceDataize.write (((xa)).apply (((xoptional).less (xmandatory))) ("optional not less than mandatory, and mandatory not None"))
                          bogusForceDataize.write (((xa)).apply ((((xhasattr)).apply ((xvalue)) ("compiler_flag"))) ("feature is missing a .compiler_flag attr"))
                          bogusForceDataize.write (((xcompile)).apply ("") ("<test>") ("exec") (((xvalue).xcompiler_flag)))
                          bogusForceDataize.write (((xa)).apply ((((xisinstance)).apply ((((xgetattr)).apply ((xvalue)) ("compiler_flag"))) ((xint)))) (".compiler_flag isn't int"))
            ((x__name__).eq "__main__").if
              unsupported