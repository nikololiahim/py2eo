memory > xrange
memory > xerr
memory > xrandom
memory > xi
memory > xissubclass
memory > xfaulthandler
memory > xis_importable
memory > xevent
memory > xserialize
memory > xmin
memory > xImportError
memory > xsql_debug
memory > xParallelTestSuite
memory > xAttributeError
memory > xall
memory > xpickle
memory > xlist
memory > xRuntimeError
memory > xRemoteTestResult
memory > xindex
memory > xenumerate
memory > xDummyList
memory > xiter_test_cases
memory > xDebugSQLTextTestResult
memory > xValueError
memory > ximport_module
memory > xstr
memory > xio
memory > xlabel
memory > xwarnings
memory > xcaptured_stdout
memory > xTestCase
memory > xbuffer
memory > xcall_command
memory > xsubsuite
memory > xvalue
memory > xctypes
memory > xtest
memory > x_
memory > xalias
memory > xStopIteration
memory > xKeyError
memory > xlast_bin
memory > xtest_class
memory > xtextwrap
memory > xreversed
memory > xprint
memory > xtype
memory > xset
memory > xrepr
memory > xint
memory > xException
memory > xconnections
memory > xhasattr
memory > xsuper
memory > xRemovedInDjango50Warning
memory > xOrderedSet
memory > xsys
memory > xsorted
memory > xNullTimeKeeper
memory > xexc_type
memory > xargparse
memory > xShuffler
memory > xcls
memory > xargs
memory > xitertools
memory > xos
memory > xtraceback
memory > xis_package
memory > xitem
memory > xgetattr
memory > xmultiprocessing
memory > xdefaultdict
memory > xiter
memory > xe
memory > xexc_value
memory > xTimeKeeper
memory > xsubsuite_index
memory > xStringIO
memory > xclass_bins
memory > xzip
memory > xunittest
memory > xexc
memory > xfailfast
memory > xevents
memory > xnew_hash
memory > xkwargs
memory > xisinstance
memory > xRemoteTestRunner
memory > xlen
memory > xtests
memory > xSimpleTestCase
memory > xPDBDebugResult
memory > xTypeError
memory > xlogging
[] > runner
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xparallel_test_suite
        memory > xaddError
        memory > xload_with_patterns
        memory > xparallel_type
        memory > x_hash_item
        memory > x_run_subsuite
        memory > xstopTestRun
        memory > xprintErrorList
        memory > x__init__
        memory > xteardown_databases
        memory > xget_resultclass
        memory > xsetup_test_environment
        memory > xpdb
        memory > xtry_importing
        memory > xseed_display
        memory > xget_max_test_processes
        memory > xsetup_databases
        memory > xstartTest
        memory > xshuffle
        memory > xrun_suite
        memory > xdebug
        memory > xsetup_shuffler
        memory > xaddSubTest
        memory > xrun_tests
        memory > xtest_runner
        memory > xget_test_runner_kwargs
        memory > xreorder_tests
        memory > xreorder_test_bin
        memory > xrun_checks
        memory > x_exc_info_to_string
        memory > x__iter__
        memory > xsuite_result
        memory > xaddExpectedFailure
        memory > xcheck_picklable
        memory > x_teardown_databases
        memory > x_setup_databases
        memory > x_hash_text
        memory > xaddSkip
        memory > xtest_index
        memory > xstopTest
        memory > xbuild_suite
        memory > xteardown_test_environment
        memory > xcheck_subtest_picklable
        memory > xstartTestRun
        memory > xtblib
        memory > xresultclass
        memory > xappend
        memory > xtest_loader
        memory > x__getstate__
        memory > xshuffle_tests
        memory > x__slots__
        memory > xrunner_class
        memory > xinit_worker
        memory > xrun_subsuite
        memory > xhash_algorithm
        memory > x_get_databases
        memory > xlog
        memory > xrun
        memory > x_class_shuffle_key
        memory > xinitialize_suite
        memory > x_confirm_picklable
        memory > xtest_suite
        memory > xreorder_by
        memory > xfilter_tests_by_tags
        memory > xfind_top_level
        memory > x_init_worker
        memory > x_worker_id
        memory > xwasSuccessful
        memory > xadd_arguments
        memory > x_print_unpicklable_subtest
        memory > xshuffle_seed
        memory > xpartition_suite_by_case
        memory > xget_databases
        memory > xaddSuccess
        memory > xload_tests_for_label
        memory > xaddFailure
        memory > xaddUnexpectedSuccess
        memory > xtest_match_tags
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xtblib.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply (((xunittest).xTextTestResult)))
              seq
                x__init__.write
                  [xself xstream xdescriptions xverbosity]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xlogger)) (((((xlogging).xgetLogger)).apply ("django.db.backends"))))
                        bogusForceDataize.write (((((xself).xlogger).xsetLevel)).apply (((xlogging).xDEBUG)))
                        (((unsupported)).apply (((xself).xdebug_sql_stream)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xstream)) ((xdescriptions)) ((xverbosity)))
                xstartTest.write
                  [xself xtest]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xdebug_sql_stream)) ((((xStringIO)).apply)))
                        (((unsupported)).apply (((xself).xhandler)) (((((xlogging).xStreamHandler)).apply (((xself).xdebug_sql_stream)))))
                        bogusForceDataize.write (((((xself).xlogger).xaddHandler)).apply (((xself).xhandler)))
                        bogusForceDataize.write ((((((xsuper)).apply).xstartTest)).apply ((xtest)))
                xstopTest.write
                  [xself xtest]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xstopTest)).apply ((xtest)))
                        bogusForceDataize.write (((((xself).xlogger).xremoveHandler)).apply (((xself).xhandler)))
                        ((xself).xshowAll).if
                          seq
                            bogusForceDataize.write (((((xself).xdebug_sql_stream).xseek)).apply (0))
                            bogusForceDataize.write (((((xself).xstream).xwrite)).apply ((((((xself).xdebug_sql_stream).xread)).apply)))
                            bogusForceDataize.write (((((xself).xstream).xwriteln)).apply (((xself).xseparator2)))
                xaddError.write
                  [xself xtest xerr]
                    memory > xsql
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xaddError)).apply ((xtest)) ((xerr)))
                        (((unsupported)).apply (((xself).xdebug_sql_stream)) ("None: is there a None literal in the EO language?")).if
                          xsql.write ""
                          seq
                            bogusForceDataize.write (((((xself).xdebug_sql_stream).xseek)).apply (0))
                            xsql.write (((((xself).xdebug_sql_stream).xread)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xerrors)) ((1.neg)))) (((((unsupported)).apply (((xself).xerrors)) ((1.neg))).add (((unsupported)).apply ((xsql))))))
                xaddFailure.write
                  [xself xtest xerr]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xaddFailure)).apply ((xtest)) ((xerr)))
                        bogusForceDataize.write (((((xself).xdebug_sql_stream).xseek)).apply (0))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xfailures)) ((1.neg)))) (((((unsupported)).apply (((xself).xfailures)) ((1.neg))).add (((unsupported)).apply ((((((xself).xdebug_sql_stream).xread)).apply))))))
                xaddSubTest.write
                  [xself xtest xsubtest xerr]
                    memory > xerrors
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xaddSubTest)).apply ((xtest)) ((xsubtest)) ((xerr)))
                        (((unsupported)).apply ((xerr)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write (((((xself).xdebug_sql_stream).xseek)).apply (0))
                            xerrors.write ((((xissubclass)).apply ((((unsupported)).apply ((xerr)) (0))) (((xtest).xfailureException))).if ((xself).xfailures) ((xself).xerrors))
                            (((unsupported)).apply ((((unsupported)).apply ((xerrors)) ((1.neg)))) (((((unsupported)).apply ((xerrors)) ((1.neg))).add (((unsupported)).apply ((((((xself).xdebug_sql_stream).xread)).apply))))))
                xprintErrorList.write
                  [xself xflavour xerrors]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xtest)) ((xerr)) ((xsql_debug)))) ((xerrors)))
                        seq
                          bogusForceDataize.write (((((xself).xstream).xwriteln)).apply (((xself).xseparator1)))
                          bogusForceDataize.write (((((xself).xstream).xwriteln)).apply (("%s: %s".mod (((unsupported)).apply ((xflavour)) (((((xself).xgetDescription)).apply ((xtest))))))))
                          bogusForceDataize.write (((((xself).xstream).xwriteln)).apply (((xself).xseparator2)))
                          bogusForceDataize.write (((((xself).xstream).xwriteln)).apply ((xerr)))
                          bogusForceDataize.write (((((xself).xstream).xwriteln)).apply (((xself).xseparator2)))
                          bogusForceDataize.write (((((xself).xstream).xwriteln)).apply ((xsql_debug)))
            (((unsupported)).apply (((xunittest).xTextTestResult)))
              seq
                (((unsupported)).apply)
                xaddError.write
                  [xself xtest xerr]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xaddError)).apply ((xtest)) ((xerr)))
                        bogusForceDataize.write ((((xself).xdebug)).apply ((xerr)))
                xaddFailure.write
                  [xself xtest xerr]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xaddFailure)).apply ((xtest)) ((xerr)))
                        bogusForceDataize.write ((((xself).xdebug)).apply ((xerr)))
                xaddSubTest.write
                  [xself xtest xsubtest xerr]
                    seq > @
                      seq
                        (((unsupported)).apply ((xerr)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xdebug)).apply ((xerr)))
                        bogusForceDataize.write ((((((xsuper)).apply).xaddSubTest)).apply ((xtest)) ((xsubtest)) ((xerr)))
                xdebug.write
                  [xself xerror]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_restoreStdout)).apply)
                        (((unsupported)).apply (((xself).xbuffer)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((xexc_value)) ((xtraceback)))) ((xerror)))
                        bogusForceDataize.write (((xprint)).apply (("nOpening PDB: %r".mod (xexc_value))))
                        bogusForceDataize.write ((((xpdb).xpost_mortem)).apply ((xtraceback)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__slots__.write (((unsupported)).apply)
                xappend.write
                  [xself xitem]
                    seq > @
            (((unsupported)).apply (((xunittest).xTestResult)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself]
                    memory > xdummy_list
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        xdummy_list.write (((xDummyList)).apply)
                        (((unsupported)).apply (((xself).xfailures)) ((xdummy_list)))
                        (((unsupported)).apply (((xself).xerrors)) ((xdummy_list)))
                        (((unsupported)).apply (((xself).xskipped)) ((xdummy_list)))
                        (((unsupported)).apply (((xself).xexpectedFailures)) ((xdummy_list)))
                        (((unsupported)).apply (((xself).xunexpectedSuccesses)) ((xdummy_list)))
                        (((unsupported)).apply ((xtblib)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write (((((xtblib).xpickling_support).xinstall)).apply)
                        (((unsupported)).apply (((xself).xevents)) ((((unsupported)).apply)))
                x__getstate__.write
                  [xself]
                    memory > xstate
                    seq > @
                      seq
                        xstate.write (((((xself).x__dict__).xcopy)).apply)
                        bogusForceDataize.write ((((xstate).xpop)).apply ("_stdout_buffer") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xstate).xpop)).apply ("_stderr_buffer") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xstate).xpop)).apply ("_original_stdout") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xstate).xpop)).apply ("_original_stderr") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xstate)))
                xtest_index.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xtestsRun).sub 1)))
                x_confirm_picklable.write
                  [xself xobj]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xobj)))))
                x_print_unpicklable_subtest.write
                  [xself xtest xsubtest xpickle_exc]
                    seq > @
                      bogusForceDataize.write (((xprint)).apply (((((((unsupported)).apply).xformat)).apply ((xtest)) ((xsubtest)) ((xpickle_exc)))))
                xcheck_picklable.write
                  [xself xtest xerr]
                    memory > xpickle_exc_txt
                    memory > xoriginal_exc_txt
                    seq > @
                      (((unsupported)).apply ((xException)))
                        bogusForceDataize.write ((((xself).x_confirm_picklable)).apply ((xerr)))
                        seq
                          xoriginal_exc_txt.write (((xrepr)).apply ((((unsupported)).apply ((xerr)) (1))))
                          xoriginal_exc_txt.write (((unsupported)).apply (((xtextwrap).xfill)) ((xoriginal_exc_txt)) (75) ("    ") ("    "))
                          xpickle_exc_txt.write (((xrepr)).apply ((xexc)))
                          xpickle_exc_txt.write (((unsupported)).apply (((xtextwrap).xfill)) ((xpickle_exc_txt)) (75) ("    ") ("    "))
                          (((unsupported)).apply ((xtblib)) ("None: is there a None literal in the EO language?")).if
                            bogusForceDataize.write (((xprint)).apply (((((((unsupported)).apply).xformat)).apply ((xtest)) ((xoriginal_exc_txt)))))
                            bogusForceDataize.write (((xprint)).apply (((((((unsupported)).apply).xformat)).apply ((xtest)) ((xoriginal_exc_txt)) ((xpickle_exc_txt)))))
                          (((unsupported)).apply)
                xcheck_subtest_picklable.write
                  [xself xtest xsubtest]
                    seq > @
                      (((unsupported)).apply ((xException)))
                        bogusForceDataize.write ((((xself).x_confirm_picklable)).apply ((xsubtest)))
                        seq
                          bogusForceDataize.write ((((xself).x_print_unpicklable_subtest)).apply ((xtest)) ((xsubtest)) ((xexc)))
                          (((unsupported)).apply)
                xstartTestRun.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xstartTestRun)).apply)
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("startTestRun"))))
                xstopTestRun.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xstopTestRun)).apply)
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("stopTestRun"))))
                xstartTest.write
                  [xself xtest]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xstartTest)).apply ((xtest)))
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("startTest") (((xself).xtest_index)))))
                xstopTest.write
                  [xself xtest]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xstopTest)).apply ((xtest)))
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("stopTest") (((xself).xtest_index)))))
                xaddError.write
                  [xself xtest xerr]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_picklable)).apply ((xtest)) ((xerr)))
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("addError") (((xself).xtest_index)) ((xerr)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xaddError)).apply ((xtest)) ((xerr)))
                xaddFailure.write
                  [xself xtest xerr]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcheck_picklable)).apply ((xtest)) ((xerr)))
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("addFailure") (((xself).xtest_index)) ((xerr)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xaddFailure)).apply ((xtest)) ((xerr)))
                xaddSubTest.write
                  [xself xtest xsubtest xerr]
                    seq > @
                      seq
                        (((unsupported)).apply ((xerr)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write ((((xself).xcheck_picklable)).apply ((xtest)) ((xerr)))
                            bogusForceDataize.write ((((xself).xcheck_subtest_picklable)).apply ((xtest)) ((xsubtest)))
                            bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("addSubTest") (((xself).xtest_index)) ((xsubtest)) ((xerr)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xaddSubTest)).apply ((xtest)) ((xsubtest)) ((xerr)))
                xaddSuccess.write
                  [xself xtest]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("addSuccess") (((xself).xtest_index)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xaddSuccess)).apply ((xtest)))
                xaddSkip.write
                  [xself xtest xreason]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("addSkip") (((xself).xtest_index)) ((xreason)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xaddSkip)).apply ((xtest)) ((xreason)))
                xaddExpectedFailure.write
                  [xself xtest xerr]
                    seq > @
                      seq
                        (((unsupported)).apply ((xtblib)) ("None: is there a None literal in the EO language?")).if
                          xerr.write (((unsupported)).apply ((((unsupported)).apply ((xerr)) (0))) ((((unsupported)).apply ((xerr)) (1))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xcheck_picklable)).apply ((xtest)) ((xerr)))
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("addExpectedFailure") (((xself).xtest_index)) ((xerr)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xaddExpectedFailure)).apply ((xtest)) ((xerr)))
                xaddUnexpectedSuccess.write
                  [xself xtest]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xevents).xappend)).apply ((((unsupported)).apply ("addUnexpectedSuccess") (((xself).xtest_index)))))
                        bogusForceDataize.write ((((((xsuper)).apply).xaddUnexpectedSuccess)).apply ((xtest)))
                xwasSuccessful.write
                  [xself]
                    memory > xfailure_types
                    seq > @
                      seq
                        unsupported
                        xfailure_types.write (((unsupported)).apply ("addError") ("addFailure") ("addSubTest") ("addUnexpectedSuccess"))
                        (((unsupported)).apply ((((xall)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xe)) (0))) ((xfailure_types)))) ((xe)) (((xself).xevents)))))))
                x_exc_info_to_string.write
                  [xself xerr xtest]
                    seq > @
                      (((unsupported)).apply (""))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xresultclass.write (xRemoteTestResult)
                x__init__.write
                  [xself xfailfast xresultclass xbuffer]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfailfast)) ((xfailfast)))
                        (((unsupported)).apply (((xself).xbuffer)) ((xbuffer)))
                        (((unsupported)).apply ((xresultclass)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xresultclass)) ((xresultclass)))
                xrun.write
                  [xself xtest]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xresultclass)).apply)
                        bogusForceDataize.write ((((xunittest).xregisterResult)).apply ((xresult)))
                        (((unsupported)).apply (((xresult).xfailfast)) (((xself).xfailfast)))
                        (((unsupported)).apply (((xresult).xbuffer)) (((xself).xbuffer)))
                        bogusForceDataize.write (((xtest)).apply ((xresult)))
                        (((unsupported)).apply ((xresult)))
            xget_max_test_processes.write
              []
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((xmultiprocessing).xget_start_method)).apply)) ((((unsupported)).apply ("fork") ("spawn")))).if
                      (((unsupported)).apply (1))
                    (((unsupported)).apply ((xKeyError)))
                      (((unsupported)).apply ((((xint)).apply ((((unsupported)).apply (((xos).xenviron)) ("DJANGO_TEST_PROCESSES"))))))
                      (((unsupported)).apply (((((xmultiprocessing).xcpu_count)).apply)))
            xparallel_type.write
              [xvalue]
                seq > @
                  seq
                    unsupported
                    ((xvalue).eq "auto").if
                      (((unsupported)).apply ((xvalue)))
                    (((unsupported)).apply ((xValueError)))
                      (((unsupported)).apply ((((xint)).apply ((xvalue)))))
                      (((unsupported)).apply (((((xargparse).xArgumentTypeError)).apply ("{value!r} is not an integer or the string 'auto'"))))
            x_worker_id.write 0
            x_init_worker.write
              [xcounter xinitial_settings xserialized_contents xprocess_setup xprocess_setup_args]
                memory > x_worker_id
                memory > xconnection
                memory > xstart_method
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((xcounter).xget_lock)).apply)))
                      seq
                        (((unsupported)).apply (((xcounter).xvalue)) (1))
                        x_worker_id.write ((xcounter).xvalue)
                    xstart_method.write ((((xmultiprocessing).xget_start_method)).apply)
                    ((xstart_method).eq "spawn").if
                      seq
                        bogusForceDataize.write (((xprocess_setup)).apply ((((unsupported)).apply ((xprocess_setup_args)))))
                        bogusForceDataize.write (((xsetup_test_environment)).apply)
                    (((unsupported)).apply ((xalias)) ((xconnections)))
                      seq
                        xconnection.write (((unsupported)).apply ((xconnections)) ((xalias)))
                        ((xstart_method).eq "spawn").if
                          seq
                            bogusForceDataize.write (((((xconnection).xsettings_dict).xupdate)).apply ((((unsupported)).apply ((xinitial_settings)) ((xalias)))))
                            (((unsupported)).apply (((((xserialized_contents).xget)).apply ((xalias))))).if
                              (((unsupported)).apply (((xconnection).x_test_serialized_contents)) ((xvalue)))
                        bogusForceDataize.write (((((xconnection).xcreation).xsetup_worker_connection)).apply ((x_worker_id)))
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)))
                          (((unsupported)).apply ((xcall_command)) ("check") ((xconnections)))
            x_run_subsuite.write
              [xargs]
                memory > xresult
                memory > xrunner
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xrunner_class)) ((xsubsuite_index)) ((xsubsuite)) ((xfailfast)) ((xbuffer)))) ((xargs)))
                    xrunner.write (((unsupported)).apply ((xrunner_class)) ((xfailfast)) ((xbuffer)))
                    xresult.write ((((xrunner).xrun)).apply ((xsubsuite)))
                    (((unsupported)).apply ((((unsupported)).apply ((xsubsuite_index)) (((xresult).xevents)))))
            (((unsupported)).apply (((xunittest).xTestSuite)))
              seq
                (((unsupported)).apply)
                xinit_worker.write (x_init_worker)
                xrun_subsuite.write (x_run_subsuite)
                xrunner_class.write (xRemoteTestRunner)
                x__init__.write
                  [xself xsubsuites xprocesses xfailfast xbuffer]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xsubsuites)) ((xsubsuites)))
                        (((unsupported)).apply (((xself).xprocesses)) ((xprocesses)))
                        (((unsupported)).apply (((xself).xfailfast)) ((xfailfast)))
                        (((unsupported)).apply (((xself).xbuffer)) ((xbuffer)))
                        (((unsupported)).apply (((xself).xinitial_settings)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xserialized_contents)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                xrun.write
                  [xself xresult]
                    memory > xtest_results
                    memory > xpool
                    memory > xtest
                    memory > xargs
                    memory > xtests
                    memory > xevent_name
                    memory > xcounter
                    memory > xhandler
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xinitialize_suite)).apply)
                        xcounter.write ((((xmultiprocessing).xValue)).apply (((xctypes).xc_int)) (0))
                        xpool.write (((unsupported)).apply (((xmultiprocessing).xPool)) (((xself).xprocesses)) (((xself).xinit_worker)) ((((unsupported)).apply ((xcounter)) (((xself).xinitial_settings)) (((xself).xserialized_contents)))))
                        xargs.write (((unsupported)).apply ((((unsupported)).apply (((xself).xrunner_class)) ((xindex)) ((xsubsuite)) (((xself).xfailfast)) (((xself).xbuffer)))) ((((unsupported)).apply ((xindex)) ((xsubsuite)))) ((((xenumerate)).apply (((xself).xsubsuites)))))
                        xtest_results.write ((((xpool).ximap_unordered)).apply ((((xself).xrun_subsuite).x__func__)) ((xargs)))
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                ((xresult).xshouldStop).if
                                  seq
                                    bogusForceDataize.write ((((xpool).xterminate)).apply)
                                    (((unsupported)).apply)
                                (((unsupported)).apply (((xmultiprocessing).xTimeoutError)) ((xStopIteration)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xsubsuite_index)) ((xevents)))) ((((unsupported)).apply (((xtest_results).xnext)) (0.1))))
                                  (((unsupported)).apply)
                                  seq
                                    bogusForceDataize.write ((((xpool).xclose)).apply)
                                    (((unsupported)).apply)
                                xtests.write (((xlist)).apply ((((unsupported)).apply (((xself).xsubsuites)) ((xsubsuite_index)))))
                                (((unsupported)).apply ((xevent)) ((xevents)))
                                  seq
                                    xevent_name.write (((unsupported)).apply ((xevent)) (0))
                                    xhandler.write (((xgetattr)).apply ((xresult)) ((xevent_name)) ("None: is there a None literal in the EO language?"))
                                    (((unsupported)).apply ((xhandler)) ("None: is there a None literal in the EO language?")).if
                                      (((unsupported)).apply)
                                    xtest.write (((unsupported)).apply ((xtests)) ((((unsupported)).apply ((xevent)) (1))))
                                    xargs.write (((unsupported)).apply ((xevent)) ((((unsupported)).apply (2))))
                                    bogusForceDataize.write (((xhandler)).apply ((xtest)) ((((unsupported)).apply ((xargs)))))
                        bogusForceDataize.write ((((xpool).xjoin)).apply)
                        (((unsupported)).apply ((xresult)))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xiter)).apply (((xself).xsubsuites)))))
                xinitialize_suite.write
                  [xself]
                    seq > @
                      (((((xmultiprocessing).xget_start_method)).apply).eq "spawn").if
                        seq
                          (((unsupported)).apply (((xself).xinitial_settings)) ((((unsupported)).apply ((xalias)) (((((unsupported)).apply ((xconnections)) ((xalias))).xsettings_dict)) ((xalias)) ((xconnections)))))
                          (((unsupported)).apply (((xself).xserialized_contents)) ((((unsupported)).apply ((xalias)) (((((unsupported)).apply ((xconnections)) ((xalias))).x_test_serialized_contents)) ((xalias)) ((xconnections)) ((((unsupported)).apply ((xalias)) (((xself).xserialized_aliases)))))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xhash_algorithm.write "md5"
                x_hash_text.write
                  [xcls xtext]
                    memory > xh
                    seq > @
                      (((unsupported)).apply)
                        xh.write (((unsupported)).apply ((xnew_hash)) (((xcls).xhash_algorithm)) (FALSE))
                        bogusForceDataize.write ((((xh).xupdate)).apply (((((xtext).xencode)).apply ("utf-8"))))
                        (((unsupported)).apply (((((xh).xhexdigest)).apply)))
                x__init__.write
                  [xself xseed]
                    memory > xseed_source
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xseed)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xseed.write ((((xrandom).xrandint)).apply (0) (((((unsupported)).apply (10) (10)).sub 1)))
                            xseed_source.write "generated"
                          xseed_source.write "given"
                        (((unsupported)).apply (((xself).xseed)) ((xseed)))
                        (((unsupported)).apply (((xself).xseed_source)) ((xseed_source)))
                xseed_display.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ("{self.seed!r} ({self.seed_source})"))
                x_hash_item.write
                  [xself xitem xkey]
                    memory > xtext
                    seq > @
                      seq
                        xtext.write ((("{}{}".xformat)).apply (((xself).xseed)) ((((xkey)).apply ((xitem)))))
                        (((unsupported)).apply (((((xself).x_hash_text)).apply ((xtext)))))
                xshuffle.write
                  [xself xitems xkey]
                    memory > xhashed
                    memory > xmsg
                    memory > xhashes
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xhashes.write (((unsupported)).apply)
                        (((unsupported)).apply ((xitem)) ((xitems)))
                          seq
                            xhashed.write ((((xself).x_hash_item)).apply ((xitem)) ((xkey)))
                            (((unsupported)).apply ((xhashed)) ((xhashes))).if
                              seq
                                xmsg.write ((("item {!r} has same hash {!r} as item {!r}".xformat)).apply ((xitem)) ((xhashed)) ((((unsupported)).apply ((xhashes)) ((xhashed)))))
                                (((unsupported)).apply ((((xRuntimeError)).apply ((xmsg)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xhashes)) ((xhashed)))) ((xitem)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xhashes)) ((xhashed)))) ((xhashed)) ((((xsorted)).apply ((xhashes)))))))
            (((unsupported)).apply)
              seq
                unsupported
                xtest_suite.write ((xunittest).xTestSuite)
                xparallel_test_suite.write (xParallelTestSuite)
                xtest_runner.write ((xunittest).xTextTestRunner)
                xtest_loader.write ((xunittest).xdefaultTestLoader)
                xreorder_by.write (((unsupported)).apply ((xTestCase)) ((xSimpleTestCase)))
                x__init__.write
                  [xself xpattern xtop_level xverbosity xinteractive xfailfast xkeepdb xreverse xdebug_mode xdebug_sql xparallel xtags xexclude_tags xtest_name_patterns xpdb xbuffer xenable_faulthandler xtiming xshuffle xlogger]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xpattern)) ((xpattern)))
                        (((unsupported)).apply (((xself).xtop_level)) ((xtop_level)))
                        (((unsupported)).apply (((xself).xverbosity)) ((xverbosity)))
                        (((unsupported)).apply (((xself).xinteractive)) ((xinteractive)))
                        (((unsupported)).apply (((xself).xfailfast)) ((xfailfast)))
                        (((unsupported)).apply (((xself).xkeepdb)) ((xkeepdb)))
                        (((unsupported)).apply (((xself).xreverse)) ((xreverse)))
                        (((unsupported)).apply (((xself).xdebug_mode)) ((xdebug_mode)))
                        (((unsupported)).apply (((xself).xdebug_sql)) ((xdebug_sql)))
                        (((unsupported)).apply (((xself).xparallel)) ((xparallel)))
                        (((unsupported)).apply (((xself).xtags)) ((((xset)).apply (((xtags).or (((unsupported)).apply))))))
                        (((unsupported)).apply (((xself).xexclude_tags)) ((((xset)).apply (((xexclude_tags).or (((unsupported)).apply))))))
                        ((((((xfaulthandler).xis_enabled)).apply).not).and (xenable_faulthandler)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) (((xio).xUnsupportedOperation)))))
                            (((unsupported)).apply (((xfaulthandler).xenable)) ((((((xsys).xstderr).xfileno)).apply)))
                            (((unsupported)).apply (((xfaulthandler).xenable)) ((((((xsys).x__stderr__).xfileno)).apply)))
                        (((unsupported)).apply (((xself).xpdb)) ((xpdb)))
                        (((xself).xpdb).and (((xself).xparallel).greater 1)).if
                          (((unsupported)).apply ((((xValueError)).apply ("You cannot use --pdb with parallel tests; pass --parallel=1 to use it."))))
                        (((unsupported)).apply (((xself).xbuffer)) ((xbuffer)))
                        (((unsupported)).apply (((xself).xtest_name_patterns)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xtime_keeper)) (((xtiming).if (((xTimeKeeper)).apply) (((xNullTimeKeeper)).apply))))
                        (xtest_name_patterns).if
                          (((unsupported)).apply (((xself).xtest_name_patterns)) ((((unsupported)).apply (((((unsupported)).apply ("*") ((xpattern))).if (xpattern) ("*%s*".mod (xpattern)))) ((xpattern)) ((xtest_name_patterns)))))
                        (((unsupported)).apply (((xself).xshuffle)) ((xshuffle)))
                        (((unsupported)).apply (((xself).x_shuffler)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xlogger)) ((xlogger)))
                xadd_arguments.write
                  [xcls xparser]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xparser).xadd_argument)) ("-t") ("--top-level-directory") ("top_level") ("Top level of project for unittest discovery."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("-p") ("--pattern") ("test*.py") ("The test matching pattern. Defaults to test*.py."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--keepdb") ("store_false") ("Preserves the test DB between runs."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--shuffle") ("?") (FALSE) ((xint)) ("SEED") ("Shuffles test case order."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("-r") ("--reverse") ("store_false") ("Reverses test case order."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--debug-mode") ("store_false") ("Sets settings.DEBUG to True."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("-d") ("--debug-sql") ("store_false") ("Prints logged SQL queries on failure."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--parallel") ("?") ("auto") (0) ((xparallel_type)) ("N") ("Run tests using up to N parallel processes. Use the value \"auto\" to run one test process for each processor core."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--tag") ("append") ("tags") ("Run only tests with the specified tag. Can be used multiple times."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--exclude-tag") ("append") ("exclude_tags") ("Do not run tests with the specified tag. Can be used multiple times."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--pdb") ("store_false") ("Runs a debugger (pdb, or ipdb if installed) on error or failure."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("-b") ("--buffer") ("store_false") ("Discard output from passing tests."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--no-faulthandler") ("store_false") ("enable_faulthandler") ("Disables the Python faulthandler module during tests."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--timing") ("store_false") ("Output timings, including database set up and total run time."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("-k") ("append") ("test_name_patterns") ("Only run test methods and classes that match the pattern or substring. Can be used multiple times. Same as unittest -k option."))
                xshuffle_seed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_shuffler)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((xself).x_shuffler).xseed)))
                xlog.write
                  [xself xmsg xlevel]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xlevel)) ("None: is there a None literal in the EO language?")).if
                          xlevel.write ((xlogging).xINFO)
                        (((unsupported)).apply (((xself).xlogger)) ("None: is there a None literal in the EO language?")).if
                          seq
                            ((((xself).xverbosity).leq 0).or ((((xself).xverbosity).eq 1).and ((xlevel).less ((xlogging).xINFO)))).if
                              (((unsupported)).apply)
                            bogusForceDataize.write (((xprint)).apply ((xmsg)))
                          bogusForceDataize.write (((((xself).xlogger).xlog)).apply ((xlevel)) ((xmsg)))
                xsetup_test_environment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xsetup_test_environment)) (((xself).xdebug_mode)))
                        bogusForceDataize.write ((((xunittest).xinstallHandler)).apply)
                xsetup_shuffler.write
                  [xself]
                    memory > xshuffler
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xshuffle)) (FALSE)).if
                          (((unsupported)).apply)
                        xshuffler.write (((unsupported)).apply ((xShuffler)) (((xself).xshuffle)))
                        bogusForceDataize.write ((((xself).xlog)).apply ("Using shuffle seed: {shuffler.seed_display}"))
                        (((unsupported)).apply (((xself).x_shuffler)) ((xshuffler)))
                xload_with_patterns.write
                  [xself]
                    memory > xoriginal_test_name_patterns
                    seq > @
                      (((unsupported)).apply)
                        xoriginal_test_name_patterns.write (((xself).xtest_loader).xtestNamePatterns)
                        (((unsupported)).apply ((((xself).xtest_loader).xtestNamePatterns)) (((xself).xtest_name_patterns)))
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                          (((unsupported)).apply ((((xself).xtest_loader).xtestNamePatterns)) ((xoriginal_test_name_patterns)))
                xload_tests_for_label.write
                  [xself xlabel xdiscover_kwargs]
                    memory > xtests
                    memory > xkwargs
                    memory > xlabel_as_path
                    seq > @
                      seq
                        xlabel_as_path.write (((((xos).xpath).xabspath)).apply ((xlabel)))
                        xtests.write "None: is there a None literal in the EO language?"
                        ((((((xos).xpath).xexists)).apply ((xlabel_as_path))).not).if
                          seq
                            (((unsupported)).apply (((((xself).xload_with_patterns)).apply)))
                              xtests.write (((((xself).xtest_loader).xloadTestsFromName)).apply ((xlabel)))
                            ((((xtests).xcountTestCases)).apply).if
                              (((unsupported)).apply ((xtests)))
                        (((unsupported)).apply ((((unsupported)).apply ((xis_importable)) ((xis_package)))) ((((xtry_importing)).apply ((xlabel)))))
                        (xis_importable).if
                          ((xis_package).not).if
                            (((unsupported)).apply ((xtests)))
                          ((((((xos).xpath).xisdir)).apply ((xlabel_as_path))).not).if
                            seq
                              (((((xos).xpath).xexists)).apply ((xlabel_as_path))).if
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xtests)) ("None: is there a None literal in the EO language?"))))
                                  (((unsupported)).apply ((((xRuntimeError)).apply ("One of the test labels is a path to a file: {label!r}, which is not supported. Use a dotted module name or path to a directory instead."))))
                              (((unsupported)).apply ((xtests)))
                        xkwargs.write ((((xdiscover_kwargs).xcopy)).apply)
                        ((((((xos).xpath).xisdir)).apply ((xlabel_as_path))).and (((xself).xtop_level).not)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("top_level_dir"))) ((((xfind_top_level)).apply ((xlabel_as_path)))))
                        (((unsupported)).apply (((((xself).xload_with_patterns)).apply)))
                          xtests.write (((unsupported)).apply ((((xself).xtest_loader).xdiscover)) ((xlabel)) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply ((((xself).xtest_loader).x_top_level_dir)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xtests)))
                xbuild_suite.write
                  [xself xtest_labels xextra_tests]
                    memory > xtest_types
                    memory > xall_tests
                    memory > xsubsuites
                    memory > xdiscover_kwargs
                    memory > xprocesses
                    memory > xsuite
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xextra_tests)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xwarnings).xwarn)) ("The extra_tests argument is deprecated.") ((xRemovedInDjango50Warning)) (2))
                        xtest_labels.write ((xtest_labels).or (((unsupported)).apply (".")))
                        xextra_tests.write ((xextra_tests).or (((unsupported)).apply))
                        xdiscover_kwargs.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xpattern)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdiscover_kwargs)) ("pattern"))) (((xself).xpattern)))
                        (((unsupported)).apply (((xself).xtop_level)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdiscover_kwargs)) ("top_level_dir"))) (((xself).xtop_level)))
                        bogusForceDataize.write ((((xself).xsetup_shuffler)).apply)
                        xall_tests.write (((unsupported)).apply)
                        (((unsupported)).apply ((xlabel)) ((xtest_labels)))
                          seq
                            xtests.write ((((xself).xload_tests_for_label)).apply ((xlabel)) ((xdiscover_kwargs)))
                            bogusForceDataize.write ((((xall_tests).xextend)).apply ((((xiter_test_cases)).apply ((xtests)))))
                        bogusForceDataize.write ((((xall_tests).xextend)).apply ((((xiter_test_cases)).apply ((xextra_tests)))))
                        (((xself).xtags).or ((xself).xexclude_tags)).if
                          seq
                            ((xself).xtags).if
                              (((unsupported)).apply (((xself).xlog)) (("Including test tag(s): %s.".mod (((", ".xjoin)).apply ((((xsorted)).apply (((xself).xtags))))))) (((xlogging).xDEBUG)))
                            ((xself).xexclude_tags).if
                              (((unsupported)).apply (((xself).xlog)) (("Excluding test tag(s): %s.".mod (((", ".xjoin)).apply ((((xsorted)).apply (((xself).xexclude_tags))))))) (((xlogging).xDEBUG)))
                            xall_tests.write (((xfilter_tests_by_tags)).apply ((xall_tests)) (((xself).xtags)) (((xself).xexclude_tags)))
                        xtest_types.write (((unsupported)).apply ((((xunittest).xloader).x_FailedTest)) ((((unsupported)).apply (((xself).xreorder_by)))))
                        xall_tests.write (((xlist)).apply ((((unsupported)).apply ((xreorder_tests)) ((xall_tests)) ((xtest_types)) (((xself).x_shuffler)) (((xself).xreverse)))))
                        bogusForceDataize.write ((((xself).xlog)).apply (("Found %d test(s).".mod (((xlen)).apply ((xall_tests))))))
                        xsuite.write ((((xself).xtest_suite)).apply ((xall_tests)))
                        (((xself).xparallel).greater 1).if
                          seq
                            xsubsuites.write (((xpartition_suite_by_case)).apply ((xsuite)))
                            xprocesses.write (((xmin)).apply (((xself).xparallel)) ((((xlen)).apply ((xsubsuites)))))
                            (((unsupported)).apply (((xself).xparallel)) ((xprocesses)))
                            ((xprocesses).greater 1).if
                              xsuite.write ((((xself).xparallel_test_suite)).apply ((xsubsuites)) ((xprocesses)) (((xself).xfailfast)) (((xself).xbuffer)))
                        (((unsupported)).apply ((xsuite)))
                xsetup_databases.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((x_setup_databases)) (((xself).xverbosity)) (((xself).xinteractive)) (((xself).xtime_keeper)) (((xself).xkeepdb)) (((xself).xdebug_sql)) (((xself).xparallel)) ((((unsupported)).apply ((xkwargs)))))))
                xget_resultclass.write
                  [xself]
                    seq > @
                      ((xself).xdebug_sql).if
                        (((unsupported)).apply ((xDebugSQLTextTestResult)))
                        ((xself).xpdb).if
                          (((unsupported)).apply ((xPDBDebugResult)))
                xget_test_runner_kwargs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ("failfast") (((xself).xfailfast)) ("resultclass") (((((xself).xget_resultclass)).apply)) ("verbosity") (((xself).xverbosity)) ("buffer") (((xself).xbuffer)))))
                xrun_checks.write
                  [xself xdatabases]
                    seq > @
                      (((unsupported)).apply ((xcall_command)) ("check") (((xself).xverbosity)) ((xdatabases)))
                xrun_suite.write
                  [xself xsuite]
                    memory > xseed_display
                    memory > xkwargs
                    memory > xrunner
                    seq > @
                      (((unsupported)).apply)
                        xkwargs.write ((((xself).xget_test_runner_kwargs)).apply)
                        xrunner.write ((((xself).xtest_runner)).apply ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((((xrunner).xrun)).apply ((xsuite)))))
                          (((unsupported)).apply (((xself).x_shuffler)) ("None: is there a None literal in the EO language?")).if
                            seq
                              xseed_display.write (((xself).x_shuffler).xseed_display)
                              bogusForceDataize.write ((((xself).xlog)).apply ("Used shuffle seed: {seed_display}"))
                xteardown_databases.write
                  [xself xold_config]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((x_teardown_databases)) ((xold_config)) (((xself).xverbosity)) (((xself).xparallel)) (((xself).xkeepdb)))
                xteardown_test_environment.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xunittest).xremoveHandler)).apply)
                        bogusForceDataize.write (((xteardown_test_environment)).apply)
                xsuite_result.write
                  [xself xsuite xresult]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xlen)).apply (((xresult).xfailures))).add (((xlen)).apply (((xresult).xerrors)))).add (((xlen)).apply (((xresult).xunexpectedSuccesses))))))
                x_get_databases.write
                  [xself xsuite]
                    memory > xdatabases
                    memory > xtest_databases
                    memory > xserialized_rollback
                    seq > @
                      seq
                        xdatabases.write (((unsupported)).apply)
                        (((unsupported)).apply ((xtest)) ((((xiter_test_cases)).apply ((xsuite)))))
                          seq
                            xtest_databases.write (((xgetattr)).apply ((xtest)) ("databases") ("None: is there a None literal in the EO language?"))
                            ((xtest_databases).eq "__all__").if
                              xtest_databases.write (xconnections)
                            (xtest_databases).if
                              seq
                                xserialized_rollback.write (((xgetattr)).apply ((xtest)) ("serialized_rollback") (FALSE))
                                bogusForceDataize.write ((((xdatabases).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((xalias)) (((xserialized_rollback).or ((((xdatabases).xget)).apply ((xalias)) (FALSE)))))) ((xalias)) ((xtest_databases)))))
                        (((unsupported)).apply ((xdatabases)))
                xget_databases.write
                  [xself xsuite]
                    memory > xunused_databases
                    memory > xdatabases
                    seq > @
                      seq
                        xdatabases.write ((((xself).x_get_databases)).apply ((xsuite)))
                        xunused_databases.write (((unsupported)).apply ((xalias)) ((xalias)) ((xconnections)) ((((unsupported)).apply ((xalias)) ((xdatabases)))))
                        (xunused_databases).if
                          (((unsupported)).apply (((xself).xlog)) (("Skipping setup of unused database(s): %s.".mod (((", ".xjoin)).apply ((((xsorted)).apply ((xunused_databases))))))) (((xlogging).xDEBUG)))
                        (((unsupported)).apply ((xdatabases)))
                xrun_tests.write
                  [xself xtest_labels xextra_tests]
                    memory > xold_config
                    memory > xdatabases
                    memory > xrun_failed
                    memory > xsuite
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xextra_tests)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xwarnings).xwarn)) ("The extra_tests argument is deprecated.") ((xRemovedInDjango50Warning)) (2))
                        bogusForceDataize.write ((((xself).xsetup_test_environment)).apply)
                        xsuite.write ((((xself).xbuild_suite)).apply ((xtest_labels)) ((xextra_tests)))
                        xdatabases.write ((((xself).xget_databases)).apply ((xsuite)))
                        (((unsupported)).apply (((xsuite).xserialized_aliases)) ((((xset)).apply ((((unsupported)).apply ((xalias)) ((((unsupported)).apply ((xalias)) ((xserialize)))) (((((xdatabases).xitems)).apply)) ((xserialize)))))))
                        (((unsupported)).apply ((((((xself).xtime_keeper).xtimed)).apply ("Total database setup"))))
                          xold_config.write (((unsupported)).apply (((xself).xsetup_databases)) ((xdatabases)) (((xsuite).xserialized_aliases)))
                        xrun_failed.write FALSE
                        (((unsupported)).apply ((xException)))
                          seq
                            bogusForceDataize.write ((((xself).xrun_checks)).apply ((xdatabases)))
                            xresult.write ((((xself).xrun_suite)).apply ((xsuite)))
                          seq
                            xrun_failed.write TRUE
                            (((unsupported)).apply)
                          (((unsupported)).apply ((xException)))
                            seq
                              (((unsupported)).apply ((((((xself).xtime_keeper).xtimed)).apply ("Total database teardown"))))
                                bogusForceDataize.write ((((xself).xteardown_databases)).apply ((xold_config)))
                              bogusForceDataize.write ((((xself).xteardown_test_environment)).apply)
                            ((xrun_failed).not).if
                              (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xtime_keeper).xprint_results)).apply)
                        (((unsupported)).apply (((((xself).xsuite_result)).apply ((xsuite)) ((xresult)))))
            xtry_importing.write
              [xlabel]
                memory > xmod
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xImportError)) ((xTypeError)))))
                      xmod.write (((ximport_module)).apply ((xlabel)))
                      (((unsupported)).apply ((((unsupported)).apply (FALSE) (FALSE))))
                    (((unsupported)).apply ((((unsupported)).apply (TRUE) ((((xhasattr)).apply ((xmod)) ("__path__"))))))
            xfind_top_level.write
              [xtop_level]
                memory > xtry_next
                memory > xinit_py
                seq > @
                  seq
                    while.
                      TRUE
                      [unused]
                        seq > @
                          seq
                            xinit_py.write (((((xos).xpath).xjoin)).apply ((xtop_level)) ("__init__.py"))
                            ((((((xos).xpath).xexists)).apply ((xinit_py))).not).if
                              (((unsupported)).apply)
                            xtry_next.write (((((xos).xpath).xdirname)).apply ((xtop_level)))
                            ((xtry_next).eq (xtop_level)).if
                              (((unsupported)).apply)
                            xtop_level.write (xtry_next)
                    (((unsupported)).apply ((xtop_level)))
            x_class_shuffle_key.write
              [xcls]
                seq > @
                  (((unsupported)).apply ("{cls.__module__}.{cls.__qualname__}"))
            xshuffle_tests.write
              [xtests xshuffler]
                memory > xtests_by_type
                memory > xtest_type
                memory > xclasses
                memory > xclass_tests
                seq > @
                  seq
                    (((unsupported)).apply)
                    xtests_by_type.write (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xclass_tests)))) (((((xitertools).xgroupby)).apply ((xtests)) ((xtype)))))
                      seq
                        xclass_tests.write (((xlist)).apply ((xclass_tests)))
                        xtest_type.write (((xtype)).apply ((((unsupported)).apply ((xclass_tests)) (0))))
                        xclass_tests.write (((unsupported)).apply (((xshuffler).xshuffle)) ((xclass_tests)) ((((unsupported)).apply (((((xtest).xid)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtests_by_type)) ((xtest_type)))) ((xclass_tests)))
                    xclasses.write (((unsupported)).apply (((xshuffler).xshuffle)) ((xtests_by_type)) ((x_class_shuffle_key)))
                    (((unsupported)).apply (((((xitertools).xchain)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xtests_by_type)) ((xcls)))) ((xcls)) ((xclasses)))))))))
            xreorder_test_bin.write
              [xtests xshuffler xreverse]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xshuffler)) ("None: is there a None literal in the EO language?")).if
                      seq
                        (xreverse).if
                          (((unsupported)).apply ((((xreversed)).apply ((xtests)))))
                        (((unsupported)).apply ((((xiter)).apply ((xtests)))))
                    xtests.write (((xshuffle_tests)).apply ((xtests)) ((xshuffler)))
                    ((xreverse).not).if
                      (((unsupported)).apply ((xtests)))
                    (((unsupported)).apply ((((xreversed)).apply ((((xlist)).apply ((xtests)))))))
            xreorder_tests.write
              [xtests xclasses xreverse xshuffler]
                memory > xtest_bin
                memory > xbins
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbins.write (((unsupported)).apply ((((xdefaultdict)).apply ((xOrderedSet)))) ((xi)) ((((xrange)).apply (((((xlen)).apply ((xclasses))).add 1)))))
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xclass_bins)))) ((xlast_bin)))) ((xbins)))
                    (((unsupported)).apply ((xtest)) ((xtests)))
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xtest_bin)) ((xtest_class)))) ((((xzip)).apply ((xclass_bins)) ((xclasses)))))
                          (((xisinstance)).apply ((xtest)) ((xtest_class))).if
                            (((unsupported)).apply)
                          xtest_bin.write (xlast_bin)
                        bogusForceDataize.write ((((((unsupported)).apply ((xtest_bin)) ((((xtype)).apply ((xtest))))).xadd)).apply ((xtest)))
                    (((unsupported)).apply ((xtest_bin)) ((xbins)))
                      seq
                        xtests.write (((xlist)).apply ((((((xitertools).xchain).xfrom_iterable)).apply (((((xtest_bin).xvalues)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xreorder_test_bin)) ((xtests)) ((xshuffler)) ((xreverse)))))
            xpartition_suite_by_case.write
              [xsuite]
                memory > xsuite_class
                memory > xall_tests
                seq > @
                  seq
                    unsupported
                    xsuite_class.write (((xtype)).apply ((xsuite)))
                    xall_tests.write (((xiter_test_cases)).apply ((xsuite)))
                    (((unsupported)).apply ((((unsupported)).apply ((((xsuite_class)).apply ((xtests)))) ((((unsupported)).apply ((x_)) ((xtests)))) (((((xitertools).xgroupby)).apply ((xall_tests)) ((xtype)))))))
            xtest_match_tags.write
              [xtest xtags xexclude_tags]
                memory > xtest_fn
                memory > xtest_tags
                memory > xtest_fn_tags
                memory > xtest_fn_name
                seq > @
                  seq
                    (((xisinstance)).apply ((xtest)) ((((xunittest).xloader).x_FailedTest))).if
                      (((unsupported)).apply (TRUE))
                    xtest_tags.write (((xset)).apply ((((xgetattr)).apply ((xtest)) ("tags") ((((unsupported)).apply)))))
                    xtest_fn_name.write (((xgetattr)).apply ((xtest)) ("_testMethodName") ((((xstr)).apply ((xtest)))))
                    (((xhasattr)).apply ((xtest)) ((xtest_fn_name))).if
                      seq
                        xtest_fn.write (((xgetattr)).apply ((xtest)) ((xtest_fn_name)))
                        xtest_fn_tags.write (((xlist)).apply ((((xgetattr)).apply ((xtest_fn)) ("tags") ((((unsupported)).apply)))))
                        xtest_tags.write ((((xtest_tags).xunion)).apply ((xtest_fn_tags)))
                    ((xtags).and ((((xtest_tags).xisdisjoint)).apply ((xtags)))).if
                      (((unsupported)).apply (FALSE))
                    (((unsupported)).apply (((((xtest_tags).xisdisjoint)).apply ((xexclude_tags)))))
            xfilter_tests_by_tags.write
              [xtests xtags xexclude_tags]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xtest)) ((xtest)) ((xtests)) ((((xtest_match_tags)).apply ((xtest)) ((xtags)) ((xexclude_tags)))))))