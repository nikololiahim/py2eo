memory > xsmin
memory > xlist
memory > xGDALBand
memory > xforce_str
memory > xGDAL_COLOR_TYPES
memory > xint
memory > xx
memory > xsuper
memory > xfloat
memory > xGDALRasterBase
memory > xc_double
memory > xidx
memory > xc_void_p
memory > xValueError
memory > xGDAL_INTEGER_TYPES
memory > xsmean
memory > xrange
memory > xreversed
memory > xany
memory > xbyref
memory > xc_int
memory > xsstd
memory > xbytes
memory > xtuple
memory > xGDALException
memory > xsmax
memory > xnumpy
memory > xGDAL_TO_CTYPES
memory > xmemoryview
memory > xisinstance
memory > xGDAL_PIXEL_TYPES
memory > xlen
[] > band
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xmin
        memory > x__iter__
        memory > xstatistics
        memory > xmax
        memory > xstd
        memory > xwidth
        memory > x_flush
        memory > xdatatype
        memory > x__len__
        memory > xcolor_interp
        memory > xmean
        memory > xnodata_value
        memory > xdata
        memory > xdescription
        memory > x__getitem__
        memory > xpixel_count
        memory > x__init__
        memory > xcapi
        memory > xheight
        memory > x_stats_refresh
        seq > @
          seq
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xGDALRasterBase)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xsource xindex]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xsource)) ((xsource)))
                        (((unsupported)).apply (((xself).x_ptr)) (((((xcapi).xget_ds_raster_band)).apply (((xsource).x_ptr)) ((xindex)))))
                x_flush.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xsource).x_flush)).apply)
                        (((unsupported)).apply (((xself).x_stats_refresh)) (TRUE))
                xdescription.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xforce_str)).apply (((((xcapi).xget_band_description)).apply (((xself).x_ptr)))))))
                xwidth.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xget_band_xsize)).apply (((xself).x_ptr)))))
                xheight.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xcapi).xget_band_ysize)).apply (((xself).x_ptr)))))
                xpixel_count.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xwidth).mul ((xself).xheight))))
                x_stats_refresh.write FALSE
                xstatistics.write
                  [xself xrefresh xapproximate]
                    memory > xforce
                    memory > xstats_args
                    memory > xresult
                    memory > xfunc
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xsmin)) ((xsmax)) ((xsmean)) ((xsstd)))) ((((unsupported)).apply ((((xc_double)).apply)) ((((xc_double)).apply)) ((((xc_double)).apply)) ((((xc_double)).apply)))))
                        xstats_args.write (((unsupported)).apply (((xself).x_ptr)) ((((xc_int)).apply ((xapproximate)))) ((((xbyref)).apply ((xsmin)))) ((((xbyref)).apply ((xsmax)))) ((((xbyref)).apply ((xsmean)))) ((((xbyref)).apply ((xsstd)))) ((((xc_void_p)).apply)) ((((xc_void_p)).apply)))
                        ((xrefresh).or ((xself).x_stats_refresh)).if
                          xfunc.write ((xcapi).xcompute_band_statistics)
                          seq
                            xforce.write TRUE
                            bogusForceDataize.write ((((xstats_args).xinsert)).apply (2) ((((xc_int)).apply ((xforce)))))
                            xfunc.write ((xcapi).xget_band_statistics)
                        (((unsupported)).apply ((xGDALException)))
                          seq
                            bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply ((xstats_args)))))
                            xresult.write (((unsupported)).apply (((xsmin).xvalue)) (((xsmax).xvalue)) (((xsmean).xvalue)) (((xsstd).xvalue)))
                          xresult.write (((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).x_stats_refresh)) (FALSE))
                        (((unsupported)).apply ((xresult)))
                xmin.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xself).xstatistics)).apply)) (0))))
                xmax.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xself).xstatistics)).apply)) (1))))
                xmean.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xself).xstatistics)).apply)) (2))))
                xstd.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xself).xstatistics)).apply)) (3))))
                xnodata_value.write
                  [xself]
                    memory > xvalue
                    memory > xnodata_exists
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xnodata_exists.write (((xc_int)).apply)
                        xvalue.write ((((xcapi).xget_band_nodata_value)).apply (((xself).x_ptr)) ((xnodata_exists)))
                        ((xnodata_exists).not).if
                          xvalue.write "None: is there a None literal in the EO language?"
                          (((unsupported)).apply (((((xself).xdatatype)).apply)) ((xGDAL_INTEGER_TYPES))).if
                            xvalue.write (((xint)).apply ((xvalue)))
                        (((unsupported)).apply ((xvalue)))
                xnodata_value.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xcapi).xdelete_band_nodata_value)).apply (((xself).x_ptr)))
                          ((((xisinstance)).apply ((xvalue)) ((((unsupported)).apply ((xint)) ((xfloat))))).not).if
                            (((unsupported)).apply ((((xValueError)).apply ("Nodata value must be numeric or None."))))
                            bogusForceDataize.write ((((xcapi).xset_band_nodata_value)).apply (((xself).x_ptr)) ((xvalue)))
                        bogusForceDataize.write ((((xself).x_flush)).apply)
                xdatatype.write
                  [xself xas_string]
                    memory > xdtype
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdtype.write ((((xcapi).xget_band_datatype)).apply (((xself).x_ptr)))
                        (xas_string).if
                          xdtype.write (((unsupported)).apply ((xGDAL_PIXEL_TYPES)) ((xdtype)))
                        (((unsupported)).apply ((xdtype)))
                xcolor_interp.write
                  [xself xas_string]
                    memory > xcolor
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xcolor.write ((((xcapi).xget_band_color_interp)).apply (((xself).x_ptr)))
                        (xas_string).if
                          xcolor.write (((unsupported)).apply ((xGDAL_COLOR_TYPES)) ((xcolor)))
                        (((unsupported)).apply ((xcolor)))
                xdata.write
                  [xself xdata xoffset xsize xshape xas_memoryview]
                    memory > xaccess_flag
                    memory > xctypes_array
                    memory > xdata_array
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoffset.write ((xoffset).or (((unsupported)).apply (0) (0)))
                        xsize.write ((xsize).or (((unsupported)).apply ((((xself).xwidth).sub (((unsupported)).apply ((xoffset)) (0)))) ((((xself).xheight).sub (((unsupported)).apply ((xoffset)) (1))))))
                        xshape.write ((xshape).or (xsize))
                        (((xany)).apply ((((unsupported)).apply (((xx).leq 0)) ((xx)) ((xsize))))).if
                          (((unsupported)).apply ((((xValueError)).apply ("Offset too big for this raster."))))
                        (((((unsupported)).apply ((xsize)) (0)).greater ((xself).xwidth)).or ((((unsupported)).apply ((xsize)) (1)).greater ((xself).xheight))).if
                          (((unsupported)).apply ((((xValueError)).apply ("Size is larger than raster."))))
                        xctypes_array.write ((((unsupported)).apply ((xGDAL_TO_CTYPES)) (((((xself).xdatatype)).apply))).mul ((((unsupported)).apply ((xshape)) (0)).mul (((unsupported)).apply ((xshape)) (1))))
                        (((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xaccess_flag.write 0
                            xdata_array.write (((xctypes_array)).apply)
                          seq
                            xaccess_flag.write 1
                            ((((xisinstance)).apply ((xdata)) ((((unsupported)).apply ((xbytes)) ((xmemoryview))))).or ((xnumpy).and (((xisinstance)).apply ((xdata)) (((xnumpy).xndarray))))).if
                              xdata_array.write ((((xctypes_array).xfrom_buffer_copy)).apply ((xdata)))
                              xdata_array.write (((xctypes_array)).apply ((((unsupported)).apply ((xdata)))))
                        bogusForceDataize.write ((((xcapi).xband_io)).apply (((xself).x_ptr)) ((xaccess_flag)) ((((unsupported)).apply ((xoffset)) (0))) ((((unsupported)).apply ((xoffset)) (1))) ((((unsupported)).apply ((xsize)) (0))) ((((unsupported)).apply ((xsize)) (1))) ((((xbyref)).apply ((xdata_array)))) ((((unsupported)).apply ((xshape)) (0))) ((((unsupported)).apply ((xshape)) (1))) (((((xself).xdatatype)).apply)) (0) (0))
                        (((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?")).if
                          (xas_memoryview).if
                            (((unsupported)).apply ((((xmemoryview)).apply ((xdata_array)))))
                            (xnumpy).if
                              (((unsupported)).apply (((((((unsupported)).apply (((xnumpy).xfrombuffer)) ((xdata_array)) (((((xnumpy).xdtype)).apply ((xdata_array))))).xreshape)).apply ((((xtuple)).apply ((((xreversed)).apply ((xsize)))))))))
                              (((unsupported)).apply ((((xlist)).apply ((xdata_array)))))
                          bogusForceDataize.write ((((xself).x_flush)).apply)
            (((unsupported)).apply ((xlist)))
              seq
                x__init__.write
                  [xself xsource]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xsource)) ((xsource)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xidx)) ((((xrange)).apply (1) (((((xlen)).apply ((xself))).add 1)))))
                        (((unsupported)).apply ((((xGDALBand)).apply (((xself).xsource)) ((xidx)))))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xcapi).xget_ds_raster_count)).apply ((((xself).xsource).x_ptr)))))
                x__getitem__.write
                  [xself xindex]
                    seq > @
                      (((unsupported)).apply ((xGDALException)))
                        (((unsupported)).apply ((((xGDALBand)).apply (((xself).xsource)) (((xindex).add 1)))))
                        (((unsupported)).apply ((((xGDALException)).apply (("Unable to get band index %d".mod (xindex))))))