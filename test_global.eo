memory > xcheck_syntax_error
memory > xwarnings
memory > xcompile
memory > xunittest
memory > xGlobalTests
memory > x__name__
memory > xrun_unittest
memory > xcheck_warnings
[] > test_global
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest2
        memory > xtest1
        memory > xtest3
        memory > xtest_main
        memory > xsetUp
        memory > xtearDown
        memory > xtest4
        seq > @
          seq
            unsupported
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_warnings_manager)) ((((xcheck_warnings)).apply)))
                        bogusForceDataize.write (((((xself).x_warnings_manager).x__enter__)).apply)
                        (((unsupported)).apply (((xwarnings).xfilterwarnings)) ("error") ("<test string>"))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).x_warnings_manager).x__exit__)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest1.write
                  [xself]
                    memory > xprog_text_1
                    seq > @
                      seq
                        xprog_text_1.write (((unsupported)).apply)
                        (((unsupported)).apply ((xcheck_syntax_error)) ((xself)) ((xprog_text_1)) (4) (5))
                xtest2.write
                  [xself]
                    memory > xprog_text_2
                    seq > @
                      seq
                        xprog_text_2.write (((unsupported)).apply)
                        (((unsupported)).apply ((xcheck_syntax_error)) ((xself)) ((xprog_text_2)) (3) (5))
                xtest3.write
                  [xself]
                    memory > xprog_text_3
                    seq > @
                      seq
                        xprog_text_3.write (((unsupported)).apply)
                        (((unsupported)).apply ((xcheck_syntax_error)) ((xself)) ((xprog_text_3)) (4) (5))
                xtest4.write
                  [xself]
                    memory > xprog_text_4
                    seq > @
                      seq
                        xprog_text_4.write (((unsupported)).apply)
                        bogusForceDataize.write (((xcompile)).apply ((xprog_text_4)) ("<test string>") ("exec"))
            xtest_main.write
              []
                seq > @
                  (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                    seq
                      (((unsupported)).apply (((xwarnings).xfilterwarnings)) ("error") ("<test string>"))
                      bogusForceDataize.write (((xrun_unittest)).apply ((xGlobalTests)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)