memory > xtag_func
memory > ximport_module
memory > xViewDoesNotExist
memory > xp
memory > xrepr
memory > xremove_non_capturing_groups
memory > xsuper
memory > xname
memory > xisinstance
memory > xnamespace
memory > xinspect
memory > xsafe_join
memory > xget_view_name
memory > xget_urlconf
memory > xlibrary
memory > xfield
memory > xget_resolver
memory > xImportError
memory > xadmin
memory > xrel
memory > xenumerate
memory > xexclude
memory > xmodule_name
memory > xindex
memory > xklass
memory > xfunc_accepts_var_args
memory > xstr
memory > xfunc_accepts_kwargs
memory > xapps
memory > xfunc
memory > xEngine
memory > xreplace_unnamed_groups
memory > xget_func_full_args
memory > xStopIteration
memory > xTemplateView2
memory > xcleandoc
memory > xmethod_has_no_args
memory > xcached_property
memory > xPath
memory > xtag_name
memory > xhasattr
memory > xreplace_metacharacters
memory > xproperty
memory > xm
memory > xreplace_named_groups
memory > xHttp404
memory > xsorted
memory > xutils
memory > xargs
memory > xget_mod_func
memory > xLookupError
memory > xfunc_name
memory > xgetattr
memory > xmod
memory > xlib
memory > xmetadata
memory > xarg_el
memory > xfilter_func
memory > xfilter_name
memory > xBaseAdminDocsView
memory > xmodels
memory > xregex
memory > xmap
memory > xdirectory
memory > xImproperlyConfigured
memory > xkwargs
memory > xTypeError
memory > xkey
[] > views
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdispatch
        memory > x_
        memory > xMODEL_METHODS_EXCLUDE
        memory > x_get_view_func
        memory > xextract_views_from_urlpatterns
        memory > xget_return_data_type
        memory > xget_readable_field_data_type
        memory > xsimplify_regex
        memory > xget_context_data
        memory > xtemplate_name
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xMODEL_METHODS_EXCLUDE.write (((unsupported)).apply ("_") ("add_") ("delete") ("save") ("set_"))
            (((unsupported)).apply ((xTemplateView2)))
              seq
                (((unsupported)).apply)
                xdispatch.write
                  [xself xrequest]
                    seq > @
                      (((unsupported)).apply)
                        (((xutils).xdocutils_is_available).not).if
                          seq
                            (((unsupported)).apply (((xself).xtemplate_name)) ("admin_doc/missing_docutils.html"))
                            (((unsupported)).apply (((((xself).xrender_to_response)).apply ((((((xadmin).xsite).xeach_context)).apply ((xrequest)))))))
                        (((unsupported)).apply (((((((xsuper)).apply).xdispatch)).apply ((xrequest)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xget_context_data.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((((xsuper)).apply).xget_context_data)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ((((((xadmin).xsite).xeach_context)).apply (((xself).xrequest)))))))))))
            (((unsupported)).apply ((xBaseAdminDocsView)))
              xtemplate_name.write "admin_doc/bookmarklets.html"
            (((unsupported)).apply ((xBaseAdminDocsView)))
              seq
                xtemplate_name.write "admin_doc/template_tag_index.html"
                xget_context_data.write
                  [xself]
                    memory > xbuiltin_libs
                    memory > xtags
                    memory > xbody
                    memory > xtitle
                    memory > xtag_library
                    memory > xengine
                    memory > xapp_libs
                    seq > @
                      (((unsupported)).apply)
                        xtags.write (((unsupported)).apply)
                        (((unsupported)).apply ((xImproperlyConfigured)))
                          xengine.write ((((xEngine).xget_default)).apply)
                          seq
                            xapp_libs.write (((xsorted)).apply ((((((xengine).xtemplate_libraries).xitems)).apply)))
                            xbuiltin_libs.write (((unsupported)).apply ((((unsupported)).apply ("") ((xlib)))) ((xlib)) (((xengine).xtemplate_builtins)))
                            (((unsupported)).apply ((((unsupported)).apply ((xmodule_name)) ((xlibrary)))) (((xbuiltin_libs).add (xapp_libs))))
                              (((unsupported)).apply ((((unsupported)).apply ((xtag_name)) ((xtag_func)))) ((((((xlibrary).xtags).xitems)).apply)))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xtitle)) ((xbody)) ((xmetadata)))) (((((xutils).xparse_docstring)).apply (((xtag_func).x__doc__)))))
                                  xtitle.write ((xtitle).and ((((xutils).xparse_rst)).apply ((xtitle)) ("tag") (((((x_)).apply ("tag:")).add (xtag_name)))))
                                  xbody.write ((xbody).and ((((xutils).xparse_rst)).apply ((xbody)) ("tag") (((((x_)).apply ("tag:")).add (xtag_name)))))
                                  (((unsupported)).apply ((xkey)) ((xmetadata)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xmetadata)) ((xkey)))) (((((xutils).xparse_rst)).apply ((((unsupported)).apply ((xmetadata)) ((xkey)))) ("tag") (((((x_)).apply ("tag:")).add (xtag_name))))))
                                  xtag_library.write (((unsupported)).apply (((((xmodule_name).xsplit)).apply ("."))) ((1.neg)))
                                  bogusForceDataize.write ((((xtags).xappend)).apply ((((unsupported)).apply ("name") ((xtag_name)) ("title") ((xtitle)) ("body") ((xbody)) ("meta") ((xmetadata)) ("library") ((xtag_library)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_context_data)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("tags") ((xtags)))))))))
            (((unsupported)).apply ((xBaseAdminDocsView)))
              seq
                xtemplate_name.write "admin_doc/template_filter_index.html"
                xget_context_data.write
                  [xself]
                    memory > xbuiltin_libs
                    memory > xbody
                    memory > xtitle
                    memory > xtag_library
                    memory > xfilters
                    memory > xengine
                    memory > xapp_libs
                    seq > @
                      (((unsupported)).apply)
                        xfilters.write (((unsupported)).apply)
                        (((unsupported)).apply ((xImproperlyConfigured)))
                          xengine.write ((((xEngine).xget_default)).apply)
                          seq
                            xapp_libs.write (((xsorted)).apply ((((((xengine).xtemplate_libraries).xitems)).apply)))
                            xbuiltin_libs.write (((unsupported)).apply ((((unsupported)).apply ("") ((xlib)))) ((xlib)) (((xengine).xtemplate_builtins)))
                            (((unsupported)).apply ((((unsupported)).apply ((xmodule_name)) ((xlibrary)))) (((xbuiltin_libs).add (xapp_libs))))
                              (((unsupported)).apply ((((unsupported)).apply ((xfilter_name)) ((xfilter_func)))) ((((((xlibrary).xfilters).xitems)).apply)))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xtitle)) ((xbody)) ((xmetadata)))) (((((xutils).xparse_docstring)).apply (((xfilter_func).x__doc__)))))
                                  xtitle.write ((xtitle).and ((((xutils).xparse_rst)).apply ((xtitle)) ("filter") (((((x_)).apply ("filter:")).add (xfilter_name)))))
                                  xbody.write ((xbody).and ((((xutils).xparse_rst)).apply ((xbody)) ("filter") (((((x_)).apply ("filter:")).add (xfilter_name)))))
                                  (((unsupported)).apply ((xkey)) ((xmetadata)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xmetadata)) ((xkey)))) (((((xutils).xparse_rst)).apply ((((unsupported)).apply ((xmetadata)) ((xkey)))) ("filter") (((((x_)).apply ("filter:")).add (xfilter_name))))))
                                  xtag_library.write (((unsupported)).apply (((((xmodule_name).xsplit)).apply ("."))) ((1.neg)))
                                  bogusForceDataize.write ((((xfilters).xappend)).apply ((((unsupported)).apply ("name") ((xfilter_name)) ("title") ((xtitle)) ("body") ((xbody)) ("meta") ((xmetadata)) ("library") ((xtag_library)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_context_data)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("filters") ((xfilters)))))))))
            (((unsupported)).apply ((xBaseAdminDocsView)))
              seq
                xtemplate_name.write "admin_doc/view_index.html"
                xget_context_data.write
                  [xself]
                    memory > xviews
                    memory > xurl_resolver
                    memory > xview_functions
                    seq > @
                      (((unsupported)).apply)
                        xviews.write (((unsupported)).apply)
                        xurl_resolver.write (((xget_resolver)).apply ((((xget_urlconf)).apply)))
                        (((unsupported)).apply ((xImproperlyConfigured)))
                          xview_functions.write (((xextract_views_from_urlpatterns)).apply (((xurl_resolver).xurl_patterns)))
                          xview_functions.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xregex)) ((xnamespace)) ((xname)))) ((xview_functions)))
                          bogusForceDataize.write ((((xviews).xappend)).apply ((((unsupported)).apply ("full_name") ((((xget_view_name)).apply ((xfunc)))) ("url") ((((xsimplify_regex)).apply ((xregex)))) ("url_name") ((((":".xjoin)).apply ((((xnamespace).or (((unsupported)).apply)).add (((xname).and (((unsupported)).apply ((xname)))).or (((unsupported)).apply)))))) ("namespace") ((((":".xjoin)).apply (((xnamespace).or (((unsupported)).apply))))) ("name") ((xname)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_context_data)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("views") ((xviews)))))))))
            (((unsupported)).apply ((xBaseAdminDocsView)))
              seq
                xtemplate_name.write "admin_doc/view_detail.html"
                x_get_view_func.write
                  [xview]
                    memory > xurlconf
                    seq > @
                      (((unsupported)).apply)
                        xurlconf.write (((xget_urlconf)).apply)
                        ((((((xget_resolver)).apply ((xurlconf))).x_is_callback)).apply ((xview))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xmod)) ((xfunc)))) ((((xget_mod_func)).apply ((xview)))))
                            (((unsupported)).apply ((xImportError)))
                              (((unsupported)).apply ((((xgetattr)).apply ((((ximport_module)).apply ((xmod)))) ((xfunc)))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xmod)) ((xklass)))) ((((xget_mod_func)).apply ((xmod)))))
                                (((unsupported)).apply ((((xgetattr)).apply ((((xgetattr)).apply ((((ximport_module)).apply ((xmod)))) ((xklass)))) ((xfunc)))))
                xget_context_data.write
                  [xself]
                    memory > xview_func
                    memory > xtitle
                    memory > xview
                    memory > xbody
                    seq > @
                      (((unsupported)).apply)
                        xview.write (((unsupported)).apply (((xself).xkwargs)) ("view"))
                        xview_func.write ((((xself).x_get_view_func)).apply ((xview)))
                        (((unsupported)).apply ((xview_func)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xHttp404)))
                        (((unsupported)).apply ((((unsupported)).apply ((xtitle)) ((xbody)) ((xmetadata)))) (((((xutils).xparse_docstring)).apply (((xview_func).x__doc__)))))
                        xtitle.write ((xtitle).and ((((xutils).xparse_rst)).apply ((xtitle)) ("view") (((((x_)).apply ("view:")).add (xview)))))
                        xbody.write ((xbody).and ((((xutils).xparse_rst)).apply ((xbody)) ("view") (((((x_)).apply ("view:")).add (xview)))))
                        (((unsupported)).apply ((xkey)) ((xmetadata)))
                          (((unsupported)).apply ((((unsupported)).apply ((xmetadata)) ((xkey)))) (((((xutils).xparse_rst)).apply ((((unsupported)).apply ((xmetadata)) ((xkey)))) ("model") (((((x_)).apply ("view:")).add (xview))))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_context_data)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("name") ((xview)) ("summary") ((xtitle)) ("body") ((xbody)) ("meta") ((xmetadata)))))))))
            (((unsupported)).apply ((xBaseAdminDocsView)))
              seq
                xtemplate_name.write "admin_doc/model_index.html"
                xget_context_data.write
                  [xself]
                    memory > xm_list
                    seq > @
                      (((unsupported)).apply)
                        xm_list.write (((unsupported)).apply (((xm).x_meta)) ((xm)) (((((xapps).xget_models)).apply)))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_context_data)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("models") ((xm_list)))))))))
            (((unsupported)).apply ((xBaseAdminDocsView)))
              seq
                xtemplate_name.write "admin_doc/model_detail.html"
                xget_context_data.write
                  [xself]
                    memory > xmethods
                    memory > xaccessor
                    memory > xarguments
                    memory > xprint_arguments
                    memory > xbody
                    memory > xtitle
                    memory > xmodel_name
                    memory > xapp_config
                    memory > xopts
                    memory > xfields
                    memory > xapp_label
                    memory > xverbose
                    memory > xdata_type
                    memory > xmodel
                    seq > @
                      (((unsupported)).apply)
                        xmodel_name.write (((unsupported)).apply (((xself).xkwargs)) ("model_name"))
                        (((unsupported)).apply ((xLookupError)))
                          xapp_config.write ((((xapps).xget_app_config)).apply ((((unsupported)).apply (((xself).xkwargs)) ("app_label"))))
                          (((unsupported)).apply ((((xHttp404)).apply (((((x_)).apply ("App %(app_label)r not found")).mod ((xself).xkwargs))))))
                        (((unsupported)).apply ((xLookupError)))
                          xmodel.write ((((xapp_config).xget_model)).apply ((xmodel_name)))
                          (((unsupported)).apply ((((xHttp404)).apply (((((x_)).apply ("Model %(model_name)r not found in app %(app_label)r")).mod ((xself).xkwargs))))))
                        xopts.write ((xmodel).x_meta)
                        (((unsupported)).apply ((((unsupported)).apply ((xtitle)) ((xbody)) ((xmetadata)))) (((((xutils).xparse_docstring)).apply (((xmodel).x__doc__)))))
                        xtitle.write ((xtitle).and ((((xutils).xparse_rst)).apply ((xtitle)) ("model") (((((x_)).apply ("model:")).add (xmodel_name)))))
                        xbody.write ((xbody).and ((((xutils).xparse_rst)).apply ((xbody)) ("model") (((((x_)).apply ("model:")).add (xmodel_name)))))
                        xfields.write (((unsupported)).apply)
                        (((unsupported)).apply ((xfield)) (((xopts).xfields)))
                          seq
                            (((xisinstance)).apply ((xfield)) (((xmodels).xForeignKey))).if
                              seq
                                xdata_type.write ((((xfield).xremote_field).xmodel).x__name__)
                                xapp_label.write (((((xfield).xremote_field).xmodel).x_meta).xapp_label)
                                xverbose.write ((((xutils).xparse_rst)).apply (((((x_)).apply ("the related `%(app_label)s.%(data_type)s` object")).mod (((unsupported)).apply ("app_label") ((xapp_label)) ("data_type") ((xdata_type))))) ("model") (((((x_)).apply ("model:")).add (xdata_type))))
                              seq
                                xdata_type.write (((xget_readable_field_data_type)).apply ((xfield)))
                                xverbose.write ((xfield).xverbose_name)
                            bogusForceDataize.write ((((xfields).xappend)).apply ((((unsupported)).apply ("name") (((xfield).xname)) ("data_type") ((xdata_type)) ("verbose") (((xverbose).or "")) ("help_text") (((xfield).xhelp_text)))))
                        (((unsupported)).apply ((xfield)) (((xopts).xmany_to_many)))
                          seq
                            xdata_type.write ((((xfield).xremote_field).xmodel).x__name__)
                            xapp_label.write (((((xfield).xremote_field).xmodel).x_meta).xapp_label)
                            xverbose.write ((((x_)).apply ("related `%(app_label)s.%(object_name)s` objects")).mod (((unsupported)).apply ("app_label") ((xapp_label)) ("object_name") ((xdata_type))))
                            bogusForceDataize.write ((((xfields).xappend)).apply ((((unsupported)).apply ("name") (("%s.all".mod ((xfield).xname))) ("data_type") ("List") ("verbose") (((((xutils).xparse_rst)).apply (((((x_)).apply ("all %s")).mod (xverbose))) ("model") (((((x_)).apply ("model:")).add ((xopts).xmodel_name))))))))
                            bogusForceDataize.write ((((xfields).xappend)).apply ((((unsupported)).apply ("name") (("%s.count".mod ((xfield).xname))) ("data_type") ("Integer") ("verbose") (((((xutils).xparse_rst)).apply (((((x_)).apply ("number of %s")).mod (xverbose))) ("model") (((((x_)).apply ("model:")).add ((xopts).xmodel_name))))))))
                        xmethods.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xfunc_name)) ((xfunc)))) ((((((xmodel).x__dict__).xitems)).apply)))
                          (((((xinspect).xisfunction)).apply ((xfunc))).or (((xisinstance)).apply ((xfunc)) ((((unsupported)).apply ((xcached_property)) ((xproperty)))))).if
                            seq
                              (((unsupported)).apply ((xStopIteration)))
                                (((unsupported)).apply ((xexclude)) ((xMODEL_METHODS_EXCLUDE)))
                                  ((((xfunc_name).xstartswith)).apply ((xexclude))).if
                                    (((unsupported)).apply ((xStopIteration)))
                                (((unsupported)).apply)
                              xverbose.write ((xfunc).x__doc__)
                              xverbose.write ((xverbose).and ((((xutils).xparse_rst)).apply ((((xcleandoc)).apply ((xverbose)))) ("model") (((((x_)).apply ("model:")).add ((xopts).xmodel_name)))))
                              (((xisinstance)).apply ((xfunc)) ((((unsupported)).apply ((xcached_property)) ((xproperty))))).if
                                bogusForceDataize.write ((((xfields).xappend)).apply ((((unsupported)).apply ("name") ((xfunc_name)) ("data_type") ((((xget_return_data_type)).apply ((xfunc_name)))) ("verbose") (((xverbose).or "")))))
                                (((((xmethod_has_no_args)).apply ((xfunc))).and ((((xfunc_accepts_kwargs)).apply ((xfunc))).not)).and ((((xfunc_accepts_var_args)).apply ((xfunc))).not)).if
                                  bogusForceDataize.write ((((xfields).xappend)).apply ((((unsupported)).apply ("name") ((xfunc_name)) ("data_type") ((((xget_return_data_type)).apply ((xfunc_name)))) ("verbose") (((xverbose).or "")))))
                                  seq
                                    xarguments.write (((xget_func_full_args)).apply ((xfunc)))
                                    xprint_arguments.write (((", ".xjoin)).apply ((((unsupported)).apply (((("=".xjoin)).apply ((((unsupported)).apply ((((unsupported)).apply ((xarg_el)) (0))) ((((unsupported)).apply ((((xmap)).apply ((xrepr)) ((((unsupported)).apply ((xarg_el)) ((((unsupported)).apply (1))))))))))))) ((xarg_el)) ((xarguments)))))
                                    bogusForceDataize.write ((((xmethods).xappend)).apply ((((unsupported)).apply ("name") ((xfunc_name)) ("arguments") ((xprint_arguments)) ("verbose") (((xverbose).or "")))))
                        (((unsupported)).apply ((xrel)) (((xopts).xrelated_objects)))
                          seq
                            xverbose.write ((((x_)).apply ("related `%(app_label)s.%(object_name)s` objects")).mod (((unsupported)).apply ("app_label") (((((xrel).xrelated_model).x_meta).xapp_label)) ("object_name") (((((xrel).xrelated_model).x_meta).xobject_name))))
                            xaccessor.write ((((xrel).xget_accessor_name)).apply)
                            bogusForceDataize.write ((((xfields).xappend)).apply ((((unsupported)).apply ("name") (("%s.all".mod (xaccessor))) ("data_type") ("List") ("verbose") (((((xutils).xparse_rst)).apply (((((x_)).apply ("all %s")).mod (xverbose))) ("model") (((((x_)).apply ("model:")).add ((xopts).xmodel_name))))))))
                            bogusForceDataize.write ((((xfields).xappend)).apply ((((unsupported)).apply ("name") (("%s.count".mod (xaccessor))) ("data_type") ("Integer") ("verbose") (((((xutils).xparse_rst)).apply (((((x_)).apply ("number of %s")).mod (xverbose))) ("model") (((((x_)).apply ("model:")).add ((xopts).xmodel_name))))))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_context_data)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("name") (((xopts).xlabel)) ("summary") ((xtitle)) ("description") ((xbody)) ("fields") ((xfields)) ("methods") ((xmethods)))))))))
            (((unsupported)).apply ((xBaseAdminDocsView)))
              seq
                xtemplate_name.write "admin_doc/template_detail.html"
                xget_context_data.write
                  [xself]
                    memory > xtemplates
                    memory > xtemplate
                    memory > xtemplate_file
                    memory > xdefault_engine
                    memory > xtemplate_contents
                    seq > @
                      (((unsupported)).apply)
                        xtemplate.write (((unsupported)).apply (((xself).xkwargs)) ("template"))
                        xtemplates.write (((unsupported)).apply)
                        (((unsupported)).apply ((xImproperlyConfigured)))
                          xdefault_engine.write ((((xEngine).xget_default)).apply)
                          (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((xdirectory)))) ((((xenumerate)).apply (((xdefault_engine).xdirs)))))
                            seq
                              xtemplate_file.write (((xPath)).apply ((((xsafe_join)).apply ((xdirectory)) ((xtemplate)))))
                              ((((xtemplate_file).xexists)).apply).if
                                xtemplate_contents.write ((((xtemplate_file).xread_text)).apply)
                                xtemplate_contents.write ""
                              bogusForceDataize.write ((((xtemplates).xappend)).apply ((((unsupported)).apply ("file") ((xtemplate_file)) ("exists") (((((xtemplate_file).xexists)).apply)) ("contents") ((xtemplate_contents)) ("order") ((xindex)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_context_data)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkwargs)) ("name") ((xtemplate)) ("templates") ((xtemplates)))))))))
            xget_return_data_type.write
              [xfunc_name]
                seq > @
                  seq
                    unsupported
                    ((((xfunc_name).xstartswith)).apply ("get_")).if
                      ((((xfunc_name).xendswith)).apply ("_list")).if
                        (((unsupported)).apply ("List"))
                        ((((xfunc_name).xendswith)).apply ("_count")).if
                          (((unsupported)).apply ("Integer"))
                    (((unsupported)).apply (""))
            xget_readable_field_data_type.write
              [xfield]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xfield).xdescription).mod ((xfield).x__dict__))))
            xextract_views_from_urlpatterns.write
              [xurlpatterns xbase xnamespace]
                memory > xpatterns
                memory > xviews
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xviews.write (((unsupported)).apply)
                    (((unsupported)).apply ((xp)) ((xurlpatterns)))
                      (((xhasattr)).apply ((xp)) ("url_patterns")).if
                        seq
                          (((unsupported)).apply ((xImportError)))
                            xpatterns.write ((xp).xurl_patterns)
                            (((unsupported)).apply)
                          bogusForceDataize.write ((((xviews).xextend)).apply ((((xextract_views_from_urlpatterns)).apply ((xpatterns)) (((xbase).add (((xstr)).apply (((xp).xpattern))))) ((((xnamespace).or (((unsupported)).apply)).add ((((xp).xnamespace).and (((unsupported)).apply (((xp).xnamespace)))).or (((unsupported)).apply)))))))
                        (((xhasattr)).apply ((xp)) ("callback")).if
                          (((unsupported)).apply ((xViewDoesNotExist)))
                            bogusForceDataize.write ((((xviews).xappend)).apply ((((unsupported)).apply (((xp).xcallback)) (((xbase).add (((xstr)).apply (((xp).xpattern))))) ((xnamespace)) (((xp).xname)))))
                            (((unsupported)).apply)
                          (((unsupported)).apply ((((xTypeError)).apply (((((x_)).apply ("%s does not appear to be a urlpattern object")).mod (xp))))))
                    (((unsupported)).apply ((xviews)))
            xsimplify_regex.write
              [xpattern]
                seq > @
                  seq
                    (((unsupported)).apply)
                    xpattern.write (((xremove_non_capturing_groups)).apply ((xpattern)))
                    xpattern.write (((xreplace_named_groups)).apply ((xpattern)))
                    xpattern.write (((xreplace_unnamed_groups)).apply ((xpattern)))
                    xpattern.write (((xreplace_metacharacters)).apply ((xpattern)))
                    (((((xpattern).xstartswith)).apply ("/")).not).if
                      xpattern.write ("/".add (xpattern))
                    (((unsupported)).apply ((xpattern)))