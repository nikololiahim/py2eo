memory > xEmailData
memory > xsetattr
memory > xPositiveSmallIntegerData
memory > xEmailPKData
memory > xBooleanData
memory > xfalse
memory > xM2MData
memory > xcount
memory > xTextData
memory > xdatetime
memory > xdata
memory > xFKDataToO2O
memory > xSmallPKData
memory > xdecimal
memory > xregister_tests
memory > xuuid
memory > xFKData
memory > xFilePathData
memory > xTag
memory > xPositiveIntegerData
memory > xklass
memory > xFloatData
memory > xFKSelfData
memory > xSlugPKData
memory > xDateTimeData
memory > xUUIDDefaultData
memory > xIntermediate
memory > xTestCase
memory > xIntegerPKData
memory > xt
memory > xfunc
memory > xSmallData
memory > xvalue
memory > xExplicitInheritBaseModel
memory > xM2MIntermediateData
memory > xFileData
memory > xO2OData
memory > xUUIDData
memory > xconnection
memory > xFloatPKData
memory > xFKToUUID
memory > xPositiveBigIntegerData
memory > xpk
memory > xGenericData
memory > xPositiveIntegerPKData
memory > xTimeData
memory > xDecimalData
memory > xdatum
memory > xtype
memory > xPositiveSmallIntegerPKData
memory > xrepr
memory > xSlugData
memory > xBigIntegerData
memory > xtag
memory > xserializers
memory > xIntegerData
memory > xbytes
memory > xFilePathPKData
memory > xLengthModel
memory > xUniqueAnchor
memory > xGenericIPAddressData
memory > xGenericIPAddressPKData
memory > xobj
memory > xSerializerDataTests
memory > xgetattr
memory > xCharData
memory > xM2MSelfData
memory > xModifyingSaveData
memory > xInheritAbstractModel
memory > xmodels
memory > xInheritBaseModel
memory > xDateTimePKData
memory > xDateData
memory > xCharPKData
memory > xDecimalPKData
memory > xmemoryview
memory > xBooleanPKData
memory > xFKDataToField
memory > xBinaryData
memory > xAnchor
memory > xAutoNowDateTimeData
memory > xDatePKData
memory > xkey
[] > test_data
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xim_obj
        memory > xm2m_compare
        memory > xpk_create
        memory > xm2m_obj
        memory > xpk_compare
        memory > xim2m_create
        memory > xgeneric_create
        memory > xfk_compare
        memory > xim2m_compare
        memory > xinherited_create
        memory > xinherited_compare
        memory > xpk_obj
        memory > xfk_create
        memory > xo2o_create
        memory > xim_create
        memory > xo2o_compare
        memory > xinherited_obj
        memory > xtest_data
        memory > xo2o_obj
        memory > xdata_obj
        memory > xdata_compare
        memory > xserializerTest
        memory > xm2m_create
        memory > xim_compare
        memory > xfk_obj
        memory > xgeneric_obj
        memory > xdata_create
        memory > xim2m_obj
        memory > xuuid_obj
        memory > xgeneric_compare
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            xdata_create.write
              [xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((xklass)) ((xpk)))
                    (((unsupported)).apply (((xinstance).xdata)) ((xdata)))
                    (((unsupported)).apply ((((xmodels).xModel).xsave_base)) ((xinstance)) (TRUE))
                    (((unsupported)).apply ((((unsupported)).apply ((xinstance)))))
            xgeneric_create.write
              [xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((xklass)) ((xpk)))
                    (((unsupported)).apply (((xinstance).xdata)) ((((unsupported)).apply ((xdata)) (0))))
                    (((unsupported)).apply ((((xmodels).xModel).xsave_base)) ((xinstance)) (TRUE))
                    (((unsupported)).apply ((xtag)) ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (1))))))
                      (((unsupported)).apply ((((xinstance).xtags).xcreate)) ((xtag)))
                    (((unsupported)).apply ((((unsupported)).apply ((xinstance)))))
            xfk_create.write
              [xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((xklass)) ((xpk)))
                    bogusForceDataize.write (((xsetattr)).apply ((xinstance)) ("data_id") ((xdata)))
                    (((unsupported)).apply ((((xmodels).xModel).xsave_base)) ((xinstance)) (TRUE))
                    (((unsupported)).apply ((((unsupported)).apply ((xinstance)))))
            xm2m_create.write
              [xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((xklass)) ((xpk)))
                    (((unsupported)).apply ((((xmodels).xModel).xsave_base)) ((xinstance)) (TRUE))
                    bogusForceDataize.write (((((xinstance).xdata).xset)).apply ((xdata)))
                    (((unsupported)).apply ((((unsupported)).apply ((xinstance)))))
            xim2m_create.write
              [xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((xklass)) ((xpk)))
                    (((unsupported)).apply ((((xmodels).xModel).xsave_base)) ((xinstance)) (TRUE))
                    (((unsupported)).apply ((((unsupported)).apply ((xinstance)))))
            xim_create.write
              [xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((xklass)) ((xpk)))
                    (((unsupported)).apply (((xinstance).xright_id)) ((((unsupported)).apply ((xdata)) ("right"))))
                    (((unsupported)).apply (((xinstance).xleft_id)) ((((unsupported)).apply ((xdata)) ("left"))))
                    (((unsupported)).apply ("extra") ((xdata))).if
                      (((unsupported)).apply (((xinstance).xextra)) ((((unsupported)).apply ((xdata)) ("extra"))))
                    (((unsupported)).apply ((((xmodels).xModel).xsave_base)) ((xinstance)) (TRUE))
                    (((unsupported)).apply ((((unsupported)).apply ((xinstance)))))
            xo2o_create.write
              [xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((xklass)).apply)
                    (((unsupported)).apply (((xinstance).xdata_id)) ((xdata)))
                    (((unsupported)).apply ((((xmodels).xModel).xsave_base)) ((xinstance)) (TRUE))
                    (((unsupported)).apply ((((unsupported)).apply ((xinstance)))))
            xpk_create.write
              [xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((xklass)).apply)
                    (((unsupported)).apply (((xinstance).xdata)) ((xdata)))
                    (((unsupported)).apply ((((xmodels).xModel).xsave_base)) ((xinstance)) (TRUE))
                    (((unsupported)).apply ((((unsupported)).apply ((xinstance)))))
            xinherited_create.write
              [xpk xklass xdata]
                memory > xinstance
                memory > xcreated
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((xklass)) ((xpk)) ((((unsupported)).apply ((xdata)))))
                    bogusForceDataize.write (((((xmodels).xModel).xsave)).apply ((xinstance)))
                    xcreated.write (((unsupported)).apply ((xinstance)))
                    (((unsupported)).apply ((xklass)) ((((xinstance).x_meta).xparents)))
                      bogusForceDataize.write ((((xcreated).xappend)).apply ((((unsupported)).apply ((((xklass).xobjects).xget)) ((xpk)))))
                    (((unsupported)).apply ((xcreated)))
            xdata_compare.write
              [xtestcase xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((((xklass).xobjects).xget)) ((xpk)))
                    (((xklass).eq (xBinaryData)).and (((unsupported)).apply ((xdata)) ("None: is there a None literal in the EO language?"))).if
                      bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((((xbytes)).apply ((xdata)))) ((((xbytes)).apply (((xinstance).xdata)))) (("Objects with PK=%d not equal; expected '%s' (%s), got '%s' (%s)".mod (((unsupported)).apply ((xpk)) ((((xrepr)).apply ((((xbytes)).apply ((xdata)))))) ((((xtype)).apply ((xdata)))) ((((xrepr)).apply ((((xbytes)).apply (((xinstance).xdata)))))) ((((xtype)).apply (((xinstance).xdata))))))))
                      bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xdata)) (((xinstance).xdata)) (("Objects with PK=%d not equal; expected '%s' (%s), got '%s' (%s)".mod (((unsupported)).apply ((xpk)) ((xdata)) ((((xtype)).apply ((xdata)))) ((xinstance)) ((((xtype)).apply (((xinstance).xdata))))))))
            xgeneric_compare.write
              [xtestcase xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((((xklass).xobjects).xget)) ((xpk)))
                    bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((((unsupported)).apply ((xdata)) (0))) (((xinstance).xdata)))
                    bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ((((unsupported)).apply (1))))) ((((unsupported)).apply (((xt).xdata)) ((xt)) ((((((xinstance).xtags).xorder_by)).apply ("id"))))))
            xfk_compare.write
              [xtestcase xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((((xklass).xobjects).xget)) ((xpk)))
                    bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xdata)) (((xinstance).xdata_id)))
            xm2m_compare.write
              [xtestcase xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((((xklass).xobjects).xget)) ((xpk)))
                    bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xdata)) ((((unsupported)).apply (((xobj).xid)) ((xobj)) ((((((xinstance).xdata).xorder_by)).apply ("id"))))))
            xim2m_compare.write
              [xtestcase xpk xklass xdata]
                seq > @
                  (((unsupported)).apply ((((xklass).xobjects).xget)) ((xpk)))
            xim_compare.write
              [xtestcase xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((((xklass).xobjects).xget)) ((xpk)))
                    bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ("left"))) (((xinstance).xleft_id)))
                    bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ("right"))) (((xinstance).xright_id)))
                    (((unsupported)).apply ("extra") ((xdata))).if
                      bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ("extra"))) (((xinstance).xextra)))
                      bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ("doesn't matter") (((xinstance).xextra)))
            xo2o_compare.write
              [xtestcase xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((((xklass).xobjects).xget)) ((xdata)))
                    bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xdata)) (((xinstance).xdata_id)))
            xpk_compare.write
              [xtestcase xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((((xklass).xobjects).xget)) ((xdata)))
                    bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xdata)) (((xinstance).xdata)))
            xinherited_compare.write
              [xtestcase xpk xklass xdata]
                memory > xinstance
                seq > @
                  seq
                    xinstance.write (((unsupported)).apply ((((xklass).xobjects).xget)) ((xpk)))
                    (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))) (((((xdata).xitems)).apply)))
                      bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xvalue)) ((((xgetattr)).apply ((xinstance)) ((xkey)))))
            xdata_obj.write (((unsupported)).apply ((xdata_create)) ((xdata_compare)))
            xgeneric_obj.write (((unsupported)).apply ((xgeneric_create)) ((xgeneric_compare)))
            xfk_obj.write (((unsupported)).apply ((xfk_create)) ((xfk_compare)))
            xm2m_obj.write (((unsupported)).apply ((xm2m_create)) ((xm2m_compare)))
            xim2m_obj.write (((unsupported)).apply ((xim2m_create)) ((xim2m_compare)))
            xim_obj.write (((unsupported)).apply ((xim_create)) ((xim_compare)))
            xo2o_obj.write (((unsupported)).apply ((xo2o_create)) ((xo2o_compare)))
            xpk_obj.write (((unsupported)).apply ((xpk_create)) ((xpk_compare)))
            xinherited_obj.write (((unsupported)).apply ((xinherited_create)) ((xinherited_compare)))
            xuuid_obj.write ((((xuuid).xuuid4)).apply)
            xtest_data.write (((unsupported)).apply ((((unsupported)).apply ((xdata_obj)) (1) ((xBinaryData)) ((((xmemoryview)).apply ("x05xFDx00"))))) ((((unsupported)).apply ((xdata_obj)) (2) ((xBinaryData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (5) ((xBooleanData)) (TRUE))) ((((unsupported)).apply ((xdata_obj)) (6) ((xBooleanData)) ((xfalse)))) ((((unsupported)).apply ((xdata_obj)) (7) ((xBooleanData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (10) ((xCharData)) ("Test Char Data"))) ((((unsupported)).apply ((xdata_obj)) (11) ((xCharData)) (""))) ((((unsupported)).apply ((xdata_obj)) (12) ((xCharData)) ("None"))) ((((unsupported)).apply ((xdata_obj)) (13) ((xCharData)) ("null"))) ((((unsupported)).apply ((xdata_obj)) (14) ((xCharData)) ("NULL"))) ((((unsupported)).apply ((xdata_obj)) (15) ((xCharData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (16) ((xCharData)) ("xa5"))) ((((unsupported)).apply ((xdata_obj)) (20) ((xDateData)) (((((xdatetime).xdate)).apply (2006) (6) (16))))) ((((unsupported)).apply ((xdata_obj)) (21) ((xDateData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (30) ((xDateTimeData)) (((((xdatetime).xdatetime)).apply (2006) (6) (16) (10) (42) (37))))) ((((unsupported)).apply ((xdata_obj)) (31) ((xDateTimeData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (40) ((xEmailData)) ("hovercraft@example.com"))) ((((unsupported)).apply ((xdata_obj)) (41) ((xEmailData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (42) ((xEmailData)) (""))) ((((unsupported)).apply ((xdata_obj)) (50) ((xFileData)) ("file:///foo/bar/whiz.txt"))) ((((unsupported)).apply ((xdata_obj)) (52) ((xFileData)) (""))) ((((unsupported)).apply ((xdata_obj)) (60) ((xFilePathData)) ("/foo/bar/whiz.txt"))) ((((unsupported)).apply ((xdata_obj)) (61) ((xFilePathData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (62) ((xFilePathData)) (""))) ((((unsupported)).apply ((xdata_obj)) (70) ((xDecimalData)) (((((xdecimal).xDecimal)).apply ("12.345"))))) ((((unsupported)).apply ((xdata_obj)) (71) ((xDecimalData)) (((((xdecimal).xDecimal)).apply ("-12.345"))))) ((((unsupported)).apply ((xdata_obj)) (72) ((xDecimalData)) (((((xdecimal).xDecimal)).apply ("0.0"))))) ((((unsupported)).apply ((xdata_obj)) (73) ((xDecimalData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (74) ((xFloatData)) (12.345))) ((((unsupported)).apply ((xdata_obj)) (75) ((xFloatData)) ((12.345.neg)))) ((((unsupported)).apply ((xdata_obj)) (76) ((xFloatData)) (0.0))) ((((unsupported)).apply ((xdata_obj)) (77) ((xFloatData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (80) ((xIntegerData)) (123456789))) ((((unsupported)).apply ((xdata_obj)) (81) ((xIntegerData)) ((123456789.neg)))) ((((unsupported)).apply ((xdata_obj)) (82) ((xIntegerData)) (0))) ((((unsupported)).apply ((xdata_obj)) (83) ((xIntegerData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (95) ((xGenericIPAddressData)) ("fe80:1424:2223:6cff:fe8a:2e8a:2151:abcd"))) ((((unsupported)).apply ((xdata_obj)) (96) ((xGenericIPAddressData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (110) ((xPositiveBigIntegerData)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xdata_obj)) (111) ((xPositiveBigIntegerData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (120) ((xPositiveIntegerData)) (123456789))) ((((unsupported)).apply ((xdata_obj)) (121) ((xPositiveIntegerData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (130) ((xPositiveSmallIntegerData)) (12))) ((((unsupported)).apply ((xdata_obj)) (131) ((xPositiveSmallIntegerData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (140) ((xSlugData)) ("this-is-a-slug"))) ((((unsupported)).apply ((xdata_obj)) (141) ((xSlugData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (142) ((xSlugData)) (""))) ((((unsupported)).apply ((xdata_obj)) (150) ((xSmallData)) (12))) ((((unsupported)).apply ((xdata_obj)) (151) ((xSmallData)) ((12.neg)))) ((((unsupported)).apply ((xdata_obj)) (152) ((xSmallData)) (0))) ((((unsupported)).apply ((xdata_obj)) (153) ((xSmallData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (160) ((xTextData)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xdata_obj)) (161) ((xTextData)) (""))) ((((unsupported)).apply ((xdata_obj)) (162) ((xTextData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (170) ((xTimeData)) (((((xdatetime).xtime)).apply (10) (42) (37))))) ((((unsupported)).apply ((xdata_obj)) (171) ((xTimeData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xgeneric_obj)) (200) ((xGenericData)) ((((unsupported)).apply ("Generic Object 1") ("tag1") ("tag2"))))) ((((unsupported)).apply ((xgeneric_obj)) (201) ((xGenericData)) ((((unsupported)).apply ("Generic Object 2") ("tag2") ("tag3"))))) ((((unsupported)).apply ((xdata_obj)) (300) ((xAnchor)) ("Anchor 1"))) ((((unsupported)).apply ((xdata_obj)) (301) ((xAnchor)) ("Anchor 2"))) ((((unsupported)).apply ((xdata_obj)) (302) ((xUniqueAnchor)) ("UAnchor 1"))) ((((unsupported)).apply ((xfk_obj)) (400) ((xFKData)) (300))) ((((unsupported)).apply ((xfk_obj)) (401) ((xFKData)) (500))) ((((unsupported)).apply ((xfk_obj)) (402) ((xFKData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xm2m_obj)) (410) ((xM2MData)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xm2m_obj)) (411) ((xM2MData)) ((((unsupported)).apply (300) (301))))) ((((unsupported)).apply ((xm2m_obj)) (412) ((xM2MData)) ((((unsupported)).apply (500) (501))))) ((((unsupported)).apply ((xm2m_obj)) (413) ((xM2MData)) ((((unsupported)).apply (300) (301) (500) (501))))) ((((unsupported)).apply ((xo2o_obj)) ("None: is there a None literal in the EO language?") ((xO2OData)) (300))) ((((unsupported)).apply ((xo2o_obj)) ("None: is there a None literal in the EO language?") ((xO2OData)) (500))) ((((unsupported)).apply ((xfk_obj)) (430) ((xFKSelfData)) (431))) ((((unsupported)).apply ((xfk_obj)) (431) ((xFKSelfData)) (430))) ((((unsupported)).apply ((xfk_obj)) (432) ((xFKSelfData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xm2m_obj)) (440) ((xM2MSelfData)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xm2m_obj)) (441) ((xM2MSelfData)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xm2m_obj)) (442) ((xM2MSelfData)) ((((unsupported)).apply (440) (441))))) ((((unsupported)).apply ((xm2m_obj)) (443) ((xM2MSelfData)) ((((unsupported)).apply (445) (446))))) ((((unsupported)).apply ((xm2m_obj)) (444) ((xM2MSelfData)) ((((unsupported)).apply (440) (441) (445) (446))))) ((((unsupported)).apply ((xm2m_obj)) (445) ((xM2MSelfData)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xm2m_obj)) (446) ((xM2MSelfData)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xfk_obj)) (450) ((xFKDataToField)) ("UAnchor 1"))) ((((unsupported)).apply ((xfk_obj)) (451) ((xFKDataToField)) ("UAnchor 2"))) ((((unsupported)).apply ((xfk_obj)) (452) ((xFKDataToField)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xfk_obj)) (460) ((xFKDataToO2O)) (300))) ((((unsupported)).apply ((xim2m_obj)) (470) ((xM2MIntermediateData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xim_obj)) (480) ((xIntermediate)) ((((unsupported)).apply ("right") (300) ("left") (470))))) ((((unsupported)).apply ((xim_obj)) (481) ((xIntermediate)) ((((unsupported)).apply ("right") (300) ("left") (490))))) ((((unsupported)).apply ((xim_obj)) (482) ((xIntermediate)) ((((unsupported)).apply ("right") (500) ("left") (470))))) ((((unsupported)).apply ((xim_obj)) (483) ((xIntermediate)) ((((unsupported)).apply ("right") (500) ("left") (490))))) ((((unsupported)).apply ((xim_obj)) (484) ((xIntermediate)) ((((unsupported)).apply ("right") (300) ("left") (470) ("extra") ("extra"))))) ((((unsupported)).apply ((xim_obj)) (485) ((xIntermediate)) ((((unsupported)).apply ("right") (300) ("left") (490) ("extra") ("extra"))))) ((((unsupported)).apply ((xim_obj)) (486) ((xIntermediate)) ((((unsupported)).apply ("right") (500) ("left") (470) ("extra") ("extra"))))) ((((unsupported)).apply ((xim_obj)) (487) ((xIntermediate)) ((((unsupported)).apply ("right") (500) ("left") (490) ("extra") ("extra"))))) ((((unsupported)).apply ((xim2m_obj)) (490) ((xM2MIntermediateData)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xdata_obj)) (500) ((xAnchor)) ("Anchor 3"))) ((((unsupported)).apply ((xdata_obj)) (501) ((xAnchor)) ("Anchor 4"))) ((((unsupported)).apply ((xdata_obj)) (502) ((xUniqueAnchor)) ("UAnchor 2"))) ((((unsupported)).apply ((xpk_obj)) (601) ((xBooleanPKData)) (TRUE))) ((((unsupported)).apply ((xpk_obj)) (602) ((xBooleanPKData)) ((xfalse)))) ((((unsupported)).apply ((xpk_obj)) (610) ((xCharPKData)) ("Test Char PKData"))) ((((unsupported)).apply ((xpk_obj)) (620) ((xDatePKData)) (((((xdatetime).xdate)).apply (2006) (6) (16))))) ((((unsupported)).apply ((xpk_obj)) (630) ((xDateTimePKData)) (((((xdatetime).xdatetime)).apply (2006) (6) (16) (10) (42) (37))))) ((((unsupported)).apply ((xpk_obj)) (640) ((xEmailPKData)) ("hovercraft@example.com"))) ((((unsupported)).apply ((xpk_obj)) (660) ((xFilePathPKData)) ("/foo/bar/whiz.txt"))) ((((unsupported)).apply ((xpk_obj)) (670) ((xDecimalPKData)) (((((xdecimal).xDecimal)).apply ("12.345"))))) ((((unsupported)).apply ((xpk_obj)) (671) ((xDecimalPKData)) (((((xdecimal).xDecimal)).apply ("-12.345"))))) ((((unsupported)).apply ((xpk_obj)) (672) ((xDecimalPKData)) (((((xdecimal).xDecimal)).apply ("0.0"))))) ((((unsupported)).apply ((xpk_obj)) (673) ((xFloatPKData)) (12.345))) ((((unsupported)).apply ((xpk_obj)) (674) ((xFloatPKData)) ((12.345.neg)))) ((((unsupported)).apply ((xpk_obj)) (675) ((xFloatPKData)) (0.0))) ((((unsupported)).apply ((xpk_obj)) (680) ((xIntegerPKData)) (123456789))) ((((unsupported)).apply ((xpk_obj)) (681) ((xIntegerPKData)) ((123456789.neg)))) ((((unsupported)).apply ((xpk_obj)) (682) ((xIntegerPKData)) (0))) ((((unsupported)).apply ((xpk_obj)) (695) ((xGenericIPAddressPKData)) ("fe80:1424:2223:6cff:fe8a:2e8a:2151:abcd"))) ((((unsupported)).apply ((xpk_obj)) (720) ((xPositiveIntegerPKData)) (123456789))) ((((unsupported)).apply ((xpk_obj)) (730) ((xPositiveSmallIntegerPKData)) (12))) ((((unsupported)).apply ((xpk_obj)) (740) ((xSlugPKData)) ("this-is-a-slug"))) ((((unsupported)).apply ((xpk_obj)) (750) ((xSmallPKData)) (12))) ((((unsupported)).apply ((xpk_obj)) (751) ((xSmallPKData)) ((12.neg)))) ((((unsupported)).apply ((xpk_obj)) (752) ((xSmallPKData)) (0))) ((((unsupported)).apply ((xpk_obj)) (791) ((xUUIDData)) ((xuuid_obj)))) ((((unsupported)).apply ((xfk_obj)) (792) ((xFKToUUID)) ((xuuid_obj)))) ((((unsupported)).apply ((xpk_obj)) (793) ((xUUIDDefaultData)) ((xuuid_obj)))) ((((unsupported)).apply ((xdata_obj)) (800) ((xAutoNowDateTimeData)) (((((xdatetime).xdatetime)).apply (2006) (6) (16) (10) (42) (37))))) ((((unsupported)).apply ((xdata_obj)) (810) ((xModifyingSaveData)) (42))) ((((unsupported)).apply ((xinherited_obj)) (900) ((xInheritAbstractModel)) ((((unsupported)).apply ("child_data") (37) ("parent_data") (42))))) ((((unsupported)).apply ((xinherited_obj)) (910) ((xExplicitInheritBaseModel)) ((((unsupported)).apply ("child_data") (37) ("parent_data") (42))))) ((((unsupported)).apply ((xinherited_obj)) (920) ((xInheritBaseModel)) ((((unsupported)).apply ("child_data") (37) ("parent_data") (42))))) ((((unsupported)).apply ((xdata_obj)) (1000) ((xBigIntegerData)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xdata_obj)) (1001) ((xBigIntegerData)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply ((xdata_obj)) (1002) ((xBigIntegerData)) (0))) ((((unsupported)).apply ((xdata_obj)) (1003) ((xBigIntegerData)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xdata_obj)) (1004) ((xLengthModel)) (0))) ((((unsupported)).apply ((xdata_obj)) (1005) ((xLengthModel)) (1))))
            (((xconnection).xfeatures).xinterprets_empty_strings_as_nulls).if
              xtest_data.write (((unsupported)).apply ((xdata)) ((xdata)) ((xtest_data)) ((((((((unsupported)).apply ((xdata)) (0)).eq (xdata_obj)).and ((((((((unsupported)).apply ((xdata)) (2)).x_meta).xget_field)).apply ("data")).xempty_strings_allowed)).and (((unsupported)).apply ((((unsupported)).apply ((xdata)) (3))) ("None: is there a None literal in the EO language?"))).not)))
            (((unsupported)).apply ((xTestCase)))
            xserializerTest.write
              [xself xformat]
                memory > xobjects
                memory > xserialized_data
                memory > xinstance_count
                seq > @
                  seq
                    (((xconnection).xfeatures).xallows_auto_pk_0).if
                      bogusForceDataize.write ((((xtest_data).xextend)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata_obj)) (0) ((xAnchor)) ("Anchor 0"))) ((((unsupported)).apply ((xfk_obj)) (465) ((xFKData)) (0))))))
                    xobjects.write (((unsupported)).apply)
                    xinstance_count.write (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xpk)) ((xklass)) ((xdatum)))) ((xtest_data)))
                      (((unsupported)).apply (((((xconnection).xconstraint_checks_disabled)).apply)))
                        bogusForceDataize.write ((((xobjects).xextend)).apply ((((((unsupported)).apply ((xfunc)) (0))).apply ((xpk)) ((xklass)) ((xdatum)))))
                    (((unsupported)).apply ((xklass)) ((xinstance_count)))
                      (((unsupported)).apply ((((unsupported)).apply ((xinstance_count)) ((xklass)))) ((((((xklass).xobjects).xcount)).apply)))
                    bogusForceDataize.write ((((xobjects).xextend)).apply ((((((xTag).xobjects).xall)).apply)))
                    xserialized_data.write (((unsupported)).apply (((xserializers).xserialize)) ((xformat)) ((xobjects)) (2))
                    (((unsupported)).apply ((xobj)) (((((xserializers).xdeserialize)).apply ((xformat)) ((xserialized_data)))))
                      bogusForceDataize.write ((((xobj).xsave)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xfunc)) ((xpk)) ((xklass)) ((xdatum)))) ((xtest_data)))
                      bogusForceDataize.write (((((unsupported)).apply ((xfunc)) (1))).apply ((xself)) ((xpk)) ((xklass)) ((xdatum)))
                    (((unsupported)).apply ((((unsupported)).apply ((xklass)) ((xcount)))) (((((xinstance_count).xitems)).apply)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcount)) ((((((xklass).xobjects).xcount)).apply)))
            bogusForceDataize.write (((xregister_tests)).apply ((xSerializerDataTests)) ("test_%s_serializer") ((xserializerTest)))