memory > xencoded_value
memory > xio
memory > xcerr
memory > xrange
memory > xdecoded_value
memory > xp
memory > xi
memory > xsys
memory > xsubprocess
memory > xe
memory > xlen
memory > x__name__
memory > xquopri
memory > xunittest
[] > test_quopri
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xDECSAMPLE
        memory > xESTRINGS
        memory > xENCSAMPLE
        memory > xtest_decodestring
        memory > xtest_scriptencode
        memory > xSTRINGS
        memory > xtest_encodestring
        memory > xtest_encode
        memory > xtest_decode_header
        memory > xtest_decodestring_double_equals
        memory > xtest_idempotent_string
        memory > xwithpythonimplementation
        memory > xtest_encode_header
        memory > xtest_scriptdecode
        memory > xtest_decode
        memory > xtest_embedded_ws
        memory > xHSTRINGS
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            xENCSAMPLE.write (((unsupported)).apply)
            xDECSAMPLE.write ("Here's a bunch of special n".add (((unsupported)).apply))
            xwithpythonimplementation.write
              [xtestfunc]
                memory > xnewtest
                seq > @
                  seq
                    xnewtest.write
                      [xself]
                        memory > xolddecode
                        memory > xoldencode
                        seq > @
                          seq
                            bogusForceDataize.write (((xtestfunc)).apply ((xself)))
                            ((((unsupported)).apply (((xquopri).xb2a_qp)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply (((xquopri).xa2b_qp)) ("None: is there a None literal in the EO language?"))).if
                              seq
                                xoldencode.write ((xquopri).xb2a_qp)
                                xolddecode.write ((xquopri).xa2b_qp)
                                (((unsupported)).apply)
                                  seq
                                    (((unsupported)).apply (((xquopri).xb2a_qp)) ("None: is there a None literal in the EO language?"))
                                    (((unsupported)).apply (((xquopri).xa2b_qp)) ("None: is there a None literal in the EO language?"))
                                    bogusForceDataize.write (((xtestfunc)).apply ((xself)))
                                  seq
                                    (((unsupported)).apply (((xquopri).xb2a_qp)) ((xoldencode)))
                                    (((unsupported)).apply (((xquopri).xa2b_qp)) ((xolddecode)))
                    (((unsupported)).apply (((xnewtest).x__name__)) (((xtestfunc).x__name__)))
                    (((unsupported)).apply ((xnewtest)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xSTRINGS.write (((unsupported)).apply ((((unsupported)).apply ("hello") ("hello"))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ("201202203") ("=81=82=83"))) ((((unsupported)).apply ("hello ") ("hello=20"))) ((((unsupported)).apply ("hellot") ("hello=09"))) ((((unsupported)).apply ("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxd8xd9xdaxdbxdcxddxdexdfxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx") ((((unsupported)).apply)))) ((((unsupported)).apply ("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy") ("yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"))) ((((unsupported)).apply ("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz") ((((unsupported)).apply)))) ((((unsupported)).apply ("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz") ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((xDECSAMPLE)) ((xENCSAMPLE)))))
                xESTRINGS.write (((unsupported)).apply ((((unsupported)).apply ("hello world") ("hello=20world"))) ((((unsupported)).apply ("hellotworld") ("hello=09world"))))
                xHSTRINGS.write (((unsupported)).apply ((((unsupported)).apply ("hello world") ("hello_world"))) ((((unsupported)).apply ("hello_world") ("hello=5Fworld"))))
                xtest_encodestring.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) (((xself).xSTRINGS)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquopri).xencodestring)).apply ((xp)))) ((xe)))
                xtest_decodestring.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) (((xself).xSTRINGS)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquopri).xdecodestring)).apply ((xe)))) ((xp)))
                xtest_decodestring_double_equals.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xdecoded_value)) ((xencoded_value)))) ((((unsupported)).apply ("123=four") ("123==four"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquopri).xdecodestring)).apply ((xencoded_value)))) ((xdecoded_value)))
                xtest_idempotent_string.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) (((xself).xSTRINGS)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquopri).xdecodestring)).apply (((((xquopri).xencodestring)).apply ((xe)))))) ((xe)))
                xtest_encode.write
                  [xself]
                    memory > xinfp
                    memory > xoutfp
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) (((xself).xSTRINGS)))
                          seq
                            xinfp.write ((((xio).xBytesIO)).apply ((xp)))
                            xoutfp.write ((xio).xBytesIO)
                            (((unsupported)).apply (((xquopri).xencode)) ((xinfp)) ((xoutfp)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoutfp).xgetvalue)) ((xe)))
                xtest_decode.write
                  [xself]
                    memory > xinfp
                    memory > xoutfp
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) (((xself).xSTRINGS)))
                          seq
                            xinfp.write ((((xio).xBytesIO)).apply ((xe)))
                            xoutfp.write ((xio).xBytesIO)
                            bogusForceDataize.write ((((xquopri).xdecode)).apply ((xinfp)) ((xoutfp)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoutfp).xgetvalue)) ((xp)))
                xtest_embedded_ws.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) (((xself).xESTRINGS)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xquopri).xencodestring)) ((xp)) (TRUE))) ((xe)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xquopri).xdecodestring)).apply ((xe)))) ((xp)))
                xtest_encode_header.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) (((xself).xHSTRINGS)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xquopri).xencodestring)) ((xp)) (TRUE))) ((xe)))
                xtest_decode_header.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) (((xself).xHSTRINGS)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xquopri).xdecodestring)) ((xe)) (TRUE))) ((xp)))
                xtest_scriptencode.write
                  [xself]
                    memory > xprocess
                    memory > xe
                    memory > xcout
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) ((((unsupported)).apply (((xself).xSTRINGS)) ((1.neg)))))
                        xprocess.write (((unsupported)).apply (((xsubprocess).xPopen)) ((((unsupported)).apply (((xsys).xexecutable)) ("-mquopri"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xprocess).xstdout).xclose)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcout)) ((xcerr)))) (((((xprocess).xcommunicate)).apply ((xp)))))
                        xcout.write (((((xcout).xdecode)).apply ("latin-1")).xsplitlines)
                        xe.write (((((xe).xdecode)).apply ("latin-1")).xsplitlines)
                        (((unsupported)).apply (((((xlen)).apply ((xcout))).eq (((xlen)).apply ((xe))))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xcout)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcout)) ((xi)))) ((((unsupported)).apply ((xe)) ((xi)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcout)) ((xe)))
                xtest_scriptdecode.write
                  [xself]
                    memory > xcout
                    memory > xp
                    memory > xprocess
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xe)))) ((((unsupported)).apply (((xself).xSTRINGS)) ((1.neg)))))
                        xprocess.write (((unsupported)).apply (((xsubprocess).xPopen)) ((((unsupported)).apply (((xsys).xexecutable)) ("-mquopri") ("-d"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xprocess).xstdout).xclose)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcout)) ((xcerr)))) (((((xprocess).xcommunicate)).apply ((xe)))))
                        xcout.write ((((xcout).xdecode)).apply ("latin-1"))
                        xp.write ((((xp).xdecode)).apply ("latin-1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcout).xsplitlines)) (((xp).xsplitlines)))
            ((x__name__).eq "__main__").if
              unsupported