memory > xrange
memory > xdis
memory > xstack_effect
memory > xmax
memory > xset
memory > xcode
memory > x__name__
memory > xValueError
memory > ximport_module
memory > xname
memory > xunittest
[] > test__opcode
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_stack_effect_jump
        memory > x_opcode
        memory > xtest_stack_effect
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x_opcode.write (((ximport_module)).apply ("_opcode"))
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_stack_effect.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstack_effect)).apply ((((unsupported)).apply (((xdis).xopmap)) ("POP_TOP"))))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstack_effect)).apply ((((unsupported)).apply (((xdis).xopmap)) ("DUP_TOP_TWO"))))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstack_effect)).apply ((((unsupported)).apply (((xdis).xopmap)) ("BUILD_SLICE"))) (0))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstack_effect)).apply ((((unsupported)).apply (((xdis).xopmap)) ("BUILD_SLICE"))) (1))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstack_effect)).apply ((((unsupported)).apply (((xdis).xopmap)) ("BUILD_SLICE"))) (3))) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xstack_effect)) (30000))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xstack_effect)) ((((unsupported)).apply (((xdis).xopmap)) ("BUILD_SLICE"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xstack_effect)) ((((unsupported)).apply (((xdis).xopmap)) ("POP_TOP"))) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xcode)))) ((((((xdis).xopmap).xitems)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xname)))))
                            ((xcode).less ((xdis).xHAVE_ARGUMENT)).if
                              seq
                                bogusForceDataize.write (((xstack_effect)).apply ((xcode)))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xstack_effect)) ((xcode)) (0))
                              seq
                                bogusForceDataize.write (((xstack_effect)).apply ((xcode)) (0))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xstack_effect)) ((xcode)))
                        (((unsupported)).apply ((xcode)) (((((xset)).apply ((((xrange)).apply (256)))).sub (((xset)).apply ((((((xdis).xopmap).xvalues)).apply))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcode)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xstack_effect)) ((xcode)))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xstack_effect)) ((xcode)) (0))
                xtest_stack_effect_jump.write
                  [xself]
                    memory > xhas_jump
                    memory > xFOR_ITER
                    memory > xjump
                    memory > xnojump
                    memory > xJUMP_FORWARD
                    memory > xJUMP_IF_TRUE_OR_POP
                    memory > xcommon
                    seq > @
                      seq
                        xJUMP_IF_TRUE_OR_POP.write (((unsupported)).apply (((xdis).xopmap)) ("JUMP_IF_TRUE_OR_POP"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstack_effect)).apply ((xJUMP_IF_TRUE_OR_POP)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xstack_effect)) ((xJUMP_IF_TRUE_OR_POP)) (0) (TRUE))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xstack_effect)) ((xJUMP_IF_TRUE_OR_POP)) (0) (FALSE))) ((1.neg)))
                        xFOR_ITER.write (((unsupported)).apply (((xdis).xopmap)) ("FOR_ITER"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstack_effect)).apply ((xFOR_ITER)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xstack_effect)) ((xFOR_ITER)) (0) (TRUE))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xstack_effect)) ((xFOR_ITER)) (0) (FALSE))) (1))
                        xJUMP_FORWARD.write (((unsupported)).apply (((xdis).xopmap)) ("JUMP_FORWARD"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstack_effect)).apply ((xJUMP_FORWARD)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xstack_effect)) ((xJUMP_FORWARD)) (0) (TRUE))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xstack_effect)) ((xJUMP_FORWARD)) (0) (FALSE))) (0))
                        xhas_jump.write (((xdis).xhasjabs).sub ((xdis).xhasjrel))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xcode)))) ((((((xdis).xopmap).xitems)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xname)))))
                            seq
                              ((xcode).less ((xdis).xHAVE_ARGUMENT)).if
                                seq
                                  xcommon.write (((xstack_effect)).apply ((xcode)))
                                  xjump.write (((unsupported)).apply ((xstack_effect)) ((xcode)) (TRUE))
                                  xnojump.write (((unsupported)).apply ((xstack_effect)) ((xcode)) (FALSE))
                                seq
                                  xcommon.write (((xstack_effect)).apply ((xcode)) (0))
                                  xjump.write (((unsupported)).apply ((xstack_effect)) ((xcode)) (0) (TRUE))
                                  xnojump.write (((unsupported)).apply ((xstack_effect)) ((xcode)) (0) (FALSE))
                              (((unsupported)).apply ((xcode)) ((xhas_jump))).if
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommon)) ((((xmax)).apply ((xjump)) ((xnojump)))))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xjump)) ((xcommon)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnojump)) ((xcommon)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)