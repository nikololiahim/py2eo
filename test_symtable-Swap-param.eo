memory > xlist
memory > xValueError
memory > xstr
memory > xbytearray
memory > xKeyError
memory > xsym
memory > xsymtable
memory > xSyntaxError
memory > xunittest
memory > xmemoryview
memory > xlen
memory > xsorted
memory > xDeprecationWarning
memory > xch
memory > xe
memory > xTypeError
memory > x__name__
[] > test_symtable
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xa_method
        memory > xtest_symbol_lookup
        memory > xtest_nonlocal
        memory > xtest_free
        memory > xtest_lineno
        memory > xtest_imported
        memory > xMine
        memory > xtest_single
        memory > xtest_eval
        memory > xtest_exec
        memory > xother_internal
        memory > xtest_globals
        memory > xtest_filename_correct
        memory > xTEST_CODE
        memory > xtest_optimized
        memory > xtest_bytes
        memory > xtest_annotated
        memory > xtest_local
        memory > xtest_type
        memory > xtest_assigned
        memory > xtest_namespaces
        memory > xspam
        memory > xtest_name
        memory > xtest_children
        memory > xtest_referenced
        memory > xtop
        memory > xtest_parameters
        memory > xtest_nested
        memory > xtest_symtable_repr
        memory > xinternal
        memory > xtest_function_info
        memory > xfind_block
        memory > xtest_class_info
        memory > xfoo
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xTEST_CODE.write (((unsupported)).apply)
            xfind_block.write
              [xblock xname]
                seq > @
                  (((unsupported)).apply ((xch)) (((((xblock).xget_children)).apply)))
                    (((((xch).xget_name)).apply).eq (xname)).if
                      (((unsupported)).apply ((xch)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtop.write ((((xsymtable).xsymtable)).apply ("exec") ("?") ((xTEST_CODE)))
                xMine.write (((xfind_block)).apply ((xtop)) ("Mine"))
                xa_method.write (((xfind_block)).apply ((xMine)) ("a_method"))
                xspam.write (((xfind_block)).apply ((xtop)) ("spam"))
                xinternal.write (((xfind_block)).apply ((xspam)) ("internal"))
                xother_internal.write (((xfind_block)).apply ((xspam)) ("other_internal"))
                xfoo.write (((xfind_block)).apply ((xtop)) ("foo"))
                xtest_type.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtop).xget_type)).apply)) ("module"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xMine).xget_type)).apply)) ("class"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa_method).xget_type)).apply)) ("function"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xspam).xget_type)).apply)) ("function"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xinternal).xget_type)).apply)) ("function"))
                xtest_optimized.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xtop).xis_optimized)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xtop).xhas_exec)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xspam).xis_optimized)).apply)))
                xtest_nested.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xtop).xis_nested)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xMine).xis_nested)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xspam).xis_nested)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xinternal).xis_nested)).apply)))
                xtest_children.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xtop).xhas_children)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xMine).xhas_children)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xfoo).xhas_children)).apply)))
                xtest_lineno.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtop).xget_lineno)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xspam).xget_lineno)).apply)) (14))
                xtest_function_info.write
                  [xself]
                    memory > xexpected
                    memory > xfunc
                    seq > @
                      seq
                        xfunc.write ((xself).xspam)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply (((((xfunc).xget_parameters)).apply)))) ((((unsupported)).apply ("a") ("b") ("kw") ("var"))))
                        xexpected.write (((unsupported)).apply ("a") ("b") ("internal") ("kw") ("other_internal") ("some_var") ("var") ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply (((((xfunc).xget_locals)).apply)))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply (((((xfunc).xget_globals)).apply)))) ((((unsupported)).apply ("bar") ("glob") ("some_assigned_global_var"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xinternal).xget_frees)).apply)) ((((unsupported)).apply ("x"))))
                xtest_globals.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ("glob")).xis_global)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xself).xspam).xlookup)).apply ("glob")).xis_declared_global)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ("bar")).xis_global)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ("bar")).xis_declared_global)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xself).xinternal).xlookup)).apply ("x")).xis_global)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xself).xMine).xlookup)).apply ("instance_var")).xis_global)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ("bar")).xis_global)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xtop).xlookup)).apply ("some_non_assigned_global_var")).xis_global)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xtop).xlookup)).apply ("some_assigned_global_var")).xis_global)).apply)))
                xtest_nonlocal.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xself).xspam).xlookup)).apply ("some_var")).xis_nonlocal)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xother_internal).xlookup)).apply ("some_var")).xis_nonlocal)).apply)))
                        xexpected.write (((unsupported)).apply ("some_var"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xother_internal).xget_nonlocals)).apply)) ((xexpected)))
                xtest_local.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ("x")).xis_local)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xself).xspam).xlookup)).apply ("bar")).xis_local)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xtop).xlookup)).apply ("some_non_assigned_global_var")).xis_local)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xtop).xlookup)).apply ("some_assigned_global_var")).xis_local)).apply)))
                xtest_free.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xinternal).xlookup)).apply ("x")).xis_free)).apply)))
                xtest_referenced.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xinternal).xlookup)).apply ("x")).xis_referenced)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ("internal")).xis_referenced)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xself).xspam).xlookup)).apply ("x")).xis_referenced)).apply)))
                xtest_parameters.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xsym)) ((((unsupported)).apply ("a") ("var") ("kw"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ((xsym))).xis_parameter)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xself).xspam).xlookup)).apply ("x")).xis_parameter)).apply)))
                xtest_symbol_lookup.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xself).xtop).xget_identifiers)).apply)))) ((((xlen)).apply ((((((xself).xtop).xget_symbols)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xKeyError)) ((((xself).xtop).xlookup)) ("not_here"))
                xtest_namespaces.write
                  [xself]
                    memory > xns_test
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xtop).xlookup)).apply ("Mine")).xis_namespace)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xMine).xlookup)).apply ("a_method")).xis_namespace)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xtop).xlookup)).apply ("spam")).xis_namespace)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ("internal")).xis_namespace)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xtop).xlookup)).apply ("namespace_test")).xis_namespace)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xself).xspam).xlookup)).apply ("x")).xis_namespace)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((((((((xself).xtop).xlookup)).apply ("spam")).xget_namespace)).apply)) (((xself).xspam)))))
                        xns_test.write (((((xself).xtop).xlookup)).apply ("namespace_test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xns_test).xget_namespaces)).apply)))) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xns_test).xget_namespace)))
                xtest_assigned.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ("x")).xis_assigned)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xspam).xlookup)).apply ("bar")).xis_assigned)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xtop).xlookup)).apply ("spam")).xis_assigned)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xMine).xlookup)).apply ("a_method")).xis_assigned)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((((((xself).xinternal).xlookup)).apply ("x")).xis_assigned)).apply)))
                xtest_annotated.write
                  [xself]
                    memory > xst2
                    memory > xst6
                    memory > xst3
                    memory > xst4
                    memory > xst1
                    memory > xst5
                    seq > @
                      seq
                        xst1.write ((((xsymtable).xsymtable)).apply ("def f():n    x: intn") ("test") ("exec"))
                        xst2.write (((unsupported)).apply (((((xst1).xget_children)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xst2).xlookup)).apply ("x")).xis_local)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xst2).xlookup)).apply ("x")).xis_annotated)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((((xst2).xlookup)).apply ("x")).xis_global)).apply)))
                        xst3.write ((((xsymtable).xsymtable)).apply ("def f():n    x = 1n") ("test") ("exec"))
                        xst4.write (((unsupported)).apply (((((xst3).xget_children)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xst4).xlookup)).apply ("x")).xis_local)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((((xst4).xlookup)).apply ("x")).xis_annotated)).apply)))
                        xst5.write ((((xsymtable).xsymtable)).apply ("global xnx: int") ("test") ("exec"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xst5).xlookup)).apply ("x")).xis_global)).apply)))
                        xst6.write ((((xsymtable).xsymtable)).apply ("def g():n    x = 2n    def f():n        nonlocal xn    x: int") ("test") ("exec"))
                xtest_imported.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((((xself).xtop).xlookup)).apply ("sys")).xis_imported)).apply)))
                xtest_name.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xtop).xget_name)).apply)) ("top"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xspam).xget_name)).apply)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xself).xspam).xlookup)).apply ("x")).xget_name)).apply)) ("x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xMine).xget_name)).apply)) ("Mine"))
                xtest_class_info.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xMine).xget_methods)).apply)) ((((unsupported)).apply ("a_method"))))
                xtest_filename_correct.write
                  [xself]
                    memory > xcheckfilename
                    seq > @
                      seq
                        xcheckfilename.write
                          [xbrokencode xoffset]
                            seq > @
                              (((unsupported)).apply ((xSyntaxError)))
                                bogusForceDataize.write ((((xsymtable).xsymtable)).apply ((xbrokencode)) ("spam") ("exec"))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xfilename)) ("spam"))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xlineno)) (1))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xoffset)) ((xoffset)))
                                bogusForceDataize.write ((((xself).xfail)).apply (("no SyntaxError for %r".mod (((unsupported)).apply ((xbrokencode))))))
                        bogusForceDataize.write (((xcheckfilename)).apply ("def f(x): foo)(") (14))
                        bogusForceDataize.write (((xcheckfilename)).apply ("def f(x): global x") (11))
                        bogusForceDataize.write ((((xsymtable).xsymtable)).apply ("pass") ("spam") ("exec"))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xsymtable).xsymtable)).apply ("pass") ((((xbytearray)).apply ("spam"))) ("exec"))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write ((((xsymtable).xsymtable)).apply ("pass") ((((xmemoryview)).apply ("spam"))) ("exec"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xsymtable).xsymtable)).apply ("pass") ((((xlist)).apply ("spam"))) ("exec"))
                xtest_eval.write
                  [xself]
                    memory > xsymbols
                    seq > @
                      xsymbols.write ((((xsymtable).xsymtable)).apply ("42") ("?") ("eval"))
                xtest_single.write
                  [xself]
                    memory > xsymbols
                    seq > @
                      xsymbols.write ((((xsymtable).xsymtable)).apply ("42") ("?") ("single"))
                xtest_exec.write
                  [xself]
                    memory > xsymbols
                    seq > @
                      xsymbols.write ((((xsymtable).xsymtable)).apply ("def f(x): return x") ("?") ("exec"))
                xtest_bytes.write
                  [xself]
                    memory > xcode
                    memory > xtop
                    seq > @
                      seq
                        xtop.write ((((xsymtable).xsymtable)).apply (((((xTEST_CODE).xencode)).apply ("utf8"))) ("?") ("exec"))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((xfind_block)).apply ((xtop)) ("Mine"))))
                        xcode.write "# -*- coding: iso8859-15 -*-nclass xb4: passn"
                        xtop.write ((((xsymtable).xsymtable)).apply ((xcode)) ("?") ("exec"))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((xfind_block)).apply ((xtop)) ("u017d"))))
                xtest_symtable_repr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xself).xtop)))) ("<SymbolTable for module ?>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xself).xspam)))) ("<Function SymbolTable for spam in ?>"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)