memory > xexpected
memory > xpluralize
memory > xvalue
memory > xDecimal
memory > xobject
memory > xtests
memory > xSimpleTestCase
[] > test_pluralize
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcheck_values
        memory > xtest_decimals
        memory > xtest_no_len_type
        memory > xtest_integers
        memory > xtest_suffix
        memory > xtest_floats
        memory > xtest_suffixes
        memory > xtest_singular_and_plural_suffix
        memory > xtest_value_error
        memory > xtest_no_arguments
        memory > xtest_lists
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xcheck_values.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xoutput.write (((((xself).xengine).xrender_to_string)).apply ("t") ((((unsupported)).apply ("value") ((xvalue)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ((xexpected)))
                xtest_no_arguments.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_values)).apply ((((unsupported)).apply ("0") ("votes"))) ((((unsupported)).apply ("1") ("vote"))) ((((unsupported)).apply ("2") ("votes"))))
                xtest_suffix.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_values)).apply ((((unsupported)).apply ("0") ("classes"))) ((((unsupported)).apply ("1") ("class"))) ((((unsupported)).apply ("2") ("classes"))))
                xtest_singular_and_plural_suffix.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_values)).apply ((((unsupported)).apply ("0") ("candies"))) ((((unsupported)).apply ("1") ("candy"))) ((((unsupported)).apply ("2") ("candies"))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_integers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (1))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (0))) ("s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (2))) ("s"))
                xtest_floats.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (0.5))) ("s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (1.5))) ("s"))
                xtest_decimals.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ((((xDecimal)).apply (1))))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ((((xDecimal)).apply (0))))) ("s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ((((xDecimal)).apply (2))))) ("s"))
                xtest_lists.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ((((unsupported)).apply (1))))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ((((unsupported)).apply)))) ("s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ((((unsupported)).apply (1) (2) (3))))) ("s"))
                xtest_suffixes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (1) ("es"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (0) ("es"))) ("es"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (2) ("es"))) ("es"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (1) ("y,ies"))) ("y"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (0) ("y,ies"))) ("ies"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (2) ("y,ies"))) ("ies"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply (0) ("y,ies,error"))) (""))
                xtest_no_len_type.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ((((xobject)).apply)) ("y,es"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ((((xobject)).apply)) ("es"))) (""))
                xtest_value_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ("") ("y,es"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xpluralize)).apply ("") ("es"))) (""))