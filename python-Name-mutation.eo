memory > xd
memory > xdata
memory > xstr
memory > xapps
memory > xf
memory > xis_protected_type
memory > xLookupError
memory > xgetattr
memory > xe
memory > xoptions
memory > xTypeError
memory > xrelated
memory > xbase
memory > xException
memory > xhasattr
memory > xmodels
memory > xfield_value
memory > xisinstance
memory > xfield_name
[] > python
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xgetvalue
        memory > xstart_serialization
        memory > xend_object
        memory > xinternal_use_only
        memory > x_get_model
        memory > xhandle_m2m_field
        memory > xDeserializer
        memory > xhandle_field
        memory > xhandle_fk_field
        memory > x_value_from_field
        memory > xstart_object
        memory > xend_serialization
        memory > xget_dump_object
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xbase).xSerializer)))
              seq
                (((unsupported)).apply)
                xinternal_use_only.write TRUE
                xstart_serialization.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_current)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xobjects)) ((((unsupported)).apply)))
                xend_serialization.write
                  [xself]
                    seq > @
                xstart_object.write
                  [xself xobj]
                    seq > @
                      (((unsupported)).apply (((xself).x_current)) ((((unsupported)).apply)))
                xend_object.write
                  [xself xobj]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xobjects).xappend)).apply (((((xself).xget_dump_object)).apply ((xobj)))))
                        (((unsupported)).apply (((xself).x_current)) ("None: is there a None literal in the EO language?"))
                xget_dump_object.write
                  [xself xobj]
                    memory > xdata2
                    seq > @
                      seq
                        xdata2.write (((unsupported)).apply ("model") ((((xstr)).apply (((xobj).x_meta)))))
                        ((((xself).xuse_natural_primary_keys).not).or ((((xhasattr)).apply ((xobj)) ("natural_key")).not)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("pk"))) (((((xself).x_value_from_field)).apply ((xobj)) ((((xobj).x_meta).xpk)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("fields"))) (((xself).x_current)))
                        (((unsupported)).apply ((xdata)))
                x_value_from_field.write
                  [xself xobj xfield]
                    memory > xvalue
                    seq > @
                      seq
                        xvalue.write ((((xfield).xvalue_from_object)).apply ((xobj)))
                        (((unsupported)).apply (((((xis_protected_type)).apply ((xvalue))).if (xvalue) ((((xfield).xvalue_to_string)).apply ((xobj))))))
                xhandle_field.write
                  [xself xobj xfield]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).x_current)) (((xfield).xname)))) (((((xself).x_value_from_field)).apply ((xobj)) ((xfield)))))
                xhandle_fk_field.write
                  [xself xobj xfield]
                    memory > xvalue
                    memory > xrelated
                    seq > @
                      seq
                        (((xself).xuse_natural_foreign_keys).and (((xhasattr)).apply ((((xfield).xremote_field).xmodel)) ("natural_key"))).if
                          seq
                            xrelated.write (((xgetattr)).apply ((xobj)) (((xfield).xname)))
                            (xrelated).if
                              xvalue.write ((((xrelated).xnatural_key)).apply)
                              xvalue.write "None: is there a None literal in the EO language?"
                          xvalue.write ((((xself).x_value_from_field)).apply ((xobj)) ((xfield)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_current)) (((xfield).xname)))) ((xvalue)))
                xhandle_m2m_field.write
                  [xself xobj xfield]
                    memory > xm2m_value
                    memory > xm2m_iter
                    seq > @
                      (((((xfield).xremote_field).xthrough).x_meta).xauto_created).if
                        seq
                          (((xself).xuse_natural_foreign_keys).and (((xhasattr)).apply ((((xfield).xremote_field).xmodel)) ("natural_key"))).if
                            xm2m_value.write
                              [xvalue]
                                seq > @
                                  (((unsupported)).apply (((((xvalue).xnatural_key)).apply)))
                            xm2m_value.write
                              [xvalue]
                                seq > @
                                  (((unsupported)).apply (((((xself).x_value_from_field)).apply ((xvalue)) ((((xvalue).x_meta).xpk)))))
                          xm2m_iter.write ((((((xgetattr)).apply ((xobj)) ("_prefetched_objects_cache") ((((unsupported)).apply))).xget)).apply (((xfield).xname)) (((((((xgetattr)).apply ((xobj)) (((xfield).xname))).xiterator)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x_current)) (((xfield).xname)))) ((((unsupported)).apply ((((xm2m_value)).apply ((xrelated)))) ((xrelated)) ((xm2m_iter)))))
                xgetvalue.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xobjects)))
            xDeserializer.write
              [xobject_list xusing xignorenonexistent]
                memory > xhandle_forward_references
                memory > xfield
                memory > xdata
                memory > xvalue
                memory > xfield_names
                memory > xobj
                memory > xModel
                memory > xdeferred_fields
                memory > xm2m_data
                memory > xfield_names_cache
                memory > xvalues
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xhandle_forward_references.write ((((xoptions).xpop)).apply ("handle_forward_references") (FALSE))
                    xfield_names_cache.write (((unsupported)).apply)
                    (((unsupported)).apply ((xd)) ((xobject_list)))
                      seq
                        (((unsupported)).apply (((xbase).xDeserializationError)))
                          xModel.write (((x_get_model)).apply ((((unsupported)).apply ((xd)) ("model"))))
                          (xignorenonexistent).if
                            (((unsupported)).apply)
                            (((unsupported)).apply)
                        xdata.write (((unsupported)).apply)
                        (((unsupported)).apply ("pk") ((xd))).if
                          (((unsupported)).apply ((xException)))
                            (((unsupported)).apply ((((unsupported)).apply ((xdata)) (((((xModel).x_meta).xpk).xattname)))) (((((((xModel).x_meta).xpk).xto_python)).apply (((((xd).xget)).apply ("pk"))))))
                            (((unsupported)).apply ((((((xbase).xDeserializationError).xWithData)).apply ((xe)) ((((unsupported)).apply ((xd)) ("model"))) (((((xd).xget)).apply ("pk"))) ("None: is there a None literal in the EO language?"))))
                        xm2m_data.write (((unsupported)).apply)
                        xdeferred_fields.write (((unsupported)).apply)
                        (((unsupported)).apply ((xModel)) ((xfield_names_cache))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xfield_names_cache)) ((xModel)))) ((((unsupported)).apply (((xf).xname)) ((xf)) ((((((xModel).x_meta).xget_fields)).apply)))))
                        xfield_names.write (((unsupported)).apply ((xfield_names_cache)) ((xModel)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xfield_value)))) (((((((unsupported)).apply ((xd)) ("fields")).xitems)).apply)))
                          seq
                            ((xignorenonexistent).and (((unsupported)).apply ((xfield_name)) ((xfield_names)))).if
                              (((unsupported)).apply)
                            xfield.write (((((xModel).x_meta).xget_field)).apply ((xfield_name)))
                            (((xfield).xremote_field).and (((xisinstance)).apply (((xfield).xremote_field)) (((xmodels).xManyToManyRel)))).if
                              seq
                                (((unsupported)).apply (((xbase).xM2MDeserializationError)))
                                  xvalues.write ((((xbase).xdeserialize_m2m_values)).apply ((xfield)) ((xfield_value)) ((xusing)) ((xhandle_forward_references)))
                                  (((unsupported)).apply ((((((xbase).xDeserializationError).xWithData)).apply (((xe).xoriginal_exc)) ((((unsupported)).apply ((xd)) ("model"))) (((((xd).xget)).apply ("pk"))) (((xe).xpk)))))
                                ((xvalues).eq ((xbase).xDEFER_FIELD)).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xdeferred_fields)) ((xfield)))) ((xfield_value)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xm2m_data)) (((xfield).xname)))) ((xvalues)))
                              (((xfield).xremote_field).and (((xisinstance)).apply (((xfield).xremote_field)) (((xmodels).xManyToOneRel)))).if
                                seq
                                  (((unsupported)).apply ((xException)))
                                    xvalue.write ((((xbase).xdeserialize_fk_value)).apply ((xfield)) ((xfield_value)) ((xusing)) ((xhandle_forward_references)))
                                    (((unsupported)).apply ((((((xbase).xDeserializationError).xWithData)).apply ((xe)) ((((unsupported)).apply ((xd)) ("model"))) (((((xd).xget)).apply ("pk"))) ((xfield_value)))))
                                  ((xvalue).eq ((xbase).xDEFER_FIELD)).if
                                    (((unsupported)).apply ((((unsupported)).apply ((xdeferred_fields)) ((xfield)))) ((xfield_value)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xdata)) (((xfield).xattname)))) ((xvalue)))
                                (((unsupported)).apply ((xException)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xdata)) (((xfield).xname)))) (((((xfield).xto_python)).apply ((xfield_value)))))
                                  (((unsupported)).apply ((((((xbase).xDeserializationError).xWithData)).apply ((xe)) ((((unsupported)).apply ((xd)) ("model"))) (((((xd).xget)).apply ("pk"))) ((xfield_value)))))
                        xobj.write ((((xbase).xbuild_instance)).apply ((xModel)) ((xdata)) ((xusing)))
                        (((unsupported)).apply (((((xbase).xDeserializedObject)).apply ((xobj)) ((xm2m_data)) ((xdeferred_fields)))))
            x_get_model.write
              [xmodel_identifier]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xLookupError)) ((xTypeError)))))
                      (((unsupported)).apply (((((xapps).xget_model)).apply ((xmodel_identifier)))))
                      (((unsupported)).apply (((((xbase).xDeserializationError)).apply (("Invalid model identifier: '%s'".mod (xmodel_identifier))))))