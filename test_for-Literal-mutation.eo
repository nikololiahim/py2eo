memory > xTemplateSyntaxError
memory > xValueError
memory > xForNode
memory > xrepr
memory > xSimpleTestCase
[] > test_for
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_for_tag_unpack14
        memory > xtest_for_tag_unpack04
        memory > xtest_for_tag02
        memory > xtest_repr
        memory > xtest_for_tag_unpack12
        memory > xtest_for_tag_filter_ws
        memory > xtest_for_tag_unpack05
        memory > xtest_unpack_single_quote
        memory > xtest_for_tag_unpack09
        memory > xtest_for_tag_vars01
        memory > xtest_for_tag_vars05
        memory > xtest_for_tag_vars06
        memory > xtest_for_tag_empty03
        memory > xlibraries
        memory > xtest_for_tag_unpack07
        memory > xtest_invalid_in_keyword
        memory > xtest_for_tag_unpack10
        memory > xtest_for_tag_unpack03
        memory > xtest_for_tag_unpack_strs
        memory > xtest_for_tag_empty02
        memory > xtest_unpack_vertical_bar
        memory > xtest_for_tag_vars03
        memory > xtest_for_tag_context
        memory > xtest_for_tag_unpack11
        memory > xtest_for_tag_unpack08
        memory > xtest_for_tag01
        memory > xtest_for_tag_empty01
        memory > xtest_for_tag_vars02
        memory > xtest_unpack_double_quote
        memory > xtest_invalid_arg
        memory > xtest_for_tag_unpack01
        memory > xtest_for_tag_vars04
        memory > xtest_for_tag_unpack06
        memory > xtest_for_tag_unpack13
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xlibraries.write (((unsupported)).apply ("custom") ("template_tests.templatetags.custom"))
                xtest_for_tag01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag01") ((((unsupported)).apply ("values") ((((unsupported)).apply (1) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("123"))
                xtest_for_tag02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag02") ((((unsupported)).apply ("values") ((((unsupported)).apply (1) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("321"))
                xtest_for_tag_vars01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-vars01") ((((unsupported)).apply ("values") ((((unsupported)).apply (6) (6) (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("123"))
                xtest_for_tag_vars02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-vars02") ((((unsupported)).apply ("values") ((((unsupported)).apply (6) (6) (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("012"))
                xtest_for_tag_vars03.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-vars03") ((((unsupported)).apply ("values") ((((unsupported)).apply (6) (6) (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("321"))
                xtest_for_tag_vars04.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-vars04") ((((unsupported)).apply ("values") ((((unsupported)).apply (6) (6) (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("210"))
                xtest_for_tag_vars05.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-vars05") ((((unsupported)).apply ("values") ((((unsupported)).apply (6) (6) (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("fxx"))
                xtest_for_tag_vars06.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-vars06") ((((unsupported)).apply ("values") ((((unsupported)).apply (6) (6) (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("xxl"))
                xtest_for_tag_unpack01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack01") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1))) ((((unsupported)).apply ("two") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("one:1/two:2/"))
                xtest_for_tag_unpack03.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack03") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1))) ((((unsupported)).apply ("two") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("one:1/two:2/"))
                xtest_for_tag_unpack04.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack04") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1))) ((((unsupported)).apply ("two") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("one:1/two:2/"))
                xtest_for_tag_unpack05.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack05") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1))) ((((unsupported)).apply ("two") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("one:1/two:2/"))
                xtest_for_tag_unpack06.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'for' tag received an invalid argument: for key value in items"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack06") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1))) ((((unsupported)).apply ("two") (2))))))))
                xtest_for_tag_unpack07.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'for' tag received an invalid argument: for key,,value in items"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack07") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1))) ((((unsupported)).apply ("two") (2))))))))
                xtest_for_tag_unpack08.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'for' tag received an invalid argument: for key,value, in items"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack08") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1))) ((((unsupported)).apply ("two") (2))))))))
                xtest_unpack_double_quote.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'for' tag received an invalid argument: for \"k\" in items"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("double-quote") ((((unsupported)).apply ("items") ((((unsupported)).apply (1) (2))))))
                xtest_unpack_single_quote.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'for' tag received an invalid argument: for 'k' in items"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("single-quote") ((((unsupported)).apply ("items") ((((unsupported)).apply (1) (2))))))
                xtest_unpack_vertical_bar.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'for' tag received an invalid argument: for k|upper in items"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("vertical-bar") ((((unsupported)).apply ("items") ((((unsupported)).apply (1) (2))))))
                xtest_for_tag_unpack09.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack09") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1))) ((((unsupported)).apply ("two") (2))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("one:1/two:2/"))
                xtest_for_tag_unpack13.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack13") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1) ("carrot"))) ((((unsupported)).apply ("two") (2) ("cheese"))))))))
                        (((xself).xengine).xstring_if_invalid).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("one:1,carrot/two:2,cheese/"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("one:1,carrot/two:2,cheese/"))
                xtest_for_tag_empty01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-empty01") ((((unsupported)).apply ("values") ((((unsupported)).apply (1) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("123"))
                xtest_for_tag_empty02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-empty02") ((((unsupported)).apply ("values") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("values array empty"))
                xtest_for_tag_empty03.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-empty03"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("values array not found"))
                xtest_for_tag_filter_ws.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-filter-ws") ((((unsupported)).apply ("s") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("abc"))
                xtest_for_tag_unpack_strs.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack-strs") ((((unsupported)).apply ("items") ((((unsupported)).apply ("ab") ("ac"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("a:b/a:c/"))
                xtest_for_tag_unpack10.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Need 2 values to unpack in for loop; got 3."))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack10") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1) ("carrot"))) ((((unsupported)).apply ("two") (2) ("orange"))))))))
                xtest_for_tag_unpack11.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Need 3 values to unpack in for loop; got 2."))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack11") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1))) ((((unsupported)).apply ("two") (2))))))))
                xtest_for_tag_unpack12.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Need 3 values to unpack in for loop; got 2."))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack12") ((((unsupported)).apply ("items") ((((unsupported)).apply ((((unsupported)).apply ("one") (1) ("carrot"))) ((((unsupported)).apply ("two") (2))))))))
                xtest_for_tag_unpack14.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Need 2 values to unpack in for loop; got 1."))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("for-tag-unpack14") ((((unsupported)).apply ("items") ((((unsupported)).apply (1) (2))))))
                xtest_for_tag_context.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("main") ((((unsupported)).apply ("alpha") ((((unsupported)).apply ("values") ((((unsupported)).apply ((((unsupported)).apply ("two") (2))) ((((unsupported)).apply ("four") (4))))) ("extra") ((((unsupported)).apply ((((unsupported)).apply ("six") (6))) ((((unsupported)).apply ("eight") (8))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("two:2,four:4,_six:6,eight:8,"))
                xtest_invalid_arg.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'for' statements should have at least four words: for x items"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("invalid_for_loop") ((((unsupported)).apply ("items") ((((unsupported)).apply (1) (2))))))
                xtest_invalid_in_keyword.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "'for' statements should use the format 'for x in y': for x from items"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTemplateSyntaxError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xengine).xrender_to_string)).apply ("invalid_for_loop") ((((unsupported)).apply ("items") ((((unsupported)).apply (1) (2))))))
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_repr.write
                [xself]
                  memory > xnode
                  seq > @
                    seq
                      xnode.write (((unsupported)).apply ((xForNode)) ("x") ("sequence") (TRUE) ((((unsupported)).apply ("val"))) ((((unsupported)).apply ("val2"))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xnode)))) ("<ForNode: for x in sequence, tail_len: 1 reversed>"))