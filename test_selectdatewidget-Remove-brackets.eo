memory > xfield
memory > xvalues
memory > xexpected
memory > xvalue
memory > xdate
memory > xTestForm
memory > xx
memory > xForm
memory > xDateField
memory > xfield_name
memory > xValueError
memory > xGetRequiredDate
memory > xint
memory > xGetNotRequiredDate
memory > xexpected_value
memory > xmonth
memory > xSelectDateWidget
memory > xday
memory > xWidgetTest
memory > xzip
memory > xMONTHS_AP
memory > xyear
[] > test_selectdatewidget
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_selectdate_empty_label
        memory > xtest_custom_months
        memory > xtest_l10n
        memory > xtest_format_value
        memory > xtest_custom_input_format
        memory > xtest_render_empty
        memory > xtest_render_none
        memory > xtest_render_datetime
        memory > xtest_value_omitted_from_data
        memory > xtest_fieldset
        memory > xwidget
        memory > xtest_selectdate_required
        memory > xtest_value_from_datadict
        memory > xmaxDiff
        memory > xtest_years_rendered_without_separator
        memory > xtest_render_invalid_date
        memory > xtest_render_string
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xWidgetTest)))
              seq
                xmaxDiff.write "None: is there a None literal in the EO language?"
                xwidget.write (((unsupported)).apply ((xSelectDateWidget)) ((((unsupported)).apply ("2007") ("2008") ("2009") ("2010") ("2011") ("2012") ("2013") ("2014") ("2015") ("2016"))))
                xtest_render_empty.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_html)) (((xself).xwidget)) ("mydate") ("") ((((unsupported)).apply)))
                xtest_render_none.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((((xself).xwidget).xrender)).apply ("mydate") ("None: is there a None literal in the EO language?"))) ((((((xself).xwidget).xrender)).apply ("mydate") (""))))
                xtest_render_string.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_html)) (((xself).xwidget)) ("mydate") ("2010-04-15") ((((unsupported)).apply)))
                xtest_render_datetime.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((((xself).xwidget).xrender)).apply ("mydate") ((((xdate)).apply (2010) (4) (15))))) ((((((xself).xwidget).xrender)).apply ("mydate") ("2010-04-15"))))
                xtest_render_invalid_date.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) (((xself).xwidget)) ("mydate") ("2010-02-31") ((((unsupported)).apply)))
                xtest_custom_months.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply ((xSelectDateWidget)) ((xMONTHS_AP)) ((((unsupported)).apply ("2013"))))
                        (((unsupported)).apply (((xself).xcheck_html)) ((xwidget)) ("mydate") ("") ((((unsupported)).apply)))
                xtest_selectdate_required.write
                  [xself]
                    memory > xmydate
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          xmydate.write (((unsupported)).apply ((xDateField)) ((xSelectDateWidget)) (FALSE))
                        (((unsupported)).apply ((xForm)))
                          xmydate.write (((unsupported)).apply ((xDateField)) ((xSelectDateWidget)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((unsupported)).apply (((xGetNotRequiredDate).xfields)) ("mydate")).xwidget).xis_required)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((unsupported)).apply (((xGetRequiredDate).xfields)) ("mydate")).xwidget).xis_required)))
                xtest_selectdate_empty_label.write
                  [xself]
                    memory > xw
                    seq > @
                      seq
                        xw.write (((unsupported)).apply ((xSelectDateWidget)) ((((unsupported)).apply ("2014"))) ("empty_label"))
                        (((unsupported)).apply (((xself).xassertInHTML)) ("<option selected value=\"\">empty_label</option>") (((((xw).xrender)).apply ("mydate") (""))) (3))
                        xw.write (((unsupported)).apply ((xSelectDateWidget)) ((((unsupported)).apply ("2014"))) ((((unsupported)).apply ("empty_year") ("empty_month") ("empty_day"))))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xw).xrender)).apply ("mydate") (""))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("empty_label list/tuple must have 3 elements."))))
                          (((unsupported)).apply ((xSelectDateWidget)) ((((unsupported)).apply ("2014"))) ((((unsupported)).apply ("not enough") ("values"))))
                xtest_l10n.write
                  [xself]
                    memory > xw
                    seq > @
                      (((unsupported)).apply)
                        xw.write (((unsupported)).apply ((xSelectDateWidget)) ((((unsupported)).apply ("2007") ("2008") ("2009") ("2010") ("2011") ("2012") ("2013") ("2014") ("2015") ("2016"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xw).xvalue_from_datadict)).apply ((((unsupported)).apply ("date_year") ("2010") ("date_month") ("8") ("date_day") ("13"))) ((((unsupported)).apply)) ("date"))) ("13-08-2010"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply (((((xw).xrender)).apply ("date") ("13-08-2010"))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xw).xrender)).apply ("mydate") ("2010-02-30")).xcount)).apply ("selected"))) (3))
                        xw.write (((unsupported)).apply ((xSelectDateWidget)) ((((unsupported)).apply ("1899"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xw).xvalue_from_datadict)).apply ((((unsupported)).apply ("date_year") ("1899") ("date_month") ("8") ("date_day") ("13"))) ((((unsupported)).apply)) ("date"))) ("13-08-1899"))
                        xw.write (((unsupported)).apply ((xSelectDateWidget)) ((((unsupported)).apply ("0001"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xw).xvalue_from_datadict)).apply ((((unsupported)).apply ("date_year") ("0001") ("date_month") ("8") ("date_day") ("13"))) ((((unsupported)).apply)) ("date"))) ("13-08-0001"))
                xtest_custom_input_format.write
                  [xself]
                    memory > xexpected_dict
                    memory > xw
                    memory > xdata
                    seq > @
                      (((unsupported)).apply)
                        xw.write (((unsupported)).apply ((xSelectDateWidget)) ((((unsupported)).apply ("0001") ("1899") ("2009") ("2010"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xexpected_value)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("0001") ("8") ("13"))) ("13.08.0001"))) ((((unsupported)).apply ((((unsupported)).apply ("1899") ("7") ("11"))) ("11.07.1899"))) ((((unsupported)).apply ((((unsupported)).apply ("2009") ("3") ("7"))) ("07.03.2009"))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalues)))))
                            seq
                              xdata.write (((unsupported)).apply (("field_%s".mod (xfield))) ((xvalue)) ((((unsupported)).apply ((xfield)) ((xvalue)))) ((((xzip)).apply ((((unsupported)).apply ("year") ("month") ("day"))) ((xvalues)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xw).xvalue_from_datadict)).apply ((xdata)) ((((unsupported)).apply)) ("field"))) ((xexpected_value)))
                              xexpected_dict.write (((unsupported)).apply ((xfield)) ((((xint)).apply ((xvalue)))) ((((unsupported)).apply ((xfield)) ((xvalue)))) ((((xzip)).apply ((((unsupported)).apply ("year") ("month") ("day"))) ((xvalues)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xw).xformat_value)).apply ((xexpected_value)))) ((xexpected_dict)))
                xtest_format_value.write
                  [xself]
                    memory > xvalid_formats
                    memory > xinvalid_formats
                    seq > @
                      seq
                        xvalid_formats.write (((unsupported)).apply ("2000-1-1") ("2000-10-15") ("2000-01-01") ("2000-01-0") ("2000-0-01") ("2000-0-0") ("0-01-01") ("0-01-0") ("0-0-01") ("0-0-0"))
                        (((unsupported)).apply ((xvalue)) ((xvalid_formats)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xyear)) ((xmonth)) ((xday)))) ((((unsupported)).apply (((((xint)).apply ((xx))).or "")) ((xx)) (((((xvalue).xsplit)).apply ("-"))))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xwidget).xformat_value)).apply ((xvalue)))) ((((unsupported)).apply ("day") ((xday)) ("month") ((xmonth)) ("year") ((xyear)))))
                        xinvalid_formats.write (((unsupported)).apply ("2000-01-001") ("2000-001-01") ("2-01-01") ("20-01-01") ("200-01-01") ("20000-01-01"))
                        (((unsupported)).apply ((xvalue)) ((xinvalid_formats)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xwidget).xformat_value)).apply ((xvalue)))) ((((unsupported)).apply ("day") ("None: is there a None literal in the EO language?") ("month") ("None: is there a None literal in the EO language?") ("year") ("None: is there a None literal in the EO language?"))))
                xtest_value_from_datadict.write
                  [xself]
                    memory > xtests
                    memory > xdata
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("2000") ("12") ("1"))) ("2000-12-01"))) ((((unsupported)).apply ((((unsupported)).apply ("") ("12") ("1"))) ("0-12-1"))) ((((unsupported)).apply ((((unsupported)).apply ("2000") ("") ("1"))) ("2000-0-1"))) ((((unsupported)).apply ((((unsupported)).apply ("2000") ("12") (""))) ("2000-12-0"))) ((((unsupported)).apply ((((unsupported)).apply ("") ("") ("") (""))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("12") ("1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ("2000") ("None: is there a None literal in the EO language?") ("1"))) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply ("2000") ("12") ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalues)))))
                            seq
                              xdata.write (((unsupported)).apply)
                              (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xvalue)))) ((((xzip)).apply ((((unsupported)).apply ("year") ("month") ("day"))) ((xvalues)))))
                                (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xdata)) (("field_%s".mod (xfield_name))))) ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xwidget).xvalue_from_datadict)).apply ((xdata)) ((((unsupported)).apply)) ("field"))) ((xexpected)))
                xtest_value_omitted_from_data.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ("field"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply ("field_month") ("12"))) ((((unsupported)).apply)) ("field"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply ("field_year") ("2000"))) ((((unsupported)).apply)) ("field"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xwidget).xvalue_omitted_from_data)).apply ((((unsupported)).apply ("field_day") ("1"))) ((((unsupported)).apply)) ("field"))) (FALSE))
                        xdata.write (((unsupported)).apply ("field_day") ("1") ("field_month") ("12") ("field_year") ("2000"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xwidget).xvalue_omitted_from_data)).apply ((xdata)) ((((unsupported)).apply)) ("field"))) (FALSE))
                xtest_years_rendered_without_separator.write
                  [xself]
                    memory > xwidget
                    seq > @
                      (((unsupported)).apply)
                        xwidget.write (((unsupported)).apply ((xSelectDateWidget)) ((((unsupported)).apply (2007))))
                        (((unsupported)).apply (((xself).xcheck_html)) ((xwidget)) ("mydate") ("") ((((unsupported)).apply)))
                xtest_fieldset.write
                  [xself]
                    memory > xfield
                    memory > xtemplate_name
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xtemplate_name.write "forms_tests/use_fieldset.html"
                            xfield.write (((unsupported)).apply ((xDateField)) (((xself).xwidget)))
                        xform.write (xTestForm)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xwidget).xuse_fieldset)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ("<div><fieldset><legend for=\"id_field_month\">Field:</legend><select name=\"field_month\" required id=\"id_field_month\"><option value=\"1\">January</option><option value=\"2\">February</option><option value=\"3\">March</option><option value=\"4\">April</option><option value=\"5\">May</option><option value=\"6\">June</option><option value=\"7\">July</option><option value=\"8\">August</option><option value=\"9\">September</option><option value=\"10\">October</option><option value=\"11\">November</option><option value=\"12\">December</option></select><select name=\"field_day\" required id=\"id_field_day\"><option value=\"1\">1</option><option value=\"2\">2</option><option value=\"3\">3</option><option value=\"4\">4</option><option value=\"5\">5</option><option value=\"6\">6</option><option value=\"7\">7</option><option value=\"8\">8</option><option value=\"9\">9</option><option value=\"10\">10</option><option value=\"11\">11</option><option value=\"12\">12</option><option value=\"13\">13</option><option value=\"14\">14</option><option value=\"15\">15</option><option value=\"16\">16</option><option value=\"17\">17</option><option value=\"18\">18</option><option value=\"19\">19</option><option value=\"20\">20</option><option value=\"21\">21</option><option value=\"22\">22</option><option value=\"23\">23</option><option value=\"24\">24</option><option value=\"25\">25</option><option value=\"26\">26</option><option value=\"27\">27</option><option value=\"28\">28</option><option value=\"29\">29</option><option value=\"30\">30</option><option value=\"31\">31</option></select><select name=\"field_year\" required id=\"id_field_year\"><option value=\"2007\">2007</option><option value=\"2008\">2008</option><option value=\"2009\">2009</option><option value=\"2010\">2010</option><option value=\"2011\">2011</option><option value=\"2012\">2012</option><option value=\"2013\">2013</option><option value=\"2014\">2014</option><option value=\"2015\">2015</option><option value=\"2016\">2016</option></select></fieldset></div>") (((xform).xrender)))