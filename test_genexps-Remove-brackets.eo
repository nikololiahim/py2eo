memory > xtest_genexps
memory > xrange
memory > xprint
memory > xhasattr
memory > xi
memory > xgc
memory > xlen
memory > x__name__
memory > xsupport
memory > xsys
[] > test_genexps
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdoctests
        memory > x__test__
        memory > xtest_main
        seq > @
          seq
            xdoctests.write (((unsupported)).apply)
            (((unsupported)).apply)
            ((((xhasattr)).apply ((xsys)) ("gettrace")).and ((xsys).xgettrace)).if
              x__test__.write (((unsupported)).apply)
              x__test__.write (((unsupported)).apply ("doctests") ((xdoctests)))
            xtest_main.write
              [xverbose]
                memory > xcounts
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    bogusForceDataize.write ((((xsupport).xrun_doctest)).apply ((xtest_genexps)) ((xverbose)))
                    ((xverbose).and (((xhasattr)).apply ((xsys)) ("gettotalrefcount"))).if
                      seq
                        (((unsupported)).apply)
                        xcounts.write ((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xcounts)))))))
                          seq
                            bogusForceDataize.write ((((xsupport).xrun_doctest)).apply ((xtest_genexps)) ((xverbose)))
                            unsupported
                            (((unsupported)).apply ((((unsupported)).apply ((xcounts)) ((xi)))) (((xsys).xgettotalrefcount)))
                        bogusForceDataize.write (((xprint)).apply ((xcounts)))
            ((x__name__).eq "__main__").if
              (((unsupported)).apply ((xtest_main)) (TRUE))