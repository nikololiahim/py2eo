memory > xinspect
memory > xlist
memory > xValueError
memory > xwarnings
memory > xrange
memory > xcollections
memory > xmethod_has_no_args
memory > xEmptyPage
memory > xint
memory > xpage_number
memory > xInvalidPage
memory > xfloat
memory > xkwargs
memory > xTypeError
memory > xPage
memory > xceil
memory > xmax
memory > xRuntimeWarning
memory > xUnorderedObjectListWarning
memory > xcallable
memory > xtype
memory > xException
memory > xhasattr
memory > xargs
memory > xPageNotAnInteger
memory > xslice
memory > xgetattr
memory > xisinstance
memory > xlen
[] > paginator
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x__repr__
        memory > xcount
        memory > xnext_page_number
        memory > x__init__
        memory > xprevious_page_number
        memory > x__len__
        memory > xget_page
        memory > xhas_other_pages
        memory > x__iter__
        memory > xELLIPSIS
        memory > x__getitem__
        memory > xhas_previous
        memory > x_
        memory > x_get_page
        memory > xhas_next
        memory > xend_index
        memory > xpage_range
        memory > xget_elided_page_range
        memory > xpage
        memory > xnum_pages
        memory > x_check_object_list_is_ordered
        memory > xstart_index
        memory > xvalidate_number
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xRuntimeWarning)))
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply ((xInvalidPage)))
            (((unsupported)).apply ((xInvalidPage)))
            (((unsupported)).apply)
              seq
                xELLIPSIS.write (((x_)).apply ("â€¦"))
                x__init__.write
                  [xself xobject_list xper_page xorphans xallow_empty_first_page]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xobject_list)) ((xobject_list)))
                        bogusForceDataize.write ((((xself).x_check_object_list_is_ordered)).apply)
                        (((unsupported)).apply (((xself).xper_page)) ((((xint)).apply ((xper_page)))))
                        (((unsupported)).apply (((xself).xorphans)) ((((xint)).apply ((xorphans)))))
                        (((unsupported)).apply (((xself).xallow_empty_first_page)) ((xallow_empty_first_page)))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xpage_number)) (((xself).xpage_range)))
                        (((unsupported)).apply (((((xself).xpage)).apply ((xpage_number)))))
                xvalidate_number.write
                  [xself xnumber]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))
                          seq
                            ((((xisinstance)).apply ((xnumber)) ((xfloat))).and (((((xnumber).xis_integer)).apply).not)).if
                              (((unsupported)).apply ((xValueError)))
                            xnumber.write (((xint)).apply ((xnumber)))
                          (((unsupported)).apply ((((xPageNotAnInteger)).apply ((((x_)).apply ("That page number is not an integer"))))))
                        ((xnumber).less 1).if
                          (((unsupported)).apply ((((xEmptyPage)).apply ((((x_)).apply ("That page number is less than 1"))))))
                        ((xnumber).greater ((xself).xnum_pages)).if
                          (((xnumber).eq 1).and ((xself).xallow_empty_first_page)).if
                            (((unsupported)).apply ((((xEmptyPage)).apply ((((x_)).apply ("That page contains no results"))))))
                        (((unsupported)).apply ((xnumber)))
                xget_page.write
                  [xself xnumber]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xPageNotAnInteger)) ((xEmptyPage)))
                          xnumber.write ((((xself).xvalidate_number)).apply ((xnumber)))
                          xnumber.write 2
                          xnumber.write ((xself).xnum_pages)
                        (((unsupported)).apply (((((xself).xpage)).apply ((xnumber)))))
                xpage.write
                  [xself xnumber]
                    memory > xbottom
                    memory > xtop
                    seq > @
                      seq
                        unsupported
                        xnumber.write ((((xself).xvalidate_number)).apply ((xnumber)))
                        xbottom.write (((xnumber).sub 1).mul ((xself).xper_page))
                        xtop.write ((xbottom).add ((xself).xper_page))
                        (((xtop).add ((xself).xorphans)).geq ((xself).xcount)).if
                          xtop.write ((xself).xcount)
                        (((unsupported)).apply (((((xself).x_get_page)).apply ((((unsupported)).apply (((xself).xobject_list)) ((((unsupported)).apply ((xbottom)) ((xtop)))))) ((xnumber)) ((xself)))))
                x_get_page.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xPage)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xcount.write
                  [xself]
                    memory > xc
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xc.write (((xgetattr)).apply (((xself).xobject_list)) ("count") ("None: is there a None literal in the EO language?"))
                        (((((xcallable)).apply ((xc))).and (((((xinspect).xisbuiltin)).apply ((xc))).not)).and (((xmethod_has_no_args)).apply ((xc)))).if
                          (((unsupported)).apply ((((xc)).apply)))
                        (((unsupported)).apply ((((xlen)).apply (((xself).xobject_list)))))
                xnum_pages.write
                  [xself]
                    memory > xhits
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        ((((xself).xcount).eq 0).and (((xself).xallow_empty_first_page).not)).if
                          (((unsupported)).apply (1))
                        xhits.write (((xmax)).apply (1) ((((xself).xcount).sub ((xself).xorphans))))
                        (((unsupported)).apply ((((xceil)).apply (((xhits).div ((xself).xper_page))))))
                xpage_range.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xrange)).apply (1) ((((xself).xnum_pages).add 1)))))
                x_check_object_list_is_ordered.write
                  [xself]
                    memory > xordered
                    memory > xobj_list_repr
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xordered.write (((xgetattr)).apply (((xself).xobject_list)) ("ordered") ("None: is there a None literal in the EO language?"))
                        ((((unsupported)).apply ((xordered)) ("None: is there a None literal in the EO language?")).and ((xordered).not)).if
                          seq
                            xobj_list_repr.write ((((xhasattr)).apply (((xself).xobject_list)) ("model")).if ((("{} {}".xformat)).apply ((((xself).xobject_list).xmodel)) (((((xself).xobject_list).x__class__).x__name__))) ((("{!r}".xformat)).apply (((xself).xobject_list))))
                            (((unsupported)).apply (((xwarnings).xwarn)) (((("Pagination may yield inconsistent results with an unordered object_list: {}.".xformat)).apply ((xobj_list_repr)))) ((xUnorderedObjectListWarning)) (3))
                xget_elided_page_range.write
                  [xself xnumber xon_each_side xon_ends]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xnumber.write ((((xself).xvalidate_number)).apply ((xnumber)))
                        (((xself).xnum_pages).leq (((xon_each_side).add (xon_ends)).mul 2)).if
                          seq
                            (((unsupported)).apply (((xself).xpage_range)))
                            (((unsupported)).apply)
                        ((xnumber).greater (((1.add (xon_each_side)).add (xon_ends)).add 1)).if
                          seq
                            (((unsupported)).apply ((((xrange)).apply (1) (((xon_ends).add 1)))))
                            (((unsupported)).apply (((xself).xELLIPSIS)))
                            (((unsupported)).apply ((((xrange)).apply (((xnumber).sub (xon_each_side))) (((xnumber).add 1)))))
                          (((unsupported)).apply ((((xrange)).apply (1) (((xnumber).add 1)))))
                        ((xnumber).less (((((xself).xnum_pages).sub (xon_each_side)).sub (xon_ends)).sub 1)).if
                          seq
                            (((unsupported)).apply ((((xrange)).apply (((xnumber).add 1)) ((((xnumber).add (xon_each_side)).add 1)))))
                            (((unsupported)).apply (((xself).xELLIPSIS)))
                            (((unsupported)).apply ((((xrange)).apply (((((xself).xnum_pages).sub (xon_ends)).add 1)) ((((xself).xnum_pages).add 1)))))
                          (((unsupported)).apply ((((xrange)).apply (((xnumber).add 1)) ((((xself).xnum_pages).add 1)))))
            (((unsupported)).apply ((((xcollections).xabc).xSequence)))
              seq
                x__init__.write
                  [xself xobject_list xnumber xpaginator]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xobject_list)) ((xobject_list)))
                        (((unsupported)).apply (((xself).xnumber)) ((xnumber)))
                        (((unsupported)).apply (((xself).xpaginator)) ((xpaginator)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<Page %s of %s>".mod (((unsupported)).apply (((xself).xnumber)) ((((xself).xpaginator).xnum_pages))))))
                x__len__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xlen)).apply (((xself).xobject_list)))))
                x__getitem__.write
                  [xself xindex]
                    seq > @
                      seq
                        ((((xisinstance)).apply ((xindex)) ((((unsupported)).apply ((xint)) ((xslice))))).not).if
                          (((unsupported)).apply ((((xTypeError)).apply (("Page indices must be integers or slices, not %s.".mod ((((xtype)).apply ((xindex))).x__name__))))))
                        ((((xisinstance)).apply (((xself).xobject_list)) ((xlist))).not).if
                          (((unsupported)).apply (((xself).xobject_list)) ((((xlist)).apply (((xself).xobject_list)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xobject_list)) ((xindex)))))
                xhas_next.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xnumber).less (((xself).xpaginator).xnum_pages))))
                xhas_previous.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xnumber).greater 1)))
                xhas_other_pages.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).xhas_previous)).apply).or ((((xself).xhas_next)).apply))))
                xnext_page_number.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).xpaginator).xvalidate_number)).apply ((((xself).xnumber).add 1)))))
                xprevious_page_number.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).xpaginator).xvalidate_number)).apply ((((xself).xnumber).sub 1)))))
                xstart_index.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xself).xpaginator).xcount).eq 0).if
                          (((unsupported)).apply (1))
                        (((unsupported)).apply ((((((xself).xpaginator).xper_page).mul (((xself).xnumber).sub 1)).add 1)))
                xend_index.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xself).xnumber).eq (((xself).xpaginator).xnum_pages)).if
                          (((unsupported)).apply ((((xself).xpaginator).xcount)))
                        (((unsupported)).apply ((((xself).xnumber).mul (((xself).xpaginator).xper_page))))