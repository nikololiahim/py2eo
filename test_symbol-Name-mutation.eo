memory > xopen
memory > xGEN_SYMBOL_FILE
memory > xstderr
memory > xsupport
memory > xsys
memory > xsubprocess
memory > xos
memory > x__file__
memory > xunittest
memory > xfp
memory > xexitcode
memory > x__name__
[] > test_symbol
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_real_grammar_and_symbol_file
        memory > x_generate_symbols
        memory > xcompare_files
        memory > xTEST_PY_FILE
        memory > xSYMBOL_FILE
        memory > x_copy_file_without_generated_symbols
        memory > xGEN_SYMBOL_FILE2
        memory > xGRAMMAR_FILE
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xSYMBOL_FILE.write ((((xsupport).xfindfile)).apply ("symbol.py"))
            xGEN_SYMBOL_FILE2.write (((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ("..") ("..") ("Tools") ("scripts") ("generate_symbol_py.py"))
            xGRAMMAR_FILE.write (((((xos).xpath).xjoin)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))) ("..") ("..") ("Include") ("graminit.h"))
            xTEST_PY_FILE.write "symbol_test.py"
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                x_copy_file_without_generated_symbols.write
                  [xself xsource_file xdest_file]
                    memory > xlines
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xsource_file)))) ((xfp)))
                          xlines.write ((((xfp).xreadlines)).apply)
                        (((unsupported)).apply ((((xopen)).apply ((xdest_file)) ("w"))) ((xfp)))
                          seq
                            bogusForceDataize.write ((((xfp).xwritelines)).apply ((((unsupported)).apply ((xlines)) ((((unsupported)).apply ((((((xlines).xindex)).apply ("#--start constants--n")).add 1)))))))
                            bogusForceDataize.write ((((xfp).xwritelines)).apply ((((unsupported)).apply ((xlines)) ((((unsupported)).apply (((((xlines).xindex)).apply ("#--end constants--n"))))))))
                x_generate_symbols.write
                  [xself xgrammar_file xtarget_symbol_py_file]
                    memory > xproc
                    memory > xstderr
                    seq > @
                      seq
                        xproc.write (((unsupported)).apply (((xsubprocess).xPopen)) ((((unsupported)).apply (((xsys).xexecutable)) ((xGEN_SYMBOL_FILE)) ((xgrammar_file)) ((xtarget_symbol_py_file)))) (((xsubprocess).xPIPE)))
                        xstderr.write (((unsupported)).apply (((((xproc).xcommunicate)).apply)) (1))
                        (((unsupported)).apply ((((unsupported)).apply (((xproc).xreturncode)) ((xstderr)))))
                xcompare_files.write
                  [xself xfile1 xfile2]
                    memory > xlines2
                    memory > xlines1
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xfile1)))) ((xfp)))
                          xlines1.write ((((xfp).xreadlines)).apply)
                        (((unsupported)).apply ((((xopen)).apply ((xfile2)))) ((xfp)))
                          xlines2.write ((((xfp).xreadlines)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines1)) ((xlines2)))
                xtest_real_grammar_and_symbol_file.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xoutput)))
                        bogusForceDataize.write ((((xself).x_copy_file_without_generated_symbols)).apply ((xSYMBOL_FILE)) ((xoutput)))
                        (((unsupported)).apply ((((unsupported)).apply ((xexitcode)) ((xstderr)))) (((((xself).x_generate_symbols)).apply ((xGRAMMAR_FILE)) ((xoutput)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("") ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (0) ((xexitcode)))
                        bogusForceDataize.write ((((xself).xcompare_files)).apply ((xSYMBOL_FILE)) ((xoutput)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)