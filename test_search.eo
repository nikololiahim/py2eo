memory > xImportError
memory > xSearchConfig
memory > xmodify_settings
memory > xValueError
memory > xSearchRank
memory > xquery_expression
memory > xSearchVector
memory > xconnection
memory > xValue
memory > xScene
memory > xPostgreSQLTestCase
memory > xTypeError
memory > xstr
memory > xSearchQuery
memory > xcursor
memory > xparams
memory > xF
memory > xPostgreSQLSimpleTestCase
memory > xGrailTestData
memory > xCharacter
memory > xLineSavedSearch
memory > xquery
memory > xSearchHeadline
memory > xverse
memory > xexpected_str
memory > xsql
memory > xLine
[] > test_search
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_from_parameter
        memory > xtest_combine_different_vector_configs
        memory > xtest_query_multiple_and
        memory > xtest_headline_fragments_words_options
        memory > xsetUpTestData
        memory > xtest_headline_separator_options
        memory > xtest_raw_search
        memory > xtest_search_with_non_text
        memory > xtest_ranking_with_normalization
        memory > xtest_config_from_field_implicit
        memory > xtest_web_search_with_config
        memory > xtest_combine_raw_phrase
        memory > xtest_combined_configs
        memory > xtest_ranking_chaining
        memory > xtest_headline_highlight_all_option
        memory > xtest_web_search
        memory > xtest_headline_with_config
        memory > xtest_weights_in_vector
        memory > xtest_raw_search_with_config
        memory > xtest_phrase_search_with_config
        memory > xtest_simple
        memory > xtest_headline_untyped_args
        memory > xtest_combine_different_configs
        memory > xtest_existing_vector_config_explicit
        memory > xtest_config_from_field_explicit
        memory > xtest_bad_search_type
        memory > xtest_ranked_custom_weights
        memory > xtest_query_invert
        memory > xtest_phrase_search
        memory > xtest_cover_density_ranking
        memory > xtest_query_combined_mismatch
        memory > xtest_headline
        memory > xtest_rank_passing_untyped_args
        memory > xtest_headline_short_word_option
        memory > xtest_config_query_implicit
        memory > xtest_ranking_with_masked_normalization
        memory > xtest_headline_with_config_from_field
        memory > xtest_str
        memory > xtest_simple_on_scene
        memory > xtest_query_or
        memory > xtest_config_query_explicit
        memory > xtest_terms_adjacent
        memory > xtest_existing_vector
        memory > xtest_non_exact_match
        memory > xtest_search_two_terms
        memory > xtest_vector_add_multi
        memory > xtest_ranking
        memory > xtest_vector_combined_mismatch
        memory > xtest_query_and
        memory > xtest_search_vector_index
        memory > xtest_vector_add
        memory > xtest_search_with_null
        memory > xtest_search_with_F_expression
        memory > xtest_single_coalesce_expression
        memory > xtest_search_query_config
        memory > xtest_query_multiple_or
        memory > xtest_search_two_terms_with_partial_match
        memory > xtest_simple_on_dialogue
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
                (((unsupported)).apply)
            (((unsupported)).apply)
              xsetUpTestData.write
                [xcls]
                  memory > xbedemir
                  memory > xcrowd
                  memory > xguards
                  memory > xtrojan_rabbit
                  memory > xwitch
                  memory > xduck
                  memory > xverses
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply (((xcls).xrobin)) ((((unsupported)).apply ((((xScene).xobjects).xcreate)) ("Scene 10") ("The dark forest of Ewing"))))
                      (((unsupported)).apply (((xcls).xminstrel)) ((((unsupported)).apply ((((xCharacter).xobjects).xcreate)) ("Minstrel"))))
                      xverses.write (((unsupported)).apply ("Bravely bold Sir Robin, rode forth from Camelot. He was not afraid to die, o Brave Sir Robin. He was not at all afraid to be killed in nasty ways. Brave, brave, brave, brave Sir Robin") ("He was not in the least bit scared to be mashed into a pulp, Or to have his eyes gouged out, and his elbows broken. To have his kneecaps split, and his body burned away, And his limbs all hacked and mangled, brave Sir Robin!") ("His head smashed in and his heart cut out, And his liver removed and his bowels unplugged, And his nostrils ripped and his bottom burned off,And his --"))
                      (((unsupported)).apply (((xcls).xverses)) ((((unsupported)).apply ((((unsupported)).apply ((((xLine).xobjects).xcreate)) (((xcls).xrobin)) (((xcls).xminstrel)) ((xverse)))) ((xverse)) ((xverses)))))
                      (((unsupported)).apply ((((unsupported)).apply (((xcls).xverse0)) (((xcls).xverse1)) (((xcls).xverse2)))) (((xcls).xverses)))
                      (((unsupported)).apply (((xcls).xwitch_scene)) ((((unsupported)).apply ((((xScene).xobjects).xcreate)) ("Scene 5") ("Sir Bedemir's Castle"))))
                      xbedemir.write (((unsupported)).apply ((((xCharacter).xobjects).xcreate)) ("Bedemir"))
                      xcrowd.write (((unsupported)).apply ((((xCharacter).xobjects).xcreate)) ("Crowd"))
                      xwitch.write (((unsupported)).apply ((((xCharacter).xobjects).xcreate)) ("Witch"))
                      xduck.write (((unsupported)).apply ((((xCharacter).xobjects).xcreate)) ("Duck"))
                      (((unsupported)).apply (((xcls).xbedemir0)) ((((unsupported)).apply ((((xLine).xobjects).xcreate)) (((xcls).xwitch_scene)) ((xbedemir)) ("We shall use my larger scales!") ("english"))))
                      (((unsupported)).apply (((xcls).xbedemir1)) ((((unsupported)).apply ((((xLine).xobjects).xcreate)) (((xcls).xwitch_scene)) ((xbedemir)) ("Right, remove the supports!") ("english"))))
                      (((unsupported)).apply (((xcls).xduck)) ((((unsupported)).apply ((((xLine).xobjects).xcreate)) (((xcls).xwitch_scene)) ((xduck)) ("None: is there a None literal in the EO language?"))))
                      (((unsupported)).apply (((xcls).xcrowd)) ((((unsupported)).apply ((((xLine).xobjects).xcreate)) (((xcls).xwitch_scene)) ((xcrowd)) ("A witch! A witch!"))))
                      (((unsupported)).apply (((xcls).xwitch)) ((((unsupported)).apply ((((xLine).xobjects).xcreate)) (((xcls).xwitch_scene)) ((xwitch)) ("It's a fair cop."))))
                      xtrojan_rabbit.write (((unsupported)).apply ((((xScene).xobjects).xcreate)) ("Scene 8") ("The castle of Our Master Ruiz' de lu la Ramper"))
                      xguards.write (((unsupported)).apply ((((xCharacter).xobjects).xcreate)) ("French Guards"))
                      (((unsupported)).apply (((xcls).xfrench)) ((((unsupported)).apply ((((xLine).xobjects).xcreate)) ((xtrojan_rabbit)) ((xguards)) ("Oh. Un beau cadeau. Oui oui.") ("french"))))
            (((unsupported)).apply ((xGrailTestData)) ((xPostgreSQLTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.postgres"))))))
              seq
                xtest_simple.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) ("elbows"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse1)))))
                xtest_non_exact_match.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) ("hearts"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)))))
                xtest_search_two_terms.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) ("heart bowel"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)))))
                xtest_search_two_terms_with_partial_match.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) ("Robin killed"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse0)))))
                xtest_search_query_config.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("nostrils") ("simple"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)))))
                xtest_search_with_F_expression.write
                  [xself]
                    memory > xsearched
                    memory > xmatch
                    seq > @
                      seq
                        (((unsupported)).apply ((((xLineSavedSearch).xobjects).xcreate)) (((xself).xverse1)) ("hearts"))
                        xmatch.write (((unsupported)).apply ((((xLineSavedSearch).xobjects).xcreate)) (((xself).xverse1)) ("elbows"))
                        (((unsupported)).apply ((xquery_expression)) ((((unsupported)).apply ((((xF)).apply ("query"))) ((((xSearchQuery)).apply ((((xF)).apply ("query"))))))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xquery_expression)))))
                            seq
                              xsearched.write (((unsupported)).apply ((((xLineSavedSearch).xobjects).xfilter)) ((xquery_expression)))
                              bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply ((xmatch)))))
            (((unsupported)).apply ((xGrailTestData)) ((xPostgreSQLTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.postgres"))))))
              seq
                xtest_existing_vector.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        (((unsupported)).apply ((((xLine).xobjects).xupdate)) ((((xSearchVector)).apply ("dialogue"))))
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) ((((xSearchQuery)).apply ("Robin killed"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse0)))))
                xtest_existing_vector_config_explicit.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        (((unsupported)).apply ((((xLine).xobjects).xupdate)) ((((xSearchVector)).apply ("dialogue"))))
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("cadeaux") ("french"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)))))
                xtest_single_coalesce_expression.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("dialogue")))).xfilter)) ("cadeaux"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("COALESCE(COALESCE") ((((xstr)).apply (((xsearched).xquery)))))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              xtest_from_parameter.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xSearchConfig).xfrom_parameter)).apply ("None: is there a None literal in the EO language?"))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xSearchConfig).xfrom_parameter)).apply ("foo"))) ((((xSearchConfig)).apply ("foo"))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xSearchConfig).xfrom_parameter)).apply ((((xSearchConfig)).apply ("bar"))))) ((((xSearchConfig)).apply ("bar"))))
            (((unsupported)).apply ((xGrailTestData)) ((xPostgreSQLTestCase)))
              seq
                xtest_simple_on_dialogue.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("scene__setting") ("dialogue")))).xfilter)) ("elbows"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse1)))))
                xtest_simple_on_scene.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("scene__setting") ("dialogue")))).xfilter)) ("Forest"))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) (((xself).xverses)))
                xtest_non_exact_match.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("scene__setting") ("dialogue")))).xfilter)) ("heart"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)))))
                xtest_search_two_terms.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("scene__setting") ("dialogue")))).xfilter)) ("heart forest"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)))))
                xtest_terms_adjacent.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("character__name") ("dialogue")))).xfilter)) ("minstrel"))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) (((xself).xverses)))
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("scene__setting") ("dialogue")))).xfilter)) ("minstrelbravely"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply)))
                xtest_search_with_null.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("scene__setting") ("dialogue")))).xfilter)) ("bedemir"))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xbedemir0)) (((xself).xbedemir1)) (((xself).xcrowd)) (((xself).xwitch)) (((xself).xduck)))))
                xtest_search_with_non_text.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("id")))).xfilter)) ((((xstr)).apply ((((xself).xcrowd).xid)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xcrowd)))))
                xtest_phrase_search.write
                  [xself]
                    memory > xsearched
                    memory > xline_qs
                    seq > @
                      seq
                        xline_qs.write (((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("dialogue"))))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("burned body his away") ("phrase"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply)))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("his body burned away") ("phrase"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse1)))))
                xtest_phrase_search_with_config.write
                  [xself]
                    memory > xsearched
                    memory > xline_qs
                    seq > @
                      seq
                        xline_qs.write (((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchVector)) ("scene__setting") ("dialogue") ("french"))))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("cadeau beau un") ("phrase") ("french"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply)))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("un beau cadeau") ("phrase") ("french"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)))))
                xtest_raw_search.write
                  [xself]
                    memory > xsearched
                    memory > xline_qs
                    seq > @
                      seq
                        xline_qs.write (((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("dialogue"))))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("Robin") ("raw"))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse0)) (((xself).xverse1)))))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("Robin & !'Camelot'") ("raw"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse1)))))
                xtest_raw_search_with_config.write
                  [xself]
                    memory > xsearched
                    memory > xline_qs
                    seq > @
                      seq
                        xline_qs.write (((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchVector)) ("dialogue") ("french"))))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("'cadeaux' & 'beaux'") ("raw") ("french"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)))))
                xtest_web_search.write
                  [xself]
                    memory > xsearched
                    memory > xline_qs
                    seq > @
                      (((unsupported)).apply)
                        xline_qs.write (((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("dialogue"))))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("\"burned body\" \"split kneecaps\"") ("websearch"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply)))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("\"body burned\" \"kneecaps split\" -\"nostrils\"") ("websearch"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse1)))))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("\"Sir Robin\" (\"kneecaps\" OR \"Camelot\")") ("websearch"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse0)) (((xself).xverse1)))))
                xtest_web_search_with_config.write
                  [xself]
                    memory > xsearched
                    memory > xline_qs
                    seq > @
                      (((unsupported)).apply)
                        xline_qs.write (((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchVector)) ("scene__setting") ("dialogue") ("french"))))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("cadeau -beau") ("websearch") ("french"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply)))
                        xsearched.write (((unsupported)).apply (((xline_qs).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("beau cadeau") ("websearch") ("french"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)))))
                xtest_bad_search_type.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Unknown search_type argument 'foo'."))))
                        (((unsupported)).apply ((xSearchQuery)) ("kneecaps") ("foo"))
                xtest_config_query_explicit.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchVector)) ("scene__setting") ("dialogue") ("french")))).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("cadeaux") ("french"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)))))
                xtest_config_query_implicit.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchVector)) ("scene__setting") ("dialogue") ("french")))).xfilter)) ("cadeaux"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)))))
                xtest_config_from_field_explicit.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchVector)) ("scene__setting") ("dialogue") ((((xF)).apply ("dialogue_config")))))).xfilter)) ((((unsupported)).apply ((xSearchQuery)) ("cadeaux") ((((xF)).apply ("dialogue_config"))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)))))
                xtest_config_from_field_implicit.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchVector)) ("scene__setting") ("dialogue") ((((xF)).apply ("dialogue_config")))))).xfilter)) ("cadeaux"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)))))
            (((unsupported)).apply ((xGrailTestData)) ((xPostgreSQLTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.postgres"))))))
              seq
                xtest_vector_add.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) (((((xSearchVector)).apply ("scene__setting")).add (((xSearchVector)).apply ("character__name"))))).xfilter)) ("bedemir"))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xbedemir0)) (((xself).xbedemir1)) (((xself).xcrowd)) (((xself).xwitch)) (((xself).xduck)))))
                xtest_vector_add_multi.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((((xSearchVector)).apply ("scene__setting")).add (((xSearchVector)).apply ("character__name"))).add (((xSearchVector)).apply ("dialogue"))))).xfilter)) ("bedemir"))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xbedemir0)) (((xself).xbedemir1)) (((xself).xcrowd)) (((xself).xwitch)) (((xself).xduck)))))
                xtest_vector_combined_mismatch.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "SearchVector can only be combined with other SearchVector instances, got NoneType."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((((xLine).xobjects).xfilter)) (("None: is there a None literal in the EO language?".add (((xSearchVector)).apply ("character__name")))))
                xtest_combine_different_vector_configs.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) (((((unsupported)).apply ((xSearchVector)) ("dialogue") ("english")).add (((unsupported)).apply ((xSearchVector)) ("dialogue") ("french"))))).xfilter)) (((((unsupported)).apply ((xSearchQuery)) ("cadeaux") ("french")).or (((xSearchQuery)).apply ("nostrils")))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)) (((xself).xverse2)))))
                xtest_query_and.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("scene__setting") ("dialogue")))).xfilter)) (((((xSearchQuery)).apply ("bedemir")).and (((xSearchQuery)).apply ("scales")))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xbedemir0)))))
                xtest_query_multiple_and.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("scene__setting") ("dialogue")))).xfilter)) ((((((xSearchQuery)).apply ("bedemir")).and (((xSearchQuery)).apply ("scales"))).and (((xSearchQuery)).apply ("nostrils")))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply)))
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((xSearchVector)).apply ("scene__setting") ("dialogue")))).xfilter)) ((((((xSearchQuery)).apply ("shall")).and (((xSearchQuery)).apply ("use"))).and (((xSearchQuery)).apply ("larger")))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xbedemir0)))))
                xtest_query_or.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) (((((xSearchQuery)).apply ("kneecaps")).or (((xSearchQuery)).apply ("nostrils")))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse1)) (((xself).xverse2)))))
                xtest_query_multiple_or.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) ((((((xSearchQuery)).apply ("kneecaps")).or (((xSearchQuery)).apply ("nostrils"))).or (((xSearchQuery)).apply ("Sir Robin")))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse1)) (((xself).xverse2)) (((xself).xverse0)))))
                xtest_query_invert.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xminstrel)) (((((xSearchQuery)).apply ("kneecaps")).neg)))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse0)) (((xself).xverse2)))))
                xtest_combine_different_configs.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) (((((unsupported)).apply ((xSearchQuery)) ("cadeau") ("french")).or (((unsupported)).apply ((xSearchQuery)) ("nostrils") ("english")))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xfrench)) (((xself).xverse2)))))
                xtest_combined_configs.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) (((((unsupported)).apply ((xSearchQuery)) ("nostrils") ("simple")).and (((unsupported)).apply ((xSearchQuery)) ("bowels") ("simple")))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)))))
                xtest_combine_raw_phrase.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply ((((xLine).xobjects).xfilter)) (((((unsupported)).apply ((xSearchQuery)) ("burn:*") ("raw") ("simple")).or (((unsupported)).apply ((xSearchQuery)) ("rode forth from Camelot") ("phrase")))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse0)) (((xself).xverse1)) (((xself).xverse2)))))
                xtest_query_combined_mismatch.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "SearchQuery can only be combined with other SearchQuery instances, got NoneType."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((((xLine).xobjects).xfilter)) (("None: is there a None literal in the EO language?".or (((xSearchQuery)).apply ("kneecaps")))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((((xLine).xobjects).xfilter)) (("None: is there a None literal in the EO language?".and (((xSearchQuery)).apply ("kneecaps")))))
            (((unsupported)).apply ((xGrailTestData)) ((xPostgreSQLTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.postgres"))))))
              seq
                xtest_ranking.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write ((((((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xminstrel))).xannotate)) ((((xSearchRank)).apply ((((xSearchVector)).apply ("dialogue"))) ((((xSearchQuery)).apply ("brave sir robin")))))).xorder_by)).apply ("rank"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)) (((xself).xverse1)) (((xself).xverse0)))))
                xtest_rank_passing_untyped_args.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write ((((((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xminstrel))).xannotate)) ((((xSearchRank)).apply ("dialogue") ("brave sir robin")))).xorder_by)).apply ("rank"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)) (((xself).xverse1)) (((xself).xverse0)))))
                xtest_weights_in_vector.write
                  [xself]
                    memory > xvector
                    memory > xsearched
                    seq > @
                      seq
                        xvector.write ((((unsupported)).apply ((xSearchVector)) ("dialogue") ("A")).add (((unsupported)).apply ((xSearchVector)) ("character__name") ("D")))
                        xsearched.write (((unsupported)).apply (((((((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xwitch_scene))).xannotate)) ((((xSearchRank)).apply ((xvector)) ((((xSearchQuery)).apply ("witch")))))).xorder_by)).apply ("-rank"))) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xcrowd)) (((xself).xwitch)))))
                        xvector.write ((((unsupported)).apply ((xSearchVector)) ("dialogue") ("D")).add (((unsupported)).apply ((xSearchVector)) ("character__name") ("A")))
                        xsearched.write (((unsupported)).apply (((((((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xwitch_scene))).xannotate)) ((((xSearchRank)).apply ((xvector)) ((((xSearchQuery)).apply ("witch")))))).xorder_by)).apply ("-rank"))) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xwitch)) (((xself).xcrowd)))))
                xtest_ranked_custom_weights.write
                  [xself]
                    memory > xvector
                    memory > xsearched
                    seq > @
                      seq
                        xvector.write ((((unsupported)).apply ((xSearchVector)) ("dialogue") ("D")).add (((unsupported)).apply ((xSearchVector)) ("character__name") ("A")))
                        xsearched.write (((unsupported)).apply (((((((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xwitch_scene))).xannotate)) ((((unsupported)).apply ((xSearchRank)) ((xvector)) ((((xSearchQuery)).apply ("witch"))) ((((unsupported)).apply (1) (0) (0) (0.5)))))).xorder_by)).apply ("-rank"))) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xcrowd)) (((xself).xwitch)))))
                xtest_ranking_chaining.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xminstrel))).xannotate)) ((((xSearchRank)).apply ((((xSearchVector)).apply ("dialogue"))) ((((xSearchQuery)).apply ("brave sir robin")))))).xfilter)) (0.3))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse0)))))
                xtest_cover_density_ranking.write
                  [xself]
                    memory > xnot_dense_verse
                    memory > xsearched
                    seq > @
                      seq
                        xnot_dense_verse.write (((unsupported)).apply ((((xLine).xobjects).xcreate)) (((xself).xrobin)) (((xself).xminstrel)) ("Bravely taking to his feet, he beat a very brave retreat. A brave retreat brave Sir Robin."))
                        xsearched.write ((((((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xminstrel))).xannotate)) ((((unsupported)).apply ((xSearchRank)) ((((xSearchVector)).apply ("dialogue"))) ((((xSearchQuery)).apply ("brave robin"))) (TRUE)))).xorder_by)).apply ("rank") ("-pk"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)) ((xnot_dense_verse)) (((xself).xverse1)) (((xself).xverse0)))))
                xtest_ranking_with_normalization.write
                  [xself]
                    memory > xshort_verse
                    memory > xsearched
                    seq > @
                      seq
                        xshort_verse.write (((unsupported)).apply ((((xLine).xobjects).xcreate)) (((xself).xrobin)) (((xself).xminstrel)) ("A brave retreat brave Sir Robin."))
                        xsearched.write ((((((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xminstrel))).xannotate)) ((((unsupported)).apply ((xSearchRank)) ((((xSearchVector)).apply ("dialogue"))) ((((xSearchQuery)).apply ("brave sir robin"))) (2)))).xorder_by)).apply ("rank"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)) (((xself).xverse1)) (((xself).xverse0)) ((xshort_verse)))))
                xtest_ranking_with_masked_normalization.write
                  [xself]
                    memory > xshort_verse
                    memory > xsearched
                    seq > @
                      seq
                        xshort_verse.write (((unsupported)).apply ((((xLine).xobjects).xcreate)) (((xself).xrobin)) (((xself).xminstrel)) ("A brave retreat brave Sir Robin."))
                        xsearched.write ((((((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xfilter)) (((xself).xminstrel))).xannotate)) ((((unsupported)).apply ((xSearchRank)) ((((xSearchVector)).apply ("dialogue"))) ((((xSearchQuery)).apply ("brave sir robin"))) (((((((xValue)).apply (2)).xbitor)).apply ((((xValue)).apply (8)))))))).xorder_by)).apply ("rank"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xsearched)) ((((unsupported)).apply (((xself).xverse2)) (((xself).xverse1)) (((xself).xverse0)) ((xshort_verse)))))
            (((unsupported)).apply ((xPostgreSQLTestCase)))
              xtest_search_vector_index.write
                [xself]
                  memory > xcompiler
                  memory > xquery
                  memory > xresolved
                  seq > @
                    seq
                      unsupported
                      xquery.write ((((((xLine).xobjects).xall)).apply).xquery)
                      xresolved.write ((((((unsupported)).apply ((xSearchVector)) ("id") ("dialogue") ("english")).xresolve_expression)).apply ((xquery)))
                      xcompiler.write ((((xquery).xget_compiler)).apply (((xconnection).xalias)))
                      (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xresolved).xas_sql)).apply ((xcompiler)) ((xconnection)))))
                      (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                        bogusForceDataize.write ((((xcursor).xexecute)).apply (("CREATE INDEX search_vector_index ON %s USING GIN (%s)".mod (((unsupported)).apply ((((xLine).x_meta).xdb_table)) ((xsql))))) ((xparams)))
            (((unsupported)).apply ((xPostgreSQLSimpleTestCase)))
              xtest_str.write
                [xself]
                  memory > xtests
                  seq > @
                    seq
                      xtests.write (((unsupported)).apply ((((unsupported)).apply (((((xSearchQuery)).apply ("a")).neg)) ("~SearchQuery(Value('a'))"))) ((((unsupported)).apply ((((((xSearchQuery)).apply ("a")).or (((xSearchQuery)).apply ("b"))).and ((((xSearchQuery)).apply ("c")).or (((xSearchQuery)).apply ("d"))))) ("((SearchQuery(Value('a')) || SearchQuery(Value('b'))) && (SearchQuery(Value('c')) || SearchQuery(Value('d'))))"))) ((((unsupported)).apply (((((xSearchQuery)).apply ("a")).and ((((xSearchQuery)).apply ("b")).or (((xSearchQuery)).apply ("c"))))) ("(SearchQuery(Value('a')) && (SearchQuery(Value('b')) || SearchQuery(Value('c'))))"))) ((((unsupported)).apply ((((((xSearchQuery)).apply ("a")).or (((xSearchQuery)).apply ("b"))).and (((xSearchQuery)).apply ("c")))) ("((SearchQuery(Value('a')) || SearchQuery(Value('b'))) && SearchQuery(Value('c')))"))) ((((unsupported)).apply (((((xSearchQuery)).apply ("a")).and ((((xSearchQuery)).apply ("b")).and ((((xSearchQuery)).apply ("c")).or (((xSearchQuery)).apply ("d")))))) ("(SearchQuery(Value('a')) && (SearchQuery(Value('b')) && (SearchQuery(Value('c')) || SearchQuery(Value('d')))))"))))
                      (((unsupported)).apply ((((unsupported)).apply ((xquery)) ((xexpected_str)))) ((xtests)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xquery)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xquery)))) ((xexpected_str)))
            (((unsupported)).apply ((xGrailTestData)) ((xPostgreSQLTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.postgres"))))))
              seq
                xtest_headline.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchHeadline)) ((((xF)).apply ("dialogue"))) ((((xSearchQuery)).apply ("brave sir robin"))) ((((xSearchConfig)).apply ("english")))))).xget)) ((((xself).xverse0).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsearched).xheadline)) ("<b>Robin</b>. He was not at all afraid to be killed in nasty ways. <b>Brave</b>, <b>brave</b>, <b>brave</b>, <b>brave</b> <b>Sir</b> <b>Robin</b>"))
                xtest_headline_untyped_args.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchHeadline)) ("dialogue") ("killed") ("english")))).xget)) ((((xself).xverse0).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsearched).xheadline)) ("Robin. He was not at all afraid to be <b>killed</b> in nasty ways. Brave, brave, brave, brave Sir Robin"))
                xtest_headline_with_config.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchHeadline)) ("dialogue") ((((unsupported)).apply ((xSearchQuery)) ("cadeaux") ("french"))) ("french")))).xget)) ((((xself).xfrench).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsearched).xheadline)) ("Oh. Un beau <b>cadeau</b>. Oui oui."))
                xtest_headline_with_config_from_field.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchHeadline)) ("dialogue") ((((unsupported)).apply ((xSearchQuery)) ("cadeaux") ((((xF)).apply ("dialogue_config"))))) ((((xF)).apply ("dialogue_config")))))).xget)) ((((xself).xfrench).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsearched).xheadline)) ("Oh. Un beau <b>cadeau</b>. Oui oui."))
                xtest_headline_separator_options.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchHeadline)) ("dialogue") ("brave sir robin") ("<span>") ("</span>")))).xget)) ((((xself).xverse0).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsearched).xheadline)) ("<span>Robin</span>. He was not at all afraid to be killed in nasty ways. <span>Brave</span>, <span>brave</span>, <span>brave</span>, <span>brave</span> <span>Sir</span> <span>Robin</span>"))
                xtest_headline_highlight_all_option.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchHeadline)) ("dialogue") ((((unsupported)).apply ((xSearchQuery)) ("brave sir robin") ("english"))) (TRUE)))).xget)) ((((xself).xverse0).xpk)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("<b>Bravely</b> bold <b>Sir</b> <b>Robin</b>, rode forth from Camelot. He was not afraid to die, o ") (((xsearched).xheadline)))
                xtest_headline_short_word_option.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchHeadline)) ("dialogue") ((((unsupported)).apply ((xSearchQuery)) ("Camelot") ("english"))) (5) (8)))).xget)) ((((xself).xverse0).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsearched).xheadline)) ("<b>Camelot</b>. He was not afraid to die, o Brave Sir Robin. He was not at all afraid"))
                xtest_headline_fragments_words_options.write
                  [xself]
                    memory > xsearched
                    seq > @
                      seq
                        xsearched.write (((unsupported)).apply (((((unsupported)).apply ((((xLine).xobjects).xannotate)) ((((unsupported)).apply ((xSearchHeadline)) ("dialogue") ((((unsupported)).apply ((xSearchQuery)) ("brave sir robin") ("english"))) ("...<br>") (4) (3) (1)))).xget)) ((((xself).xverse0).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsearched).xheadline)) ("<b>Sir</b> <b>Robin</b>, rode...<br><b>Brave</b> <b>Sir</b> <b>Robin</b>...<br><b>Brave</b>, <b>brave</b>, <b>brave</b>...<br><b>brave</b> <b>Sir</b> <b>Robin</b>"))