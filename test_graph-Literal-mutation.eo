memory > xNode
memory > xapp
memory > xstr
memory > xrange
memory > xCircularDependencyError
memory > xrepr
memory > xi
memory > xDummyNode
memory > xSimpleTestCase
memory > xNodeNotFoundError
memory > xMigrationGraph
[] > test_graph
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_iterative_dfs
        memory > xtest_circular_graph
        memory > xtest_remove_replacement_node
        memory > xtest_iterative_dfs_complexity
        memory > xtest_circular_graph_2
        memory > xtest_validate_consistency_dummy
        memory > xtest_validate_consistency_missing_parent
        memory > xtest_simple_graph
        memory > xtest_node_repr
        memory > xtest_infinite_loop
        memory > xtest_missing_child_nodes
        memory > xtest_validate_consistency_missing_child
        memory > xtest_complex_graph
        memory > xtest_stringify
        memory > xtest_dummynode_repr
        memory > xtest_plan_invalid_node
        memory > xtest_validate_consistency_no_error
        memory > xtest_missing_parent_nodes
        memory > xtest_remove_replaced_nodes
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                (((unsupported)).apply)
                xtest_simple_graph.write
                  [xself]
                    memory > xgraph
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0003"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0004"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0004") ((((unsupported)).apply ("app_a") ("0004"))) ((((unsupported)).apply ("app_a") ("0003"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0003") ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_a") ("0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0002") ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0003") ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_b") ("0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_b.0002") ((((unsupported)).apply ("app_b") ("0002"))) ((((unsupported)).apply ("app_b") ("0001"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app_a") ("0001"))))) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0001"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app_b") ("0002"))))) ((((unsupported)).apply ((((unsupported)).apply ("app_b") ("0001"))) ((((unsupported)).apply ("app_b") ("0002"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app_a") ("0004"))))) ((((unsupported)).apply ((((unsupported)).apply ("app_b") ("0001"))) ((((unsupported)).apply ("app_b") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_a") ("0004"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xbackwards_plan)).apply ((((unsupported)).apply ("app_b") ("0002"))))) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0004"))) ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_b") ("0002"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xroot_nodes)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_b") ("0001"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xleaf_nodes)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0004"))) ((((unsupported)).apply ("app_b") ("0002"))))))
                xtest_complex_graph.write
                  [xself]
                    memory > xgraph
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0003"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0004"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_c") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_c") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0004") ((((unsupported)).apply ("app_a") ("0004"))) ((((unsupported)).apply ("app_a") ("0003"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0003") ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_a") ("0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0002") ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0003") ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_b") ("0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_b.0002") ((((unsupported)).apply ("app_b") ("0002"))) ((((unsupported)).apply ("app_b") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0004") ((((unsupported)).apply ("app_a") ("0004"))) ((((unsupported)).apply ("app_c") ("0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_c.0002") ((((unsupported)).apply ("app_c") ("0002"))) ((((unsupported)).apply ("app_c") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_c.0001") ((((unsupported)).apply ("app_c") ("0001"))) ((((unsupported)).apply ("app_b") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_c.0002") ((((unsupported)).apply ("app_c") ("0002"))) ((((unsupported)).apply ("app_a") ("0002"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app_c") ("0002"))))) ((((unsupported)).apply ((((unsupported)).apply ("app_b") ("0001"))) ((((unsupported)).apply ("app_c") ("0001"))) ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_c") ("0002"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app_a") ("0004"))))) ((((unsupported)).apply ((((unsupported)).apply ("app_b") ("0001"))) ((((unsupported)).apply ("app_c") ("0001"))) ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_c") ("0002"))) ((((unsupported)).apply ("app_b") ("0002"))) ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_a") ("0004"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xbackwards_plan)).apply ((((unsupported)).apply ("app_b") ("0001"))))) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0004"))) ((((unsupported)).apply ("app_c") ("0002"))) ((((unsupported)).apply ("app_c") ("0001"))) ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_b") ("0002"))) ((((unsupported)).apply ("app_b") ("0001"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xroot_nodes)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_b") ("0001"))) ((((unsupported)).apply ("app_c") ("0001"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xgraph).xleaf_nodes)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0004"))) ((((unsupported)).apply ("app_b") ("0002"))) ((((unsupported)).apply ("app_c") ("0002"))))))
                xtest_circular_graph.write
                  [xself]
                    memory > xgraph
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0003"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0003") ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_a") ("0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0002") ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0001") ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_b") ("0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_b.0002") ((((unsupported)).apply ("app_b") ("0002"))) ((((unsupported)).apply ("app_b") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_b.0001") ((((unsupported)).apply ("app_b") ("0001"))) ((((unsupported)).apply ("app_a") ("0003"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xCircularDependencyError)))))
                          bogusForceDataize.write ((((xgraph).xensure_not_cyclic)).apply)
                xtest_circular_graph_2.write
                  [xself]
                    memory > xgraph
                    seq > @
                      seq
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("A") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("C") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("B") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("A.0001") ((((unsupported)).apply ("A") ("0001"))) ((((unsupported)).apply ("B") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("B.0001") ((((unsupported)).apply ("B") ("0001"))) ((((unsupported)).apply ("A") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("C.0001") ((((unsupported)).apply ("C") ("0001"))) ((((unsupported)).apply ("B") ("0001"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xCircularDependencyError)))))
                          bogusForceDataize.write ((((xgraph).xensure_not_cyclic)).apply)
                xtest_iterative_dfs.write
                  [xself]
                    memory > xexpected
                    memory > xparent
                    memory > xgraph
                    memory > xbackwards_plan
                    memory > xleaf
                    memory > xchild
                    memory > xforwards_plan
                    memory > xroot
                    seq > @
                      seq
                        xgraph.write (((xMigrationGraph)).apply)
                        xroot.write (((unsupported)).apply ("app_a") ("1"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xroot)) ("None: is there a None literal in the EO language?"))
                        xexpected.write (((unsupported)).apply ((xroot)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (2) (750))))
                          seq
                            xparent.write (((unsupported)).apply ("app_a") ((((xstr)).apply (((xi).sub 1)))))
                            xchild.write (((unsupported)).apply ("app_a") ((((xstr)).apply ((xi)))))
                            bogusForceDataize.write ((((xgraph).xadd_node)).apply ((xchild)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ((((xstr)).apply ((xi)))) ((xchild)) ((xparent)))
                            bogusForceDataize.write ((((xexpected).xappend)).apply ((xchild)))
                        xleaf.write (((unsupported)).apply ((xexpected)) ((1.neg)))
                        xforwards_plan.write ((((xgraph).xforwards_plan)).apply ((xleaf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((xforwards_plan)))
                        xbackwards_plan.write ((((xgraph).xbackwards_plan)).apply ((xroot)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexpected)) ((((unsupported)).apply ((1.neg)))))) ((xbackwards_plan)))
                xtest_iterative_dfs_complexity.write
                  [xself]
                    memory > xn
                    memory > xexpected
                    memory > xplan
                    memory > xgraph
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xn.write 50
                        xgraph.write (((xMigrationGraph)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (((xn).add 1)))))
                          seq
                            bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ((((xstr)).apply ((xi)))))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ((((xstr)).apply ((xi)))))) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_c") ((((xstr)).apply ((xi)))))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) ((xn)))))
                          seq
                            bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ("app_b") ((((xstr)).apply ((xi)))))) ((((unsupported)).apply ("app_a") ((((xstr)).apply ((xi)))))))
                            bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ("app_c") ((((xstr)).apply ((xi)))))) ((((unsupported)).apply ("app_a") ((((xstr)).apply ((xi)))))))
                            bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ("app_a") ((((xstr)).apply (((xi).add 1)))))) ((((unsupported)).apply ("app_b") ((((xstr)).apply ((xi)))))))
                            bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ("app_a") ((((xstr)).apply (((xi).add 1)))))) ((((unsupported)).apply ("app_c") ((((xstr)).apply ((xi)))))))
                        xplan.write ((((xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app_a") ((((xstr)).apply ((xn)))))))
                        xexpected.write ((((unsupported)).apply ((((unsupported)).apply ((xapp)) ((((xstr)).apply ((xi)))))) ((xi)) ((((xrange)).apply (1) ((xn)))) ((xapp)) ((((unsupported)).apply ("app_a") ("app_c") ("app_b")))).add (((unsupported)).apply ((((unsupported)).apply ("app_a") ((((xstr)).apply ((xn))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((xexpected)))
                xtest_plan_invalid_node.write
                  [xself]
                    memory > xmessage
                    memory > xgraph
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xgraph.write (((xMigrationGraph)).apply)
                        xmessage.write "Node ('app_b', '0001') not a valid node"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmessage)))))
                          bogusForceDataize.write ((((xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app_b") ("0001"))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmessage)))))
                          bogusForceDataize.write ((((xgraph).xbackwards_plan)).apply ((((unsupported)).apply ("app_b") ("0001"))))
                xtest_missing_parent_nodes.write
                  [xself]
                    memory > xmsg
                    memory > xgraph
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0003"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0003") ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_a") ("0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0002") ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))))
                        xmsg.write "Migration app_a.0001 dependencies reference nonexistent parent node ('app_b', '0002')"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0001") ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_b") ("0002"))))
                xtest_missing_child_nodes.write
                  [xself]
                    memory > xmsg
                    memory > xgraph
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        xmsg.write "Migration app_a.0002 dependencies reference nonexistent child node ('app_a', '0002')"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0002") ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))))
                xtest_validate_consistency_missing_parent.write
                  [xself]
                    memory > xmsg
                    memory > xgraph
                    seq > @
                      seq
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xgraph).xadd_dependency)) ("app_a.0001") ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_b") ("0002"))) (TRUE))
                        xmsg.write "Migration app_a.0001 dependencies reference nonexistent parent node ('app_b', '0002')"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          bogusForceDataize.write ((((xgraph).xvalidate_consistency)).apply)
                xtest_validate_consistency_missing_child.write
                  [xself]
                    memory > xmsg
                    memory > xgraph
                    seq > @
                      seq
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0002"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xgraph).xadd_dependency)) ("app_b.0002") ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_b") ("0002"))) (TRUE))
                        xmsg.write "Migration app_b.0002 dependencies reference nonexistent child node ('app_a', '0001')"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          bogusForceDataize.write ((((xgraph).xvalidate_consistency)).apply)
                xtest_validate_consistency_no_error.write
                  [xself]
                    memory > xgraph
                    seq > @
                      seq
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0002"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xgraph).xadd_dependency)) ("app_a.0001") ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_b") ("0002"))) (TRUE))
                        bogusForceDataize.write ((((xgraph).xvalidate_consistency)).apply)
                xtest_validate_consistency_dummy.write
                  [xself]
                    memory > xmsg
                    memory > xgraph
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmsg.write "app_a.0001 (req'd by app_b.0002) is missing!"
                        xgraph.write (((xMigrationGraph)).apply)
                        (((unsupported)).apply (((xgraph).xadd_dummy_node)) ((((unsupported)).apply ("app_a") ("0001"))) ("app_b.0002") ((xmsg)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          bogusForceDataize.write ((((xgraph).xvalidate_consistency)).apply)
                xtest_remove_replaced_nodes.write
                  [xself]
                    memory > xreplacement_node
                    memory > xchild_node
                    memory > xgraph
                    memory > xmsg
                    memory > xparent_node
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xgraph.write (((xMigrationGraph)).apply)
                        (((unsupported)).apply (((xgraph).xadd_dummy_node)) ((((unsupported)).apply ("app_a") ("0001"))) ("app_a.0002") ("BAD!"))
                        (((unsupported)).apply (((xgraph).xadd_dummy_node)) ((((unsupported)).apply ("app_a") ("0002"))) ("app_b.0001") ("BAD!"))
                        (((unsupported)).apply (((xgraph).xadd_dependency)) ("app_a.0002") ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))) (TRUE))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_c") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0001"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xgraph).xadd_dependency)) ("app_a.0001") ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_c") ("0001"))) (TRUE))
                        (((unsupported)).apply (((xgraph).xadd_dependency)) ("app_b.0001") ((((unsupported)).apply ("app_b") ("0001"))) ((((unsupported)).apply ("app_a") ("0002"))) (TRUE))
                        xmsg.write "Unable to find replacement node ('app_a', '0001_squashed_0002'). It was either never added to the migration graph, or has been removed."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          (((unsupported)).apply (((xgraph).xremove_replaced_nodes)) ((((unsupported)).apply ("app_a") ("0001_squashed_0002"))) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_a") ("0002"))))))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001_squashed_0002"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ("BAD!"))))
                          bogusForceDataize.write ((((xgraph).xvalidate_consistency)).apply)
                        (((unsupported)).apply (((xgraph).xremove_replaced_nodes)) ((((unsupported)).apply ("app_a") ("0001_squashed_0002"))) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_a") ("0002"))))))
                        bogusForceDataize.write ((((xgraph).xvalidate_consistency)).apply)
                        xparent_node.write (((unsupported)).apply (((xgraph).xnode_map)) ((((unsupported)).apply ("app_c") ("0001"))))
                        xreplacement_node.write (((unsupported)).apply (((xgraph).xnode_map)) ((((unsupported)).apply ("app_a") ("0001_squashed_0002"))))
                        xchild_node.write (((unsupported)).apply (((xgraph).xnode_map)) ((((unsupported)).apply ("app_b") ("0001"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xparent_node)) (((xreplacement_node).xparents)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xreplacement_node)) (((xparent_node).xchildren)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xchild_node)) (((xreplacement_node).xchildren)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xreplacement_node)) (((xchild_node).xparents)))
                xtest_remove_replacement_node.write
                  [xself]
                    memory > xother_replaced_node
                    memory > xchild_node
                    memory > xgraph
                    memory > xmsg
                    memory > xreplaced_node
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0002") ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))))
                        xmsg.write "Unable to remove replacement node ('app_a', '0001_squashed_0002'). It was either never added to the migration graph, or has been removed already."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          (((unsupported)).apply (((xgraph).xremove_replacement_node)) ((((unsupported)).apply ("app_a") ("0001_squashed_0002"))) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_a") ("0002"))))))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001_squashed_0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_b.0001") ((((unsupported)).apply ("app_b") ("0001"))) ((((unsupported)).apply ("app_a") ("0001_squashed_0002"))))
                        (((unsupported)).apply (((xgraph).xremove_replacement_node)) ((((unsupported)).apply ("app_a") ("0001_squashed_0002"))) ((((unsupported)).apply ((((unsupported)).apply ("app_a") ("0001"))) ((((unsupported)).apply ("app_a") ("0002"))))))
                        bogusForceDataize.write ((((xgraph).xvalidate_consistency)).apply)
                        xreplaced_node.write (((unsupported)).apply (((xgraph).xnode_map)) ((((unsupported)).apply ("app_a") ("0002"))))
                        xchild_node.write (((unsupported)).apply (((xgraph).xnode_map)) ((((unsupported)).apply ("app_b") ("0001"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xchild_node)) (((xreplaced_node).xchildren)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xreplaced_node)) (((xchild_node).xparents)))
                        xother_replaced_node.write (((unsupported)).apply (((xgraph).xnode_map)) ((((unsupported)).apply ("app_a") ("0001"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xchild_node)) (((xother_replaced_node).xchildren)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xother_replaced_node)) (((xchild_node).xparents)))
                xtest_infinite_loop.write
                  [xself]
                    memory > xgraph
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_c") ("0001_squashed_0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_b.0001") ((((unsupported)).apply ("app_b") ("0001"))) ((((unsupported)).apply ("app_c") ("0001_squashed_0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_b.0002") ((((unsupported)).apply ("app_b") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_b.0002") ((((unsupported)).apply ("app_b") ("0002"))) ((((unsupported)).apply ("app_b") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_c.0001_squashed_0002") ((((unsupported)).apply ("app_c") ("0001_squashed_0002"))) ((((unsupported)).apply ("app_b") ("0002"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xCircularDependencyError)))))
                          bogusForceDataize.write ((((xgraph).xensure_not_cyclic)).apply)
                xtest_stringify.write
                  [xself]
                    memory > xgraph
                    seq > @
                      seq
                        xgraph.write (((xMigrationGraph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xgraph)))) ("Graph: 0 nodes, 0 edges"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_a") ("0003"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0001"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_node)).apply ((((unsupported)).apply ("app_b") ("0002"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0002") ((((unsupported)).apply ("app_a") ("0002"))) ((((unsupported)).apply ("app_a") ("0001"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0003") ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_a") ("0002"))))
                        bogusForceDataize.write ((((xgraph).xadd_dependency)).apply ("app_a.0003") ((((unsupported)).apply ("app_a") ("0003"))) ((((unsupported)).apply ("app_b") ("0002"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xgraph)))) ("Graph: 5 nodes, 3 edges"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xgraph)))) ("<MigrationGraph: nodes=5, edges=3>"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_node_repr.write
                  [xself]
                    memory > xnode
                    seq > @
                      seq
                        xnode.write (((xNode)).apply ((((unsupported)).apply ("app_a") ("0001"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xnode)))) ("<Node: ('app_a', '0001')>"))
                xtest_dummynode_repr.write
                  [xself]
                    memory > xnode
                    seq > @
                      seq
                        xnode.write (((unsupported)).apply ((xDummyNode)) ((((unsupported)).apply ("app_a") ("0001"))) ("app_a.0001") ("x is missing"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xnode)))) ("<DummyNode: ('app_a', '0001')>"))