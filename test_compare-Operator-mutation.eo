memory > xC
memory > xLeft
memory > xRight
memory > xBase
memory > x_
memory > xi
memory > xid
memory > xEmpty
memory > xobject
memory > xlen
memory > xfunc
memory > xrange
memory > xother
memory > xb
memory > xDerived
memory > xCmp
memory > xNotImplemented
memory > xsetattr
memory > xname
memory > xunittest
memory > xTypeError
memory > x__name__
memory > xAnything
memory > xa
[] > test_compare
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_id_comparisons
        memory > xset1
        memory > xset2
        memory > xtest_comparisons
        memory > xtest_other_delegation
        memory > x__ne__
        memory > xtest_ne_defaults_to_not_eq
        memory > xtest_ne_high_priority
        memory > xcandidates
        memory > x__init__
        memory > xtest_ne_low_priority
        memory > xtest_issue_1393
        memory > x__eq__
        memory > x__repr__
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
              x__repr__.write
                [xself]
                  seq > @
                    (((unsupported)).apply ("<Empty>"))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xarg]
                    seq > @
                      (((unsupported)).apply (((xself).xarg)) ((xarg)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<Cmp %s>".mod ((xself).xarg))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xself).xarg).eq (xother))))
            (((unsupported)).apply)
              seq
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (TRUE))
                x__ne__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (FALSE))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xset1.write (((unsupported)).apply (2) (2.0) (2) ((2.sub (((unsupported)).apply))) ((((xCmp)).apply (2.0))))
                xset2.write (((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply (3))) ("None: is there a None literal in the EO language?") ((((xEmpty)).apply)))
                xcandidates.write ((xset1).sub (xset2))
                xtest_comparisons.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xa)) (((xself).xcandidates)))
                        (((unsupported)).apply ((xb)) (((xself).xcandidates)))
                          (((((unsupported)).apply ((xa)) (((xself).xset1))).and (((unsupported)).apply ((xb)) (((xself).xset1)))).or (((unsupported)).apply ((xa)) ((xb)))).if
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xb)))
                xtest_id_comparisons.write
                  [xself]
                    memory > xL
                    seq > @
                      seq
                        xL.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                          bogusForceDataize.write ((((xL).xinsert)).apply ((((unsupported)).apply ((((xlen)).apply ((xL)))) (2))) ((((xEmpty)).apply)))
                        (((unsupported)).apply ((xa)) ((xL)))
                          (((unsupported)).apply ((xb)) ((xL)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).eq (xb))) (((((xid)).apply ((xa))).eq (((xid)).apply ((xb))))) (("a=%r, b=%r".mod (((unsupported)).apply ((xa)) ((xb))))))
                xtest_ne_defaults_to_not_eq.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((xCmp)).apply (1))
                        xb.write (((xCmp)).apply (1))
                        xc.write (((xCmp)).apply (2))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).eq (xb))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).neq (xb))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).neq (xc))) (TRUE))
                xtest_ne_high_priority.write
                  [xself]
                    memory > x__eq__
                    memory > x__ne__
                    memory > xcalls
                    seq > @
                      seq
                        unsupported
                        xcalls.write (((unsupported)).apply)
                        (((unsupported)).apply)
                          x__eq__.write
                            []
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((xcalls).xappend)).apply ("Left.__eq__"))
                                  (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply)
                          seq
                            x__eq__.write
                              []
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((xcalls).xappend)).apply ("Right.__eq__"))
                                    (((unsupported)).apply ((xNotImplemented)))
                            x__ne__.write
                              []
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((xcalls).xappend)).apply ("Right.__ne__"))
                                    (((unsupported)).apply ((xNotImplemented)))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xcalls)) ((((unsupported)).apply ("Left.__eq__") ("Right.__ne__"))))
                xtest_ne_low_priority.write
                  [xself]
                    memory > x__eq__
                    memory > x__ne__
                    memory > xcalls
                    seq > @
                      seq
                        unsupported
                        xcalls.write (((unsupported)).apply)
                        (((unsupported)).apply)
                          x__eq__.write
                            []
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((xcalls).xappend)).apply ("Base.__eq__"))
                                  (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply ((xBase)))
                          seq
                            x__eq__.write
                              []
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((xcalls).xappend)).apply ("Derived.__eq__"))
                                    (((unsupported)).apply ((xNotImplemented)))
                            x__ne__.write
                              []
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((xcalls).xappend)).apply ("Derived.__ne__"))
                                    (((unsupported)).apply ((xNotImplemented)))
                        unsupported
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xcalls)) ((((unsupported)).apply ("Derived.__ne__") ("Base.__eq__"))))
                xtest_other_delegation.write
                  [xself]
                    memory > xops
                    memory > x__ne__
                    memory > xunexpected
                    seq > @
                      seq
                        unsupported
                        xops.write (((unsupported)).apply ((((unsupported)).apply ("__eq__") ((((unsupported)).apply (((xa).eq (xb))))))) ((((unsupported)).apply ("__lt__") ((((unsupported)).apply (((xa).less (xb))))))) ((((unsupported)).apply ("__le__") ((((unsupported)).apply (((xa).leq (xb))))))) ((((unsupported)).apply ("__gt__") ((((unsupported)).apply (((xa).greater (xb))))))) ((((unsupported)).apply ("__ge__") ((((unsupported)).apply (((xa).geq (xb))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xfunc)))) ((xops)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xname)))))
                            seq
                              xunexpected.write
                                []
                                  seq > @
                                    (((unsupported)).apply)
                                      bogusForceDataize.write ((((xself).xfail)).apply ("Unexpected operator method called"))
                              (((unsupported)).apply)
                                x__ne__.write (xunexpected)
                              (((unsupported)).apply ((((unsupported)).apply ((xother)) ((x_)))) ((xops)))
                                ((xother).neq (xname)).if
                                  bogusForceDataize.write (((xsetattr)).apply ((xC)) ((xother)) ((xunexpected)))
                              ((xname).eq "__eq__").if
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((xfunc)).apply ((((xC)).apply)) ((((xobject)).apply)))) (FALSE))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfunc)) ((((xC)).apply)) ((((xobject)).apply)))
                xtest_issue_1393.write
                  [xself]
                    memory > xx
                    memory > xy
                    seq > @
                      seq
                        xx.write (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) ((((xAnything)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xAnything)).apply)) ((xx)))
                        xy.write (((xobject)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xy)) ((((xAnything)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xAnything)).apply)) ((xy)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)