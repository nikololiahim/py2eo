memory > xassert_python_failure
memory > xassert_python_ok
memory > xloc
memory > xascii
memory > xlocale
memory > xargs
memory > xdict
memory > x__name__
memory > xtextwrap
memory > xkw
memory > xsupport
memory > xsys
memory > x__file__
memory > xunittest
[] > test_utf8_mode
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_stdio
        memory > xtest_posix_locale
        memory > xtest_xoption
        memory > x_check_io_encoding
        memory > xget_output
        memory > xtest_locale_getpreferredencoding
        memory > xtest_io
        memory > xtest_optim_level
        memory > xtest_io_encoding
        memory > xDEFAULT_ENV
        memory > xVXWORKS
        memory > xtest_env_var
        memory > xtest_pyio_encoding
        memory > xtest_filesystemencoding
        memory > xcheck_io_encoding
        memory > xtest_cmd_line
        memory > xposix_locale
        memory > xMS_WINDOWS
        memory > xPOSIX_LOCALES
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            xMS_WINDOWS.write (((xsys).xplatform).eq "win32")
            xPOSIX_LOCALES.write (((unsupported)).apply ("C") ("POSIX"))
            xVXWORKS.write (((xsys).xplatform).eq "vxworks")
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xDEFAULT_ENV.write (((unsupported)).apply ("PYTHONUTF8") ("") ("PYTHONLEGACYWINDOWSFSENCODING") ("") ("PYTHONCOERCECLOCALE") ("0"))
                xposix_locale.write
                  [xself]
                    memory > xloc
                    seq > @
                      seq
                        xloc.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_CTYPE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply ((xloc)) ((xPOSIX_LOCALES)))))
                xget_output.write
                  [xself xfailure]
                    memory > xout
                    memory > xkw
                    seq > @
                      (((unsupported)).apply)
                        xkw.write (((xdict)).apply (((xself).xDEFAULT_ENV)) ((((unsupported)).apply ((xkw)))))
                        (xfailure).if
                          seq
                            xout.write (((xassert_python_failure)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))
                            xout.write (((unsupported)).apply ((xout)) (2))
                          seq
                            xout.write (((xassert_python_ok)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))
                            xout.write (((unsupported)).apply ((xout)) (1))
                        (((unsupported)).apply ((((((xout).xdecode).xrstrip)).apply ("nr"))))
                xtest_posix_locale.write
                  [xself]
                    memory > xcode
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        xcode.write "import sys; print(sys.flags.utf8_mode)"
                        (((unsupported)).apply ((xloc)) ((xPOSIX_LOCALES)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xloc)))))
                            seq
                              xout.write (((unsupported)).apply (((xself).xget_output)) ("-c") ((xcode)) ((xloc)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("1"))
                xtest_xoption.write
                  [xself]
                    memory > xcode
                    memory > xout
                    seq > @
                      seq
                        xcode.write "import sys; print(sys.flags.utf8_mode)"
                        xout.write ((((xself).xget_output)).apply ("-X") ("utf8") ("-c") ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("1"))
                        xout.write ((((xself).xget_output)).apply ("-X") ("utf8=1") ("-c") ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("1"))
                        xout.write ((((xself).xget_output)).apply ("-X") ("utf8=0") ("-c") ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("0"))
                        (xMS_WINDOWS).if
                          seq
                            xout.write (((unsupported)).apply (((xself).xget_output)) ("-X") ("utf8") ("-c") ((xcode)) ("1"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("0"))
                xtest_env_var.write
                  [xself]
                    memory > xcode
                    memory > xout
                    seq > @
                      seq
                        xcode.write "import sys; print(sys.flags.utf8_mode)"
                        xout.write (((unsupported)).apply (((xself).xget_output)) ("-c") ((xcode)) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("1"))
                        xout.write (((unsupported)).apply (((xself).xget_output)) ("-c") ((xcode)) ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("0"))
                        xout.write (((unsupported)).apply (((xself).xget_output)) ("-X") ("utf8=0") ("-c") ((xcode)) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("0"))
                        (xMS_WINDOWS).if
                          seq
                            xout.write (((unsupported)).apply (((xself).xget_output)) ("-X") ("utf8") ("-c") ((xcode)) ("1") ("1"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("0"))
                        (((xself).xposix_locale).not).if
                          seq
                            xout.write (((unsupported)).apply (((xself).xget_output)) ("-E") ("-c") ((xcode)) ("1"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("0"))
                        xout.write (((unsupported)).apply (((xself).xget_output)) ("-c") ((xcode)) ("xxx") (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("invalid PYTHONUTF8 environment variable value") (((xout).xrstrip)))
                xtest_filesystemencoding.write
                  [xself]
                    memory > xcode
                    memory > xexpected
                    memory > xout
                    seq > @
                      seq
                        xcode.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        (xMS_WINDOWS).if
                          xexpected.write "utf-8/surrogatepass"
                          xexpected.write "utf-8/surrogateescape"
                        xout.write ((((xself).xget_output)).apply ("-X") ("utf8") ("-c") ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ((xexpected)))
                        (xMS_WINDOWS).if
                          seq
                            xout.write (((unsupported)).apply (((xself).xget_output)) ("-X") ("utf8") ("-c") ((xcode)) ("strict") ("1"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("mbcs/replace"))
                xtest_stdio.write
                  [xself]
                    memory > xcode
                    memory > xout
                    seq > @
                      seq
                        xcode.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xout.write (((unsupported)).apply (((xself).xget_output)) ("-X") ("utf8") ("-c") ((xcode)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xsplitlines)) ((((unsupported)).apply ("stdin: utf-8/surrogateescape") ("stdout: utf-8/surrogateescape") ("stderr: utf-8/backslashreplace"))))
                        xout.write (((unsupported)).apply (((xself).xget_output)) ("-X") ("utf8") ("-c") ((xcode)) ("latin1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xsplitlines)) ((((unsupported)).apply ("stdin: iso8859-1/strict") ("stdout: iso8859-1/strict") ("stderr: iso8859-1/backslashreplace"))))
                        xout.write (((unsupported)).apply (((xself).xget_output)) ("-X") ("utf8") ("-c") ((xcode)) (":namereplace"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xsplitlines)) ((((unsupported)).apply ("stdin: utf-8/namereplace") ("stdout: utf-8/namereplace") ("stderr: utf-8/backslashreplace"))))
                xtest_io.write
                  [xself]
                    memory > xcode
                    memory > xout
                    memory > xfilename
                    seq > @
                      seq
                        xcode.write ((((xtextwrap).xdedent)).apply ((((unsupported)).apply)))
                        xfilename.write (x__file__)
                        xout.write (((unsupported)).apply (((xself).xget_output)) ("-c") ((xcode)) ((xfilename)) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("UTF-8/strict"))
                x_check_io_encoding.write
                  [xself xmodule xencoding xerrors]
                    memory > xcode
                    memory > xout
                    memory > xargs
                    memory > xfilename
                    seq > @
                      (((unsupported)).apply)
                        xfilename.write (x__file__)
                        xargs.write (((unsupported)).apply)
                        (xencoding).if
                          bogusForceDataize.write ((((xargs).xappend)).apply ("encoding={encoding!r}"))
                        (xerrors).if
                          bogusForceDataize.write ((((xargs).xappend)).apply ("errors={errors!r}"))
                        xcode.write (((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).mod (((unsupported)).apply ((xmodule)) ((((", ".xjoin)).apply ((xargs))))))
                        xout.write (((unsupported)).apply (((xself).xget_output)) ("-c") ((xcode)) ((xfilename)) ("1"))
                        ((xencoding).not).if
                          xencoding.write "UTF-8"
                        ((xerrors).not).if
                          xerrors.write "strict"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("{encoding}/{errors}"))
                xcheck_io_encoding.write
                  [xself xmodule]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_check_io_encoding)) ((xmodule)) ("latin1"))
                        (((unsupported)).apply (((xself).x_check_io_encoding)) ((xmodule)) ("namereplace"))
                        (((unsupported)).apply (((xself).x_check_io_encoding)) ((xmodule)) ("latin1") ("namereplace"))
                xtest_io_encoding.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_io_encoding)).apply ("io"))
                xtest_pyio_encoding.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_io_encoding)).apply ("_pyio"))
                xtest_locale_getpreferredencoding.write
                  [xself]
                    memory > xcode
                    memory > xout
                    seq > @
                      seq
                        xcode.write "import locale; print(locale.getpreferredencoding(False), locale.getpreferredencoding(True))"
                        xout.write ((((xself).xget_output)).apply ("-X") ("utf8") ("-c") ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("UTF-8 UTF-8"))
                        (((unsupported)).apply ((xloc)) ((xPOSIX_LOCALES)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xloc)))))
                            seq
                              xout.write (((unsupported)).apply (((xself).xget_output)) ("-X") ("utf8") ("-c") ((xcode)) ((xloc)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("UTF-8 UTF-8"))
                xtest_cmd_line.write
                  [xself]
                    memory > xcheck
                    memory > xarg_utf8
                    memory > xc_arg
                    memory > xcode
                    memory > xarg
                    memory > xarg_ascii
                    seq > @
                      (((unsupported)).apply)
                        xarg.write ((("hxe9u20ac".xencode)).apply ("utf-8"))
                        xarg_utf8.write ((((xarg).xdecode)).apply ("utf-8"))
                        xarg_ascii.write ((((xarg).xdecode)).apply ("ascii") ("surrogateescape"))
                        xcode.write "import locale, sys; print(\"%s:%s\" % (locale.getpreferredencoding, ascii(sys.argv[1:])))"
                        xcheck.write
                          [xutf8_opt xexpected]
                            memory > xout
                            memory > xargs
                            seq > @
                              (((unsupported)).apply)
                                xout.write ((((xself).xget_output)).apply ("-X") ((xutf8_opt)) ("-c") ((xcode)) ((xarg)) ((((unsupported)).apply ((xkw)))))
                                xargs.write ((((unsupported)).apply (((((xout).xpartition)).apply (":"))) (2)).xrstrip)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((xascii)).apply ((xexpected)))) ((xout)))
                        bogusForceDataize.write (((xcheck)).apply ("utf8") ((((unsupported)).apply ((xarg_utf8)))))
                        (((unsupported)).apply ((xloc)) ((xPOSIX_LOCALES)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xloc)))))
                            (((unsupported)).apply ((xcheck)) ("utf8") ((((unsupported)).apply ((xarg_utf8)))) ((xloc)))
                        (((((xsys).xplatform).eq "darwin").or ((xsupport).xis_android)).or (xVXWORKS)).if
                          xc_arg.write (xarg_utf8)
                          (((((xsys).xplatform).xstartswith)).apply ("aix")).if
                            xc_arg.write ((((xarg).xdecode)).apply ("iso-8859-1"))
                            xc_arg.write (xarg_ascii)
                        (((unsupported)).apply ((xloc)) ((xPOSIX_LOCALES)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xloc)))))
                            (((unsupported)).apply ((xcheck)) ("utf8=0") ((((unsupported)).apply ((xc_arg)))) ((xloc)))
                xtest_optim_level.write
                  [xself]
                    memory > xcode
                    memory > xout
                    seq > @
                      seq
                        xcode.write "import sys; print(sys.flags.optimize)"
                        xout.write ((((xself).xget_output)).apply ("-X") ("utf8") ("-O") ("-c") ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("1"))
                        xout.write ((((xself).xget_output)).apply ("-X") ("utf8") ("-OO") ("-c") ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("2"))
                        xcode.write "import sys; print(sys.flags.ignore_environment)"
                        xout.write ((((xself).xget_output)).apply ("-X") ("utf8") ("-E") ("-c") ((xcode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xout)) ("1"))
            ((x__name__).eq "__main__").if
              unsupported