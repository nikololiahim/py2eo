memory > xFooBar
memory > xApps
memory > xProjectState
memory > xrepr
memory > xMagazine
memory > xTestModel
memory > xmethod
memory > xFood
memory > xD
memory > xUnicodeModel
memory > xC
memory > xfalse
memory > xall
memory > xlist
memory > xDeleteModel
memory > xPublisher
memory > xindex
memory > xenumerate
memory > xfk
memory > xPerson
memory > xHistoricalRecord
memory > xValueError
memory > xComment
memory > xstr
memory > xAbstractSubFooBar
memory > xModelWithCustomBase
memory > xBook
memory > xSubFooBar
memory > xAssertionError
memory > xBoss
memory > xAuthor
memory > xB
memory > xBossManager
memory > xInvalidBasesError
memory > xBar
memory > xFoo
memory > xget_related_models_recursive
memory > xFoodManager
memory > xBusStation
memory > xtype
memory > xr
memory > xAddField
memory > xx
memory > xSearchableLocation
memory > xAlterField
memory > xi
memory > xF
memory > xModelState
memory > xFoodQuerySet
memory > xRemoveField
memory > xmgr
memory > xPrivateFieldModel
memory > xargs
memory > xAuthor2
memory > xGenericForeignKey
memory > xChild2
memory > xNoMigrationFoodManager
memory > xStation
memory > xgetattr
memory > xmod
memory > xChild1
memory > xPost
memory > xiter
memory > xE
memory > xname
memory > xNovel
memory > xModelWithConstraints
memory > xmodels
memory > xn
memory > xA
memory > xPersonManager
memory > xAbstract
memory > xisinstance
memory > xSimpleTestCase
memory > xUser
memory > xlen
[] > test_state
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_custom_base_manager
        memory > xtest_dangling_references_throw_error
        memory > xtest_from_model_constraints
        memory > xtest_reload_related_model_on_non_relational_fields
        memory > xtest_fields_immutability
        memory > xtest_sanity_index_name
        memory > xtest_base_to_subclass_fk
        memory > xtest_rename_field
        memory > xtest_add_field_m2m_with_through
        memory > xtest_add_model_no_relations
        memory > xtest_no_duplicate_managers
        memory > xtest_modelstate_get_field_order_wrt
        memory > xtest_modelstate_get_field_no_order_wrt_order_field
        memory > xtest_circle
        memory > xtest_remove_field
        memory > xtest_reference_mixed_case_app_label
        memory > xtest_create_swappable
        memory > xtest_ignore_order_wrt
        memory > xtest_multiple_nested_bases
        memory > xtest_create
        memory > xtest_render_model_with_multiple_inheritance
        memory > xtest_intermediate_m2m_self
        memory > xcreate_model
        memory > xtest_real_apps
        memory > xtest_alter_field_m2m_to_fk
        memory > xtest_custom_default_manager
        memory > xtest_nested_base
        memory > xtest_custom_manager_swappable
        memory > xtest_direct_m2m_self
        memory > xtest_create_swappable_from_abstract
        memory > xtest_rename_model_no_relations
        memory > xtest_abstract_base
        memory > xtest_fields_ordering_equality
        memory > xtest_sanity_check_to
        memory > xtest_sanity_check_through
        memory > xtest_repr
        memory > xtest_explicit_index_name
        memory > xtest_render_unique_app_labels
        memory > xtest_self_relation
        memory > xtest_add_model
        memory > xtest_nested_fk
        memory > xtest_multiple_mixed_bases
        memory > xtest_proxy_base
        memory > xtest_many_relations_to_same_model
        memory > xassertRelated
        memory > xtest_apps_bulk_update
        memory > xget_base_project_state
        memory > xtest_render_model_inheritance
        memory > xsetUp
        memory > xtest_bound_field_sanity_check
        memory > xtest_nested_proxy_base
        memory > xtest_real_apps_non_set
        memory > xtest_direct_hidden_fk
        memory > xtest_two_sided
        memory > xtest_add_relations
        memory > xtest_order_with_respect_to_private_field
        memory > xtest_render
        memory > xtest_multiple_bases
        memory > xtest_custom_default_manager_added_to_the_model_state
        memory > xtest_intermediate_m2m_extern_fk
        memory > xtest_intermediate_m2m_base
        memory > xtest_generic_fk
        memory > xtest_choices_iterator
        memory > xtest_nested_abstract_base
        memory > xtest_custom_default_manager_named_objects_with_false_migration_flag
        memory > xtest_base_to_base_fk
        memory > xtest_direct_m2m
        memory > xtest_remove_model
        memory > xtest_unrelated
        memory > xtest_base
        memory > xtest_alter_field
        memory > xtest_rename_model
        memory > xtest_reload_model_relationship_consistency
        memory > xtest_add_field
        memory > xtest_rename_field_no_relations
        memory > xtest_remove_relations
        memory > xtest_custom_model_base
        memory > xtest_remove_field_no_relations
        memory > xtest_render_project_dependencies
        memory > xtest_fk_through_proxy
        memory > xtest_add_model_other_app
        memory > xtest_direct_fk
        memory > xtest_equality
        memory > xtest_manager_refer_correct_model_version
        memory > xtest_intermediate_m2m
        memory > xtest_abstract_model_children_inherit_indexes
        memory > xtest_relations_population
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                (((unsupported)).apply)
                xtest_create.write
                  [xself]
                    memory > xmgr2
                    memory > xsub_author_state
                    memory > xbook_state
                    memory > xindex_together
                    memory > xfood_qs
                    memory > xfood_mgr2
                    memory > xverbose_name
                    memory > xfood_order_manager_state
                    memory > xmgr1
                    memory > xfood_no_default_manager_state
                    memory > xnew_apps
                    memory > xdb_table
                    memory > xordering
                    memory > xfood_mgr1
                    memory > xproxy
                    memory > xauthor_state
                    memory > xapps
                    memory > xcontributors
                    memory > xfood_no_mgr
                    memory > xapp_label
                    memory > xauthor_proxy_state
                    memory > xindexes
                    memory > xproject_state
                    memory > xwidth
                    memory > xtitle
                    memory > xfood_state
                    memory > xfood_mgr
                    memory > xbio
                    memory > xfood_no_managers_state
                    memory > xage
                    memory > xauthor
                    memory > xunique_together
                    memory > xname
                    memory > xbook_index
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            xbio.write ((((xmodels).xTextField)).apply)
                            xage.write (((unsupported)).apply (((xmodels).xIntegerField)) (TRUE) (TRUE))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xunique_together.write (((unsupported)).apply ("name") ("bio"))
                                xindex_together.write (((unsupported)).apply ("bio") ("age"))
                        (((unsupported)).apply ((xAuthor)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (xnew_apps)
                              xproxy.write TRUE
                              xordering.write (((unsupported)).apply ("name"))
                        (((unsupported)).apply ((xAuthor)))
                          seq
                            xwidth.write (((unsupported)).apply (((xmodels).xFloatField)) (TRUE))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xtitle.write (((unsupported)).apply (((xmodels).xCharField)) (1000))
                            xauthor.write ((((xmodels).xForeignKey)).apply ((xAuthor)) (((xmodels).xCASCADE)))
                            xcontributors.write ((((xmodels).xManyToManyField)).apply ((xAuthor)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xverbose_name.write "tome"
                                xdb_table.write "test_tome"
                                xindexes.write (((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("title"))))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfood_mgr.write (((xFoodManager)).apply ("a") ("b"))
                            xfood_qs.write ((((xFoodQuerySet).xas_manager)).apply)
                            xfood_no_mgr.write (((xNoMigrationFoodManager)).apply ("x") ("y"))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfood_no_mgr.write (((xNoMigrationFoodManager)).apply ("x") ("y"))
                            xfood_mgr.write (((xFoodManager)).apply ("a") ("b"))
                            xfood_qs.write ((((xFoodQuerySet).xas_manager)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        xmgr1.write (((xFoodManager)).apply ("a") ("b"))
                        xmgr2.write (((unsupported)).apply ((xFoodManager)) ("x") ("y") (3) (4))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfood_no_mgr.write (((xNoMigrationFoodManager)).apply ("x") ("y"))
                            xfood_mgr2.write (xmgr2)
                            xfood_mgr1.write (xmgr1)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        xproject_state.write ((((xProjectState).xfrom_apps)).apply ((xnew_apps)))
                        xauthor_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("author"))))
                        xauthor_proxy_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("authorproxy"))))
                        xsub_author_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("subauthor"))))
                        xbook_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("book"))))
                        xfood_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("food"))))
                        xfood_no_managers_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("foodnomanagers"))))
                        xfood_no_default_manager_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("foodnodefaultmanager"))))
                        xfood_order_manager_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("foodorderedmanagers"))))
                        xbook_index.write (((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("title"))))
                        bogusForceDataize.write ((((xbook_index).xset_name_with_model)).apply ((xBook)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xapp_label)) ("migrations"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xname)) ("Author"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xauthor_state).xfields)))) ((((unsupported)).apply ("id") ("name") ("bio") ("age"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xauthor_state).xfields)) ("name")).xmax_length)) (255))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply (((xauthor_state).xfields)) ("bio")).xnull)) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply (((xauthor_state).xfields)) ("age")).xnull)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xoptions)) ((((unsupported)).apply ("unique_together") ((((unsupported)).apply ((((unsupported)).apply ("name") ("bio"))))) ("index_together") ((((unsupported)).apply ((((unsupported)).apply ("bio") ("age"))))) ("indexes") ((((unsupported)).apply)) ("constraints") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xbases)) ((((unsupported)).apply (((xmodels).xModel)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbook_state).xapp_label)) ("migrations"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbook_state).xname)) ("Book"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xbook_state).xfields)))) ((((unsupported)).apply ("id") ("title") ("author") ("contributors"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xbook_state).xfields)) ("title")).xmax_length)) (1000))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply (((xbook_state).xfields)) ("author")).xnull)) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((unsupported)).apply (((xbook_state).xfields)) ("contributors")).x__class__).x__name__)) ("ManyToManyField"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbook_state).xoptions)) ((((unsupported)).apply ("verbose_name") ("tome") ("db_table") ("test_tome") ("indexes") ((((unsupported)).apply ((xbook_index)))) ("constraints") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xbook_state).xbases)) ((((unsupported)).apply (((xmodels).xModel)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_proxy_state).xapp_label)) ("migrations"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_proxy_state).xname)) ("AuthorProxy"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_proxy_state).xfields)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_proxy_state).xoptions)) ((((unsupported)).apply ("proxy") (TRUE) ("ordering") ((((unsupported)).apply ("name"))) ("indexes") ((((unsupported)).apply)) ("constraints") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_proxy_state).xbases)) ((((unsupported)).apply ("migrations.author"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsub_author_state).xapp_label)) ("migrations"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsub_author_state).xname)) ("SubAuthor"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xsub_author_state).xfields)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsub_author_state).xbases)) ((((unsupported)).apply ("migrations.author"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((xmgr)))) (((xfood_state).xmanagers)))) ((((unsupported)).apply ("food_mgr"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xname)) ((xstr)))) ((((unsupported)).apply ((xname)) ((xmgr)))) (((xfood_state).xmanagers)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply (((xfood_state).xmanagers)) (0))) (1)).xargs)) ((((unsupported)).apply ("a") ("b") (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfood_no_managers_state).xmanagers)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((xmgr)))) (((xfood_no_default_manager_state).xmanagers)))) ((((unsupported)).apply ("food_no_mgr") ("food_mgr"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xname)) ((xstr)))) ((((unsupported)).apply ((xname)) ((xmgr)))) (((xfood_no_default_manager_state).xmanagers)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply (((xfood_no_default_manager_state).xmanagers)) (0))) (1)).x__class__)) (((xmodels).xManager)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((((unsupported)).apply (((xfood_no_default_manager_state).xmanagers)) (1))) (1))) ((xFoodManager)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((xmgr)))) (((xfood_order_manager_state).xmanagers)))) ((((unsupported)).apply ("food_mgr1") ("food_mgr2"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xname)) ((xstr)))) ((((unsupported)).apply ((xname)) ((xmgr)))) (((xfood_order_manager_state).xmanagers)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmgr).xargs)) ((((unsupported)).apply ((xname)) ((xmgr)))) (((xfood_order_manager_state).xmanagers)))) ((((unsupported)).apply ((((unsupported)).apply ("a") ("b") (1) (2))) ((((unsupported)).apply ("x") ("y") (3) (4))))))
                xtest_custom_default_manager_added_to_the_model_state.write
                  [xself]
                    memory > xcustom_manager
                    memory > xnew_apps
                    memory > xauthor_state
                    memory > xapp_label
                    memory > xproject_state
                    memory > xauthors
                    memory > xobjects
                    memory > xapps
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        xcustom_manager.write ((((xmodels).xManager)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xobjects.write ((((xmodels).xTextField)).apply)
                            xauthors.write (xcustom_manager)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        xproject_state.write ((((xProjectState).xfrom_apps)).apply ((xnew_apps)))
                        xauthor_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("author"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xmanagers)) ((((unsupported)).apply ((((unsupported)).apply ("authors") ((xcustom_manager)))))))
                xtest_custom_default_manager_named_objects_with_false_migration_flag.write
                  [xself]
                    memory > xnew_apps
                    memory > xauthor_state
                    memory > xapp_label
                    memory > xproject_state
                    memory > xobjects
                    memory > xapps
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xobjects.write ((((xmodels).xManager)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        xproject_state.write ((((xProjectState).xfrom_apps)).apply ((xnew_apps)))
                        xauthor_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("author"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xmanagers)) ((((unsupported)).apply)))
                xtest_no_duplicate_managers.write
                  [xself]
                    memory > xapp_label
                    memory > xproject_state
                    memory > xabstract
                    memory > xboss_state
                    memory > xnew_apps
                    memory > xuse_in_migrations
                    memory > xobjects
                    memory > xapps
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        (((unsupported)).apply (((xmodels).xManager)))
                          xuse_in_migrations.write TRUE
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xobjects.write (((xPersonManager)).apply)
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xPersonManager)))
                          xuse_in_migrations.write TRUE
                        (((unsupported)).apply ((xPerson)))
                          seq
                            xobjects.write (((xBossManager)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        xproject_state.write ((((xProjectState).xfrom_apps)).apply ((xnew_apps)))
                        xboss_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("boss"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xboss_state).xmanagers)) ((((unsupported)).apply ((((unsupported)).apply ("objects") (((xBoss).xobjects)))))))
                xtest_custom_default_manager.write
                  [xself]
                    memory > xnew_apps
                    memory > xauthor_state
                    memory > xapps
                    memory > xapp_label
                    memory > xproject_state
                    memory > xmanager2
                    memory > xdefault_manager_name
                    memory > xmanager1
                    seq > @
                      seq
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xmanager1.write ((((xmodels).xManager)).apply)
                            xmanager2.write ((((xmodels).xManager)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xdefault_manager_name.write "manager2"
                        xproject_state.write ((((xProjectState).xfrom_apps)).apply ((xnew_apps)))
                        xauthor_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("author"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xauthor_state).xoptions)) ("default_manager_name"))) ("manager2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xmanagers)) ((((unsupported)).apply ((((unsupported)).apply ("manager2") (((xAuthor).xmanager1)))))))
                xtest_custom_base_manager.write
                  [xself]
                    memory > xnew_apps
                    memory > xauthor_state
                    memory > xapps
                    memory > xapp_label
                    memory > xproject_state
                    memory > xmanager2
                    memory > xmanager1
                    memory > xbase_manager_name
                    memory > xauthor2_state
                    seq > @
                      seq
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xmanager1.write ((((xmodels).xManager)).apply)
                            xmanager2.write ((((xmodels).xManager)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xbase_manager_name.write "manager2"
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xmanager1.write ((((xmodels).xManager)).apply)
                            xmanager2.write ((((xmodels).xManager)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xbase_manager_name.write "manager1"
                        xproject_state.write ((((xProjectState).xfrom_apps)).apply ((xnew_apps)))
                        xauthor_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("author"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xauthor_state).xoptions)) ("base_manager_name"))) ("manager2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xmanagers)) ((((unsupported)).apply ((((unsupported)).apply ("manager1") (((xAuthor).xmanager1)))) ((((unsupported)).apply ("manager2") (((xAuthor).xmanager2)))))))
                        xauthor2_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("author2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xauthor2_state).xoptions)) ("base_manager_name"))) ("manager1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor2_state).xmanagers)) ((((unsupported)).apply ((((unsupported)).apply ("manager1") (((xAuthor2).xmanager1)))))))
                xtest_apps_bulk_update.write
                  [xself]
                    memory > xapps
                    memory > xproject_state
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xproject_state.write (((xProjectState)).apply)
                        xapps.write ((xproject_state).xapps)
                        (((unsupported)).apply (((((xapps).xbulk_update)).apply)))
                          bogusForceDataize.write ((((xself).xassertfalse)).apply (((xapps).xready)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xapps).xready)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((((xapps).xbulk_update)).apply)))
                            seq
                              bogusForceDataize.write ((((xself).xassertfalse)).apply (((xapps).xready)))
                              (((unsupported)).apply ((((xValueError)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xapps).xready)))
                xtest_render.write
                  [xself]
                    memory > xFood
                    memory > xmgr2
                    memory > xnew_apps
                    memory > xbase_mgr
                    memory > xproject_state
                    memory > xmgr1
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((unsupported)).apply ((xModelState)) ("migrations") ("Tag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (100))))) ((((unsupported)).apply ("hidden") (((((xmodels).xBooleanField)).apply)))))))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((unsupported)).apply ((xModelState)) ("migrations") ("SubTag") ((((unsupported)).apply ((((unsupported)).apply ("tag_ptr") ((((unsupported)).apply (((xmodels).xOneToOneField)) ("migrations.Tag") (((xmodels).xCASCADE)) (TRUE) (TRUE) (TRUE) ("id") ((xfalse)))))) ((((unsupported)).apply ("awesome") (((((xmodels).xBooleanField)).apply)))))) ((((unsupported)).apply ("migrations.Tag"))))))
                        xbase_mgr.write ((((xmodels).xManager)).apply)
                        xmgr1.write (((xFoodManager)).apply ("a") ("b"))
                        xmgr2.write (((unsupported)).apply ((xFoodManager)) ("x") ("y") (3) (4))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((unsupported)).apply ((xModelState)) ("migrations") ("Food") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))) ((((unsupported)).apply ((((unsupported)).apply ("default") ((xbase_mgr)))) ((((unsupported)).apply ("food_mgr2") ((xmgr2)))) ((((unsupported)).apply ("food_mgr1") ((xmgr1)))))))))
                        xnew_apps.write ((xproject_state).xapps)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((((xnew_apps).xget_model)).apply ("migrations") ("Tag")).x_meta).xget_field)).apply ("name")).xmax_length)) (100))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((((((xnew_apps).xget_model)).apply ("migrations") ("Tag")).x_meta).xget_field)).apply ("hidden")).xnull)) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((((xnew_apps).xget_model)).apply ("migrations") ("SubTag")).x_meta).xlocal_fields)))) (2))
                        xFood.write ((((xnew_apps).xget_model)).apply ("migrations") ("Food"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmgr).xname)) ((xmgr)) ((((xFood).x_meta).xmanagers)))) ((((unsupported)).apply ("default") ("food_mgr1") ("food_mgr2"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply ((((xisinstance)).apply (((xmgr).xname)) ((xstr)))) ((xmgr)) ((((xFood).x_meta).xmanagers)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xmgr).x__class__)) ((xmgr)) ((((xFood).x_meta).xmanagers)))) ((((unsupported)).apply (((xmodels).xManager)) ((xFoodManager)) ((xFoodManager)))))
                xtest_render_model_inheritance.write
                  [xself]
                    memory > xms
                    memory > xapps
                    memory > xtitle
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xtitle.write (((unsupported)).apply (((xmodels).xCharField)) (1000))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (((xApps)).apply)
                        (((unsupported)).apply ((xBook)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (((xApps)).apply)
                        xapps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        xms.write ((((xModelState).xfrom_model)).apply ((xNovel)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xInvalidBasesError)))))
                          bogusForceDataize.write ((((xms).xrender)).apply ((xapps)))
                        bogusForceDataize.write (((((((xModelState).xfrom_model)).apply ((xBook))).xrender)).apply ((xapps)))
                        bogusForceDataize.write (((((((xModelState).xfrom_model)).apply ((xNovel))).xrender)).apply ((xapps)))
                xtest_render_model_with_multiple_inheritance.write
                  [xself]
                    memory > xms
                    memory > xapps
                    memory > xabstract
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (((xApps)).apply)
                        (((unsupported)).apply ((xFoo)) ((xBar)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (((xApps)).apply)
                        (((unsupported)).apply ((xFooBar)))
                          (((unsupported)).apply)
                            seq
                              xabstract.write TRUE
                              xapps.write (((xApps)).apply)
                        (((unsupported)).apply ((xAbstractSubFooBar)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (((xApps)).apply)
                        xapps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        xms.write ((((xModelState).xfrom_model)).apply ((xFooBar)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xInvalidBasesError)))))
                          bogusForceDataize.write ((((xms).xrender)).apply ((xapps)))
                        bogusForceDataize.write (((((((xModelState).xfrom_model)).apply ((xFoo))).xrender)).apply ((xapps)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xModelState).xfrom_model)).apply ((xFoo))).xbases)) ((((unsupported)).apply (((xmodels).xModel)))))
                        bogusForceDataize.write (((((((xModelState).xfrom_model)).apply ((xBar))).xrender)).apply ((xapps)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xModelState).xfrom_model)).apply ((xBar))).xbases)) ((((unsupported)).apply (((xmodels).xModel)))))
                        bogusForceDataize.write (((((((xModelState).xfrom_model)).apply ((xFooBar))).xrender)).apply ((xapps)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xModelState).xfrom_model)).apply ((xFooBar))).xbases)) ((((unsupported)).apply ("migrations.foo") ("migrations.bar"))))
                        bogusForceDataize.write (((((((xModelState).xfrom_model)).apply ((xSubFooBar))).xrender)).apply ((xapps)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xModelState).xfrom_model)).apply ((xSubFooBar))).xbases)) ((((unsupported)).apply ("migrations.foobar"))))
                xtest_render_project_dependencies.write
                  [xself]
                    memory > xnew_apps
                    memory > xproxy
                    memory > xapps
                    memory > xapp_label
                    memory > xproject_state
                    memory > xfinal_apps
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply ((xA)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply ((xB)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply ((xA)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply ((xB)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (xnew_apps)
                              xproxy.write TRUE
                        (((unsupported)).apply ((xD)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "migrations"
                              xapps.write (xnew_apps)
                              xproxy.write TRUE
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xA)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xB)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xC)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xD)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xE)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xF)))))
                        xfinal_apps.write ((xproject_state).xapps)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xfinal_apps).xget_models)).apply)))) (6))
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xA)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xB)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xC)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xF)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xInvalidBasesError)))))
                          unsupported
                xtest_render_unique_app_labels.write
                  [xself]
                    memory > xproject_state
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            xapp_label.write "django.contrib.auth"
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            xapp_label.write "vendor.auth"
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xA)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xproject_state).xapps).xget_models)).apply)))) (2))
                xtest_reload_related_model_on_non_relational_fields.write
                  [xself]
                    memory > xD
                    memory > xB
                    memory > xproject_state
                    memory > xoperation
                    memory > xA
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xproject_state.write (((xProjectState)).apply)
                        unsupported
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((xModelState)).apply ("migrations") ("A") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((xModelState)).apply ("migrations") ("B") ((((unsupported)).apply ((((unsupported)).apply ("a") (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))))))))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((xModelState)).apply ("migrations") ("C") ((((unsupported)).apply ((((unsupported)).apply ("b") (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("name") (((((xmodels).xTextField)).apply)))))))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((xModelState)).apply ("migrations") ("D") ((((unsupported)).apply ((((unsupported)).apply ("a") (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))))))))))
                        xoperation.write (((unsupported)).apply ((xAlterField)) ("C") ("name") ((((unsupported)).apply (((xmodels).xTextField)) (TRUE))))
                        bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ("migrations") ((xproject_state)))
                        (((unsupported)).apply (((xproject_state).xreload_model)) ("migrations") ("a") (TRUE))
                        xA.write (((((xproject_state).xapps).xget_model)).apply ("migrations.A"))
                        xB.write (((((xproject_state).xapps).xget_model)).apply ("migrations.B"))
                        xD.write (((((xproject_state).xapps).xget_model)).apply ("migrations.D"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xB).x_meta).xget_field)).apply ("a")).xrelated_model)) ((xA)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xD).x_meta).xget_field)).apply ("a")).xrelated_model)) ((xA)))
                xtest_reload_model_relationship_consistency.write
                  [xself]
                    memory > xC
                    memory > xB
                    memory > xA
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((xModelState)).apply ("migrations") ("A") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((xModelState)).apply ("migrations") ("B") ((((unsupported)).apply ((((unsupported)).apply ("a") (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))))))))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((xModelState)).apply ("migrations") ("C") ((((unsupported)).apply ((((unsupported)).apply ("b") (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))))))))))
                        xA.write (((((xproject_state).xapps).xget_model)).apply ("migrations.A"))
                        xB.write (((((xproject_state).xapps).xget_model)).apply ("migrations.B"))
                        xC.write (((((xproject_state).xapps).xget_model)).apply ("migrations.C"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xr).xrelated_model)) ((xr)) ((((xA).x_meta).xrelated_objects)))) ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xr).xrelated_model)) ((xr)) ((((xB).x_meta).xrelated_objects)))) ((((unsupported)).apply ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xr).xrelated_model)) ((xr)) ((((xC).x_meta).xrelated_objects)))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xproject_state).xreload_model)) ("migrations") ("a") (TRUE))
                        xA.write (((((xproject_state).xapps).xget_model)).apply ("migrations.A"))
                        xB.write (((((xproject_state).xapps).xget_model)).apply ("migrations.B"))
                        xC.write (((((xproject_state).xapps).xget_model)).apply ("migrations.C"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xr).xrelated_model)) ((xr)) ((((xA).x_meta).xrelated_objects)))) ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xr).xrelated_model)) ((xr)) ((((xB).x_meta).xrelated_objects)))) ((((unsupported)).apply ((xC)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xr).xrelated_model)) ((xr)) ((((xC).x_meta).xrelated_objects)))) ((((unsupported)).apply)))
                xtest_add_relations.write
                  [xself]
                    memory > xnew_apps
                    memory > xmodel_a_old
                    memory > xmodel_b_old
                    memory > xproject_state
                    memory > xmodel_c_new
                    memory > xoperation
                    memory > xmodel_a_new
                    memory > xmodel_c_old
                    memory > xapps
                    memory > xold_state
                    memory > xmodel_b_new
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "something"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply ((xA)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "something"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "something"
                              xapps.write (xnew_apps)
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xA)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xB)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xC)))))
                        unsupported
                        xold_state.write ((((xproject_state).xclone)).apply)
                        xmodel_a_old.write (((((xold_state).xapps).xget_model)).apply ("something") ("A"))
                        xmodel_b_old.write (((((xold_state).xapps).xget_model)).apply ("something") ("B"))
                        xmodel_c_old.write (((((xold_state).xapps).xget_model)).apply ("something") ("C"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xmodel_a_old).x_meta).xget_field)).apply ("b")).xrelated_model)) ((xmodel_b_old)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xmodel_b_old).x_meta).xget_field)).apply ("a_ptr")).xrelated_model)) ((xmodel_a_old)))
                        xoperation.write (((xAddField)).apply ("c") ("to_a") ((((unsupported)).apply (((xmodels).xOneToOneField)) ("something.A") (((xmodels).xCASCADE)) ("from_c"))))
                        bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ("something") ((xproject_state)))
                        xmodel_a_new.write (((((xproject_state).xapps).xget_model)).apply ("something") ("A"))
                        xmodel_b_new.write (((((xproject_state).xapps).xget_model)).apply ("something") ("B"))
                        xmodel_c_new.write (((((xproject_state).xapps).xget_model)).apply ("something") ("C"))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmodel_a_old)) ((xmodel_a_new)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmodel_b_old)) ((xmodel_b_new)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmodel_c_old)) ((xmodel_c_new)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xmodel_a_old).x_meta).xget_field)).apply ("b")).xrelated_model)) ((xmodel_b_old)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xmodel_b_old).x_meta).xget_field)).apply ("a_ptr")).xrelated_model)) ((xmodel_a_old)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xmodel_a_new).x_meta).xget_field)).apply ("b")).xrelated_model)) ((xmodel_b_new)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xmodel_b_new).x_meta).xget_field)).apply ("a_ptr")).xrelated_model)) ((xmodel_a_new)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xmodel_a_new).x_meta).xget_field)).apply ("from_c")).xrelated_model)) ((xmodel_c_new)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xmodel_c_new).x_meta).xget_field)).apply ("to_a")).xrelated_model)) ((xmodel_a_new)))
                xtest_remove_relations.write
                  [xself]
                    memory > xnew_apps
                    memory > xmodel_a_old
                    memory > xapp_label
                    memory > xproject_state
                    memory > xoperation
                    memory > xto_a
                    memory > xapps
                    memory > xold_state
                    memory > xmodel_a_new
                    memory > xget_model_a
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "something"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xto_a.write ((((xmodels).xForeignKey)).apply ((xA)) (((xmodels).xCASCADE)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "something"
                                xapps.write (xnew_apps)
                        xget_model_a.write
                          [xstate]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xmod)) ((xmod)) ((((((xstate).xapps).xget_models)).apply)) (((((xmod).x_meta).xmodel_name).eq "a")))) (0))))
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xA)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xget_model_a)).apply ((xproject_state))).x_meta).xrelated_objects)))) (1))
                        xold_state.write ((((xproject_state).xclone)).apply)
                        xoperation.write (((xRemoveField)).apply ("b") ("to_a"))
                        bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ("something") ((xproject_state)))
                        xmodel_a_old.write (((xget_model_a)).apply ((xold_state)))
                        xmodel_a_new.write (((xget_model_a)).apply ((xproject_state)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmodel_a_old)) ((xmodel_a_new)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xmodel_a_old).x_meta).xrelated_objects)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xmodel_a_new).x_meta).xrelated_objects)))) (0))
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xA)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xB)))))
                        xold_state.write ((((xproject_state).xclone)).apply)
                        xoperation.write (((xDeleteModel)).apply ("b"))
                        bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ("something") ((xproject_state)))
                        xmodel_a_old.write (((xget_model_a)).apply ((xold_state)))
                        xmodel_a_new.write (((xget_model_a)).apply ((xproject_state)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmodel_a_old)) ((xmodel_a_new)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xmodel_a_old).x_meta).xrelated_objects)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xmodel_a_new).x_meta).xrelated_objects)))) (0))
                xtest_self_relation.write
                  [xself]
                    memory > xmodel_a_old
                    memory > xfield_to_a_new
                    memory > xold_state
                    memory > xapp_label
                    memory > xoperation
                    memory > xto_a
                    memory > xfield_to_a_old
                    memory > xproject_state
                    memory > xmodel_a_new
                    memory > xget_model_a
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xto_a.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("something.A") ((xfalse)))
                            (((unsupported)).apply)
                              xapp_label.write "something"
                        xget_model_a.write
                          [xstate]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xmod)) ((xmod)) ((((((xstate).xapps).xget_models)).apply)) (((((xmod).x_meta).xmodel_name).eq "a")))) (0))))
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xA)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xget_model_a)).apply ((xproject_state))).x_meta).xrelated_objects)))) (1))
                        xold_state.write ((((xproject_state).xclone)).apply)
                        xoperation.write (((unsupported)).apply ((xAlterField)) ("a") ("to_a") ((((unsupported)).apply (((xmodels).xManyToManyField)) ("something.A") ((xfalse)) (TRUE))))
                        bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ("something") ((xproject_state)))
                        xmodel_a_old.write (((xget_model_a)).apply ((xold_state)))
                        xmodel_a_new.write (((xget_model_a)).apply ((xproject_state)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmodel_a_old)) ((xmodel_a_new)))
                        xfield_to_a_old.write (((((xmodel_a_old).x_meta).xget_field)).apply ("to_a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield_to_a_old).xm2m_field_name)).apply)) ("from_a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield_to_a_old).xm2m_reverse_field_name)).apply)) ("to_a"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfield_to_a_old).xrelated_model)) ((xmodel_a_old)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((((xfield_to_a_old).xremote_field).xthrough).x_meta).xget_field)).apply ("to_a")).xrelated_model)) ((xmodel_a_old)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((((xfield_to_a_old).xremote_field).xthrough).x_meta).xget_field)).apply ("from_a")).xrelated_model)) ((xmodel_a_old)))
                        xfield_to_a_new.write (((((xmodel_a_new).x_meta).xget_field)).apply ("to_a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield_to_a_new).xm2m_field_name)).apply)) ("from_a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfield_to_a_new).xm2m_reverse_field_name)).apply)) ("to_a"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfield_to_a_new).xrelated_model)) ((xmodel_a_new)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((((xfield_to_a_new).xremote_field).xthrough).x_meta).xget_field)).apply ("to_a")).xrelated_model)) ((xmodel_a_new)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((((xfield_to_a_new).xremote_field).xthrough).x_meta).xget_field)).apply ("from_a")).xrelated_model)) ((xmodel_a_new)))
                xtest_equality.write
                  [xself]
                    memory > xother_state
                    memory > xproject_state
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((xModelState)).apply ("migrations") ("Tag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (100))))) ((((unsupported)).apply ("hidden") (((((xmodels).xBooleanField)).apply)))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        unsupported
                        xother_state.write ((((xproject_state).xclone)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xproject_state)) ((xproject_state)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xproject_state)) ((xother_state)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xproject_state).neq (xproject_state))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xproject_state).neq (xother_state))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xproject_state).xapps)) (((xother_state).xapps)))
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((xModelState)).apply ("migrations") ("Tag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (99))))) ((((unsupported)).apply ("hidden") (((((xmodels).xBooleanField)).apply)))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xproject_state)) ((xother_state)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xproject_state).eq (xother_state))) ((xfalse)))
                xtest_dangling_references_throw_error.write
                  [xself]
                    memory > xnew_apps
                    memory > xapps
                    memory > xapp_label
                    memory > xmsg
                    memory > xproject_state
                    memory > xauthor
                    memory > xname
                    memory > xpublisher
                    memory > xauthors
                    seq > @
                      seq
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write ((((xmodels).xTextField)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write ((((xmodels).xTextField)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xauthor.write ((((xmodels).xForeignKey)).apply ((xAuthor)) (((xmodels).xCASCADE)))
                            xpublisher.write ((((xmodels).xForeignKey)).apply ((xPublisher)) (((xmodels).xCASCADE)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xauthors.write ((((xmodels).xManyToManyField)).apply ((xAuthor)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xAuthor)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xPublisher)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xBook)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xMagazine)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xproject_state).xapps).xget_models)).apply)))) (4))
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xBook)))))
                        xmsg.write "The field migrations.Book.author was declared with a lazy reference to 'migrations.author', but app 'migrations' doesn't provide model 'author'.nThe field migrations.Book.publisher was declared with a lazy reference to 'migrations.publisher', but app 'migrations' doesn't provide model 'publisher'."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          unsupported
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xMagazine)))))
                        xmsg.write "The field migrations.Magazine.authors was declared with a lazy reference to 'migrations.author', but app 'migrations' doesn't provide model 'author'.nThe field migrations.Magazine_authors.author was declared with a lazy reference to 'migrations.author', but app 'migrations' doesn't provide model 'author'."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          unsupported
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xBook)))))
                        xmsg.write "The field migrations.Book.author was declared with a lazy reference to 'migrations.author', but app 'migrations' doesn't provide model 'author'.nThe field migrations.Book.publisher was declared with a lazy reference to 'migrations.publisher', but app 'migrations' doesn't provide model 'publisher'.nThe field migrations.Magazine.authors was declared with a lazy reference to 'migrations.author', but app 'migrations' doesn't provide model 'author'.nThe field migrations.Magazine_authors.author was declared with a lazy reference to 'migrations.author', but app 'migrations' doesn't provide model 'author'."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          unsupported
                xtest_reference_mixed_case_app_label.write
                  [xself]
                    memory > xnew_apps
                    memory > xapps
                    memory > xapp_label
                    memory > xproject_state
                    memory > xauthor
                    memory > xauthors
                    seq > @
                      seq
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "MiXedCase_migrations"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xauthor.write ((((xmodels).xForeignKey)).apply ((xAuthor)) (((xmodels).xCASCADE)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "MiXedCase_migrations"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xauthors.write ((((xmodels).xManyToManyField)).apply ((xAuthor)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "MiXedCase_migrations"
                                xapps.write (xnew_apps)
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xAuthor)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xBook)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xMagazine)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((((xproject_state).xapps).xget_models)).apply)))) (3))
                xtest_real_apps.write
                  [xself]
                    memory > xnew_apps
                    memory > xrendered_state
                    memory > xapps
                    memory > xapp_label
                    memory > xproject_state
                    memory > xct
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xct.write ((((xmodels).xForeignKey)).apply ("contenttypes.ContentType") (((xmodels).xCASCADE)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xTestModel)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          unsupported
                        xproject_state.write (((unsupported)).apply ((xProjectState)) ((((unsupported)).apply ("contenttypes"))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xTestModel)))))
                        xrendered_state.write ((xproject_state).xapps)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xx)) ((xx)) (((((xrendered_state).xget_models)).apply)) (((((xx).x_meta).xapp_label).eq "migrations")))))) (1))
                xtest_real_apps_non_set.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAssertionError)))))
                        (((unsupported)).apply ((xProjectState)) ((((unsupported)).apply ("contenttypes"))))
                xtest_ignore_order_wrt.write
                  [xself]
                    memory > xnew_apps
                    memory > xorder_with_respect_to
                    memory > xapps
                    memory > xapp_label
                    memory > xproject_state
                    memory > xauthor
                    memory > xname
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write ((((xmodels).xTextField)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xauthor.write ((((xmodels).xForeignKey)).apply ((xAuthor)) (((xmodels).xCASCADE)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xorder_with_respect_to.write "author"
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xAuthor)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xBook)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("book")))).xfields)))) ((((unsupported)).apply ("id") ("author"))))
                xtest_modelstate_get_field_order_wrt.write
                  [xself]
                    memory > xnew_apps
                    memory > xorder_with_respect_to
                    memory > xapps
                    memory > xapp_label
                    memory > xorder_wrt_field
                    memory > xauthor
                    memory > xname
                    memory > xmodel_state
                    seq > @
                      seq
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write ((((xmodels).xTextField)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xauthor.write ((((xmodels).xForeignKey)).apply ((xAuthor)) (((xmodels).xCASCADE)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xorder_with_respect_to.write "author"
                        xmodel_state.write ((((xModelState).xfrom_model)).apply ((xBook)))
                        xorder_wrt_field.write ((((xmodel_state).xget_field)).apply ("_order"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xorder_wrt_field)) (((xmodels).xForeignKey)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xorder_wrt_field).xrelated_model)) ("migrations.author"))
                xtest_modelstate_get_field_no_order_wrt_order_field.write
                  [xself]
                    memory > xnew_apps
                    memory > x_order
                    memory > xapps
                    memory > xmodel_state
                    memory > xorder_field
                    memory > xapp_label
                    seq > @
                      seq
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            x_order.write ((((xmodels).xPositiveSmallIntegerField)).apply)
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        xmodel_state.write ((((xModelState).xfrom_model)).apply ((xHistoricalRecord)))
                        xorder_field.write ((((xmodel_state).xget_field)).apply ("_order"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xorder_field).xrelated_model)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xorder_field)) (((xmodels).xPositiveSmallIntegerField)))
                xtest_manager_refer_correct_model_version.write
                  [xself]
                    memory > xoperation
                    memory > xold_model
                    memory > xnew_model
                    memory > xnew_state
                    memory > xproject_state
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((unsupported)).apply ((xModelState)) ("migrations") ("Tag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("hidden") (((((xmodels).xBooleanField)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply ("food_mgr") ((((xFoodManager)).apply ("a") ("b"))))) ((((unsupported)).apply ("food_qs") (((((xFoodQuerySet).xas_manager)).apply)))))))))
                        xold_model.write (((((xproject_state).xapps).xget_model)).apply ("migrations") ("tag"))
                        xnew_state.write ((((xproject_state).xclone)).apply)
                        xoperation.write (((xRemoveField)).apply ("tag") ("hidden"))
                        bogusForceDataize.write ((((xoperation).xstate_forwards)).apply ("migrations") ((xnew_state)))
                        xnew_model.write (((((xnew_state).xapps).xget_model)).apply ("migrations") ("tag"))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xold_model)) ((xnew_model)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xold_model)) ((((xold_model).xfood_mgr).xmodel)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xold_model)) ((((xold_model).xfood_qs).xmodel)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xnew_model)) ((((xnew_model).xfood_mgr).xmodel)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xnew_model)) ((((xnew_model).xfood_qs).xmodel)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xold_model).xfood_mgr)) (((xnew_model).xfood_mgr)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xold_model).xfood_qs)) (((xnew_model).xfood_qs)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xold_model).xfood_mgr).xmodel)) ((((xnew_model).xfood_mgr).xmodel)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xold_model).xfood_qs).xmodel)) ((((xnew_model).xfood_qs).xmodel)))
                xtest_choices_iterator.write
                  [xself]
                    memory > xnew_apps
                    memory > xchoices_field
                    memory > xapps
                    memory > xapp_label
                    memory > xchoice
                    memory > xchoices
                    memory > xname
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply ("a") ("A"))) ((((unsupported)).apply ("b") ("B"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            xchoice.write (((unsupported)).apply (((xmodels).xCharField)) (255) ((((xiter)).apply ((xchoices)))))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        bogusForceDataize.write ((((xProjectState).xfrom_apps)).apply ((xnew_apps)))
                        xchoices_field.write (((((xAuthor).x_meta).xget_field)).apply ("choice"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xchoices_field).xchoices)))) ((xchoices)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xget_base_project_state.write
                  [xself]
                    memory > xnew_apps
                    memory > xcomments
                    memory > xapps
                    memory > xapp_label
                    memory > xtext
                    memory > xproject_state
                    memory > xuser
                    memory > xauthors
                    seq > @
                      seq
                        xnew_apps.write (((xApps)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            seq
                              xapp_label.write "tests"
                              xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xtext.write ((((xmodels).xTextField)).apply)
                            xuser.write ((((xmodels).xForeignKey)).apply ((xUser)) (((xmodels).xCASCADE)))
                            xcomments.write ((((xmodels).xManyToManyField)).apply ("self"))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "tests"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xtext.write ((((xmodels).xTextField)).apply)
                            xauthors.write ((((xmodels).xManyToManyField)).apply ((xUser)))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "tests"
                                xapps.write (xnew_apps)
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xUser)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xComment)))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply (((((xModelState).xfrom_model)).apply ((xPost)))))
                        (((unsupported)).apply ((xproject_state)))
                xtest_relations_population.write
                  [xself]
                    memory > xtests
                    memory > xproject_state
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("add_model") ((((unsupported)).apply ((((unsupported)).apply ((xModelState)) ("migrations") ("Tag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))))))) ((((unsupported)).apply ("remove_model") ((((unsupported)).apply ("tests") ("comment"))))) ((((unsupported)).apply ("rename_model") ((((unsupported)).apply ("tests") ("comment") ("opinion"))))) ((((unsupported)).apply ("add_field") ((((unsupported)).apply ("tests") ("post") ("next_post") (((((xmodels).xForeignKey)).apply ("self") (((xmodels).xCASCADE)))) (TRUE))))) ((((unsupported)).apply ("remove_field") ((((unsupported)).apply ("tests") ("post") ("text"))))) ((((unsupported)).apply ("rename_field") ((((unsupported)).apply ("tests") ("comment") ("user") ("author"))))) ((((unsupported)).apply ("alter_field") ((((unsupported)).apply ("tests") ("comment") ("user") (((((xmodels).xIntegerField)).apply)) (TRUE))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmethod)) ((xargs)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xmethod)))))
                            seq
                              xproject_state.write ((((xself).xget_base_project_state)).apply)
                              bogusForceDataize.write (((((xgetattr)).apply ((xproject_state)) ((xmethod)))).apply ((((unsupported)).apply ((xargs)))))
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xproject_state).x_relations)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xproject_state).xrelations)) (((xproject_state).x_relations)))
                              bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xproject_state).x_relations)))
                xtest_add_model.write
                  [xself]
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("comment"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("tests") ("post"))) (((xproject_state).xrelations)))
                xtest_add_model_no_relations.write
                  [xself]
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((unsupported)).apply ((xModelState)) ("migrations") ("Tag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xproject_state).xrelations)) ((((unsupported)).apply)))
                xtest_add_model_other_app.write
                  [xself]
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((unsupported)).apply ((xModelState)) ("tests_other") ("comment") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("user") (((((xmodels).xForeignKey)).apply ("tests.user") (((xmodels).xCASCADE)))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))) ((((unsupported)).apply ("tests_other") ("comment"))))))
                xtest_remove_model.write
                  [xself]
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("comment"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))))))
                        bogusForceDataize.write ((((xproject_state).xremove_model)).apply ("tests") ("comment"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("tests") ("comment"))) (((xproject_state).xrelations)))
                        bogusForceDataize.write ((((xproject_state).xremove_model)).apply ("tests") ("post"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xproject_state).xrelations)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xproject_state).xremove_model)).apply ("tests") ("user"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xproject_state).xrelations)) ((((unsupported)).apply)))
                xtest_rename_model.write
                  [xself]
                    memory > xproject_state
                    memory > xrelated_field
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("comment"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))))))
                        xrelated_field.write (((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))) ((((unsupported)).apply ("tests") ("comment"))))
                        bogusForceDataize.write ((((xproject_state).xrename_model)).apply ("tests") ("comment") ("opinion"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("post"))) ((((unsupported)).apply ("tests") ("opinion"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("opinion"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("opinion"))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("tests") ("comment"))) (((xproject_state).xrelations)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))) ((((unsupported)).apply ("tests") ("opinion"))))) ((xrelated_field)))
                        bogusForceDataize.write ((((xproject_state).xrename_model)).apply ("tests") ("user") ("author"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("author"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("post"))) ((((unsupported)).apply ("tests") ("opinion"))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("tests") ("user"))) (((xproject_state).xrelations)))
                xtest_rename_model_no_relations.write
                  [xself]
                    memory > xproject_state
                    memory > xrelated_field
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        xrelated_field.write (((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))) ((((unsupported)).apply ("tests") ("post"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("tests") ("post"))) (((xproject_state).xrelations)))
                        bogusForceDataize.write ((((xproject_state).xrename_model)).apply ("tests") ("post") ("blog"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("blog"))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("tests") ("blog"))) (((xproject_state).xrelations)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrelated_field)) ((((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))) ((((unsupported)).apply ("tests") ("blog"))))))
                xtest_add_field.write
                  [xself]
                    memory > xnew_field
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("tests") ("post"))) (((xproject_state).xrelations)))
                        xnew_field.write ((((xmodels).xForeignKey)).apply ("self") (((xmodels).xCASCADE)))
                        (((unsupported)).apply (((xproject_state).xadd_field)) ("tests") ("post") ("next_post") ((xnew_field)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("post"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("post"))))) ((((unsupported)).apply ("tests") ("post"))))) ((((unsupported)).apply ("next_post") ((xnew_field)))))
                        xnew_field.write ((((xmodels).xForeignKey)).apply ("tests.post") (((xmodels).xCASCADE)))
                        (((unsupported)).apply (((xproject_state).xadd_field)) ("tests") ("comment") ("post") ((xnew_field)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("post"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("post"))) ((((unsupported)).apply ("tests") ("comment"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("post"))))) ((((unsupported)).apply ("tests") ("comment"))))) ((((unsupported)).apply ("post") ((xnew_field)))))
                xtest_add_field_m2m_with_through.write
                  [xself]
                    memory > xnew_field
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((unsupported)).apply ((xModelState)) ("tests") ("Tag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))))
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((unsupported)).apply ((xModelState)) ("tests") ("PostTag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("post") (((((xmodels).xForeignKey)).apply ("tests.post") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ("tag") (((((xmodels).xForeignKey)).apply ("tests.tag") (((xmodels).xCASCADE)))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("post"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("posttag"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("tag"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("posttag"))))))
                        xnew_field.write (((unsupported)).apply (((xmodels).xManyToManyField)) ("tests.tag") ("tests.posttag"))
                        (((unsupported)).apply (((xproject_state).xadd_field)) ("tests") ("post") ("tags") ((xnew_field)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("post"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("posttag"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("tag"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("posttag"))) ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("tag"))))) ((((unsupported)).apply ("tests") ("post"))))) ((((unsupported)).apply ("tags") ((xnew_field)))))
                xtest_remove_field.write
                  [xself]
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xproject_state).xremove_field)).apply ("tests") ("post") ("authors"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))))))
                        bogusForceDataize.write ((((xproject_state).xremove_field)).apply ("tests") ("comment") ("user"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))) ((((unsupported)).apply)))
                xtest_remove_field_no_relations.write
                  [xself]
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xproject_state).xremove_field)).apply ("tests") ("post") ("text"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                xtest_rename_field.write
                  [xself]
                    memory > xfield
                    memory > xrenamed_field
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        xfield.write (((unsupported)).apply (((((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("tests") ("comment")))).xfields)) ("user"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))) ((((unsupported)).apply ("tests") ("comment"))))) ((((unsupported)).apply ("user") ((xfield)))))
                        bogusForceDataize.write ((((xproject_state).xrename_field)).apply ("tests") ("comment") ("user") ("author"))
                        xrenamed_field.write (((unsupported)).apply (((((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("tests") ("comment")))).xfields)) ("author"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))) ((((unsupported)).apply ("tests") ("comment"))))) ((((unsupported)).apply ("author") ((xrenamed_field)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfield)) ((xrenamed_field)))
                xtest_rename_field_no_relations.write
                  [xself]
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xproject_state).xrename_field)).apply ("tests") ("post") ("text") ("description"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                xtest_alter_field.write
                  [xself]
                    memory > xproject_state
                    memory > xm2m_field
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        (((unsupported)).apply (((xproject_state).xalter_field)) ("tests") ("comment") ("user") (((((xmodels).xIntegerField)).apply)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("post"))))))
                        xm2m_field.write ((((xmodels).xManyToManyField)).apply ("tests.user"))
                        (((unsupported)).apply (((xproject_state).xalter_field)) ("tests") ("comment") ("user") ((xm2m_field)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("post"))) ((((unsupported)).apply ("tests") ("comment"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))) ((((unsupported)).apply ("tests") ("comment"))))) ((((unsupported)).apply ("user") ((xm2m_field)))))
                xtest_alter_field_m2m_to_fk.write
                  [xself]
                    memory > xforeign_key
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((((unsupported)).apply ((xModelState)) ("tests_other") ("user_other") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("tests_other") ("user_other"))) (((xproject_state).xrelations)))
                        xforeign_key.write ((((xmodels).xForeignKey)).apply ("tests_other.user_other") (((xmodels).xCASCADE)))
                        (((unsupported)).apply (((xproject_state).xalter_field)) ("tests") ("post") ("authors") ((xforeign_key)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests_other") ("user_other"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("post"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests_other") ("user_other"))))) ((((unsupported)).apply ("tests") ("post"))))) ((((unsupported)).apply ("authors") ((xforeign_key)))))
                xtest_many_relations_to_same_model.write
                  [xself]
                    memory > xnew_field
                    memory > xcomment_rels
                    memory > xproject_state
                    seq > @
                      seq
                        xproject_state.write ((((xself).xget_base_project_state)).apply)
                        xnew_field.write ((((xmodels).xForeignKey)).apply ("tests.user") (((xmodels).xCASCADE)))
                        (((unsupported)).apply (((xproject_state).xadd_field)) ("tests") ("comment") ("reviewer") ((xnew_field)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))))) ((((unsupported)).apply ((((unsupported)).apply ("tests") ("comment"))) ((((unsupported)).apply ("tests") ("post"))))))
                        xcomment_rels.write (((unsupported)).apply ((((unsupported)).apply (((xproject_state).xrelations)) ((((unsupported)).apply ("tests") ("user"))))) ((((unsupported)).apply ("tests") ("comment"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcomment_rels)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcomment_rels)) ("reviewer"))) ((xnew_field)))
                        bogusForceDataize.write ((((xproject_state).xrename_field)).apply ("tests") ("comment") ("reviewer") ("supervisor"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcomment_rels)))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcomment_rels)) ("supervisor"))) ((xnew_field)))
                        bogusForceDataize.write ((((xproject_state).xremove_field)).apply ("tests") ("comment") ("user"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomment_rels)) ((((unsupported)).apply ("supervisor") ((xnew_field)))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_custom_model_base.write
                  [xself]
                    memory > xstate
                    seq > @
                      seq
                        xstate.write ((((xModelState).xfrom_model)).apply ((xModelWithCustomBase)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstate).xbases)) ((((unsupported)).apply (((xmodels).xModel)))))
                xtest_bound_field_sanity_check.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xmodels).xCharField)) (1))
                        (((unsupported)).apply (((xfield).xmodel)) (((xmodels).xModel)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("ModelState.fields cannot be bound to a model - \"field\" is."))))
                          bogusForceDataize.write (((xModelState)).apply ("app") ("Model") ((((unsupported)).apply ((((unsupported)).apply ("field") ((xfield)))))))
                xtest_sanity_check_to.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xmodels).xForeignKey)).apply ((xUnicodeModel)) (((xmodels).xCASCADE)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("ModelState.fields cannot refer to a model class - \"field.to\" does. Use a string reference instead."))))
                          bogusForceDataize.write (((xModelState)).apply ("app") ("Model") ((((unsupported)).apply ((((unsupported)).apply ("field") ((xfield)))))))
                xtest_sanity_check_through.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xmodels).xManyToManyField)).apply ("UnicodeModel"))
                        (((unsupported)).apply ((((xfield).xremote_field).xthrough)) ((xUnicodeModel)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("ModelState.fields cannot refer to a model class - \"field.through\" does. Use a string reference instead."))))
                          bogusForceDataize.write (((xModelState)).apply ("app") ("Model") ((((unsupported)).apply ((((unsupported)).apply ("field") ((xfield)))))))
                xtest_sanity_index_name.write
                  [xself]
                    memory > xfield
                    memory > xoptions
                    memory > xmsg
                    seq > @
                      seq
                        xfield.write ((((xmodels).xIntegerField)).apply)
                        xoptions.write (((unsupported)).apply ("indexes") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("field"))))))))
                        xmsg.write "Indexes passed to ModelState require a name attribute. <Index: fields=['field']> doesn't have one."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xModelState)) ("app") ("Model") ((((unsupported)).apply ((((unsupported)).apply ("field") ((xfield)))))) ((xoptions)))
                xtest_fields_immutability.write
                  [xself]
                    memory > xfield
                    memory > xstate
                    memory > xapps
                    memory > xModel
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xapps.write (((xApps)).apply)
                        xfield.write (((unsupported)).apply (((xmodels).xCharField)) (1))
                        xstate.write (((xModelState)).apply ("app") ("Model") ((((unsupported)).apply ((((unsupported)).apply ("name") ((xfield)))))))
                        xModel.write ((((xstate).xrender)).apply ((xapps)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((((xModel).x_meta).xget_field)).apply ("name"))) ((xfield)))
                xtest_repr.write
                  [xself]
                    memory > xfield
                    memory > xstate
                    memory > xproject_state
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xmodels).xCharField)) (1))
                        xstate.write (((unsupported)).apply ((xModelState)) ("app") ("Model") ((((unsupported)).apply ((((unsupported)).apply ("name") ((xfield)))))) ((((unsupported)).apply ("app.A") ("app.B") ("app.C"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xstate)))) ("<ModelState: 'app.Model'>"))
                        xproject_state.write (((xProjectState)).apply)
                        bogusForceDataize.write ((((xproject_state).xadd_model)).apply ((xstate)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xInvalidBasesError)) ("Cannot resolve bases for [<ModelState: 'app.Model'>]"))))
                          unsupported
                xtest_fields_ordering_equality.write
                  [xself]
                    memory > xstate
                    memory > xreordered_state
                    seq > @
                      seq
                        xstate.write (((xModelState)).apply ("migrations") ("Tag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (100))))) ((((unsupported)).apply ("hidden") (((((xmodels).xBooleanField)).apply)))))))
                        xreordered_state.write (((xModelState)).apply ("migrations") ("Tag") ((((unsupported)).apply ((((unsupported)).apply ("id") ((((unsupported)).apply (((xmodels).xAutoField)) (TRUE))))) ((((unsupported)).apply ("hidden") (((((xmodels).xBooleanField)).apply)))) ((((unsupported)).apply ("name") ((((unsupported)).apply (((xmodels).xCharField)) (100))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstate)) ((xreordered_state)))
                xtest_create_swappable.write
                  [xself]
                    memory > xnew_apps
                    memory > xauthor_state
                    memory > xapps
                    memory > xapp_label
                    memory > xbio
                    memory > xage
                    memory > xname
                    memory > xswappable
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            xbio.write ((((xmodels).xTextField)).apply)
                            xage.write (((unsupported)).apply (((xmodels).xIntegerField)) (TRUE) (TRUE))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xswappable.write "TEST_SWAPPABLE_MODEL"
                        xauthor_state.write ((((xModelState).xfrom_model)).apply ((xAuthor)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xapp_label)) ("migrations"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xname)) ("Author"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xauthor_state).xfields)))) ((((unsupported)).apply ("id") ("name") ("bio") ("age"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xauthor_state).xfields)) ("name")).xmax_length)) (255))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply (((xauthor_state).xfields)) ("bio")).xnull)) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply (((xauthor_state).xfields)) ("age")).xnull)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xoptions)) ((((unsupported)).apply ("swappable") ("TEST_SWAPPABLE_MODEL") ("indexes") ((((unsupported)).apply)) ("constraints") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xbases)) ((((unsupported)).apply (((xmodels).xModel)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xauthor_state).xmanagers)) ((((unsupported)).apply)))
                xtest_create_swappable_from_abstract.write
                  [xself]
                    memory > xnew_apps
                    memory > xapp_label
                    memory > xbus_routes
                    memory > xkeywords
                    memory > xabstract
                    memory > xswappable
                    memory > xinbound
                    memory > xapps
                    memory > xstation_state
                    memory > xname
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xkeywords.write (((unsupported)).apply (((xmodels).xCharField)) (256))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                        (((unsupported)).apply ((xSearchableLocation)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (128))
                            (((unsupported)).apply)
                              xabstract.write TRUE
                        (((unsupported)).apply ((xStation)))
                          seq
                            xbus_routes.write (((unsupported)).apply (((xmodels).xCharField)) (128))
                            xinbound.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            (((unsupported)).apply (((xStation).xMeta)))
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xswappable.write "TEST_SWAPPABLE_MODEL"
                        xstation_state.write ((((xModelState).xfrom_model)).apply ((xBusStation)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstation_state).xapp_label)) ("migrations"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstation_state).xname)) ("BusStation"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xstation_state).xfields)))) ((((unsupported)).apply ("searchablelocation_ptr") ("name") ("bus_routes") ("inbound"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply (((xstation_state).xfields)) ("name")).xmax_length)) (128))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((unsupported)).apply (((xstation_state).xfields)) ("bus_routes")).xnull)) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstation_state).xoptions)) ((((unsupported)).apply ("abstract") ((xfalse)) ("swappable") ("TEST_SWAPPABLE_MODEL") ("indexes") ((((unsupported)).apply)) ("constraints") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstation_state).xbases)) ((((unsupported)).apply ("migrations.searchablelocation"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstation_state).xmanagers)) ((((unsupported)).apply)))
                xtest_custom_manager_swappable.write
                  [xself]
                    memory > xnew_apps
                    memory > xapps
                    memory > xfood_qs
                    memory > xswappable
                    memory > xfood_no_mgr
                    memory > xapp_label
                    memory > xfood_state
                    memory > xfood_mgr
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xnew_apps.write (((xApps)).apply ((((unsupported)).apply ("migrations"))))
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xfood_mgr.write (((xFoodManager)).apply ("a") ("b"))
                            xfood_qs.write ((((xFoodQuerySet).xas_manager)).apply)
                            xfood_no_mgr.write (((xNoMigrationFoodManager)).apply ("x") ("y"))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xapps.write (xnew_apps)
                                xswappable.write "TEST_SWAPPABLE_MODEL"
                        xfood_state.write ((((xModelState).xfrom_model)).apply ((xFood)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xname)) ((((unsupported)).apply ((xname)) ((xmgr)))) (((xfood_state).xmanagers)))) ((((unsupported)).apply ("food_mgr"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((unsupported)).apply (((xfood_state).xmanagers)) (0))) (1)).xargs)) ((((unsupported)).apply ("a") ("b") (1) (2))))
                xtest_order_with_respect_to_private_field.write
                  [xself]
                    memory > xorder_with_respect_to
                    memory > xprivate
                    memory > xcontent_type
                    memory > xobject_id
                    memory > xstate
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xcontent_type.write ((((xmodels).xForeignKey)).apply ("contenttypes.ContentType") (((xmodels).xCASCADE)))
                            xobject_id.write ((((xmodels).xPositiveIntegerField)).apply)
                            xprivate.write (((xGenericForeignKey)).apply)
                            (((unsupported)).apply)
                              xorder_with_respect_to.write "private"
                        xstate.write ((((xModelState).xfrom_model)).apply ((xPrivateFieldModel)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("order_with_respect_to") (((xstate).xoptions)))
                xtest_abstract_model_children_inherit_indexes.write
                  [xself]
                    memory > xindexes
                    memory > xabstract
                    memory > xname
                    memory > xapp_label
                    memory > xindex_names
                    memory > xchild2_state
                    memory > xchild1_state
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (50))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xabstract.write TRUE
                                xindexes.write (((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("name"))))))
                        (((unsupported)).apply ((xAbstract)))
                        (((unsupported)).apply ((xAbstract)))
                        xchild1_state.write ((((xModelState).xfrom_model)).apply ((xChild1)))
                        xchild2_state.write ((((xModelState).xfrom_model)).apply ((xChild2)))
                        xindex_names.write (((unsupported)).apply (((xindex).xname)) ((xindex)) ((((unsupported)).apply (((xchild1_state).xoptions)) ("indexes"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xindex_names)) ((((unsupported)).apply ("migrations__name_b0afd7_idx"))))
                        xindex_names.write (((unsupported)).apply (((xindex).xname)) ((xindex)) ((((unsupported)).apply (((xchild2_state).xoptions)) ("indexes"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xindex_names)) ((((unsupported)).apply ("migrations__name_016466_idx"))))
                        (((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply (((xchild1_state).xoptions)) ("indexes"))) (0)).xname)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xChild1).x_meta).xindexes)) (0)).xname)) ("migrations__name_b0afd7_idx"))
                xtest_explicit_index_name.write
                  [xself]
                    memory > xindexes
                    memory > xname
                    memory > xmodel_state
                    memory > xapp_label
                    memory > xindex_names
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (50))
                            (((unsupported)).apply)
                              seq
                                xapp_label.write "migrations"
                                xindexes.write (((unsupported)).apply ((((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply ("name"))) ("foo_idx"))))
                        xmodel_state.write ((((xModelState).xfrom_model)).apply ((xTestModel)))
                        xindex_names.write (((unsupported)).apply (((xindex).xname)) ((xindex)) ((((unsupported)).apply (((xmodel_state).xoptions)) ("indexes"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xindex_names)) ((((unsupported)).apply ("foo_idx"))))
                xtest_from_model_constraints.write
                  [xself]
                    memory > xconstraints
                    memory > xsize
                    memory > xstate_constraints
                    memory > xmodel_constraints
                    memory > xstate
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsize.write ((((xmodels).xIntegerField)).apply)
                            (((unsupported)).apply)
                              xconstraints.write (((unsupported)).apply ((((unsupported)).apply (((xmodels).xCheckConstraint)) ((((unsupported)).apply (((xmodels).xQ)) (1))) ("size_gt_1"))))
                        xstate.write ((((xModelState).xfrom_model)).apply ((xModelWithConstraints)))
                        xmodel_constraints.write (((xModelWithConstraints).x_meta).xconstraints)
                        xstate_constraints.write (((unsupported)).apply (((xstate).xoptions)) ("constraints"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmodel_constraints)) ((xstate_constraints)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmodel_constraints)) ((xstate_constraints)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply ((xmodel_constraints)) (0))) ((((unsupported)).apply ((xstate_constraints)) (0))))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xapps)) ((((xApps)).apply ((((unsupported)).apply ("migrations.related_models_app"))))))
                xcreate_model.write
                  [xself xname xforeign_keys xbases xabstract xproxy]
                    memory > xbody
                    memory > xtest_name
                    memory > xfname
                    memory > xfname_base
                    memory > xmeta
                    memory > xmeta_contents
                    seq > @
                      (((unsupported)).apply)
                        xtest_name.write "related_models_app"
                        (((unsupported)).apply ((((xabstract).and (xproxy)).not)))
                        xmeta_contents.write (((unsupported)).apply ("abstract") ((xabstract)) ("app_label") ((xtest_name)) ("apps") (((xself).xapps)) ("proxy") ((xproxy)))
                        xmeta.write (((xtype)).apply ("Meta") ((((unsupported)).apply)) ((xmeta_contents)))
                        ((xbases).not).if
                          xbases.write (((unsupported)).apply (((xmodels).xModel)))
                        xbody.write (((unsupported)).apply ("Meta") ((xmeta)) ("__module__") ("__fake__"))
                        (((unsupported)).apply ((xfname_base)) ((xfname)) (("%s_%%d".mod ((((xname).xlower)).apply))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xfk)))) ((((xenumerate)).apply ((xforeign_keys)) (1))))
                          seq
                            xfname.write ((xfname_base).mod (xi))
                            (((unsupported)).apply ((((unsupported)).apply ((xbody)) ((xfname)))) ((xfk)))
                        (((unsupported)).apply ((((xtype)).apply ((xname)) ((xbases)) ((xbody)))))
                xassertRelated.write
                  [xself xmodel xneedle]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xget_related_models_recursive)).apply ((xmodel)))) ((((unsupported)).apply ((((unsupported)).apply ((((xn).x_meta).xapp_label)) ((((xn).x_meta).xmodel_name)))) ((xn)) ((xneedle)))))
                xtest_unrelated.write
                  [xself]
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write ((((xself).xcreate_model)).apply ("A"))
                        xB.write ((((xself).xcreate_model)).apply ("B"))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply)))
                xtest_direct_fk.write
                  [xself]
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))))))
                        xB.write ((((xself).xcreate_model)).apply ("B"))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)))))
                xtest_direct_hidden_fk.write
                  [xself]
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xForeignKey)) ("B") (((xmodels).xCASCADE)) ("+"))))))
                        xB.write ((((xself).xcreate_model)).apply ("B"))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)))))
                xtest_fk_through_proxy.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write ((((xself).xcreate_model)).apply ("A"))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply ((xA)))) (TRUE))
                        xC.write (((unsupported)).apply (((xself).xcreate_model)) ("C") ((((unsupported)).apply ((xB)))) (TRUE))
                        xD.write (((unsupported)).apply (((xself).xcreate_model)) ("D") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("C") (((xmodels).xCASCADE)))))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xC)) ((xD)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xC)) ((xD)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xC)) ((((unsupported)).apply ((xA)) ((xB)) ((xD)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xD)) ((((unsupported)).apply ((xA)) ((xB)) ((xC)))))
                xtest_nested_fk.write
                  [xself]
                    memory > xC
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))))))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("C") (((xmodels).xCASCADE)))))))
                        xC.write ((((xself).xcreate_model)).apply ("C"))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xC)) ((((unsupported)).apply ((xA)) ((xB)))))
                xtest_two_sided.write
                  [xself]
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))))))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)))))
                xtest_circle.write
                  [xself]
                    memory > xC
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))))))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("C") (((xmodels).xCASCADE)))))))
                        xC.write (((unsupported)).apply (((xself).xcreate_model)) ("C") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xC)) ((((unsupported)).apply ((xA)) ((xB)))))
                xtest_base.write
                  [xself]
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write ((((xself).xcreate_model)).apply ("A"))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply ((xA)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)))))
                xtest_nested_base.write
                  [xself]
                    memory > xC
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write ((((xself).xcreate_model)).apply ("A"))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply ((xA)))))
                        xC.write (((unsupported)).apply (((xself).xcreate_model)) ("C") ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xC)) ((((unsupported)).apply ((xA)) ((xB)))))
                xtest_multiple_bases.write
                  [xself]
                    memory > xC
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write ((((xself).xcreate_model)).apply ("A"))
                        xB.write ((((xself).xcreate_model)).apply ("B"))
                        xC.write (((unsupported)).apply (((xself).xcreate_model)) ("C") ((((unsupported)).apply ((xA)) ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xC)) ((((unsupported)).apply ((xA)) ((xB)))))
                xtest_multiple_nested_bases.write
                  [xself]
                    memory > xD
                    memory > xC
                    memory > xZ
                    memory > xB
                    memory > xF
                    memory > xE
                    memory > xY
                    memory > xA
                    seq > @
                      seq
                        xA.write ((((xself).xcreate_model)).apply ("A"))
                        xB.write ((((xself).xcreate_model)).apply ("B"))
                        xC.write (((unsupported)).apply (((xself).xcreate_model)) ("C") ((((unsupported)).apply ((xA)) ((xB)))))
                        xD.write ((((xself).xcreate_model)).apply ("D"))
                        xE.write (((unsupported)).apply (((xself).xcreate_model)) ("E") ((((unsupported)).apply ((xD)))))
                        xF.write (((unsupported)).apply (((xself).xcreate_model)) ("F") ((((unsupported)).apply ((xC)) ((xE)))))
                        xY.write ((((xself).xcreate_model)).apply ("Y"))
                        xZ.write (((unsupported)).apply (((xself).xcreate_model)) ("Z") ((((unsupported)).apply ((xY)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xC)) ((xD)) ((xE)) ((xF)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xC)) ((xD)) ((xE)) ((xF)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xC)) ((((unsupported)).apply ((xA)) ((xB)) ((xD)) ((xE)) ((xF)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xD)) ((((unsupported)).apply ((xA)) ((xB)) ((xC)) ((xE)) ((xF)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xE)) ((((unsupported)).apply ((xA)) ((xB)) ((xC)) ((xD)) ((xF)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xF)) ((((unsupported)).apply ((xA)) ((xB)) ((xC)) ((xD)) ((xE)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xY)) ((((unsupported)).apply ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xZ)) ((((unsupported)).apply ((xY)))))
                xtest_base_to_base_fk.write
                  [xself]
                    memory > xY
                    memory > xZ
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("Y") (((xmodels).xCASCADE)))))))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply ((xA)))))
                        xY.write ((((xself).xcreate_model)).apply ("Y"))
                        xZ.write (((unsupported)).apply (((xself).xcreate_model)) ("Z") ((((unsupported)).apply ((xY)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xY)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xY)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xY)) ((((unsupported)).apply ((xA)) ((xB)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xZ)) ((((unsupported)).apply ((xA)) ((xB)) ((xY)))))
                xtest_base_to_subclass_fk.write
                  [xself]
                    memory > xY
                    memory > xZ
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("Z") (((xmodels).xCASCADE)))))))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply ((xA)))))
                        xY.write ((((xself).xcreate_model)).apply ("Y"))
                        xZ.write (((unsupported)).apply (((xself).xcreate_model)) ("Z") ((((unsupported)).apply ((xY)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xY)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xY)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xY)) ((((unsupported)).apply ((xA)) ((xB)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xZ)) ((((unsupported)).apply ((xA)) ((xB)) ((xY)))))
                xtest_direct_m2m.write
                  [xself]
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply (((((xmodels).xManyToManyField)).apply ("B"))))))
                        xB.write ((((xself).xcreate_model)).apply ("B"))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply (((((xA).xa_1).xrel).xthrough)) ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) (((((xA).xa_1).xrel).xthrough)))))
                xtest_direct_m2m_self.write
                  [xself]
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply (((((xmodels).xManyToManyField)).apply ("A"))))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply (((((xA).xa_1).xrel).xthrough)))))
                xtest_intermediate_m2m_self.write
                  [xself]
                    memory > xA
                    memory > xT
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xManyToManyField)) ("A") ("T"))))))
                        xT.write (((unsupported)).apply (((xself).xcreate_model)) ("T") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))) (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xT)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xT)) ((((unsupported)).apply ((xA)))))
                xtest_intermediate_m2m.write
                  [xself]
                    memory > xB
                    memory > xA
                    memory > xT
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xManyToManyField)) ("B") ("T"))))))
                        xB.write ((((xself).xcreate_model)).apply ("B"))
                        xT.write (((unsupported)).apply (((xself).xcreate_model)) ("T") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))) (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xT)) ((((unsupported)).apply ((xA)) ((xB)))))
                xtest_intermediate_m2m_extern_fk.write
                  [xself]
                    memory > xZ
                    memory > xB
                    memory > xA
                    memory > xT
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xManyToManyField)) ("B") ("T"))))))
                        xB.write ((((xself).xcreate_model)).apply ("B"))
                        xZ.write ((((xself).xcreate_model)).apply ("Z"))
                        xT.write (((unsupported)).apply (((xself).xcreate_model)) ("T") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))) (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))) (((((xmodels).xForeignKey)).apply ("Z") (((xmodels).xCASCADE)))))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xT)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xT)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xT)) ((((unsupported)).apply ((xA)) ((xB)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xZ)) ((((unsupported)).apply ((xA)) ((xB)) ((xT)))))
                xtest_intermediate_m2m_base.write
                  [xself]
                    memory > xS
                    memory > xB
                    memory > xA
                    memory > xT
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply ((((unsupported)).apply (((xmodels).xManyToManyField)) ("B") ("T"))))))
                        xB.write ((((xself).xcreate_model)).apply ("B"))
                        xS.write ((((xself).xcreate_model)).apply ("S"))
                        xT.write (((unsupported)).apply (((xself).xcreate_model)) ("T") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("A") (((xmodels).xCASCADE)))) (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))))) ((((unsupported)).apply ((xS)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xS)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)) ((xS)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xS)) ((((unsupported)).apply ((xA)) ((xB)) ((xT)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xT)) ((((unsupported)).apply ((xA)) ((xB)) ((xS)))))
                xtest_generic_fk.write
                  [xself]
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("B") (((xmodels).xCASCADE)))) ((((xGenericForeignKey)).apply)))))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply (((((xmodels).xForeignKey)).apply ("C") (((xmodels).xCASCADE)))))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xA)))))
                xtest_abstract_base.write
                  [xself]
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") (TRUE))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply ((xA)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply)))
                xtest_nested_abstract_base.write
                  [xself]
                    memory > xC
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") (TRUE))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply ((xA)))) (TRUE))
                        xC.write (((unsupported)).apply (((xself).xcreate_model)) ("C") ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xC)) ((((unsupported)).apply)))
                xtest_proxy_base.write
                  [xself]
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write ((((xself).xcreate_model)).apply ("A"))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply ((xA)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply)))
                xtest_nested_proxy_base.write
                  [xself]
                    memory > xC
                    memory > xB
                    memory > xA
                    seq > @
                      seq
                        xA.write ((((xself).xcreate_model)).apply ("A"))
                        xB.write (((unsupported)).apply (((xself).xcreate_model)) ("B") ((((unsupported)).apply ((xA)))) (TRUE))
                        xC.write (((unsupported)).apply (((xself).xcreate_model)) ("C") ((((unsupported)).apply ((xB)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xB)) ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xB)) ((((unsupported)).apply ((xC)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xC)) ((((unsupported)).apply)))
                xtest_multiple_mixed_bases.write
                  [xself]
                    memory > xP
                    memory > xM
                    memory > xA
                    memory > xZ
                    memory > xQ
                    seq > @
                      seq
                        xA.write (((unsupported)).apply (((xself).xcreate_model)) ("A") (TRUE))
                        xM.write ((((xself).xcreate_model)).apply ("M"))
                        xP.write ((((xself).xcreate_model)).apply ("P"))
                        xQ.write (((unsupported)).apply (((xself).xcreate_model)) ("Q") ((((unsupported)).apply ((xP)))) (TRUE))
                        xZ.write (((unsupported)).apply (((xself).xcreate_model)) ("Z") ((((unsupported)).apply ((xA)) ((xM)) ((xQ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xA)) ((((unsupported)).apply ((xM)) ((xP)) ((xQ)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xM)) ((((unsupported)).apply ((xP)) ((xQ)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xP)) ((((unsupported)).apply ((xM)) ((xQ)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xQ)) ((((unsupported)).apply ((xM)) ((xP)) ((xZ)))))
                        bogusForceDataize.write ((((xself).xassertRelated)).apply ((xZ)) ((((unsupported)).apply ((xM)) ((xP)) ((xQ)))))