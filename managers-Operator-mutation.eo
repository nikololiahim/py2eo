memory > xFieldDoesNotExist
memory > xchecks
memory > xsettings
memory > xsuper
memory > xmodels
memory > xkwargs
memory > xisinstance
[] > managers
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xuse_in_migrations
        memory > xget_queryset
        memory > xcheck
        memory > x_check_field_name
        memory > x__init__
        memory > x_get_field_name
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xmodels).xManager)))
              seq
                unsupported
                xuse_in_migrations.write TRUE
                x__init__.write
                  [xself xfield_name]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                        (((unsupported)).apply (((xself).x__field_name)) ((xfield_name)))
                xcheck.write
                  [xself]
                    memory > xerrors
                    seq > @
                      (((unsupported)).apply)
                        xerrors.write ((((((xsuper)).apply).xcheck)).apply ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xerrors).xextend)).apply (((((xself).x_check_field_name)).apply)))
                        (((unsupported)).apply ((xerrors)))
                x_check_field_name.write
                  [xself]
                    memory > xfield
                    memory > xfield_name
                    seq > @
                      seq
                        xfield_name.write ((((xself).x_get_field_name)).apply)
                        (((unsupported)).apply ((xFieldDoesNotExist)))
                          xfield.write ((((((xself).xmodel).x_meta).xget_field)).apply ((xfield_name)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) (("CurrentSiteManager could not find a field named '%s'.".mod (xfield_name))) ((xself)) ("sites.E001"))))))
                        ((((xfield).xmany_to_many).not).and ((((xisinstance)).apply ((xfield)) (((xmodels).xForeignKey))).not)).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xchecks).xError)) (("CurrentSiteManager cannot use '%s.%s' as it is not a foreign key or a many-to-many field.".mod (((unsupported)).apply (((((xself).xmodel).x_meta).xobject_name)) ((xfield_name))))) ((xself)) ("sites.E002"))))))
                        (((unsupported)).apply ((((unsupported)).apply)))
                x_get_field_name.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((xself).x__field_name).not).if
                          (((unsupported)).apply ((xFieldDoesNotExist)))
                            bogusForceDataize.write ((((((xself).xmodel).x_meta).xget_field)).apply ("site"))
                            (((unsupported)).apply (((xself).x__field_name)) ("sites"))
                            (((unsupported)).apply (((xself).x__field_name)) ("site"))
                        (((unsupported)).apply (((xself).x__field_name)))
                xget_queryset.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((((((xsuper)).apply).xget_queryset)).apply).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ((((((xself).x_get_field_name)).apply).sub "__id")) (((xsettings).xSITE_ID)))))))))