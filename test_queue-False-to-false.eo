memory > xthreading
memory > xRuntimeError
memory > xBaseSimpleQueueTest
memory > xPriorityQueueTest
memory > x_TriggerThread
memory > xrandom
memory > xBaseException
memory > xsorted
memory > xweakref
memory > xe
memory > xunittest
memory > xnext
memory > xobject
memory > xkwargs
memory > x__name__
memory > xC
memory > xfalse
memory > xFailingQueueTest
memory > xlist
memory > xLifoQueueTest
memory > xValueError
memory > xCircular
memory > xrange
memory > xIndexError
memory > xBaseQueueTestMixin
memory > xException
memory > xtime
memory > xsum
memory > xi
memory > xBlockingTestMixin
memory > xQueueTest
memory > xsuper
memory > xsupport
memory > xargs
memory > xitertools
memory > xFailingQueueException
memory > xFailingQueue
memory > xdict
[] > test_queue
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_references
        memory > xbasic_queue_test
        memory > xtest_is_default
        memory > xdo_blocking_test
        memory > xtest_many_threads_nonblock
        memory > xrun_threads
        memory > xconsume
        memory > xtest_reentrancy
        memory > xqueue_join_test
        memory > xpy_queue
        memory > xtest_negative_timeout_raises_exception
        memory > xtest_queue_join
        memory > xtest_failing_queue
        memory > xqueue
        memory > xsetUp
        memory > xneed_c_queue
        memory > xc_queue
        memory > xtest_many_threads
        memory > xtest_shrinking_queue
        memory > xfailing_queue_test
        memory > xworker
        memory > xtest_order
        memory > xtest_basic
        memory > xtest_queue_task_done
        memory > xfeed
        memory > xtest_many_threads_timeout
        memory > xconsume_nonblock
        memory > xrun
        memory > xtest_nowait
        memory > x__init__
        memory > xconsume_timeout
        memory > xdo_exceptional_blocking_test
        memory > xQUEUE_SIZE
        memory > xqfull
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xpy_queue.write (((unsupported)).apply (((xsupport).ximport_fresh_module)) ("queue") ((((unsupported)).apply ("_queue"))))
            xc_queue.write (((unsupported)).apply (((xsupport).ximport_fresh_module)) ("queue") ((((unsupported)).apply ("_queue"))))
            xneed_c_queue.write ((((xunittest).xskipUnless)).apply ((xc_queue)) ("No _queue module found"))
            xQUEUE_SIZE.write 5
            xqfull.write
              [xq]
                seq > @
                  (((unsupported)).apply (((((xq).xmaxsize).greater 0).and (((((xq).xqsize)).apply).eq ((xq).xmaxsize)))))
            (((unsupported)).apply (((xthreading).xThread)))
              seq
                x__init__.write
                  [xself xfn xargs]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfn)) ((xfn)))
                        (((unsupported)).apply (((xself).xargs)) ((xargs)))
                        (((unsupported)).apply (((xself).xstartedEvent)) (((((xthreading).xEvent)).apply)))
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)).apply ((xself)))
                xrun.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xtime).xsleep)).apply (0.1))
                        bogusForceDataize.write (((((xself).xstartedEvent).xset)).apply)
                        bogusForceDataize.write ((((xself).xfn)).apply ((((unsupported)).apply (((xself).xargs)))))
            (((unsupported)).apply)
              seq
                xdo_blocking_test.write
                  [xself xblock_func xblock_args xtrigger_func xtrigger_args]
                    memory > xthread
                    seq > @
                      seq
                        xthread.write (((x_TriggerThread)).apply ((xtrigger_func)) ((xtrigger_args)))
                        bogusForceDataize.write ((((xthread).xstart)).apply)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xself).xresult)) ((((xblock_func)).apply ((((unsupported)).apply ((xblock_args)))))))
                            ((((((xthread).xstartedEvent).xis_set)).apply).not).if
                              bogusForceDataize.write ((((xself).xfail)).apply (("blocking function %r appeared not to block".mod (xblock_func))))
                            (((unsupported)).apply (((xself).xresult)))
                          bogusForceDataize.write ((((xsupport).xjoin_thread)).apply ((xthread)) (10))
                xdo_exceptional_blocking_test.write
                  [xself xblock_func xblock_args xtrigger_func xtrigger_args xexpected_exception_class]
                    memory > xthread
                    seq > @
                      seq
                        xthread.write (((x_TriggerThread)).apply ((xtrigger_func)) ((xtrigger_args)))
                        bogusForceDataize.write ((((xthread).xstart)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xexpected_exception_class)))
                            bogusForceDataize.write (((xblock_func)).apply ((((unsupported)).apply ((xblock_args)))))
                            (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xfail)).apply (("expected exception of kind %r".mod (xexpected_exception_class))))
                          seq
                            bogusForceDataize.write ((((xsupport).xjoin_thread)).apply ((xthread)) (10))
                            ((((((xthread).xstartedEvent).xis_set)).apply).not).if
                              bogusForceDataize.write ((((xself).xfail)).apply ("trigger thread ended but event never set"))
            (((unsupported)).apply ((xBlockingTestMixin)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcum)) (0))
                        (((unsupported)).apply (((xself).xcumlock)) (((((xthreading).xLock)).apply)))
                xbasic_queue_test.write
                  [xself xq]
                    memory > xfull
                    memory > xactual_order
                    memory > xlast
                    memory > xtarget_order
                    seq > @
                      seq
                        ((((xq).xqsize)).apply).if
                          (((unsupported)).apply ((((xRuntimeError)).apply ("Call this function with an empty queue"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xq).xfull)).apply)))
                        bogusForceDataize.write ((((xq).xput)).apply (111))
                        bogusForceDataize.write ((((xq).xput)).apply (333))
                        bogusForceDataize.write ((((xq).xput)).apply (222))
                        xtarget_order.write (((unsupported)).apply ((xdict)) ((((unsupported)).apply (111) (333) (222))) ((((unsupported)).apply (222) (333) (111))) ((((unsupported)).apply (111) (222) (333))))
                        xactual_order.write (((unsupported)).apply (((((xq).xget)).apply)) (((((xq).xget)).apply)) (((((xq).xget)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual_order)) ((((unsupported)).apply ((xtarget_order)) ((((xq).x__class__).x__name__)))) ("Didn't seem to queue the correct data!"))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((xQUEUE_SIZE).sub 1)))))
                          seq
                            bogusForceDataize.write ((((xq).xput)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xqsize)).apply)) ("Queue should not be empty"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xqfull)).apply ((xq))).not)) ("Queue should not be full"))
                        xlast.write (2.mul (xQUEUE_SIZE))
                        xfull.write ((3.mul 2).mul (xQUEUE_SIZE))
                        bogusForceDataize.write ((((xq).xput)).apply ((xlast)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xqfull)).apply ((xq)))) ("Queue should be full"))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xfull)).apply)))
                        (((unsupported)).apply ((((xself).xqueue).xFull)))
                          seq
                            (((unsupported)).apply (((xq).xput)) ((xfull)) (0))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Didn't appear to block with a full queue"))
                        (((unsupported)).apply ((((xself).xqueue).xFull)))
                          seq
                            (((unsupported)).apply (((xq).xput)) ((xfull)) (0.01))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Didn't appear to time-out with a full queue"))
                        bogusForceDataize.write ((((xself).xdo_blocking_test)).apply (((xq).xput)) ((((unsupported)).apply ((xfull)))) (((xq).xget)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xdo_blocking_test)).apply (((xq).xput)) ((((unsupported)).apply ((xfull)) (TRUE) (10))) (((xq).xget)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xQUEUE_SIZE)))))
                          bogusForceDataize.write ((((xq).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xq).xqsize)).apply).not)) ("Queue should be empty"))
                        (((unsupported)).apply ((((xself).xqueue).xEmpty)))
                          seq
                            (((unsupported)).apply (((xq).xget)) (0))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Didn't appear to block with an empty queue"))
                        (((unsupported)).apply ((((xself).xqueue).xEmpty)))
                          seq
                            (((unsupported)).apply (((xq).xget)) (0.01))
                            bogusForceDataize.write ((((xself).xfail)).apply ("Didn't appear to time-out with an empty queue"))
                        bogusForceDataize.write ((((xself).xdo_blocking_test)).apply (((xq).xget)) ((((unsupported)).apply)) (((xq).xput)) ((((unsupported)).apply ("empty"))))
                        bogusForceDataize.write ((((xself).xdo_blocking_test)).apply (((xq).xget)) ((((unsupported)).apply (TRUE) (10))) (((xq).xput)) ((((unsupported)).apply ("empty"))))
                xworker.write
                  [xself xq]
                    memory > xx
                    seq > @
                      while.
                        TRUE
                        [unused]
                          seq > @
                            seq
                              xx.write ((((xq).xget)).apply)
                              ((xx).less 0).if
                                seq
                                  bogusForceDataize.write ((((xq).xtask_done)).apply)
                                  (((unsupported)).apply)
                              (((unsupported)).apply (((xself).xcumlock)))
                                (((unsupported)).apply (((xself).xcum)) ((xx)))
                              bogusForceDataize.write ((((xq).xtask_done)).apply)
                xqueue_join_test.write
                  [xself xq]
                    memory > xthread
                    memory > xthreads
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcum)) (0))
                        xthreads.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (0) (1))))
                          seq
                            xthread.write (((unsupported)).apply (((xthreading).xThread)) (((xself).xworker)) ((((unsupported)).apply ((xq)))))
                            bogusForceDataize.write ((((xthread).xstart)).apply)
                            bogusForceDataize.write ((((xthreads).xappend)).apply ((xthread)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          bogusForceDataize.write ((((xq).xput)).apply ((xi)))
                        bogusForceDataize.write ((((xq).xjoin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xcum)) ((((xsum)).apply ((((xrange)).apply (100))))) ("q.join() did not block until all tasks were done"))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (0) (1))))
                          bogusForceDataize.write ((((xq).xput)).apply ((1.neg)))
                        bogusForceDataize.write ((((xq).xjoin)).apply)
                        (((unsupported)).apply ((xthread)) ((xthreads)))
                          bogusForceDataize.write ((((xthread).xjoin)).apply)
                xtest_queue_task_done.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((xself).xtype2test)).apply)
                        (((unsupported)).apply ((xValueError)))
                          bogusForceDataize.write ((((xq).xtask_done)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("Did not detect task count going negative"))
                xtest_queue_join.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((xself).xtype2test)).apply)
                        bogusForceDataize.write ((((xself).xqueue_join_test)).apply ((xq)))
                        bogusForceDataize.write ((((xself).xqueue_join_test)).apply ((xq)))
                        (((unsupported)).apply ((xValueError)))
                          bogusForceDataize.write ((((xq).xtask_done)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("Did not detect task count going negative"))
                xtest_basic.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((xself).xtype2test)).apply ((xQUEUE_SIZE)))
                        bogusForceDataize.write ((((xself).xbasic_queue_test)).apply ((xq)))
                        bogusForceDataize.write ((((xself).xbasic_queue_test)).apply ((xq)))
                xtest_negative_timeout_raises_exception.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((xself).xtype2test)).apply ((xQUEUE_SIZE)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xq).xput)) (1) ((1.neg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xq).xget)) (1) ((1.neg)))
                xtest_nowait.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((xself).xtype2test)).apply ((xQUEUE_SIZE)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xQUEUE_SIZE)))))
                          bogusForceDataize.write ((((xq).xput_nowait)).apply (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xself).xqueue).xFull)))))
                          bogusForceDataize.write ((((xq).xput_nowait)).apply (1))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xQUEUE_SIZE)))))
                          bogusForceDataize.write ((((xq).xget_nowait)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xself).xqueue).xEmpty)))))
                          bogusForceDataize.write ((((xq).xget_nowait)).apply)
                xtest_shrinking_queue.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((xself).xtype2test)).apply (3))
                        bogusForceDataize.write ((((xq).xput)).apply (1))
                        bogusForceDataize.write ((((xq).xput)).apply (2))
                        bogusForceDataize.write ((((xq).xput)).apply (3))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xself).xqueue).xFull)))))
                          bogusForceDataize.write ((((xq).xput_nowait)).apply (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (3))
                        (((unsupported)).apply (((xq).xmaxsize)) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xself).xqueue).xFull)))))
                          bogusForceDataize.write ((((xq).xput_nowait)).apply (4))
            (((unsupported)).apply ((xBaseQueueTestMixin)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply (((xself).xtype2test)) ((((xself).xqueue).xQueue)))
                      bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
            (((unsupported)).apply ((xQueueTest)) (((xunittest).xTestCase)))
              xqueue.write (xpy_queue)
            (((unsupported)).apply ((xQueueTest)) (((xunittest).xTestCase)) ((xneed_c_queue)))
              xqueue.write (xc_queue)
            (((unsupported)).apply ((xBaseQueueTestMixin)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply (((xself).xtype2test)) ((((xself).xqueue).xLifoQueue)))
                      bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
            (((unsupported)).apply ((xLifoQueueTest)) (((xunittest).xTestCase)))
              xqueue.write (xpy_queue)
            (((unsupported)).apply ((xLifoQueueTest)) (((xunittest).xTestCase)) ((xneed_c_queue)))
              xqueue.write (xc_queue)
            (((unsupported)).apply ((xBaseQueueTestMixin)))
              xsetUp.write
                [xself]
                  seq > @
                    seq
                      (((unsupported)).apply (((xself).xtype2test)) ((((xself).xqueue).xPriorityQueue)))
                      bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
            (((unsupported)).apply ((xPriorityQueueTest)) (((xunittest).xTestCase)))
              xqueue.write (xpy_queue)
            (((unsupported)).apply ((xPriorityQueueTest)) (((xunittest).xTestCase)) ((xneed_c_queue)))
              xqueue.write (xc_queue)
            (((unsupported)).apply ((xException)))
            (((unsupported)).apply ((xBlockingTestMixin)))
              seq
                xsetUp.write
                  [xself]
                    memory > xQueue
                    memory > x__init__
                    memory > x_put
                    memory > x_get
                    seq > @
                      seq
                        xQueue.write (((xself).xqueue).xQueue)
                        (((unsupported)).apply ((xQueue)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xfail_next_put)) ((xfalse)))
                                    (((unsupported)).apply (((xself).xfail_next_get)) ((xfalse)))
                                    bogusForceDataize.write ((((xQueue).x__init__)).apply ((xself)) ((((unsupported)).apply ((xargs)))))
                            x_put.write
                              [xself xitem]
                                seq > @
                                  seq
                                    ((xself).xfail_next_put).if
                                      seq
                                        (((unsupported)).apply (((xself).xfail_next_put)) ((xfalse)))
                                        (((unsupported)).apply ((((xFailingQueueException)).apply ("You Lose"))))
                                    (((unsupported)).apply (((((xQueue).x_put)).apply ((xself)) ((xitem)))))
                            x_get.write
                              [xself]
                                seq > @
                                  seq
                                    ((xself).xfail_next_get).if
                                      seq
                                        (((unsupported)).apply (((xself).xfail_next_get)) ((xfalse)))
                                        (((unsupported)).apply ((((xFailingQueueException)).apply ("You Lose"))))
                                    (((unsupported)).apply (((((xQueue).x_get)).apply ((xself)))))
                        (((unsupported)).apply (((xself).xFailingQueue)) ((xFailingQueue)))
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                xfailing_queue_test.write
                  [xself xq]
                    seq > @
                      seq
                        ((((xq).xqsize)).apply).if
                          (((unsupported)).apply ((((xRuntimeError)).apply ("Call this function with an empty queue"))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((xQUEUE_SIZE).sub 1)))))
                          bogusForceDataize.write ((((xq).xput)).apply ((xi)))
                        (((unsupported)).apply (((xq).xfail_next_put)) (TRUE))
                        (((unsupported)).apply ((xFailingQueueException)))
                          seq
                            (((unsupported)).apply (((xq).xput)) ("oops") (0))
                            bogusForceDataize.write ((((xself).xfail)).apply ("The queue didn't fail when it should have"))
                        (((unsupported)).apply (((xq).xfail_next_put)) (TRUE))
                        (((unsupported)).apply ((xFailingQueueException)))
                          seq
                            (((unsupported)).apply (((xq).xput)) ("oops") (0.1))
                            bogusForceDataize.write ((((xself).xfail)).apply ("The queue didn't fail when it should have"))
                        bogusForceDataize.write ((((xq).xput)).apply ("last"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xqfull)).apply ((xq)))) ("Queue should be full"))
                        (((unsupported)).apply (((xq).xfail_next_put)) (TRUE))
                        (((unsupported)).apply ((xFailingQueueException)))
                          seq
                            bogusForceDataize.write ((((xself).xdo_blocking_test)).apply (((xq).xput)) ((((unsupported)).apply ("full"))) (((xq).xget)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("The queue didn't fail when it should have"))
                        bogusForceDataize.write ((((xq).xput)).apply ("last"))
                        (((unsupported)).apply (((xq).xfail_next_put)) (TRUE))
                        (((unsupported)).apply ((xFailingQueueException)))
                          seq
                            bogusForceDataize.write ((((xself).xdo_exceptional_blocking_test)).apply (((xq).xput)) ((((unsupported)).apply ("full") (TRUE) (10))) (((xq).xget)) ((((unsupported)).apply)) ((xFailingQueueException)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("The queue didn't fail when it should have"))
                        bogusForceDataize.write ((((xq).xput)).apply ("last"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xqfull)).apply ((xq)))) ("Queue should be full"))
                        bogusForceDataize.write ((((xq).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xqfull)).apply ((xq))).not)) ("Queue should not be full"))
                        bogusForceDataize.write ((((xq).xput)).apply ("last"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xqfull)).apply ((xq)))) ("Queue should be full"))
                        bogusForceDataize.write ((((xself).xdo_blocking_test)).apply (((xq).xput)) ((((unsupported)).apply ("full"))) (((xq).xget)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xQUEUE_SIZE)))))
                          bogusForceDataize.write ((((xq).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xq).xqsize)).apply).not)) ("Queue should be empty"))
                        bogusForceDataize.write ((((xq).xput)).apply ("first"))
                        (((unsupported)).apply (((xq).xfail_next_get)) (TRUE))
                        (((unsupported)).apply ((xFailingQueueException)))
                          seq
                            bogusForceDataize.write ((((xq).xget)).apply)
                            bogusForceDataize.write ((((xself).xfail)).apply ("The queue didn't fail when it should have"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xqsize)).apply)) ("Queue should not be empty"))
                        (((unsupported)).apply (((xq).xfail_next_get)) (TRUE))
                        (((unsupported)).apply ((xFailingQueueException)))
                          seq
                            (((unsupported)).apply (((xq).xget)) (0.1))
                            bogusForceDataize.write ((((xself).xfail)).apply ("The queue didn't fail when it should have"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xqsize)).apply)) ("Queue should not be empty"))
                        bogusForceDataize.write ((((xq).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xq).xqsize)).apply).not)) ("Queue should be empty"))
                        (((unsupported)).apply (((xq).xfail_next_get)) (TRUE))
                        (((unsupported)).apply ((xFailingQueueException)))
                          seq
                            bogusForceDataize.write ((((xself).xdo_exceptional_blocking_test)).apply (((xq).xget)) ((((unsupported)).apply)) (((xq).xput)) ((((unsupported)).apply ("empty"))) ((xFailingQueueException)))
                            bogusForceDataize.write ((((xself).xfail)).apply ("The queue didn't fail when it should have"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xqsize)).apply)) ("Queue should not be empty"))
                        bogusForceDataize.write ((((xq).xget)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xq).xqsize)).apply).not)) ("Queue should be empty"))
                xtest_failing_queue.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((xself).xFailingQueue)).apply ((xQUEUE_SIZE)))
                        bogusForceDataize.write ((((xself).xfailing_queue_test)).apply ((xq)))
                        bogusForceDataize.write ((((xself).xfailing_queue_test)).apply ((xq)))
            (((unsupported)).apply ((xFailingQueueTest)) (((xunittest).xTestCase)))
              xqueue.write (xpy_queue)
            (((unsupported)).apply ((xFailingQueueTest)) (((xunittest).xTestCase)) ((xneed_c_queue)))
              xqueue.write (xc_queue)
            (((unsupported)).apply)
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xq)) (((((xself).xtype2test)).apply)))
                xfeed.write
                  [xself xq xseq xrnd]
                    memory > xval
                    seq > @
                      while.
                        TRUE
                        [unused]
                          seq > @
                            seq
                              (((unsupported)).apply ((xIndexError)))
                                xval.write ((((xseq).xpop)).apply)
                                (((unsupported)).apply)
                              bogusForceDataize.write ((((xq).xput)).apply ((xval)))
                              (((((xrnd).xrandom)).apply).greater 0.5).if
                                bogusForceDataize.write ((((xtime).xsleep)).apply ((((((xrnd).xrandom)).apply).mul (((unsupported)).apply))))
                xconsume.write
                  [xself xq xresults xsentinel]
                    memory > xval
                    seq > @
                      while.
                        TRUE
                        [unused]
                          seq > @
                            seq
                              xval.write ((((xq).xget)).apply)
                              ((xval).eq (xsentinel)).if
                                (((unsupported)).apply)
                              bogusForceDataize.write ((((xresults).xappend)).apply ((xval)))
                xconsume_nonblock.write
                  [xself xq xresults xsentinel]
                    memory > xval
                    seq > @
                      while.
                        TRUE
                        [unused]
                          seq > @
                            seq
                              while.
                                TRUE
                                [unused]
                                  seq > @
                                    (((unsupported)).apply ((((xself).xqueue).xEmpty)))
                                      xval.write (((unsupported)).apply (((xq).xget)) ((xfalse)))
                                      bogusForceDataize.write ((((xtime).xsleep)).apply ((((unsupported)).apply)))
                                      (((unsupported)).apply)
                              ((xval).eq (xsentinel)).if
                                (((unsupported)).apply)
                              bogusForceDataize.write ((((xresults).xappend)).apply ((xval)))
                xconsume_timeout.write
                  [xself xq xresults xsentinel]
                    memory > xval
                    seq > @
                      while.
                        TRUE
                        [unused]
                          seq > @
                            seq
                              while.
                                TRUE
                                [unused]
                                  seq > @
                                    (((unsupported)).apply ((((xself).xqueue).xEmpty)))
                                      xval.write (((unsupported)).apply (((xq).xget)) ((((unsupported)).apply)))
                                      (((unsupported)).apply)
                              ((xval).eq (xsentinel)).if
                                (((unsupported)).apply)
                              bogusForceDataize.write ((((xresults).xappend)).apply ((xval)))
                xrun_threads.write
                  [xself xn_feeders xn_consumers xq xinputs xfeed_func xconsume_func]
                    memory > xseq
                    memory > xfeeders
                    memory > xexceptions
                    memory > xsentinel
                    memory > xlog_exceptions
                    memory > xrnd
                    memory > xconsumers
                    memory > xresults
                    seq > @
                      seq
                        xresults.write (((unsupported)).apply)
                        xsentinel.write "None: is there a None literal in the EO language?"
                        xseq.write ((xinputs).add ((((unsupported)).apply ((xsentinel))).mul (xn_consumers)))
                        bogusForceDataize.write ((((xseq).xreverse)).apply)
                        xrnd.write ((((xrandom).xRandom)).apply (42))
                        xexceptions.write (((unsupported)).apply)
                        xlog_exceptions.write
                          [xf]
                            memory > xwrapper
                            seq > @
                              seq
                                xwrapper.write
                                  []
                                    seq > @
                                      (((unsupported)).apply)
                                        (((unsupported)).apply ((xBaseException)))
                                          bogusForceDataize.write (((xf)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                          bogusForceDataize.write ((((xexceptions).xappend)).apply ((xe)))
                                (((unsupported)).apply ((xwrapper)))
                        xfeeders.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((((xlog_exceptions)).apply ((xfeed_func)))) ((((unsupported)).apply ((xq)) ((xseq)) ((xrnd)))))) ((xi)) ((((xrange)).apply ((xn_feeders)))))
                        xconsumers.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((((xlog_exceptions)).apply ((xconsume_func)))) ((((unsupported)).apply ((xq)) ((xresults)) ((xsentinel)))))) ((xi)) ((((xrange)).apply ((xn_consumers)))))
                        (((unsupported)).apply (((((xsupport).xstart_threads)).apply (((xfeeders).add (xconsumers))))))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((xexceptions)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (0))
                        (((unsupported)).apply ((xresults)))
                xtest_basic.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((xself).xq)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (0))
                        bogusForceDataize.write ((((xq).xput)).apply (1))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (1))
                        bogusForceDataize.write ((((xq).xput)).apply (2))
                        bogusForceDataize.write ((((xq).xput_nowait)).apply (3))
                        bogusForceDataize.write ((((xq).xput)).apply (4))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xget)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xget_nowait)).apply)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) ((xfalse)))) (3))
                        bogusForceDataize.write ((((xself).xassertfalse)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xq).xget)) (0.1))) (4))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xself).xqueue).xEmpty)))))
                          (((unsupported)).apply (((xq).xget)) ((xfalse)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xself).xqueue).xEmpty)))))
                          (((unsupported)).apply (((xq).xget)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xself).xqueue).xEmpty)))))
                          bogusForceDataize.write ((((xq).xget_nowait)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xq).xempty)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xq).xqsize)).apply)) (0))
                xtest_negative_timeout_raises_exception.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((xself).xq)
                        bogusForceDataize.write ((((xq).xput)).apply (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xq).xget)) ((1.neg)))
                xtest_order.write
                  [xself]
                    memory > xinputs
                    memory > xq
                    memory > xresults
                    seq > @
                      seq
                        xq.write ((xself).xq)
                        xinputs.write (((xlist)).apply ((((xrange)).apply (100))))
                        xresults.write ((((xself).xrun_threads)).apply (1) (1) ((xq)) ((xinputs)) (((xself).xfeed)) (((xself).xconsume)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresults)) ((xinputs)))
                xtest_many_threads.write
                  [xself]
                    memory > xN
                    memory > xinputs
                    memory > xq
                    memory > xresults
                    seq > @
                      seq
                        xN.write 50
                        xq.write ((xself).xq)
                        xinputs.write (((xlist)).apply ((((xrange)).apply (10000))))
                        xresults.write ((((xself).xrun_threads)).apply ((xN)) ((xN)) ((xq)) ((xinputs)) (((xself).xfeed)) (((xself).xconsume)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((xresults)))) ((xinputs)))
                xtest_many_threads_nonblock.write
                  [xself]
                    memory > xN
                    memory > xinputs
                    memory > xq
                    memory > xresults
                    seq > @
                      seq
                        xN.write 50
                        xq.write ((xself).xq)
                        xinputs.write (((xlist)).apply ((((xrange)).apply (10000))))
                        xresults.write ((((xself).xrun_threads)).apply ((xN)) ((xN)) ((xq)) ((xinputs)) (((xself).xfeed)) (((xself).xconsume_nonblock)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((xresults)))) ((xinputs)))
                xtest_many_threads_timeout.write
                  [xself]
                    memory > xN
                    memory > xinputs
                    memory > xq
                    memory > xresults
                    seq > @
                      seq
                        xN.write 50
                        xq.write ((xself).xq)
                        xinputs.write (((xlist)).apply ((((xrange)).apply (1000))))
                        xresults.write ((((xself).xrun_threads)).apply ((xN)) ((xN)) ((xq)) ((xinputs)) (((xself).xfeed)) (((xself).xconsume_timeout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsorted)).apply ((xresults)))) ((xinputs)))
                xtest_references.write
                  [xself]
                    memory > xN
                    memory > xwr
                    memory > xq
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xN.write 20
                        xq.write ((xself).xq)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN)))))
                          bogusForceDataize.write ((((xq).xput)).apply ((((xC)).apply)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xN)))))
                          seq
                            xwr.write ((((xweakref).xref)).apply (((((xq).xget)).apply)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xwr)).apply)))
            (((unsupported)).apply ((xBaseSimpleQueueTest)) (((xunittest).xTestCase)))
              seq
                xqueue.write (xpy_queue)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtype2test)) ((((xself).xqueue).x_PySimpleQueue)))
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
            (((unsupported)).apply ((xBaseSimpleQueueTest)) (((xunittest).xTestCase)) ((xneed_c_queue)))
              seq
                xqueue.write (xc_queue)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtype2test)) ((((xself).xqueue).xSimpleQueue)))
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                xtest_is_default.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xself).xtype2test)) ((((xself).xqueue).xSimpleQueue)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xself).xtype2test)) ((((xself).xqueue).xSimpleQueue)))
                xtest_reentrancy.write
                  [xself]
                    memory > xo
                    memory > xq
                    memory > x__init__
                    memory > xN
                    memory > xgen
                    memory > x__del__
                    memory > xresults
                    seq > @
                      seq
                        xq.write ((xself).xq)
                        xgen.write ((((xitertools).xcount)).apply)
                        xN.write 10000
                        xresults.write (((unsupported)).apply)
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xcircular)) ((xself)))
                            x__del__.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write ((((xq).xput)).apply ((((xnext)).apply ((xgen)))))
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xo.write (((xCircular)).apply)
                                bogusForceDataize.write ((((xq).xput)).apply ((((xnext)).apply ((xgen)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xo)))))
                                bogusForceDataize.write ((((xresults).xappend)).apply (((((xq).xget)).apply)))
                                ((((unsupported)).apply ((xresults)) ((1.neg))).geq (xN)).if
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresults)) ((((xlist)).apply ((((xrange)).apply (((xN).add 1)))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)