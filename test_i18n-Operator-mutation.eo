memory > xreverse
memory > xlocale_dir
memory > xTestCase
memory > xBy
memory > xpath
memory > xcode
memory > xRequestFactory
memory > xoverride_settings
memory > xlang_code
memory > xSimpleTestCase
memory > xget_formats
memory > xValueError
memory > xoverride
memory > xgettext
memory > xsettings
memory > xJavaScriptCatalog
memory > xSeleniumTestCase
memory > x__file__
memory > xname
memory > xjson
memory > xget_language
[] > test_i18n
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_lang_from_translated_i18n_pattern
        memory > xtest_i18n_language_non_english_fallback
        memory > xtest_jsoni18n_with_missing_en_files
        memory > xtest_setlang_default_redirect
        memory > xtest_setlang_http_next
        memory > xtest_jsi18n_with_missing_en_files
        memory > xtest_escaping
        memory > xtest_multiple_catalogs
        memory > xtest_setlang
        memory > xtest_jsi18n
        memory > xtest_i18n_with_locale_paths
        memory > xtest_jsoni18n
        memory > xtest_i18n_language_english_default
        memory > xtest_setlang_performs_redirect_for_ajax_if_explicitly_requested
        memory > x_get_inactive_language_code
        memory > xtest_i18n_english_variant
        memory > xtest_setlang_redirect_to_referer
        memory > xtest_setlang_decodes_http_referer_url
        memory > xtest_setlang_doesnt_perform_a_redirect_to_referer_for_ajax
        memory > xtest_setlang_unsafe_next
        memory > xtest_i18n_fallback_language_plural
        memory > xtest_setlang_cookie
        memory > xtest_i18n_different_non_english_languages
        memory > xtest_setlang_unsafe_next_for_ajax
        memory > xtest_i18n_language_non_english_default
        memory > xtest_jsi18n_USE_I18N_False
        memory > xtest_setlang_reversal
        memory > xtest_setlang_doesnt_perform_a_default_redirect_for_ajax
        memory > xtest_javascript_gettext
        memory > xtest_non_BMP_char
        memory > xtest_non_english_default_english_userpref
        memory > xtest_jsi18n_fallback_language
        memory > xtest_get_formats
        memory > xavailable_apps
        memory > xtest_i18n_unknown_package_error
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("view_tests.urls"))))
              seq
                unsupported
                x_get_inactive_language_code.write
                  [xself]
                    memory > xcurrent_language
                    seq > @
                      seq
                        unsupported
                        xcurrent_language.write (((xget_language)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcode)) ((((unsupported)).apply ((xcode)) ((xname)))) (((xsettings).xLANGUAGES)) (((xcode).neq (xcurrent_language))))) (0))))
                xtest_setlang.write
                  [xself]
                    memory > xpost_data
                    memory > xresponse
                    memory > xlang_code
                    memory > xlanguage_cookie
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xpost_data.write (((unsupported)).apply ("language") ((xlang_code)) ("next") ("/"))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((xpost_data)) ("/i_should_not_be_used/"))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ("/"))
                        xlanguage_cookie.write (((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xlanguage_cookie).xvalue)) ((xlang_code)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("domain"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("path"))) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("max-age"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("httponly"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("samesite"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("secure"))) (""))
                xtest_setlang_unsafe_next.write
                  [xself]
                    memory > xpost_data
                    memory > xresponse
                    memory > xlang_code
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xpost_data.write (((unsupported)).apply ("language") ((xlang_code)) ("next") ("//unsafe/redirection/"))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((xpost_data)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xurl)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                xtest_setlang_http_next.write
                  [xself]
                    memory > xpost_data
                    memory > xresponse
                    memory > xnon_https_next_url
                    memory > xlang_code
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xnon_https_next_url.write "http://testserver/redirection/"
                        xpost_data.write (((unsupported)).apply ("language") ((xlang_code)) ("next") ((xnon_https_next_url)))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((xpost_data)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xurl)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") (TRUE) ((xnon_https_next_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xurl)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                xtest_setlang_redirect_to_referer.write
                  [xself]
                    memory > xpost_data
                    memory > xresponse
                    memory > xlang_code
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xpost_data.write (((unsupported)).apply ("language") ((xlang_code)))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((xpost_data)) ("/i18n/"))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ("/i18n/") (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                xtest_setlang_default_redirect.write
                  [xself]
                    memory > xpost_data
                    memory > xresponse
                    memory > xlang_code
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xpost_data.write (((unsupported)).apply ("language") ((xlang_code)))
                        xresponse.write (((((xself).xclient).xpost)).apply ("/i18n/setlang/") ((xpost_data)))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                xtest_setlang_performs_redirect_for_ajax_if_explicitly_requested.write
                  [xself]
                    memory > xpost_data
                    memory > xresponse
                    memory > xlang_code
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xpost_data.write (((unsupported)).apply ("language") ((xlang_code)) ("next") ("/"))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((xpost_data)) ("application/json"))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                xtest_setlang_doesnt_perform_a_redirect_to_referer_for_ajax.write
                  [xself]
                    memory > xheaders
                    memory > xpost_data
                    memory > xresponse
                    memory > xlang_code
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xpost_data.write (((unsupported)).apply ("language") ((xlang_code)))
                        xheaders.write (((unsupported)).apply ("HTTP_REFERER") ("/") ("HTTP_ACCEPT") ("application/json"))
                        xresponse.write (((((xself).xclient).xpost)).apply ("/i18n/setlang/") ((xpost_data)) ((((unsupported)).apply ((xheaders)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (204))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                xtest_setlang_doesnt_perform_a_default_redirect_for_ajax.write
                  [xself]
                    memory > xpost_data
                    memory > xresponse
                    memory > xlang_code
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xpost_data.write (((unsupported)).apply ("language") ((xlang_code)))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((xpost_data)) ("application/json"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (204))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                xtest_setlang_unsafe_next_for_ajax.write
                  [xself]
                    memory > xpost_data
                    memory > xresponse
                    memory > xlang_code
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xpost_data.write (((unsupported)).apply ("language") ((xlang_code)) ("next") ("//unsafe/redirection/"))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((xpost_data)) ("application/json"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xurl)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                xtest_setlang_reversal.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xreverse)).apply ("set_language"))) ("/i18n/setlang/"))
                xtest_setlang_cookie.write
                  [xself]
                    memory > xpost_data
                    memory > xresponse
                    memory > xtest_settings
                    memory > xlanguage_cookie
                    seq > @
                      seq
                        xtest_settings.write (((unsupported)).apply ("MIDDLEWARE") ((((unsupported)).apply ("django.middleware.common.CommonMiddleware"))) ("LANGUAGE_COOKIE_NAME") ("mylanguage") ("LANGUAGE_COOKIE_AGE") (((3600.mul 7).mul 2)) ("LANGUAGE_COOKIE_DOMAIN") (".example.com") ("LANGUAGE_COOKIE_PATH") ("/test/") ("LANGUAGE_COOKIE_HTTPONLY") (TRUE) ("LANGUAGE_COOKIE_SAMESITE") ("Strict") ("LANGUAGE_COOKIE_SECURE") (TRUE))
                        (((unsupported)).apply (((((xself).xsettings)).apply ((((unsupported)).apply ((xtest_settings)))))))
                          seq
                            xpost_data.write (((unsupported)).apply ("language") ("pl") ("next") ("/views/"))
                            xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((xpost_data)))
                            xlanguage_cookie.write (((((xresponse).xcookies).xget)).apply ("mylanguage"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xlanguage_cookie).xvalue)) ("pl"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("domain"))) (".example.com"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("path"))) ("/test/"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("max-age"))) (((3600.mul 7).mul 2)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("httponly"))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("samesite"))) ("Strict"))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xlanguage_cookie)) ("secure"))) (TRUE))
                xtest_setlang_decodes_http_referer_url.write
                  [xself]
                    memory > xresponse
                    memory > xlang_code
                    memory > xencoded_url
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xreverse)) ("with_parameter") ((((unsupported)).apply ("parameter") ("x"))))) ("/test-setlang/x/"))
                        xlang_code.write ((((xself).x_get_inactive_language_code)).apply)
                        xencoded_url.write "/test-setlang/%C3%A4/?foo=bar&baz=alpha%26omega"
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((((unsupported)).apply ("language") ((xlang_code)))) ((xencoded_url)))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ((xencoded_url)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ((xlang_code)))
                xtest_lang_from_translated_i18n_pattern.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((((unsupported)).apply ("language") ("nl"))) (TRUE) ("/en/translated/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((((xself).xclient).xcookies)) (((xsettings).xLANGUAGE_COOKIE_NAME))).xvalue)) ("nl"))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ("/nl/vertaald/"))
                        xresponse.write (((unsupported)).apply ((((xself).xclient).xpost)) ("/i18n/setlang/") ((((unsupported)).apply ("language") ("en"))) (TRUE) ("/nl/vertaald/"))
                        bogusForceDataize.write ((((xself).xassertRedirects)).apply ((xresponse)) ("/en/translated/"))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("view_tests.urls"))))
              seq
                unsupported
                xtest_get_formats.write
                  [xself]
                    memory > xformats
                    seq > @
                      (((unsupported)).apply)
                        xformats.write (((xget_formats)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xformats)) ("FIRST_DAY_OF_WEEK"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xformats)) ("DECIMAL_SEPARATOR"))) (","))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xformats)) ("TIME_INPUT_FORMATS"))) ((((unsupported)).apply ("%H:%M:%S") ("%H:%M:%S.%f") ("%H:%M"))))
                xtest_jsi18n.write
                  [xself]
                    memory > xtrans_txt
                    memory > xresponse
                    memory > xcatalog
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xlang_code)) ((((unsupported)).apply ("es") ("fr") ("ru"))))
                          (((unsupported)).apply ((((xoverride)).apply ((xlang_code)))))
                            seq
                              xcatalog.write ((((xgettext).xtranslation)).apply ("djangojs") ((xlocale_dir)) ((((unsupported)).apply ((xlang_code)))))
                              xtrans_txt.write ((((xcatalog).xgettext)).apply ("this is to be translated"))
                              xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresponse).xheaders)) ("Content-Type"))) ("text/javascript; charset=\"utf-8\""))
                              bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) (((((xjson).xdumps)).apply ((xtrans_txt)))) (1))
                              ((xlang_code).eq "fr").if
                                bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ((((unsupported)).apply)) (1))
                xtest_jsi18n_USE_I18N_False.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("django.pluralidx = function(count) { return (count == 1) ? 0 : 1; };"))
                        bogusForceDataize.write ((((xself).xassertNotContains)).apply ((xresponse)) ("var newcatalog ="))
                xtest_jsoni18n.write
                  [xself]
                    memory > xresponse
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xoverride)).apply ("de"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsoni18n/"))
                            xdata.write ((((xjson).xloads)).apply ((((((xresponse).xcontent).xdecode)).apply)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("catalog") ((xdata)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("formats") ((xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ("formats"))) ("TIME_INPUT_FORMATS"))) ((((unsupported)).apply ("%H:%M:%S") ("%H:%M:%S.%f") ("%H:%M"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ("formats"))) ("FIRST_DAY_OF_WEEK"))) (1))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("plural") ((xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xdata)) ("catalog"))) ("month namex04May"))) ("Mai"))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("DATETIME_FORMAT") ((((unsupported)).apply ((xdata)) ("formats"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ("plural"))) ("(n != 1)"))
                xtest_jsi18n_with_missing_en_files.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("es"))) ((((xoverride)).apply ("en-us"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                            bogusForceDataize.write ((((xself).xassertNotContains)).apply ((xresponse)) ("esto tiene que ser traducido"))
                xtest_jsoni18n_with_missing_en_files.write
                  [xself]
                    memory > xresponse
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("es"))) ((((xoverride)).apply ("en-us"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsoni18n/"))
                            xdata.write ((((xjson).xloads)).apply ((((((xresponse).xcontent).xdecode)).apply)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("catalog") ((xdata)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("formats") ((xdata)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("plural") ((xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdata)) ("catalog"))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("DATETIME_FORMAT") ((((unsupported)).apply ((xdata)) ("formats"))))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply ((xdata)) ("plural"))))
                xtest_jsi18n_fallback_language.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("fr"))) ((((xoverride)).apply ("fi"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("il faut le traduire"))
                            bogusForceDataize.write ((((xself).xassertNotContains)).apply ((xresponse)) ("Untranslated string"))
                xtest_i18n_fallback_language_plural.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("pt"))) ((((xoverride)).apply ("ru"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("catalog"))) ("{count} plural3"))) ((((unsupported)).apply ("{count} plural3 p3") ("{count} plural3 p3s") ("{count} plural3 p3t"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("catalog"))) ("{count} plural2"))) ((((unsupported)).apply ("{count} plural2") ("{count} plural2s") (""))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("ru"))) ((((xoverride)).apply ("pt"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("catalog"))) ("{count} plural3"))) ((((unsupported)).apply ("{count} plural3") ("{count} plural3s"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply (((xresponse).xcontext)) ("catalog"))) ("{count} plural2"))) ((((unsupported)).apply ("{count} plural2") ("{count} plural2s"))))
                xtest_i18n_english_variant.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply ((((xoverride)).apply ("en-gb"))))
                        seq
                          xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("\"this color is to be translated\": \"this colour is to be translated\"") ((((unsupported)).apply (((xresponse).xcontext)) ("catalog_str"))))
                xtest_i18n_language_non_english_default.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("fr"))) ((((xoverride)).apply ("en-us"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                            bogusForceDataize.write ((((xself).xassertNotContains)).apply ((xresponse)) ("Choisir une heure"))
                xtest_non_english_default_english_userpref.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("fr"))) ((((xoverride)).apply ("en-us"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n_english_translation/"))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("this app0 string is to be translated"))
                xtest_i18n_language_non_english_fallback.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("fr"))) ((((xoverride)).apply ("none"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("Choisir une heure"))
                xtest_escaping.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n_admin/?language=de"))
                        bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ((((unsupported)).apply)))
                xtest_non_BMP_char.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("en-us"))) ((((xoverride)).apply ("fr"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/app5/"))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("emoji"))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ((((unsupported)).apply)))
                xtest_i18n_language_english_default.write
                  [xself]
                    memory > xapp2_trans_string
                    memory > xapp1_trans_string
                    memory > xresponse
                    memory > xbase_trans_string
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xbase_trans_string.write (((unsupported)).apply)
                        xapp1_trans_string.write ((xbase_trans_string).sub "app1")
                        xapp2_trans_string.write ((xbase_trans_string).sub "app2")
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("en-us"))) ((((xoverride)).apply ("fr"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n_multi_packages1/"))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ((xapp1_trans_string)))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ((xapp2_trans_string)))
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/app1/"))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ((xapp1_trans_string)))
                            bogusForceDataize.write ((((xself).xassertNotContains)).apply ((xresponse)) ((xapp2_trans_string)))
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/app2/"))
                            bogusForceDataize.write ((((xself).xassertNotContains)).apply ((xresponse)) ((xapp1_trans_string)))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ((xapp2_trans_string)))
                xtest_i18n_different_non_english_languages.write
                  [xself]
                    memory > xresponse
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("fr"))) ((((xoverride)).apply ("es-ar"))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n_multi_packages2/"))
                            bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("este texto de app3 debe ser traducido"))
                xtest_i18n_with_locale_paths.write
                  [xself]
                    memory > xresponse
                    memory > xextended_locale_paths
                    seq > @
                      seq
                        xextended_locale_paths.write (((xsettings).xLOCALE_PATHS).sub (((unsupported)).apply (((((xpath).xjoin)).apply (((((xpath).xdirname)).apply (((((xpath).xdirname)).apply (((((xpath).xabspath)).apply ((x__file__)))))))) ("app3") ("locale")))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("es-ar") ((xextended_locale_paths)))))
                          (((unsupported)).apply ((((xoverride)).apply ("es-ar"))))
                            seq
                              xresponse.write (((((xself).xclient).xget)).apply ("/jsi18n/"))
                              bogusForceDataize.write ((((xself).xassertContains)).apply ((xresponse)) ("este texto de app3 debe ser traducido"))
                xtest_i18n_unknown_package_error.write
                  [xself]
                    memory > xrequest
                    memory > xmsg
                    memory > xview
                    seq > @
                      seq
                        xview.write ((((xJavaScriptCatalog).xas_view)).apply)
                        xrequest.write ((((((xRequestFactory)).apply).xget)).apply ("/"))
                        xmsg.write "Invalid package(s) provided to JavaScriptCatalog: unknown_package"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xview)) ((xrequest)) ("unknown_package"))
                        (((unsupported)).apply ((xmsg)) (",unknown_package2"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xview)) ((xrequest)) ("unknown_package-unknown_package2"))
            (((unsupported)).apply ((xSeleniumTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("view_tests.urls"))))
              seq
                xavailable_apps.write (((unsupported)).apply ("django.contrib.admin") ("django.contrib.auth") ("django.contrib.contenttypes") ("view_tests"))
                xtest_javascript_gettext.write
                  [xself]
                    memory > xelem
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xselenium).xget)).apply ((((xself).xlive_server_url).sub "/jsi18n_template/")))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("gettext"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("Entfernen"))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("ngettext_sing"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("1 Element"))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("ngettext_plur"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("455 Elemente"))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("ngettext_onnonplural"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("Bild"))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("pgettext"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("Kann"))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("npgettext_sing"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("1 Resultat"))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("npgettext_plur"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("455 Resultate"))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("formats"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("DATE_INPUT_FORMATS is an object; DECIMAL_SEPARATOR is a string; FIRST_DAY_OF_WEEK is a number;"))
                xtest_multiple_catalogs.write
                  [xself]
                    memory > xelem
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xselenium).xget)).apply ((((xself).xlive_server_url).sub "/jsi18n_multi_catalogs/")))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("app1string"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("il faut traduire cette chaîne de caractères de app1"))
                        xelem.write (((((xself).xselenium).xfind_element)).apply (((xBy).xID)) ("app2string"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xelem).xtext)) ("il faut traduire cette chaîne de caractères de app2"))