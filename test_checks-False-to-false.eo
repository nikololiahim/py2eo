memory > xBooleanFieldListFilter
memory > xFakeForm
memory > xsuper
memory > xAdminBandForm
memory > xSomethingBad
memory > xTestModel
memory > xNoSearchFieldsAdmin
memory > xProxyChild
memory > xTestModelAdminWithNoForm
memory > xSimpleListFilter
memory > xCASCADE
memory > xBandAdmin
memory > xfalse
memory > xTestModelAdminWithoutFormsetClass
memory > xforms
memory > xAttributeError
memory > xBand
memory > xRandomClass
memory > xAdmin
memory > xForeignKey
memory > xAwesomeFilter
memory > xadmin
memory > xFakeFormSet
memory > xRelated
memory > xProxyProxyChildAdminFkName
memory > xInlineFkName
memory > xSong
memory > xProxyProxyChild
memory > xInlineNoFkName
memory > xError
memory > xValidationTestInlineModel
memory > xAdminSite
memory > xField
memory > xVERTICAL
memory > xPositionField
memory > xmodel_admin
memory > xSearchFieldsAdmin
memory > xValidationTestInline
memory > xRealModelFormSet
memory > xCheckTestCase
memory > xValidationTestInlineWithoutFormsetClass
memory > xTestModelAdmin
memory > xUserAdmin
memory > xF
memory > xAutocompleteAdmin
memory > xValidationTestModel
memory > xModelAdmin
memory > xUpper
memory > xParent
memory > xProductAdmin
memory > xBaseModelFormSet
memory > xModel
memory > xsetattr
memory > xTabularInline
memory > xSimpleTestCase
memory > xUser
memory > xlen
[] > test_checks
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_duplicate_fields_in_fieldsets
        memory > xtest_autocomplete_e037
        memory > xtest_list_display_first_item_same_as_list_editable_first_item
        memory > xtest_missing_fields_key
        memory > xtest_duplicate_fields
        memory > xtest_list_filter_validation
        memory > xtest_custom_permissions_require_matching_has_method
        memory > xtest_not_correct_inline_field
        memory > xtest_one_to_one_field
        memory > xtest_not_filter
        memory > xtest_invalid_expression
        memory > xtest_missing_model_field
        memory > xtest_not_model_admin
        memory > xtest_inline
        memory > xtest_not_dictionary
        memory > xtest_autocomplete_e38
        memory > xtest_not_callable
        memory > xtest_inline_without_formset_class
        memory > xassertIsInvalidRegexp
        memory > xtest_not_associated_with_field_name
        memory > xtest_actions_unique
        memory > xtest_autocomplete_e036
        memory > xtest_list_display_link_checked_for_list_tuple_if_get_list_display_overridden
        memory > xtest_valid_field_accessible_via_instance
        memory > xtest_random_marker_not_alone
        memory > xtest_not_iterable
        memory > xtest_missing_field
        memory > xtest_specified_both_fields_and_fieldsets
        memory > xtest_valid_complex_case
        memory > xtest_autocomplete_is_valid
        memory > xtest_fieldsets_with_custom_form_validation
        memory > xtest_list_display_first_item_same_as_list_editable_no_list_display_links
        memory > xtest_not_integer
        memory > xtest_invalid_model_type
        memory > xtest_field_attname
        memory > xtest_valid_case
        memory > xtest_actions_not_unique
        memory > xtest_related_valid_case
        memory > xtest_list_display_first_item_in_list_editable_no_list_display_links
        memory > xtest_invalid_value
        memory > xtest_autocomplete_e039
        memory > xtest_autocomplete_e040
        memory > xtest_item_not_a_pair
        memory > xtest_list_display_links_check_skipped_if_get_list_display_overridden
        memory > xtest_invalid_callable
        memory > xtest_related_invalid_field_type
        memory > xtest_valid_random_marker_case
        memory > xtest_non_iterable_item
        memory > xtest_autocomplete_is_onetoone
        memory > xtest_list_display_links_is_none
        memory > xtest_not_boolean
        memory > xtest_not_filter_again_again
        memory > xtest_both_list_editable_and_list_display_links
        memory > xtest_invalid_type
        memory > xtest_not_list_or_tuple
        memory > xtest_valid_expression
        memory > xassertIsInvalid
        memory > xtest_None_is_valid_case
        memory > xtest_missing_field_again
        memory > xtest_proxy_model_parent
        memory > xassertIsValid
        memory > xtest_missing_in_list_display
        memory > xtest_invalid_model
        memory > xtest_not_filter_again
        memory > xtest_callable
        memory > xtest_second_element_of_item_not_a_dict
        memory > xtest_not_list_filter_class
        memory > xtest_list_filter_is_func
        memory > xtest_invalid_field_type
        memory > xtest_list_display_first_item_in_list_editable
        memory > xtest_duplicate_fields_in_fields
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xassertIsInvalid.write
                  [xself xmodel_admin xmodel xmsg xid xhint xinvalid_obj xadmin_site]
                    memory > xadmin_obj
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xadmin_site)) ("None: is there a None literal in the EO language?")).if
                          xadmin_site.write (((xAdminSite)).apply)
                        xinvalid_obj.write ((xinvalid_obj).or (xmodel_admin))
                        xadmin_obj.write (((xmodel_admin)).apply ((xmodel)) ((xadmin_site)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xadmin_obj).xcheck)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xError)) ((xmsg)) ((xhint)) ((xinvalid_obj)) ((xid)))))))
                xassertIsInvalidRegexp.write
                  [xself xmodel_admin xmodel xmsg xid xhint xinvalid_obj]
                    memory > xerrors
                    memory > xadmin_obj
                    memory > xerror
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xinvalid_obj.write ((xinvalid_obj).or (xmodel_admin))
                        xadmin_obj.write (((xmodel_admin)).apply ((xmodel)) ((((xAdminSite)).apply)))
                        xerrors.write ((((xadmin_obj).xcheck)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xerrors)))) (1))
                        xerror.write (((unsupported)).apply ((xerrors)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xhint)) ((xhint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xobj)) ((xinvalid_obj)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerror).xid)) ((xid)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((xerror).xmsg)) ((xmsg)))
                xassertIsValid.write
                  [xself xmodel_admin xmodel xadmin_site]
                    memory > xadmin_obj
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xadmin_site)) ("None: is there a None literal in the EO language?")).if
                          xadmin_site.write (((xAdminSite)).apply)
                        xadmin_obj.write (((xmodel_admin)).apply ((xmodel)) ((xadmin_site)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xadmin_obj).xcheck)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_iterable.write
                  [xself]
                    memory > xraw_id_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xraw_id_fields.write 10
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'raw_id_fields' must be a list or tuple.") ("admin.E001"))
                xtest_missing_field.write
                  [xself]
                    memory > xraw_id_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xraw_id_fields.write (((unsupported)).apply ("non_existent_field"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'raw_id_fields[0]' refers to 'non_existent_field', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E002"))
                xtest_invalid_field_type.write
                  [xself]
                    memory > xraw_id_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xraw_id_fields.write (((unsupported)).apply ("name"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'raw_id_fields[0]' must be a foreign key or a many-to-many field.") ("admin.E003"))
                xtest_valid_case.write
                  [xself]
                    memory > xraw_id_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xraw_id_fields.write (((unsupported)).apply ("users"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_field_attname.write
                  [xself]
                    memory > xraw_id_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xraw_id_fields.write (((unsupported)).apply ("band_id"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'raw_id_fields[0]' refers to 'band_id', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E002"))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_valid_case.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("General") ((((unsupported)).apply ("fields") ((((unsupported)).apply ("name"))))))))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_not_iterable.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write 10
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'fieldsets' must be a list or tuple.") ("admin.E007"))
                xtest_non_iterable_item.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'fieldsets[0]' must be a list or tuple.") ("admin.E008"))
                xtest_item_not_a_pair.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'fieldsets[0]' must be of length 2.") ("admin.E009"))
                xtest_second_element_of_item_not_a_dict.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("General") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'fieldsets[0][1]' must be a dictionary.") ("admin.E010"))
                xtest_missing_fields_key.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("General") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'fieldsets[0][1]' must contain the key 'fields'.") ("admin.E011"))
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("General") ((((unsupported)).apply ("fields") ((((unsupported)).apply ("name"))))))))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_specified_both_fields_and_fieldsets.write
                  [xself]
                    memory > xfieldsets
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("General") ((((unsupported)).apply ("fields") ((((unsupported)).apply ("name"))))))))
                            xfields.write (((unsupported)).apply ("name"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("Both 'fieldsets' and 'fields' are specified.") ("admin.E005"))
                xtest_duplicate_fields.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ("fields") ((((unsupported)).apply ("name") ("name"))))))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("There are duplicate field(s) in 'fieldsets[0][1]'.") ("admin.E012"))
                xtest_duplicate_fields_in_fieldsets.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ("fields") ((((unsupported)).apply ("name"))))))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ("fields") ((((unsupported)).apply ("name"))))))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("There are duplicate field(s) in 'fieldsets[1][1]'.") ("admin.E012"))
                xtest_fieldsets_with_custom_form_validation.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("Band") ((((unsupported)).apply ("fields") ((((unsupported)).apply ("name"))))))))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xBandAdmin)) ((xBand)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_duplicate_fields_in_fields.write
                  [xself]
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfields.write (((unsupported)).apply ("name") ("name"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'fields' contains duplicate field(s).") ("admin.E006"))
                xtest_inline.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    memory > xfields
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xfields.write 10
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'fields' must be a list or tuple.") ("admin.E004") ((xValidationTestInline)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_invalid_type.write
                  [xself]
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          xform.write (xFakeForm)
                        (((unsupported)).apply ((xModelAdmin)))
                          xform.write "not a form"
                        (((unsupported)).apply ((xmodel_admin)) ((((unsupported)).apply ((xTestModelAdmin)) ((xTestModelAdminWithNoForm)))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xmodel_admin)))))
                            bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xmodel_admin)) ((xValidationTestModel)) ("The value of 'form' must inherit from 'BaseModelForm'.") ("admin.E016"))
                xtest_fieldsets_with_custom_form_validation.write
                  [xself]
                    memory > xfieldsets
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("Band") ((((unsupported)).apply ("fields") ((((unsupported)).apply ("name"))))))))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xBandAdmin)) ((xBand)))
                xtest_valid_case.write
                  [xself]
                    memory > xform
                    memory > xfieldsets
                    memory > xdelete
                    seq > @
                      seq
                        (((unsupported)).apply (((xforms).xModelForm)))
                          xdelete.write ((((xforms).xBooleanField)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xform.write (xAdminBandForm)
                            xfieldsets.write (((unsupported)).apply ((((unsupported)).apply ("Band") ((((unsupported)).apply ("fields") ((((unsupported)).apply ("name") ("bio") ("sign_date") ("delete"))))))))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xBandAdmin)) ((xBand)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_iterable.write
                  [xself]
                    memory > xfilter_vertical
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfilter_vertical.write 10
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'filter_vertical' must be a list or tuple.") ("admin.E017"))
                xtest_missing_field.write
                  [xself]
                    memory > xfilter_vertical
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfilter_vertical.write (((unsupported)).apply ("non_existent_field"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'filter_vertical[0]' refers to 'non_existent_field', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E019"))
                xtest_invalid_field_type.write
                  [xself]
                    memory > xfilter_vertical
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfilter_vertical.write (((unsupported)).apply ("name"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'filter_vertical[0]' must be a many-to-many field.") ("admin.E020"))
                xtest_valid_case.write
                  [xself]
                    memory > xfilter_vertical
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfilter_vertical.write (((unsupported)).apply ("users"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_iterable.write
                  [xself]
                    memory > xfilter_horizontal
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfilter_horizontal.write 10
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'filter_horizontal' must be a list or tuple.") ("admin.E018"))
                xtest_missing_field.write
                  [xself]
                    memory > xfilter_horizontal
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfilter_horizontal.write (((unsupported)).apply ("non_existent_field"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'filter_horizontal[0]' refers to 'non_existent_field', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E019"))
                xtest_invalid_field_type.write
                  [xself]
                    memory > xfilter_horizontal
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfilter_horizontal.write (((unsupported)).apply ("name"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'filter_horizontal[0]' must be a many-to-many field.") ("admin.E020"))
                xtest_valid_case.write
                  [xself]
                    memory > xfilter_horizontal
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xfilter_horizontal.write (((unsupported)).apply ("users"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_dictionary.write
                  [xself]
                    memory > xradio_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xradio_fields.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'radio_fields' must be a dictionary.") ("admin.E021"))
                xtest_missing_field.write
                  [xself]
                    memory > xradio_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xradio_fields.write (((unsupported)).apply ("non_existent_field") ((xVERTICAL)))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'radio_fields' refers to 'non_existent_field', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E022"))
                xtest_invalid_field_type.write
                  [xself]
                    memory > xradio_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xradio_fields.write (((unsupported)).apply ("name") ((xVERTICAL)))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'radio_fields' refers to 'name', which is not an instance of ForeignKey, and does not have a 'choices' definition.") ("admin.E023"))
                xtest_invalid_value.write
                  [xself]
                    memory > xradio_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xradio_fields.write (((unsupported)).apply ("state") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'radio_fields[\"state\"]' must be either admin.HORIZONTAL or admin.VERTICAL.") ("admin.E024"))
                xtest_valid_case.write
                  [xself]
                    memory > xradio_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xradio_fields.write (((unsupported)).apply ("state") ((xVERTICAL)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_list_or_tuple.write
                  [xself]
                    memory > xprepopulated_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xprepopulated_fields.write (((unsupported)).apply ("slug") ("test"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'prepopulated_fields[\"slug\"]' must be a list or tuple.") ("admin.E029"))
                xtest_not_dictionary.write
                  [xself]
                    memory > xprepopulated_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xprepopulated_fields.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'prepopulated_fields' must be a dictionary.") ("admin.E026"))
                xtest_missing_field.write
                  [xself]
                    memory > xprepopulated_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xprepopulated_fields.write (((unsupported)).apply ("non_existent_field") ((((unsupported)).apply ("slug"))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'prepopulated_fields' refers to 'non_existent_field', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E027"))
                xtest_missing_field_again.write
                  [xself]
                    memory > xprepopulated_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xprepopulated_fields.write (((unsupported)).apply ("slug") ((((unsupported)).apply ("non_existent_field"))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'prepopulated_fields[\"slug\"][0]' refers to 'non_existent_field', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E030"))
                xtest_invalid_field_type.write
                  [xself]
                    memory > xprepopulated_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xprepopulated_fields.write (((unsupported)).apply ("users") ((((unsupported)).apply ("name"))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'prepopulated_fields' refers to 'users', which must not be a DateTimeField, a ForeignKey, a OneToOneField, or a ManyToManyField.") ("admin.E028"))
                xtest_valid_case.write
                  [xself]
                    memory > xprepopulated_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xprepopulated_fields.write (((unsupported)).apply ("slug") ((((unsupported)).apply ("name"))))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_one_to_one_field.write
                  [xself]
                    memory > xprepopulated_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xprepopulated_fields.write (((unsupported)).apply ("best_friend") ((((unsupported)).apply ("name"))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'prepopulated_fields' refers to 'best_friend', which must not be a DateTimeField, a ForeignKey, a OneToOneField, or a ManyToManyField.") ("admin.E028"))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_iterable.write
                  [xself]
                    memory > xlist_display
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_display.write 10
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_display' must be a list or tuple.") ("admin.E107"))
                xtest_missing_field.write
                  [xself]
                    memory > xlist_display
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_display.write (((unsupported)).apply ("non_existent_field"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_display[0]' refers to 'non_existent_field', which is not a callable, an attribute of 'TestModelAdmin', or an attribute or method on 'modeladmin.ValidationTestModel'.") ("admin.E108"))
                xtest_invalid_field_type.write
                  [xself]
                    memory > xlist_display
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_display.write (((unsupported)).apply ("users"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_display[0]' must not be a ManyToManyField.") ("admin.E109"))
                xtest_valid_case.write
                  [xself]
                    memory > xlist_display
                    memory > xa_method
                    memory > xa_callable
                    seq > @
                      seq
                        xa_callable.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xa_method.write
                              [xself xobj]
                                seq > @
                                  (((unsupported)).apply)
                            xlist_display.write (((unsupported)).apply ("name") ("decade_published_in") ("a_method") ((xa_callable)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_valid_field_accessible_via_instance.write
                  [xself]
                    memory > xfield
                    memory > xcontribute_to_class
                    memory > xlist_display
                    memory > x__get__
                    seq > @
                      seq
                        (((unsupported)).apply ((xField)))
                          seq
                            unsupported
                            xcontribute_to_class.write
                              [xself xcls xname]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((((xsuper)).apply).xcontribute_to_class)).apply ((xcls)) ((xname)))
                                    bogusForceDataize.write (((xsetattr)).apply ((xcls)) (((xself).xname)) ((xself)))
                            x__get__.write
                              [xself xinstance xowner]
                                seq > @
                                  (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                                    (((unsupported)).apply ((((xAttributeError)).apply)))
                        (((unsupported)).apply ((xModel)))
                          xfield.write (((xPositionField)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_display.write (((unsupported)).apply ("field"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_iterable.write
                  [xself]
                    memory > xlist_display_links
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_display_links.write 10
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_display_links' must be a list, a tuple, or None.") ("admin.E110"))
                xtest_missing_field.write
                  [xself]
                    memory > xlist_display_links
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_display_links.write (((unsupported)).apply ("non_existent_field"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_display_links[0]' refers to 'non_existent_field', which is not defined in 'list_display'.") ("admin.E111"))
                xtest_missing_in_list_display.write
                  [xself]
                    memory > xlist_display_links
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_display_links.write (((unsupported)).apply ("name"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_display_links[0]' refers to 'name', which is not defined in 'list_display'.") ("admin.E111"))
                xtest_valid_case.write
                  [xself]
                    memory > xlist_display_links
                    memory > xlist_display
                    memory > xa_method
                    memory > xa_callable
                    seq > @
                      seq
                        xa_callable.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xa_method.write
                              [xself xobj]
                                seq > @
                                  (((unsupported)).apply)
                            xlist_display.write (((unsupported)).apply ("name") ("decade_published_in") ("a_method") ((xa_callable)))
                            xlist_display_links.write (((unsupported)).apply ("name") ("decade_published_in") ("a_method") ((xa_callable)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_None_is_valid_case.write
                  [xself]
                    memory > xlist_display_links
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_display_links.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_list_display_links_check_skipped_if_get_list_display_overridden.write
                  [xself]
                    memory > xlist_display_links
                    memory > xget_list_display
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xlist_display_links.write (((unsupported)).apply ("name") ("subtitle"))
                            xget_list_display.write
                              [xself xrequest]
                                seq > @
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_list_display_link_checked_for_list_tuple_if_get_list_display_overridden.write
                  [xself]
                    memory > xlist_display_links
                    memory > xget_list_display
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xlist_display_links.write "non-list/tuple"
                            xget_list_display.write
                              [xself xrequest]
                                seq > @
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_display_links' must be a list, a tuple, or None.") ("admin.E110"))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_list_filter_validation.write
                  [xself]
                    memory > xlist_filter
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write 10
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter' must be a list or tuple.") ("admin.E112"))
                xtest_not_list_filter_class.write
                  [xself]
                    memory > xlist_filter
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ("RandomClass"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter[0]' refers to 'RandomClass', which does not refer to a Field.") ("admin.E116"))
                xtest_callable.write
                  [xself]
                    memory > xlist_filter
                    memory > xrandom_callable
                    seq > @
                      seq
                        xrandom_callable.write
                          []
                            seq > @
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ((xrandom_callable)))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter[0]' must inherit from 'ListFilter'.") ("admin.E113"))
                xtest_not_callable.write
                  [xself]
                    memory > xlist_filter
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ((((unsupported)).apply (42) (42))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter[0][1]' must inherit from 'FieldListFilter'.") ("admin.E115"))
                xtest_missing_field.write
                  [xself]
                    memory > xlist_filter
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ("non_existent_field"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter[0]' refers to 'non_existent_field', which does not refer to a Field.") ("admin.E116"))
                xtest_not_filter.write
                  [xself]
                    memory > xlist_filter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ((xRandomClass)))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter[0]' must inherit from 'ListFilter'.") ("admin.E113"))
                xtest_not_filter_again.write
                  [xself]
                    memory > xlist_filter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ((((unsupported)).apply ("is_active") ((xRandomClass)))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter[0][1]' must inherit from 'FieldListFilter'.") ("admin.E115"))
                xtest_not_filter_again_again.write
                  [xself]
                    memory > xlist_filter
                    memory > xget_title
                    memory > xget_choices
                    memory > xget_queryset
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleListFilter)))
                          seq
                            xget_title.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("awesomeness"))
                            xget_choices.write
                              [xself xrequest]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("bit") ("A bit awesome"))) ((((unsupported)).apply ("very") ("Very awesome"))))))
                            xget_queryset.write
                              [xself xcl xqs]
                                seq > @
                                  (((unsupported)).apply ((xqs)))
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ((((unsupported)).apply ("is_active") ((xAwesomeFilter)))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter[0][1]' must inherit from 'FieldListFilter'.") ("admin.E115"))
                xtest_list_filter_is_func.write
                  [xself]
                    memory > xlist_filter
                    memory > xget_filter
                    seq > @
                      seq
                        xget_filter.write
                          []
                            seq > @
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ((xget_filter)))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter[0]' must inherit from 'ListFilter'.") ("admin.E113"))
                xtest_not_associated_with_field_name.write
                  [xself]
                    memory > xlist_filter
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ((xBooleanFieldListFilter)))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_filter[0]' must not inherit from 'FieldListFilter'.") ("admin.E114"))
                xtest_valid_case.write
                  [xself]
                    memory > xlist_filter
                    memory > xget_title
                    memory > xget_choices
                    memory > xget_queryset
                    seq > @
                      seq
                        (((unsupported)).apply ((xSimpleListFilter)))
                          seq
                            xget_title.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("awesomeness"))
                            xget_choices.write
                              [xself xrequest]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("bit") ("A bit awesome"))) ((((unsupported)).apply ("very") ("Very awesome"))))))
                            xget_queryset.write
                              [xself xcl xqs]
                                seq > @
                                  (((unsupported)).apply ((xqs)))
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_filter.write (((unsupported)).apply ("is_active") ((xAwesomeFilter)) ((((unsupported)).apply ("is_active") ((xBooleanFieldListFilter)))) ("no"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_integer.write
                  [xself]
                    memory > xlist_per_page
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_per_page.write "hello"
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_per_page' must be an integer.") ("admin.E118"))
                xtest_valid_case.write
                  [xself]
                    memory > xlist_per_page
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_per_page.write 100
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_integer.write
                  [xself]
                    memory > xlist_max_show_all
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_max_show_all.write "hello"
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_max_show_all' must be an integer.") ("admin.E119"))
                xtest_valid_case.write
                  [xself]
                    memory > xlist_max_show_all
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_max_show_all.write 200
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              xtest_not_iterable.write
                [xself]
                  memory > xsearch_fields
                  seq > @
                    seq
                      (((unsupported)).apply ((xModelAdmin)))
                        xsearch_fields.write 10
                      bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'search_fields' must be a list or tuple.") ("admin.E126"))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_missing_field.write
                  [xself]
                    memory > xdate_hierarchy
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xdate_hierarchy.write "non_existent_field"
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'date_hierarchy' refers to 'non_existent_field', which does not refer to a Field.") ("admin.E127"))
                xtest_invalid_field_type.write
                  [xself]
                    memory > xdate_hierarchy
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xdate_hierarchy.write "name"
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'date_hierarchy' must be a DateField or DateTimeField.") ("admin.E128"))
                xtest_valid_case.write
                  [xself]
                    memory > xdate_hierarchy
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xdate_hierarchy.write "pub_date"
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_related_valid_case.write
                  [xself]
                    memory > xdate_hierarchy
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xdate_hierarchy.write "band__sign_date"
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_related_invalid_field_type.write
                  [xself]
                    memory > xdate_hierarchy
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xdate_hierarchy.write "band__name"
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'date_hierarchy' must be a DateField or DateTimeField.") ("admin.E128"))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_iterable.write
                  [xself]
                    memory > xordering
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xordering.write 10
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'ordering' must be a list or tuple.") ("admin.E031"))
                        (((unsupported)).apply ((xModelAdmin)))
                          xordering.write (((unsupported)).apply ("non_existent_field"))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'ordering[0]' refers to 'non_existent_field', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E033"))
                xtest_random_marker_not_alone.write
                  [xself]
                    memory > xordering
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xordering.write (((unsupported)).apply ("?") ("name"))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'ordering' has the random ordering marker '?', but contains other fields as well.") ("admin.E032") ("Either remove the \"?\", or remove the other fields."))
                xtest_valid_random_marker_case.write
                  [xself]
                    memory > xordering
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xordering.write (((unsupported)).apply ("?"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_valid_complex_case.write
                  [xself]
                    memory > xordering
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xordering.write (((unsupported)).apply ("band__name"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_valid_case.write
                  [xself]
                    memory > xordering
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xordering.write (((unsupported)).apply ("name") ("pk"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_invalid_expression.write
                  [xself]
                    memory > xordering
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xordering.write (((unsupported)).apply ((((xF)).apply ("nonexistent"))))
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'ordering[0]' refers to 'nonexistent', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E033"))
                xtest_valid_expression.write
                  [xself]
                    memory > xordering
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xordering.write (((unsupported)).apply ((((xUpper)).apply ("name"))) (((((((xUpper)).apply ("band__name")).xdesc)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_invalid_type.write
                  [xself]
                    memory > xlist_select_related
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_select_related.write 1
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'list_select_related' must be a boolean, tuple or list.") ("admin.E117"))
                xtest_valid_case.write
                  [xself]
                    memory > xlist_select_related
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xlist_select_related.write (xfalse)
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_boolean.write
                  [xself]
                    memory > xsave_as
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xsave_as.write 1
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'save_as' must be a boolean.") ("admin.E101"))
                xtest_valid_case.write
                  [xself]
                    memory > xsave_as
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xsave_as.write TRUE
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_boolean.write
                  [xself]
                    memory > xsave_on_top
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xsave_on_top.write 1
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'save_on_top' must be a boolean.") ("admin.E102"))
                xtest_valid_case.write
                  [xself]
                    memory > xsave_on_top
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xsave_on_top.write TRUE
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_iterable.write
                  [xself]
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write 10
                        bogusForceDataize.write ((((xself).xassertIsInvalid)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'inlines' must be a list or tuple.") ("admin.E103"))
                xtest_not_correct_inline_field.write
                  [xself]
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply (42))
                        bogusForceDataize.write ((((xself).xassertIsInvalidRegexp)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("'.*.TestModelAdmin' must inherit from 'InlineModelAdmin'.") ("admin.E104"))
                xtest_not_model_admin.write
                  [xself]
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsInvalidRegexp)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("'.*.ValidationTestInline' must inherit from 'InlineModelAdmin'.") ("admin.E104"))
                xtest_missing_model_field.write
                  [xself]
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsInvalidRegexp)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("'.*.ValidationTestInline' must have a 'model' attribute.") ("admin.E105"))
                xtest_invalid_model_type.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xTabularInline)))
                          xmodel.write (xSomethingBad)
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsInvalidRegexp)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of '.*.ValidationTestInline.model' must be a Model.") ("admin.E106"))
                xtest_invalid_model.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          xmodel.write "Not a class"
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsInvalidRegexp)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of '.*.ValidationTestInline.model' must be a Model.") ("admin.E106"))
                xtest_invalid_callable.write
                  [xself]
                    memory > xrandom_obj
                    memory > xinlines
                    seq > @
                      seq
                        xrandom_obj.write
                          []
                            seq > @
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xrandom_obj)))
                        bogusForceDataize.write ((((xself).xassertIsInvalidRegexp)).apply ((xTestModelAdmin)) ((xValidationTestModel)) ("'.*.random_obj' must inherit from 'InlineModelAdmin'.") ("admin.E104"))
                xtest_valid_case.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          xmodel.write (xValidationTestInlineModel)
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_missing_field.write
                  [xself]
                    memory > xfk_name
                    memory > xmodel
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xfk_name.write "non_existent_field"
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xTestModelAdmin)) ((xValidationTestModel)) ("'modeladmin.ValidationTestInlineModel' has no field named 'non_existent_field'.") ("admin.E202") ((xValidationTestInline)))
                xtest_valid_case.write
                  [xself]
                    memory > xfk_name
                    memory > xmodel
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xfk_name.write "parent"
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
                xtest_proxy_model_parent.write
                  [xself]
                    memory > xfk_name
                    memory > xinlines
                    memory > xproxy
                    memory > xproxy_child
                    memory > xmodel
                    seq > @
                      seq
                        (((unsupported)).apply ((xModel)))
                        (((unsupported)).apply ((xParent)))
                          (((unsupported)).apply)
                            xproxy.write TRUE
                        (((unsupported)).apply ((xProxyChild)))
                          (((unsupported)).apply)
                            xproxy.write TRUE
                        (((unsupported)).apply ((xModel)))
                          xproxy_child.write (((unsupported)).apply ((xForeignKey)) ((xProxyChild)) ((xCASCADE)))
                        (((unsupported)).apply (((xadmin).xTabularInline)))
                          seq
                            xmodel.write (xRelated)
                            xfk_name.write "proxy_child"
                        (((unsupported)).apply (((xadmin).xTabularInline)))
                          xmodel.write (xRelated)
                        (((unsupported)).apply (((xadmin).xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xInlineFkName)) ((xInlineNoFkName)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xProxyProxyChildAdminFkName)) ((xProxyProxyChild)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_integer.write
                  [xself]
                    memory > xextra
                    memory > xmodel
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xextra.write "hello"
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'extra' must be an integer.") ("admin.E203") ((xValidationTestInline)))
                xtest_valid_case.write
                  [xself]
                    memory > xextra
                    memory > xmodel
                    memory > xinlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xextra.write 2
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_integer.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    memory > xmax_num
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xmax_num.write "hello"
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'max_num' must be an integer.") ("admin.E204") ((xValidationTestInline)))
                xtest_valid_case.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    memory > xmax_num
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xmax_num.write 2
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_not_integer.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    memory > xmin_num
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xmin_num.write "hello"
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'min_num' must be an integer.") ("admin.E205") ((xValidationTestInline)))
                xtest_valid_case.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    memory > xmin_num
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xmin_num.write 2
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_invalid_type.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    memory > xformset
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xformset.write (xFakeFormSet)
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xTestModelAdmin)) ((xValidationTestModel)) ("The value of 'formset' must inherit from 'BaseModelFormSet'.") ("admin.E206") ((xValidationTestInline)))
                xtest_inline_without_formset_class.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    memory > xformset
                    seq > @
                      seq
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xformset.write "Not a FormSet Class"
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInlineWithoutFormsetClass)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xTestModelAdminWithoutFormsetClass)) ((xValidationTestModel)) ("The value of 'formset' must inherit from 'BaseModelFormSet'.") ("admin.E206") ((xValidationTestInlineWithoutFormsetClass)))
                xtest_valid_case.write
                  [xself]
                    memory > xmodel
                    memory > xinlines
                    memory > xformset
                    seq > @
                      seq
                        (((unsupported)).apply ((xBaseModelFormSet)))
                        (((unsupported)).apply ((xTabularInline)))
                          seq
                            xmodel.write (xValidationTestInlineModel)
                            xformset.write (xRealModelFormSet)
                        (((unsupported)).apply ((xModelAdmin)))
                          xinlines.write (((unsupported)).apply ((xValidationTestInline)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xTestModelAdmin)) ((xValidationTestModel)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_list_display_links_is_none.write
                  [xself]
                    memory > xlist_display_links
                    memory > xlist_display
                    memory > xlist_editable
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xlist_display.write (((unsupported)).apply ("name") ("slug") ("pub_date"))
                            xlist_editable.write (xlist_display)
                            xlist_display_links.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xProductAdmin)) ((xValidationTestModel)))
                xtest_list_display_first_item_same_as_list_editable_first_item.write
                  [xself]
                    memory > xlist_display_links
                    memory > xlist_display
                    memory > xlist_editable
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xlist_display.write (((unsupported)).apply ("name") ("slug") ("pub_date"))
                            xlist_editable.write (((unsupported)).apply ("name") ("slug"))
                            xlist_display_links.write (((unsupported)).apply ("pub_date"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xProductAdmin)) ((xValidationTestModel)))
                xtest_list_display_first_item_in_list_editable.write
                  [xself]
                    memory > xlist_display_links
                    memory > xlist_display
                    memory > xlist_editable
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xlist_display.write (((unsupported)).apply ("name") ("slug") ("pub_date"))
                            xlist_editable.write (((unsupported)).apply ("slug") ("name"))
                            xlist_display_links.write (((unsupported)).apply ("pub_date"))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xProductAdmin)) ((xValidationTestModel)))
                xtest_list_display_first_item_same_as_list_editable_no_list_display_links.write
                  [xself]
                    memory > xlist_display
                    memory > xlist_editable
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xlist_display.write (((unsupported)).apply ("name"))
                            xlist_editable.write (((unsupported)).apply ("name"))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xProductAdmin)) ((xValidationTestModel)) ("The value of 'list_editable[0]' refers to the first field in 'list_display' ('name'), which cannot be used unless 'list_display_links' is set.") ("admin.E124"))
                xtest_list_display_first_item_in_list_editable_no_list_display_links.write
                  [xself]
                    memory > xlist_display
                    memory > xlist_editable
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xlist_display.write (((unsupported)).apply ("name") ("slug") ("pub_date"))
                            xlist_editable.write (((unsupported)).apply ("slug") ("name"))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xProductAdmin)) ((xValidationTestModel)) ("The value of 'list_editable[1]' refers to the first field in 'list_display' ('name'), which cannot be used unless 'list_display_links' is set.") ("admin.E124"))
                xtest_both_list_editable_and_list_display_links.write
                  [xself]
                    memory > xlist_display_links
                    memory > xlist_display
                    memory > xlist_editable
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          seq
                            xlist_editable.write (((unsupported)).apply ("name"))
                            xlist_display.write (((unsupported)).apply ("name"))
                            xlist_display_links.write (((unsupported)).apply ("name"))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xProductAdmin)) ((xValidationTestModel)) ("The value of 'name' cannot be in both 'list_editable' and 'list_display_links'.") ("admin.E123"))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_autocomplete_e036.write
                  [xself]
                    memory > xautocomplete_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xautocomplete_fields.write "name"
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xAdmin)) ((xBand)) ("The value of 'autocomplete_fields' must be a list or tuple.") ("admin.E036") ((xAdmin)))
                xtest_autocomplete_e037.write
                  [xself]
                    memory > xautocomplete_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xautocomplete_fields.write (((unsupported)).apply ("nonexistent"))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xAdmin)) ((xValidationTestModel)) ("The value of 'autocomplete_fields[0]' refers to 'nonexistent', which is not a field of 'modeladmin.ValidationTestModel'.") ("admin.E037") ((xAdmin)))
                xtest_autocomplete_e38.write
                  [xself]
                    memory > xautocomplete_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xautocomplete_fields.write (((unsupported)).apply ("name"))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xAdmin)) ((xValidationTestModel)) ("The value of 'autocomplete_fields[0]' must be a foreign key or a many-to-many field.") ("admin.E038") ((xAdmin)))
                xtest_autocomplete_e039.write
                  [xself]
                    memory > xautocomplete_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xautocomplete_fields.write (((unsupported)).apply ("band"))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xAdmin)) ((xSong)) ("An admin for model \"Band\" has to be registered to be referenced by Admin.autocomplete_fields.") ("admin.E039") ((xAdmin)))
                xtest_autocomplete_e040.write
                  [xself]
                    memory > xsite
                    memory > xautocomplete_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                        (((unsupported)).apply ((xModelAdmin)))
                          xautocomplete_fields.write (((unsupported)).apply ("featuring"))
                        xsite.write (((xAdminSite)).apply)
                        bogusForceDataize.write ((((xsite).xregister)).apply ((xBand)) ((xNoSearchFieldsAdmin)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xAutocompleteAdmin)) ((xSong)) ("NoSearchFieldsAdmin must define \"search_fields\", because it's referenced by AutocompleteAdmin.autocomplete_fields.") ("admin.E040") ((xAutocompleteAdmin)) ((xsite)))
                xtest_autocomplete_is_valid.write
                  [xself]
                    memory > xsite
                    memory > xsearch_fields
                    memory > xautocomplete_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xsearch_fields.write "name"
                        (((unsupported)).apply ((xModelAdmin)))
                          xautocomplete_fields.write (((unsupported)).apply ("featuring"))
                        xsite.write (((xAdminSite)).apply)
                        bogusForceDataize.write ((((xsite).xregister)).apply ((xBand)) ((xSearchFieldsAdmin)))
                        (((unsupported)).apply (((xself).xassertIsValid)) ((xAutocompleteAdmin)) ((xSong)) ((xsite)))
                xtest_autocomplete_is_onetoone.write
                  [xself]
                    memory > xsite
                    memory > xsearch_fields
                    memory > xautocomplete_fields
                    seq > @
                      seq
                        (((unsupported)).apply ((xModelAdmin)))
                          xsearch_fields.write (((unsupported)).apply ("name"))
                        (((unsupported)).apply ((xModelAdmin)))
                          xautocomplete_fields.write (((unsupported)).apply ("best_friend"))
                        xsite.write (((xAdminSite)).apply)
                        bogusForceDataize.write ((((xsite).xregister)).apply ((xUser)) ((xUserAdmin)))
                        (((unsupported)).apply (((xself).xassertIsValid)) ((xAdmin)) ((xValidationTestModel)) ((xsite)))
            (((unsupported)).apply ((xCheckTestCase)))
              seq
                xtest_custom_permissions_require_matching_has_method.write
                  [xself]
                    memory > xcustom_permission_action
                    memory > xactions
                    seq > @
                      seq
                        xcustom_permission_action.write
                          [xmodeladmin xrequest xqueryset]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          xactions.write (((unsupported)).apply ((xcustom_permission_action)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xBandAdmin)) ((xBand)) ("BandAdmin must define a has_custom_permission() method for the custom_permission_action action.") ("admin.E129"))
                xtest_actions_not_unique.write
                  [xself]
                    memory > xaction
                    memory > xactions
                    seq > @
                      seq
                        xaction.write
                          [xmodeladmin xrequest xqueryset]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          xactions.write (((unsupported)).apply ((xaction)) ((xaction)))
                        (((unsupported)).apply (((xself).xassertIsInvalid)) ((xBandAdmin)) ((xBand)) ("__name__ attributes of actions defined in BandAdmin must be unique. Name 'action' is not unique.") ("admin.E130"))
                xtest_actions_unique.write
                  [xself]
                    memory > xaction1
                    memory > xaction2
                    memory > xactions
                    seq > @
                      seq
                        xaction1.write
                          [xmodeladmin xrequest xqueryset]
                            seq > @
                              (((unsupported)).apply)
                        xaction2.write
                          [xmodeladmin xrequest xqueryset]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((xModelAdmin)))
                          xactions.write (((unsupported)).apply ((xaction1)) ((xaction2)))
                        bogusForceDataize.write ((((xself).xassertIsValid)).apply ((xBandAdmin)) ((xBand)))