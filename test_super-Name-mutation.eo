memory > xD
memory > xC
memory > xAttributeError
memory > x__class__
memory > xrange
memory > xTestSuper
memory > xtype
memory > xint
memory > xX
memory > xsuper
memory > xglobals
memory > xe
memory > xRuntimeError
memory > xA2
memory > xB
memory > xexec
memory > xbad_cell
memory > xG
memory > xi
memory > xF
memory > xfloat
memory > xWithClassRef
memory > xMeta
memory > xE
memory > xunittest
memory > xobject
memory > xA
memory > xNameError
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_super
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcm
        memory > xtest___class___classmethod
        memory > xtest___classcell___missing
        memory > xtest_obscure_super_errors
        memory > xtest_class_methods_still_working
        memory > xtest_subclass_no_override_working
        memory > xtest_class_getattr_working
        memory > xf
        memory > xtest_cell_as_self
        memory > xtest_unbound_method_transfer_working
        memory > xtest___classcell___overwrite
        memory > xtest___class___new
        memory > xtest___classcell___expected_behaviour
        memory > xtearDown
        memory > xtest___class___mro
        memory > xtest___class___delayed
        memory > xtest_super_in_class_methods_working
        memory > xtest___classcell___wrong_cell
        memory > xtest_basics_working
        memory > xtest_various___class___pathologies
        memory > xtest___class___staticmethod
        memory > xtest_super_with_closure
        memory > xtest___class___instancemethod
        memory > xtest_super_init_leaks
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xf.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("A"))
                xcm.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xcls)) ("A"))))
            (((unsupported)).apply ((xA2)))
              seq
                xf.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((((xsuper)).apply).xf)).apply).add "B")))
                xcm.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xcls)) (((((((xsuper)).apply).xcm)).apply)) ("B"))))
            (((unsupported)).apply ((xA)))
              seq
                xf.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((((xsuper)).apply).xf)).apply).add "C")))
                xcm.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xcls)) (((((((xsuper)).apply).xcm)).apply)) ("C"))))
            (((unsupported)).apply ((xC)) ((xB)))
              seq
                xf.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((((xsuper)).apply).xf)).apply).add "D")))
                xcm.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xcls)) (((((((xsuper)).apply).xcm)).apply)) ("D"))))
            (((unsupported)).apply ((xD)))
            (((unsupported)).apply ((xE)))
              xf.write ((xE).xf)
            (((unsupported)).apply ((xA)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtearDown.write
                  [xself]
                    memory > x__class__
                    seq > @
                      seq
                        (((unsupported)).apply)
                        x__class__.write (xTestSuper)
                xtest_basics_working.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xD)).apply).xf)).apply)) ("ABCD"))
                xtest_class_getattr_working.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xD).xf)).apply ((((xD)).apply)))) ("ABCD"))
                xtest_subclass_no_override_working.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xE)).apply).xf)).apply)) ("ABCD"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xE).xf)).apply ((((xE)).apply)))) ("ABCD"))
                xtest_unbound_method_transfer_working.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xF)).apply).xf)).apply)) ("ABCD"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xF).xf)).apply ((((xF)).apply)))) ("ABCD"))
                xtest_class_methods_still_working.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xA).xcm)).apply)) ((((unsupported)).apply ((xA)) ("A"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xA)).apply).xcm)).apply)) ((((unsupported)).apply ((xA)) ("A"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xG).xcm)).apply)) ((((unsupported)).apply ((xG)) ("A"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xG)).apply).xcm)).apply)) ((((unsupported)).apply ((xG)) ("A"))))
                xtest_super_in_class_methods_working.write
                  [xself]
                    memory > xd
                    memory > xe
                    seq > @
                      seq
                        xd.write (((xD)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xd).xcm)).apply)) ((((unsupported)).apply ((xd)) ((((unsupported)).apply ((xD)) ((((unsupported)).apply ((xD)) ((((unsupported)).apply ((xD)) ("A"))) ("B"))) ("C"))) ("D"))))
                        xe.write (((xE)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xe).xcm)).apply)) ((((unsupported)).apply ((xe)) ((((unsupported)).apply ((xE)) ((((unsupported)).apply ((xE)) ((((unsupported)).apply ((xE)) ("A"))) ("B"))) ("C"))) ("D"))))
                xtest_super_with_closure.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xA)))
                          xf.write
                            [xself]
                              memory > xnested
                              seq > @
                                seq
                                  xnested.write
                                    []
                                      seq > @
                                        unsupported
                                  (((unsupported)).apply ((((((((xsuper)).apply).xf)).apply).add "E")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xE)).apply).xf)).apply)) ("AE"))
                xtest_various___class___pathologies.write
                  [xself]
                    memory > xx
                    memory > x__class__
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xA)))
                          seq
                            xf.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((((((xsuper)).apply).xf)).apply)))
                            x__class__.write 413
                        xx.write (((xX)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xf)).apply)) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xx).x__class__)) (413))
                        (((unsupported)).apply)
                          seq
                            xx.write (x__class__)
                            xf.write
                              []
                                seq > @
                                  unsupported
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xX).xx)) ((((xtype)).apply ((xself)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xNameError)))) ((xe)))
                          bogusForceDataize.write (((xexec)).apply ((((unsupported)).apply)) ((((xglobals)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply (((xe).xexception)))) ((xNameError)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply)
                            x__class__.write 42
                            xf.write
                              []
                                seq > @
                                  unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("__class__"))) (42))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xglobals)).apply)) ("__class__"))))))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__class__") (((xX).x__dict__)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply)
                            x__class__.write 42
                            xf.write
                              []
                                seq > @
                                  unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((x__class__)) (42))
                xtest___class___instancemethod.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xf.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((x__class__)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((xX)).apply).xf)).apply)) ((xX)))
                xtest___class___classmethod.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xf.write
                            [xcls]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((x__class__)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xX).xf)).apply)) ((xX)))
                xtest___class___staticmethod.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xf.write
                            []
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((x__class__)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xX).xf)).apply)) ((xX)))
                xtest___class___new.write
                  [xself]
                    memory > x__new__
                    memory > xtest_class
                    memory > xf
                    seq > @
                      seq
                        xtest_class.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xtype)))
                          x__new__.write
                            [xcls xname xbases xnamespace]
                              memory > xself
                              memory > xtest_class
                              seq > @
                                seq
                                  (((unsupported)).apply)
                                  xself.write ((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xname)) ((xbases)) ((xnamespace)))
                                  xtest_class.write ((((xself).xf)).apply)
                                  (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((xMeta)))
                          xf.write
                            []
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((x__class__)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xtest_class)) ((xA)))
                xtest___class___delayed.write
                  [xself]
                    memory > xtest_namespace
                    memory > x__new__
                    memory > xB
                    memory > xf
                    seq > @
                      seq
                        xtest_namespace.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xtype)))
                          x__new__.write
                            [xcls xname xbases xnamespace]
                              memory > xtest_namespace
                              seq > @
                                seq
                                  (((unsupported)).apply)
                                  xtest_namespace.write (xnamespace)
                                  (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xMeta)))
                          xf.write
                            []
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((x__class__)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xA)) ("None: is there a None literal in the EO language?"))
                        xB.write (((xtype)).apply ("B") ((((unsupported)).apply)) ((xtest_namespace)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xB).xf)).apply)) ((xB)))
                xtest___class___mro.write
                  [xself]
                    memory > xmro
                    memory > xtest_class
                    memory > xf
                    seq > @
                      seq
                        xtest_class.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xtype)))
                          xmro.write
                            [xself]
                              seq > @
                                seq
                                  bogusForceDataize.write (((((unsupported)).apply (((xself).x__dict__)) ("f"))).apply)
                                  (((unsupported)).apply (((((((xsuper)).apply).xmro)).apply)))
                        (((unsupported)).apply ((xMeta)))
                          xf.write
                            []
                              memory > xtest_class
                              seq > @
                                seq
                                  (((unsupported)).apply)
                                  xtest_class.write (x__class__)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xtest_class)) ((xA)))
                xtest___classcell___expected_behaviour.write
                  [xself]
                    memory > xmethod_closure
                    memory > xnamespace_snapshot
                    memory > xclass_cell
                    memory > xf
                    memory > x__new__
                    seq > @
                      seq
                        (((unsupported)).apply ((xtype)))
                          x__new__.write
                            [xcls xname xbases xnamespace]
                              memory > xnamespace_snapshot
                              seq > @
                                seq
                                  (((unsupported)).apply)
                                  xnamespace_snapshot.write ((((xnamespace).xcopy)).apply)
                                  (((unsupported)).apply (((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xname)) ((xbases)) ((xnamespace)))))
                        xnamespace_snapshot.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xMeta)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("__classcell__") ((xnamespace_snapshot)))
                        xnamespace_snapshot.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xMeta)))
                          xf.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((x__class__)))
                        xclass_cell.write (((unsupported)).apply ((xnamespace_snapshot)) ("__classcell__"))
                        xmethod_closure.write (((xWithClassRef).xf).x__closure__)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xmethod_closure)))) (1))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xclass_cell)) ((((unsupported)).apply ((xmethod_closure)) (0))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                xtest___classcell___missing.write
                  [xself]
                    memory > x__new__
                    memory > xexpected_error
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xtype)))
                          x__new__.write
                            [xcls xname xbases xnamespace]
                              seq > @
                                seq
                                  bogusForceDataize.write ((((xnamespace).xpop)).apply ("__classcell__") ("None: is there a None literal in the EO language?"))
                                  (((unsupported)).apply (((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xname)) ((xbases)) ((xnamespace)))))
                        (((unsupported)).apply ((xMeta)))
                        xexpected_error.write "__class__ not set.*__classcell__ propagated"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ((xexpected_error)))))
                          (((unsupported)).apply ((xMeta)))
                            xf.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((x__class__)))
                xtest___classcell___overwrite.write
                  [xself]
                    memory > x__new__
                    seq > @
                      seq
                        (((unsupported)).apply ((xtype)))
                          x__new__.write
                            [xcls xname xbases xnamespace xcell]
                              seq > @
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xnamespace)) ("__classcell__"))) ((xcell)))
                                  (((unsupported)).apply (((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xname)) ((xbases)) ((xnamespace)))))
                        (((unsupported)).apply ((xbad_cell)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (0) ("") ((((xobject)).apply)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xbad_cell)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              (((unsupported)).apply ((xMeta)) ((xbad_cell)))
                xtest___classcell___wrong_cell.write
                  [xself]
                    memory > x__new__
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xtype)))
                          x__new__.write
                            [xcls xname xbases xnamespace]
                              memory > xB
                              seq > @
                                seq
                                  xcls.write ((((((xsuper)).apply).x__new__)).apply ((xcls)) ((xname)) ((xbases)) ((xnamespace)))
                                  xB.write (((xtype)).apply ("B") ((((unsupported)).apply)) ((xnamespace)))
                                  (((unsupported)).apply ((xcls)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xMeta)))
                            xf.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((x__class__)))
                xtest_obscure_super_errors.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              bogusForceDataize.write (((xsuper)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xf)))
                        xf.write
                          [xx]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)))))))
                                bogusForceDataize.write (((xsuper)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xf)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          xf.write
                            [xx]
                              seq > @
                                seq
                                  (((unsupported)).apply)
                                  (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x__class__)))))))
                                  bogusForceDataize.write (((xsuper)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) (((((xX)).apply).xf)))
                xtest_cell_as_self.write
                  [xself]
                    memory > xmeth
                    memory > xc
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                          xmeth.write
                            [xself]
                              seq > @
                                bogusForceDataize.write (((xsuper)).apply)
                        xf.write
                          []
                            memory > xk
                            memory > xg
                            seq > @
                              seq
                                xk.write (((xX)).apply)
                                xg.write
                                  []
                                    seq > @
                                      (((unsupported)).apply ((xk)))
                                (((unsupported)).apply ((xg)))
                        xc.write (((unsupported)).apply (((((xf)).apply).x__closure__)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xX).xmeth)) ((xc)))
                xtest_super_init_leaks.write
                  [xself]
                    memory > xsp
                    seq > @
                      seq
                        xsp.write (((xsuper)).apply ((xfloat)) (1.0))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1000))))
                          bogusForceDataize.write ((((xsuper).x__init__)).apply ((xsp)) ((xint)) ((xi)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)