memory > xstr
memory > xemail
memory > xclient_address
memory > xFakeHTTPRequestHandler
memory > xBasicAuthHandler
memory > xpath
memory > xparams
memory > xDeprecationWarning
memory > xkwargs
memory > xcm
memory > xnetloc
memory > xthreading
memory > xfalse
memory > xscm
memory > xheaders
memory > xImportError
memory > xDigestAuthHandler
memory > xheader
memory > xhttp
memory > xindex
memory > xenumerate
memory > xopen_url
memory > xrequest
memory > xProxyAuthTests
memory > xpart
memory > xvalue
memory > xLoopbackHttpServer
memory > xurllib
memory > xresponse_code
memory > xf
memory > xint
memory > xbase64
memory > xhasattr
memory > xbody
memory > xsuper
memory > xLoopbackHttpServerThread
memory > xsupport
memory > xbytes
memory > xquery
memory > xargs
memory > xBasicAuthTests
memory > xos
memory > xhashlib
memory > x__file__
memory > xunittest
memory > xattr
memory > xTestUrlopen
memory > xresult
memory > xFakeProxyHandler
memory > xisinstance
memory > xline
memory > xlen
memory > xdict
memory > xmake_https_server
memory > x__name__
memory > xfragment
[] > test_urllib2_localnet
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_200
        memory > xtest_iteration
        memory > xtest_404
        memory > xtest_https_sni
        memory > xtest_proxy_qop_auth_int_works_or_throws_urlerror
        memory > xUSER_PASSWD
        memory > xsetUp
        memory > xURL
        memory > xtest_basic
        memory > xPASSWD
        memory > xset_qop
        memory > x__init__
        memory > xdo_GET
        memory > xINCORRECT_PASSWD
        memory > xtest_proxy_with_no_password_raises_httperror
        memory > xstop_server
        memory > xtest_sending_headers
        memory > xset_users
        memory > xtest_basic_auth_success
        memory > x_generate_nonce
        memory > xdo_AUTHHEAD
        memory > xCERT_localhost
        memory > xREALM
        memory > xtest_proxy_qop_auth_works
        memory > xlog_message
        memory > xENCODED_AUTH
        memory > xstart_https_server
        memory > xstop
        memory > xhere
        memory > xtearDownModule
        memory > x_return_auth_challenge
        memory > xtest_line_iteration
        memory > xhandle_request
        memory > x_create_auth_dict
        memory > xGetRequestHandler
        memory > xssl
        memory > xtest_https_with_cadefault
        memory > xstart_server
        memory > x_validate_auth
        memory > xtest_redirection
        memory > xrun
        memory > xtest_basic_auth_httperror
        memory > xtest_https
        memory > xtest_200_with_parameters
        memory > xdo_HEAD
        memory > xtest_geturl
        memory > xget_request
        memory > xtest_https_with_cafile
        memory > xset_realm
        memory > xthreads_key
        memory > xtest_proxy_with_bad_password_raises_httperror
        memory > xtearDown
        memory > xtest_chunked
        memory > xUSER
        memory > xCERT_fakehostname
        memory > xsetUpModule
        memory > xtest_info
        memory > xurlopen
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xssl.write "None: is there a None literal in the EO language?"
            xhere.write (((((xos).xpath).xdirname)).apply ((x__file__)))
            xCERT_localhost.write (((((xos).xpath).xjoin)).apply ((xhere)) ("keycert.pem"))
            xCERT_fakehostname.write (((((xos).xpath).xjoin)).apply ((xhere)) ("keycert2.pem"))
            (((unsupported)).apply ((((xhttp).xserver).xHTTPServer)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xserver_address xRequestHandlerClass]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xhttp).xserver).xHTTPServer).x__init__)).apply ((xself)) ((xserver_address)) ((xRequestHandlerClass)))
                        bogusForceDataize.write (((((xself).xsocket).xsettimeout)).apply (0.1))
                xget_request.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((xrequest)) ((xclient_address)))) ((((((xself).xsocket).xaccept)).apply)))
                        bogusForceDataize.write ((((xrequest).xsettimeout)).apply (10.0))
                        (((unsupported)).apply ((((unsupported)).apply ((xrequest)) ((xclient_address)))))
            (((unsupported)).apply (((xthreading).xThread)))
              seq
                unsupported
                x__init__.write
                  [xself xrequest_handler]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)).apply ((xself)))
                        (((unsupported)).apply (((xself).x_stop_server)) ((xfalse)))
                        (((unsupported)).apply (((xself).xready)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xrequest_handler).xprotocol_version)) ("HTTP/1.0"))
                        (((unsupported)).apply (((xself).xhttpd)) ((((xLoopbackHttpServer)).apply ((((unsupported)).apply ("127.0.0.1") (0))) ((xrequest_handler)))))
                        (((unsupported)).apply (((xself).xport)) ((((xself).xhttpd).xserver_port)))
                xstop.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).x_stop_server)) (TRUE))
                        bogusForceDataize.write ((((xself).xjoin)).apply)
                        bogusForceDataize.write (((((xself).xhttpd).xserver_close)).apply)
                xrun.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xready).xset)).apply)
                        while.
                          (((xself).x_stop_server).not)
                          [unused]
                            seq > @
                              bogusForceDataize.write (((((xself).xhttpd).xhandle_request)).apply)
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_request_num)) (0))
                        (((unsupported)).apply (((xself).x_nonces)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).x_users)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).x_realm_name)) ("Test Realm"))
                        (((unsupported)).apply (((xself).x_qop)) ("auth"))
                xset_qop.write
                  [xself xqop]
                    seq > @
                      (((unsupported)).apply (((xself).x_qop)) ((xqop)))
                xset_users.write
                  [xself xusers]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xisinstance)).apply ((xusers)) ((xdict)))))
                        (((unsupported)).apply (((xself).x_users)) ((xusers)))
                xset_realm.write
                  [xself xrealm]
                    seq > @
                      (((unsupported)).apply (((xself).x_realm_name)) ((xrealm)))
                x_generate_nonce.write
                  [xself]
                    memory > xnonce
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_request_num)) (1))
                        xnonce.write (((((((xhashlib).xmd5)).apply (((((((xstr)).apply (((xself).x_request_num))).xencode)).apply ("ascii")))).xhexdigest)).apply)
                        bogusForceDataize.write (((((xself).x_nonces).xappend)).apply ((xnonce)))
                        (((unsupported)).apply ((xnonce)))
                x_create_auth_dict.write
                  [xself xauth_str]
                    memory > xparts
                    memory > xvalue
                    memory > xauth_dict
                    memory > xname
                    memory > xfirst_space_index
                    seq > @
                      seq
                        xfirst_space_index.write ((((xauth_str).xfind)).apply (" "))
                        xauth_str.write (((unsupported)).apply ((xauth_str)) ((((unsupported)).apply (((xfirst_space_index).add 1)))))
                        xparts.write ((((xauth_str).xsplit)).apply (","))
                        xauth_dict.write (((unsupported)).apply)
                        (((unsupported)).apply ((xpart)) ((xparts)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xvalue)))) (((((xpart).xsplit)).apply ("="))))
                            xname.write ((((xname).xstrip)).apply)
                            (((((unsupported)).apply ((xvalue)) (0)).eq "\"").and ((((unsupported)).apply ((xvalue)) ((1.neg))).eq "\"")).if
                              xvalue.write (((unsupported)).apply ((xvalue)) ((((unsupported)).apply (1) ((1.neg)))))
                              xvalue.write ((((xvalue).xstrip)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xauth_dict)) ((xname)))) ((xvalue)))
                        (((unsupported)).apply ((xauth_dict)))
                x_validate_auth.write
                  [xself xauth_dict xpassword xmethod xuri]
                    memory > xHA1_str
                    memory > xresponse_str
                    memory > xfinal_dict
                    memory > xHA2
                    memory > xHA1
                    memory > xresponse
                    memory > xHA2_str
                    seq > @
                      seq
                        xfinal_dict.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xfinal_dict).xupdate)).apply ((xauth_dict)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfinal_dict)) ("password"))) ((xpassword)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfinal_dict)) ("method"))) ((xmethod)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfinal_dict)) ("uri"))) ((xuri)))
                        xHA1_str.write ("%(username)s:%(realm)s:%(password)s".mod (xfinal_dict))
                        xHA1.write (((((((xhashlib).xmd5)).apply (((((xHA1_str).xencode)).apply ("ascii")))).xhexdigest)).apply)
                        xHA2_str.write ("%(method)s:%(uri)s".mod (xfinal_dict))
                        xHA2.write (((((((xhashlib).xmd5)).apply (((((xHA2_str).xencode)).apply ("ascii")))).xhexdigest)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xfinal_dict)) ("HA1"))) ((xHA1)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfinal_dict)) ("HA2"))) ((xHA2)))
                        xresponse_str.write ("%(HA1)s:%(nonce)s:%(nc)s:%(cnonce)s:%(qop)s:%(HA2)s".mod (xfinal_dict))
                        xresponse.write (((((((xhashlib).xmd5)).apply (((((xresponse_str).xencode)).apply ("ascii")))).xhexdigest)).apply)
                        (((unsupported)).apply (((xresponse).eq (((unsupported)).apply ((xauth_dict)) ("response")))))
                x_return_auth_challenge.write
                  [xself xrequest_handler]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xrequest_handler).xsend_response)).apply (407) ("Proxy Authentication Required"))
                        bogusForceDataize.write ((((xrequest_handler).xsend_header)).apply ("Content-Type") ("text/html"))
                        bogusForceDataize.write ((((xrequest_handler).xsend_header)).apply ("Proxy-Authenticate") (("Digest realm=\"%s\", qop=\"%s\",nonce=\"%s\", ".mod (((unsupported)).apply (((xself).x_realm_name)) (((xself).x_qop)) (((((xself).x_generate_nonce)).apply))))))
                        bogusForceDataize.write ((((xrequest_handler).xend_headers)).apply)
                        bogusForceDataize.write (((((xrequest_handler).xwfile).xwrite)).apply ("Proxy Authentication Required."))
                        (((unsupported)).apply ((xfalse)))
                xhandle_request.write
                  [xself xrequest_handler]
                    memory > xauth_dict
                    memory > xpassword
                    memory > xauth_validated
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xlen)).apply (((xself).x_users))).eq 0).if
                          (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ("Proxy-Authorization") (((xrequest_handler).xheaders))).if
                          (((unsupported)).apply (((((xself).x_return_auth_challenge)).apply ((xrequest_handler)))))
                          seq
                            xauth_dict.write ((((xself).x_create_auth_dict)).apply ((((unsupported)).apply (((xrequest_handler).xheaders)) ("Proxy-Authorization"))))
                            (((unsupported)).apply ((((unsupported)).apply ((xauth_dict)) ("username"))) (((xself).x_users))).if
                              xpassword.write (((unsupported)).apply (((xself).x_users)) ((((unsupported)).apply ((xauth_dict)) ("username"))))
                              (((unsupported)).apply (((((xself).x_return_auth_challenge)).apply ((xrequest_handler)))))
                            ((((unsupported)).apply (((((xauth_dict).xget)).apply ("nonce"))) (((xself).x_nonces))).not).if
                              (((unsupported)).apply (((((xself).x_return_auth_challenge)).apply ((xrequest_handler)))))
                              bogusForceDataize.write (((((xself).x_nonces).xremove)).apply ((((unsupported)).apply ((xauth_dict)) ("nonce"))))
                            xauth_validated.write (xfalse)
                            (((unsupported)).apply ((xpath)) ((((unsupported)).apply (((xrequest_handler).xpath)) (((xrequest_handler).xshort_path)))))
                              ((((xself).x_validate_auth)).apply ((xauth_dict)) ((xpassword)) (((xrequest_handler).xcommand)) ((xpath))).if
                                xauth_validated.write TRUE
                            ((xauth_validated).not).if
                              (((unsupported)).apply (((((xself).x_return_auth_challenge)).apply ((xrequest_handler)))))
                            (((unsupported)).apply (TRUE))
            (((unsupported)).apply ((((xhttp).xserver).xBaseHTTPRequestHandler)))
              seq
                unsupported
                xUSER.write "testUser"
                xPASSWD.write "testPass"
                xREALM.write "Test"
                xUSER_PASSWD.write ("%s:%s".mod (((unsupported)).apply ((xUSER)) ((xPASSWD))))
                xENCODED_AUTH.write (((((((xbase64).xb64encode)).apply (((((xUSER_PASSWD).xencode)).apply ("ascii")))).xdecode)).apply ("ascii"))
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xhttp).xserver).xBaseHTTPRequestHandler).x__init__)).apply ((xself)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xlog_message.write
                  [xself xformat]
                    seq > @
                      (((unsupported)).apply)
                xdo_HEAD.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsend_response)).apply (200))
                        bogusForceDataize.write ((((xself).xsend_header)).apply ("Content-type") ("text/html"))
                        bogusForceDataize.write ((((xself).xend_headers)).apply)
                xdo_AUTHHEAD.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsend_response)).apply (401))
                        bogusForceDataize.write ((((xself).xsend_header)).apply ("WWW-Authenticate") (("Basic realm=\"%s\"".mod ((xself).xREALM))))
                        bogusForceDataize.write ((((xself).xsend_header)).apply ("Content-type") ("text/html"))
                        bogusForceDataize.write ((((xself).xend_headers)).apply)
                xdo_GET.write
                  [xself]
                    seq > @
                      ((((((xself).xheaders).xget)).apply ("Authorization") ("")).not).if
                        seq
                          bogusForceDataize.write ((((xself).xdo_AUTHHEAD)).apply)
                          bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ("No Auth header received"))
                        ((((((xself).xheaders).xget)).apply ("Authorization") ("")).eq ("Basic ".add ((xself).xENCODED_AUTH))).if
                          seq
                            bogusForceDataize.write ((((xself).xsend_response)).apply (200))
                            bogusForceDataize.write ((((xself).xend_headers)).apply)
                            bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ("It works"))
                          bogusForceDataize.write ((((xself).xdo_AUTHHEAD)).apply)
            (((unsupported)).apply ((((xhttp).xserver).xBaseHTTPRequestHandler)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xdigest_auth_handler]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xdigest_auth_handler)) ((xdigest_auth_handler)))
                        bogusForceDataize.write ((((((xhttp).xserver).xBaseHTTPRequestHandler).x__init__)).apply ((xself)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xlog_message.write
                  [xself xformat]
                    seq > @
                      (((unsupported)).apply)
                xdo_GET.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xscm)) ((xnetloc)) ((xpath)) ((xparams)) ((xquery)) ((xfragment)))) ((((((xurllib).xparse).xurlparse)).apply (((xself).xpath)) ("http"))))
                        (((unsupported)).apply (((xself).xshort_path)) ((xpath)))
                        (((((xself).xdigest_auth_handler).xhandle_request)).apply ((xself))).if
                          seq
                            bogusForceDataize.write ((((xself).xsend_response)).apply (200) ("OK"))
                            bogusForceDataize.write ((((xself).xsend_header)).apply ("Content-Type") ("text/html"))
                            bogusForceDataize.write ((((xself).xend_headers)).apply)
                            bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ((((xbytes)).apply (("You've reached %s!<BR>".mod ((xself).xpath))) ("ascii"))))
                            bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ("Our apologies, but our server is down due to a sudden zombie invasion."))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xUSER.write "testUser"
                xPASSWD.write "testPass"
                xINCORRECT_PASSWD.write "Incorrect"
                xREALM.write "Test"
                xsetUp.write
                  [xself]
                    memory > xhttp_server_with_basic_auth_handler
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply ((xBasicAuthTests)) ((xself))).xsetUp)).apply)
                        xhttp_server_with_basic_auth_handler.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xBasicAuthHandler)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((xself).xserver)) ((((xLoopbackHttpServerThread)).apply ((xhttp_server_with_basic_auth_handler)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xself).xstop_server)))
                        (((unsupported)).apply (((xself).xserver_url)) (("http://127.0.0.1:%s".mod (((xself).xserver).xport))))
                        bogusForceDataize.write (((((xself).xserver).xstart)).apply)
                        bogusForceDataize.write ((((((xself).xserver).xready).xwait)).apply)
                xstop_server.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver).xstop)).apply)
                        (((unsupported)).apply (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((((xsuper)).apply ((xBasicAuthTests)) ((xself))).xtearDown)).apply)
                xtest_basic_auth_success.write
                  [xself]
                    memory > xah
                    seq > @
                      seq
                        xah.write (((((xurllib).xrequest).xHTTPBasicAuthHandler)).apply)
                        bogusForceDataize.write ((((xah).xadd_password)).apply (((xself).xREALM)) (((xself).xserver_url)) (((xself).xUSER)) (((xself).xPASSWD)))
                        bogusForceDataize.write (((((xurllib).xrequest).xinstall_opener)).apply ((((((xurllib).xrequest).xbuild_opener)).apply ((xah)))))
                        (((unsupported)).apply ((((xurllib).xerror).xHTTPError)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xurllib).xrequest).xurlopen)).apply (((xself).xserver_url)))))
                          bogusForceDataize.write ((((xself).xfail)).apply (("Basic auth failed for the url: %s".mod ((xself).xserver_url))))
                xtest_basic_auth_httperror.write
                  [xself]
                    memory > xah
                    seq > @
                      seq
                        xah.write (((((xurllib).xrequest).xHTTPBasicAuthHandler)).apply)
                        bogusForceDataize.write ((((xah).xadd_password)).apply (((xself).xREALM)) (((xself).xserver_url)) (((xself).xUSER)) (((xself).xINCORRECT_PASSWD)))
                        bogusForceDataize.write (((((xurllib).xrequest).xinstall_opener)).apply ((((((xurllib).xrequest).xbuild_opener)).apply ((xah)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xurllib).xerror).xHTTPError)) ((((xurllib).xrequest).xurlopen)) (((xself).xserver_url)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xURL.write "http://localhost"
                xUSER.write "tester"
                xPASSWD.write "test123"
                xREALM.write "TestRealm"
                xsetUp.write
                  [xself]
                    memory > xrestore_environ
                    memory > xcreate_fake_proxy_handler
                    memory > xhandler
                    memory > xproxy_url
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply ((xProxyAuthTests)) ((xself))).xsetUp)).apply)
                        xrestore_environ.write
                          [xold_environ]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xos).xenviron).xclear)).apply)
                                bogusForceDataize.write (((((xos).xenviron).xupdate)).apply ((xold_environ)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xrestore_environ)) ((((((xos).xenviron).xcopy)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("NO_PROXY"))) (""))
                        (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("no_proxy"))) (""))
                        (((unsupported)).apply (((xself).xdigest_auth_handler)) ((((xDigestAuthHandler)).apply)))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_users)).apply ((((unsupported)).apply (((xself).xUSER)) (((xself).xPASSWD)))))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_realm)).apply (((xself).xREALM)))
                        xcreate_fake_proxy_handler.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xFakeProxyHandler)).apply (((xself).xdigest_auth_handler)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                        (((unsupported)).apply (((xself).xserver)) ((((xLoopbackHttpServerThread)).apply ((xcreate_fake_proxy_handler)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xself).xstop_server)))
                        bogusForceDataize.write (((((xself).xserver).xstart)).apply)
                        bogusForceDataize.write ((((((xself).xserver).xready).xwait)).apply)
                        xproxy_url.write ("http://127.0.0.1:%d".mod (((xself).xserver).xport))
                        xhandler.write (((((xurllib).xrequest).xProxyHandler)).apply ((((unsupported)).apply ("http") ((xproxy_url)))))
                        (((unsupported)).apply (((xself).xproxy_digest_handler)) ((((((xurllib).xrequest).xProxyDigestAuthHandler)).apply)))
                        (((unsupported)).apply (((xself).xopener)) ((((((xurllib).xrequest).xbuild_opener)).apply ((xhandler)) (((xself).xproxy_digest_handler)))))
                xstop_server.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver).xstop)).apply)
                        (((unsupported)).apply (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xtest_proxy_with_bad_password_raises_httperror.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xproxy_digest_handler).xadd_password)).apply (((xself).xREALM)) (((xself).xURL)) (((xself).xUSER)) ((((xself).xPASSWD).add "bad")))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_qop)).apply ("auth"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xurllib).xerror).xHTTPError)) ((((xself).xopener).xopen)) (((xself).xURL)))
                xtest_proxy_with_no_password_raises_httperror.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_qop)).apply ("auth"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xurllib).xerror).xHTTPError)) ((((xself).xopener).xopen)) (((xself).xURL)))
                xtest_proxy_qop_auth_works.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xproxy_digest_handler).xadd_password)).apply (((xself).xREALM)) (((xself).xURL)) (((xself).xUSER)) (((xself).xPASSWD)))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_qop)).apply ("auth"))
                        (((unsupported)).apply ((((((xself).xopener).xopen)).apply (((xself).xURL)))) ((xresult)))
                          while.
                            ((((xresult).xread)).apply)
                            [unused]
                              seq > @
                xtest_proxy_qop_auth_int_works_or_throws_urlerror.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xproxy_digest_handler).xadd_password)).apply (((xself).xREALM)) (((xself).xURL)) (((xself).xUSER)) (((xself).xPASSWD)))
                        bogusForceDataize.write (((((xself).xdigest_auth_handler).xset_qop)).apply ("auth-int"))
                        (((unsupported)).apply ((((xurllib).xerror).xURLError)))
                          xresult.write (((((xself).xopener).xopen)).apply (((xself).xURL)))
                          (((unsupported)).apply ((xresult)))
                            while.
                              ((((xresult).xread)).apply)
                              [unused]
                                seq > @
            xGetRequestHandler.write
              [xresponses]
                memory > xrequests
                memory > xheaders_received
                memory > xlog_message
                memory > xsend_head
                memory > xserver_version
                memory > xport
                memory > xdo_GET
                memory > xdo_POST
                seq > @
                  seq
                    (((unsupported)).apply ((((xhttp).xserver).xBaseHTTPRequestHandler)))
                      seq
                        xserver_version.write "TestHTTP/"
                        xrequests.write (((unsupported)).apply)
                        xheaders_received.write (((unsupported)).apply)
                        xport.write 80
                        xdo_GET.write
                          [xself]
                            memory > xdone
                            memory > xbody
                            seq > @
                              seq
                                xbody.write ((((xself).xsend_head)).apply)
                                while.
                                  (xbody)
                                  [unused]
                                    seq > @
                                      seq
                                        xdone.write (((((xself).xwfile).xwrite)).apply ((xbody)))
                                        xbody.write (((unsupported)).apply ((xbody)) ((((unsupported)).apply ((xdone)))))
                        xdo_POST.write
                          [xself]
                            memory > xcontent_length
                            memory > xpost_data
                            seq > @
                              seq
                                xcontent_length.write (((unsupported)).apply (((xself).xheaders)) ("Content-Length"))
                                xpost_data.write (((((xself).xrfile).xread)).apply ((((xint)).apply ((xcontent_length)))))
                                bogusForceDataize.write ((((xself).xdo_GET)).apply)
                                bogusForceDataize.write (((((xself).xrequests).xappend)).apply ((xpost_data)))
                        xsend_head.write
                          [xself]
                            seq > @
                              seq
                                (((unsupported)).apply (((xFakeHTTPRequestHandler).xheaders_received)) (((xself).xheaders)))
                                bogusForceDataize.write (((((xself).xrequests).xappend)).apply (((xself).xpath)))
                                (((unsupported)).apply ((((unsupported)).apply ((xresponse_code)) ((xheaders)) ((xbody)))) (((((xresponses).xpop)).apply (0))))
                                bogusForceDataize.write ((((xself).xsend_response)).apply ((xresponse_code)))
                                (((unsupported)).apply ((((unsupported)).apply ((xheader)) ((xvalue)))) ((xheaders)))
                                  bogusForceDataize.write ((((xself).xsend_header)).apply ((xheader)) (((xvalue).mod (((unsupported)).apply ("port") (((xself).xport))))))
                                (xbody).if
                                  seq
                                    bogusForceDataize.write ((((xself).xsend_header)).apply ("Content-type") ("text/plain"))
                                    bogusForceDataize.write ((((xself).xend_headers)).apply)
                                    (((unsupported)).apply ((xbody)))
                                bogusForceDataize.write ((((xself).xend_headers)).apply)
                        xlog_message.write
                          [xself]
                            seq > @
                              (((unsupported)).apply)
                    (((unsupported)).apply ((xFakeHTTPRequestHandler)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    memory > xrestore_environ
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply ((xTestUrlopen)) ((xself))).xsetUp)).apply)
                        xrestore_environ.write
                          [xold_environ]
                            seq > @
                              seq
                                bogusForceDataize.write (((((xos).xenviron).xclear)).apply)
                                bogusForceDataize.write (((((xos).xenviron).xupdate)).apply ((xold_environ)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xrestore_environ)) ((((((xos).xenviron).xcopy)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("NO_PROXY"))) ("*"))
                        (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("no_proxy"))) ("*"))
                xurlopen.write
                  [xself xurl xdata]
                    memory > xl
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        xl.write (((unsupported)).apply)
                        xf.write (((((xurllib).xrequest).xurlopen)).apply ((xurl)) ((xdata)) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xl).xextend)).apply (((((xf).xreadlines)).apply (200))))
                            bogusForceDataize.write ((((xl).xappend)).apply (((((xf).xreadline)).apply)))
                            bogusForceDataize.write ((((xl).xappend)).apply (((((xf).xread)).apply (1024))))
                            bogusForceDataize.write ((((xl).xappend)).apply (((((xf).xread)).apply)))
                          bogusForceDataize.write ((((xf).xclose)).apply)
                        (((unsupported)).apply (((("".xjoin)).apply ((xl)))))
                xstop_server.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver).xstop)).apply)
                        (((unsupported)).apply (((xself).xserver)) ("None: is there a None literal in the EO language?"))
                xstart_server.write
                  [xself xresponses]
                    memory > xhandler
                    memory > xport
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xresponses)) ("None: is there a None literal in the EO language?")).if
                          xresponses.write (((unsupported)).apply ((((unsupported)).apply (200) ((((unsupported)).apply)) ("we don't care"))))
                        xhandler.write (((xGetRequestHandler)).apply ((xresponses)))
                        (((unsupported)).apply (((xself).xserver)) ((((xLoopbackHttpServerThread)).apply ((xhandler)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xself).xstop_server)))
                        bogusForceDataize.write (((((xself).xserver).xstart)).apply)
                        bogusForceDataize.write ((((((xself).xserver).xready).xwait)).apply)
                        xport.write (((xself).xserver).xport)
                        (((unsupported)).apply (((xhandler).xport)) ((xport)))
                        (((unsupported)).apply ((xhandler)))
                xstart_https_server.write
                  [xself xresponses]
                    memory > xserver
                    memory > xhandler
                    seq > @
                      (((unsupported)).apply)
                        ((((xhasattr)).apply (((xurllib).xrequest)) ("HTTPSHandler")).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("ssl support required"))
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xresponses)) ("None: is there a None literal in the EO language?")).if
                          xresponses.write (((unsupported)).apply ((((unsupported)).apply (200) ((((unsupported)).apply)) ("we care a bit"))))
                        xhandler.write (((xGetRequestHandler)).apply ((xresponses)))
                        xserver.write (((unsupported)).apply ((xmake_https_server)) ((xself)) ((xhandler)) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xhandler).xport)) (((xserver).xport)))
                        (((unsupported)).apply ((xhandler)))
                xtest_redirection.write
                  [xself]
                    memory > xresponses
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "We got here..."
                        xresponses.write (((unsupported)).apply ((((unsupported)).apply (302) ((((unsupported)).apply ((((unsupported)).apply ("Location") ("http://localhost:%(port)s/somewhere_else"))))) (""))) ((((unsupported)).apply (200) ((((unsupported)).apply)) ((xexpected_response)))))
                        xhandler.write ((((xself).xstart_server)).apply ((xresponses)))
                        xdata.write ((((xself).xurlopen)).apply (("http://localhost:%s/".mod ((xhandler).xport))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xexpected_response)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhandler).xrequests)) ((((unsupported)).apply ("/") ("/somewhere_else"))))
                xtest_chunked.write
                  [xself]
                    memory > xdata
                    memory > xexpected_response
                    memory > xresponse
                    memory > xchunked_start
                    memory > xhandler
                    seq > @
                      seq
                        xexpected_response.write "hello world"
                        xchunked_start.write "arnhello worlrn1rndrn0rn"
                        xresponse.write (((unsupported)).apply ((((unsupported)).apply (200) ((((unsupported)).apply ((((unsupported)).apply ("Transfer-Encoding") ("chunked"))))) ((xchunked_start)))))
                        xhandler.write ((((xself).xstart_server)).apply ((xresponse)))
                        xdata.write ((((xself).xurlopen)).apply (("http://localhost:%s/".mod ((xhandler).xport))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xexpected_response)))
                xtest_404.write
                  [xself]
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "Bad bad bad..."
                        xhandler.write ((((xself).xstart_server)).apply ((((unsupported)).apply ((((unsupported)).apply (404) ((((unsupported)).apply)) ((xexpected_response)))))))
                        (((unsupported)).apply ((((xurllib).xerror).xURLError)))
                          bogusForceDataize.write ((((xself).xurlopen)).apply (("http://localhost:%s/weeble".mod ((xhandler).xport))))
                          seq
                            xdata.write ((((xf).xread)).apply)
                            bogusForceDataize.write ((((xf).xclose)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("404 should raise URLError"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xexpected_response)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhandler).xrequests)) ((((unsupported)).apply ("/weeble"))))
                xtest_200.write
                  [xself]
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "pycon 2008..."
                        xhandler.write ((((xself).xstart_server)).apply ((((unsupported)).apply ((((unsupported)).apply (200) ((((unsupported)).apply)) ((xexpected_response)))))))
                        xdata.write ((((xself).xurlopen)).apply (("http://localhost:%s/bizarre".mod ((xhandler).xport))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xexpected_response)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhandler).xrequests)) ((((unsupported)).apply ("/bizarre"))))
                xtest_200_with_parameters.write
                  [xself]
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "pycon 2008..."
                        xhandler.write ((((xself).xstart_server)).apply ((((unsupported)).apply ((((unsupported)).apply (200) ((((unsupported)).apply)) ((xexpected_response)))))))
                        xdata.write ((((xself).xurlopen)).apply (("http://localhost:%s/bizarre".mod ((xhandler).xport))) ("get=with_feeling"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xexpected_response)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhandler).xrequests)) ((((unsupported)).apply ("/bizarre") ("get=with_feeling"))))
                xtest_https.write
                  [xself]
                    memory > xcontext
                    memory > xhandler
                    memory > xdata
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_https_server)).apply)
                        xcontext.write (((unsupported)).apply (((xssl).xcreate_default_context)) ((xCERT_localhost)))
                        xdata.write (((unsupported)).apply (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) ((xcontext)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ("we care a bit"))
                xtest_https_with_cafile.write
                  [xself]
                    memory > xhandler
                    memory > xdata
                    seq > @
                      seq
                        xhandler.write (((unsupported)).apply (((xself).xstart_https_server)) ((xCERT_localhost)))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          seq
                            xdata.write (((unsupported)).apply (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) ((xCERT_localhost)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ("we care a bit"))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xurllib).xerror).xURLError)))) ((xcm)))
                              (((unsupported)).apply (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) ((xCERT_fakehostname)))
                            xhandler.write (((unsupported)).apply (((xself).xstart_https_server)) ((xCERT_fakehostname)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xurllib).xerror).xURLError)))) ((xcm)))
                              (((unsupported)).apply (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) ((xCERT_fakehostname)))
                xtest_https_with_cadefault.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write (((unsupported)).apply (((xself).xstart_https_server)) ((xCERT_localhost)))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((xurllib).xerror).xURLError)))) ((xcm)))
                            (((unsupported)).apply (((xself).xurlopen)) (("https://localhost:%s/bizarre".mod ((xhandler).xport))) (TRUE))
                xtest_https_sni.write
                  [xself]
                    memory > xhandler
                    memory > xcb_sni
                    memory > xsni_name
                    memory > xcontext
                    seq > @
                      seq
                        (((unsupported)).apply ((xssl)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("ssl module required"))
                        (((xssl).xHAS_SNI).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("SNI support required in OpenSSL"))
                        xsni_name.write "None: is there a None literal in the EO language?"
                        xcb_sni.write
                          [xssl_sock xserver_name xinitial_context]
                            memory > xsni_name
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xsni_name.write (xserver_name)
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_SERVER)))
                        bogusForceDataize.write ((((xcontext).xset_servername_callback)).apply ((xcb_sni)))
                        xhandler.write (((unsupported)).apply (((xself).xstart_https_server)) ((xcontext)) ((xCERT_localhost)))
                        xcontext.write (((unsupported)).apply (((xssl).xcreate_default_context)) ((xCERT_localhost)))
                        (((unsupported)).apply (((xself).xurlopen)) (("https://localhost:%s".mod ((xhandler).xport))) ((xcontext)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsni_name)) ("localhost"))
                xtest_sending_headers.write
                  [xself]
                    memory > xreq
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_server)).apply)
                        xreq.write (((unsupported)).apply ((((xurllib).xrequest).xRequest)) (("http://localhost:%s/".mod ((xhandler).xport))) ((((unsupported)).apply ("Range") ("bytes=20-39"))))
                        (((unsupported)).apply ((((((xurllib).xrequest).xurlopen)).apply ((xreq)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xhandler).xheaders_received)) ("Range"))) ("bytes=20-39"))
                xtest_basic.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_server)).apply)
                        (((unsupported)).apply ((((((xurllib).xrequest).xurlopen)).apply (("http://localhost:%s".mod ((xhandler).xport))))) ((xopen_url)))
                          seq
                            (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("read") ("close") ("info") ("geturl"))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xopen_url)) ((xattr)))) (("object returned from urlopen lacks the %s attribute".mod (xattr))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xopen_url).xread)).apply)) ("calling 'read' failed"))
                xtest_info.write
                  [xself]
                    memory > xopen_url
                    memory > xinfo_obj
                    memory > xhandler
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_server)).apply)
                        xopen_url.write (((((xurllib).xrequest).xurlopen)).apply (("http://localhost:%s".mod ((xhandler).xport))))
                        (((unsupported)).apply ((xopen_url)))
                          xinfo_obj.write ((((xopen_url).xinfo)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xinfo_obj)) ((((xemail).xmessage).xMessage)) ("object returned by 'info' is not an instance of email.message.Message"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xinfo_obj).xget_content_subtype)).apply)) ("plain"))
                xtest_geturl.write
                  [xself]
                    memory > xopen_url
                    memory > xhandler
                    memory > xurl
                    seq > @
                      seq
                        xhandler.write ((((xself).xstart_server)).apply)
                        xopen_url.write (((((xurllib).xrequest).xurlopen)).apply (("http://localhost:%s".mod ((xhandler).xport))))
                        (((unsupported)).apply ((xopen_url)))
                          xurl.write ((((xopen_url).xgeturl)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xurl)) (("http://localhost:%s".mod ((xhandler).xport))))
                xtest_iteration.write
                  [xself]
                    memory > xhandler
                    memory > xexpected_response
                    memory > xdata
                    seq > @
                      seq
                        xexpected_response.write "pycon 2008..."
                        xhandler.write ((((xself).xstart_server)).apply ((((unsupported)).apply ((((unsupported)).apply (200) ((((unsupported)).apply)) ((xexpected_response)))))))
                        xdata.write (((((xurllib).xrequest).xurlopen)).apply (("http://localhost:%s".mod ((xhandler).xport))))
                        (((unsupported)).apply ((xline)) ((xdata)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xline)) ((xexpected_response)))
                xtest_line_iteration.write
                  [xself]
                    memory > xexpected_response
                    memory > xdata
                    memory > xhandler
                    memory > xlines
                    seq > @
                      seq
                        xlines.write (((unsupported)).apply ("Wen") ("gotn") ("heren") ((("verylong ".mul 8192).add "n")))
                        xexpected_response.write ((("".xjoin)).apply ((xlines)))
                        xhandler.write ((((xself).xstart_server)).apply ((((unsupported)).apply ((((unsupported)).apply (200) ((((unsupported)).apply)) ((xexpected_response)))))))
                        xdata.write (((((xurllib).xrequest).xurlopen)).apply (("http://localhost:%s".mod ((xhandler).xport))))
                        (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((xline)))) ((((xenumerate)).apply ((xdata)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xline)) ((((unsupported)).apply ((xlines)) ((xindex)))) (("Fetched line number %s doesn't match expected:n    Expected length was %s, got %s".mod (((unsupported)).apply ((xindex)) ((((xlen)).apply ((((unsupported)).apply ((xlines)) ((xindex)))))) ((((xlen)).apply ((xline))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xindex).add 1)) ((((xlen)).apply ((xlines)))))
            xthreads_key.write "None: is there a None literal in the EO language?"
            xsetUpModule.write
              []
                memory > xthreads_key
                seq > @
                  seq
                    (((unsupported)).apply)
                    xthreads_key.write ((((xsupport).xthreading_setup)).apply)
            xtearDownModule.write
              []
                seq > @
                  (xthreads_key).if
                    bogusForceDataize.write ((((xsupport).xthreading_cleanup)).apply ((((unsupported)).apply ((xthreads_key)))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)