memory > xAttributeError
memory > xentityName
memory > xrange
memory > xsystemId
memory > xsys
memory > xbool
memory > xgetattr
memory > xmap
memory > xcm
memory > xpublicId
memory > xRuntimeError
memory > xBytesIO
memory > xsysId
memory > xValueError
memory > xExternalOutputter
memory > xstr
memory > xcontext
memory > xerrors
memory > xentry
memory > xbase
memory > xpubid
memory > xrepr
memory > xException
memory > xOverflowError
memory > xx
memory > xi
memory > xSpecificException
memory > xargs
memory > xos
memory > xtraceback
memory > xoperation
memory > xexpected_operation
memory > xsortdict
memory > xe
memory > xsetattr
memory > xname
memory > xzip
memory > xunittest
memory > xsysid
memory > xsysconfig
memory > xpubId
memory > xlen
memory > xnotationName
memory > xTypeError
memory > xexpat
memory > x__name__
[] > test_pyexpat
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xCharacterDataHandler
        memory > xtest
        memory > xsetUp
        memory > xStartElementHandler
        memory > xtest_buffer_text
        memory > xtest_specified_attributes
        memory > xtest_issue9402
        memory > xUnparsedEntityDeclHandler
        memory > xtest_change_size_1
        memory > xtest_1025_bytes
        memory > xEndNamespaceDeclHandler
        memory > xNotStandaloneHandler
        memory > xhandler_names
        memory > xtest2
        memory > xdata
        memory > xStartNamespaceDeclHandler
        memory > xProcessingInstructionHandler
        memory > xtest1
        memory > xtest_ignore_use_foreign_dtd
        memory > xCommentHandler
        memory > xtest_parse_str
        memory > xDefaultHandler
        memory > xtest3
        memory > xtest_parse_file
        memory > xStartCdataSectionHandler
        memory > xtest_disabling_buffer
        memory > xtest_unchanged_size
        memory > xcheck
        memory > xtest6
        memory > x_verify_parse_output
        memory > xtest_expaterror
        memory > xcheck_traceback_entry
        memory > xDefaultHandlerExpand
        memory > xSkippedEntityHandler
        memory > xStartDoctypeDeclHandler
        memory > xNotationDeclHandler
        memory > xcheck_pos
        memory > xtest_parse_again
        memory > xtest_invalid_attributes
        memory > xtest_wrong_size
        memory > xExternalEntityRefHandler
        memory > xtest_ordered_attributes
        memory > xtest_use_foreign_dtd
        memory > xtest_codes
        memory > xtest5
        memory > xEndElementHandler
        memory > xElementDeclHandler
        memory > xtest_legal
        memory > xtest_exception
        memory > xtest_buffering_enabled
        memory > xsmall_buffer_test
        memory > xtest_zero_length
        memory > x__init__
        memory > xtest_1000_bytes
        memory > x_hookup_callbacks
        memory > xtest_illegal
        memory > xEntityDeclHandler
        memory > xtest_default_to_disabled
        memory > xtest7
        memory > xEndCdataSectionHandler
        memory > xEndDoctypeDeclHandler
        memory > xtest_parse_only_xml_data
        memory > xtest4
        memory > xsetHandlers
        memory > xAttlistDeclHandler
        memory > xXmlDeclHandler
        memory > xtest_namespace_prefixes
        memory > xtest_change_size_2
        memory > xtest_parse_bytes
        memory > xcounting_handler
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply (((xexpat).xParserCreate)) ("!"))))
                xtest_buffer_text.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (FALSE) ((((xself).xparser).xbuffer_text)))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (0) (1) (2) (0))))
                          seq
                            (((unsupported)).apply ((((xself).xparser).xbuffer_text)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xparser).xbuffer_text)) ((((xbool)).apply ((xx)))))
                xtest_namespace_prefixes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xparser).xnamespace_prefixes)) (FALSE))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (0) (1) (2) (0))))
                          seq
                            (((unsupported)).apply ((((xself).xparser).xnamespace_prefixes)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xparser).xnamespace_prefixes)) ((((xbool)).apply ((xx)))))
                xtest_ordered_attributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xparser).xordered_attributes)) (FALSE))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (0) (1) (2) (0))))
                          seq
                            (((unsupported)).apply ((((xself).xparser).xordered_attributes)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xparser).xordered_attributes)) ((((xbool)).apply ((xx)))))
                xtest_specified_attributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xparser).xspecified_attributes)) (FALSE))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (0) (1) (2) (0))))
                          seq
                            (((unsupported)).apply ((((xself).xparser).xspecified_attributes)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xparser).xspecified_attributes)) ((((xbool)).apply ((xx)))))
                xtest_invalid_attributes.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply ((((xself).xparser).xreturns_unicode)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          unsupported
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xsetattr)) (((xself).xparser)) ((((xrange)).apply (15))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xparser).x__setattr__)) ((((xrange)).apply (15))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xgetattr)) (((xself).xparser)) ((((xrange)).apply (15))))
            xdata.write (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                  seq
                    x__init__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply (((xself).xout)) ((((unsupported)).apply)))
                    xStartElementHandler.write
                      [xself xname xattrs]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)).apply (((("Start element: ".add (((xrepr)).apply ((xname)))).add " ").add (((xsortdict)).apply ((xattrs))))))
                    xEndElementHandler.write
                      [xself xname]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)).apply (("End element: ".add (((xrepr)).apply ((xname))))))
                    xCharacterDataHandler.write
                      [xself xdata]
                        seq > @
                          seq
                            xdata.write ((((xdata).xstrip)).apply)
                            (xdata).if
                              bogusForceDataize.write (((((xself).xout).xappend)).apply (("Character data: ".add (((xrepr)).apply ((xdata))))))
                    xProcessingInstructionHandler.write
                      [xself xtarget xdata]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)).apply (((("PI: ".add (((xrepr)).apply ((xtarget)))).add " ").add (((xrepr)).apply ((xdata))))))
                    xStartNamespaceDeclHandler.write
                      [xself xprefix xuri]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)).apply (((("NS decl: ".add (((xrepr)).apply ((xprefix)))).add " ").add (((xrepr)).apply ((xuri))))))
                    xEndNamespaceDeclHandler.write
                      [xself xprefix]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)).apply (("End of NS decl: ".add (((xrepr)).apply ((xprefix))))))
                    xStartCdataSectionHandler.write
                      [xself]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)).apply ("Start of CDATA section"))
                    xEndCdataSectionHandler.write
                      [xself]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)).apply ("End of CDATA section"))
                    xCommentHandler.write
                      [xself xtext]
                        seq > @
                          bogusForceDataize.write (((((xself).xout).xappend)).apply (("Comment: ".add (((xrepr)).apply ((xtext))))))
                    xNotationDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xbase)) ((xsysid)) ((xpubid)))) ((xargs)))
                            bogusForceDataize.write (((((xself).xout).xappend)).apply (("Notation declared: %s".mod (((unsupported)).apply ((xargs))))))
                    xUnparsedEntityDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xentityName)) ((xbase)) ((xsystemId)) ((xpublicId)) ((xnotationName)))) ((xargs)))
                            bogusForceDataize.write (((((xself).xout).xappend)).apply (("Unparsed entity decl: %s".mod (((unsupported)).apply ((xargs))))))
                    xNotStandaloneHandler.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write (((((xself).xout).xappend)).apply ("Not standalone"))
                            (((unsupported)).apply (1))
                    xExternalEntityRefHandler.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ((xbase)) ((xsysId)) ((xpubId)))) ((xargs)))
                            bogusForceDataize.write (((((xself).xout).xappend)).apply (("External entity ref: %s".mod (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((((unsupported)).apply (1)))))))))
                            (((unsupported)).apply (1))
                    xStartDoctypeDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            bogusForceDataize.write (((((xself).xout).xappend)).apply ((((unsupported)).apply ("Start doctype") ((xargs)))))
                            (((unsupported)).apply (1))
                    xEndDoctypeDeclHandler.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write (((((xself).xout).xappend)).apply ("End doctype"))
                            (((unsupported)).apply (1))
                    xEntityDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            bogusForceDataize.write (((((xself).xout).xappend)).apply ((((unsupported)).apply ("Entity declaration") ((xargs)))))
                            (((unsupported)).apply (1))
                    xXmlDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            bogusForceDataize.write (((((xself).xout).xappend)).apply ((((unsupported)).apply ("XML declaration") ((xargs)))))
                            (((unsupported)).apply (1))
                    xElementDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            bogusForceDataize.write (((((xself).xout).xappend)).apply ((((unsupported)).apply ("Element declaration") ((xargs)))))
                            (((unsupported)).apply (1))
                    xAttlistDeclHandler.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            bogusForceDataize.write (((((xself).xout).xappend)).apply ((((unsupported)).apply ("Attribute list declaration") ((xargs)))))
                            (((unsupported)).apply (1))
                    xSkippedEntityHandler.write
                      [xself]
                        seq > @
                          (((unsupported)).apply)
                            bogusForceDataize.write (((((xself).xout).xappend)).apply ((((unsupported)).apply ("Skipped entity") ((xargs)))))
                            (((unsupported)).apply (1))
                    xDefaultHandler.write
                      [xself xuserData]
                        seq > @
                    xDefaultHandlerExpand.write
                      [xself xuserData]
                        seq > @
                xhandler_names.write (((unsupported)).apply ("StartElementHandler") ("EndElementHandler") ("CharacterDataHandler") ("ProcessingInstructionHandler") ("UnparsedEntityDeclHandler") ("NotationDeclHandler") ("StartNamespaceDeclHandler") ("EndNamespaceDeclHandler") ("CommentHandler") ("StartCdataSectionHandler") ("EndCdataSectionHandler") ("DefaultHandler") ("DefaultHandlerExpand") ("NotStandaloneHandler") ("ExternalEntityRefHandler") ("StartDoctypeDeclHandler") ("EndDoctypeDeclHandler") ("EntityDeclHandler") ("XmlDeclHandler") ("ElementDeclHandler") ("AttlistDeclHandler") ("SkippedEntityHandler"))
                x_hookup_callbacks.write
                  [xself xparser xhandler]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xname)) (((xself).xhandler_names)))
                          bogusForceDataize.write (((xsetattr)).apply ((xparser)) ((xname)) ((((xgetattr)).apply ((xhandler)) ((xname)))))
                x_verify_parse_output.write
                  [xself xoperations]
                    memory > xexpected_operations
                    seq > @
                      seq
                        xexpected_operations.write (((unsupported)).apply ((((unsupported)).apply ("XML declaration") ((((unsupported)).apply ("1.0") ("iso-8859-1") (0))))) ("PI: 'xml-stylesheet' 'href=\"stylesheet.css\"'") ("Comment: ' comment data '") ("Not standalone") ((((unsupported)).apply ("Start doctype") ((((unsupported)).apply ("quotations") ("quotations.dtd") ("None: is there a None literal in the EO language?") (1))))) ((((unsupported)).apply ("Element declaration") ((((unsupported)).apply ("root") ((((unsupported)).apply (2) (0) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))))))) ((((unsupported)).apply ("Attribute list declaration") ((((unsupported)).apply ("root") ("attr1") ("CDATA") ("None: is there a None literal in the EO language?") (1))))) ((((unsupported)).apply ("Attribute list declaration") ((((unsupported)).apply ("root") ("attr2") ("CDATA") ("None: is there a None literal in the EO language?") (0))))) ("Notation declared: ('notation', None, 'notation.jpeg', None)") ((((unsupported)).apply ("Entity declaration") ((((unsupported)).apply ("acirc") (0) ("xe2") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Entity declaration") ((((unsupported)).apply ("external_entity") (0) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("entity.file") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("Unparsed entity decl: ('unparsed_entity', None, 'entity.file', None, 'notation')") ("Not standalone") ("End doctype") ("Start element: 'root' {'attr1': 'value1', 'attr2': 'value2u1f40'}") ("NS decl: 'myns' 'http://www.python.org/namespace'") ("Start element: 'http://www.python.org/namespace!subelement' {}") ("Character data: 'Contents of subelements'") ("End element: 'http://www.python.org/namespace!subelement'") ("End of NS decl: 'myns'") ("Start element: 'sub2' {}") ("Start of CDATA section") ("Character data: 'contents of CDATA section'") ("End of CDATA section") ("End element: 'sub2'") ("External entity ref: (None, 'entity.file', None)") ((((unsupported)).apply ("Skipped entity") ((((unsupported)).apply ("skipped_entity") (0))))) ("Character data: 'xb5'") ("End element: 'root'"))
                        (((unsupported)).apply ((((unsupported)).apply ((xoperation)) ((xexpected_operation)))) ((((xzip)).apply ((xoperations)) ((xexpected_operations)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoperation)) ((xexpected_operation)))
                xtest_parse_bytes.write
                  [xself]
                    memory > xoperations
                    memory > xout
                    memory > xparser
                    seq > @
                      seq
                        xout.write ((((xself).xOutputter)).apply)
                        xparser.write (((unsupported)).apply (((xexpat).xParserCreate)) ("!"))
                        bogusForceDataize.write ((((xself).x_hookup_callbacks)).apply ((xparser)) ((xout)))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xdata)) (1))
                        xoperations.write ((xout).xout)
                        bogusForceDataize.write ((((xself).x_verify_parse_output)).apply ((xoperations)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) ((xgetattr)) ((xparser)) ("uD800"))
                xtest_parse_str.write
                  [xself]
                    memory > xoperations
                    memory > xout
                    memory > xparser
                    seq > @
                      seq
                        xout.write ((((xself).xOutputter)).apply)
                        xparser.write (((unsupported)).apply (((xexpat).xParserCreate)) ("!"))
                        bogusForceDataize.write ((((xself).x_hookup_callbacks)).apply ((xparser)) ((xout)))
                        bogusForceDataize.write ((((xparser).xParse)).apply (((((xdata).xdecode)).apply ("iso-8859-1"))) (1))
                        xoperations.write ((xout).xout)
                        bogusForceDataize.write ((((xself).x_verify_parse_output)).apply ((xoperations)))
                xtest_parse_file.write
                  [xself]
                    memory > xfile
                    memory > xoperations
                    memory > xout
                    memory > xparser
                    seq > @
                      seq
                        xout.write ((((xself).xOutputter)).apply)
                        xparser.write (((unsupported)).apply (((xexpat).xParserCreate)) ("!"))
                        bogusForceDataize.write ((((xself).x_hookup_callbacks)).apply ((xparser)) ((xout)))
                        xfile.write (((xBytesIO)).apply ((xdata)))
                        bogusForceDataize.write ((((xparser).xParseFile)).apply ((xfile)))
                        xoperations.write ((xout).xout)
                        bogusForceDataize.write ((((xself).x_verify_parse_output)).apply ((xoperations)))
                xtest_parse_again.write
                  [xself]
                    memory > xfile
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        xfile.write (((xBytesIO)).apply ((xdata)))
                        bogusForceDataize.write ((((xparser).xParseFile)).apply ((xfile)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xexpat).xerror)))) ((xcm)))
                          bogusForceDataize.write ((((xparser).xParseFile)).apply ((xfile)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexpat).xErrorString)).apply ((((xcm).xexception).xcode)))) ((((xexpat).xerrors).xXML_ERROR_FINISHED)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_legal.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xexpat).xParserCreate)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xexpat).xParserCreate)) (" "))
                xtest_illegal.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xTypeError)))
                          seq
                            (((unsupported)).apply (((xexpat).xParserCreate)) (42))
                            bogusForceDataize.write ((((xself).xfail)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("ParserCreate() argument 'namespace_separator' must be str or None, not int"))
                        (((unsupported)).apply ((xValueError)))
                          seq
                            (((unsupported)).apply (((xexpat).xParserCreate)) ("too long"))
                            bogusForceDataize.write ((((xself).xfail)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("namespace_separator must be at most one character, omitted, or None"))
                xtest_zero_length.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xexpat).xParserCreate)) (""))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest.write
                  [xself]
                    memory > xcollector
                    memory > xtag
                    memory > xL
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xexpat).xParserCreate)).apply)
                        xL.write (((unsupported)).apply)
                        xcollector.write
                          [xname]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xL).xappend)).apply ((xname)))
                        (((unsupported)).apply (((xp).xStartElementHandler)) ((xcollector)))
                        (((unsupported)).apply (((xp).xEndElementHandler)) ((xcollector)))
                        bogusForceDataize.write ((((xp).xParse)).apply ("<e> <e/> <e></e> </e>") (1))
                        xtag.write (((unsupported)).apply ((xL)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xL)))) (6))
                        (((unsupported)).apply ((xentry)) ((xL)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xtag)) ((xentry)))))
                xtest_issue9402.write
                  [xself]
                    memory > xout
                    memory > xparser
                    memory > x__init__
                    memory > xExternalEntityRefHandler
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xparser]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xparser)) ((xparser)))
                                    (((unsupported)).apply (((xself).xparser_result)) ("None: is there a None literal in the EO language?"))
                            xExternalEntityRefHandler.write
                              [xself xcontext xbase xsysId xpubId]
                                memory > xexternal_parser
                                seq > @
                                  seq
                                    xexternal_parser.write (((((xself).xparser).xExternalEntityParserCreate)).apply (""))
                                    (((unsupported)).apply (((xself).xparser_result)) (((((xexternal_parser).xParse)).apply ("") (1))))
                                    (((unsupported)).apply (1))
                        xparser.write (((unsupported)).apply (((xexpat).xParserCreate)) ("!"))
                        (((unsupported)).apply (((xparser).xbuffer_text)) (1))
                        xout.write (((xExternalOutputter)).apply ((xparser)))
                        (((unsupported)).apply (((xparser).xExternalEntityRefHandler)) (((xout).xExternalEntityRefHandler)))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xdata)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xout).xparser_result)) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xstuff)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xparser)) (((((xexpat).xParserCreate)).apply)))
                        (((unsupported)).apply ((((xself).xparser).xbuffer_text)) (1))
                        (((unsupported)).apply ((((xself).xparser).xCharacterDataHandler)) (((xself).xCharacterDataHandler)))
                xcheck.write
                  [xself xexpected xlabel]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xstuff)) ((xexpected)) (("%snstuff    = %rnexpected = %r".mod (((unsupported)).apply ((xlabel)) (((xself).xstuff)) ((((xmap)).apply ((xstr)) ((xexpected))))))))
                xCharacterDataHandler.write
                  [xself xtext]
                    seq > @
                      bogusForceDataize.write (((((xself).xstuff).xappend)).apply ((xtext)))
                xStartElementHandler.write
                  [xself xname xattrs]
                    memory > xbt
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xstuff).xappend)).apply (("<%s>".mod (xname))))
                        xbt.write ((((xattrs).xget)).apply ("buffer-text"))
                        ((xbt).eq "yes").if
                          (((unsupported)).apply ((((xself).xparser).xbuffer_text)) (1))
                          ((xbt).eq "no").if
                            (((unsupported)).apply ((((xself).xparser).xbuffer_text)) (0))
                xEndElementHandler.write
                  [xself xname]
                    seq > @
                      bogusForceDataize.write (((((xself).xstuff).xappend)).apply (("</%s>".mod (xname))))
                xCommentHandler.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write (((((xself).xstuff).xappend)).apply (("<!--%s-->".mod (xdata))))
                xsetHandlers.write
                  [xself xhandlers]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xname)) ((xhandlers)))
                          bogusForceDataize.write (((xsetattr)).apply (((xself).xparser)) ((xname)) ((((xgetattr)).apply ((xself)) ((xname)))))
                xtest_default_to_disabled.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xparser).xbuffer_text)))
                xtest_buffering_enabled.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xparser).xbuffer_text)))
                        bogusForceDataize.write (((((xself).xparser).xParse)).apply ("<a>1<b/>2<c/>3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xstuff)) ((((unsupported)).apply ("123"))) ("buffered text not properly collapsed"))
                xtest1.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)).apply ((((unsupported)).apply ("StartElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)).apply ("<a>1<b buffer-text='no'/>2n3<c buffer-text='yes'/>4n5</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xstuff)) ((((unsupported)).apply ("<a>") ("1") ("<b>") ("2") ("n") ("3") ("<c>") ("4n5"))) ("buffering control not reacting as expected"))
                xtest2.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xparser).xParse)).apply ("<a>1<b/>&lt;2&gt;<c/>&#32;n&#x20;3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xstuff)) ((((unsupported)).apply ("1<2> n 3"))) ("buffered text not properly collapsed"))
                xtest3.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)).apply ((((unsupported)).apply ("StartElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)).apply ("<a>1<b/>2<c/>3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xstuff)) ((((unsupported)).apply ("<a>") ("1") ("<b>") ("2") ("<c>") ("3"))) ("buffered text not properly split"))
                xtest4.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)).apply ((((unsupported)).apply ("StartElementHandler") ("EndElementHandler"))))
                        (((unsupported)).apply ((((xself).xparser).xCharacterDataHandler)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xparser).xParse)).apply ("<a>1<b/>2<c/>3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xstuff)) ((((unsupported)).apply ("<a>") ("<b>") ("</b>") ("<c>") ("</c>") ("</a>"))))
                xtest5.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)).apply ((((unsupported)).apply ("StartElementHandler") ("EndElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)).apply ("<a>1<b></b>2<c/>3</a>") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xstuff)) ((((unsupported)).apply ("<a>") ("1") ("<b>") ("</b>") ("2") ("<c>") ("</c>") ("3") ("</a>"))))
                xtest6.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)).apply ((((unsupported)).apply ("CommentHandler") ("EndElementHandler") ("StartElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)).apply ("<a>1<b/>2<c></c>345</a> ") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xstuff)) ((((unsupported)).apply ("<a>") ("1") ("<b>") ("</b>") ("2") ("<c>") ("</c>") ("345") ("</a>"))) ("buffered text not properly split"))
                xtest7.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsetHandlers)).apply ((((unsupported)).apply ("CommentHandler") ("EndElementHandler") ("StartElementHandler"))))
                        bogusForceDataize.write (((((xself).xparser).xParse)).apply ("<a>1<b/>2<c></c>3<!--abc-->4<!--def-->5</a> ") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xstuff)) ((((unsupported)).apply ("<a>") ("1") ("<b>") ("</b>") ("2") ("<c>") ("</c>") ("3") ("<!--abc-->") ("4") ("<!--def-->") ("5") ("</a>"))) ("buffered text not properly split"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xStartElementHandler.write
                  [xself xname xattrs]
                    seq > @
                      (((unsupported)).apply ((((xRuntimeError)).apply ((xname)))))
                xcheck_traceback_entry.write
                  [xself xentry xfilename xfuncname]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpath).xbasename)).apply ((((unsupported)).apply ((xentry)) (0))))) ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xentry)) (2))) ((xfuncname)))
                xtest_exception.write
                  [xself]
                    memory > xentries
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xparser).xStartElementHandler)) (((xself).xStartElementHandler)))
                        (((unsupported)).apply ((xRuntimeError)))
                          seq
                            bogusForceDataize.write ((((xparser).xParse)).apply ("<a><b><c/></b></a>") (1))
                            bogusForceDataize.write ((((xself).xfail)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xe).xargs)) (0))) ("a") (("Expected RuntimeError for element 'a', but".add (" found %r".mod (((unsupported)).apply (((xe).xargs)) (0))))))
                            xentries.write ((((xtraceback).xextract_tb)).apply (((xe).x__traceback__)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xentries)))) (3))
                            bogusForceDataize.write ((((xself).xcheck_traceback_entry)).apply ((((unsupported)).apply ((xentries)) (0))) ("test_pyexpat.py") ("test_exception"))
                            bogusForceDataize.write ((((xself).xcheck_traceback_entry)).apply ((((unsupported)).apply ((xentries)) (1))) ("pyexpat.c") ("StartElement"))
                            bogusForceDataize.write ((((xself).xcheck_traceback_entry)).apply ((((unsupported)).apply ((xentries)) (2))) ("test_pyexpat.py") ("StartElementHandler"))
                            ((((xsysconfig).xis_python_build)).apply).if
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("call_with_frame(\"StartElement\"") ((((unsupported)).apply ((((unsupported)).apply ((xentries)) (1))) (3))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xStartElementHandler.write
                  [xself xname xattrs]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_pos)).apply ("s"))
                xEndElementHandler.write
                  [xself xname]
                    seq > @
                      bogusForceDataize.write ((((xself).xcheck_pos)).apply ("e"))
                xcheck_pos.write
                  [xself xevent]
                    memory > xexpected
                    memory > xpos
                    seq > @
                      seq
                        xpos.write (((unsupported)).apply ((xevent)) ((((xself).xparser).xCurrentByteIndex)) ((((xself).xparser).xCurrentLineNumber)) ((((xself).xparser).xCurrentColumnNumber)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xupto).less (((xlen)).apply (((xself).xexpected_list))))) ("too many parser events"))
                        xexpected.write (((unsupported)).apply (((xself).xexpected_list)) (((xself).xupto)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpos)) ((xexpected)) (("Expected position %s, got position %s".mod (((unsupported)).apply ((xpos)) ((xexpected))))))
                        (((unsupported)).apply (((xself).xupto)) (1))
                xtest.write
                  [xself]
                    memory > xxml
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) (((((xexpat).xParserCreate)).apply)))
                        (((unsupported)).apply ((((xself).xparser).xStartElementHandler)) (((xself).xStartElementHandler)))
                        (((unsupported)).apply ((((xself).xparser).xEndElementHandler)) (((xself).xEndElementHandler)))
                        (((unsupported)).apply (((xself).xupto)) (0))
                        (((unsupported)).apply (((xself).xexpected_list)) ((((unsupported)).apply ((((unsupported)).apply ("s") (0) (1) (0))) ((((unsupported)).apply ("s") (5) (2) (1))) ((((unsupported)).apply ("s") (11) (3) (2))) ((((unsupported)).apply ("e") (15) (3) (6))) ((((unsupported)).apply ("e") (17) (4) (1))) ((((unsupported)).apply ("e") (22) (5) (0))))))
                        xxml.write "<a>n <b>n  <c/>n </b>n</a>"
                        bogusForceDataize.write (((((xself).xparser).xParse)).apply ((xxml)) (1))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_parse_only_xml_data.write
                [xself]
                  memory > xhandler
                  memory > xparser
                  memory > xxml
                  seq > @
                    seq
                      xxml.write ("<?xml version='1.0' encoding='iso8859'?><s>%s</s>".mod ("a".mul 1025))
                      (((unsupported)).apply ((xException)))
                      xhandler.write
                        [xtext]
                          seq > @
                            (((unsupported)).apply ((xSpecificException)))
                      xparser.write ((((xexpat).xParserCreate)).apply)
                      (((unsupported)).apply (((xparser).xCharacterDataHandler)) ((xhandler)))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xException)) (((xparser).xParse)) (((((xxml).xencode)).apply ("iso8859"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_1025_bytes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xsmall_buffer_test)).apply (1025))) (2))
                xtest_1000_bytes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xsmall_buffer_test)).apply (1000))) (1))
                xtest_wrong_size.write
                  [xself]
                    memory > xparser
                    seq > @
                      seq
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xparser).xbuffer_text)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xparser).xbuffer_size)) ((1.neg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xparser).xbuffer_size)) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))))))
                          (((unsupported)).apply (((xparser).xbuffer_size)) ((((xsys).xmaxsize).add 1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply (((xparser).xbuffer_size)) (512.0))
                xtest_unchanged_size.write
                  [xself]
                    memory > xxml1
                    memory > xxml2
                    memory > xparser
                    seq > @
                      seq
                        xxml1.write ("<?xml version='1.0' encoding='iso8859'?><s>".add ("a".mul 512))
                        xxml2.write (("a".mul 512).add "</s>")
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)).apply (((xparser).xbuffer_size)) (512))
                        (((unsupported)).apply (((xparser).xbuffer_text)) (1))
                        (((unsupported)).apply (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xxml1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xn)) (1))
                        (((unsupported)).apply (((xparser).xbuffer_size)) (((xparser).xbuffer_size)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xn)) (1))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xxml2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xn)) (2))
                xtest_disabling_buffer.write
                  [xself]
                    memory > xxml1
                    memory > xxml2
                    memory > xxml3
                    memory > xparser
                    seq > @
                      seq
                        xxml1.write ("<?xml version='1.0' encoding='iso8859'?><a>".add ("a".mul 512))
                        xxml2.write ("b".mul 1024)
                        xxml3.write (("c".mul 1024).add "</a>")
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)).apply (((xparser).xbuffer_text)) (1))
                        (((unsupported)).apply (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparser).xbuffer_size)) (1024))
                        (((unsupported)).apply (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xxml1)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xn)) (1))
                        (((unsupported)).apply (((xparser).xbuffer_text)) (0))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xparser).xbuffer_text)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparser).xbuffer_size)) (1024))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                          bogusForceDataize.write ((((xparser).xParse)).apply ((xxml2)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xn)) (11))
                        (((unsupported)).apply (((xparser).xbuffer_text)) (1))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xparser).xbuffer_text)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xxml3)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xn)) (12))
                xcounting_handler.write
                  [xself xtext]
                    seq > @
                      (((unsupported)).apply (((xself).xn)) (1))
                xsmall_buffer_test.write
                  [xself xbuffer_len]
                    memory > xparser
                    memory > xxml
                    seq > @
                      seq
                        xxml.write (("<?xml version='1.0' encoding='iso8859'?><s>".add ("a".mul (xbuffer_len))).add "</s>")
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)).apply (((xparser).xbuffer_size)) (1024))
                        (((unsupported)).apply (((xparser).xbuffer_text)) (1))
                        (((unsupported)).apply (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xxml)))
                        (((unsupported)).apply (((xself).xn)))
                xtest_change_size_1.write
                  [xself]
                    memory > xxml1
                    memory > xxml2
                    memory > xparser
                    seq > @
                      seq
                        xxml1.write ("<?xml version='1.0' encoding='iso8859'?><a><s>".add ("a".mul 1024))
                        xxml2.write (("aaa</s><s>".add ("a".mul 1025)).add "</s></a>")
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)).apply (((xparser).xbuffer_text)) (1))
                        (((unsupported)).apply (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparser).xbuffer_size)) (1024))
                        (((unsupported)).apply (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xxml1)) (0))
                        (((unsupported)).apply (((xparser).xbuffer_size)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparser).xbuffer_size)) (2048))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xxml2)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xn)) (2))
                xtest_change_size_2.write
                  [xself]
                    memory > xxml1
                    memory > xxml2
                    memory > xparser
                    seq > @
                      seq
                        xxml1.write ("<?xml version='1.0' encoding='iso8859'?><a>a<s>".add ("a".mul 1023))
                        xxml2.write (("aaa</s><s>".add ("a".mul 1025)).add "</s></a>")
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xparser).xCharacterDataHandler)) (((xself).xcounting_handler)))
                        (((unsupported)).apply (((xparser).xbuffer_text)) (1))
                        (((unsupported)).apply (((xparser).xbuffer_size)) (2048))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparser).xbuffer_size)) (2048))
                        (((unsupported)).apply (((xself).xn)) (0))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xxml1)) (0))
                        (((unsupported)).apply (((xparser).xbuffer_size)) ((((unsupported)).apply (((xparser).xbuffer_size)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xparser).xbuffer_size)) (1024))
                        bogusForceDataize.write ((((xparser).xParse)).apply ((xxml2)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xn)) (4))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest1.write
                  [xself]
                    memory > xparser
                    memory > xxml
                    seq > @
                      seq
                        xxml.write "0rn"
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xexpat).xExpatError)))
                          seq
                            bogusForceDataize.write ((((xparser).xParse)).apply ((xxml)) (TRUE))
                            bogusForceDataize.write ((((xself).xfail)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("unclosed token: line 2, column 0"))
                xtest2.write
                  [xself]
                    memory > xxml
                    memory > xerr_pattern
                    memory > xparser
                    seq > @
                      seq
                        xxml.write "<?xml versionxc2x85='1.0'?>rn"
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        xerr_pattern.write "XML declaration not well-formed: line 1, column d+"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xexpat).xExpatError)) ((xerr_pattern)))))
                          bogusForceDataize.write ((((xparser).xParse)).apply ((xxml)) (TRUE))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_codes.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerrors).xXML_ERROR_SYNTAX)) ((((unsupported)).apply (((xerrors).xmessages)) ((((unsupported)).apply (((xerrors).xcodes)) (((xerrors).xXML_ERROR_SYNTAX)))))))
                xtest_expaterror.write
                  [xself]
                    memory > xparser
                    memory > xxml
                    seq > @
                      seq
                        xxml.write "<"
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        (((unsupported)).apply (((xexpat).xExpatError)))
                          seq
                            bogusForceDataize.write ((((xparser).xParse)).apply ((xxml)) (TRUE))
                            bogusForceDataize.write ((((xself).xfail)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xcode)) ((((unsupported)).apply (((xerrors).xcodes)) (((xerrors).xXML_ERROR_UNCLOSED_TOKEN)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_use_foreign_dtd.write
                  [xself]
                    memory > xhandler_call_args
                    memory > xparser
                    memory > xresolve_entity
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xhandler_call_args.write (((unsupported)).apply)
                        xresolve_entity.write
                          [xcontext xbase xsystem_id xpublic_id]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xhandler_call_args).xappend)).apply ((((unsupported)).apply ((xpublic_id)) ((xsystem_id)))))
                                (((unsupported)).apply (1))
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        bogusForceDataize.write ((((xparser).xUseForeignDTD)).apply (TRUE))
                        bogusForceDataize.write ((((xparser).xSetParamEntityParsing)).apply (((xexpat).xXML_PARAM_ENTITY_PARSING_ALWAYS)))
                        (((unsupported)).apply (((xparser).xExternalEntityRefHandler)) ((xresolve_entity)))
                        bogusForceDataize.write ((((xparser).xParse)).apply ("<?xml version='1.0'?><element/>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhandler_call_args)) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xhandler_call_args)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        bogusForceDataize.write ((((xparser).xUseForeignDTD)).apply)
                        bogusForceDataize.write ((((xparser).xSetParamEntityParsing)).apply (((xexpat).xXML_PARAM_ENTITY_PARSING_ALWAYS)))
                        (((unsupported)).apply (((xparser).xExternalEntityRefHandler)) ((xresolve_entity)))
                        bogusForceDataize.write ((((xparser).xParse)).apply ("<?xml version='1.0'?><element/>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhandler_call_args)) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))))
                xtest_ignore_use_foreign_dtd.write
                  [xself]
                    memory > xhandler_call_args
                    memory > xparser
                    memory > xresolve_entity
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xhandler_call_args.write (((unsupported)).apply)
                        xresolve_entity.write
                          [xcontext xbase xsystem_id xpublic_id]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xhandler_call_args).xappend)).apply ((((unsupported)).apply ((xpublic_id)) ((xsystem_id)))))
                                (((unsupported)).apply (1))
                        xparser.write ((((xexpat).xParserCreate)).apply)
                        bogusForceDataize.write ((((xparser).xUseForeignDTD)).apply (TRUE))
                        bogusForceDataize.write ((((xparser).xSetParamEntityParsing)).apply (((xexpat).xXML_PARAM_ENTITY_PARSING_ALWAYS)))
                        (((unsupported)).apply (((xparser).xExternalEntityRefHandler)) ((xresolve_entity)))
                        bogusForceDataize.write ((((xparser).xParse)).apply ("<?xml version='1.0'?><!DOCTYPE foo PUBLIC 'bar' 'baz'><element/>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhandler_call_args)) ((((unsupported)).apply ((((unsupported)).apply ("bar") ("baz"))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)