memory > xAnonymousUser
memory > xget_user
memory > x_clean_credentials
memory > xCustomUserWithoutIsActiveField
memory > xHttpRequest
memory > xCustomPermissionsUser
memory > xgroup
memory > xtype
memory > xoverride_settings
memory > xGroup
memory > xTypeError
memory > xContentType
memory > xfalse
memory > xBACKEND_SESSION_KEY
memory > xmodify_settings
memory > xValueError
memory > xBaseModelBackendTest
memory > xSESSION_KEY
memory > xTestCase
memory > xBaseBackend
memory > xCustomUser
memory > xExtensionUser
memory > xcredentials
memory > xdate
memory > xset
memory > xCountingMD5PasswordHasher
memory > xPermissionDenied
memory > xModelBackend
memory > xtechnical_500_response
memory > xUUIDUser
memory > xPermission
memory > xRequestFactory
memory > xsuper
memory > xsys
memory > xargs
memory > xmock
memory > xMD5PasswordHasher
memory > xgetattr
memory > xTestObj
memory > xobject
memory > xsignals
memory > xImproperlyConfigured
memory > xkwargs
memory > xisinstance
memory > xSimpleTestCase
memory > xUser
memory > xlen
[] > test_auth_backends
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_custom_perms
        memory > xtest_has_perms_perm_list_invalid
        memory > xsetUpTestData
        memory > xtest_non_string_backend
        memory > xtest_backend_path_login_without_authenticate_multiple_backends
        memory > xtest_get_all_superuser_permissions
        memory > xtest_authentication_timing
        memory > xtest_get_all_permissions
        memory > xtest_has_module_perms
        memory > xtest_authenticate
        memory > xauthenticate
        memory > xtest_backend_path
        memory > xget_all_permissions
        memory > xtest_has_perm
        memory > xtest_authentication_without_credentials
        memory > xget_user_permissions
        memory > xtest_clean_credentials_sensitive_variables
        memory > xcreate_users
        memory > xbackend
        memory > xTEST_USERNAME
        memory > xtest_login
        memory > xpassword
        memory > xuser_credentials
        memory > xtest_does_not_shadow_exception
        memory > xtest_has_perm_denied
        memory > xhas_module_perms
        memory > xtest_authenticate_sensitive_variables
        memory > xsetUp
        memory > xencode
        memory > xtest_type_error_raised
        memory > xtest_inactive_has_no_permissions
        memory > xTEST_EMAIL
        memory > xtest_get_group_permissions
        memory > xtest_get_user_permissions
        memory > xtest_raises_exception
        memory > xuser_login_failed_listener
        memory > xtest_backend_path_login_without_authenticate_single_backend
        memory > xcalls
        memory > xUserModel
        memory > xtest_has_perms
        memory > xtest_skips_backends_without_arguments
        memory > xassertBackendInSession
        memory > xusername
        memory > xhas_perm
        memory > xtest_authenticate_user_without_is_active_field
        memory > xget_group_permissions
        memory > xtest_has_no_object_perm
        memory > xtest_authenticate_inactive
        memory > xother_backend
        memory > xtest_backend_path_login_with_explicit_backends
        memory > xtest_authenticates
        memory > xtest_changed_backend_settings
        memory > xtearDown
        memory > xtest_anonymous_has_no_permissions
        memory > xtest_permission_denied
        memory > xtest_skips_backends_with_decorated_method
        memory > xtest_get_user
        memory > xTEST_PASSWORD
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xBaseBackend)))
              seq
                xget_user_permissions.write
                  [xself xuser_obj xobj]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ("user_perm"))))
                xget_group_permissions.write
                  [xself xuser_obj xobj]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ("group_perm"))))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("auth_tests.test_auth_backends.SimpleBackend"))))))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xuser)) ((((((xUser).xobjects).xcreate_user)).apply ("test") ("test@example.com") ("test"))))
                xtest_get_user_permissions.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser).xget_user_permissions)).apply)) ((((unsupported)).apply ("user_perm"))))
                xtest_get_group_permissions.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser).xget_group_permissions)).apply)) ((((unsupported)).apply ("group_perm"))))
                xtest_get_all_permissions.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser).xget_all_permissions)).apply)) ((((unsupported)).apply ("user_perm") ("group_perm"))))
                xtest_has_perm.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser).xhas_perm)).apply ("user_perm"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser).xhas_perm)).apply ("group_perm"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser).xhas_perm)).apply ("other_perm") ((((xTestObj)).apply)))) ((xfalse)))
                xtest_has_perms_perm_list_invalid.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "perm_list must be an iterable of permissions."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xuser).xhas_perms)).apply ("user_perm"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xuser).xhas_perms)).apply ((((xobject)).apply)))
            (((unsupported)).apply ((xMD5PasswordHasher)))
              seq
                unsupported
                xcalls.write 0
                xencode.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xtype)).apply ((xself))).xcalls)) (1))
                        (((unsupported)).apply (((((((xsuper)).apply).xencode)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xbackend.write "django.contrib.auth.backends.ModelBackend"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xpatched_settings)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") (((xself).xbackend)))))))
                        bogusForceDataize.write (((((xself).xpatched_settings).xenable)).apply)
                        bogusForceDataize.write ((((xself).xcreate_users)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xpatched_settings).xdisable)).apply)
                        bogusForceDataize.write (((((xContentType).xobjects).xclear_cache)).apply)
                xtest_has_perm.write
                  [xself]
                    memory > xuser
                    seq > @
                      seq
                        xuser.write (((unsupported)).apply (((((xself).xUserModel).x_default_manager).xget)) ((((xself).xuser).xpk)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perm)).apply ("auth.test"))) ((xfalse)))
                        (((unsupported)).apply (((xuser).xis_staff)) (TRUE))
                        bogusForceDataize.write ((((xuser).xsave)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perm)).apply ("auth.test"))) ((xfalse)))
                        (((unsupported)).apply (((xuser).xis_superuser)) (TRUE))
                        bogusForceDataize.write ((((xuser).xsave)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perm)).apply ("auth.test"))) (TRUE))
                        (((unsupported)).apply (((xuser).xis_staff)) (TRUE))
                        (((unsupported)).apply (((xuser).xis_superuser)) (TRUE))
                        (((unsupported)).apply (((xuser).xis_active)) ((xfalse)))
                        bogusForceDataize.write ((((xuser).xsave)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perm)).apply ("auth.test"))) ((xfalse)))
                xtest_custom_perms.write
                  [xself]
                    memory > xperm
                    memory > xcontent_type
                    memory > xexpected_user_perms
                    memory > xgroup
                    memory > xuser
                    seq > @
                      seq
                        xuser.write (((unsupported)).apply (((((xself).xUserModel).x_default_manager).xget)) ((((xself).xuser).xpk)))
                        xcontent_type.write (((((xContentType).xobjects).xget_for_model)).apply ((xGroup)))
                        xperm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test") ((xcontent_type)) ("test"))
                        bogusForceDataize.write (((((xuser).xuser_permissions).xadd)).apply ((xperm)))
                        xuser.write (((unsupported)).apply (((((xself).xUserModel).x_default_manager).xget)) ((((xself).xuser).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_all_permissions)).apply)) ((((unsupported)).apply ("auth.test"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_user_permissions)).apply)) ((((unsupported)).apply ("auth.test"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_group_permissions)).apply)) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_module_perms)).apply ("Group"))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_module_perms)).apply ("auth"))) (TRUE))
                        xperm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test2") ((xcontent_type)) ("test2"))
                        bogusForceDataize.write (((((xuser).xuser_permissions).xadd)).apply ((xperm)))
                        xperm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test3") ((xcontent_type)) ("test3"))
                        bogusForceDataize.write (((((xuser).xuser_permissions).xadd)).apply ((xperm)))
                        xuser.write (((unsupported)).apply (((((xself).xUserModel).x_default_manager).xget)) ((((xself).xuser).xpk)))
                        xexpected_user_perms.write (((unsupported)).apply ("auth.test2") ("auth.test") ("auth.test3"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_all_permissions)).apply)) ((xexpected_user_perms)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perm)).apply ("test"))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perm)).apply ("auth.test"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perms)).apply ((((unsupported)).apply ("auth.test2") ("auth.test3"))))) (TRUE))
                        xperm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test_group") ((xcontent_type)) ("test_group"))
                        xgroup.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("test_group"))
                        bogusForceDataize.write (((((xgroup).xpermissions).xadd)).apply ((xperm)))
                        bogusForceDataize.write (((((xuser).xgroups).xadd)).apply ((xgroup)))
                        xuser.write (((unsupported)).apply (((((xself).xUserModel).x_default_manager).xget)) ((((xself).xuser).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_all_permissions)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((xexpected_user_perms)))) ("auth.test_group"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_user_permissions)).apply)) ((xexpected_user_perms)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_group_permissions)).apply)) ((((unsupported)).apply ("auth.test_group"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perms)).apply ((((unsupported)).apply ("auth.test3") ("auth.test_group"))))) (TRUE))
                        xuser.write (((xAnonymousUser)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perm)).apply ("test"))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perms)).apply ((((unsupported)).apply ("auth.test2") ("auth.test3"))))) ((xfalse)))
                xtest_has_no_object_perm.write
                  [xself]
                    memory > xperm
                    memory > xuser
                    memory > xcontent_type
                    seq > @
                      seq
                        unsupported
                        xuser.write (((unsupported)).apply (((((xself).xUserModel).x_default_manager).xget)) ((((xself).xuser).xpk)))
                        xcontent_type.write (((((xContentType).xobjects).xget_for_model)).apply ((xGroup)))
                        xperm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test") ((xcontent_type)) ("test"))
                        bogusForceDataize.write (((((xuser).xuser_permissions).xadd)).apply ((xperm)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perm)).apply ("auth.test") ("object"))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_all_permissions)).apply ("object"))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xuser).xhas_perm)).apply ("auth.test"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xuser).xget_all_permissions)).apply)) ((((unsupported)).apply ("auth.test"))))
                xtest_anonymous_has_no_permissions.write
                  [xself]
                    memory > xuser_perm
                    memory > xbackend
                    memory > xcontent_type
                    memory > xgroup
                    memory > xgroup_perm
                    memory > xuser
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbackend.write (((xModelBackend)).apply)
                        xuser.write (((unsupported)).apply (((((xself).xUserModel).x_default_manager).xget)) ((((xself).xuser).xpk)))
                        xcontent_type.write (((((xContentType).xobjects).xget_for_model)).apply ((xGroup)))
                        xuser_perm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test") ((xcontent_type)) ("test_user"))
                        xgroup_perm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test2") ((xcontent_type)) ("test_group"))
                        bogusForceDataize.write (((((xuser).xuser_permissions).xadd)).apply ((xuser_perm)))
                        xgroup.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("test_group"))
                        bogusForceDataize.write (((((xuser).xgroups).xadd)).apply ((xgroup)))
                        bogusForceDataize.write (((((xgroup).xpermissions).xadd)).apply ((xgroup_perm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_all_permissions)).apply ((xuser)))) ((((unsupported)).apply ("auth.test_user") ("auth.test_group"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_user_permissions)).apply ((xuser)))) ((((unsupported)).apply ("auth.test_user"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_group_permissions)).apply ((xuser)))) ((((unsupported)).apply ("auth.test_group"))))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xself).xUserModel)) ("is_anonymous") (TRUE))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_all_permissions)).apply ((xuser)))) ((((xset)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_user_permissions)).apply ((xuser)))) ((((xset)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_group_permissions)).apply ((xuser)))) ((((xset)).apply)))
                xtest_inactive_has_no_permissions.write
                  [xself]
                    memory > xuser_perm
                    memory > xbackend
                    memory > xcontent_type
                    memory > xgroup
                    memory > xgroup_perm
                    memory > xuser
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xbackend.write (((xModelBackend)).apply)
                        xuser.write (((unsupported)).apply (((((xself).xUserModel).x_default_manager).xget)) ((((xself).xuser).xpk)))
                        xcontent_type.write (((((xContentType).xobjects).xget_for_model)).apply ((xGroup)))
                        xuser_perm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test") ((xcontent_type)) ("test_user"))
                        xgroup_perm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test2") ((xcontent_type)) ("test_group"))
                        bogusForceDataize.write (((((xuser).xuser_permissions).xadd)).apply ((xuser_perm)))
                        xgroup.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("test_group"))
                        bogusForceDataize.write (((((xuser).xgroups).xadd)).apply ((xgroup)))
                        bogusForceDataize.write (((((xgroup).xpermissions).xadd)).apply ((xgroup_perm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_all_permissions)).apply ((xuser)))) ((((unsupported)).apply ("auth.test_user") ("auth.test_group"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_user_permissions)).apply ((xuser)))) ((((unsupported)).apply ("auth.test_user"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_group_permissions)).apply ((xuser)))) ((((unsupported)).apply ("auth.test_group"))))
                        (((unsupported)).apply (((xuser).xis_active)) ((xfalse)))
                        bogusForceDataize.write ((((xuser).xsave)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_all_permissions)).apply ((xuser)))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_user_permissions)).apply ((xuser)))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbackend).xget_group_permissions)).apply ((xuser)))) ((((xset)).apply)))
                xtest_get_all_superuser_permissions.write
                  [xself]
                    memory > xuser
                    seq > @
                      seq
                        unsupported
                        xuser.write (((unsupported)).apply (((((xself).xUserModel).x_default_manager).xget)) ((((xself).xsuperuser).xpk)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xuser).xget_all_permissions)).apply)))) ((((xlen)).apply ((((((xPermission).xobjects).xall)).apply)))))
                xtest_authentication_timing.write
                  [xself]
                    memory > xusername
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write (((((xself).xuser).xset_password)).apply ("test"))
                        bogusForceDataize.write (((((xself).xuser).xsave)).apply)
                        (((unsupported)).apply (((xCountingMD5PasswordHasher).xcalls)) (0))
                        xusername.write (((xgetattr)).apply (((xself).xuser)) ((((xself).xUserModel).xUSERNAME_FIELD)))
                        (((unsupported)).apply ((xauthenticate)) ((xusername)) ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCountingMD5PasswordHasher).xcalls)) (1))
                        (((unsupported)).apply (((xCountingMD5PasswordHasher).xcalls)) (0))
                        (((unsupported)).apply ((xauthenticate)) ("no_such_user") ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCountingMD5PasswordHasher).xcalls)) (1))
                xtest_authentication_without_credentials.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xCountingMD5PasswordHasher).xcalls)) (0))
                        (((unsupported)).apply ((xcredentials)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("username") ((((xgetattr)).apply (((xself).xuser)) ((((xself).xUserModel).xUSERNAME_FIELD)))))) ((((unsupported)).apply ("password") ("test"))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcredentials)))))
                            seq
                              (((unsupported)).apply (((((xself).xassertNumQueries)).apply (0))))
                                bogusForceDataize.write (((xauthenticate)).apply ((((unsupported)).apply ((xcredentials)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xCountingMD5PasswordHasher).xcalls)) (0))
            (((unsupported)).apply ((xBaseModelBackendTest)) ((xTestCase)))
              seq
                (((unsupported)).apply)
                xUserModel.write (xUser)
                xuser_credentials.write (((unsupported)).apply ("username") ("test") ("password") ("test"))
                xcreate_users.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xuser)) ((((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("test@example.com") ((((unsupported)).apply (((xself).xuser_credentials)))))))
                        (((unsupported)).apply (((xself).xsuperuser)) ((((unsupported)).apply ((((xUser).xobjects).xcreate_superuser)) ("test2") ("test2@example.com") ("test"))))
                xtest_authenticate_inactive.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xauthenticate)).apply ((((unsupported)).apply (((xself).xuser_credentials)))))) (((xself).xuser)))
                        (((unsupported)).apply ((((xself).xuser).xis_active)) ((xfalse)))
                        bogusForceDataize.write (((((xself).xuser).xsave)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xauthenticate)).apply ((((unsupported)).apply (((xself).xuser_credentials)))))))
                xtest_authenticate_user_without_is_active_field.write
                  [xself]
                    memory > xuser
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xuser.write (((unsupported)).apply ((((xCustomUserWithoutIsActiveField).xobjects).x_create_user)) ("test") ("test@example.com") ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xauthenticate)) ("test") ("test"))) ((xuser)))
            (((unsupported)).apply ((xBaseModelBackendTest)) ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("auth_tests.ExtensionUser"))))
              seq
                (((unsupported)).apply)
                xUserModel.write (xExtensionUser)
                xcreate_users.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xuser)) ((((unsupported)).apply ((((xExtensionUser).x_default_manager).xcreate_user)) ("test") ("test@example.com") ("test") ((((xdate)).apply (2006) (4) (25))))))
                        (((unsupported)).apply (((xself).xsuperuser)) ((((unsupported)).apply ((((xExtensionUser).x_default_manager).xcreate_superuser)) ("test2") ("test2@example.com") ("test") ((((xdate)).apply (1976) (11) (8))))))
            (((unsupported)).apply ((xBaseModelBackendTest)) ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("auth_tests.CustomPermissionsUser"))))
              seq
                (((unsupported)).apply)
                xUserModel.write (xCustomPermissionsUser)
                xcreate_users.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xuser)) ((((unsupported)).apply ((((xCustomPermissionsUser).x_default_manager).xcreate_user)) ("test@example.com") ("test") ((((xdate)).apply (2006) (4) (25))))))
                        (((unsupported)).apply (((xself).xsuperuser)) ((((unsupported)).apply ((((xCustomPermissionsUser).x_default_manager).xcreate_superuser)) ("test2@example.com") ("test") ((((xdate)).apply (1976) (11) (8))))))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("auth_tests.CustomUser"))))
              seq
                (((unsupported)).apply)
                xtest_authenticate.write
                  [xself]
                    memory > xauthenticated_user
                    memory > xtest_user
                    seq > @
                      seq
                        xtest_user.write (((unsupported)).apply ((((xCustomUser).x_default_manager).xcreate_user)) ("test@example.com") ("test") ((((xdate)).apply (2006) (4) (25))))
                        xauthenticated_user.write (((unsupported)).apply ((xauthenticate)) ("test@example.com") ("test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtest_user)) ((xauthenticated_user)))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("auth_tests.UUIDUser"))))
              xtest_login.write
                [xself]
                  memory > xuser
                  seq > @
                    seq
                      (((unsupported)).apply)
                      xuser.write (((unsupported)).apply ((((xUUIDUser).xobjects).xcreate_user)) ("uuid") ("test"))
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xself).xclient).xlogin)) ("uuid") ("test"))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xUUIDUser).xobjects).xget)) ((((unsupported)).apply ((((xself).xclient).xsession)) ((xSESSION_KEY)))))) ((xuser)))
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xhas_perm.write
                  [xself xuser xperm xobj]
                    seq > @
                      (((unsupported)).apply)
                        ((xobj).not).if
                          (((unsupported)).apply)
                        (((xisinstance)).apply ((xobj)) ((xTestObj))).if
                          (((xuser).xusername).eq "test2").if
                            (((unsupported)).apply (TRUE))
                            (((xuser).xis_anonymous).and ((xperm).eq "anon")).if
                              (((unsupported)).apply (TRUE))
                              ((((xuser).xis_active).not).and ((xperm).eq "inactive")).if
                                (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xfalse)))
                xhas_module_perms.write
                  [xself xuser xapp_label]
                    seq > @
                      (((unsupported)).apply (((((xuser).xis_anonymous).or ((xuser).xis_active)).and ((xapp_label).eq "app1"))))
                xget_all_permissions.write
                  [xself xuser xobj]
                    seq > @
                      (((unsupported)).apply)
                        ((xobj).not).if
                          (((unsupported)).apply ((((unsupported)).apply)))
                        ((((xisinstance)).apply ((xobj)) ((xTestObj))).not).if
                          (((unsupported)).apply ((((unsupported)).apply ("none"))))
                        ((xuser).xis_anonymous).if
                          (((unsupported)).apply ((((unsupported)).apply ("anon"))))
                        (((xuser).xusername).eq "test2").if
                          (((unsupported)).apply ((((unsupported)).apply ("simple") ("advanced"))))
                          (((unsupported)).apply ((((unsupported)).apply ("simple"))))
                xget_group_permissions.write
                  [xself xuser xobj]
                    seq > @
                      (((unsupported)).apply)
                        ((xobj).not).if
                          (((unsupported)).apply)
                        ((((xisinstance)).apply ((xobj)) ((xTestObj))).not).if
                          (((unsupported)).apply ((((unsupported)).apply ("none"))))
                        (((unsupported)).apply ("test_group") ((((unsupported)).apply (((xgroup).xname)) ((xgroup)) ((((((xuser).xgroups).xall)).apply))))).if
                          (((unsupported)).apply ((((unsupported)).apply ("group_perm"))))
                          (((unsupported)).apply ((((unsupported)).apply ("none"))))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("auth_tests.test_auth_backends.SimpleRowlevelBackend"))))))
              seq
                (((unsupported)).apply)
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xuser1)) ((((((xUser).xobjects).xcreate_user)).apply ("test") ("test@example.com") ("test"))))
                        (((unsupported)).apply (((xcls).xuser2)) ((((((xUser).xobjects).xcreate_user)).apply ("test2") ("test2@example.com") ("test"))))
                        (((unsupported)).apply (((xcls).xuser3)) ((((((xUser).xobjects).xcreate_user)).apply ("test3") ("test3@example.com") ("test"))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xContentType).xobjects).xclear_cache)).apply)
                xtest_has_perm.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_perm)).apply ("perm") ((((xTestObj)).apply)))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser2).xhas_perm)).apply ("perm") ((((xTestObj)).apply)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser2).xhas_perm)).apply ("perm"))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser2).xhas_perms)).apply ((((unsupported)).apply ("simple") ("advanced"))) ((((xTestObj)).apply)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser3).xhas_perm)).apply ("perm") ((((xTestObj)).apply)))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser3).xhas_perm)).apply ("anon") ((((xTestObj)).apply)))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser3).xhas_perms)).apply ((((unsupported)).apply ("simple") ("advanced"))) ((((xTestObj)).apply)))) ((xfalse)))
                xtest_get_all_permissions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser1).xget_all_permissions)).apply ((((xTestObj)).apply)))) ((((unsupported)).apply ("simple"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser2).xget_all_permissions)).apply ((((xTestObj)).apply)))) ((((unsupported)).apply ("simple") ("advanced"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser2).xget_all_permissions)).apply)) ((((xset)).apply)))
                xtest_get_group_permissions.write
                  [xself]
                    memory > xgroup
                    seq > @
                      seq
                        xgroup.write (((unsupported)).apply ((((xGroup).xobjects).xcreate)) ("test_group"))
                        bogusForceDataize.write ((((((xself).xuser3).xgroups).xadd)).apply ((xgroup)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser3).xget_group_permissions)).apply ((((xTestObj)).apply)))) ((((unsupported)).apply ("group_perm"))))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("auth_tests.test_auth_backends.SimpleRowlevelBackend"))))))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xuser1)) ((((xAnonymousUser)).apply)))
                xtest_has_perm.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_perm)).apply ("perm") ((((xTestObj)).apply)))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_perm)).apply ("anon") ((((xTestObj)).apply)))) (TRUE))
                xtest_has_perms.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_perms)).apply ((((unsupported)).apply ("anon"))) ((((xTestObj)).apply)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_perms)).apply ((((unsupported)).apply ("anon") ("perm"))) ((((xTestObj)).apply)))) ((xfalse)))
                xtest_has_perms_perm_list_invalid.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "perm_list must be an iterable of permissions."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xuser1).xhas_perms)).apply ("perm"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xuser1).xhas_perms)).apply ((((xobject)).apply)))
                xtest_has_module_perms.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_module_perms)).apply ("app1"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_module_perms)).apply ("app2"))) ((xfalse)))
                xtest_get_all_permissions.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xuser1).xget_all_permissions)).apply ((((xTestObj)).apply)))) ((((unsupported)).apply ("anon"))))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply)))))
              seq
                (((unsupported)).apply)
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xuser)) ((((((xUser).xobjects).xcreate_user)).apply ("test") ("test@example.com") ("test"))))
                xtest_raises_exception.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "No authentication backends have been defined. Does AUTHENTICATION_BACKENDS contain anything?"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImproperlyConfigured)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xuser).xhas_perm)).apply ((((unsupported)).apply ("perm") ((((xTestObj)).apply)))))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("auth_tests.test_auth_backends.SimpleRowlevelBackend"))))))
              seq
                (((unsupported)).apply)
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xuser1)) ((((((xUser).xobjects).xcreate_user)).apply ("test") ("test@example.com") ("test"))))
                        (((unsupported)).apply ((((xcls).xuser1).xis_active)) ((xfalse)))
                        bogusForceDataize.write (((((xcls).xuser1).xsave)).apply)
                xtest_has_perm.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_perm)).apply ("perm") ((((xTestObj)).apply)))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_perm)).apply ("inactive") ((((xTestObj)).apply)))) (TRUE))
                xtest_has_module_perms.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_module_perms)).apply ("app1"))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_module_perms)).apply ("app2"))) ((xfalse)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xauthenticate.write
                  [xself xrequest xusername xpassword]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xPermissionDenied)))
                xhas_perm.write
                  [xself xuser_obj xperm xobj]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xPermissionDenied)))
                xhas_module_perms.write
                  [xself xuser_obj xapp_label]
                    seq > @
                      (((unsupported)).apply ((xPermissionDenied)))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xbackend.write "auth_tests.test_auth_backends.PermissionDeniedBackend"
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xuser1)) ((((((xUser).xobjects).xcreate_user)).apply ("test") ("test@example.com") ("test"))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xuser_login_failed)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xsignals).xuser_login_failed).xconnect)).apply (((xself).xuser_login_failed_listener)))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xsignals).xuser_login_failed).xdisconnect)).apply (((xself).xuser_login_failed_listener)))
                xuser_login_failed_listener.write
                  [xself xsender xcredentials]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xuser_login_failed).xappend)).apply ((xcredentials)))
                xtest_permission_denied.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((unsupported)).apply ((xauthenticate)) ("test") ("test"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xself).xuser_login_failed)) ((((unsupported)).apply ((((unsupported)).apply ("password") ("********************") ("username") ("test"))))))
                xtest_authenticates.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xauthenticate)) ("test") ("test"))) (((xself).xuser1)))
                xtest_has_perm_denied.write
                  [xself]
                    memory > xperm
                    memory > xcontent_type
                    seq > @
                      (((unsupported)).apply)
                        xcontent_type.write (((((xContentType).xobjects).xget_for_model)).apply ((xGroup)))
                        xperm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test") ((xcontent_type)) ("test"))
                        bogusForceDataize.write ((((((xself).xuser1).xuser_permissions).xadd)).apply ((xperm)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_perm)).apply ("auth.test"))) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_module_perms)).apply ("auth"))) ((xfalse)))
                xtest_has_perm.write
                  [xself]
                    memory > xperm
                    memory > xcontent_type
                    seq > @
                      (((unsupported)).apply)
                        xcontent_type.write (((((xContentType).xobjects).xget_for_model)).apply ((xGroup)))
                        xperm.write (((unsupported)).apply ((((xPermission).xobjects).xcreate)) ("test") ((xcontent_type)) ("test"))
                        bogusForceDataize.write ((((((xself).xuser1).xuser_permissions).xadd)).apply ((xperm)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_perm)).apply ("auth.test"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xuser1).xhas_module_perms)).apply ("auth"))) (TRUE))
            (((unsupported)).apply ((xModelBackend)))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xbackend.write "auth_tests.test_auth_backends.NewModelBackend"
                xTEST_USERNAME.write "test_user"
                xTEST_PASSWORD.write "test_password"
                xTEST_EMAIL.write "test@example.com"
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xUser).xobjects).xcreate_user)).apply (((xcls).xTEST_USERNAME)) (((xcls).xTEST_EMAIL)) (((xcls).xTEST_PASSWORD)))
                xtest_changed_backend_settings.write
                  [xself]
                    memory > xuser
                    memory > xrequest
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xself).xclient).xlogin)) (((xself).xTEST_USERNAME)) (((xself).xTEST_PASSWORD)))))
                        xrequest.write (((xHttpRequest)).apply)
                        (((unsupported)).apply (((xrequest).xsession)) ((((xself).xclient).xsession)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ("django.contrib.auth.backends.ModelBackend"))))))
                          seq
                            xuser.write (((xget_user)).apply ((xrequest)))
                            bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xuser)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xuser).xis_anonymous)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xauthenticate.write
                  [xself xrequest xusername xpassword]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xTypeError)))
            (((unsupported)).apply)
              xauthenticate.write
                [xself]
                  seq > @
            (((unsupported)).apply)
              xauthenticate.write
                [xself]
                  seq > @
                    (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xuser1)) ((((((xUser).xobjects).xcreate_user)).apply ("test") ("test@example.com") ("test"))))
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xsensitive_password)) ("mypassword"))
                xtest_type_error_raised.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xauthenticate)) ("test") ("test"))
                xtest_authenticate_sensitive_variables.write
                  [xself]
                    memory > xrf
                    memory > xresponse
                    memory > xexc_info
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xTypeError)))
                          (((unsupported)).apply ((xauthenticate)) ("testusername") (((xself).xsensitive_password)))
                          xexc_info.write ((((xsys).xexc_info)).apply)
                        xrf.write (((xRequestFactory)).apply)
                        xresponse.write (((xtechnical_500_response)).apply (((((xrf).xget)).apply ("/"))) ((((unsupported)).apply ((xexc_info)))))
                        (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) (((xself).xsensitive_password)) (500))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("TypeErrorBackend") (500))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<tr><td>credentials</td><td class=\"code\"><pre>&#39;********************&#39;</pre></td></tr>") (TRUE) (500))
                xtest_clean_credentials_sensitive_variables.write
                  [xself]
                    memory > xrf
                    memory > xresponse
                    memory > xexc_info
                    seq > @
                      seq
                        (((unsupported)).apply ((xTypeError)))
                          bogusForceDataize.write (((x_clean_credentials)).apply ((((unsupported)).apply (1) (((xself).xsensitive_password)))))
                          xexc_info.write ((((xsys).xexc_info)).apply)
                        xrf.write (((xRequestFactory)).apply)
                        xresponse.write (((xtechnical_500_response)).apply (((((xrf).xget)).apply ("/"))) ((((unsupported)).apply ((xexc_info)))))
                        (((unsupported)).apply (((xself).xassertNotContains)) ((xresponse)) (((xself).xsensitive_password)) (500))
                        (((unsupported)).apply (((xself).xassertContains)) ((xresponse)) ("<tr><td>credentials</td><td class=\"code\"><pre>&#39;********************&#39;</pre></td></tr>") (TRUE) (500))
                xtest_skips_backends_without_arguments.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xauthenticate)) ("test") ("test"))) (((xself).xuser1)))
                xtest_skips_backends_with_decorated_method.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xauthenticate)) ("test") ("test"))) (((xself).xuser1)))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xuser1)) ((((((xUser).xobjects).xcreate_user)).apply ("test") ("test@example.com") ("test"))))
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xclient).xlogin)) ("test") ("test"))
                xtest_does_not_shadow_exception.write
                  [xself]
                    memory > xrequest
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xrequest.write (((xHttpRequest)).apply)
                        (((unsupported)).apply (((xrequest).xsession)) ((((xself).xclient).xsession)))
                        xmsg.write "AUTH_USER_MODEL refers to model 'thismodel.doesntexist' that has not been installed"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImproperlyConfigured)) ((xmsg)))))
                          bogusForceDataize.write (((xget_user)).apply ((xrequest)))
            (((unsupported)).apply ((xModelBackend)))
            (((unsupported)).apply ((xModelBackend)))
            (((unsupported)).apply ((xModelBackend)))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xbackend.write "auth_tests.backend_alias.ImportedModelBackend"
                xtest_backend_path.write
                  [xself]
                    memory > xpassword
                    memory > xusername
                    memory > xrequest
                    seq > @
                      (((unsupported)).apply)
                        xusername.write "username"
                        xpassword.write "password"
                        bogusForceDataize.write (((((xUser).xobjects).xcreate_user)).apply ((xusername)) ("email") ((xpassword)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xself).xclient).xlogin)) ((xusername)) ((xpassword)))))
                        xrequest.write (((xHttpRequest)).apply)
                        (((unsupported)).apply (((xrequest).xsession)) ((((xself).xclient).xsession)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xrequest).xsession)) ((xBACKEND_SESSION_KEY)))) (((xself).xbackend)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xbackend.write "auth_tests.test_auth_backends.CustomModelBackend"
                xother_backend.write "auth_tests.test_auth_backends.OtherModelBackend"
                xusername.write "username"
                xpassword.write "password"
                xassertBackendInSession.write
                  [xself xbackend]
                    memory > xrequest
                    seq > @
                      seq
                        xrequest.write (((xHttpRequest)).apply)
                        (((unsupported)).apply (((xrequest).xsession)) ((((xself).xclient).xsession)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xrequest).xsession)) ((xBACKEND_SESSION_KEY)))) ((xbackend)))
                xtest_backend_path_login_without_authenticate_single_backend.write
                  [xself]
                    memory > xuser
                    seq > @
                      (((unsupported)).apply)
                        xuser.write (((((xUser).xobjects).xcreate_user)).apply (((xself).xusername)) ("email") (((xself).xpassword)))
                        bogusForceDataize.write (((((xself).xclient).x_login)).apply ((xuser)))
                        bogusForceDataize.write ((((xself).xassertBackendInSession)).apply (((xself).xbackend)))
                xtest_backend_path_login_without_authenticate_multiple_backends.write
                  [xself]
                    memory > xuser
                    memory > xexpected_message
                    seq > @
                      (((unsupported)).apply)
                        xuser.write (((((xUser).xobjects).xcreate_user)).apply (((xself).xusername)) ("email") (((xself).xpassword)))
                        xexpected_message.write "You have multiple authentication backends configured and therefore must provide the `backend` argument or set the `backend` attribute on the user."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xexpected_message)))))
                          bogusForceDataize.write (((((xself).xclient).x_login)).apply ((xuser)))
                xtest_non_string_backend.write
                  [xself]
                    memory > xuser
                    memory > xexpected_message
                    seq > @
                      seq
                        xuser.write (((((xUser).xobjects).xcreate_user)).apply (((xself).xusername)) ("email") (((xself).xpassword)))
                        xexpected_message.write "backend must be a dotted import path string (got <class 'django.contrib.auth.backends.ModelBackend'>)."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xexpected_message)))))
                          (((unsupported)).apply ((((xself).xclient).x_login)) ((xuser)) ((xModelBackend)))
                xtest_backend_path_login_with_explicit_backends.write
                  [xself]
                    memory > xuser
                    seq > @
                      (((unsupported)).apply)
                        xuser.write (((((xUser).xobjects).xcreate_user)).apply (((xself).xusername)) ("email") (((xself).xpassword)))
                        bogusForceDataize.write (((((xself).xclient).x_login)).apply ((xuser)) (((xself).xother_backend)))
                        bogusForceDataize.write ((((xself).xassertBackendInSession)).apply (((xself).xother_backend)))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("django.contrib.auth.backends.AllowAllUsersModelBackend"))))))
              seq
                (((unsupported)).apply)
                xuser_credentials.write (((unsupported)).apply ("username") ("test") ("password") ("test"))
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xuser)) ((((unsupported)).apply ((((xUser).xobjects).xcreate_user)) ("test@example.com") ((xfalse)) ((((unsupported)).apply (((xcls).xuser_credentials)))))))
                xtest_authenticate.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertfalse)).apply ((((xself).xuser).xis_active)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xauthenticate)).apply ((((unsupported)).apply (((xself).xuser_credentials)))))) (((xself).xuser)))
                xtest_get_user.write
                  [xself]
                    memory > xuser
                    memory > xrequest
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xclient).xforce_login)).apply (((xself).xuser)))
                        xrequest.write (((xHttpRequest)).apply)
                        (((unsupported)).apply (((xrequest).xsession)) ((((xself).xclient).xsession)))
                        xuser.write (((xget_user)).apply ((xrequest)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xuser)) (((xself).xuser)))