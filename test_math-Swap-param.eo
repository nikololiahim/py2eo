memory > xk
memory > xarg_real
memory > xTestFloor
memory > xrun_unittest
memory > xplatform
memory > xv2
memory > xexp_real
memory > xflags
memory > xbin
memory > xexpected
memory > xshuffle
memory > xlist
memory > xdecimal
memory > xTestNoCeil
memory > xenumerate
memory > xulp_tol
memory > xIsCloseTests
memory > xpx
memory > xv1
memory > xValueError
memory > xfunc
memory > xrange
memory > xmath
memory > xqx
memory > xDocFileSuite
memory > xb
memory > xvalue
memory > xlhs
memory > xT
memory > xbytearray
memory > xTestNoTrunc
memory > xcase
memory > xe1
memory > xfn
memory > xfr
memory > xmax
memory > xrhs
memory > xeexp
memory > xrandom
memory > xopen
memory > xreversed
memory > xMathTests
memory > xany
memory > xtype
memory > xFraction
memory > xint
memory > xemant
memory > xOverflowError
memory > xsum
memory > xx
memory > xi
memory > xfx
memory > xF
memory > xstruct
memory > xarg
memory > xTestNoFloor
memory > xs
memory > xsupport
memory > xsys
memory > xbool
memory > xgauss
memory > xm
memory > xtuple
memory > xe2
memory > xexp
memory > xfloat
memory > xfloat_info
memory > xar
memory > xexp_imag
memory > xargs
memory > xitertools
memory > xos
memory > xx_hex
memory > xei
memory > xabs_tol
memory > xgetattr
memory > xexpected_hex
memory > xid
memory > xfy
memory > xmant
memory > xTestTrunc
memory > xiter
memory > xe
memory > x__file__
memory > xDecimal
memory > xelem
memory > xzip
memory > xunittest
memory > xy
memory > xMyIndexable
memory > xmap
memory > xn
memory > xobject
memory > xarg_imag
memory > xIntSubclass
memory > xkwargs
memory > xabs
memory > xIntegerLike
memory > xline
memory > xlen
memory > xy_hex
memory > xTestCeil
memory > xj
memory > xisinstance
memory > xfp
memory > xai
memory > xTypeError
memory > x__name__
memory > xa
[] > test_math
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtestAsin
        memory > xtest_eight_decimal_places
        memory > xtestAtan2
        memory > xeps
        memory > xtestFmod
        memory > xtest_near_zero
        memory > xtest_zero_tolerance
        memory > xtestLog
        memory > xtestIsinf
        memory > xtestLog1p
        memory > xtest_inf_constant
        memory > xtestSqrt
        memory > xtestFactorialNonIntegers
        memory > xFLOAT_MIN
        memory > x__index__
        memory > xassertAllClose
        memory > xtestCos
        memory > xtestCopysign
        memory > xtestHypot
        memory > xtest_exceptions
        memory > xtestRemainder
        memory > xmath_testcases
        memory > xtestFsum
        memory > xtest_decimals
        memory > xtestCeil
        memory > xtestAcos
        memory > xfile
        memory > xFLOAT_MAX
        memory > xtestPerm
        memory > xtestIsfinite
        memory > xtestRadians
        memory > xtest_main
        memory > xtestFactorialHugeInputs
        memory > xparse_mtestfile
        memory > xassertAllNotClose
        memory > xtest_dir
        memory > xtest_trunc
        memory > xulp_abs_check
        memory > xtest_issue39871
        memory > xtestIsqrt
        memory > xtest_asymmetry
        memory > xNINF
        memory > xtest_identical
        memory > xtest_integers
        memory > xtestAtan
        memory > xtest_inf_ninf_nan
        memory > xulp
        memory > xtestAtanh
        memory > xtest_fractions
        memory > xisclose
        memory > xtestLog10
        memory > xtest_identical_infinite
        memory > xtestSin
        memory > xtestTanhSign
        memory > xpartial_product
        memory > xassertIsNotClose
        memory > xtestAcosh
        memory > xtest_negative_tolerances
        memory > xtestLdexp
        memory > xftest
        memory > xcount_set_bits
        memory > xtestModf
        memory > xtestLog2Exact
        memory > xtest_testfile
        memory > xtestFabs
        memory > xHAVE_DOUBLE_ROUNDING
        memory > xtestGcd
        memory > xtestPow
        memory > xtestIsnan
        memory > xtestLog2
        memory > xtest_mtestfile
        memory > xtestDist
        memory > xtestFloor
        memory > xtestTanh
        memory > xparse_testfile
        memory > x__init__
        memory > xtestAsinh
        memory > xassertIsNaN
        memory > xtestFactorial
        memory > xtestTan
        memory > xtestConstants
        memory > xto_ulps
        memory > xtestExp
        memory > xtest_prod
        memory > xtestCosh
        memory > xtestComb
        memory > xINF
        memory > xtestFrexp
        memory > xtestDegrees
        memory > xtest_nan_constant
        memory > xpy_factorial
        memory > xtest_file
        memory > xtestSinh
        memory > xNAN
        memory > xresult_check
        memory > xassertIsClose
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xeps.write (((unsupported)).apply)
            xNAN.write (((xfloat)).apply ("nan"))
            xINF.write (((xfloat)).apply ("inf"))
            xNINF.write (((xfloat)).apply ("-inf"))
            xFLOAT_MAX.write (((xsys).xfloat_info).xmax)
            xFLOAT_MIN.write (((xsys).xfloat_info).xmin)
            (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((((unsupported)).apply)) (2.9999))))
            xHAVE_DOUBLE_ROUNDING.write (((xx).add (xy)).eq ((((unsupported)).apply).add 4))
            ((x__name__).eq "__main__").if
              xfile.write (((unsupported)).apply (((xsys).xargv)) (0))
              xfile.write (x__file__)
            xtest_dir.write ((((((xos).xpath).xdirname)).apply ((xfile))).or ((xos).xcurdir))
            xmath_testcases.write (((((xos).xpath).xjoin)).apply ((xtest_dir)) ("math_testcases.txt"))
            xtest_file.write (((((xos).xpath).xjoin)).apply ((xtest_dir)) ("cmath_testcases.txt"))
            xto_ulps.write
              [xx]
                memory > xn
                seq > @
                  seq
                    (((unsupported)).apply)
                    xn.write (((unsupported)).apply (((((xstruct).xunpack)).apply ("<q") (((((xstruct).xpack)).apply ("<d") ((xx)))))) (0))
                    ((xn).less 0).if
                      xn.write (((xn).add (((unsupported)).apply (2) (63))).neg)
                    (((unsupported)).apply ((xn)))
            xulp.write
              [xx]
                memory > xn
                memory > xx_prev
                memory > xx_next
                seq > @
                  seq
                    (((unsupported)).apply)
                    xx.write (((xabs)).apply ((((xfloat)).apply ((xx)))))
                    (((((xmath).xisnan)).apply ((xx))).or ((((xmath).xisinf)).apply ((xx)))).if
                      (((unsupported)).apply ((xx)))
                    xn.write (((unsupported)).apply (((((xstruct).xunpack)).apply ("<q") (((((xstruct).xpack)).apply ("<d") ((xx)))))) (0))
                    xx_next.write (((unsupported)).apply (((((xstruct).xunpack)).apply ("<d") (((((xstruct).xpack)).apply ("<q") (((xn).add 1)))))) (0))
                    ((((xmath).xisinf)).apply ((xx_next))).if
                      seq
                        xx_prev.write (((unsupported)).apply (((((xstruct).xunpack)).apply ("<d") (((((xstruct).xpack)).apply ("<q") (((xn).sub 1)))))) (0))
                        (((unsupported)).apply (((xx).sub (xx_prev))))
                      (((unsupported)).apply (((xx_next).sub (xx))))
            xcount_set_bits.write
              [xn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply (((xn).if (1.add (((xcount_set_bits)).apply (((xn).and ((xn).sub 1))))) 0)))
            xpartial_product.write
              [xstart xstop]
                memory > xnumfactors
                memory > xmid
                seq > @
                  seq
                    (((unsupported)).apply)
                    xnumfactors.write (((unsupported)).apply (((xstop).sub (xstart))) (1))
                    ((xnumfactors).not).if
                      (((unsupported)).apply (1))
                      ((xnumfactors).eq 1).if
                        (((unsupported)).apply ((xstart)))
                        seq
                          xmid.write (((xstart).add (xnumfactors)).or 1)
                          (((unsupported)).apply (((((xpartial_product)).apply ((xstart)) ((xmid))).mul (((xpartial_product)).apply ((xmid)) ((xstop))))))
            xpy_factorial.write
              [xn]
                memory > xinner
                memory > xouter
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xinner)) ((xouter)) (1))
                    (((unsupported)).apply ((xi)) ((((xreversed)).apply ((((xrange)).apply (((((xn).xbit_length)).apply)))))))
                      seq
                        (((unsupported)).apply ((xinner)) ((((xpartial_product)).apply ((((((unsupported)).apply ((xn)) (((xi).add 1))).add 1).or 1)) ((((((unsupported)).apply ((xn)) ((xi))).add 1).or 1)))))
                        (((unsupported)).apply ((xouter)) ((xinner)))
                    (((unsupported)).apply ((((unsupported)).apply ((xouter)) (((xn).sub (((xcount_set_bits)).apply ((xn))))))))
            xulp_abs_check.write
              [xexpected xgot xulp_tol xabs_tol]
                memory > xulp_error
                memory > xabs_error
                memory > xfmt
                seq > @
                  seq
                    (((unsupported)).apply)
                    xulp_error.write (((xabs)).apply (((((xto_ulps)).apply ((xexpected))).sub (((xto_ulps)).apply ((xgot))))))
                    xabs_error.write (((xabs)).apply (((xexpected).sub (xgot))))
                    (((xabs_error).leq (xabs_tol)).or ((xulp_error).leq (xulp_tol))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                      seq
                        xfmt.write "error = {:.3g} ({:d} ulps); permitted error = {:.3g} or {:d} ulps"
                        (((unsupported)).apply (((((xfmt).xformat)).apply ((xabs_error)) ((xulp_error)) ((xabs_tol)) ((xulp_tol)))))
            xparse_mtestfile.write
              [xfname]
                memory > xexp
                memory > xrhs_pieces
                memory > xflags
                memory > xline
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xopen)).apply ((xfname)))) ((xfp)))
                      (((unsupported)).apply ((xline)) ((xfp)))
                        seq
                          (((unsupported)).apply ("--") ((xline))).if
                            xline.write (((unsupported)).apply ((xline)) ((((unsupported)).apply (((((xline).xindex)).apply ("--"))))))
                          (((((xline).xstrip)).apply).not).if
                            (((unsupported)).apply)
                          (((unsupported)).apply ((((unsupported)).apply ((xlhs)) ((xrhs)))) (((((xline).xsplit)).apply ("->"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xid)) ((xfn)) ((xarg)))) (((((xlhs).xsplit)).apply)))
                          xrhs_pieces.write ((((xrhs).xsplit)).apply)
                          xexp.write (((unsupported)).apply ((xrhs_pieces)) (0))
                          xflags.write (((unsupported)).apply ((xrhs_pieces)) ((((unsupported)).apply (1))))
                          (((unsupported)).apply ((((unsupported)).apply ((xid)) ((xfn)) ((((xfloat)).apply ((xarg)))) ((((xfloat)).apply ((xexp)))) ((xflags)))))
            xparse_testfile.write
              [xfname]
                memory > xrhs_pieces
                memory > xflags
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xopen)).apply ((xfname)))) ((xfp)))
                      (((unsupported)).apply ((xline)) ((xfp)))
                        seq
                          (((((xline).xstartswith)).apply ("--")).or (((((xline).xstrip)).apply).not)).if
                            (((unsupported)).apply)
                          (((unsupported)).apply ((((unsupported)).apply ((xlhs)) ((xrhs)))) (((((xline).xsplit)).apply ("->"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xid)) ((xfn)) ((xarg_real)) ((xarg_imag)))) (((((xlhs).xsplit)).apply)))
                          xrhs_pieces.write ((((xrhs).xsplit)).apply)
                          (((unsupported)).apply ((((unsupported)).apply ((xexp_real)) ((xexp_imag)))) ((((unsupported)).apply ((((unsupported)).apply ((xrhs_pieces)) (0))) ((((unsupported)).apply ((xrhs_pieces)) (1))))))
                          xflags.write (((unsupported)).apply ((xrhs_pieces)) ((((unsupported)).apply (2))))
                          (((unsupported)).apply ((((unsupported)).apply ((xid)) ((xfn)) ((((xfloat)).apply ((xarg_real)))) ((((xfloat)).apply ((xarg_imag)))) ((((xfloat)).apply ((xexp_real)))) ((((xfloat)).apply ((xexp_imag)))) ((xflags)))))
            xresult_check.write
              [xexpected xgot xulp_tol xabs_tol]
                memory > xfail_fmt
                memory > xfailure
                memory > xfail_msg
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((xgot).eq (xexpected)).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    xfailure.write "not equal"
                    ((((xisinstance)).apply ((xexpected)) ((xfloat))).and (((xisinstance)).apply ((xgot)) ((xint)))).if
                      xgot.write (((xfloat)).apply ((xgot)))
                      ((((xisinstance)).apply ((xgot)) ((xfloat))).and (((xisinstance)).apply ((xexpected)) ((xint)))).if
                        xexpected.write (((xfloat)).apply ((xexpected)))
                    ((((xisinstance)).apply ((xexpected)) ((xfloat))).and (((xisinstance)).apply ((xgot)) ((xfloat)))).if
                      (((((xmath).xisnan)).apply ((xexpected))).and ((((xmath).xisnan)).apply ((xgot)))).if
                        xfailure.write "None: is there a None literal in the EO language?"
                        (((((xmath).xisinf)).apply ((xexpected))).or ((((xmath).xisinf)).apply ((xgot)))).if
                          xfailure.write (((xulp_abs_check)).apply ((xexpected)) ((xgot)) ((xulp_tol)) ((xabs_tol)))
                    (((unsupported)).apply ((xfailure)) ("None: is there a None literal in the EO language?")).if
                      seq
                        xfail_fmt.write "expected {!r}, got {!r}"
                        xfail_msg.write ((((xfail_fmt).xformat)).apply ((xexpected)) ((xgot)))
                        (((unsupported)).apply ((xfail_msg)) ((((" ({})".xformat)).apply ((xfailure)))))
                        (((unsupported)).apply ((xfail_msg)))
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply ((xint)))
            (((unsupported)).apply ((xobject)))
              seq
                x__init__.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                x__index__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xftest.write
                  [xself xname xgot xexpected xulp_tol xabs_tol]
                    memory > xfailure
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xfailure.write (((xresult_check)).apply ((xexpected)) ((xgot)) ((xulp_tol)) ((xabs_tol)))
                        (((unsupported)).apply ((xfailure)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xfail)).apply (((("{}: {}".xformat)).apply ((xname)) ((xfailure)))))
                xtestConstants.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xftest)).apply ("pi") (((xmath).xpi)) (3.141592653589793238462643))
                        bogusForceDataize.write ((((xself).xftest)).apply ("e") (((xmath).xe)) (2.718281828459045235360287))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmath).xtau)) ((2.mul ((xmath).xpi))))
                xtestAcos.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xacos)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("acos(-1)") (((((xmath).xacos)).apply ((1.neg)))) (((xmath).xpi)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("acos(0)") (((((xmath).xacos)).apply (0))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("acos(1)") (((((xmath).xacos)).apply (1))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xacos)) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xacos)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xacos)) ((1.add (xeps))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xacos)) (((1.neg).sub (xeps))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xacos)).apply ((xNAN)))))))
                xtestAcosh.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xacosh)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("acosh(1)") (((((xmath).xacosh)).apply (1))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("acosh(2)") (((((xmath).xacosh)).apply (2))) (1.3169578969248168))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xacosh)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xacosh)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xacosh)).apply ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xacosh)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xacosh)).apply ((xNAN)))))))
                xtestAsin.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xasin)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("asin(-1)") (((((xmath).xasin)).apply ((1.neg)))) (((((xmath).xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("asin(0)") (((((xmath).xasin)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("asin(1)") (((((xmath).xasin)).apply (1))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xasin)) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xasin)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xasin)) ((1.add (xeps))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xasin)) (((1.neg).sub (xeps))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xasin)).apply ((xNAN)))))))
                xtestAsinh.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xasinh)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("asinh(0)") (((((xmath).xasinh)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("asinh(1)") (((((xmath).xasinh)).apply (1))) (0.88137358701954305))
                        bogusForceDataize.write ((((xself).xftest)).apply ("asinh(-1)") (((((xmath).xasinh)).apply ((1.neg)))) ((0.88137358701954305.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xasinh)).apply ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xasinh)).apply ((xNINF)))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xasinh)).apply ((xNAN)))))))
                xtestAtan.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xatan)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan(-1)") (((((xmath).xatan)).apply ((1.neg)))) (((((xmath).xpi).neg).div 4)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan(0)") (((((xmath).xatan)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan(1)") (((((xmath).xatan)).apply (1))) ((((xmath).xpi).div 4)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan(inf)") (((((xmath).xatan)).apply ((xINF)))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan(-inf)") (((((xmath).xatan)).apply ((xNINF)))) (((((xmath).xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan)).apply ((xNAN)))))))
                xtestAtanh.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xatan)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atanh(0)") (((((xmath).xatanh)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atanh(0.5)") (((((xmath).xatanh)).apply (0.5))) (0.54930614433405489))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atanh(-0.5)") (((((xmath).xatanh)).apply ((0.5.neg)))) ((0.54930614433405489.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xatanh)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xatanh)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xatanh)) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xatanh)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatanh)).apply ((xNAN)))))))
                xtestAtan2.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xatan2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-1, 0)") (((((xmath).xatan2)).apply ((1.neg)) (0))) (((((xmath).xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-1, 1)") (((((xmath).xatan2)).apply ((1.neg)) (1))) (((((xmath).xpi).neg).div 4)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(0, 1)") (((((xmath).xatan2)).apply (0) (1))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(1, 1)") (((((xmath).xatan2)).apply (1) (1))) ((((xmath).xpi).div 4)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(1, 0)") (((((xmath).xatan2)).apply (1) (0))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(0., -inf)") (((((xmath).xatan2)).apply ((((unsupported)).apply)) ((xNINF)))) (((xmath).xpi)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(0., -2.3)") (((((xmath).xatan2)).apply ((((unsupported)).apply)) ((2.3.neg)))) (((xmath).xpi)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(0., -0.)") (((((xmath).xatan2)).apply ((((unsupported)).apply)) (((((unsupported)).apply).neg)))) (((xmath).xpi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xatan2)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xatan2)).apply ((((unsupported)).apply)) (2.3))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xatan2)).apply ((((unsupported)).apply)) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((((unsupported)).apply)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-0., -inf)") (((((xmath).xatan2)).apply (((((unsupported)).apply).neg)) ((xNINF)))) ((((xmath).xpi).neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-0., -2.3)") (((((xmath).xatan2)).apply (((((unsupported)).apply).neg)) ((2.3.neg)))) ((((xmath).xpi).neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-0., -0.)") (((((xmath).xatan2)).apply (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)))) ((((xmath).xpi).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xatan2)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xatan2)).apply (((((unsupported)).apply).neg)) (2.3))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xatan2)).apply (((((unsupported)).apply).neg)) ((xINF)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply (((((unsupported)).apply).neg)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(inf, -inf)") (((((xmath).xatan2)).apply ((xINF)) ((xNINF)))) (((((xmath).xpi).mul 3).div 4)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(inf, -2.3)") (((((xmath).xatan2)).apply ((xINF)) ((2.3.neg)))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(inf, -0.)") (((((xmath).xatan2)).apply ((xINF)) ((0.0.neg)))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(inf, 0.)") (((((xmath).xatan2)).apply ((xINF)) (0.0))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(inf, 2.3)") (((((xmath).xatan2)).apply ((xINF)) (2.3))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(inf, inf)") (((((xmath).xatan2)).apply ((xINF)) ((xINF)))) ((((xmath).xpi).div 4)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((xINF)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-inf, -inf)") (((((xmath).xatan2)).apply ((xNINF)) ((xNINF)))) ((((((xmath).xpi).neg).mul 3).div 4)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-inf, -2.3)") (((((xmath).xatan2)).apply ((xNINF)) ((2.3.neg)))) (((((xmath).xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-inf, -0.)") (((((xmath).xatan2)).apply ((xNINF)) ((0.0.neg)))) (((((xmath).xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-inf, 0.)") (((((xmath).xatan2)).apply ((xNINF)) (0.0))) (((((xmath).xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-inf, 2.3)") (((((xmath).xatan2)).apply ((xNINF)) (2.3))) (((((xmath).xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-inf, inf)") (((((xmath).xatan2)).apply ((xNINF)) ((xINF)))) (((((xmath).xpi).neg).div 4)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((xNINF)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(2.3, -inf)") (((((xmath).xatan2)).apply (2.3) ((xNINF)))) (((xmath).xpi)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(2.3, -0.)") (((((xmath).xatan2)).apply (2.3) (((((unsupported)).apply).neg)))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(2.3, 0.)") (((((xmath).xatan2)).apply (2.3) ((((unsupported)).apply)))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xatan2)).apply (2.3) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply (2.3) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-2.3, -inf)") (((((xmath).xatan2)).apply ((2.3.neg)) ((xNINF)))) ((((xmath).xpi).neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-2.3, -0.)") (((((xmath).xatan2)).apply ((2.3.neg)) (((((unsupported)).apply).neg)))) (((((xmath).xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("atan2(-2.3, 0.)") (((((xmath).xatan2)).apply ((2.3.neg)) ((((unsupported)).apply)))) (((((xmath).xpi).neg).div 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xatan2)).apply ((2.3.neg)) ((xINF)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((2.3.neg)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((xNAN)) ((xNINF)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((xNAN)) ((2.3.neg)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((xNAN)) (((((unsupported)).apply).neg)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((xNAN)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((xNAN)) (2.3))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((xNAN)) ((xINF)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xatan2)).apply ((xNAN)) ((xNAN)))))))
                xtestCeil.write
                  [xself]
                    memory > xt
                    memory > x__ceil__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xceil)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xint)) ((((xtype)).apply (((((xmath).xceil)).apply (0.5))))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ceil(0.5)") (((((xmath).xceil)).apply (0.5))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ceil(1.0)") (((((xmath).xceil)).apply (1.0))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ceil(1.5)") (((((xmath).xceil)).apply (1.5))) (2))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ceil(-0.5)") (((((xmath).xceil)).apply ((0.5.neg)))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ceil(-1.0)") (((((xmath).xceil)).apply ((1.0.neg)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ceil(-1.5)") (((((xmath).xceil)).apply ((1.5.neg)))) ((1.neg)))
                        (((unsupported)).apply)
                          x__ceil__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (42))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xftest)).apply ("ceil(TestCeil())") (((((xmath).xceil)).apply ((((xTestCeil)).apply)))) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xceil)) ((((xTestNoCeil)).apply)))
                        xt.write (((xTestNoCeil)).apply)
                        (((unsupported)).apply (((xt).x__ceil__)) ((((unsupported)).apply ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xceil)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xceil)) ((xt)) (0))
                xtestCopysign.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply (1) (42))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((((unsupported)).apply)) (42))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((((unsupported)).apply)) ((42.neg)))) ((1.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply (3) ((((unsupported)).apply)))) (3.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((((unsupported)).apply)) (((((unsupported)).apply).neg)))) ((4.0.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xcopysign)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((((unsupported)).apply)) (((((unsupported)).apply).neg)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((xINF)) ((((unsupported)).apply)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((xINF)) (((((unsupported)).apply).neg)))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((xNINF)) ((((unsupported)).apply)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((xNINF)) (((((unsupported)).apply).neg)))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((((unsupported)).apply)) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((((unsupported)).apply)) ((xNINF)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((xINF)) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((xINF)) ((xNINF)))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((xNINF)) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((xNINF)) ((xNINF)))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xcopysign)).apply ((xNAN)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xcopysign)).apply ((xNAN)) ((xINF)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xcopysign)).apply ((xNAN)) ((xNINF)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xcopysign)).apply ((xNAN)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisinf)).apply (((((xmath).xcopysign)).apply ((xINF)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xabs)).apply (((((xmath).xcopysign)).apply ((((unsupported)).apply)) ((xNAN)))))) ((((unsupported)).apply)))
                xtestCos.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xcos)))
                        (((unsupported)).apply (((xself).xftest)) ("cos(-pi/2)") (((((xmath).xcos)).apply (((((xmath).xpi).neg).div 2)))) (0) ((((xulp)).apply (1))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("cos(0)") (((((xmath).xcos)).apply (0))) (1))
                        (((unsupported)).apply (((xself).xftest)) ("cos(pi/2)") (((((xmath).xcos)).apply ((((xmath).xpi).div 2)))) (0) ((((xulp)).apply (1))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("cos(pi)") (((((xmath).xcos)).apply (((xmath).xpi)))) ((1.neg)))
                        (((unsupported)).apply ((xValueError)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xcos)).apply ((xINF)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xcos)).apply ((xNINF)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xcos)) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xcos)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xcos)).apply ((xNAN)))))))
                xtestCosh.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xcosh)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("cosh(0)") (((((xmath).xcosh)).apply (0))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("cosh(2)-2*cosh(1)**2") ((((((xmath).xcosh)).apply (2)).sub (2.mul (((unsupported)).apply (((((xmath).xcosh)).apply (1))) (2))))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcosh)).apply ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcosh)).apply ((xNINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xcosh)).apply ((xNAN)))))))
                xtestDegrees.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xdegrees)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("degrees(pi)") (((((xmath).xdegrees)).apply (((xmath).xpi)))) (180.0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("degrees(pi/2)") (((((xmath).xdegrees)).apply ((((xmath).xpi).div 2)))) (90.0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("degrees(-pi/4)") (((((xmath).xdegrees)).apply (((((xmath).xpi).neg).div 4)))) ((45.0.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("degrees(0)") (((((xmath).xdegrees)).apply (0))) (0))
                xtestExp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xexp)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("exp(-1)") (((((xmath).xexp)).apply ((1.neg)))) ((1.div ((xmath).xe))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("exp(0)") (((((xmath).xexp)).apply (0))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("exp(1)") (((((xmath).xexp)).apply (1))) (((xmath).xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xexp)).apply ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xexp)).apply ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xexp)).apply ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xmath).xexp)) (1000000))
                xtestFabs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xfabs)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("fabs(-1)") (((((xmath).xfabs)).apply ((1.neg)))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("fabs(0)") (((((xmath).xfabs)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("fabs(1)") (((((xmath).xfabs)).apply (1))) (1))
                xtestFactorial.write
                  [xself]
                    memory > xtotal
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfactorial)).apply (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfactorial)).apply (0.0))) (1))
                        xtotal.write 1
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (1000))))
                          seq
                            (((unsupported)).apply ((xtotal)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfactorial)).apply ((xi)))) ((xtotal)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfactorial)).apply ((((xfloat)).apply ((xi)))))) ((xtotal)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfactorial)).apply ((xi)))) ((((xpy_factorial)).apply ((xi)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xfactorial)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xfactorial)) ((1.0.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xfactorial)) (((((unsupported)).apply (10) (100)).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xfactorial)) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xfactorial)) (((xmath).xpi)))
                xtestFactorialNonIntegers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xfactorial)) (((((xdecimal).xDecimal)).apply (5.2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xfactorial)) ("5"))
                xtestFactorialHugeInputs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xmath).xfactorial)) ((((unsupported)).apply (10) (100))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xmath).xfactorial)) ((((unsupported)).apply)))
                xtestFloor.write
                  [xself]
                    memory > xt
                    memory > x__floor__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xfloor)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xint)) ((((xtype)).apply (((((xmath).xfloor)).apply (0.5))))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("floor(0.5)") (((((xmath).xfloor)).apply (0.5))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("floor(1.0)") (((((xmath).xfloor)).apply (1.0))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("floor(1.5)") (((((xmath).xfloor)).apply (1.5))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("floor(-0.5)") (((((xmath).xfloor)).apply ((0.5.neg)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("floor(-1.0)") (((((xmath).xfloor)).apply ((1.0.neg)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("floor(-1.5)") (((((xmath).xfloor)).apply ((1.5.neg)))) ((2.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("floor(1.23e167)") (((((xmath).xfloor)).apply ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("floor(-1.23e167)") (((((xmath).xfloor)).apply (((((unsupported)).apply).neg)))) (((((unsupported)).apply).neg)))
                        (((unsupported)).apply)
                          x__floor__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (42))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xftest)).apply ("floor(TestFloor())") (((((xmath).xfloor)).apply ((((xTestFloor)).apply)))) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xfloor)) ((((xTestNoFloor)).apply)))
                        xt.write (((xTestNoFloor)).apply)
                        (((unsupported)).apply (((xt).x__floor__)) ((((unsupported)).apply ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xfloor)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xfloor)) ((xt)) (0))
                xtestFmod.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xfmod)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("fmod(10, 1)") (((((xmath).xfmod)).apply (10) (1))) (0.0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("fmod(10, 0.5)") (((((xmath).xfmod)).apply (10) (0.5))) (0.0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("fmod(10, 1.5)") (((((xmath).xfmod)).apply (10) (1.5))) (1.0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("fmod(-10, 1)") (((((xmath).xfmod)).apply ((10.neg)) (1))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("fmod(-10, 0.5)") (((((xmath).xfmod)).apply ((10.neg)) (0.5))) ((0.0.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("fmod(-10, 1.5)") (((((xmath).xfmod)).apply ((10.neg)) (1.5))) ((1.0.neg)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xfmod)).apply ((xNAN)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xfmod)).apply ((((unsupported)).apply)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xfmod)).apply ((xNAN)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xfmod)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xfmod)) ((xINF)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xfmod)) ((xNINF)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xfmod)) ((xINF)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfmod)).apply (3.0) ((xINF)))) (3.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfmod)).apply ((3.0.neg)) ((xINF)))) ((3.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfmod)).apply (3.0) ((xNINF)))) (3.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfmod)).apply ((3.0.neg)) ((xNINF)))) ((3.0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfmod)).apply (0.0) (3.0))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xfmod)).apply (0.0) ((xNINF)))) (0.0))
                xtestFrexp.write
                  [xself]
                    memory > xtestfrexp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xfrexp)))
                        xtestfrexp.write
                          [xname xresult xexpected]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xmant)) ((xexp)))) ((((unsupported)).apply ((xemant)) ((xeexp)))))) ((((unsupported)).apply ((xresult)) ((xexpected)))))
                                (((((xabs)).apply (((xmant).sub (xemant)))).greater (xeps)).or ((xexp).neq (xeexp))).if
                                  bogusForceDataize.write ((((xself).xfail)).apply (("%s returned %r, expected %r".mod (((unsupported)).apply ((xname)) ((xresult)) ((xexpected))))))
                        bogusForceDataize.write (((xtestfrexp)).apply ("frexp(-1)") (((((xmath).xfrexp)).apply ((1.neg)))) ((((unsupported)).apply ((0.5.neg)) (1))))
                        bogusForceDataize.write (((xtestfrexp)).apply ("frexp(0)") (((((xmath).xfrexp)).apply (0))) ((((unsupported)).apply (0) (0))))
                        bogusForceDataize.write (((xtestfrexp)).apply ("frexp(1)") (((((xmath).xfrexp)).apply (1))) ((((unsupported)).apply (0.5) (1))))
                        bogusForceDataize.write (((xtestfrexp)).apply ("frexp(2)") (((((xmath).xfrexp)).apply (2))) ((((unsupported)).apply (0.5) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xmath).xfrexp)).apply ((xINF)))) (0))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xmath).xfrexp)).apply ((xNINF)))) (0))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((unsupported)).apply (((((xmath).xfrexp)).apply ((xNAN)))) (0))))))
                xtestFsum.write
                  [xself]
                    memory > xmant_dig
                    memory > xvals
                    memory > xactual
                    memory > xs
                    memory > xtest_values
                    memory > xetiny
                    memory > xmsum
                    memory > xterms
                    memory > xv
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmant_dig.write ((xfloat_info).xmant_dig)
                        xetiny.write (((xfloat_info).xmin_exp).sub (xmant_dig))
                        xmsum.write
                          [xiterable]
                            memory > xh
                            memory > xtmant
                            memory > xtexp
                            memory > xtail
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xtmant)) ((xtexp)))) ((((unsupported)).apply (0) (0))))
                                (((unsupported)).apply ((xx)) ((xiterable)))
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xmant)) ((xexp)))) (((((xmath).xfrexp)).apply ((xx)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xmant)) ((xexp)))) ((((unsupported)).apply ((((xint)).apply (((((xmath).xldexp)).apply ((xmant)) ((xmant_dig)))))) (((xexp).sub (xmant_dig))))))
                                    ((xtexp).greater (xexp)).if
                                      seq
                                        (((unsupported)).apply ((xtmant)) (((xtexp).sub (xexp))))
                                        xtexp.write (xexp)
                                      (((unsupported)).apply ((xmant)) (((xexp).sub (xtexp))))
                                    (((unsupported)).apply ((xtmant)) ((xmant)))
                                xtail.write (((xmax)).apply ((((((xlen)).apply ((((xbin)).apply ((((xabs)).apply ((xtmant))))))).sub 2).sub (xmant_dig))) (((xetiny).sub (xtexp))))
                                ((xtail).greater 0).if
                                  seq
                                    xh.write (((unsupported)).apply (1) (((xtail).sub 1)))
                                    xtmant.write ((((unsupported)).apply ((xtmant)) ((2.mul (xh)))).add (((xbool)).apply ((((xtmant).and (xh)).and ((xtmant).and ((3.mul (xh)).sub 1))))))
                                    (((unsupported)).apply ((xtexp)) ((xtail)))
                                (((unsupported)).apply (((((xmath).xldexp)).apply ((xtmant)) ((xtexp)))))
                        xtest_values.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) (0.0))) ((((unsupported)).apply ((((unsupported)).apply (0.0))) (0.0))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) (1.0) (((((unsupported)).apply).neg)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((1.0.neg)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (2.0) (53))) ((0.5.neg)) (((((unsupported)).apply (2.0) ((54.neg))).neg)))) (((((unsupported)).apply (2.0) (53)).sub 1.0)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (2.0) (53))) (1.0) ((((unsupported)).apply (2.0) ((100.neg)))))) (((((unsupported)).apply (2.0) (53)).add 2.0)))) ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (2.0) (53)).add 10.0)) (1.0) ((((unsupported)).apply (2.0) ((100.neg)))))) (((((unsupported)).apply (2.0) (53)).add 12.0)))) ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (2.0) (53)).sub 4.0)) (0.5) ((((unsupported)).apply (2.0) ((54.neg)))))) (((((unsupported)).apply (2.0) (53)).sub 3.0)))) ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply).div (xn))) ((xn)) ((((xrange)).apply (1) (1001))))) (((((xfloat).xfromhex)).apply ("0x1.df11f45f4e61ap+2"))))) ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply).neg)) ((xn))).div (xn))) ((xn)) ((((xrange)).apply (1) (1001))))) (((((xfloat).xfromhex)).apply ("-0x1.62a2af1bd3624p-1"))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))) (10000000000000002.0))) ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply).sub (((unsupported)).apply))) (((((unsupported)).apply).sub (((unsupported)).apply ((((unsupported)).apply)) ((53.neg))))) ((((((unsupported)).apply).sub (((unsupported)).apply)).neg)) ((((((unsupported)).apply).sub (((unsupported)).apply ((((unsupported)).apply)) ((53.neg)))).neg)))) (0.0))) ((((unsupported)).apply (((((unsupported)).apply ((((((unsupported)).apply ((((unsupported)).apply)) ((xn))).sub (((unsupported)).apply ((((unsupported)).apply)) (((xn).add 50)))).add (((unsupported)).apply ((((unsupported)).apply)) (((xn).add 52))))) ((xn)) ((((xrange)).apply ((1074.neg)) (972) (2)))).add (((unsupported)).apply (((((unsupported)).apply ((((unsupported)).apply)) (1022)).neg))))) (((((xfloat).xfromhex)).apply ("0x1.5555555555555p+970"))))))
                        xterms.write (((unsupported)).apply ((((unsupported)).apply (1.7) ((xi)))) ((xi)) ((((xrange)).apply (1001))))
                        bogusForceDataize.write ((((xtest_values).xappend)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((xterms)) (((xi).add 1))).sub (((unsupported)).apply ((xterms)) ((xi))))) ((xi)) ((((xrange)).apply (1000)))).add (((unsupported)).apply (((((unsupported)).apply ((xterms)) (1000)).neg))))) (((((unsupported)).apply ((xterms)) (0)).neg)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((((unsupported)).apply ((xvals)) ((xexpected)))))) ((((xenumerate)).apply ((xtest_values)))))
                          seq
                            (((unsupported)).apply ((xOverflowError)) ((xValueError)))
                              xactual.write ((((xmath).xfsum)).apply ((xvals)))
                              bogusForceDataize.write ((((xself).xfail)).apply (("test %d failed: got OverflowError, expected %r for math.fsum(%.100r)".mod (((unsupported)).apply ((xi)) ((xexpected)) ((xvals))))))
                              bogusForceDataize.write ((((xself).xfail)).apply (("test %d failed: got ValueError, expected %r for math.fsum(%.100r)".mod (((unsupported)).apply ((xi)) ((xexpected)) ((xvals))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xj)) ((((xrange)).apply (1000))))
                          seq
                            xvals.write ((((unsupported)).apply (7) ((((unsupported)).apply)) ((7.neg)) (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)) ((((unsupported)).apply))).mul 10)
                            xs.write 0
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (200))))
                              seq
                                xv.write ((((unsupported)).apply ((((xgauss)).apply (0) ((((xrandom)).apply)))) (7)).sub (xs))
                                (((unsupported)).apply ((xs)) ((xv)))
                                bogusForceDataize.write ((((xvals).xappend)).apply ((xv)))
                            bogusForceDataize.write (((xshuffle)).apply ((xvals)))
                            xs.write (((xmsum)).apply ((xvals)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmsum)).apply ((xvals)))) (((((xmath).xfsum)).apply ((xvals)))))
                xtestGcd.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xx
                    memory > xy
                    memory > xgcd
                    memory > xa
                    seq > @
                      seq
                        xgcd.write ((xmath).xgcd)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (0) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (1) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((1.neg)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (0) (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (0) ((1.neg)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (7) (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (7) ((1.neg)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((23.neg)) (15))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (120) (84))) (12))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (84) ((120.neg)))) (12))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) (32))
                        xc.write 652560
                        xx.write (((unsupported)).apply)
                        xy.write (((unsupported)).apply)
                        xa.write ((xx).mul (xc))
                        xb.write ((xy).mul (xc))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((xa)) ((xb)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((xb)) ((xa)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (((xa).neg)) ((xb)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((xb)) (((xa).neg)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((xa)) (((xb).neg)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (((xb).neg)) ((xa)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (((xa).neg)) (((xb).neg)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (((xb).neg)) (((xa).neg)))) ((xc)))
                        xc.write (((unsupported)).apply)
                        xa.write ((xx).mul (xc))
                        xb.write ((xy).mul (xc))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((xa)) ((xb)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((xb)) ((xa)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (((xa).neg)) ((xb)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((xb)) (((xa).neg)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((xa)) (((xb).neg)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (((xb).neg)) ((xa)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (((xa).neg)) (((xb).neg)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply (((xb).neg)) (((xa).neg)))) ((xc)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xgcd)) (120.0) (84))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xgcd)) (120) (84.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgcd)).apply ((((xMyIndexable)).apply (120))) ((((xMyIndexable)).apply (84))))) (12))
                xtestHypot.write
                  [xself]
                    memory > xhypot
                    memory > xfourthmax
                    memory > xint_too_big_for_float
                    memory > xargs
                    memory > xscale
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xhypot.write ((xmath).xhypot)
                        xargs.write (((unsupported)).apply (((xmath).xe)) (((xmath).xpi)) (((((xmath).xsqrt)).apply (2.0))) (((((xmath).xgamma)).apply (3.5))) (((((xmath).xsin)).apply (2.1))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((((xlen)).apply ((xargs))).add 1)))))
                          bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xhypot)).apply ((((unsupported)).apply ((((unsupported)).apply ((xargs)) ((((unsupported)).apply ((xi)))))))))) (((((xmath).xsqrt)).apply ((((xsum)).apply ((((unsupported)).apply ((((unsupported)).apply ((xs)) (2))) ((xs)) ((((unsupported)).apply ((xargs)) ((((unsupported)).apply ((xi)))))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply (12.0) (5.0))) (13.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply (12) (5))) (13))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((((xDecimal)).apply (12))) ((((xDecimal)).apply (5))))) (13))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((((xFraction)).apply (12) (32))) ((((xFraction)).apply (5) (32))))) ((((xFraction)).apply (13) (32))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((((xbool)).apply (1))) ((((xbool)).apply (0))) ((((xbool)).apply (1))) ((((xbool)).apply (1))))) (((((xmath).xsqrt)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply (0.0) (0.0))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((10.5.neg)))) (10.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply)) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (1.0) (((((xmath).xcopysign)).apply (1.0) ((((xhypot)).apply ((0.0.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply (1.5) (1.5) (0.5))) ((((xhypot)).apply (1.5) (0.5) (1.5))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xhypot)) (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xhypot)).apply (1.1) ("string") (2.2))
                        xint_too_big_for_float.write (((unsupported)).apply (10) (((((xsys).xfloat_info).xmax_10_exp).add 5)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))))))
                          bogusForceDataize.write (((xhypot)).apply (1) ((xint_too_big_for_float)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply (0) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply (10) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((10.neg)) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((xNAN)) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((xINF)) ((xNAN)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((xNINF)) ((xNAN)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((xNAN)) ((xNINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply (((xINF).neg)) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply (((xINF).neg)) (((xINF).neg)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply (10) (((xINF).neg)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xhypot)).apply ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xhypot)).apply (0) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xhypot)).apply ((xNAN)) (10))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xhypot)).apply (10) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xhypot)).apply ((xNAN)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xhypot)).apply ((xNAN)))))))
                        xfourthmax.write ((xFLOAT_MAX).div 4.0)
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (32))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhypot)).apply ((((unsupported)).apply (((((unsupported)).apply ((xfourthmax))).mul (xn))))))) (((xfourthmax).mul ((((xmath).xsqrt)).apply ((xn))))))
                        (((unsupported)).apply ((xexp)) ((((xrange)).apply (32))))
                          seq
                            xscale.write ((xFLOAT_MIN).div (((unsupported)).apply (2.0) ((xexp))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xhypot)).apply ((4.mul (xscale))) ((3.mul (xscale))))) ((5.mul (xscale))))
                xtestDist.write
                  [xself]
                    memory > xD
                    memory > xvalues
                    memory > xsqrt
                    memory > xq
                    memory > xdiffs
                    memory > xfourthmax
                    memory > xp
                    memory > xint_too_big_for_float
                    memory > xscale
                    memory > xdist
                    memory > xF
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdist.write ((xmath).xdist)
                        xsqrt.write ((xmath).xsqrt)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply (1.0) (2.0) (3.0))) ((((unsupported)).apply (4.0) (2.0) ((1.0.neg)))))) (5.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (4) (2) ((1.neg)))))) (5.0))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (9))))
                          (((unsupported)).apply ((xj)) ((((xrange)).apply (5))))
                            seq
                              xp.write (((xtuple)).apply ((((unsupported)).apply (((((xrandom).xuniform)).apply ((5.neg)) (5))) ((xk)) ((((xrange)).apply ((xi)))))))
                              xq.write (((xtuple)).apply ((((unsupported)).apply (((((xrandom).xuniform)).apply ((5.neg)) (5))) ((xk)) ((((xrange)).apply ((xi)))))))
                              bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((((xdist)).apply ((xp)) ((xq)))) ((((xsqrt)).apply ((((xsum)).apply ((((unsupported)).apply ((((unsupported)).apply (((xpx).sub (xqx))) (2.0))) ((((unsupported)).apply ((xpx)) ((xqx)))) ((((xzip)).apply ((xp)) ((xq)))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply (1.0) (2.0) (3.0))) ((((unsupported)).apply (4.0) (2.0) ((1.0.neg)))))) (5.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((xiter)).apply ((((unsupported)).apply (1.0) (2.0) (3.0))))) ((((xiter)).apply ((((unsupported)).apply (4.0) (2.0) ((1.0.neg)))))))) (5.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply (14.0) (1.0))) ((((unsupported)).apply (2.0) ((4.0.neg)))))) (13.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply (14) (1))) ((((unsupported)).apply (2) ((4.neg)))))) (13))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply ((((xD)).apply (14))) ((((xD)).apply (1))))) ((((unsupported)).apply ((((xD)).apply (2))) ((((xD)).apply ((4.neg)))))))) ((((xD)).apply (13))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply ((((xF)).apply (14) (32))) ((((xF)).apply (1) (32))))) ((((unsupported)).apply ((((xF)).apply (2) (32))) ((((xF)).apply ((4.neg)) (32))))))) ((((xF)).apply (13) (32))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply (TRUE) (TRUE) (FALSE) (TRUE) (FALSE))) ((((unsupported)).apply (TRUE) (FALSE) (TRUE) (TRUE) (FALSE))))) ((((xsqrt)).apply (2.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply (13.25) (12.5) ((3.25.neg)))) ((((unsupported)).apply (13.25) (12.5) ((3.25.neg)))))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (1.0) (((((xmath).xcopysign)).apply (1.0) ((((xdist)).apply ((((unsupported)).apply ((0.0.neg)))) ((((unsupported)).apply (0.0))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (1.0) (((((xmath).xcopysign)).apply (1.0) ((((xdist)).apply ((((unsupported)).apply (0.0))) ((((unsupported)).apply ((0.0.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply (1.5) (1.5) (0.5))) ((((unsupported)).apply (0) (0) (0))))) ((((xdist)).apply ((((unsupported)).apply (1.5) (0.5) (1.5))) ((((unsupported)).apply (0) (0) (0))))))
                        (((unsupported)).apply ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((xT)).apply ((((unsupported)).apply (1) (2) (3))))) ((((unsupported)).apply (4) (2) ((1.neg)))))) (5.0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xdist)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (4) (5) (6))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xdist)).apply ((((unsupported)).apply (1) (2) (3))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xdist)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (4) (5) (6))) ((((unsupported)).apply (7) (8) (9))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xdist)).apply (1) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xdist)).apply ((((unsupported)).apply (1.1) ("string") (2.2))) ((((unsupported)).apply (1) (2) (3))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xdist)).apply ((((unsupported)).apply (1) (2) (3) (4))) ((((unsupported)).apply (5) (6) (7))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xdist)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (4) (5) (6) (7))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xdist)).apply ("abc") ("xyz"))
                        xint_too_big_for_float.write (((unsupported)).apply (10) (((((xsys).xfloat_info).xmax_10_exp).add 5)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))))))
                          bogusForceDataize.write (((xdist)).apply ((((unsupported)).apply (1) ((xint_too_big_for_float)))) ((((unsupported)).apply (2) (3))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xValueError)) ((xOverflowError)))))))
                          bogusForceDataize.write (((xdist)).apply ((((unsupported)).apply (2) (3))) ((((unsupported)).apply (1) ((xint_too_big_for_float)))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (20))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xq)))) ((((unsupported)).apply (((((xrandom).xrandom)).apply)) (((((xrandom).xrandom)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((((unsupported)).apply ((xp)))) ((((unsupported)).apply ((xq)))))) ((((xabs)).apply (((xp).sub (xq))))))
                        xvalues.write (((unsupported)).apply ((xNINF)) ((10.5.neg)) ((0.0.neg)) (0.0) (10.5) ((xINF)) ((xNAN)))
                        (((unsupported)).apply ((xp)) ((((unsupported)).apply (((xitertools).xproduct)) ((xvalues)) (3))))
                          (((unsupported)).apply ((xq)) ((((unsupported)).apply (((xitertools).xproduct)) ((xvalues)) (3))))
                            seq
                              xdiffs.write (((unsupported)).apply (((xpx).sub (xqx))) ((((unsupported)).apply ((xpx)) ((xqx)))) ((((xzip)).apply ((xp)) ((xq)))))
                              (((xany)).apply ((((xmap)).apply (((xmath).xisinf)) ((xdiffs))))).if
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((xp)) ((xq)))) ((xINF)))
                                (((xany)).apply ((((xmap)).apply (((xmath).xisnan)) ((xdiffs))))).if
                                  bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xdist)).apply ((xp)) ((xq)))))))
                        xfourthmax.write ((xFLOAT_MAX).div 4.0)
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (32))))
                          seq
                            xp.write ((((unsupported)).apply ((xfourthmax))).mul (xn))
                            xq.write ((((unsupported)).apply (0.0)).mul (xn))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((xp)) ((xq)))) (((xfourthmax).mul ((((xmath).xsqrt)).apply ((xn))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdist)).apply ((xq)) ((xp)))) (((xfourthmax).mul ((((xmath).xsqrt)).apply ((xn))))))
                        (((unsupported)).apply ((xexp)) ((((xrange)).apply (32))))
                          seq
                            xscale.write ((xFLOAT_MIN).div (((unsupported)).apply (2.0) ((xexp))))
                            xp.write (((unsupported)).apply ((4.mul (xscale))) ((3.mul (xscale))))
                            xq.write (((unsupported)).apply (0.0) (0.0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xdist)).apply ((xp)) ((xq)))) ((5.mul (xscale))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xdist)).apply ((xq)) ((xp)))) ((5.mul (xscale))))
                xtestIsqrt.write
                  [xself]
                    memory > x__index__
                    memory > xs
                    memory > xbad_values
                    memory > x__init__
                    memory > xtest_values
                    seq > @
                      seq
                        xtest_values.write ((((((xlist)).apply ((((xrange)).apply (1000)))).add (((xlist)).apply ((((xrange)).apply (((((unsupported)).apply (10) (6)).sub 1000)) (((((unsupported)).apply (10) (6)).add 1000)))))).add (((unsupported)).apply (((((unsupported)).apply (2) ((xe))).add (xi))) ((xe)) ((((xrange)).apply (60) (200))) ((xi)) ((((xrange)).apply ((40.neg)) (40))))).add (((unsupported)).apply ((((unsupported)).apply (3) (9999))) ((((unsupported)).apply (10) (5001)))))
                        (((unsupported)).apply ((xvalue)) ((xtest_values)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xs.write ((((xmath).xisqrt)).apply ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xs)))) ((xint)))
                              bogusForceDataize.write ((((xself).xassertLessEqual)).apply (((xs).mul (xs))) ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertLess)).apply ((xvalue)) ((((xs).add 1).mul ((xs).add 1))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xmath).xisqrt)).apply ((1.neg)))
                        xs.write ((((xmath).xisqrt)).apply (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xs)))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) (1))
                        xs.write ((((xmath).xisqrt)).apply (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xs)))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) (0))
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)))
                        xs.write ((((xmath).xisqrt)).apply ((((xIntegerLike)).apply (1729))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((xs)))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) (41))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((xmath).xisqrt)).apply ((((xIntegerLike)).apply ((3.neg)))))
                        xbad_values.write (((unsupported)).apply (3.5) ("a string") (((((xdecimal).xDecimal)).apply ("3.5"))) ((((unsupported)).apply)) (100.0) ((4.0.neg)))
                        (((unsupported)).apply ((xvalue)) ((xbad_values)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              bogusForceDataize.write ((((xmath).xisqrt)).apply ((xvalue)))
                xtestLdexp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xldexp)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ldexp(0,1)") (((((xmath).xldexp)).apply (0) (1))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ldexp(1,1)") (((((xmath).xldexp)).apply (1) (1))) (2))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ldexp(1,-1)") (((((xmath).xldexp)).apply (1) ((1.neg)))) (0.5))
                        bogusForceDataize.write ((((xself).xftest)).apply ("ldexp(-1,1)") (((((xmath).xldexp)).apply ((1.neg)) (1))) ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xmath).xldexp)) ((((unsupported)).apply)) (1000000))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xmath).xldexp)) (((((unsupported)).apply).neg)) (1000000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((((unsupported)).apply)) ((1000000.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply (((((unsupported)).apply).neg)) ((1000000.neg)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((xINF)) (30))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((xNINF)) ((213.neg)))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xldexp)).apply ((xNAN)) (0))))))
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply ((((unsupported)).apply (10) (5))) ((((unsupported)).apply (10) (10))) ((((unsupported)).apply (10) (20))) ((((unsupported)).apply (10) (40))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((xINF)) (((xn).neg)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((xNINF)) (((xn).neg)))) ((xNINF)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((((unsupported)).apply)) (((xn).neg)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply (((((unsupported)).apply).neg)) (((xn).neg)))) (((((unsupported)).apply).neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((((unsupported)).apply)) (((xn).neg)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply (((((unsupported)).apply).neg)) (((xn).neg)))) (((((unsupported)).apply).neg)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xldexp)).apply ((xNAN)) (((xn).neg)))))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xmath).xldexp)) ((((unsupported)).apply)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xmath).xldexp)) (((((unsupported)).apply).neg)) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((((unsupported)).apply)) ((xn)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply (((((unsupported)).apply).neg)) ((xn)))) (((((unsupported)).apply).neg)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((xINF)) ((xn)))) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xldexp)).apply ((xNINF)) ((xn)))) ((xNINF)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xldexp)).apply ((xNAN)) ((xn)))))))
                xtestLog.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xlog)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log(1/e)") (((((xmath).xlog)).apply ((1.div ((xmath).xe))))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log(1)") (((((xmath).xlog)).apply (1))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log(e)") (((((xmath).xlog)).apply (((xmath).xe)))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log(32,2)") (((((xmath).xlog)).apply (32) (2))) (5))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log(10**40, 10)") (((((xmath).xlog)).apply ((((unsupported)).apply (10) (40))) (10))) (40))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log(10**40, 10**20)") (((((xmath).xlog)).apply ((((unsupported)).apply (10) (40))) ((((unsupported)).apply (10) (20))))) (2))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log(10**1000)") (((((xmath).xlog)).apply ((((unsupported)).apply (10) (1000))))) (2302.5850929940457))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog)) ((1.5.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog)) (((((unsupported)).apply (10) (1000)).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xlog)).apply ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xlog)).apply ((xNAN)))))))
                xtestLog1p.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xlog1p)))
                        (((unsupported)).apply ((xn)) ((((unsupported)).apply (2) ((((unsupported)).apply (2) (90))) ((((unsupported)).apply (2) (300))))))
                          bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply (((((xmath).xlog1p)).apply ((xn)))) (((((xmath).xlog1p)).apply ((((xfloat)).apply ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog1p)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xlog1p)).apply ((xINF)))) ((xINF)))
                xtestLog2.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xlog2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xlog2)).apply (1))) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xlog2)).apply (2))) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xlog2)).apply (4))) (2.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xlog2)).apply ((((unsupported)).apply (2) (1023))))) (1023.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xlog2)).apply ((((unsupported)).apply (2) (1024))))) (1024.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xlog2)).apply ((((unsupported)).apply (2) (2000))))) (2000.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog2)) ((1.5.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog2)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xlog2)).apply ((xNAN)))))))
                xtestLog2Exact.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    seq > @
                      (((unsupported)).apply)
                        xactual.write (((unsupported)).apply (((((xmath).xlog2)).apply (((((xmath).xldexp)).apply (1.0) ((xn)))))) ((xn)) ((((xrange)).apply ((1074.neg)) (1024))))
                        xexpected.write (((unsupported)).apply ((((xfloat)).apply ((xn)))) ((xn)) ((((xrange)).apply ((1074.neg)) (1024))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                xtestLog10.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xlog10)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log10(0.1)") (((((xmath).xlog10)).apply (0.1))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log10(1)") (((((xmath).xlog10)).apply (1))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log10(10)") (((((xmath).xlog10)).apply (10))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("log10(10**1000)") (((((xmath).xlog10)).apply ((((unsupported)).apply (10) (1000))))) (1000.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog10)) ((1.5.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog10)) (((((unsupported)).apply (10) (1000)).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xlog10)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xlog)).apply ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xlog10)).apply ((xNAN)))))))
                xtestModf.write
                  [xself]
                    memory > xmodf_nan
                    memory > xtestmodf
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xmodf)))
                        xtestmodf.write
                          [xname xresult xexpected]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xv1)) ((xv2)))) ((((unsupported)).apply ((xe1)) ((xe2)))))) ((((unsupported)).apply ((xresult)) ((xexpected)))))
                                (((((xabs)).apply (((xv1).sub (xe1)))).greater (xeps)).or (((xabs)).apply (((xv2).sub (xe2))))).if
                                  bogusForceDataize.write ((((xself).xfail)).apply (("%s returned %r, expected %r".mod (((unsupported)).apply ((xname)) ((xresult)) ((xexpected))))))
                        bogusForceDataize.write (((xtestmodf)).apply ("modf(1.5)") (((((xmath).xmodf)).apply (1.5))) ((((unsupported)).apply (0.5) (1.0))))
                        bogusForceDataize.write (((xtestmodf)).apply ("modf(-1.5)") (((((xmath).xmodf)).apply ((1.5.neg)))) ((((unsupported)).apply ((0.5.neg)) ((1.0.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xmodf)).apply ((xINF)))) ((((unsupported)).apply (0.0) ((xINF)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xmodf)).apply ((xNINF)))) ((((unsupported)).apply ((0.0.neg)) ((xNINF)))))
                        xmodf_nan.write ((((xmath).xmodf)).apply ((xNAN)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((unsupported)).apply ((xmodf_nan)) (0))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((unsupported)).apply ((xmodf_nan)) (1))))))
                xtestPow.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xpow)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("pow(0,1)") (((((xmath).xpow)).apply (0) (1))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("pow(1,0)") (((((xmath).xpow)).apply (1) (0))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("pow(2,1)") (((((xmath).xpow)).apply (2) (1))) (2))
                        bogusForceDataize.write ((((xself).xftest)).apply ("pow(2,-1)") (((((xmath).xpow)).apply (2) ((1.neg)))) (0.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) (1))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) (1))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (1) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (1) ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xpow)).apply ((xNAN)) (1))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xpow)).apply (2) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xpow)).apply (0) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (1) ((xNAN)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) (2.3))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) ((((unsupported)).apply)) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) ((((unsupported)).apply)) ((2.3.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) ((((unsupported)).apply)) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) ((((unsupported)).apply)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) ((((unsupported)).apply)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) (2.3))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) ((((unsupported)).apply)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) ((2.3.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xINF)) ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xpow)).apply ((xINF)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) (2.3))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) (((((unsupported)).apply).neg)) ((2.3.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) (((((unsupported)).apply).neg)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) ((((unsupported)).apply)))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) (2.3))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) ((((unsupported)).apply)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) ((2.3.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) (((((unsupported)).apply).neg)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNINF)) ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xpow)).apply ((xNINF)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) (((((unsupported)).apply).neg)) (2.3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) (((((unsupported)).apply).neg)) ((2.3.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xpow)).apply (((((unsupported)).apply).neg)) ((xNAN)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) (2.3))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((2.3.neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((((unsupported)).apply)) ((xNAN)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (2.3) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((2.3.neg)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNAN)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (2.3) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((2.3.neg)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((xNAN)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) (((((unsupported)).apply).neg)) (2.3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) (((((unsupported)).apply).neg)) ((3.1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (1.9) ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (1.1) ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (0.9) ((xNINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (0.1) ((xNINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((0.1.neg)) ((xNINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((0.9.neg)) ((xNINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((1.1.neg)) ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((1.9.neg)) ((xNINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (1.9) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (1.1) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (0.9) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply (0.1) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((0.1.neg)) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((0.9.neg)) ((xINF)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((1.1.neg)) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xpow)).apply ((1.9.neg)) ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("(-2.)**3.") (((((xmath).xpow)).apply ((2.0.neg)) (3.0))) ((8.0.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("(-2.)**2.") (((((xmath).xpow)).apply ((2.0.neg)) (2.0))) (4.0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("(-2.)**1.") (((((xmath).xpow)).apply ((2.0.neg)) (1.0))) ((2.0.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("(-2.)**0.") (((((xmath).xpow)).apply ((2.0.neg)) (0.0))) (1.0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("(-2.)**-0.") (((((xmath).xpow)).apply ((2.0.neg)) ((0.0.neg)))) (1.0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("(-2.)**-1.") (((((xmath).xpow)).apply ((2.0.neg)) ((1.0.neg)))) ((0.5.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("(-2.)**-2.") (((((xmath).xpow)).apply ((2.0.neg)) ((2.0.neg)))) (0.25))
                        bogusForceDataize.write ((((xself).xftest)).apply ("(-2.)**-3.") (((((xmath).xpow)).apply ((2.0.neg)) ((3.0.neg)))) ((0.125.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) ((2.0.neg)) ((0.5.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xpow)) ((2.0.neg)) (0.5))
                xtestRadians.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xradians)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("radians(180)") (((((xmath).xradians)).apply (180))) (((xmath).xpi)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("radians(90)") (((((xmath).xradians)).apply (90))) ((((xmath).xpi).div 2)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("radians(-45)") (((((xmath).xradians)).apply ((45.neg)))) (((((xmath).xpi).neg).div 4)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("radians(0)") (((((xmath).xradians)).apply (0))) (0))
                xtestRemainder.write
                  [xself]
                    memory > xexpected
                    memory > xactual
                    memory > xx
                    memory > xtiny
                    memory > xvalidate_spec
                    memory > xtestcases
                    memory > xy
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xvalidate_spec.write
                          [xx xy xr]
                            memory > xn
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xfx)) ((xfy)) ((xfr)))) ((((unsupported)).apply ((((xFraction)).apply ((xx)))) ((((xFraction)).apply ((xy)))) ((((xFraction)).apply ((xr)))))))
                                bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((xabs)).apply ((xfr)))) ((((xabs)).apply (((xfy).div 2)))))
                                xn.write (((xfx).sub (xfr)).div (xfy))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) ((((xint)).apply ((xn)))))
                                ((((xabs)).apply ((xfr))).eq (((xabs)).apply (((xfy).div 2)))).if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xn).div 2)) ((((xint)).apply (((xn).div 2)))))
                        xtestcases.write (((unsupported)).apply ("-4.0 1 -0.0") ("-3.8 1  0.8") ("-3.0 1 -0.0") ("-2.8 1 -0.8") ("-2.0 1 -0.0") ("-1.8 1  0.8") ("-1.0 1 -0.0") ("-0.8 1 -0.8") ("-0.0 1 -0.0") (" 0.0 1  0.0") (" 0.8 1  0.8") (" 1.0 1  0.0") (" 1.8 1 -0.8") (" 2.0 1  0.0") (" 2.8 1  0.8") (" 3.0 1  0.0") (" 3.8 1 -0.8") (" 4.0 1  0.0") ("0x0.0p+0 0x1.921fb54442d18p+2 0x0.0p+0") ("0x1.921fb54442d18p+0 0x1.921fb54442d18p+2  0x1.921fb54442d18p+0") ("0x1.921fb54442d17p+1 0x1.921fb54442d18p+2  0x1.921fb54442d17p+1") ("0x1.921fb54442d18p+1 0x1.921fb54442d18p+2  0x1.921fb54442d18p+1") ("0x1.921fb54442d19p+1 0x1.921fb54442d18p+2 -0x1.921fb54442d17p+1") ("0x1.921fb54442d17p+2 0x1.921fb54442d18p+2 -0x0.0000000000001p+2") ("0x1.921fb54442d18p+2 0x1.921fb54442d18p+2  0x0p0") ("0x1.921fb54442d19p+2 0x1.921fb54442d18p+2  0x0.0000000000001p+2") ("0x1.2d97c7f3321d1p+3 0x1.921fb54442d18p+2  0x1.921fb54442d14p+1") ("0x1.2d97c7f3321d2p+3 0x1.921fb54442d18p+2 -0x1.921fb54442d18p+1") ("0x1.2d97c7f3321d3p+3 0x1.921fb54442d18p+2 -0x1.921fb54442d14p+1") ("0x1.921fb54442d17p+3 0x1.921fb54442d18p+2 -0x0.0000000000001p+3") ("0x1.921fb54442d18p+3 0x1.921fb54442d18p+2  0x0p0") ("0x1.921fb54442d19p+3 0x1.921fb54442d18p+2  0x0.0000000000001p+3") ("0x1.f6a7a2955385dp+3 0x1.921fb54442d18p+2  0x1.921fb54442d14p+1") ("0x1.f6a7a2955385ep+3 0x1.921fb54442d18p+2  0x1.921fb54442d18p+1") ("0x1.f6a7a2955385fp+3 0x1.921fb54442d18p+2 -0x1.921fb54442d14p+1") ("0x1.1475cc9eedf00p+5 0x1.921fb54442d18p+2  0x1.921fb54442d10p+1") ("0x1.1475cc9eedf01p+5 0x1.921fb54442d18p+2 -0x1.921fb54442d10p+1") (" 1  0.c  0.4") ("-1  0.c -0.4") (" 1 -0.c  0.4") ("-1 -0.c -0.4") (" 1.4  0.c -0.4") ("-1.4  0.c  0.4") (" 1.4 -0.c -0.4") ("-1.4 -0.c  0.4") ("0x1.dp+1023 0x1.4p+1023  0x0.9p+1023") ("0x1.ep+1023 0x1.4p+1023 -0x0.ap+1023") ("0x1.fp+1023 0x1.4p+1023 -0x0.9p+1023"))
                        (((unsupported)).apply ((xcase)) ((xtestcases)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcase)))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xx_hex)) ((xy_hex)) ((xexpected_hex)))) (((((xcase).xsplit)).apply)))
                              xx.write ((((xfloat).xfromhex)).apply ((xx_hex)))
                              xy.write ((((xfloat).xfromhex)).apply ((xy_hex)))
                              xexpected.write ((((xfloat).xfromhex)).apply ((xexpected_hex)))
                              bogusForceDataize.write (((xvalidate_spec)).apply ((xx)) ((xy)) ((xexpected)))
                              xactual.write ((((xmath).xremainder)).apply ((xx)) ((xy)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xactual).xhex)).apply)) (((((xexpected).xhex)).apply)))
                        xtiny.write ((((xfloat).xfromhex)).apply ("1p-1074"))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply ((25.neg)) (25))))
                          seq
                            ((xn).eq 0).if
                              (((unsupported)).apply)
                            xy.write ((xn).mul (xtiny))
                            (((unsupported)).apply ((xm)) ((((xrange)).apply (100))))
                              seq
                                xx.write ((xm).mul (xtiny))
                                xactual.write ((((xmath).xremainder)).apply ((xx)) ((xy)))
                                bogusForceDataize.write (((xvalidate_spec)).apply ((xx)) ((xy)) ((xactual)))
                                xactual.write ((((xmath).xremainder)).apply (((xx).neg)) ((xy)))
                                bogusForceDataize.write (((xvalidate_spec)).apply (((xx).neg)) ((xy)) ((xactual)))
                        (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((xNAN)) (0.0) ((0.0.neg)) (2.0) ((2.3.neg)) ((xNINF)) ((xINF)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIsNaN)).apply (((((xmath).xremainder)).apply ((xNAN)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertIsNaN)).apply (((((xmath).xremainder)).apply ((xvalue)) ((xNAN)))))
                        (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((2.3.neg)) ((0.0.neg)) (0.0) (2.3))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xremainder)).apply ((xvalue)) ((xINF)))) ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xremainder)).apply ((xvalue)) ((xNINF)))) ((xvalue)))
                        (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((xNINF)) ((2.3.neg)) ((0.0.neg)) (0.0) (2.3) ((xINF)))))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write ((((xmath).xremainder)).apply ((xINF)) ((xvalue)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write ((((xmath).xremainder)).apply ((xNINF)) ((xvalue)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write ((((xmath).xremainder)).apply ((xvalue)) (0.0))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                              bogusForceDataize.write ((((xmath).xremainder)).apply ((xvalue)) ((0.0.neg)))
                xtestSin.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xsin)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("sin(0)") (((((xmath).xsin)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("sin(pi/2)") (((((xmath).xsin)).apply ((((xmath).xpi).div 2)))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("sin(-pi/2)") (((((xmath).xsin)).apply (((((xmath).xpi).neg).div 2)))) ((1.neg)))
                        (((unsupported)).apply ((xValueError)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xsin)).apply ((xINF)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xsin)).apply ((xNINF)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xsin)) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xsin)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xsin)).apply ((xNAN)))))))
                xtestSinh.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xsinh)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("sinh(0)") (((((xmath).xsinh)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("sinh(1)**2-cosh(1)**2") (((((unsupported)).apply (((((xmath).xsinh)).apply (1))) (2)).sub (((unsupported)).apply (((((xmath).xcosh)).apply (1))) (2)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("sinh(1)+sinh(-1)") ((((((xmath).xsinh)).apply (1)).add ((((xmath).xsinh)).apply ((1.neg))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xsinh)).apply ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xsinh)).apply ((xNINF)))) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xsinh)).apply ((xNAN)))))))
                xtestSqrt.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xsqrt)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("sqrt(0)") (((((xmath).xsqrt)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("sqrt(1)") (((((xmath).xsqrt)).apply (1))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("sqrt(4)") (((((xmath).xsqrt)).apply (4))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xsqrt)).apply ((xINF)))) ((xINF)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xsqrt)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xsqrt)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xsqrt)).apply ((xNAN)))))))
                xtestTan.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xtan)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("tan(0)") (((((xmath).xtan)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xftest)).apply ("tan(pi/4)") (((((xmath).xtan)).apply ((((xmath).xpi).div 4)))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("tan(-pi/4)") (((((xmath).xtan)).apply (((((xmath).xpi).neg).div 4)))) ((1.neg)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xtan)).apply ((xINF)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xtan)).apply ((xNINF)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xtan)) ((xINF)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmath).xtan)) ((xNINF)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xtan)).apply ((xNAN)))))))
                xtestTanh.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xtanh)))
                        bogusForceDataize.write ((((xself).xftest)).apply ("tanh(0)") (((((xmath).xtanh)).apply (0))) (0))
                        (((unsupported)).apply (((xself).xftest)) ("tanh(1)+tanh(-1)") ((((((xmath).xtanh)).apply (1)).add ((((xmath).xtanh)).apply ((1.neg))))) (0) ((((xulp)).apply (1))))
                        bogusForceDataize.write ((((xself).xftest)).apply ("tanh(inf)") (((((xmath).xtanh)).apply ((xINF)))) (1))
                        bogusForceDataize.write ((((xself).xftest)).apply ("tanh(-inf)") (((((xmath).xtanh)).apply ((xNINF)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xmath).xtanh)).apply ((xNAN)))))))
                xtestTanhSign.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtanh)).apply (((((unsupported)).apply).neg)))) (((((unsupported)).apply).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xcopysign)).apply ((((unsupported)).apply)) (((((xmath).xtanh)).apply (((((unsupported)).apply).neg)))))) (((((xmath).xcopysign)).apply ((((unsupported)).apply)) (((((unsupported)).apply).neg)))))
                xtest_trunc.write
                  [xself]
                    memory > x__trunc__
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtrunc)).apply (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtrunc)).apply ((1.neg)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xmath).xtrunc)).apply (1))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply (((((xmath).xtrunc)).apply (1.5))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtrunc)).apply (1.5))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtrunc)).apply ((1.5.neg)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtrunc)).apply (1.999999))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtrunc)).apply ((1.999999.neg)))) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtrunc)).apply ((0.999999.neg)))) ((0.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtrunc)).apply ((100.999.neg)))) ((100.neg)))
                        (((unsupported)).apply ((xobject)))
                          x__trunc__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (23))
                        (((unsupported)).apply ((xobject)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmath).xtrunc)).apply ((((xTestTrunc)).apply)))) (23))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xtrunc)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xtrunc)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmath).xtrunc)) ((((xTestNoTrunc)).apply)))
                xtestIsfinite.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisfinite)).apply (0.0))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisfinite)).apply ((0.0.neg)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisfinite)).apply (1.0))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisfinite)).apply ((1.0.neg)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmath).xisfinite)).apply ((((xfloat)).apply ("nan"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmath).xisfinite)).apply ((((xfloat)).apply ("inf"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmath).xisfinite)).apply ((((xfloat)).apply ("-inf"))))))
                xtestIsnan.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xfloat)).apply ("nan"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply ((((xfloat)).apply ("-nan"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xfloat)).apply ("inf")).mul (((unsupported)).apply))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmath).xisnan)).apply ((((xfloat)).apply ("inf"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmath).xisnan)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmath).xisnan)).apply ((((unsupported)).apply)))))
                xtestIsinf.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisinf)).apply ((((xfloat)).apply ("inf"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisinf)).apply ((((xfloat)).apply ("-inf"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisinf)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisinf)).apply (((((unsupported)).apply).neg)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmath).xisinf)).apply ((((xfloat)).apply ("nan"))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmath).xisinf)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmath).xisinf)).apply ((((unsupported)).apply)))))
                xtest_nan_constant.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((xmath).xnan)))))
                xtest_inf_constant.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisinf)).apply (((xmath).xinf)))))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply (((xmath).xinf)) (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmath).xinf)) ((((xfloat)).apply ("inf"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmath).xinf).neg)) ((((xfloat)).apply ("-inf"))))
                xtest_exceptions.write
                  [xself]
                    memory > xx
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          xx.write ((((xmath).xexp)).apply ((1000000000.neg)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("underflowing exp() should not have raised an exception"))
                        ((xx).neq 0).if
                          bogusForceDataize.write ((((xself).xfail)).apply ("underflowing exp() should have returned 0"))
                        (((unsupported)).apply ((xOverflowError)))
                          xx.write ((((xmath).xexp)).apply (1000000000))
                          bogusForceDataize.write ((((xself).xfail)).apply ("overflowing exp() didn't trigger OverflowError"))
                        (((unsupported)).apply ((xValueError)))
                          xx.write ((((xmath).xsqrt)).apply ((1.0.neg)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("sqrt(-1) didn't raise ValueError"))
                xtest_testfile.write
                  [xself]
                    memory > xSKIP_ON_TIGER
                    memory > xmsg
                    memory > xfailure
                    memory > xversion_txt
                    memory > xfail_fmt
                    memory > xfailures
                    memory > xfunc
                    memory > xer
                    memory > xresult
                    memory > xosx_version
                    seq > @
                      (((unsupported)).apply)
                        xSKIP_ON_TIGER.write (((unsupported)).apply ("tan0064"))
                        xosx_version.write "None: is there a None literal in the EO language?"
                        (((xsys).xplatform).eq "darwin").if
                          seq
                            xversion_txt.write (((unsupported)).apply (((((xplatform).xmac_ver)).apply)) (0))
                            (((unsupported)).apply ((xValueError)))
                              xosx_version.write (((xtuple)).apply ((((xmap)).apply ((xint)) (((((xversion_txt).xsplit)).apply ("."))))))
                        xfail_fmt.write "{}: {}({!r}): {}"
                        xfailures.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xid)) ((xfn)) ((xar)) ((xai)) ((xer)) ((xei)) ((xflags)))) ((((xparse_testfile)).apply ((xtest_file)))))
                          seq
                            (((xai).neq 0.0).or ((xei).neq 0.0)).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xfn)) ((((unsupported)).apply ("rect") ("polar")))).if
                              (((unsupported)).apply)
                            ((((unsupported)).apply ((xosx_version)) ("None: is there a None literal in the EO language?")).and ((xosx_version).less (((unsupported)).apply (10) (5)))).if
                              (((unsupported)).apply ((xid)) ((xSKIP_ON_TIGER))).if
                                (((unsupported)).apply)
                            xfunc.write (((xgetattr)).apply ((xmath)) ((xfn)))
                            ((((unsupported)).apply ("invalid") ((xflags))).or (((unsupported)).apply ("divide-by-zero") ((xflags)))).if
                              xer.write "ValueError"
                              (((unsupported)).apply ("overflow") ((xflags))).if
                                xer.write "OverflowError"
                            (((unsupported)).apply ((xValueError)) ((xOverflowError)))
                              xresult.write (((xfunc)).apply ((xar)))
                              xresult.write "ValueError"
                              xresult.write "OverflowError"
                            (((unsupported)).apply ((((unsupported)).apply ((xulp_tol)) ((xabs_tol)))) ((((unsupported)).apply (5) (0.0))))
                            xfailure.write (((xresult_check)).apply ((xer)) ((xresult)) ((xulp_tol)) ((xabs_tol)))
                            (((unsupported)).apply ((xfailure)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply)
                            xmsg.write ((((xfail_fmt).xformat)).apply ((xid)) ((xfn)) ((xar)) ((xfailure)))
                            bogusForceDataize.write ((((xfailures).xappend)).apply ((xmsg)))
                        (xfailures).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("Failures in test_testfile:n  ".add ((("n  ".xjoin)).apply ((xfailures))))))
                xtest_mtestfile.write
                  [xself]
                    memory > xexpected
                    memory > xulp_tol
                    memory > xgot
                    memory > xfunc
                    memory > xmsg
                    memory > xfailure
                    memory > xabs_tol
                    memory > xfail_fmt
                    memory > xfailures
                    seq > @
                      (((unsupported)).apply)
                        xfail_fmt.write "{}: {}({!r}): {}"
                        xfailures.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xid)) ((xfn)) ((xarg)) ((xexpected)) ((xflags)))) ((((xparse_mtestfile)).apply ((xmath_testcases)))))
                          seq
                            xfunc.write (((xgetattr)).apply ((xmath)) ((xfn)))
                            ((((unsupported)).apply ("invalid") ((xflags))).or (((unsupported)).apply ("divide-by-zero") ((xflags)))).if
                              xexpected.write "ValueError"
                              (((unsupported)).apply ("overflow") ((xflags))).if
                                xexpected.write "OverflowError"
                            (((unsupported)).apply ((xValueError)) ((xOverflowError)))
                              xgot.write (((xfunc)).apply ((xarg)))
                              xgot.write "ValueError"
                              xgot.write "OverflowError"
                            (((unsupported)).apply ((((unsupported)).apply ((xulp_tol)) ((xabs_tol)))) ((((unsupported)).apply (5) (0.0))))
                            ((xfn).eq "gamma").if
                              xulp_tol.write 20
                              ((xfn).eq "lgamma").if
                                xabs_tol.write (((unsupported)).apply)
                                (((xfn).eq "erfc").and ((xarg).geq 0.0)).if
                                  ((xarg).less 1.0).if
                                    xulp_tol.write 10
                                    ((xarg).less 10.0).if
                                      xulp_tol.write 100
                                      xulp_tol.write 1000
                            xfailure.write (((xresult_check)).apply ((xexpected)) ((xgot)) ((xulp_tol)) ((xabs_tol)))
                            (((unsupported)).apply ((xfailure)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply)
                            xmsg.write ((((xfail_fmt).xformat)).apply ((xid)) ((xfn)) ((xarg)) ((xfailure)))
                            bogusForceDataize.write ((((xfailures).xappend)).apply ((xmsg)))
                        (xfailures).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("Failures in test_mtestfile:n  ".add ((("n  ".xjoin)).apply ((xfailures))))))
                xtest_prod.write
                  [xself]
                    memory > xprod
                    memory > x_naive_prod
                    memory > xvalues
                    memory > xiterable
                    seq > @
                      seq
                        xprod.write ((xmath).xprod)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xprod)) ((((unsupported)).apply)) (5))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((xlist)).apply ((((xrange)).apply (2) (8))))))) (5040))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((xiter)).apply ((((xlist)).apply ((((xrange)).apply (2) (8))))))))) (5040))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xprod)) ((((xrange)).apply (1) (10))) (10))) (3628800))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (3) (4) (5))))) (120))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1.0) (2.0) (3.0) (4.0) (5.0))))) (120.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (3) (4.0) (5.0))))) (120.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1.0) (2.0) (3.0) (4) (5))))) (120.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1) (1) ((((unsupported)).apply (2) (32))) (1) (1))))) ((((unsupported)).apply (2) (32))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1.0) (1.0) ((((unsupported)).apply (2) (32))) (1) (1))))) ((((xfloat)).apply ((((unsupported)).apply (2) (32))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)) ((((unsupported)).apply ("a") ("b") ("c"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)) ((((unsupported)).apply ("a") ("b") ("c"))) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)) ((((unsupported)).apply ("a") ("c"))) (""))
                        xvalues.write (((unsupported)).apply ((((xbytearray)).apply ("a"))) ((((xbytearray)).apply ("b"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)) ((xvalues)) ((((xbytearray)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)) ((((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply (2))) ((((unsupported)).apply (3))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)) ((((unsupported)).apply ((((unsupported)).apply (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)) (((((unsupported)).apply ((((unsupported)).apply (2) (3)))).mul 2)) ((((unsupported)).apply (2) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xprod)) ((((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply (2))) ((((unsupported)).apply (3))))) ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xprod)).apply ((((unsupported)).apply (10) (20))) ((((unsupported)).apply (30) (40))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (0) (1) (2) (3))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1) (0) (2) (3))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (3) (0))))) (0))
                        x_naive_prod.write
                          [xiterable xstart]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xelem)) ((xiterable)))
                                  (((unsupported)).apply ((xstart)) ((xelem)))
                                (((unsupported)).apply ((xstart)))
                        xiterable.write (((xrange)).apply (1) (10000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((xiterable)))) ((((x_naive_prod)).apply ((xiterable)))))
                        xiterable.write (((xrange)).apply ((10000.neg)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((xiterable)))) ((((x_naive_prod)).apply ((xiterable)))))
                        xiterable.write (((xrange)).apply ((1000.neg)) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((xiterable)))) (0))
                        xiterable.write (((unsupported)).apply ((((xfloat)).apply ((xx)))) ((xx)) ((((xrange)).apply (1) (1000))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((xiterable)))) ((((x_naive_prod)).apply ((xiterable)))))
                        xiterable.write (((unsupported)).apply ((((xfloat)).apply ((xx)))) ((xx)) ((((xrange)).apply ((1000.neg)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((xiterable)))) ((((x_naive_prod)).apply ((xiterable)))))
                        xiterable.write (((unsupported)).apply ((((xfloat)).apply ((xx)))) ((xx)) ((((xrange)).apply ((1000.neg)) (1000))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((xiterable)))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (3) ((((xfloat)).apply ("nan"))) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) (0) ((((xfloat)).apply ("nan"))) (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) ((((xfloat)).apply ("nan"))) (0) (3))))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) ((((xfloat)).apply ("inf"))) ((((xfloat)).apply ("nan"))) (3))))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) ((((xfloat)).apply ("-inf"))) ((((xfloat)).apply ("nan"))) (3))))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) ((((xfloat)).apply ("nan"))) ((((xfloat)).apply ("inf"))) (3))))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) ((((xfloat)).apply ("nan"))) ((((xfloat)).apply ("-inf"))) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (3) ((((xfloat)).apply ("inf"))) ((3.neg)) (4))))) ((((xfloat)).apply ("-inf"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (3) ((((xfloat)).apply ("-inf"))) ((3.neg)) (4))))) ((((xfloat)).apply ("inf"))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (0) ((((xfloat)).apply ("inf"))) ((3.neg)) (4))))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (0) ((((xfloat)).apply ("-inf"))) ((3.neg)) (4))))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (3) ((((xfloat)).apply ("inf"))) ((3.neg)) (0) (3))))))
                        bogusForceDataize.write ((((xself).xassertIsNaN)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (3) ((((xfloat)).apply ("-inf"))) ((3.neg)) (0) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6))))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xprod)).apply ((((unsupported)).apply (1) (2.0) (3) (4) (5) (6))))))) ((xfloat)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xprod)).apply ((((xrange)).apply (1) (10000))))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((xprod)) ((((xrange)).apply (1) (10000))) (1.0))))) ((xfloat)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xprod)).apply ((((unsupported)).apply (1) (((((xdecimal).xDecimal)).apply (2.0))) (3) (4) (5) (6))))))) (((xdecimal).xDecimal)))
                xtestPerm.write
                  [xself]
                    memory > xn
                    memory > xperm
                    memory > xfactorial
                    seq > @
                      seq
                        xperm.write ((xmath).xperm)
                        xfactorial.write ((xmath).xfactorial)
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (100))))
                          (((unsupported)).apply ((xk)) ((((xrange)).apply (((xn).add 1)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) ((xk)))) ((((unsupported)).apply ((((xfactorial)).apply ((xn)))) ((((xfactorial)).apply (((xn).sub (xk))))))))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (1) (100))))
                          (((unsupported)).apply ((xk)) ((((xrange)).apply (1) ((xn)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) ((xk)))) ((((((xperm)).apply (((xn).sub 1)) (((xk).sub 1))).mul (xk)).add (((xperm)).apply (((xn).sub 1)) ((xk))))))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (1) (100))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) (0))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) (1))) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) ((xn)))) ((((xfactorial)).apply ((xn)))))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (20))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)))) ((((xfactorial)).apply ((xn)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) ("None: is there a None literal in the EO language?"))) ((((xfactorial)).apply ((xn)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xperm)) (10) (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xperm)) (10) (((((xdecimal).xDecimal)).apply (1.0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xperm)) (10) ("1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xperm)) (10.0) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xperm)) (((((xdecimal).xDecimal)).apply (10.0))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xperm)) ("10") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xperm)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xperm)) (10) (1) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xperm)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xperm)) ((1.neg)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xperm)) (((((unsupported)).apply (2) (1000)).neg)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xperm)) (1) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xperm)) (1) (((((unsupported)).apply (2) (1000)).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply (1) (2))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply (1) ((((unsupported)).apply (2) (1000))))) (0))
                        xn.write (((unsupported)).apply (2) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) (1))) ((xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) (2))) (((xn).mul ((xn).sub 1))))
                        (((unsupported)).apply (((xsupport).xcheck_impl_detail)) (TRUE)).if
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xperm)) ((xn)) ((xn)))
                        (((unsupported)).apply ((((unsupported)).apply ((xn)) ((xk)))) ((((unsupported)).apply ((((unsupported)).apply (TRUE) (TRUE))) ((((unsupported)).apply (TRUE) (FALSE))) ((((unsupported)).apply (FALSE) (FALSE))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((xn)) ((xk)))) (1))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xperm)).apply ((xn)) ((xk)))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((((xIntSubclass)).apply (5))) ((((xIntSubclass)).apply (2))))) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xperm)).apply ((((xMyIndexable)).apply (5))) ((((xMyIndexable)).apply (2))))) (20))
                        (((unsupported)).apply ((xk)) ((((xrange)).apply (3))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xperm)).apply ((((xIntSubclass)).apply (5))) ((((xIntSubclass)).apply ((xk)))))))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xperm)).apply ((((xMyIndexable)).apply (5))) ((((xMyIndexable)).apply ((xk)))))))) ((xint)))
                xtestComb.write
                  [xself]
                    memory > xn
                    memory > xfactorial
                    memory > xcomb
                    seq > @
                      seq
                        xcomb.write ((xmath).xcomb)
                        xfactorial.write ((xmath).xfactorial)
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (100))))
                          (((unsupported)).apply ((xk)) ((((xrange)).apply (((xn).add 1)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) ((xk)))) ((((unsupported)).apply ((((xfactorial)).apply ((xn)))) (((((xfactorial)).apply ((xk))).mul (((xfactorial)).apply (((xn).sub (xk)))))))))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (1) (100))))
                          (((unsupported)).apply ((xk)) ((((xrange)).apply (1) ((xn)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) ((xk)))) (((((xcomb)).apply (((xn).sub 1)) (((xk).sub 1))).add (((xcomb)).apply (((xn).sub 1)) ((xk))))))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (100))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) (0))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) ((xn)))) (1))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (1) (100))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) (1))) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) (((xn).sub 1)))) ((xn)))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (100))))
                          (((unsupported)).apply ((xk)) ((((xrange)).apply ((((unsupported)).apply ((xn)) (2))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) ((xk)))) ((((xcomb)).apply ((xn)) (((xn).sub (xk))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcomb)) (10) (1.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcomb)) (10) (((((xdecimal).xDecimal)).apply (1.0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcomb)) (10) ("1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcomb)) (10.0) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcomb)) (((((xdecimal).xDecimal)).apply (10.0))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcomb)) ("10") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcomb)) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcomb)) (10) (1) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcomb)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xcomb)) ((1.neg)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xcomb)) (((((unsupported)).apply (2) (1000)).neg)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xcomb)) (1) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xcomb)) (1) (((((unsupported)).apply (2) (1000)).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply (1) (2))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply (1) ((((unsupported)).apply (2) (1000))))) (0))
                        xn.write (((unsupported)).apply (2) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) (1))) ((xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) (2))) ((((unsupported)).apply (((xn).mul ((xn).sub 1))) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) ((xn)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) (((xn).sub 1)))) ((xn)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) (((xn).sub 2)))) ((((unsupported)).apply (((xn).mul ((xn).sub 1))) (2))))
                        (((unsupported)).apply (((xsupport).xcheck_impl_detail)) (TRUE)).if
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xcomb)) ((xn)) ((((unsupported)).apply ((xn)) (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xn)) ((xk)))) ((((unsupported)).apply ((((unsupported)).apply (TRUE) (TRUE))) ((((unsupported)).apply (TRUE) (FALSE))) ((((unsupported)).apply (FALSE) (FALSE))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((xn)) ((xk)))) (1))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xcomb)).apply ((xn)) ((xk)))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((((xIntSubclass)).apply (5))) ((((xIntSubclass)).apply (2))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcomb)).apply ((((xMyIndexable)).apply (5))) ((((xMyIndexable)).apply (2))))) (10))
                        (((unsupported)).apply ((xk)) ((((xrange)).apply (3))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xcomb)).apply ((((xIntSubclass)).apply (5))) ((((xIntSubclass)).apply ((xk)))))))) ((xint)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((xcomb)).apply ((((xMyIndexable)).apply (5))) ((((xMyIndexable)).apply ((xk)))))))) ((xint)))
                xtest_issue39871.write
                  [xself]
                    memory > xy
                    memory > x__float__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          x__float__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)).apply (((xself).xconverted)) (TRUE))
                                  unsupported
                        (((unsupported)).apply ((xfunc)) ((((unsupported)).apply (((xmath).xatan2)) (((xmath).xcopysign)) (((xmath).xremainder)))))
                          seq
                            xy.write (((xF)).apply)
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              bogusForceDataize.write (((xfunc)).apply ("not a number") ((xy)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xgetattr)).apply ((xy)) ("converted") (FALSE))))
                xassertIsNaN.write
                  [xself xvalue]
                    seq > @
                      (((((xmath).xisnan)).apply ((xvalue))).not).if
                        bogusForceDataize.write ((((xself).xfail)).apply (((("Expected a NaN, got {!r}.".xformat)).apply ((xvalue)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xisclose.write ((xmath).xisclose)
                xassertIsClose.write
                  [xself xa xb]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xassertTrue)) (((((xself).xisclose)).apply ((xa)) ((xb)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) (("%s and %s should be close!".mod (((unsupported)).apply ((xa)) ((xb))))))
                xassertIsNotClose.write
                  [xself xa xb]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xassertFalse)) (((((xself).xisclose)).apply ((xa)) ((xb)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) (("%s and %s should not be close!".mod (((unsupported)).apply ((xa)) ((xb))))))
                xassertAllClose.write
                  [xself xexamples]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((xexamples)))
                          bogusForceDataize.write ((((xself).xassertIsClose)).apply ((xa)) ((xb)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xassertAllNotClose.write
                  [xself xexamples]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((xexamples)))
                          bogusForceDataize.write ((((xself).xassertIsNotClose)).apply ((xa)) ((xb)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xtest_negative_tolerances.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xself).xassertIsClose)) (1) (1) (((((unsupported)).apply).neg)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          (((unsupported)).apply (((xself).xassertIsClose)) (1) (1) ((((unsupported)).apply)) (((((unsupported)).apply).neg)))
                xtest_identical.write
                  [xself]
                    memory > xidentical_examples
                    seq > @
                      seq
                        xidentical_examples.write (((unsupported)).apply ((((unsupported)).apply (2.0) (2.0))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply (12345) (12345.0))) ((((unsupported)).apply (0.0) ((0.0.neg)))) ((((unsupported)).apply (345678) (345678))))
                        (((unsupported)).apply (((xself).xassertAllClose)) ((xidentical_examples)) (0.0) (0.0))
                xtest_eight_decimal_places.write
                  [xself]
                    memory > xeight_decimal_places_examples
                    seq > @
                      seq
                        xeight_decimal_places_examples.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) (((((unsupported)).apply).add 1)))) ((((unsupported)).apply (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)))) ((((unsupported)).apply (1.12345678) (1.12345679))))
                        (((unsupported)).apply (((xself).xassertAllClose)) ((xeight_decimal_places_examples)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xassertAllNotClose)) ((xeight_decimal_places_examples)) ((((unsupported)).apply)))
                xtest_near_zero.write
                  [xself]
                    memory > xnear_zero_examples
                    seq > @
                      seq
                        xnear_zero_examples.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) (0.0))) ((((unsupported)).apply (((((unsupported)).apply).neg)) (0.0))) ((((unsupported)).apply (((((unsupported)).apply).neg)) (0.0))))
                        (((unsupported)).apply (((xself).xassertAllNotClose)) ((xnear_zero_examples)) (0.9))
                        (((unsupported)).apply (((xself).xassertAllClose)) ((xnear_zero_examples)) ((((unsupported)).apply)))
                xtest_identical_infinite.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsClose)).apply ((xINF)) ((xINF)))
                        (((unsupported)).apply (((xself).xassertIsClose)) ((xINF)) ((xINF)) (0.0))
                        bogusForceDataize.write ((((xself).xassertIsClose)).apply ((xNINF)) ((xNINF)))
                        (((unsupported)).apply (((xself).xassertIsClose)) ((xNINF)) ((xNINF)) (0.0))
                xtest_inf_ninf_nan.write
                  [xself]
                    memory > xnot_close_examples
                    seq > @
                      seq
                        xnot_close_examples.write (((unsupported)).apply ((((unsupported)).apply ((xNAN)) ((xNAN)))) ((((unsupported)).apply ((xNAN)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((xNAN)))) ((((unsupported)).apply ((xINF)) ((xNAN)))) ((((unsupported)).apply ((xNAN)) ((xINF)))) ((((unsupported)).apply ((xINF)) ((xNINF)))) ((((unsupported)).apply ((xINF)) (1.0))) ((((unsupported)).apply (1.0) ((xINF)))) ((((unsupported)).apply ((xINF)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((xINF)))))
                        (((unsupported)).apply (((xself).xassertAllNotClose)) ((xnot_close_examples)) (0.999999999999999))
                xtest_zero_tolerance.write
                  [xself]
                    memory > xzero_tolerance_close_examples
                    memory > xzero_tolerance_not_close_examples
                    seq > @
                      seq
                        xzero_tolerance_close_examples.write (((unsupported)).apply ((((unsupported)).apply (1.0) (1.0))) ((((unsupported)).apply ((3.4.neg)) ((3.4.neg)))) ((((unsupported)).apply (((((unsupported)).apply).neg)) (((((unsupported)).apply).neg)))))
                        (((unsupported)).apply (((xself).xassertAllClose)) ((xzero_tolerance_close_examples)) (0.0))
                        xzero_tolerance_not_close_examples.write (((unsupported)).apply ((((unsupported)).apply (1.0) (1.000000000000001))) ((((unsupported)).apply (0.99999999999999) (1.0))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xself).xassertAllNotClose)) ((xzero_tolerance_not_close_examples)) (0.0))
                xtest_asymmetry.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xassertAllClose)) ((((unsupported)).apply ((((unsupported)).apply (9) (10))) ((((unsupported)).apply (10) (9))))) (0.1))
                xtest_integers.write
                  [xself]
                    memory > xinteger_examples
                    seq > @
                      seq
                        xinteger_examples.write (((unsupported)).apply ((((unsupported)).apply (100000001) (100000000))) ((((unsupported)).apply (123456789) (123456788))))
                        (((unsupported)).apply (((xself).xassertAllClose)) ((xinteger_examples)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xassertAllNotClose)) ((xinteger_examples)) ((((unsupported)).apply)))
                xtest_decimals.write
                  [xself]
                    memory > xdecimal_examples
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xdecimal_examples.write (((unsupported)).apply ((((unsupported)).apply ((((xDecimal)).apply ("1.00000001"))) ((((xDecimal)).apply ("1.0"))))) ((((unsupported)).apply ((((xDecimal)).apply ("1.00000001e-20"))) ((((xDecimal)).apply ("1.0e-20"))))) ((((unsupported)).apply ((((xDecimal)).apply ("1.00000001e-100"))) ((((xDecimal)).apply ("1.0e-100"))))) ((((unsupported)).apply ((((xDecimal)).apply ("1.00000001e20"))) ((((xDecimal)).apply ("1.0e20"))))))
                        (((unsupported)).apply (((xself).xassertAllClose)) ((xdecimal_examples)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xassertAllNotClose)) ((xdecimal_examples)) ((((unsupported)).apply)))
                xtest_fractions.write
                  [xself]
                    memory > xfraction_examples
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfraction_examples.write (((unsupported)).apply ((((unsupported)).apply (((((xFraction)).apply (1) (100000000)).add 1)) ((((xFraction)).apply (1))))) ((((unsupported)).apply ((((xFraction)).apply (100000001))) ((((xFraction)).apply (100000000))))) ((((unsupported)).apply ((((xFraction)).apply (((((unsupported)).apply (10) (8)).add 1)) ((((unsupported)).apply (10) (28))))) ((((xFraction)).apply (1) ((((unsupported)).apply (10) (20))))))))
                        (((unsupported)).apply (((xself).xassertAllClose)) ((xfraction_examples)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xassertAllNotClose)) ((xfraction_examples)) ((((unsupported)).apply)))
            xtest_main.write
              []
                memory > xsuite
                seq > @
                  seq
                    (((unsupported)).apply)
                    xsuite.write ((((xunittest).xTestSuite)).apply)
                    bogusForceDataize.write ((((xsuite).xaddTest)).apply (((((xunittest).xmakeSuite)).apply ((xMathTests)))))
                    bogusForceDataize.write ((((xsuite).xaddTest)).apply (((((xunittest).xmakeSuite)).apply ((xIsCloseTests)))))
                    bogusForceDataize.write ((((xsuite).xaddTest)).apply ((((xDocFileSuite)).apply ("ieee754.txt"))))
                    bogusForceDataize.write (((xrun_unittest)).apply ((xsuite)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)