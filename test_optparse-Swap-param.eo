memory > xInterceptedError
memory > xlocals
memory > xValueError
memory > xOptionError
memory > xrange
memory > xInterceptingOptionParser
memory > xSUPPRESS_USAGE
memory > xtype
memory > xtuple
memory > xmap
memory > xenv
memory > xoptions
memory > xcopy
memory > xConflictBase
memory > xstr
memory > xTitledHelpFormatter
memory > xOptionGroup
memory > xBadOptionError
memory > x_parse_num
memory > xOption
memory > xoptparse
memory > xIndexError
memory > xDurationOption
memory > xBaseTest
memory > xValues
memory > xerr
memory > xOptionConflictError
memory > xint
memory > xre
memory > xException
memory > xpositional_args
memory > xx
memory > xOptionValueError
memory > xsupport
memory > xsys
memory > xargs
memory > xos
memory > x_match_abbrev
memory > xgetattr
memory > xvars
memory > xmake_option
memory > xStringIO
memory > xunittest
memory > xsetattr
memory > xOptionParser
memory > xisinstance
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_optparse
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_remove_short_opt
        memory > xtest_help_long_opts_first
        memory > xtest_help_unicode
        memory > xassertParseOK
        memory > xtest_long_invalid_integer
        memory > xtest_bool_false
        memory > xtest_defaults
        memory > x__str__
        memory > xtest_float_default
        memory > xtest_get_option
        memory > xtest__all__
        memory > xtest_short_and_long_option_split
        memory > xtest_match_abbrev
        memory > xtest_count_interspersed_args
        memory > xtest_long_option_short_option
        memory > xtest_no_type_for_action
        memory > xtest_opt_string_short_invalid
        memory > xtest_match_abbrev_error
        memory > x_expected_help_long_opts_first
        memory > xtest_invalid_integer
        memory > xtest_conflict_default
        memory > xtest_abbrev_callback_expansion
        memory > xtest_remove_nonexistent
        memory > xtest_str_aliases_string
        memory > xtest_required_value
        memory > xtest_callback_not_callable
        memory > xtest_attr_invalid
        memory > xtest_conflict_default_none
        memory > xSTORE_ACTIONS
        memory > xtest_short_option_joined_and_separator
        memory > xassertTypeError
        memory > xtest_group_manipulate
        memory > xtest_help_title_formatter
        memory > xtest_remove_long_opt
        memory > xACTIONS
        memory > xtest_help
        memory > x_expected_help_title_formatter
        memory > xtest_mixed_defaults_pre
        memory > xtake_action
        memory > xtest_callback_extra_args
        memory > xtest_ambiguous_option
        memory > xerror
        memory > xprocess_tuple
        memory > xassertParseFail
        memory > xtest_count_no_interspersed_args
        memory > xtest_long_option_argument_split
        memory > xtest_nargs_append_const
        memory > xdummy
        memory > x_check_duration
        memory > xtest_option_default
        memory > xtest_default_none_1
        memory > xtest_valid_choice
        memory > xassertOptionError
        memory > xtest_nargs_invalid_float_value
        memory > xtest_no_append_versus_append
        memory > xtest_no_choices_list
        memory > xtest_callback_kwargs_no_dict
        memory > xtest_option_argument_joined_integer
        memory > xtest_conflict_resolve_long_opt
        memory > xtest_conflict_override_args
        memory > xtest_main
        memory > xtest_no_const_for_action
        memory > xassertHelpEquals
        memory > xtest_option_consumes_optionlike_string
        memory > xtest_many_args
        memory > xtest_parse_num_fail
        memory > xtest_no_expand
        memory > xtest_nargs_with_positional_args
        memory > xtest_version
        memory > xtest_mixed_defaults_post
        memory > xtest_long_option_append
        memory > xtest_callback
        memory > xtest_long_option_argument_joined
        memory > xtest_type_invalid
        memory > xtest_bad_choices_list
        memory > xassertOutput
        memory > xtest_short_option_consumes_separator
        memory > xsetUp
        memory > xassertUsage
        memory > xtest_conflict_error_group
        memory > xtest_nargs_long_opt
        memory > xtest_nargs_required_values
        memory > xtest_no_callback_for_action
        memory > xtest_conflict_resolve_help
        memory > xtest_nargs_append_required_values
        memory > xtest_short_option_split_one_positional_arg
        memory > xtest_count_no_such_option
        memory > xtest_wrap_columns
        memory > xtest_conflict_resolve
        memory > xtest_help_old_usage
        memory > x_expected_very_help_short_lines
        memory > xtest_option_group_create_instance
        memory > xtest_callback_help
        memory > xtest_callback_meddle_args
        memory > xtest_stop_at_invalid_option
        memory > xtest_action_invalid
        memory > xtest_option_argument_split_negative_integer
        memory > xtest_get_option_equals
        memory > x_expected_help_basic
        memory > xassertTrueconflict_error
        memory > xtest_parse_num_ok
        memory > x_expected_help_short_lines
        memory > xtest_count_override_amount
        memory > xtest_add_option_invalid_arguments
        memory > xtest_help_description_groups
        memory > xmake_parser
        memory > xassertHelp
        memory > xtest_no_nargs_for_action
        memory > xtest_positional_arg_and_variable_args
        memory > xtest_no_single_dash
        memory > xtest_bool_true
        memory > xtest_opt_string_long_invalid
        memory > xtest_count_three
        memory > xcheck_file
        memory > xtest_conflict_resolve_long_opts
        memory > xtest_no_such_option
        memory > xtest_conflict_resolve_short_opt
        memory > xtest_parser_default_2
        memory > xtest_add_choice_option
        memory > xtest_abbrev_long_option
        memory > xtest_refleak
        memory > xtest_no_callback_kwargs_for_action
        memory > xtest_hyphen_becomes_positional_arg
        memory > xtest_bool_default
        memory > xtest_count_option_no_value
        memory > xtest_conflict_error
        memory > xtest_option_argument_split
        memory > xtest_opt_string_too_short
        memory > xcheck_abbrev
        memory > xtest_shortopt_empty_longopt_append
        memory > xtest_add_group_invalid_arguments
        memory > xprocess_opt
        memory > xtest_numeric_options
        memory > xtest_nargs_append_simple
        memory > xtest_count_override_quiet
        memory > xexit
        memory > xtest_count_overriding
        memory > xTYPE_CHECKER
        memory > xtest_no_choices_for_type
        memory > xtest_count_one
        memory > xtest_count_with_default
        memory > xtest_basics
        memory > xtest_add_option_no_Option
        memory > xtest_variable_args
        memory > xtest_type_object
        memory > xassertTrueremoved
        memory > x__init__
        memory > xprocess_many
        memory > xtest_help_unicode_description
        memory > xtest_filetype_notfile
        memory > xtest_callback_args_no_tuple
        memory > xtest_combined_single_invalid_option
        memory > xtest_bool_flicker_on_and_off
        memory > xtest_add_group_wrong_parser
        memory > xtest_has_option
        memory > xtest_default_progname
        memory > xtest_invalid_choice
        memory > xtest_add_group_no_group
        memory > xtest_no_version
        memory > xtest_process_default
        memory > xtest_count_overriding_default
        memory > xtest_callback_meddle_args_separator
        memory > x_time_units
        memory > xprocess_n
        memory > xtest_short_option_split_long_option_append
        memory > xtest_basic_defaults
        memory > xtest_no_such_conflict_handler
        memory > xTYPED_ACTIONS
        memory > xtest_empty
        memory > xtest_count_three_apart
        memory > xtest_custom_progname
        memory > xtest_filetype_ok
        memory > xvariable_args
        memory > xtest_no_callback_args_for_action
        memory > xtest_parser_default_1
        memory > xtest_option_argument_joined
        memory > xassertVersion
        memory > xtest_no_default
        memory > xtest_opt_string_empty
        memory > xtearDown
        memory > xtest_extend_add_action_normal
        memory > xtest_nargs_append
        memory > xtest_conflict_override_help
        memory > xshow_version
        memory > xtest_stop_at_option
        memory > xassertRaises
        memory > xtest_alt_expand
        memory > xtest_consume_separator_stop_at_option
        memory > xtest_filetype_noexist
        memory > xtest_extend_add_action
        memory > xtest_conflict_override_opts
        memory > xTYPES
        memory > xtest_default_none_2
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xException)))
              seq
                x__init__.write
                  [xself xerror_message xexit_status xexit_message]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xerror_message)) ((xerror_message)))
                        (((unsupported)).apply (((xself).xexit_status)) ((xexit_status)))
                        (((unsupported)).apply (((xself).xexit_message)) ((xexit_message)))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xerror_message).or ((xself).xexit_message)).or "intercepted error")))
            (((unsupported)).apply ((xOptionParser)))
              seq
                xexit.write
                  [xself xstatus xmsg]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xInterceptedError)) ((xstatus)) ((xmsg)))))
                xerror.write
                  [xself xmsg]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xInterceptedError)) ((xmsg)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xassertParseOK.write
                  [xself xargs xexpected_opts xexpected_positional_args]
                    memory > xoptdict
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xpositional_args)))) ((((((xself).xparser).xparse_args)).apply ((xargs)))))
                        xoptdict.write (((xvars)).apply ((xoptions)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoptdict)) ((xexpected_opts)) (((((unsupported)).apply).mod (((xlocals)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpositional_args)) ((xexpected_positional_args)) (((((unsupported)).apply).mod (((xlocals)).apply))))
                        (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xpositional_args)))))
                xassertRaises.write
                  [xself xfunc xargs xkwargs xexpected_exception xexpected_message]
                    memory > xactual_message
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xargs)) ("None: is there a None literal in the EO language?")).if
                          xargs.write (((unsupported)).apply)
                        (((unsupported)).apply ((xkwargs)) ("None: is there a None literal in the EO language?")).if
                          xkwargs.write (((unsupported)).apply)
                        (((unsupported)).apply ((xexpected_exception)))
                          bogusForceDataize.write (((xfunc)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                          seq
                            xactual_message.write (((xstr)).apply ((xerr)))
                            (((xisinstance)).apply ((xexpected_message)) (((xre).xPattern))).if
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xexpected_message).xsearch)).apply ((xactual_message)))) (((((unsupported)).apply).mod (((unsupported)).apply (((xexpected_message).xpattern)) ((xactual_message))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual_message)) ((xexpected_message)) (((((unsupported)).apply).mod (((unsupported)).apply ((xexpected_message)) ((xactual_message))))))
                            (((unsupported)).apply ((xerr)))
                          bogusForceDataize.write ((((xself).xfail)).apply (((((unsupported)).apply).mod (((xlocals)).apply))))
                xassertParseFail.write
                  [xself xcmdline_args xexpected_output]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xInterceptedError)))
                          bogusForceDataize.write (((((xself).xparser).xparse_args)).apply ((xcmdline_args)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xerror_message)) ((xexpected_output)))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply ("expected parse failure"))
                xassertOutput.write
                  [xself xcmdline_args xexpected_output xexpected_status xexpected_error]
                    memory > xsave_stdout
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xsave_stdout.write ((xsys).xstdout)
                        (((unsupported)).apply ((xInterceptedError)))
                          (((unsupported)).apply)
                            seq
                              (((unsupported)).apply (((xsys).xstdout)) ((((xStringIO)).apply)))
                              bogusForceDataize.write (((((xself).xparser).xparse_args)).apply ((xcmdline_args)))
                            seq
                              xoutput.write (((((xsys).xstdout).xgetvalue)).apply)
                              (((unsupported)).apply (((xsys).xstdout)) ((xsave_stdout)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xisinstance)).apply ((xoutput)) ((xstr)))) (("expected output to be an ordinary string, not %r".mod (((xtype)).apply ((xoutput))))))
                            ((xoutput).neq (xexpected_output)).if
                              bogusForceDataize.write ((((xself).xfail)).apply ((((("expected: n'''n".add (xexpected_output)).add "'''nbut got n'''n").add (xoutput)).add "'''")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xexit_status)) ((xexpected_status)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xexit_message)) ((xexpected_error)))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply ("expected parser.exit()"))
                xassertTypeError.write
                  [xself xfunc xexpected_message]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xfunc)) ((xargs)) ("None: is there a None literal in the EO language?") ((xTypeError)) ((xexpected_message)))
                xassertHelp.write
                  [xself xparser xexpected_help]
                    memory > xactual_help
                    seq > @
                      seq
                        xactual_help.write ((((xparser).xformat_help)).apply)
                        ((xactual_help).neq (xexpected_help)).if
                          (((unsupported)).apply (((((xself).xfailureException)).apply ((((("help text failure; expected:n\"".add (xexpected_help)).add "\"; got:n\"").add (xactual_help)).add "\"n")))))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ((xSUPPRESS_USAGE)))))
                xassertOptionError.write
                  [xself xexpected_message xargs xkwargs]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xmake_option)) ((xargs)) ((xkwargs)) ((xOptionError)) ((xexpected_message)))
                xtest_opt_string_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTypeError)).apply ((xmake_option)) ("at least one option string must be supplied"))
                xtest_opt_string_too_short.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("invalid option string 'b': must be at least two characters long") ((((unsupported)).apply ("b"))))
                xtest_opt_string_short_invalid.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("invalid short option string '--': must be of the form -x, (x any non-dash char)") ((((unsupported)).apply ("--"))))
                xtest_opt_string_long_invalid.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("invalid long option string '---': must start with --, followed by non-dash") ((((unsupported)).apply ("---"))))
                xtest_attr_invalid.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: invalid keyword arguments: bar, foo") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("foo") ("None: is there a None literal in the EO language?") ("bar") ("None: is there a None literal in the EO language?"))))
                xtest_action_invalid.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: invalid action: 'foo'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("foo"))))
                xtest_type_invalid.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: invalid option type: 'foo'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("type") ("foo"))))
                        bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: invalid option type: 'tuple'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("type") ((xtuple)))))
                xtest_no_type_for_action.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: must not supply a type for action 'count'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("count") ("type") ("int"))))
                xtest_no_choices_list.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b/--bad: must supply a list of choices for type 'choice'") ((((unsupported)).apply ("-b") ("--bad"))) ((((unsupported)).apply ("type") ("choice"))))
                xtest_bad_choices_list.write
                  [xself]
                    memory > xtypename
                    seq > @
                      seq
                        xtypename.write ((((xtype)).apply ("")).x__name__)
                        bogusForceDataize.write ((((xself).xassertOptionError)).apply (("option -b/--bad: choices must be a list of strings ('%s' supplied)".mod (xtypename))) ((((unsupported)).apply ("-b") ("--bad"))) ((((unsupported)).apply ("type") ("choice") ("choices") ("bad choices"))))
                xtest_no_choices_for_type.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: must not supply choices for type 'int'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("type") ("int") ("choices") ("bad"))))
                xtest_no_const_for_action.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: 'const' must not be supplied for action 'store'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("store") ("const") (1))))
                xtest_no_nargs_for_action.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: 'nargs' must not be supplied for action 'count'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("count") ("nargs") (2))))
                xtest_callback_not_callable.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: callback not callable: 'foo'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("callback") ("callback") ("foo"))))
                xdummy.write
                  [xself]
                    seq > @
                xtest_callback_args_no_tuple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: callback_args, if supplied, must be a tuple: not 'foo'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("callback") ("callback") (((xself).xdummy)) ("callback_args") ("foo"))))
                xtest_callback_kwargs_no_dict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: callback_kwargs, if supplied, must be a dict: not 'foo'") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("callback") ("callback") (((xself).xdummy)) ("callback_kwargs") ("foo"))))
                xtest_no_callback_for_action.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: callback supplied ('foo') for non-callback option") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("store") ("callback") ("foo"))))
                xtest_no_callback_args_for_action.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: callback_args supplied for non-callback option") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("store") ("callback_args") ("foo"))))
                xtest_no_callback_kwargs_for_action.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -b: callback_kwargs supplied for non-callback option") ((((unsupported)).apply ("-b"))) ((((unsupported)).apply ("action") ("store") ("callback_kwargs") ("foo"))))
                xtest_no_single_dash.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertOptionError)).apply ("invalid long option string '-debug': must start with --, followed by non-dash") ((((unsupported)).apply ("-debug"))))
                        bogusForceDataize.write ((((xself).xassertOptionError)).apply ("option -d: invalid long option string '-debug': must start with --, followed by non-dash") ((((unsupported)).apply ("-d") ("-debug"))))
                        bogusForceDataize.write ((((xself).xassertOptionError)).apply ("invalid long option string '-debug': must start with --, followed by non-dash") ((((unsupported)).apply ("-debug") ("--debug"))))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((xOptionParser)).apply)))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-v") ("--verbose") ("-n") ("--noisy") ("store_true") ("verbose"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-q") ("--quiet") ("--silent") ("store_false") ("verbose"))
                xtest_add_option_no_Option.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTypeError)).apply ((((xself).xparser).xadd_option)) ("not an Option instance: None") ("None: is there a None literal in the EO language?"))
                xtest_add_option_invalid_arguments.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTypeError)).apply ((((xself).xparser).xadd_option)) ("invalid arguments") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_get_option.write
                  [xself]
                    memory > xopt1
                    seq > @
                      seq
                        xopt1.write (((((xself).xparser).xget_option)).apply ("-v"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xopt1)) ((xOption)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xopt1).x_short_opts)) ((((unsupported)).apply ("-v") ("-n"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xopt1).x_long_opts)) ((((unsupported)).apply ("--verbose") ("--noisy"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xopt1).xaction)) ("store_true"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xopt1).xdest)) ("verbose"))
                xtest_get_option_equals.write
                  [xself]
                    memory > xopt3
                    memory > xopt2
                    memory > xopt1
                    memory > xopt4
                    seq > @
                      seq
                        xopt1.write (((((xself).xparser).xget_option)).apply ("-v"))
                        xopt2.write (((((xself).xparser).xget_option)).apply ("--verbose"))
                        xopt3.write (((((xself).xparser).xget_option)).apply ("-n"))
                        xopt4.write (((((xself).xparser).xget_option)).apply ("--noisy"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xopt1)) ((xopt2)) ((xopt3)) ((xopt4)))))
                xtest_has_option.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xparser).xhas_option)).apply ("-v"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xparser).xhas_option)).apply ("--verbose"))))
                xassertTrueremoved.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((((xself).xparser).xget_option)).apply ("-v"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((((xself).xparser).xget_option)).apply ("--verbose"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((((xself).xparser).xget_option)).apply ("-n"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((((xself).xparser).xget_option)).apply ("--noisy"))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xhas_option)).apply ("-v"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xhas_option)).apply ("--verbose"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xhas_option)).apply ("-n"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xparser).xhas_option)).apply ("--noisy"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xparser).xhas_option)).apply ("-q"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xparser).xhas_option)).apply ("--silent"))))
                xtest_remove_short_opt.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xparser).xremove_option)).apply ("-n"))
                        bogusForceDataize.write ((((xself).xassertTrueremoved)).apply)
                xtest_remove_long_opt.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xparser).xremove_option)).apply ("--verbose"))
                        bogusForceDataize.write ((((xself).xassertTrueremoved)).apply)
                xtest_remove_nonexistent.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xself).xparser).xremove_option)) ((((unsupported)).apply ("foo"))) ("None: is there a None literal in the EO language?") ((xValueError)) ("no such option 'foo'"))
                xtest_refleak.write
                  [xself]
                    memory > xrefcount
                    memory > xbig_thing
                    memory > xparser
                    seq > @
                      (((unsupported)).apply)
                        xbig_thing.write (((unsupported)).apply (42))
                        xrefcount.write ((((xsys).xgetrefcount)).apply ((xbig_thing)))
                        xparser.write (((xOptionParser)).apply)
                        bogusForceDataize.write ((((xparser).xadd_option)).apply ("-a") ("--aaarggh"))
                        (((unsupported)).apply (((xparser).xbig_thing)) ((xbig_thing)))
                        bogusForceDataize.write ((((xparser).xdestroy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xparser)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrefcount)) (((((xsys).xgetrefcount)).apply ((xbig_thing)))))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                xtest_basics.write
                  [xself]
                    memory > xdict
                    memory > xvalues
                    seq > @
                      seq
                        xvalues.write (((xValues)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((xvalues)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xvalues)) ((((unsupported)).apply ("foo") ("bar"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xvalues)) (""))
                        xdict.write (((unsupported)).apply ("foo") ("bar") ("baz") (42))
                        xvalues.write (((unsupported)).apply ((xValues)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((xvalues)))) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalues)) ((xdict)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xvalues)) ((((unsupported)).apply ("foo") ("bar"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xvalues)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xvalues)) (""))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xvalues)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xparser)) ((((xOptionParser)).apply)))
                xtest_str_aliases_string.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-s") ("str"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xself).xparser).xget_option)).apply ("-s")).xtype)) ("string"))
                xtest_type_object.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-s") ((xstr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xself).xparser).xget_option)).apply ("-s")).xtype)) ("string"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-x") ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xself).xparser).xget_option)).apply ("-x")).xtype)) ("int"))
            x_time_units.write (((unsupported)).apply ("s") (1) ("m") (60) ("h") ((60.mul 60)) ("d") (((60.mul 60).mul 24)))
            x_check_duration.write
              [xoption xopt xvalue]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xIndexError)))))
                    ((((((unsupported)).apply ((xvalue)) ((1.neg))).xisdigit)).apply).if
                      (((unsupported)).apply ((((xint)).apply ((xvalue)))))
                      (((unsupported)).apply (((((xint)).apply ((((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((1.neg))))))).mul (((unsupported)).apply ((x_time_units)) ((((unsupported)).apply ((xvalue)) ((1.neg))))))))
                    (((unsupported)).apply ((((xOptionValueError)).apply (("option %s: invalid duration: %r".mod (((unsupported)).apply ((xopt)) ((xvalue))))))))
            (((unsupported)).apply ((xOption)))
              seq
                xTYPES.write (((xOption).xTYPES).add (((unsupported)).apply ("duration")))
                xTYPE_CHECKER.write ((((xcopy).xcopy)).apply (((xOption).xTYPE_CHECKER)))
                (((unsupported)).apply ((((unsupported)).apply ((xTYPE_CHECKER)) ("duration"))) ((x_check_duration)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((xOptionParser)).apply)))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-v") ("--verbose") (TRUE))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-q") ("--quiet") ("verbose"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-n") ("int") (37))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-m") ("int"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-s") ("foo"))
                        bogusForceDataize.write (((((xself).xparser).xadd_option)).apply ("-t"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-u") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xexpected)) ((((unsupported)).apply ("verbose") (TRUE) ("n") (37) ("m") ("None: is there a None literal in the EO language?") ("s") ("foo") ("t") ("None: is there a None literal in the EO language?") ("u") ("None: is there a None literal in the EO language?"))))
                xtest_basic_defaults.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xparser).xget_default_values)).apply)) (((xself).xexpected)))
                xtest_mixed_defaults_post.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xset_defaults)) (42) ((100.neg)))
                        bogusForceDataize.write (((((xself).xexpected).xupdate)).apply ((((unsupported)).apply ("n") (42) ("m") ((100.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xparser).xget_default_values)).apply)) (((xself).xexpected)))
                xtest_mixed_defaults_pre.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xset_defaults)) ("barf") ("blah"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-x") ("frob"))
                        bogusForceDataize.write (((((xself).xparser).xadd_option)).apply ("-y"))
                        bogusForceDataize.write (((((xself).xexpected).xupdate)).apply ((((unsupported)).apply ("x") ("frob") ("y") ("blah"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xparser).xget_default_values)).apply)) (((xself).xexpected)))
                        bogusForceDataize.write (((((xself).xparser).xremove_option)).apply ("-y"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-y") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xexpected).xupdate)).apply ((((unsupported)).apply ("y") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xparser).xget_default_values)).apply)) (((xself).xexpected)))
                xtest_process_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xoption_class)) ((xDurationOption)))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-d") ("duration") (300))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-e") ("duration") ("6m"))
                        (((unsupported)).apply ((((xself).xparser).xset_defaults)) ("42"))
                        bogusForceDataize.write (((((xself).xexpected).xupdate)).apply ((((unsupported)).apply ("d") (300) ("e") (360) ("n") (42))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xparser).xget_default_values)).apply)) (((xself).xexpected)))
                        bogusForceDataize.write (((((xself).xparser).xset_process_default_values)).apply (FALSE))
                        bogusForceDataize.write (((((xself).xexpected).xupdate)).apply ((((unsupported)).apply ("d") (300) ("e") ("6m") ("n") ("42"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xparser).xget_default_values)).apply)) (((xself).xexpected)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                (((unsupported)).apply)
                xassertUsage.write
                  [xself xparser xexpected_usage]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xget_usage)).apply)) ((xexpected_usage)))
                xassertVersion.write
                  [xself xparser xexpected_version]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xparser).xget_version)).apply)) ((xexpected_version)))
                xtest_default_progname.write
                  [xself]
                    memory > xparser
                    memory > xsave_argv
                    memory > xexpected_usage
                    seq > @
                      seq
                        xsave_argv.write (((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xsys).xargv)) (0))) ((((((xos).xpath).xjoin)).apply ("foo") ("bar") ("baz.py"))))
                            xparser.write (((unsupported)).apply ((xOptionParser)) ("%prog ...") ("%prog 1.2"))
                            xexpected_usage.write "Usage: baz.py ...n"
                            bogusForceDataize.write ((((xself).xassertUsage)).apply ((xparser)) ((xexpected_usage)))
                            bogusForceDataize.write ((((xself).xassertVersion)).apply ((xparser)) ("baz.py 1.2"))
                            bogusForceDataize.write ((((xself).xassertHelp)).apply ((xparser)) ((((xexpected_usage).add "n").add "Options:n  --version   show program's version number and exitn  -h, --help  show this help message and exitn")))
                          (((unsupported)).apply ((((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply)))) ((xsave_argv)))
                xtest_custom_progname.write
                  [xself]
                    memory > xexpected_usage
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)).apply ((xOptionParser)) ("thingy") ("%prog 0.1") ("%prog arg arg"))
                        bogusForceDataize.write ((((xparser).xremove_option)).apply ("-h"))
                        bogusForceDataize.write ((((xparser).xremove_option)).apply ("--version"))
                        xexpected_usage.write "Usage: thingy arg argn"
                        bogusForceDataize.write ((((xself).xassertUsage)).apply ((xparser)) ((xexpected_usage)))
                        bogusForceDataize.write ((((xself).xassertVersion)).apply ((xparser)) ("thingy 0.1"))
                        bogusForceDataize.write ((((xself).xassertHelp)).apply ((xparser)) (((xexpected_usage).add "n")))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ("test"))))
                        (((unsupported)).apply (((xself).xhelp_prefix)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xfile_help)) ("read from FILE [default: %default]"))
                        (((unsupported)).apply (((xself).xexpected_help_file)) ((((xself).xhelp_prefix).add "  -f FILE, --file=FILE  read from FILE [default: foo.txt]n")))
                        (((unsupported)).apply (((xself).xexpected_help_none)) ((((xself).xhelp_prefix).add "  -f FILE, --file=FILE  read from FILE [default: none]n")))
                xtest_option_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--file") ("foo.txt") (((xself).xfile_help)))
                        bogusForceDataize.write ((((xself).xassertHelp)).apply (((xself).xparser)) (((xself).xexpected_help_file)))
                xtest_parser_default_1.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--file") (((xself).xfile_help)))
                        bogusForceDataize.write (((((xself).xparser).xset_default)).apply ("file") ("foo.txt"))
                        bogusForceDataize.write ((((xself).xassertHelp)).apply (((xself).xparser)) (((xself).xexpected_help_file)))
                xtest_parser_default_2.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--file") (((xself).xfile_help)))
                        (((unsupported)).apply ((((xself).xparser).xset_defaults)) ("foo.txt"))
                        bogusForceDataize.write ((((xself).xassertHelp)).apply (((xself).xparser)) (((xself).xexpected_help_file)))
                xtest_no_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--file") (((xself).xfile_help)))
                        bogusForceDataize.write ((((xself).xassertHelp)).apply (((xself).xparser)) (((xself).xexpected_help_none)))
                xtest_default_none_1.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--file") ("None: is there a None literal in the EO language?") (((xself).xfile_help)))
                        bogusForceDataize.write ((((xself).xassertHelp)).apply (((xself).xparser)) (((xself).xexpected_help_none)))
                xtest_default_none_2.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--file") (((xself).xfile_help)))
                        (((unsupported)).apply ((((xself).xparser).xset_defaults)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertHelp)).apply (((xself).xparser)) (((xself).xexpected_help_none)))
                xtest_float_default.write
                  [xself]
                    memory > xexpected_help
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-p") ("--prob") ("blow up with probability PROB [default: %default]"))
                        (((unsupported)).apply ((((xself).xparser).xset_defaults)) (0.43))
                        xexpected_help.write (((xself).xhelp_prefix).add "  -p PROB, --prob=PROB  blow up with probability PROB [default: 0.43]n")
                        bogusForceDataize.write ((((xself).xassertHelp)).apply (((xself).xparser)) ((xexpected_help)))
                xtest_alt_expand.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--file") ("foo.txt") ("read from FILE [default: *DEFAULT*]"))
                        (((unsupported)).apply (((((xself).xparser).xformatter).xdefault_tag)) ("*DEFAULT*"))
                        bogusForceDataize.write ((((xself).xassertHelp)).apply (((xself).xparser)) (((xself).xexpected_help_file)))
                xtest_no_expand.write
                  [xself]
                    memory > xexpected_help
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--file") ("foo.txt") ("read from %default file"))
                        (((unsupported)).apply (((((xself).xparser).xformatter).xdefault_tag)) ("None: is there a None literal in the EO language?"))
                        xexpected_help.write (((xself).xhelp_prefix).add "  -f FILE, --file=FILE  read from %default filen")
                        bogusForceDataize.write ((((xself).xassertHelp)).apply (((xself).xparser)) ((xexpected_help)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ("-a") ("string"))) ((((unsupported)).apply ((xmake_option)) ("-b") ("--boo") ("int") ("boo"))) ((((unsupported)).apply ((xmake_option)) ("--foo") ("append"))))
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)) ((xoptions)))))
                xtest_required_value.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-a"))) ("-a option requires 1 argument"))
                xtest_invalid_integer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-b") ("5x"))) ("option -b: invalid integer value: '5x'"))
                xtest_no_such_option.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("--boo13"))) ("no such option: --boo13"))
                xtest_long_invalid_integer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("--boo=x5"))) ("option --boo: invalid integer value: 'x5'"))
                xtest_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("boo") ("None: is there a None literal in the EO language?") ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_shortopt_empty_longopt_append.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a") ("") ("--foo=blah") ("--foo="))) ((((unsupported)).apply ("a") ("") ("boo") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ("blah") (""))))) ((((unsupported)).apply)))
                xtest_long_option_append.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--foo") ("bar") ("--foo") ("") ("--foo=x"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("boo") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ("bar") ("") ("x"))))) ((((unsupported)).apply)))
                xtest_option_argument_joined.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-abc"))) ((((unsupported)).apply ("a") ("bc") ("boo") ("None: is there a None literal in the EO language?") ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_option_argument_split.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a") ("34"))) ((((unsupported)).apply ("a") ("34") ("boo") ("None: is there a None literal in the EO language?") ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_option_argument_joined_integer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-b34"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("boo") (34) ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_option_argument_split_negative_integer.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-b") ("-5"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("boo") ((5.neg)) ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_long_option_argument_joined.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--boo=13"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("boo") (13) ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_long_option_argument_split.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--boo") ("111"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("boo") (111) ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_long_option_short_option.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--foo=bar") ("-axyz"))) ((((unsupported)).apply ("a") ("xyz") ("boo") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ("bar"))))) ((((unsupported)).apply)))
                xtest_abbrev_long_option.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--f=bar") ("-axyz"))) ((((unsupported)).apply ("a") ("xyz") ("boo") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ("bar"))))) ((((unsupported)).apply)))
                xtest_defaults.write
                  [xself]
                    memory > xdefaults
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xargs)))) ((((((xself).xparser).xparse_args)).apply ((((unsupported)).apply)))))
                        xdefaults.write (((((xself).xparser).xget_default_values)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply ((xdefaults)))) ((((xvars)).apply ((xoptions)))))
                xtest_ambiguous_option.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("--foz") ("store") ("string") ("foo"))
                        bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("--f=bar"))) ("ambiguous option: --f (--foo, --foz?)"))
                xtest_short_and_long_option_split.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a") ("xyz") ("--foo") ("bar"))) ((((unsupported)).apply ("a") ("xyz") ("boo") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ("bar"))))) ((((unsupported)).apply)))
                xtest_short_option_split_long_option_append.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--foo=bar") ("-b") ("123") ("--foo") ("baz"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("boo") (123) ("foo") ((((unsupported)).apply ("bar") ("baz"))))) ((((unsupported)).apply)))
                xtest_short_option_split_one_positional_arg.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a") ("foo") ("bar"))) ((((unsupported)).apply ("a") ("foo") ("boo") ("None: is there a None literal in the EO language?") ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("bar"))))
                xtest_short_option_consumes_separator.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a") ("--") ("foo") ("bar"))) ((((unsupported)).apply ("a") ("--") ("boo") ("None: is there a None literal in the EO language?") ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("foo") ("bar"))))
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a") ("--") ("--foo") ("bar"))) ((((unsupported)).apply ("a") ("--") ("boo") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ("bar"))))) ((((unsupported)).apply)))
                xtest_short_option_joined_and_separator.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-ab") ("--") ("--foo") ("bar"))) ((((unsupported)).apply ("a") ("b") ("boo") ("None: is there a None literal in the EO language?") ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("--foo") ("bar"))))
                xtest_hyphen_becomes_positional_arg.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-ab") ("-") ("--foo") ("bar"))) ((((unsupported)).apply ("a") ("b") ("boo") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ("bar"))))) ((((unsupported)).apply ("-"))))
                xtest_no_append_versus_append.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-b3") ("-b") ("5") ("--foo=bar") ("--foo") ("baz"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("boo") (5) ("foo") ((((unsupported)).apply ("bar") ("baz"))))) ((((unsupported)).apply)))
                xtest_option_consumes_optionlike_string.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a") ("-b3"))) ((((unsupported)).apply ("a") ("-b3") ("boo") ("None: is there a None literal in the EO language?") ("foo") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_combined_single_invalid_option.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-t") ("store_true"))
                        bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-test"))) ("no such option: -e"))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ("-v") ("--verbose") ("store_true") ("verbose") (""))) ((((unsupported)).apply ((xmake_option)) ("-q") ("--quiet") ("store_false") ("verbose"))))
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ((xoptions)))))
                xtest_bool_default.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("verbose") (""))) ((((unsupported)).apply)))
                xtest_bool_false.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xargs)))) (((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-q"))) ((((unsupported)).apply ("verbose") (0))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xoptions).xverbose)) (FALSE))))
                xtest_bool_true.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xargs)))) (((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-v"))) ((((unsupported)).apply ("verbose") (1))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xoptions).xverbose)) (TRUE))))
                xtest_bool_flicker_on_and_off.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-qvq") ("-q") ("-v"))) ((((unsupported)).apply ("verbose") (1))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)))))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-c") ("store") ("choice") ("choice") ((((unsupported)).apply ("one") ("two") ("three"))))
                xtest_valid_choice.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-c") ("one") ("xyz"))) ((((unsupported)).apply ("choice") ("one"))) ((((unsupported)).apply ("xyz"))))
                xtest_invalid_choice.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-c") ("four") ("abc"))) ("option -c: invalid choice: 'four' (choose from 'one', 'two', 'three')"))
                xtest_add_choice_option.write
                  [xself]
                    memory > xopt
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-d") ("--default") ((((unsupported)).apply ("four") ("five") ("six"))))
                        xopt.write (((((xself).xparser).xget_option)).apply ("-d"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xopt).xtype)) ("choice"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xopt).xaction)) ("store"))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)))))
                        (((unsupported)).apply (((xself).xv_opt)) ((((unsupported)).apply ((xmake_option)) ("-v") ("count") ("verbose"))))
                        bogusForceDataize.write (((((xself).xparser).xadd_option)).apply (((xself).xv_opt)))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("--verbose") ("int") ("verbose"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-q") ("--quiet") ("store_const") ("verbose") (0))
                xtest_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("verbose") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
                xtest_count_one.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-v"))) ((((unsupported)).apply ("verbose") (1))) ((((unsupported)).apply)))
                xtest_count_three.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-vvv"))) ((((unsupported)).apply ("verbose") (3))) ((((unsupported)).apply)))
                xtest_count_three_apart.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-v") ("-v") ("-v"))) ((((unsupported)).apply ("verbose") (3))) ((((unsupported)).apply)))
                xtest_count_override_amount.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-vvv") ("--verbose=2"))) ((((unsupported)).apply ("verbose") (2))) ((((unsupported)).apply)))
                xtest_count_override_quiet.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-vvv") ("--verbose=2") ("-q"))) ((((unsupported)).apply ("verbose") (0))) ((((unsupported)).apply)))
                xtest_count_overriding.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-vvv") ("--verbose=2") ("-q") ("-v"))) ((((unsupported)).apply ("verbose") (1))) ((((unsupported)).apply)))
                xtest_count_interspersed_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--quiet") ("3") ("-v"))) ((((unsupported)).apply ("verbose") (1))) ((((unsupported)).apply ("3"))))
                xtest_count_no_interspersed_args.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xparser).xdisable_interspersed_args)).apply)
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--quiet") ("3") ("-v"))) ((((unsupported)).apply ("verbose") (0))) ((((unsupported)).apply ("3") ("-v"))))
                xtest_count_no_such_option.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-q3") ("-v"))) ("no such option: -3"))
                xtest_count_option_no_value.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("--quiet=3") ("-v"))) ("--quiet option does not take a value"))
                xtest_count_with_default.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xparser).xset_default)).apply ("verbose") (0))
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("verbose") (0))) ((((unsupported)).apply)))
                xtest_count_overriding_default.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xparser).xset_default)).apply ("verbose") (0))
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-vvv") ("--verbose=2") ("-q") ("-v"))) ((((unsupported)).apply ("verbose") (1))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)))))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-p") ("--point") ("store") (3) ("float") ("point"))
                xtest_nargs_with_positional_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("foo") ("-p") ("1") ("2.5") ("-4.3") ("xyz"))) ((((unsupported)).apply ("point") ((((unsupported)).apply (1.0) (2.5) ((4.3.neg)))))) ((((unsupported)).apply ("foo") ("xyz"))))
                xtest_nargs_long_opt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--point") ("-1") ("2.5") ("-0") ("xyz"))) ((((unsupported)).apply ("point") ((((unsupported)).apply ((1.0.neg)) (2.5) ((0.0.neg)))))) ((((unsupported)).apply ("xyz"))))
                xtest_nargs_invalid_float_value.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-p") ("1.0") ("2x") ("3.5"))) ("option -p: invalid floating-point value: '2x'"))
                xtest_nargs_required_values.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("--point") ("1.0") ("3.5"))) ("--point option requires 3 arguments"))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)))))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-p") ("--point") ("store") (3) ("float") ("point"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--foo") ("append") (2) ("int") ("foo"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-z") ("--zero") ("append_const") ("foo") ((((unsupported)).apply (0) (0))))
                xtest_nargs_append.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-f") ("4") ("-3") ("blah") ("--foo") ("1") ("666"))) ((((unsupported)).apply ("point") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ((((unsupported)).apply (4) ((3.neg)))) ((((unsupported)).apply (1) (666))))))) ((((unsupported)).apply ("blah"))))
                xtest_nargs_append_required_values.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-f4,3"))) ("-f option requires 2 arguments"))
                xtest_nargs_append_simple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--foo=3") ("4"))) ((((unsupported)).apply ("point") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ((((unsupported)).apply (3) (4))))))) ((((unsupported)).apply)))
                xtest_nargs_append_const.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--zero") ("--foo") ("3") ("4") ("-z"))) ((((unsupported)).apply ("point") ("None: is there a None literal in the EO language?") ("foo") ((((unsupported)).apply ((((unsupported)).apply (0) (0))) ((((unsupported)).apply (3) (4))) ((((unsupported)).apply (0) (0))))))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xtest_version.write
                  [xself]
                    memory > xsave_argv
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)) ("%prog 0.1"))))
                        xsave_argv.write (((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xsys).xargv)) (0))) ((((((xos).xpath).xjoin)).apply (((xos).xcurdir)) ("foo") ("bar"))))
                            bogusForceDataize.write ((((xself).xassertOutput)).apply ((((unsupported)).apply ("--version"))) ("bar 0.1n"))
                          (((unsupported)).apply ((((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply)))) ((xsave_argv)))
                xtest_no_version.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)))))
                        bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("--version"))) ("no such option: --version"))
            (((unsupported)).apply ((xBaseTest)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ((((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ("-v") ("store_true") ("verbose") (1))))))))
                xtest_conflict_default.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-q") ("store_false") ("verbose") (0))
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("verbose") (0))) ((((unsupported)).apply)))
                xtest_conflict_default_none.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-q") ("store_false") ("verbose") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("verbose") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ((xSUPPRESS_USAGE)))))
                xtest_option_group_create_instance.write
                  [xself]
                    memory > xgroup
                    seq > @
                      seq
                        xgroup.write (((xOptionGroup)).apply (((xself).xparser)) ("Spam"))
                        bogusForceDataize.write (((((xself).xparser).xadd_option_group)).apply ((xgroup)))
                        (((unsupported)).apply (((xgroup).xadd_option)) ("--spam") ("store_true") ("spam spam spam spam"))
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--spam"))) ((((unsupported)).apply ("spam") (1))) ((((unsupported)).apply)))
                xtest_add_group_no_group.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTypeError)).apply ((((xself).xparser).xadd_option_group)) ("not an OptionGroup instance: None") ("None: is there a None literal in the EO language?"))
                xtest_add_group_invalid_arguments.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTypeError)).apply ((((xself).xparser).xadd_option_group)) ("invalid arguments") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_add_group_wrong_parser.write
                  [xself]
                    memory > xgroup
                    seq > @
                      seq
                        xgroup.write (((xOptionGroup)).apply (((xself).xparser)) ("Spam"))
                        (((unsupported)).apply (((xgroup).xparser)) ((((xOptionParser)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xself).xparser).xadd_option_group)) ((((unsupported)).apply ((xgroup)))) ("None: is there a None literal in the EO language?") ((xValueError)) ("invalid OptionGroup (wrong parser)"))
                xtest_group_manipulate.write
                  [xself]
                    memory > xgroup
                    seq > @
                      seq
                        xgroup.write (((unsupported)).apply ((((xself).xparser).xadd_option_group)) ("Group 2") ("Some more options"))
                        bogusForceDataize.write ((((xgroup).xset_title)).apply ("Bacon"))
                        (((unsupported)).apply (((xgroup).xadd_option)) ("--bacon") ("int"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xparser).xget_option_group)).apply ("--bacon"))) ((xgroup)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)) (((xself).xMyOption)))))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-a") ("None: is there a None literal in the EO language?") ("string") ("a"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-f") ("--file") ("file") ("file"))
                xtearDown.write
                  [xself]
                    seq > @
                      (((((xos).xpath).xisdir)).apply (((xsupport).xTESTFN))).if
                        bogusForceDataize.write ((((xos).xrmdir)).apply (((xsupport).xTESTFN)))
                        (((((xos).xpath).xisfile)).apply (((xsupport).xTESTFN))).if
                          bogusForceDataize.write ((((xos).xunlink)).apply (((xsupport).xTESTFN)))
                (((unsupported)).apply ((xOption)))
                  seq
                    xcheck_file.write
                      [xoption xopt xvalue]
                        seq > @
                          seq
                            ((((((xos).xpath).xexists)).apply ((xvalue))).not).if
                              (((unsupported)).apply ((((xOptionValueError)).apply (("%s: file does not exist".mod (xvalue))))))
                              ((((((xos).xpath).xisfile)).apply ((xvalue))).not).if
                                (((unsupported)).apply ((((xOptionValueError)).apply (("%s: not a regular file".mod (xvalue))))))
                            (((unsupported)).apply ((xvalue)))
                    xTYPES.write (((xOption).xTYPES).add (((unsupported)).apply ("file")))
                    xTYPE_CHECKER.write ((((xcopy).xcopy)).apply (((xOption).xTYPE_CHECKER)))
                    (((unsupported)).apply ((((unsupported)).apply ((xTYPE_CHECKER)) ("file"))) ((xcheck_file)))
                xtest_filetype_ok.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xcreate_empty_file)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--file") (((xsupport).xTESTFN)) ("-afoo"))) ((((unsupported)).apply ("file") (((xsupport).xTESTFN)) ("a") ("foo"))) ((((unsupported)).apply)))
                xtest_filetype_noexist.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("--file") (((xsupport).xTESTFN)) ("-afoo"))) (("%s: file does not exist".mod ((xsupport).xTESTFN))))
                xtest_filetype_notfile.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("--file") (((xsupport).xTESTFN)) ("-afoo"))) (("%s: not a regular file".mod ((xsupport).xTESTFN))))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply (((xself).xMyOption)) ("-a") ("--apple") ("extend") ("string") ("apple"))))
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ((xoptions)))))
                (((unsupported)).apply ((xOption)))
                  seq
                    xACTIONS.write (((xOption).xACTIONS).add (((unsupported)).apply ("extend")))
                    xSTORE_ACTIONS.write (((xOption).xSTORE_ACTIONS).add (((unsupported)).apply ("extend")))
                    xTYPED_ACTIONS.write (((xOption).xTYPED_ACTIONS).add (((unsupported)).apply ("extend")))
                    xtake_action.write
                      [xself xaction xdest xopt xvalue xvalues xparser]
                        memory > xlvalue
                        seq > @
                          ((xaction).eq "extend").if
                            seq
                              xlvalue.write ((((xvalue).xsplit)).apply (","))
                              bogusForceDataize.write (((((((xvalues).xensure_value)).apply ((xdest)) ((((unsupported)).apply))).xextend)).apply ((xlvalue)))
                            bogusForceDataize.write ((((xOption).xtake_action)).apply ((xself)) ((xaction)) ((xdest)) ((xopt)) ((xparser)) ((xvalue)) ((xvalues)))
                xtest_extend_add_action.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-afoo,bar") ("--apple=blah"))) ((((unsupported)).apply ("apple") ((((unsupported)).apply ("foo") ("bar") ("blah"))))) ((((unsupported)).apply)))
                xtest_extend_add_action_normal.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a") ("foo") ("-abar") ("--apple=x,y"))) ((((unsupported)).apply ("apple") ((((unsupported)).apply ("foo") ("bar") ("x") ("y"))))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ("-x") ("None: is there a None literal in the EO language?") ("callback") (((xself).xprocess_opt)))) ((((unsupported)).apply ((xmake_option)) ("-f") ("--file") ("callback") (((xself).xprocess_opt)) ("string") ("filename"))))
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ((xoptions)))))
                xprocess_opt.write
                  [xself xoption xopt xvalue xparser_]
                    seq > @
                      ((xopt).eq "-x").if
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoption).x_short_opts)) ((((unsupported)).apply ("-x"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoption).x_long_opts)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xparser_)) (((xself).xparser)))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply (((xparser_).xvalues)))) ((((unsupported)).apply ("filename") ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply ((((xparser_).xvalues).xx)) (42))
                        ((xopt).eq "--file").if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoption).x_short_opts)) ((((unsupported)).apply ("-f"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoption).x_long_opts)) ((((unsupported)).apply ("--file"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xparser_)) (((xself).xparser)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xvars)).apply (((xparser_).xvalues)))) ((((unsupported)).apply ("filename") ("None: is there a None literal in the EO language?") ("x") (42))))
                            bogusForceDataize.write (((xsetattr)).apply (((xparser_).xvalues)) (((xoption).xdest)) ((xvalue)))
                          bogusForceDataize.write ((((xself).xfail)).apply (("Unknown option %r in process_opt.".mod (xopt))))
                xtest_callback.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-x") ("--file=foo"))) ((((unsupported)).apply ("filename") ("foo") ("x") (42))) ((((unsupported)).apply)))
                xtest_callback_help.write
                  [xself]
                    memory > xexpected_help
                    memory > xparser
                    seq > @
                      seq
                        xparser.write (((unsupported)).apply ((xOptionParser)) ((xSUPPRESS_USAGE)))
                        bogusForceDataize.write ((((xparser).xremove_option)).apply ("-h"))
                        (((unsupported)).apply (((xparser).xadd_option)) ("-t") ("--test") ("callback") ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) ("string") ("foo"))
                        xexpected_help.write "Options:n  -t TEST, --test=TEST  foon"
                        bogusForceDataize.write ((((xself).xassertHelp)).apply ((xparser)) ((xexpected_help)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ("-p") ("--point") ("callback") (((xself).xprocess_tuple)) ((((unsupported)).apply (3) ((xint)))) ("string") ("points") ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ((xoptions)))))
                xprocess_tuple.write
                  [xself xoption xopt xvalue xparser_ xlen xtype]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlen)) (3))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xtype)) ((xint)))))
                        ((xopt).eq "-p").if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ("1,2,3"))
                          ((xopt).eq "--point").if
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ("4,5,6"))
                        xvalue.write (((xtuple)).apply ((((xmap)).apply ((xtype)) (((((xvalue).xsplit)).apply (","))))))
                        bogusForceDataize.write ((((((xgetattr)).apply (((xparser_).xvalues)) (((xoption).xdest))).xappend)).apply ((xvalue)))
                xtest_callback_extra_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-p1,2,3") ("--point") ("4,5,6"))) ((((unsupported)).apply ("points") ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (4) (5) (6))))))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ((((xstr)).apply ((xx)))) ("callback") (((xself).xprocess_n)) ("things"))) ((xx)) ((((xrange)).apply ((1.neg)) ((6.neg)) ((1.neg)))))
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ((xoptions)))))
                xprocess_n.write
                  [xself xoption xopt xvalue xparser_]
                    memory > xnargs
                    memory > xrargs
                    memory > xdest
                    seq > @
                      seq
                        xnargs.write (((xint)).apply ((((unsupported)).apply ((xopt)) ((((unsupported)).apply (1))))))
                        xrargs.write ((xparser_).xrargs)
                        ((((xlen)).apply ((xrargs))).less (xnargs)).if
                          bogusForceDataize.write ((((xself).xfail)).apply (("Expected %d arguments for %s option.".mod (((unsupported)).apply ((xnargs)) ((xopt))))))
                        xdest.write (((((xparser_).xvalues).xensure_value)).apply (((xoption).xdest)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xdest).xappend)).apply ((((xtuple)).apply ((((unsupported)).apply ((xrargs)) ((((unsupported)).apply (0) ((xnargs)))))))))
                        bogusForceDataize.write (((((xparser_).xlargs).xappend)).apply ((xnargs)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrargs)) ((((unsupported)).apply (0) ((xnargs)))))))))))
                xtest_callback_meddle_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-1") ("foo") ("-3") ("bar") ("baz") ("qux"))) ((((unsupported)).apply ("things") ((((unsupported)).apply ((((unsupported)).apply ("foo"))) ((((unsupported)).apply ("bar") ("baz") ("qux"))))))) ((((unsupported)).apply (1) (3))))
                xtest_callback_meddle_args_separator.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-2") ("foo") ("--"))) ((((unsupported)).apply ("things") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("--"))))))) ((((unsupported)).apply (2))))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ("-a") ("--apple") ("callback") (2) (((xself).xprocess_many)) ("string"))) ((((unsupported)).apply ((xmake_option)) ("-b") ("--bob") ("callback") (3) (((xself).xprocess_many)) ("int"))))
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xOptionParser)) ((xoptions)))))
                xprocess_many.write
                  [xself xoption xopt xvalue xparser_]
                    seq > @
                      ((xopt).eq "-a").if
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply ("foo") ("bar"))))
                        ((xopt).eq "--apple").if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply ("ding") ("dong"))))
                          ((xopt).eq "-b").if
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply (1) (2) (3))))
                            ((xopt).eq "--bob").if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply ((666.neg)) (42) (0))))
                xtest_many_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a") ("foo") ("bar") ("--apple") ("ding") ("dong") ("-b") ("1") ("2") ("3") ("--bob") ("-666") ("42") ("0"))) ((((unsupported)).apply ("apple") ("None: is there a None literal in the EO language?") ("bob") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((xOptionParser)).apply)))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("--foo-bar") ("callback") (((xself).xcheck_abbrev)))
                xcheck_abbrev.write
                  [xself xoption xopt xvalue xparser]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xopt)) ("--foo-bar"))
                xtest_abbrev_callback_expansion.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--foo"))) ((((unsupported)).apply)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ("-a") ("int") (2) ("a"))) ((((unsupported)).apply ((xmake_option)) ("-b") ("store_true") ("b"))) ((((unsupported)).apply ((xmake_option)) ("-c") ("--callback") ("callback") (((xself).xvariable_args)) ("c"))))
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)) ((xoptions)))))
                xvariable_args.write
                  [xself xoption xopt xvalue xparser]
                    memory > xrargs
                    memory > xarg
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?"))))
                        xvalue.write (((unsupported)).apply)
                        xrargs.write ((xparser).xrargs)
                        while.
                          (xrargs)
                          [unused]
                            seq > @
                              seq
                                xarg.write (((unsupported)).apply ((xrargs)) (0))
                                ((((((unsupported)).apply ((xarg)) ((((unsupported)).apply (2)))).eq "--").and ((((xlen)).apply ((xarg))).greater 2)).or ((((((unsupported)).apply ((xarg)) ((((unsupported)).apply (1)))).eq "-").and ((((xlen)).apply ((xarg))).greater 1)).and ((((unsupported)).apply ((xarg)) (1)).neq "-"))).if
                                  (((unsupported)).apply)
                                  seq
                                    bogusForceDataize.write ((((xvalue).xappend)).apply ((xarg)))
                                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrargs)) (0))))))))
                        bogusForceDataize.write (((xsetattr)).apply (((xparser).xvalues)) (((xoption).xdest)) ((xvalue)))
                xtest_variable_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-a3") ("-5") ("--callback") ("foo") ("bar"))) ((((unsupported)).apply ("a") ((((unsupported)).apply (3) ((5.neg)))) ("b") ("None: is there a None literal in the EO language?") ("c") ((((unsupported)).apply ("foo") ("bar"))))) ((((unsupported)).apply)))
                xtest_consume_separator_stop_at_option.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-c") ("37") ("--") ("xxx") ("-b") ("hello"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("b") (TRUE) ("c") ((((unsupported)).apply ("37") ("--") ("xxx"))))) ((((unsupported)).apply ("hello"))))
                xtest_positional_arg_and_variable_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("hello") ("-c") ("foo") ("-") ("bar"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("b") ("None: is there a None literal in the EO language?") ("c") ((((unsupported)).apply ("foo") ("-") ("bar"))))) ((((unsupported)).apply ("hello"))))
                xtest_stop_at_option.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-c") ("foo") ("-b"))) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?") ("b") (TRUE) ("c") ((((unsupported)).apply ("foo"))))) ((((unsupported)).apply)))
                xtest_stop_at_invalid_option.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-c") ("3") ("-5") ("-a"))) ("no such option: -5"))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ("-v") ("--verbose") ("count") ("verbose") ("increment verbosity"))))
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)) ((xoptions)))))
                xshow_version.write
                  [xself xoption xopt xvalue xparser]
                    seq > @
                      (((unsupported)).apply ((((xparser).xvalues).xshow_version)) (1))
            (((unsupported)).apply ((xConflictBase)))
              seq
                unsupported
                xassertTrueconflict_error.write
                  [xself xfunc]
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xself).xassertRaises)).apply ((xfunc)) ((((unsupported)).apply ("-v") ("--version"))) ((((unsupported)).apply ("action") ("callback") ("callback") (((xself).xshow_version)) ("help") ("show version"))) ((xOptionConflictError)) ("option -v/--version: conflicting option string(s): -v"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xmsg)) ("conflicting option string(s): -v"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xerr).xoption_id)) ("-v/--version"))
                xtest_conflict_error.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrueconflict_error)).apply ((((xself).xparser).xadd_option)))
                xtest_conflict_error_group.write
                  [xself]
                    memory > xgroup
                    seq > @
                      seq
                        xgroup.write (((xOptionGroup)).apply (((xself).xparser)) ("Group 1"))
                        bogusForceDataize.write ((((xself).xassertTrueconflict_error)).apply (((xgroup).xadd_option)))
                xtest_no_such_conflict_handler.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((((xself).xparser).xset_conflict_handler)) ((((unsupported)).apply ("foo"))) ("None: is there a None literal in the EO language?") ((xValueError)) ("invalid conflict_resolution value 'foo'"))
            (((unsupported)).apply ((xConflictBase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xConflictBase).xsetUp)).apply ((xself)))
                        bogusForceDataize.write (((((xself).xparser).xset_conflict_handler)).apply ("resolve"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-v") ("--version") ("callback") (((xself).xshow_version)) ("show version"))
                xtest_conflict_resolve.write
                  [xself]
                    memory > xversion_opt
                    memory > xverbose_opt
                    memory > xv_opt
                    seq > @
                      seq
                        xv_opt.write (((((xself).xparser).xget_option)).apply ("-v"))
                        xverbose_opt.write (((((xself).xparser).xget_option)).apply ("--verbose"))
                        xversion_opt.write (((((xself).xparser).xget_option)).apply ("--version"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xv_opt)) ((xversion_opt)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xv_opt)) ((xverbose_opt)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xv_opt).x_long_opts)) ((((unsupported)).apply ("--version"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xversion_opt).x_short_opts)) ((((unsupported)).apply ("-v"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xversion_opt).x_long_opts)) ((((unsupported)).apply ("--version"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xverbose_opt).x_short_opts)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xverbose_opt).x_long_opts)) ((((unsupported)).apply ("--verbose"))))
                xtest_conflict_resolve_help.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOutput)).apply ((((unsupported)).apply ("-h"))) ((((unsupported)).apply)))
                xtest_conflict_resolve_short_opt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-v"))) ((((unsupported)).apply ("verbose") ("None: is there a None literal in the EO language?") ("show_version") (1))) ((((unsupported)).apply)))
                xtest_conflict_resolve_long_opt.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--verbose"))) ((((unsupported)).apply ("verbose") (1))) ((((unsupported)).apply)))
                xtest_conflict_resolve_long_opts.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("--verbose") ("--version"))) ((((unsupported)).apply ("verbose") (1) ("show_version") (1))) ((((unsupported)).apply)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)))))
                        bogusForceDataize.write (((((xself).xparser).xset_conflict_handler)).apply ("resolve"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-n") ("--dry-run") ("store_true") ("dry_run") ("don't do anything"))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("--dry-run") ("-n") ("store_const") (42) ("dry_run") ("dry run mode"))
                xtest_conflict_override_opts.write
                  [xself]
                    memory > xopt
                    seq > @
                      seq
                        xopt.write (((((xself).xparser).xget_option)).apply ("--dry-run"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xopt).x_short_opts)) ((((unsupported)).apply ("-n"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xopt).x_long_opts)) ((((unsupported)).apply ("--dry-run"))))
                xtest_conflict_override_help.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertOutput)).apply ((((unsupported)).apply ("-h"))) ((((unsupported)).apply)))
                xtest_conflict_override_args.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-n"))) ((((unsupported)).apply ("dry_run") (42))) ((((unsupported)).apply)))
            x_expected_help_basic.write (((unsupported)).apply)
            x_expected_help_long_opts_first.write (((unsupported)).apply)
            x_expected_help_title_formatter.write (((unsupported)).apply)
            x_expected_help_short_lines.write (((unsupported)).apply)
            x_expected_very_help_short_lines.write (((unsupported)).apply)
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xparser)) (((((xself).xmake_parser)).apply (80))))
                xmake_parser.write
                  [xself xcolumns]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((unsupported)).apply ((((unsupported)).apply ((xmake_option)) ("-a") ("string") ("a") ("APPLE") ("throw APPLEs at basket"))) ((((unsupported)).apply ((xmake_option)) ("-b") ("--boo") ("int") ("boo") ("NUM") ("shout \"boo!\" NUM times (in order to frighten away all the evil spirits that cause trouble and mayhem)"))) ((((unsupported)).apply ((xmake_option)) ("--foo") ("append") ("string") ("foo") ("store FOO in the foo list for later fooing"))))
                        (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("COLUMNS"))) ((((xstr)).apply ((xcolumns)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xInterceptingOptionParser)) ((xoptions)))))
                xassertHelpEquals.write
                  [xself xexpected_output]
                    memory > xsave_argv
                    seq > @
                      seq
                        xsave_argv.write (((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xsys).xargv)) (0))) ((((((xos).xpath).xjoin)).apply ("foo") ("bar.py"))))
                            bogusForceDataize.write ((((xself).xassertOutput)).apply ((((unsupported)).apply ("-h"))) ((xexpected_output)))
                          (((unsupported)).apply ((((unsupported)).apply (((xsys).xargv)) ((((unsupported)).apply)))) ((xsave_argv)))
                xtest_help.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertHelpEquals)).apply ((x_expected_help_basic)))
                xtest_help_old_usage.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xparser).xset_usage)).apply ("Usage: %prog [options]"))
                        bogusForceDataize.write ((((xself).xassertHelpEquals)).apply ((x_expected_help_basic)))
                xtest_help_long_opts_first.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xparser).xformatter).xshort_first)) (0))
                        bogusForceDataize.write ((((xself).xassertHelpEquals)).apply ((x_expected_help_long_opts_first)))
                xtest_help_title_formatter.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("COLUMNS"))) ("80"))
                          (((unsupported)).apply ((((xself).xparser).xformatter)) ((((xTitledHelpFormatter)).apply)))
                          bogusForceDataize.write ((((xself).xassertHelpEquals)).apply ((x_expected_help_title_formatter)))
                xtest_wrap_columns.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) (((((xself).xmake_parser)).apply (60))))
                        bogusForceDataize.write ((((xself).xassertHelpEquals)).apply ((x_expected_help_short_lines)))
                        (((unsupported)).apply (((xself).xparser)) (((((xself).xmake_parser)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertHelpEquals)).apply ((x_expected_very_help_short_lines)))
                xtest_help_unicode.write
                  [xself]
                    memory > xexpect
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)))))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-a") ("store_true") ("olu00E9!"))
                        xexpect.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertHelpEquals)).apply ((xexpect)))
                xtest_help_unicode_description.write
                  [xself]
                    memory > xexpect
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((unsupported)).apply ((xInterceptingOptionParser)) ((xSUPPRESS_USAGE)) ("olu00E9!"))))
                        xexpect.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertHelpEquals)).apply ((xexpect)))
                xtest_help_description_groups.write
                  [xself]
                    memory > xexpect
                    memory > xgroup
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xparser).xset_description)).apply ("This is the program description for %prog.  %prog has an option group as well as single options."))
                        xgroup.write (((xOptionGroup)).apply (((xself).xparser)) ("Dangerous Options") ("Caution: use of these options is at your own risk.  It is believed that some of them bite."))
                        (((unsupported)).apply (((xgroup).xadd_option)) ("-g") ("store_true") ("Group option."))
                        bogusForceDataize.write (((((xself).xparser).xadd_option_group)).apply ((xgroup)))
                        xexpect.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertHelpEquals)).apply ((xexpect)))
                        (((unsupported)).apply ((((xself).xparser).xepilog)) ("Please report bugs to /dev/null."))
                        bogusForceDataize.write ((((xself).xassertHelpEquals)).apply (((xexpect).add "nPlease report bugs to /dev/null.n")))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xtest_match_abbrev.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_match_abbrev)).apply ("--f") ((((unsupported)).apply ("--foz") ("None: is there a None literal in the EO language?") ("--foo") ("None: is there a None literal in the EO language?") ("--fie") ("None: is there a None literal in the EO language?") ("--f") ("None: is there a None literal in the EO language?"))))) ("--f"))
                xtest_match_abbrev_error.write
                  [xself]
                    memory > xs
                    memory > xwordmap
                    seq > @
                      seq
                        xs.write "--f"
                        xwordmap.write (((unsupported)).apply ("--foz") ("None: is there a None literal in the EO language?") ("--foo") ("None: is there a None literal in the EO language?") ("--fie") ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((x_match_abbrev)) ((((unsupported)).apply ((xs)) ((xwordmap)))) ("None: is there a None literal in the EO language?") ((xBadOptionError)) ("ambiguous option: --f (--fie, --foo, --foz?)"))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xparser)) ((((xInterceptingOptionParser)).apply)))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-n") ((xint)))
                        (((unsupported)).apply ((((xself).xparser).xadd_option)) ("-l") ((xint)))
                xtest_parse_num_fail.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((x_parse_num)) ((((unsupported)).apply ("") ((xint)))) ((((unsupported)).apply)) ((xValueError)) (((((xre).xcompile)).apply ("invalid literal for int().*: '?'?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((x_parse_num)) ((((unsupported)).apply ("0xOoops") ((xint)))) ((((unsupported)).apply)) ((xValueError)) (((((xre).xcompile)).apply ("invalid literal for int().*: s?'?0xOoops'?"))))
                xtest_parse_num_ok.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_parse_num)).apply ("0") ((xint)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_parse_num)).apply ("0x10") ((xint)))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_parse_num)).apply ("0XA") ((xint)))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_parse_num)).apply ("010") ((xint)))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_parse_num)).apply ("0b11") ((xint)))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((x_parse_num)).apply ("0b") ((xint)))) (0))
                xtest_numeric_options.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-n") ("42") ("-l") ("0x20"))) ((((unsupported)).apply ("n") (42) ("l") (32))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertParseOK)).apply ((((unsupported)).apply ("-n") ("0b0101") ("-l010"))) ((((unsupported)).apply ("n") (5) ("l") (8))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-n008"))) ("option -n: invalid integer value: '008'"))
                        bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-l0b0123"))) ("option -l: invalid integer value: '0b0123'"))
                        bogusForceDataize.write ((((xself).xassertParseFail)).apply ((((unsupported)).apply ("-l") ("0x12x"))) ("option -l: invalid integer value: '0x12x'"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest__all__.write
                [xself]
                  memory > xblacklist
                  seq > @
                    seq
                      xblacklist.write (((unsupported)).apply ("check_builtin") ("AmbiguousOptionError") ("NO_DEFAULT"))
                      (((unsupported)).apply (((xsupport).xcheck__all__)) ((xself)) ((xoptparse)) ((xblacklist)))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((x__name__)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)