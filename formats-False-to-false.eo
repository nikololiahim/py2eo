memory > xfalse
memory > xdecimal
memory > ximport_module
memory > xnumberformat
memory > xcheck_for_language
memory > xdecimals
memory > xloc
memory > xmodule
memory > xfloat
memory > xlocation
memory > xget_language
memory > xImportError
memory > xAttributeError
memory > xdatetime
memory > xlist
memory > xfrozenset
memory > xto_locale
memory > xstr
memory > xKeyError
memory > xreplacement
memory > xpath
memory > xreversed
memory > xunicodedata
memory > xsettings
memory > xint
memory > xre
memory > xbool
memory > xm
memory > xtuple
memory > xgetattr
memory > xlazy
memory > xdateformat
memory > xiso_input
memory > xisinstance
memory > xlen
[] > formats
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xlocalize_input
        memory > x_format_modules_cache
        memory > xFORMAT_SETTINGS
        memory > xiter_format_modules
        memory > xlocalize
        memory > xsanitize_separators
        memory > x_format_cache
        memory > xdate_format
        memory > xsanitize_strftime_format
        memory > xget_format
        memory > xget_format_modules
        memory > xreset_format_cache
        memory > xnumber_format
        memory > xget_format_lazy
        memory > xtime_format
        memory > xISO_INPUT_FORMATS
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            x_format_cache.write (((unsupported)).apply)
            x_format_modules_cache.write (((unsupported)).apply)
            xISO_INPUT_FORMATS.write (((unsupported)).apply ("DATE_INPUT_FORMATS") ((((unsupported)).apply ("%Y-%m-%d"))) ("TIME_INPUT_FORMATS") ((((unsupported)).apply ("%H:%M:%S") ("%H:%M:%S.%f") ("%H:%M"))) ("DATETIME_INPUT_FORMATS") ((((unsupported)).apply ("%Y-%m-%d %H:%M:%S") ("%Y-%m-%d %H:%M:%S.%f") ("%Y-%m-%d %H:%M") ("%Y-%m-%d"))))
            xFORMAT_SETTINGS.write (((xfrozenset)).apply ((((unsupported)).apply ("DECIMAL_SEPARATOR") ("THOUSAND_SEPARATOR") ("NUMBER_GROUPING") ("FIRST_DAY_OF_WEEK") ("MONTH_DAY_FORMAT") ("TIME_FORMAT") ("DATE_FORMAT") ("DATETIME_FORMAT") ("SHORT_DATE_FORMAT") ("SHORT_DATETIME_FORMAT") ("YEAR_MONTH_FORMAT") ("DATE_INPUT_FORMATS") ("TIME_INPUT_FORMATS") ("DATETIME_INPUT_FORMATS"))))
            xreset_format_cache.write
              []
                memory > x_format_cache
                memory > x_format_modules_cache
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    x_format_cache.write (((unsupported)).apply)
                    x_format_modules_cache.write (((unsupported)).apply)
            xiter_format_modules.write
              [xlang xformat_module_path]
                memory > xlocales
                memory > xlocale
                memory > xformat_locations
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    ((((xcheck_for_language)).apply ((xlang))).not).if
                      (((unsupported)).apply)
                    (((unsupported)).apply ((xformat_module_path)) ("None: is there a None literal in the EO language?")).if
                      xformat_module_path.write ((xsettings).xFORMAT_MODULE_PATH)
                    xformat_locations.write (((unsupported)).apply)
                    (xformat_module_path).if
                      seq
                        (((xisinstance)).apply ((xformat_module_path)) ((xstr))).if
                          xformat_module_path.write (((unsupported)).apply ((xformat_module_path)))
                        (((unsupported)).apply ((xpath)) ((xformat_module_path)))
                          bogusForceDataize.write ((((xformat_locations).xappend)).apply (((xpath).add ".%s")))
                    bogusForceDataize.write ((((xformat_locations).xappend)).apply ("django.conf.locale.%s"))
                    xlocale.write (((xto_locale)).apply ((xlang)))
                    xlocales.write (((unsupported)).apply ((xlocale)))
                    (((unsupported)).apply ("_") ((xlocale))).if
                      bogusForceDataize.write ((((xlocales).xappend)).apply ((((unsupported)).apply (((((xlocale).xsplit)).apply ("_"))) (0))))
                    (((unsupported)).apply ((xlocation)) ((xformat_locations)))
                      (((unsupported)).apply ((xloc)) ((xlocales)))
                        (((unsupported)).apply ((xImportError)))
                          (((unsupported)).apply ((((ximport_module)).apply (("%s.formats".mod ((xlocation).mod (xloc)))))))
            xget_format_modules.write
              [xlang]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xlang)) ("None: is there a None literal in the EO language?")).if
                      xlang.write (((xget_language)).apply)
                    (((unsupported)).apply ((xlang)) ((x_format_modules_cache))).if
                      (((unsupported)).apply ((((unsupported)).apply ((x_format_modules_cache)) ((xlang)))) ((((xlist)).apply ((((xiter_format_modules)).apply ((xlang)) (((xsettings).xFORMAT_MODULE_PATH)))))))
                    (((unsupported)).apply ((((unsupported)).apply ((x_format_modules_cache)) ((xlang)))))
            xget_format.write
              [xformat_type xlang xuse_l10n]
                memory > xval
                memory > xcache_key
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xuse_l10n)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((xAttributeError)))
                        xuse_l10n.write ((xsettings).x_USE_L10N_INTERNAL)
                        xuse_l10n.write ((xsettings).xUSE_L10N)
                    ((xuse_l10n).and (((unsupported)).apply ((xlang)) ("None: is there a None literal in the EO language?"))).if
                      xlang.write (((xget_language)).apply)
                    xcache_key.write (((unsupported)).apply ((xformat_type)) ((xlang)))
                    (((unsupported)).apply ((xKeyError)))
                      (((unsupported)).apply ((((unsupported)).apply ((x_format_cache)) ((xcache_key)))))
                    xval.write "None: is there a None literal in the EO language?"
                    (xuse_l10n).if
                      (((unsupported)).apply ((xmodule)) ((((xget_format_modules)).apply ((xlang)))))
                        seq
                          xval.write (((xgetattr)).apply ((xmodule)) ((xformat_type)) ("None: is there a None literal in the EO language?"))
                          (((unsupported)).apply ((xval)) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply)
                    (((unsupported)).apply ((xval)) ("None: is there a None literal in the EO language?")).if
                      seq
                        (((unsupported)).apply ((xformat_type)) ((xFORMAT_SETTINGS))).if
                          (((unsupported)).apply ((xformat_type)))
                        xval.write (((xgetattr)).apply ((xsettings)) ((xformat_type)))
                      (((unsupported)).apply ((xformat_type)) ((xISO_INPUT_FORMATS))).if
                        seq
                          xval.write (((xlist)).apply ((xval)))
                          (((unsupported)).apply ((xiso_input)) (((((xISO_INPUT_FORMATS).xget)).apply ((xformat_type)) ((((unsupported)).apply)))))
                            (((unsupported)).apply ((xiso_input)) ((xval))).if
                              bogusForceDataize.write ((((xval).xappend)).apply ((xiso_input)))
                    (((unsupported)).apply ((((unsupported)).apply ((x_format_cache)) ((xcache_key)))) ((xval)))
                    (((unsupported)).apply ((xval)))
            xget_format_lazy.write (((xlazy)).apply ((xget_format)) ((xstr)) ((xlist)) ((xtuple)))
            xdate_format.write
              [xvalue xformat xuse_l10n]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((xdateformat).xformat)).apply ((xvalue)) ((((unsupported)).apply ((xget_format)) (((xformat).or "DATE_FORMAT")) ((xuse_l10n)))))))
            xtime_format.write
              [xvalue xformat xuse_l10n]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((xdateformat).xtime_format)).apply ((xvalue)) ((((unsupported)).apply ((xget_format)) (((xformat).or "TIME_FORMAT")) ((xuse_l10n)))))))
            xnumber_format.write
              [xvalue xdecimal_pos xuse_l10n xforce_grouping]
                memory > xlang
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xuse_l10n)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((xAttributeError)))
                        xuse_l10n.write ((xsettings).x_USE_L10N_INTERNAL)
                        xuse_l10n.write ((xsettings).xUSE_L10N)
                    xlang.write ((xuse_l10n).if (((xget_language)).apply) "None: is there a None literal in the EO language?")
                    (((unsupported)).apply ((((unsupported)).apply (((xnumberformat).xformat)) ((xvalue)) ((((unsupported)).apply ((xget_format)) ("DECIMAL_SEPARATOR") ((xlang)) ((xuse_l10n)))) ((xdecimal_pos)) ((((unsupported)).apply ((xget_format)) ("NUMBER_GROUPING") ((xlang)) ((xuse_l10n)))) ((((unsupported)).apply ((xget_format)) ("THOUSAND_SEPARATOR") ((xlang)) ((xuse_l10n)))) ((xforce_grouping)) ((xuse_l10n)))))
            xlocalize.write
              [xvalue xuse_l10n]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xvalue)) ((xstr))).if
                      (((unsupported)).apply ((xvalue)))
                      (((xisinstance)).apply ((xvalue)) ((xbool))).if
                        (((unsupported)).apply ((((xstr)).apply ((xvalue)))))
                        (((xisinstance)).apply ((xvalue)) ((((unsupported)).apply (((xdecimal).xDecimal)) ((xfloat)) ((xint))))).if
                          seq
                            (((unsupported)).apply ((xuse_l10n)) ((xfalse))).if
                              (((unsupported)).apply ((((xstr)).apply ((xvalue)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xnumber_format)) ((xvalue)) ((xuse_l10n)))))
                          (((xisinstance)).apply ((xvalue)) (((xdatetime).xdatetime))).if
                            (((unsupported)).apply ((((unsupported)).apply ((xdate_format)) ((xvalue)) ("DATETIME_FORMAT") ((xuse_l10n)))))
                            (((xisinstance)).apply ((xvalue)) (((xdatetime).xdate))).if
                              (((unsupported)).apply ((((unsupported)).apply ((xdate_format)) ((xvalue)) ((xuse_l10n)))))
                              (((xisinstance)).apply ((xvalue)) (((xdatetime).xtime))).if
                                (((unsupported)).apply ((((unsupported)).apply ((xtime_format)) ((xvalue)) ("TIME_FORMAT") ((xuse_l10n)))))
                    (((unsupported)).apply ((xvalue)))
            xlocalize_input.write
              [xvalue xdefault]
                memory > xformat
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xvalue)) ((xstr))).if
                      (((unsupported)).apply ((xvalue)))
                      (((xisinstance)).apply ((xvalue)) ((xbool))).if
                        (((unsupported)).apply ((((xstr)).apply ((xvalue)))))
                        (((xisinstance)).apply ((xvalue)) ((((unsupported)).apply (((xdecimal).xDecimal)) ((xfloat)) ((xint))))).if
                          (((unsupported)).apply ((((xnumber_format)).apply ((xvalue)))))
                          (((xisinstance)).apply ((xvalue)) (((xdatetime).xdatetime))).if
                            seq
                              xformat.write ((xdefault).or (((unsupported)).apply ((((xget_format)).apply ("DATETIME_INPUT_FORMATS"))) (0)))
                              xformat.write (((xsanitize_strftime_format)).apply ((xformat)))
                              (((unsupported)).apply (((((xvalue).xstrftime)).apply ((xformat)))))
                            (((xisinstance)).apply ((xvalue)) (((xdatetime).xdate))).if
                              seq
                                xformat.write ((xdefault).or (((unsupported)).apply ((((xget_format)).apply ("DATE_INPUT_FORMATS"))) (0)))
                                xformat.write (((xsanitize_strftime_format)).apply ((xformat)))
                                (((unsupported)).apply (((((xvalue).xstrftime)).apply ((xformat)))))
                              (((xisinstance)).apply ((xvalue)) (((xdatetime).xtime))).if
                                seq
                                  xformat.write ((xdefault).or (((unsupported)).apply ((((xget_format)).apply ("TIME_INPUT_FORMATS"))) (0)))
                                  (((unsupported)).apply (((((xvalue).xstrftime)).apply ((xformat)))))
                    (((unsupported)).apply ((xvalue)))
            xsanitize_strftime_format.write
              [xfmt]
                memory > xmapping
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((((((((xdatetime).xdate)).apply (1) (1) (1)).xstrftime)).apply ("%Y")).eq "0001").if
                      (((unsupported)).apply ((xfmt)))
                    xmapping.write (((unsupported)).apply ("C") (2) ("F") (10) ("G") (4) ("Y") (4))
                    (((unsupported)).apply (((((xre).xsub)).apply ("((?:^|[^%])(?:%%)*)%([CFGY])") ((((unsupported)).apply (("%s%%0%s%s".mod (((unsupported)).apply ((((unsupported)).apply ((xm)) (1))) ((((unsupported)).apply ((xmapping)) ((((unsupported)).apply ((xm)) (2))))) ((((unsupported)).apply ((xm)) (2)))))))) ((xfmt)))))
            xsanitize_separators.write
              [xvalue]
                memory > xparts
                memory > xthousand_sep
                memory > xdecimal_separator
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xvalue)) ((xstr))).if
                      seq
                        xparts.write (((unsupported)).apply)
                        xdecimal_separator.write (((xget_format)).apply ("DECIMAL_SEPARATOR"))
                        (((unsupported)).apply ((xdecimal_separator)) ((xvalue))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xdecimals)))) (((((xvalue).xsplit)).apply ((xdecimal_separator)) (1))))
                            bogusForceDataize.write ((((xparts).xappend)).apply ((xdecimals)))
                        ((xsettings).xUSE_THOUSAND_SEPARATOR).if
                          seq
                            xthousand_sep.write (((xget_format)).apply ("THOUSAND_SEPARATOR"))
                            ((((xthousand_sep).eq ".").and (((((xvalue).xcount)).apply (".")).eq 1)).and ((((xlen)).apply ((((unsupported)).apply (((((xvalue).xsplit)).apply ("."))) ((1.neg))))).neq 3)).if
                              (((unsupported)).apply ((xreplacement)) ((((unsupported)).apply ((xthousand_sep)) (((((xunicodedata).xnormalize)).apply ("NFKD") ((xthousand_sep)))))))
                                xvalue.write ((((xvalue).xreplace)).apply ((xreplacement)) (""))
                        bogusForceDataize.write ((((xparts).xappend)).apply ((xvalue)))
                        xvalue.write (((".".xjoin)).apply ((((xreversed)).apply ((xparts)))))
                    (((unsupported)).apply ((xvalue)))