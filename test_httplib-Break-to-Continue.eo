memory > xclient
memory > xValueError
memory > xmsg
memory > xversion
memory > xkw
memory > xk
memory > xexc_info
memory > xthreading
memory > xarray
memory > xheaders
memory > xheader
memory > xexpected
memory > xmessage
memory > xlist
memory > xRuntimeError
memory > xenumerate
memory > xUpdatingFile
memory > xEPipeSocket
memory > xerrno
memory > xstr
memory > xio
memory > xfolded
memory > xwarnings
memory > xAssertionError
memory > xNoEOFBytesIO
memory > xsocket
memory > xpos
memory > xhp
memory > xreader
memory > xrange
memory > xh
memory > xvalue
memory > xbytearray
memory > x_
memory > xp
memory > xoutput
memory > xopen
memory > xf
memory > xssl
memory > xset
memory > xrepr
memory > xConnectionResetError
memory > xint
memory > xContentLengthChecker
memory > xre
memory > xreuse
memory > xhasattr
memory > xbody
memory > xx
memory > xTimeoutTest
memory > xssl_err
memory > xi
memory > xsuper
memory > xsupport
memory > xReadliner
memory > xbytes
memory > xDeprecationWarning
memory > xfloat
memory > xchr
memory > xargs
memory > xOSError
memory > xitertools
memory > xos
memory > xdir
memory > xresponse
memory > xval
memory > xgetattr
memory > xHeaderCountingBuffer
memory > xFakeSocketHTTPConnection
memory > xexplicit_header
memory > x__file__
memory > xHTTPStatus
memory > xname
memory > xunittest
memory > xidx
memory > xnext
memory > xmap
memory > xn
memory > xempty_lines
memory > xchunk
memory > xFakeSocket
memory > xmemoryview
memory > xUnsafeHTTPConnection
memory > xaddress
memory > xstream_factory
memory > xisinstance
memory > xconst
memory > xline
memory > xexception
memory > xlen
memory > xResponse
memory > xTypeError
memory > x__name__
memory > xExtendedReadTest
memory > xmake_https_server
memory > xmethod
[] > test_httplib
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_client_constants
        memory > xtest_chunked_head
        memory > xtest_bytes_body
        memory > x_parse_chunked
        memory > xtest_host_port
        memory > xtest_disallow_set_tunnel_after_connect
        memory > xlines
        memory > xtest_overflowing_status_line
        memory > xtest_local_unknown_cert
        memory > xtest_error_leak
        memory > xtest_peek
        memory > xtest_malformed_headers_coped_with
        memory > xtest_send_type_error
        memory > xtest_putrequest_override_host_validation
        memory > xtest_set_tunnel_host_port_headers
        memory > xtest_disconnected
        memory > xtest_connect_with_tunnel
        memory > xchunked_start
        memory > xtest_getting_nonexistent_header_with_iterable_default
        memory > xtestTimeoutAttribute
        memory > xtest_putrequest_override_domain_validation
        memory > xtest_chunked_missing_end
        memory > xtest_100_close
        memory > xtest_getting_nonexistent_header_without_default
        memory > xtest_networked_noverification
        memory > xlines_expected
        memory > xtest_all
        memory > xCERT_localhost
        memory > xtest_responses
        memory > xget_headers_and_fp
        memory > xtest_blocksize_request
        memory > xtest_partial_reads_no_content_length
        memory > xtest_partial_readintos_no_content_length
        memory > xtest_tls13_pha
        memory > xclose
        memory > xtest_read1_bound_content_length
        memory > xTestCase
        memory > xtrailers
        memory > xtest_ipv6host_header
        memory > xtest_send
        memory > xconnect
        memory > xtest_overflowing_header_line
        memory > xtest_tunnel_debuglog
        memory > xtest_partial_readintos_incomplete_body
        memory > xlast_chunk
        memory > xtest_readlines_content_length
        memory > xtest_negative_content_length
        memory > xtest_readinto_head
        memory > xhere
        memory > xtest_endheaders_chunked
        memory > xtest_ascii_body
        memory > xtest_networked_trusted_by_default_cert
        memory > xtest_headers_debuglevel
        memory > xtest_chunked_sync
        memory > xsetUp
        memory > xtest_local_good_hostname
        memory > xtest_epipe
        memory > xtest_send_updating_file
        memory > xtest_reuse_reconnect
        memory > xtest_content_length_sync
        memory > xexpected_body
        memory > xtest_mixed_reads
        memory > xtest_networked_good_cert
        memory > xtest_manual_content_length
        memory > xtest_send_iter
        memory > x_parse_request
        memory > xtest_read1_content_length
        memory > xtestHTTPSConnectionSourceAddress
        memory > xtest_connect_put_request
        memory > x_create_connection
        memory > xtest_putheader
        memory > xtest_latin1_body
        memory > xtest_overflowing_chunked_line
        memory > xtest_partial_reads
        memory > xtest_status_lines
        memory > xPORT
        memory > xchunked_end
        memory > xmakefile
        memory > xtest_binary_file_body
        memory > xchunked_expected
        memory > xtest_blocksize_send
        memory > xtest_readline
        memory > xtest_empty_body
        memory > xtest_response_fileno
        memory > xtest_text_file_body
        memory > xtest_chunked_extension
        memory > xtest_response_headers
        memory > xtest_bad_status_repr
        memory > xtest_partial_reads_incomplete_body
        memory > xtest_auto_headers
        memory > xtest_peek_0
        memory > xtest_explicit_headers
        memory > xtest_request
        memory > x_make_body
        memory > xtest_getting_header
        memory > x__init__
        memory > xtest_parse_all_octets
        memory > xmake_server
        memory > xtest_partial_readintos
        memory > xtest_content_length_0
        memory > xtest_networked_bad_cert
        memory > xCERT_selfsigned_pythontestdotnet
        memory > xtest_read1_bounded
        memory > xtest_read1
        memory > xsendall
        memory > xtest_list_body
        memory > xtest_dir_with_added_behavior_on_status
        memory > xread
        memory > xcreate_connection
        memory > xchunk_extension
        memory > xtest_read1_unbounded
        memory > xHOST
        memory > xtest_getting_nonexistent_header_with_string_default
        memory > xtest_readinto_chunked
        memory > xlast_chunk_extended
        memory > xtest_early_eof
        memory > xtest_too_many_headers
        memory > xtest_read_head
        memory > xtest_putrequest_override_encoding
        memory > xtest_local_bad_hostname
        memory > xtest_getting_header_defaultint
        memory > x_verify_readline
        memory > xlines_chunked
        memory > xtest_readline_bound_content_length
        memory > xtest_attributes
        memory > xtestHTTPConnectionSourceAddress
        memory > xtearDown
        memory > xtest_send_file
        memory > xtest_chunked
        memory > xtest_networked
        memory > xtest_incomplete_read
        memory > xtest_read1_0
        memory > xreadline
        memory > xCERT_fakehostname
        memory > xtest_invalid_headers
        memory > xsetsockopt
        memory > xtest_readinto_chunked_head
        memory > xtest_chunked_trailers
        memory > xfile_close
        memory > xtest_invalid_method_names
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xTestCase.write ((xunittest).xTestCase)
            (((unsupported)).apply)
            xhere.write (((((xos).xpath).xdirname)).apply ((x__file__)))
            xCERT_localhost.write (((((xos).xpath).xjoin)).apply ((xhere)) ("keycert.pem"))
            xCERT_fakehostname.write (((((xos).xpath).xjoin)).apply ((xhere)) ("keycert2.pem"))
            xCERT_selfsigned_pythontestdotnet.write (((((xos).xpath).xjoin)).apply ((xhere)) ("selfsigned_pythontestdotnet.pem"))
            xchunked_start.write "HTTP/1.1 200 OKrnTransfer-Encoding: chunkedrnrnarnhello worlrn3rnd! rn8rnand now rn22rnfor something completely differentrn"
            xchunked_expected.write "hello world! and now for something completely different"
            xchunk_extension.write ";foo=bar"
            xlast_chunk.write "0rn"
            xlast_chunk_extended.write (("0".add (xchunk_extension)).add "rn")
            xtrailers.write "X-Dummy: foornX-Dumm2: barrn"
            xchunked_end.write "rn"
            xHOST.write ((xsupport).xHOST)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xtext xfileclass xhost xport]
                    seq > @
                      (((unsupported)).apply)
                        (((xisinstance)).apply ((xtext)) ((xstr))).if
                          xtext.write ((((xtext).xencode)).apply ("ascii"))
                        (((unsupported)).apply (((xself).xtext)) ((xtext)))
                        (((unsupported)).apply (((xself).xfileclass)) ((xfileclass)))
                        (((unsupported)).apply (((xself).xdata)) (""))
                        (((unsupported)).apply (((xself).xsendall_calls)) (0))
                        (((unsupported)).apply (((xself).xfile_closed)) (FALSE))
                        (((unsupported)).apply (((xself).xhost)) ((xhost)))
                        (((unsupported)).apply (((xself).xport)) ((xport)))
                xsendall.write
                  [xself xdata]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xsendall_calls)) (1))
                        (((unsupported)).apply (((xself).xdata)) ((xdata)))
                xmakefile.write
                  [xself xmode xbufsize]
                    seq > @
                      (((unsupported)).apply)
                        (((xmode).neq "r").and ((xmode).neq "rb")).if
                          (((unsupported)).apply (((((xclient).xUnimplementedFileMode)).apply)))
                        (((unsupported)).apply (((xself).xfile)) (((((xself).xfileclass)).apply (((xself).xtext)))))
                        (((unsupported)).apply ((((xself).xfile).xclose)) (((xself).xfile_close)))
                        (((unsupported)).apply (((xself).xfile)))
                xfile_close.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xfile_closed)) (TRUE))
                xclose.write
                  [xself]
                    seq > @
                xsetsockopt.write
                  [xself xlevel xoptname xvalue]
                    seq > @
            (((unsupported)).apply ((xFakeSocket)))
              seq
                x__init__.write
                  [xself xtext xpipe_trigger]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xFakeSocket).x__init__)).apply ((xself)) ((xtext)))
                        (((unsupported)).apply (((xself).xpipe_trigger)) ((xpipe_trigger)))
                xsendall.write
                  [xself xdata]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xpipe_trigger)) ((xdata))).if
                          (((unsupported)).apply ((((xOSError)).apply (((xerrno).xEPIPE)) ("gotcha"))))
                        (((unsupported)).apply (((xself).xdata)) ((xdata)))
                xclose.write
                  [xself]
                    seq > @
            (((unsupported)).apply (((xio).xBytesIO)))
              seq
                (((unsupported)).apply)
                xread.write
                  [xself xn]
                    memory > xdata
                    seq > @
                      (((unsupported)).apply)
                        xdata.write (((((xio).xBytesIO).xread)).apply ((xself)) ((xn)))
                        ((xdata).eq "").if
                          (((unsupported)).apply ((((xAssertionError)).apply ("caller tried to read past EOF"))))
                        (((unsupported)).apply ((xdata)))
                xreadline.write
                  [xself xlength]
                    memory > xdata
                    seq > @
                      (((unsupported)).apply)
                        xdata.write (((((xio).xBytesIO).xreadline)).apply ((xself)) ((xlength)))
                        ((xdata).eq "").if
                          (((unsupported)).apply ((((xAssertionError)).apply ("caller tried to read past EOF"))))
                        (((unsupported)).apply ((xdata)))
            (((unsupported)).apply (((xclient).xHTTPConnection)))
              seq
                unsupported
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xconnections)) (0))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ("example.com"))
                        (((unsupported)).apply (((xself).xfake_socket_args)) ((xargs)))
                        (((unsupported)).apply (((xself).x_create_connection)) (((xself).xcreate_connection)))
                xconnect.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xconnections)) (1))
                        (((unsupported)).apply (((((((xsuper)).apply).xconnect)).apply)))
                xcreate_connection.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xFakeSocket)).apply ((((unsupported)).apply (((xself).xfake_socket_args)))))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_auto_headers.write
                  [xself]
                    memory > xheaders
                    memory > xconn
                    memory > xappend
                    memory > xbody
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xlist)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xcount)) ((((unsupported)).apply)))
                            xappend.write
                              [xself xitem]
                                memory > xkv
                                memory > xlcKey
                                seq > @
                                  seq
                                    xkv.write ((((xitem).xsplit)).apply (":"))
                                    ((((xlen)).apply ((xkv))).greater 1).if
                                      seq
                                        xlcKey.write (((((((((unsupported)).apply ((xkv)) (0)).xdecode)).apply ("ascii")).xlower)).apply)
                                        bogusForceDataize.write (((((xself).xcount).xsetdefault)).apply ((xlcKey)) (0))
                                        (((unsupported)).apply ((((unsupported)).apply (((xself).xcount)) ((xlcKey)))) (1))
                                    bogusForceDataize.write ((((xlist).xappend)).apply ((xself)) ((xitem)))
                        (((unsupported)).apply ((xexplicit_header)) ((((unsupported)).apply (TRUE) (FALSE))))
                          (((unsupported)).apply ((xheader)) ((((unsupported)).apply ("Content-length") ("Host") ("Accept-encoding"))))
                            seq
                              xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                              (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply ("blahblahblah"))))
                              (((unsupported)).apply (((xconn).x_buffer)) ((((xHeaderCountingBuffer)).apply)))
                              xbody.write "spamspamspam"
                              xheaders.write (((unsupported)).apply)
                              (xexplicit_header).if
                                (((unsupported)).apply ((((unsupported)).apply ((xheaders)) ((xheader)))) ((((xstr)).apply ((((xlen)).apply ((xbody)))))))
                              bogusForceDataize.write ((((xconn).xrequest)).apply ("POST") ("/") ((xbody)) ((xheaders)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xconn).x_buffer).xcount)) (((((xheader).xlower)).apply)))) (1))
                xtest_content_length_0.write
                  [xself]
                    memory > xconn
                    memory > xmethods_with_body
                    memory > xappend
                    memory > xmethods_without_body
                    memory > xbodies
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xlist)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xlist).x__init__)).apply ((xself)))
                                    (((unsupported)).apply (((xself).xcontent_length)) ("None: is there a None literal in the EO language?"))
                            xappend.write
                              [xself xitem]
                                memory > xkv
                                seq > @
                                  seq
                                    xkv.write ((((xitem).xsplit)).apply (":") (1))
                                    (((((xlen)).apply ((xkv))).greater 1).and (((((((unsupported)).apply ((xkv)) (0)).xlower)).apply).eq "content-length")).if
                                      (((unsupported)).apply (((xself).xcontent_length)) (((((((unsupported)).apply ((xkv)) (1)).xstrip)).apply)))
                                    bogusForceDataize.write ((((xlist).xappend)).apply ((xself)) ((xitem)))
                        xbodies.write (((unsupported)).apply ("None: is there a None literal in the EO language?") (""))
                        xmethods_with_body.write (((unsupported)).apply ("PUT") ("POST") ("PATCH"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmethod)) ((xbody)))) (((((xitertools).xproduct)).apply ((xmethods_with_body)) ((xbodies)))))
                          seq
                            xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                            (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply (((xconn).x_buffer)) ((((xContentLengthChecker)).apply)))
                            bogusForceDataize.write ((((xconn).xrequest)).apply ((xmethod)) ("/") ((xbody)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xconn).x_buffer).xcontent_length)) ("0") (((("Header Content-Length incorrect on {}".xformat)).apply ((xmethod)))))
                        xmethods_without_body.write (((unsupported)).apply ("GET") ("CONNECT") ("DELETE") ("HEAD") ("OPTIONS") ("TRACE"))
                        (((unsupported)).apply ((xmethod)) ((xmethods_without_body)))
                          seq
                            xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                            (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply (((xconn).x_buffer)) ((((xContentLengthChecker)).apply)))
                            bogusForceDataize.write ((((xconn).xrequest)).apply ((xmethod)) ("/") ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xconn).x_buffer).xcontent_length)) ("None: is there a None literal in the EO language?") (((("Header Content-Length set for empty body on {}".xformat)).apply ((xmethod)))))
                        (((unsupported)).apply ((xmethod)) ((xmethods_without_body)))
                          seq
                            xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                            (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply (((xconn).x_buffer)) ((((xContentLengthChecker)).apply)))
                            bogusForceDataize.write ((((xconn).xrequest)).apply ((xmethod)) ("/") (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xconn).x_buffer).xcontent_length)) ("0") (((("Header Content-Length incorrect on {}".xformat)).apply ((xmethod)))))
                        (((unsupported)).apply ((xmethod)) (((((xitertools).xchain)).apply ((xmethods_without_body)) ((xmethods_with_body)))))
                          seq
                            xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                            (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply (((xconn).x_buffer)) ((((xContentLengthChecker)).apply)))
                            bogusForceDataize.write ((((xconn).xrequest)).apply ((xmethod)) ("/") (" "))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xconn).x_buffer).xcontent_length)) ("1") (((("Header Content-Length incorrect on {}".xformat)).apply ((xmethod)))))
                xtest_putheader.write
                  [xself]
                    memory > xconn
                    seq > @
                      seq
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xconn).xputrequest)).apply ("GET") ("/"))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("Content-length") (42))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Content-length: 42") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("Foo") (" bar "))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Foo:  bar ") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("Bar") ("tbazt"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Bar: tbazt") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("Authorization") ("Bearer mytoken"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Authorization: Bearer mytoken") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("IterHeader") ("IterA") ("IterB"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("IterHeader: IterArntIterB") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("LatinHeader") ("xFF"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("LatinHeader: xFF") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("Utf8Header") ("xc3x80"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Utf8Header: xc3x80") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("C1-Control") ("nextx85line"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("C1-Control: nextx85line") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("Embedded-Fold-Space") ("isrn allowed"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Embedded-Fold-Space: isrn allowed") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("Embedded-Fold-Tab") ("isrntallowed"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Embedded-Fold-Tab: isrntallowed") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("Key Space") ("value"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Key Space: value") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("KeySpace ") ("value"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("KeySpace : value") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("Noncontinuexa0Space") ("value"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Noncontinuexa0Space: value") (((xconn).x_buffer)))
                        bogusForceDataize.write ((((xconn).xputheader)).apply ("xa0NoncontinueSpace") ("value"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("xa0NoncontinueSpace: value") (((xconn).x_buffer)))
                xtest_ipv6host_header.write
                  [xself]
                    memory > xexpected
                    memory > xconn
                    memory > xsock
                    seq > @
                      seq
                        xexpected.write "GET /foo HTTP/1.1rnHost: [2001::]:81rnAccept-Encoding: identityrnrn"
                        xconn.write ((((xclient).xHTTPConnection)).apply ("[2001::]:81"))
                        xsock.write (((xFakeSocket)).apply (""))
                        (((unsupported)).apply (((xconn).xsock)) ((xsock)))
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/foo"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xsock).xdata).xstartswith)).apply ((xexpected)))))
                        xexpected.write "GET /foo HTTP/1.1rnHost: [2001:102A::]rnAccept-Encoding: identityrnrn"
                        xconn.write ((((xclient).xHTTPConnection)).apply ("[2001:102A::]"))
                        xsock.write (((xFakeSocket)).apply (""))
                        (((unsupported)).apply (((xconn).xsock)) ((xsock)))
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/foo"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xsock).xdata).xstartswith)).apply ((xexpected)))))
                xtest_malformed_headers_coped_with.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OKrnFirst: valrn: nvalrnSecond: valrnrn"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xgetheader)).apply ("First"))) ("val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xgetheader)).apply ("Second"))) ("val"))
                xtest_parse_all_octets.write
                  [xself]
                    memory > xresp
                    memory > xvchar
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write (((("HTTP/1.1 200 OKrn!#$%&'*+-.^_`|~: valuernVCHAR: ".add (((xbytes)).apply ((((xrange)).apply (33) ((126.add 1)))))).add "rnobs-text: ").add (((xbytes)).apply ((((xrange)).apply (128) ((255.add 1)))))).add "rnobs-fold: textrn folded with spacerntfolded with tabrnContent-Length: 0rnrn")
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xgetheader)).apply ("Content-Length"))) ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresp).xmsg)) ("Content-Length"))) ("0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xgetheader)).apply ("!#$%&'*+-.^_`|~"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresp).xmsg)) ("!#$%&'*+-.^_`|~"))) ("value"))
                        xvchar.write ((("".xjoin)).apply ((((xmap)).apply ((xchr)) ((((xrange)).apply (33) ((126.add 1)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xgetheader)).apply ("VCHAR"))) ((xvchar)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xresp).xmsg)) ("VCHAR"))) ((xvchar)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((((xresp).xgetheader)).apply ("obs-text"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("obs-text") (((xresp).xmsg)))
                        (((unsupported)).apply ((xfolded)) ((((unsupported)).apply (((((xresp).xgetheader)).apply ("obs-fold"))) ((((unsupported)).apply (((xresp).xmsg)) ("obs-fold"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfolded).xstartswith)).apply ("text"))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (" folded with space") ((xfolded)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfolded).xendswith)).apply ("folded with tab"))))
                xtest_invalid_headers.write
                  [xself]
                    memory > xconn
                    memory > xcases
                    seq > @
                      seq
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        bogusForceDataize.write ((((xconn).xputrequest)).apply ("GET") ("/"))
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("InvalidrnName") ("ValidValue"))) ((((unsupported)).apply ("InvalidrName") ("ValidValue"))) ((((unsupported)).apply ("InvalidnName") ("ValidValue"))) ((((unsupported)).apply ("rnInvalidName") ("ValidValue"))) ((((unsupported)).apply ("rInvalidName") ("ValidValue"))) ((((unsupported)).apply ("nInvalidName") ("ValidValue"))) ((((unsupported)).apply (" InvalidName") ("ValidValue"))) ((((unsupported)).apply ("tInvalidName") ("ValidValue"))) ((((unsupported)).apply ("Invalid:Name") ("ValidValue"))) ((((unsupported)).apply (":InvalidName") ("ValidValue"))) ((((unsupported)).apply ("ValidName") ("InvalidrnValue"))) ((((unsupported)).apply ("ValidName") ("InvalidrValue"))) ((((unsupported)).apply ("ValidName") ("InvalidnValue"))) ((((unsupported)).apply ("ValidName") ("InvalidValuern"))) ((((unsupported)).apply ("ValidName") ("InvalidValuer"))) ((((unsupported)).apply ("ValidName") ("InvalidValuen"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xvalue)))) ((xcases)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((((unsupported)).apply ((xname)) ((xvalue)))))))
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("Invalid header"))))
                              bogusForceDataize.write ((((xconn).xputheader)).apply ((xname)) ((xvalue)))
                xtest_headers_debuglevel.write
                  [xself]
                    memory > xresp
                    memory > xlines
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OKrnFirst: valrnSecond: val1rnSecond: val2rn"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) (1))
                        (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xoutput)))
                          bogusForceDataize.write ((((xresp).xbegin)).apply)
                        xlines.write (((((((xoutput).xgetvalue)).apply).xsplitlines)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlines)) (0))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlines)) (1))) ("header: First: val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlines)) (2))) ("header: Second: val1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlines)) (3))) ("header: Second: val2"))
            (((unsupported)).apply ((xTestCase)))
              xtest_invalid_method_names.write
                [xself]
                  memory > xmethods
                  memory > xconn
                  seq > @
                    seq
                      xmethods.write (((unsupported)).apply ("GETr") ("POSTn") ("PUTnr") ("POSTnValue") ("POSTnHOST:abc") ("GETnrHost:abcn") ("POSTrRemainder:r") ("GETrHOST:n") ("nPUT"))
                      (((unsupported)).apply ((xmethod)) ((xmethods)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("method can't contain control characters"))))
                          seq
                            xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                            (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply ("None: is there a None literal in the EO language?"))))
                            (((unsupported)).apply (((xconn).xrequest)) ((xmethod)) ("/"))
            (((unsupported)).apply ((xTestCase)))
              seq
                xexpected_body.write "It's just a flesh wound"
                xtest_endheaders_chunked.write
                  [xself]
                    memory > xconn
                    memory > xbody
                    seq > @
                      seq
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        bogusForceDataize.write ((((xconn).xputrequest)).apply ("POST") ("/"))
                        (((unsupported)).apply (((xconn).xendheaders)) (((((xself).x_make_body)).apply)) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((x_)) ((xbody)))) (((((xself).x_parse_request)).apply ((((xconn).xsock).xdata)))))
                        xbody.write ((((xself).x_parse_chunked)).apply ((xbody)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbody)) (((xself).xexpected_body)))
                xtest_explicit_headers.write
                  [xself]
                    memory > xconn
                    seq > @
                      seq
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("POST") ("/") (((((xself).x_make_body)).apply)) ((((unsupported)).apply ("Transfer-Encoding") ("chunked"))))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xheaders)) ((xbody)))) (((((xself).x_parse_request)).apply ((((xconn).xsock).xdata)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("content-length") ((((unsupported)).apply (((((xk).xlower)).apply)) ((xk)) (((((xheaders).xkeys)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xheaders)) ("Transfer-Encoding"))) ("chunked"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbody)) (((xself).xexpected_body)))
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("POST") ("/") ((((((xself).xexpected_body).xdecode)).apply ("latin-1"))) ((((unsupported)).apply ("Transfer-Encoding") ("chunked"))))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xheaders)) ((xbody)))) (((((xself).x_parse_request)).apply ((((xconn).xsock).xdata)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("content-length") ((((unsupported)).apply (((((xk).xlower)).apply)) ((xk)) (((((xheaders).xkeys)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xheaders)) ("Transfer-Encoding"))) ("chunked"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbody)) (((xself).xexpected_body)))
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        (((unsupported)).apply (((xconn).xrequest)) ("POST") ("/") ((((unsupported)).apply ("Transfer-Encoding") ("gzip, chunked"))) (TRUE) (((((xself).x_make_body)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xheaders)) ((xbody)))) (((((xself).x_parse_request)).apply ((((xconn).xsock).xdata)))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("content-length") ((((unsupported)).apply (((((xk).xlower)).apply)) ((xk)) ((xheaders)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xheaders)) ("Transfer-Encoding"))) ("gzip, chunked"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).x_parse_chunked)).apply ((xbody)))) (((xself).xexpected_body)))
                xtest_request.write
                  [xself]
                    memory > xconn
                    memory > xbody
                    seq > @
                      (((unsupported)).apply ((xempty_lines)) ((((unsupported)).apply (FALSE) (TRUE))))
                        seq
                          xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                          (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                          bogusForceDataize.write ((((xconn).xrequest)).apply ("POST") ("/") ((((unsupported)).apply (((xself).x_make_body)) ((xempty_lines)))))
                          (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xheaders)) ((xbody)))) (((((xself).x_parse_request)).apply ((((xconn).xsock).xdata)))))
                          xbody.write ((((xself).x_parse_chunked)).apply ((xbody)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbody)) (((xself).xexpected_body)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xheaders)) ("Transfer-Encoding"))) ("chunked"))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ("content-length") ((((unsupported)).apply (((((xk).xlower)).apply)) ((xk)) ((xheaders)))))
                xtest_empty_body.write
                  [xself]
                    memory > xconn
                    seq > @
                      seq
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("POST") ("/") ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xheaders)) ((xbody)))) (((((xself).x_parse_request)).apply ((((xconn).xsock).xdata)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xheaders)) ("Transfer-Encoding"))) ("chunked"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("content-length") ((((unsupported)).apply (((((xk).xlower)).apply)) ((xk)) ((xheaders)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbody)) ("0rnrn"))
                x_make_body.write
                  [xself xempty_lines]
                    memory > xlines
                    seq > @
                      (((unsupported)).apply)
                        xlines.write (((((xself).xexpected_body).xsplit)).apply (" "))
                        (((unsupported)).apply ((((unsupported)).apply ((xidx)) ((xline)))) ((((xenumerate)).apply ((xlines)))))
                          seq
                            ((xempty_lines).and ((xidx).mod 2)).if
                              (((unsupported)).apply (""))
                            ((xidx).less ((((xlen)).apply ((xlines))).sub 1)).if
                              (((unsupported)).apply (((xline).add " ")))
                              (((unsupported)).apply ((xline)))
                x_parse_request.write
                  [xself xdata]
                    memory > xlines
                    memory > xheaders
                    memory > xrequest
                    memory > xn
                    memory > xkey
                    seq > @
                      seq
                        xlines.write ((((xdata).xsplit)).apply ("rn"))
                        xrequest.write (((unsupported)).apply ((xlines)) (0))
                        xheaders.write (((unsupported)).apply)
                        xn.write 1
                        while.
                          (((xn).less (((xlen)).apply ((xlines)))).and ((((xlen)).apply ((((unsupported)).apply ((xlines)) ((xn))))).greater 0))
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xval)))) (((((((unsupported)).apply ((xlines)) ((xn))).xsplit)).apply (":"))))
                                xkey.write (((((((xkey).xdecode)).apply ("latin-1")).xstrip)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xheaders)) ((xkey)))) ((((((((xval).xdecode)).apply ("latin-1")).xstrip)).apply)))
                                (((unsupported)).apply ((xn)) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xrequest)) ((xheaders)) (((("rn".xjoin)).apply ((((unsupported)).apply ((xlines)) ((((unsupported)).apply (((xn).add 1)))))))))))
                x_parse_chunked.write
                  [xself xdata]
                    memory > xlines
                    memory > xtrailers
                    memory > xsize
                    memory > xbody
                    memory > xn
                    seq > @
                      seq
                        xbody.write (((unsupported)).apply)
                        xtrailers.write (((unsupported)).apply)
                        xn.write 0
                        xlines.write ((((xdata).xsplit)).apply ("rn"))
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xsize)) ((xchunk)))) ((((unsupported)).apply ((xlines)) ((((unsupported)).apply ((xn)) (((xn).add 2)))))))
                                xsize.write (((xint)).apply ((xsize)) (16))
                                ((xsize).eq 0).if
                                  seq
                                    (((unsupported)).apply ((xn)) (1))
                                    (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xsize)) ((((xlen)).apply ((xchunk)))))
                                bogusForceDataize.write ((((xbody).xappend)).apply ((xchunk)))
                                (((unsupported)).apply ((xn)) (2))
                                ((xn).greater (((xlen)).apply ((xlines)))).if
                                  (((unsupported)).apply)
                        (((unsupported)).apply (((("".xjoin)).apply ((xbody)))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_dir_with_added_behavior_on_status.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ("description") ("name") ("phrase") ("value")).leq (((xset)).apply ((((xdir)).apply ((((xHTTPStatus)).apply (404)))))))))
                xtest_status_lines.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OkrnrnText"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply (0))) (""))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ("Text"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresp).xclosed)))
                        xbody.write "HTTP/1.1 400.100 Not OkrnrnText"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xclient).xBadStatusLine)) (((xresp).xbegin)))
                xtest_bad_status_repr.write
                  [xself]
                    memory > xexc
                    seq > @
                      seq
                        xexc.write ((((xclient).xBadStatusLine)).apply (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xexc)))) ("BadStatusLine(\"''\")"))
                xtest_partial_reads.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OkrnContent-Length: 4rnrnText"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply (2))) ("Te"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply (2))) ("xt"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresp).xclosed)))
                xtest_mixed_reads.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OkrnContent-Length: 13rnrnTextrnAnother"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xreadline)).apply)) ("Textrn"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ("Another"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresp).xclosed)))
                xtest_partial_readintos.write
                  [xself]
                    memory > xsock
                    memory > xbody
                    memory > xn
                    memory > xb
                    memory > xresp
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OkrnContent-Length: 4rnrnText"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        xb.write (((xbytearray)).apply (2))
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xb)))) ("Te"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresp).xisclosed)).apply)))
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xb)))) ("xt"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresp).xclosed)))
                xtest_partial_reads_no_content_length.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OkrnrnText"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply (2))) ("Te"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply (2))) ("xt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply (1))) (""))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresp).xclosed)))
                xtest_partial_readintos_no_content_length.write
                  [xself]
                    memory > xsock
                    memory > xbody
                    memory > xn
                    memory > xb
                    memory > xresp
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OkrnrnText"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        xb.write (((xbytearray)).apply (2))
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xb)))) ("Te"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresp).xisclosed)).apply)))
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xb)))) ("xt"))
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                xtest_partial_reads_incomplete_body.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OkrnContent-Length: 10rnrnText"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply (2))) ("Te"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply (2))) ("xt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply (1))) (""))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                xtest_partial_readintos_incomplete_body.write
                  [xself]
                    memory > xsock
                    memory > xbody
                    memory > xn
                    memory > xb
                    memory > xresp
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 OkrnContent-Length: 10rnrnText"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        xb.write (((xbytearray)).apply (2))
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xb)))) ("Te"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xresp).xisclosed)).apply)))
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xb)))) ("xt"))
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresp).xclosed)))
                xtest_host_port.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        (((unsupported)).apply ((xhp)) ((((unsupported)).apply ("www.python.org:abc") ("user:password@www.python.org"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xclient).xInvalidURL)) (((xclient).xHTTPConnection)) ((xhp)))
                        (((unsupported)).apply ((((unsupported)).apply ((xhp)) ((xh)) ((xp)))) ((((unsupported)).apply ((((unsupported)).apply ("[fe80::207:e9ff:fe9b]:8000") ("fe80::207:e9ff:fe9b") (8000))) ((((unsupported)).apply ("www.python.org:80") ("www.python.org") (80))) ((((unsupported)).apply ("www.python.org:") ("www.python.org") (80))) ((((unsupported)).apply ("www.python.org") ("www.python.org") (80))) ((((unsupported)).apply ("[fe80::207:e9ff:fe9b]") ("fe80::207:e9ff:fe9b") (80))) ((((unsupported)).apply ("[fe80::207:e9ff:fe9b]:") ("fe80::207:e9ff:fe9b") (80))))))
                          seq
                            xc.write ((((xclient).xHTTPConnection)).apply ((xhp)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xh)) (((xc).xhost)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xp)) (((xc).xport)))
                xtest_response_headers.write
                  [xself]
                    memory > xs
                    memory > xhdr
                    memory > xtext
                    memory > xr
                    memory > xcookies
                    seq > @
                      seq
                        xtext.write "HTTP/1.1 200 OKrnSet-Cookie: Customer=\"WILE_E_COYOTE\"; Version=\"1\"; Path=\"/acme\"rnSet-Cookie: Part_Number=\"Rocket_Launcher_0001\"; Version=\"1\"; Path=\"/acme\"rnrnNo bodyrn"
                        xhdr.write "Customer=\"WILE_E_COYOTE\"; Version=\"1\"; Path=\"/acme\", Part_Number=\"Rocket_Launcher_0001\"; Version=\"1\"; Path=\"/acme\""
                        xs.write (((xFakeSocket)).apply ((xtext)))
                        xr.write ((((xclient).xHTTPResponse)).apply ((xs)))
                        bogusForceDataize.write ((((xr).xbegin)).apply)
                        xcookies.write ((((xr).xgetheader)).apply ("Set-Cookie"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcookies)) ((xhdr)))
                xtest_read_head.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    seq > @
                      seq
                        xsock.write (((xFakeSocket)).apply ("HTTP/1.1 200 OKrnContent-Length: 14432rnrn") ((xNoEOFBytesIO)))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("HEAD"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        ((((xresp).xread)).apply).if
                          bogusForceDataize.write ((((xself).xfail)).apply ("Did not expect response from HEAD request"))
                xtest_readinto_head.write
                  [xself]
                    memory > xresp
                    memory > xb
                    memory > xsock
                    seq > @
                      seq
                        xsock.write (((xFakeSocket)).apply ("HTTP/1.1 200 OKrnContent-Length: 14432rnrn") ((xNoEOFBytesIO)))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("HEAD"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        xb.write (((xbytearray)).apply (5))
                        (((((xresp).xreadinto)).apply ((xb))).neq 0).if
                          bogusForceDataize.write ((((xself).xfail)).apply ("Did not expect response from HEAD request"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xb)))) (("x00".mul 5)))
                xtest_too_many_headers.write
                  [xself]
                    memory > xheaders
                    memory > xs
                    memory > xr
                    memory > xtext
                    seq > @
                      seq
                        xheaders.write (((("rn".xjoin)).apply ((((unsupported)).apply (("Header%d: foo".mod (xi))) ((xi)) ((((xrange)).apply ((((xclient).x_MAXHEADERS).add 1))))))).add "rn")
                        xtext.write ("HTTP/1.1 200 OKrn".add (xheaders))
                        xs.write (((xFakeSocket)).apply ((xtext)))
                        xr.write ((((xclient).xHTTPResponse)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertRaisesRegex)).apply (((xclient).xHTTPException)) ("got more than d+ headers") (((xr).xbegin)))
                xtest_send_file.write
                  [xself]
                    memory > xexpected
                    memory > xconn
                    memory > xsock
                    seq > @
                      seq
                        xexpected.write "GET /foo HTTP/1.1rnHost: example.comrnAccept-Encoding: identityrnTransfer-Encoding: chunkedrnrn"
                        (((unsupported)).apply ((((xopen)).apply ((x__file__)) ("rb"))) ((xbody)))
                          seq
                            xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                            xsock.write (((xFakeSocket)).apply ((xbody)))
                            (((unsupported)).apply (((xconn).xsock)) ((xsock)))
                            bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/foo") ((xbody)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xsock).xdata).xstartswith)).apply ((xexpected)))) (("%r != %r".mod (((unsupported)).apply ((((unsupported)).apply (((xsock).xdata)) ((((unsupported)).apply ((((xlen)).apply ((xexpected)))))))) ((xexpected))))))
                xtest_send.write
                  [xself]
                    memory > xexpected
                    memory > xconn
                    memory > xsock
                    seq > @
                      seq
                        xexpected.write "this is a test this is only a test"
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        xsock.write (((xFakeSocket)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xconn).xsock)) ((xsock)))
                        bogusForceDataize.write ((((xconn).xsend)).apply ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) (((xsock).xdata)))
                        (((unsupported)).apply (((xsock).xdata)) (""))
                        bogusForceDataize.write ((((xconn).xsend)).apply (((((xarray).xarray)).apply ("b") ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) (((xsock).xdata)))
                        (((unsupported)).apply (((xsock).xdata)) (""))
                        bogusForceDataize.write ((((xconn).xsend)).apply (((((xio).xBytesIO)).apply ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) (((xsock).xdata)))
                xtest_send_updating_file.write
                  [xself]
                    memory > xd
                    memory > xmode
                    memory > xconn
                    memory > xsock
                    memory > xread
                    memory > xexpected
                    memory > xdata
                    seq > @
                      seq
                        xdata.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ("data"))
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply ("data_two"))
                        (((unsupported)).apply (((xio).xTextIOBase)))
                          seq
                            xmode.write "r"
                            xd.write (((xdata)).apply)
                            xread.write
                              [xself xblocksize]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xnext)).apply (((xself).xd)))))
                        xexpected.write "data"
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        xsock.write (((xFakeSocket)).apply (""))
                        (((unsupported)).apply (((xconn).xsock)) ((xsock)))
                        bogusForceDataize.write ((((xconn).xsend)).apply ((((xUpdatingFile)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsock).xdata)) ((xexpected)))
                xtest_send_iter.write
                  [xself]
                    memory > xexpected
                    memory > xconn
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xexpected.write "GET /foo HTTP/1.1rnHost: example.comrnAccept-Encoding: identityrnContent-Length: 11rnrnonetwothree"
                        xbody.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ("one"))
                                (((unsupported)).apply ("two"))
                                (((unsupported)).apply ("three"))
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        xsock.write (((xFakeSocket)).apply (""))
                        (((unsupported)).apply (((xconn).xsock)) ((xsock)))
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/foo") ((((xbody)).apply)) ((((unsupported)).apply ("Content-Length") ("11"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsock).xdata)) ((xexpected)))
                xtest_blocksize_request.write
                  [xself]
                    memory > xexpected
                    memory > xconn
                    memory > xsock
                    memory > xbody
                    memory > xblocksize
                    seq > @
                      seq
                        unsupported
                        xblocksize.write 8
                        xconn.write (((unsupported)).apply (((xclient).xHTTPConnection)) ("example.com") ((xblocksize)))
                        xsock.write (((xFakeSocket)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xconn).xsock)) ((xsock)))
                        xexpected.write (("a".mul (xblocksize)).add "b")
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("PUT") ("/") (((((xio).xBytesIO)).apply ((xexpected)))) ((((unsupported)).apply ("Content-Length") ("9"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsock).xsendall_calls)) (3))
                        xbody.write (((unsupported)).apply ((((((xsock).xdata).xsplit)).apply ("rnrn") (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbody)) ((xexpected)))
                xtest_blocksize_send.write
                  [xself]
                    memory > xblocksize
                    memory > xexpected
                    memory > xconn
                    memory > xsock
                    seq > @
                      seq
                        unsupported
                        xblocksize.write 8
                        xconn.write (((unsupported)).apply (((xclient).xHTTPConnection)) ("example.com") ((xblocksize)))
                        xsock.write (((xFakeSocket)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xconn).xsock)) ((xsock)))
                        xexpected.write (("a".mul (xblocksize)).add "b")
                        bogusForceDataize.write ((((xconn).xsend)).apply (((((xio).xBytesIO)).apply ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsock).xsendall_calls)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsock).xdata)) ((xexpected)))
                xtest_send_type_error.write
                  [xself]
                    memory > xconn
                    seq > @
                      seq
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xconn).xrequest)).apply ("POST") ("test") ((xconn)))
                xtest_chunked.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xexpected_message
                    memory > xsock
                    seq > @
                      seq
                        xexpected.write (xchunked_expected)
                        xsock.write (((xFakeSocket)).apply ((((xchunked_start).add (xlast_chunk)).add (xchunked_end))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (1) (12))))
                          seq
                            xsock.write (((xFakeSocket)).apply ((((xchunked_start).add (xlast_chunk)).add (xchunked_end))))
                            xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                            bogusForceDataize.write ((((xresp).xbegin)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xresp).xread)).apply ((xn))).add ((((xresp).xread)).apply ((xn)))).add ((((xresp).xread)).apply))) ((xexpected)))
                            bogusForceDataize.write ((((xresp).xclose)).apply)
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ("") ("foorn"))))
                          seq
                            xsock.write (((xFakeSocket)).apply (((xchunked_start).add (xx))))
                            xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                            bogusForceDataize.write ((((xresp).xbegin)).apply)
                            (((unsupported)).apply (((xclient).xIncompleteRead)))
                              bogusForceDataize.write ((((xresp).xread)).apply)
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xi).xpartial)) ((xexpected)))
                                xexpected_message.write ("IncompleteRead(%d bytes read)".mod (((xlen)).apply ((xexpected))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xi)))) ((xexpected_message)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xi)))) ((xexpected_message)))
                              bogusForceDataize.write ((((xself).xfail)).apply ("IncompleteRead expected"))
                              bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_readinto_chunked.write
                  [xself]
                    memory > xexpected_message
                    memory > xexpected
                    memory > xsock
                    memory > xi
                    memory > xn
                    memory > xb
                    memory > xresp
                    memory > xnexpected
                    memory > xm
                    seq > @
                      seq
                        xexpected.write (xchunked_expected)
                        xnexpected.write (((xlen)).apply ((xexpected)))
                        xb.write (((xbytearray)).apply (128))
                        xsock.write (((xFakeSocket)).apply ((((xchunked_start).add (xlast_chunk)).add (xchunked_end))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((xnexpected)))))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) ((xnexpected)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (1) (12))))
                          seq
                            xsock.write (((xFakeSocket)).apply ((((xchunked_start).add (xlast_chunk)).add (xchunked_end))))
                            xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                            bogusForceDataize.write ((((xresp).xbegin)).apply)
                            xm.write (((xmemoryview)).apply ((xb)))
                            xi.write ((((xresp).xreadinto)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) ((xn)))))))
                            (((unsupported)).apply ((xi)) (((((xresp).xreadinto)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply ((xi)) (((xn).add (xi))))))))))
                            (((unsupported)).apply ((xi)) (((((xresp).xreadinto)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply ((xi)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb)) ((((unsupported)).apply ((xnexpected)))))) ((xexpected)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xi)) ((xnexpected)))
                            bogusForceDataize.write ((((xresp).xclose)).apply)
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ("") ("foorn"))))
                          seq
                            xsock.write (((xFakeSocket)).apply (((xchunked_start).add (xx))))
                            xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                            bogusForceDataize.write ((((xresp).xbegin)).apply)
                            (((unsupported)).apply (((xclient).xIncompleteRead)))
                              xn.write ((((xresp).xreadinto)).apply ((xb)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((xi).xpartial)) ((xexpected)))
                                xexpected_message.write ("IncompleteRead(%d bytes read)".mod (((xlen)).apply ((xexpected))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xi)))) ((xexpected_message)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xi)))) ((xexpected_message)))
                              bogusForceDataize.write ((((xself).xfail)).apply ("IncompleteRead expected"))
                              bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_chunked_head.write
                  [xself]
                    memory > xresp
                    memory > xchunked_start
                    memory > xsock
                    seq > @
                      seq
                        xchunked_start.write "HTTP/1.1 200 OKrnTransfer-Encoding: chunkedrnrnarnhello worldrn1rndrn"
                        xsock.write (((xFakeSocket)).apply ((((xchunked_start).add (xlast_chunk)).add (xchunked_end))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("HEAD"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresp).xstatus)) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresp).xreason)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresp).xclosed)))
                xtest_readinto_chunked_head.write
                  [xself]
                    memory > xchunked_start
                    memory > xsock
                    memory > xn
                    memory > xb
                    memory > xresp
                    seq > @
                      seq
                        xchunked_start.write "HTTP/1.1 200 OKrnTransfer-Encoding: chunkedrnrnarnhello worldrn1rndrn"
                        xsock.write (((xFakeSocket)).apply ((((xchunked_start).add (xlast_chunk)).add (xchunked_end))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("HEAD"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        xb.write (((xbytearray)).apply (5))
                        xn.write ((((xresp).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xb)))) (("x00".mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresp).xstatus)) (200))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresp).xreason)) ("OK"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresp).xclosed)))
                xtest_negative_content_length.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    seq > @
                      seq
                        xsock.write (((xFakeSocket)).apply ("HTTP/1.1 200 OKrnContent-Length: -1rnrnHellorn"))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ("Hellorn"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                xtest_incomplete_read.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    seq > @
                      seq
                        xsock.write (((xFakeSocket)).apply ("HTTP/1.1 200 OKrnContent-Length: 10rnrnHellorn"))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        (((unsupported)).apply (((xclient).xIncompleteRead)))
                          bogusForceDataize.write ((((xresp).xread)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xi).xpartial)) ("Hellorn"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xi)))) ("IncompleteRead(7 bytes read, 3 more expected)"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xi)))) ("IncompleteRead(7 bytes read, 3 more expected)"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("IncompleteRead expected"))
                xtest_epipe.write
                  [xself]
                    memory > xconn
                    memory > xresp
                    memory > xsock
                    seq > @
                      seq
                        xsock.write (((xEPipeSocket)).apply ("HTTP/1.0 401 Authorization RequiredrnContent-type: text/htmlrnWWW-Authenticate: Basic realm=\"example\"rn") ("Content-Length"))
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((xsock)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) ((((unsupported)).apply (((((xconn).xrequest)).apply ("PUT") ("/url") ("body"))))))
                        xresp.write ((((xconn).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (401) (((xresp).xstatus)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Basic realm=\"example\"") (((((xresp).xgetheader)).apply ("www-authenticate"))))
                xtest_overflowing_status_line.write
                  [xself]
                    memory > xresp
                    memory > xbody
                    seq > @
                      seq
                        xbody.write (("HTTP/1.1 200 Ok".add ("k".mul 65536)).add "rn")
                        xresp.write ((((xclient).xHTTPResponse)).apply ((((xFakeSocket)).apply ((xbody)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply (((xclient).xLineTooLong)) (((xclient).xBadStatusLine)))) (((xresp).xbegin)))
                xtest_overflowing_header_line.write
                  [xself]
                    memory > xresp
                    memory > xbody
                    seq > @
                      seq
                        xbody.write (("HTTP/1.1 200 OKrnX-Foo: bar".add ("r".mul 65536)).add "rnrn")
                        xresp.write ((((xclient).xHTTPResponse)).apply ((((xFakeSocket)).apply ((xbody)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xclient).xLineTooLong)) (((xresp).xbegin)))
                xtest_overflowing_chunked_line.write
                  [xself]
                    memory > xresp
                    memory > xbody
                    seq > @
                      seq
                        xbody.write (("HTTP/1.1 200 OKrnTransfer-Encoding: chunkedrnrn".add ("0".mul 65536)).add "arnhello worldrn0rnrn")
                        xresp.write ((((xclient).xHTTPResponse)).apply ((((xFakeSocket)).apply ((xbody)))))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xclient).xLineTooLong)) (((xresp).xread)))
                xtest_early_eof.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write "HTTP/1.1 200 Ok"
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        xresp.write ((((xclient).xHTTPResponse)).apply ((xsock)))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) (""))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xresp).xisclosed)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xresp).xclosed)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresp).xclosed)))
                xtest_error_leak.write
                  [xself]
                    memory > xconn
                    memory > xresponse
                    memory > x__init__
                    seq > @
                      seq
                        xconn.write ((((xclient).xHTTPConnection)).apply ("example.com"))
                        xresponse.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply (((xclient).xHTTPResponse)))
                          x__init__.write
                            [xself]
                              memory > xresponse
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply)
                                  xresponse.write (xself)
                                  bogusForceDataize.write (((((xclient).xHTTPResponse).x__init__)).apply ((xself)) ((((unsupported)).apply ((xpos)))) ((((unsupported)).apply ((xkw)))))
                        (((unsupported)).apply (((xconn).xresponse_class)) ((xResponse)))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply ("Invalid status line"))))
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xclient).xBadStatusLine)) (((xconn).xgetresponse)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xresponse).xclosed)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xconn).xsock).xfile_closed)))
                xtest_chunked_extension.write
                  [xself]
                    memory > xexpected
                    memory > xextra
                    memory > xresp
                    memory > xsock
                    seq > @
                      seq
                        xextra.write ("3;foo=barrn".add "abcrn")
                        xexpected.write ((xchunked_expected).add "abc")
                        xsock.write (((xFakeSocket)).apply (((((xchunked_start).add (xextra)).add (xlast_chunk_extended)).add (xchunked_end))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_chunked_missing_end.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xsock
                    seq > @
                      seq
                        unsupported
                        xexpected.write (xchunked_expected)
                        xsock.write (((xFakeSocket)).apply (((xchunked_start).add (xlast_chunk))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_chunked_trailers.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xsock
                    seq > @
                      seq
                        unsupported
                        xexpected.write (xchunked_expected)
                        xsock.write (((xFakeSocket)).apply (((((xchunked_start).add (xlast_chunk)).add (xtrailers)).add (xchunked_end))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsock).xfile).xread)).apply)) (""))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_chunked_sync.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xextradata
                    memory > xsock
                    seq > @
                      seq
                        unsupported
                        xexpected.write (xchunked_expected)
                        xextradata.write "extradata"
                        xsock.write (((xFakeSocket)).apply ((((((xchunked_start).add (xlast_chunk)).add (xtrailers)).add (xchunked_end)).add (xextradata))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsock).xfile).xread)).apply)) (((((xextradata).xencode)).apply ("ascii"))))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_content_length_sync.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xextradata
                    memory > xsock
                    seq > @
                      seq
                        unsupported
                        xextradata.write "extradata"
                        xexpected.write "Hello123rn"
                        xsock.write (((xFakeSocket)).apply ((("HTTP/1.1 200 OKrnContent-Length: 10rnrn".add (xexpected)).add (xextradata))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsock).xfile).xread)).apply)) ((xextradata)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_readlines_content_length.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xextradata
                    memory > xsock
                    seq > @
                      seq
                        xextradata.write "extradata"
                        xexpected.write "Hello123rn"
                        xsock.write (((xFakeSocket)).apply ((("HTTP/1.1 200 OKrnContent-Length: 10rnrn".add (xexpected)).add (xextradata))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xreadlines)).apply (2000))) ((((unsupported)).apply ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsock).xfile).xread)).apply)) ((xextradata)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_read1_content_length.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xextradata
                    memory > xsock
                    seq > @
                      seq
                        xextradata.write "extradata"
                        xexpected.write "Hello123rn"
                        xsock.write (((xFakeSocket)).apply ((("HTTP/1.1 200 OKrnContent-Length: 10rnrn".add (xexpected)).add (xextradata))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread1)).apply (2000))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsock).xfile).xread)).apply)) ((xextradata)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_readline_bound_content_length.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xextradata
                    memory > xsock
                    seq > @
                      seq
                        xextradata.write "extradata"
                        xexpected.write "Hello123rn"
                        xsock.write (((xFakeSocket)).apply ((("HTTP/1.1 200 OKrnContent-Length: 10rnrn".add (xexpected)).add (xextradata))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xreadline)).apply (10))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xreadline)).apply (10))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsock).xfile).xread)).apply)) ((xextradata)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_read1_bound_content_length.write
                  [xself]
                    memory > xexpected
                    memory > xresp
                    memory > xextradata
                    memory > xsock
                    seq > @
                      seq
                        xextradata.write "extradata"
                        xexpected.write "Hello123rn"
                        xsock.write (((xFakeSocket)).apply ((("HTTP/1.1 200 OKrnContent-Length: 30rnrn".add ((xexpected).mul 3)).add (xextradata))))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread1)).apply (20))) (((xexpected).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresp).xread)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsock).xfile).xread)).apply)) ((xextradata)))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_response_fileno.write
                  [xself]
                    memory > xconn
                    memory > xs
                    memory > xresult
                    memory > xthread
                    memory > xrun_server
                    memory > xserv
                    memory > xresponse
                    seq > @
                      seq
                        xserv.write ((((xsocket).xcreate_server)).apply ((((unsupported)).apply ((xHOST)) (0))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xserv).xclose)))
                        xresult.write "None: is there a None literal in the EO language?"
                        xrun_server.write
                          []
                            memory > xresult
                            memory > xline
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xconn)) ((xaddress)))) (((((xserv).xaccept)).apply)))
                                (((unsupported)).apply ((xconn)) (((((xconn).xmakefile)).apply ("rb"))) ((xreader)))
                                  seq
                                    while.
                                      TRUE
                                      [unused]
                                        seq > @
                                          seq
                                            xline.write ((((xreader).xreadline)).apply)
                                            (((((xline).xrstrip)).apply ("rn")).not).if
                                              (((unsupported)).apply)
                                    bogusForceDataize.write ((((xconn).xsendall)).apply ("HTTP/1.1 200 Connection establishedrnrn"))
                                    (((unsupported)).apply)
                                    xresult.write ((((xreader).xread)).apply)
                        xthread.write (((unsupported)).apply (((xthreading).xThread)) ((xrun_server)))
                        bogusForceDataize.write ((((xthread).xstart)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xthread).xjoin)) ((((xfloat)).apply (1))))
                        xconn.write ((((xclient).xHTTPConnection)).apply ((((unsupported)).apply (((((xserv).xgetsockname)).apply)))))
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("CONNECT") ("dummy:1234"))
                        xresponse.write ((((xconn).xgetresponse)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus)) (((xclient).xOK)))
                            xs.write (((unsupported)).apply (((xsocket).xsocket)) (((((xresponse).xfileno)).apply)))
                            (((unsupported)).apply)
                              bogusForceDataize.write ((((xs).xsendall)).apply ("proxied datan"))
                              bogusForceDataize.write ((((xs).xdetach)).apply)
                          seq
                            bogusForceDataize.write ((((xresponse).xclose)).apply)
                            bogusForceDataize.write ((((xconn).xclose)).apply)
                        bogusForceDataize.write ((((xthread).xjoin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ("proxied datan"))
                xtest_putrequest_override_domain_validation.write
                  [xself]
                    memory > xconn
                    memory > x_validate_path
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xclient).xHTTPConnection)))
                          x_validate_path.write
                            [xself xurl]
                              seq > @
                        xconn.write (((xUnsafeHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        bogusForceDataize.write ((((xconn).xputrequest)).apply ("GET") ("/x00"))
                xtest_putrequest_override_host_validation.write
                  [xself]
                    memory > x_validate_host
                    memory > xconn
                    seq > @
                      seq
                        (((unsupported)).apply (((xclient).xHTTPConnection)))
                          x_validate_host.write
                            [xself xurl]
                              seq > @
                        xconn.write (((xUnsafeHTTPConnection)).apply ("example.comrn"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        (((unsupported)).apply (((xconn).xputrequest)) ("GET") ("/") (1))
                xtest_putrequest_override_encoding.write
                  [xself]
                    memory > xconn
                    memory > x_encode_request
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xclient).xHTTPConnection)))
                          x_encode_request.write
                            [xself xstr_url]
                              seq > @
                                (((unsupported)).apply (((((xstr_url).xencode)).apply ("utf-8"))))
                        xconn.write (((xUnsafeHTTPConnection)).apply ("example.com"))
                        (((unsupported)).apply (((xconn).xsock)) ((((xFakeSocket)).apply (""))))
                        bogusForceDataize.write ((((xconn).xputrequest)).apply ("GET") ("/☃"))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xlines.write "HTTP/1.1 200 OKrnrnhello world!nand now nfor something completely differentnfoo"
                xlines_expected.write ((((((unsupported)).apply ((xlines)) ((((unsupported)).apply (((((xlines).xfind)).apply ("hello")))))).xencode)).apply ("ascii"))
                xlines_chunked.write "HTTP/1.1 200 OKrnTransfer-Encoding: chunkedrnrnarnhello worlrn3rnd!nrn9rnand now nrn23rnfor something completely differentnrn3rnfoorn0rnrn"
                xsetUp.write
                  [xself]
                    memory > xresp
                    memory > xsock
                    seq > @
                      seq
                        xsock.write (((xFakeSocket)).apply (((xself).xlines)))
                        xresp.write (((unsupported)).apply (((xclient).xHTTPResponse)) ((xsock)) ("GET"))
                        bogusForceDataize.write ((((xresp).xbegin)).apply)
                        (((unsupported)).apply (((xresp).xfp)) (((((xio).xBufferedReader)).apply (((xresp).xfp)))))
                        (((unsupported)).apply (((xself).xresp)) ((xresp)))
                xtest_peek.write
                  [xself]
                    memory > xall
                    memory > xp2
                    memory > xresp
                    memory > xp
                    memory > xmypeek
                    memory > xoldpeek
                    memory > xnext
                    seq > @
                      seq
                        xresp.write ((xself).xresp)
                        xoldpeek.write (((xresp).xfp).xpeek)
                        xmypeek.write
                          [xn]
                            memory > xp
                            seq > @
                              (((unsupported)).apply)
                                xp.write (((xoldpeek)).apply ((xn)))
                                ((xn).geq 0).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xp)) ((((unsupported)).apply ((xn)))))))
                                (((unsupported)).apply ((((unsupported)).apply ((xp)) ((((unsupported)).apply (10))))))
                        (((unsupported)).apply ((((xresp).xfp).xpeek)) ((xmypeek)))
                        xall.write (((unsupported)).apply)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xp.write ((((xresp).xpeek)).apply (3))
                                (xp).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply ((xp)))) (0))
                                    xp2.write ((((xresp).xpeek)).apply)
                                    bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xlen)).apply ((xp2)))) ((((xlen)).apply ((xp)))))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xp2).xstartswith)).apply ((xp)))))
                                    xnext.write ((((xresp).xread)).apply ((((xlen)).apply ((xp2)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnext)) ((xp2)))
                                  seq
                                    xnext.write ((((xresp).xread)).apply)
                                    bogusForceDataize.write ((((xself).xassertFalse)).apply ((xnext)))
                                bogusForceDataize.write ((((xall).xappend)).apply ((xnext)))
                                ((xnext).not).if
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("".xjoin)).apply ((xall)))) (((xself).xlines_expected)))
                xtest_readline.write
                  [xself]
                    memory > xresp
                    seq > @
                      seq
                        xresp.write ((xself).xresp)
                        bogusForceDataize.write ((((xself).x_verify_readline)).apply ((((xself).xresp).xreadline)) (((xself).xlines_expected)))
                x_verify_readline.write
                  [xself xreadline xexpected]
                    memory > xall
                    memory > xline
                    seq > @
                      seq
                        xall.write (((unsupported)).apply)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xline.write (((xreadline)).apply (5))
                                ((xline).and ((xline).neq "foo")).if
                                  ((((xlen)).apply ((xline))).less 5).if
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xline).xendswith)).apply ("n"))))
                                bogusForceDataize.write ((((xall).xappend)).apply ((xline)))
                                ((xline).not).if
                                  (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("".xjoin)).apply ((xall)))) ((xexpected)))
                xtest_read1.write
                  [xself]
                    memory > xresp
                    memory > xr
                    memory > xreadliner
                    seq > @
                      seq
                        xresp.write ((xself).xresp)
                        xr.write
                          []
                            memory > xres
                            seq > @
                              seq
                                xres.write ((((xresp).xread1)).apply (4))
                                bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((xlen)).apply ((xres)))) (4))
                                (((unsupported)).apply ((xres)))
                        xreadliner.write (((xReadliner)).apply ((xr)))
                        bogusForceDataize.write ((((xself).x_verify_readline)).apply (((xreadliner).xreadline)) (((xself).xlines_expected)))
                xtest_read1_unbounded.write
                  [xself]
                    memory > xall
                    memory > xresp
                    memory > xdata
                    seq > @
                      seq
                        xresp.write ((xself).xresp)
                        xall.write (((unsupported)).apply)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xdata.write ((((xresp).xread1)).apply)
                                ((xdata).not).if
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xall).xappend)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("".xjoin)).apply ((xall)))) (((xself).xlines_expected)))
                xtest_read1_bounded.write
                  [xself]
                    memory > xall
                    memory > xresp
                    memory > xdata
                    seq > @
                      seq
                        xresp.write ((xself).xresp)
                        xall.write (((unsupported)).apply)
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xdata.write ((((xresp).xread1)).apply (10))
                                ((xdata).not).if
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((xlen)).apply ((xdata)))) (10))
                                bogusForceDataize.write ((((xall).xappend)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((("".xjoin)).apply ((xall)))) (((xself).xlines_expected)))
                xtest_read1_0.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xresp).xread1)).apply (0))) (""))
                xtest_peek_0.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((((xself).xresp).xpeek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply (0) ((((xlen)).apply ((xp)))))
            (((unsupported)).apply ((xExtendedReadTest)))
              seq
                (((unsupported)).apply)
                xlines.write "HTTP/1.1 200 OKrnTransfer-Encoding: chunkedrnrnarnhello worlrn3rnd!nrn9rnand now nrn23rnfor something completely differentnrn3rnfoorn0rnrn"
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xreadfunc]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xreadfunc)) ((xreadfunc)))
                        (((unsupported)).apply (((xself).xremainder)) (""))
                xreadline.write
                  [xself xlimit]
                    memory > xidx
                    memory > xdatalen
                    memory > xdata
                    memory > xread
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply)
                        xdatalen.write 0
                        xread.write ((xself).xremainder)
                        (((unsupported)).apply)
                          seq
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    xidx.write ((((xread).xfind)).apply ("n"))
                                    ((xidx).neq (1.neg)).if
                                      (((unsupported)).apply)
                                    (((xdatalen).add (((xlen)).apply ((xread)))).geq (xlimit)).if
                                      xidx.write (((xlimit).sub (xdatalen)).sub 1)
                                    bogusForceDataize.write ((((xdata).xappend)).apply ((xread)))
                                    xread.write ((((xself).xreadfunc)).apply)
                                    ((xread).not).if
                                      seq
                                        xidx.write 0
                                        (((unsupported)).apply)
                            (((unsupported)).apply ((xidx)) (1))
                            bogusForceDataize.write ((((xdata).xappend)).apply ((((unsupported)).apply ((xread)) ((((unsupported)).apply ((xidx)))))))
                            (((unsupported)).apply (((xself).xremainder)) ((((unsupported)).apply ((xread)) ((((unsupported)).apply ((xidx)))))))
                            (((unsupported)).apply (((("".xjoin)).apply ((xdata)))))
                          seq
                            (((unsupported)).apply (((xself).xremainder)) (((("".xjoin)).apply ((xdata)))))
                            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_all.write
                  [xself]
                    memory > xexpected
                    memory > xmodule_object
                    memory > xblacklist
                    seq > @
                      seq
                        xexpected.write (((unsupported)).apply ("responses"))
                        xblacklist.write (((unsupported)).apply ("HTTPMessage") ("parse_headers"))
                        (((unsupported)).apply ((xname)) ((((xdir)).apply ((xclient)))))
                          seq
                            (((((xname).xstartswith)).apply ("_")).or (((unsupported)).apply ((xname)) ((xblacklist)))).if
                              (((unsupported)).apply)
                            xmodule_object.write (((xgetattr)).apply ((xclient)) ((xname)))
                            ((((xgetattr)).apply ((xmodule_object)) ("__module__") ("None: is there a None literal in the EO language?")).eq "http.client").if
                              bogusForceDataize.write ((((xexpected).xadd)).apply ((xname)))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((xclient).x__all__)) ((xexpected)))
                xtest_responses.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xclient).xresponses)) (((xclient).xNOT_FOUND)))) ("Not Found"))
                xtest_client_constants.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write (((unsupported)).apply ("CONTINUE") ("SWITCHING_PROTOCOLS") ("PROCESSING") ("OK") ("CREATED") ("ACCEPTED") ("NON_AUTHORITATIVE_INFORMATION") ("NO_CONTENT") ("RESET_CONTENT") ("PARTIAL_CONTENT") ("MULTI_STATUS") ("IM_USED") ("MULTIPLE_CHOICES") ("MOVED_PERMANENTLY") ("FOUND") ("SEE_OTHER") ("NOT_MODIFIED") ("USE_PROXY") ("TEMPORARY_REDIRECT") ("BAD_REQUEST") ("UNAUTHORIZED") ("PAYMENT_REQUIRED") ("FORBIDDEN") ("NOT_FOUND") ("METHOD_NOT_ALLOWED") ("NOT_ACCEPTABLE") ("PROXY_AUTHENTICATION_REQUIRED") ("REQUEST_TIMEOUT") ("CONFLICT") ("GONE") ("LENGTH_REQUIRED") ("PRECONDITION_FAILED") ("REQUEST_ENTITY_TOO_LARGE") ("REQUEST_URI_TOO_LONG") ("UNSUPPORTED_MEDIA_TYPE") ("REQUESTED_RANGE_NOT_SATISFIABLE") ("EXPECTATION_FAILED") ("MISDIRECTED_REQUEST") ("UNPROCESSABLE_ENTITY") ("LOCKED") ("FAILED_DEPENDENCY") ("UPGRADE_REQUIRED") ("PRECONDITION_REQUIRED") ("TOO_MANY_REQUESTS") ("REQUEST_HEADER_FIELDS_TOO_LARGE") ("UNAVAILABLE_FOR_LEGAL_REASONS") ("INTERNAL_SERVER_ERROR") ("NOT_IMPLEMENTED") ("BAD_GATEWAY") ("SERVICE_UNAVAILABLE") ("GATEWAY_TIMEOUT") ("HTTP_VERSION_NOT_SUPPORTED") ("INSUFFICIENT_STORAGE") ("NOT_EXTENDED") ("NETWORK_AUTHENTICATION_REQUIRED"))
                        (((unsupported)).apply ((xconst)) ((xexpected)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xconst)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xclient)) ((xconst)))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xserv)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                        (((unsupported)).apply (((xself).xport)) (((((xsupport).xbind_port)).apply (((xself).xserv)))))
                        (((unsupported)).apply (((xself).xsource_port)) (((((xsupport).xfind_unused_port)).apply)))
                        bogusForceDataize.write (((((xself).xserv).xlisten)).apply)
                        (((unsupported)).apply (((xself).xconn)) ("None: is there a None literal in the EO language?"))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        ((xself).xconn).if
                          seq
                            bogusForceDataize.write (((((xself).xconn).xclose)).apply)
                            (((unsupported)).apply (((xself).xconn)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xself).xserv).xclose)).apply)
                        (((unsupported)).apply (((xself).xserv)) ("None: is there a None literal in the EO language?"))
                xtestHTTPConnectionSourceAddress.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xconn)) ((((unsupported)).apply (((xclient).xHTTPConnection)) ((xHOST)) (((xself).xport)) ((((unsupported)).apply ("") (((xself).xsource_port)))))))
                        bogusForceDataize.write (((((xself).xconn).xconnect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((((xself).xconn).xsock).xgetsockname)).apply)) (1))) (((xself).xsource_port)))
                xtestHTTPSConnectionSourceAddress.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xconn)) ((((unsupported)).apply (((xclient).xHTTPSConnection)) ((xHOST)) (((xself).xport)) ((((unsupported)).apply ("") (((xself).xsource_port)))))))
            (((unsupported)).apply ((xTestCase)))
              seq
                xPORT.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xserv)) (((((xsocket).xsocket)).apply (((xsocket).xAF_INET)) (((xsocket).xSOCK_STREAM)))))
                        (((unsupported)).apply (((xTimeoutTest).xPORT)) (((((xsupport).xbind_port)).apply (((xself).xserv)))))
                        bogusForceDataize.write (((((xself).xserv).xlisten)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserv).xclose)).apply)
                        (((unsupported)).apply (((xself).xserv)) ("None: is there a None literal in the EO language?"))
                xtestTimeoutAttribute.write
                  [xself]
                    memory > xhttpConn
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (30))
                        (((unsupported)).apply)
                          seq
                            xhttpConn.write ((((xclient).xHTTPConnection)).apply ((xHOST)) (((xTimeoutTest).xPORT)))
                            bogusForceDataize.write ((((xhttpConn).xconnect)).apply)
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xhttpConn).xsock).xgettimeout)).apply)) (30))
                        bogusForceDataize.write ((((xhttpConn).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xsocket).xgetdefaulttimeout)).apply)))
                        bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply (30))
                        (((unsupported)).apply)
                          seq
                            xhttpConn.write (((unsupported)).apply (((xclient).xHTTPConnection)) ((xHOST)) (((xTimeoutTest).xPORT)) ("None: is there a None literal in the EO language?"))
                            bogusForceDataize.write ((((xhttpConn).xconnect)).apply)
                          bogusForceDataize.write ((((xsocket).xsetdefaulttimeout)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xhttpConn).xsock).xgettimeout)).apply)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xhttpConn).xclose)).apply)
                        xhttpConn.write (((unsupported)).apply (((xclient).xHTTPConnection)) ((xHOST)) (((xTimeoutTest).xPORT)) (30))
                        bogusForceDataize.write ((((xhttpConn).xconnect)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xhttpConn).xsock).xgettimeout)).apply)) (30))
                        bogusForceDataize.write ((((xhttpConn).xclose)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_reuse_reconnect.write
                  [xself]
                    memory > xconn
                    memory > xtests
                    memory > xmsg
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("1.0") ("") (FALSE))) ((((unsupported)).apply ("1.0") ("Connection: keep-alivern") (TRUE))) ((((unsupported)).apply ("1.1") ("") (TRUE))) ((((unsupported)).apply ("1.1") ("Connection: closern") (FALSE))) ((((unsupported)).apply ("1.0") ("Connection: keep-ALIVErn") (TRUE))) ((((unsupported)).apply ("1.1") ("Connection: cloSErn") (FALSE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xversion)) ((xheader)) ((xreuse)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xversion)) ((xheader)))))
                            seq
                              xmsg.write ((("HTTP/{} 200 OKrn{}Content-Length: 12rnrnDummy bodyrn".xformat)).apply ((xversion)) ((xheader)))
                              xconn.write (((xFakeSocketHTTPConnection)).apply ((xmsg)))
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xconn).xsock)))
                              bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/open-connection"))
                              (((unsupported)).apply (((((xconn).xgetresponse)).apply)) ((xresponse)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xconn).xsock)) ("None: is there a None literal in the EO language?"))) (((xreuse).not)))
                                  bogusForceDataize.write ((((xresponse).xread)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xconn).xsock)) ("None: is there a None literal in the EO language?"))) (((xreuse).not)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xconn).xconnections)) (1))
                              bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/subsequent-request"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xconn).xconnections)) (((xreuse).if 1 2)))
                xtest_disconnected.write
                  [xself]
                    memory > xconn
                    memory > xtests
                    memory > xmake_reset_reader
                    seq > @
                      seq
                        xmake_reset_reader.write
                          [xtext]
                            memory > xstream
                            memory > xreadinto
                            seq > @
                              seq
                                unsupported
                                xstream.write ((((xio).xBytesIO)).apply ((xtext)))
                                xreadinto.write
                                  [xbuffer]
                                    memory > xsize
                                    seq > @
                                      seq
                                        xsize.write (((((xio).xBytesIO).xreadinto)).apply ((xstream)) ((xbuffer)))
                                        ((xsize).eq 0).if
                                          (((unsupported)).apply ((((xConnectionResetError)).apply)))
                                        (((unsupported)).apply ((xsize)))
                                (((unsupported)).apply (((xstream).xreadinto)) ((xreadinto)))
                                (((unsupported)).apply (((((xio).xBufferedReader)).apply ((xstream)))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply (((xio).xBytesIO)) (((xclient).xRemoteDisconnected)))) ((((unsupported)).apply ((xmake_reset_reader)) ((xConnectionResetError)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xstream_factory)) ((xexception)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xexception)))))
                            seq
                              xconn.write (((xFakeSocketHTTPConnection)).apply ("") ((xstream_factory)))
                              bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/eof-response"))
                              bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexception)) (((xconn).xgetresponse)))
                              bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xconn).xsock)))
                              bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/reconnect"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xconn).xconnections)) (2))
                xtest_100_close.write
                  [xself]
                    memory > xconn
                    seq > @
                      seq
                        xconn.write (((xFakeSocketHTTPConnection)).apply ("HTTP/1.1 100 Continuernrn"))
                        (((unsupported)).apply (((xconn).xrequest)) ("GET") ("/") ((((unsupported)).apply ("Expect") ("100-continue"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xclient).xRemoteDisconnected)) (((xconn).xgetresponse)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xconn).xsock)))
                        bogusForceDataize.write ((((xconn).xrequest)).apply ("GET") ("/reconnect"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xconn).xconnections)) (2))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      ((((xhasattr)).apply ((xclient)) ("HTTPSConnection")).not).if
                        bogusForceDataize.write ((((xself).xskipTest)).apply ("ssl support required"))
                xmake_server.write
                  [xself xcertfile]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmake_https_server)) ((xself)) ((xcertfile)))))
                xtest_attributes.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ((xHOST)) (((xTimeoutTest).xPORT)) (30))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xh).xtimeout)) (30))
                xtest_networked.write
                  [xself]
                    memory > xh
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xrequires)).apply ("network"))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ("self-signed.pythontest.net"))))
                          seq
                            xh.write ((((xclient).xHTTPSConnection)).apply ("self-signed.pythontest.net") (443))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xexc_info)))
                              bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexc_info).xexception).xreason)) ("CERTIFICATE_VERIFY_FAILED"))
                xtest_networked_noverification.write
                  [xself]
                    memory > xh
                    memory > xcontext
                    memory > xresp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xrequires)).apply ("network"))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ("self-signed.pythontest.net"))))
                          seq
                            xcontext.write ((((xssl).x_create_unverified_context)).apply)
                            xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("self-signed.pythontest.net") (443) ((xcontext)))
                            bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/"))
                            xresp.write ((((xh).xgetresponse)).apply)
                            bogusForceDataize.write ((((xh).xclose)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("nginx") (((((xresp).xgetheader)).apply ("server"))))
                            bogusForceDataize.write ((((xresp).xclose)).apply)
                xtest_networked_trusted_by_default_cert.write
                  [xself]
                    memory > xresp
                    memory > xh
                    memory > xcontent_type
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xrequires)).apply ("network"))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ("www.python.org"))))
                          seq
                            xh.write ((((xclient).xHTTPSConnection)).apply ("www.python.org") (443))
                            bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/"))
                            xresp.write ((((xh).xgetresponse)).apply)
                            xcontent_type.write ((((xresp).xgetheader)).apply ("content-type"))
                            bogusForceDataize.write ((((xresp).xclose)).apply)
                            bogusForceDataize.write ((((xh).xclose)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("text/html") ((xcontent_type)))
                xtest_networked_good_cert.write
                  [xself]
                    memory > xssl_err_str
                    memory > xcontext
                    memory > xselfsigned_pythontestdotnet
                    memory > xserver_string
                    memory > xh
                    memory > xresp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xrequires)).apply ("network"))
                        xselfsigned_pythontestdotnet.write "self-signed.pythontest.net"
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ((xselfsigned_pythontestdotnet)))))
                          seq
                            xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcontext).xverify_mode)) (((xssl).xCERT_REQUIRED)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xcontext).xcheck_hostname)) (TRUE))
                            bogusForceDataize.write ((((xcontext).xload_verify_locations)).apply ((xCERT_selfsigned_pythontestdotnet)))
                            (((unsupported)).apply (((xssl).xSSLError)))
                              seq
                                xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ((xselfsigned_pythontestdotnet)) (443) ((xcontext)))
                                bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/"))
                                xresp.write ((((xh).xgetresponse)).apply)
                              seq
                                xssl_err_str.write (((xstr)).apply ((xssl_err)))
                                ((((xre).xsearch)).apply ("(?i)key.too.weak") ((xssl_err_str))).if
                                  (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("Got {ssl_err_str} trying to connect to {selfsigned_pythontestdotnet}. See https://bugs.python.org/issue36816."))))
                                (((unsupported)).apply)
                            xserver_string.write ((((xresp).xgetheader)).apply ("server"))
                            bogusForceDataize.write ((((xresp).xclose)).apply)
                            bogusForceDataize.write ((((xh).xclose)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("nginx") ((xserver_string)))
                xtest_networked_bad_cert.write
                  [xself]
                    memory > xcontext
                    memory > xh
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xsupport).xrequires)).apply ("network"))
                        (((unsupported)).apply (((((xsupport).xtransient_internet)).apply ("self-signed.pythontest.net"))))
                          seq
                            xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                            bogusForceDataize.write ((((xcontext).xload_verify_locations)).apply ((xCERT_localhost)))
                            xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("self-signed.pythontest.net") (443) ((xcontext)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xexc_info)))
                              bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexc_info).xexception).xreason)) ("CERTIFICATE_VERIFY_FAILED"))
                xtest_local_unknown_cert.write
                  [xself]
                    memory > xserver
                    memory > xh
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xserver.write ((((xself).xmake_server)).apply ((xCERT_localhost)))
                        xh.write ((((xclient).xHTTPSConnection)).apply ("localhost") (((xserver).xport)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xSSLError)))) ((xexc_info)))
                          bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexc_info).xexception).xreason)) ("CERTIFICATE_VERIFY_FAILED"))
                xtest_local_good_hostname.write
                  [xself]
                    memory > xserver
                    memory > xh
                    memory > xcontext
                    memory > xresp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xserver.write ((((xself).xmake_server)).apply ((xCERT_localhost)))
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xcontext).xload_verify_locations)).apply ((xCERT_localhost)))
                        xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("localhost") (((xserver).xport)) ((xcontext)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xh).xclose)))
                        bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/nonexistent"))
                        xresp.write ((((xh).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xresp).xclose)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresp).xstatus)) (404))
                xtest_local_bad_hostname.write
                  [xself]
                    memory > xserver
                    memory > xh
                    memory > xcontext
                    memory > xresp
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xserver.write ((((xself).xmake_server)).apply ((xCERT_fakehostname)))
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xcontext).xload_verify_locations)).apply ((xCERT_fakehostname)))
                        xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("localhost") (((xserver).xport)) ((xcontext)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xCertificateError)))))
                          bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/"))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("localhost") (((xserver).xport)) ((xcontext)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xCertificateError)))))
                          bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/"))
                        (((unsupported)).apply (((xcontext).xcheck_hostname)) (FALSE))
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("localhost") (((xserver).xport)) ((xcontext)) (FALSE))
                        bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/nonexistent"))
                        xresp.write ((((xh).xgetresponse)).apply)
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xh).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresp).xstatus)) (404))
                        (((unsupported)).apply (((xcontext).xcheck_hostname)) (FALSE))
                        xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("localhost") (((xserver).xport)) ((xcontext)))
                        bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/nonexistent"))
                        xresp.write ((((xh).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresp).xstatus)) (404))
                        bogusForceDataize.write ((((xresp).xclose)).apply)
                        bogusForceDataize.write ((((xh).xclose)).apply)
                        (((unsupported)).apply (((((xsupport).xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("localhost") (((xserver).xport)) ((xcontext)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xssl).xCertificateError)))))
                          bogusForceDataize.write ((((xh).xrequest)).apply ("GET") ("/"))
                xtest_host_port.write
                  [xself]
                    memory > xc
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xhp)) ((((unsupported)).apply ("www.python.org:abc") ("user:password@www.python.org"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xclient).xInvalidURL)) (((xclient).xHTTPSConnection)) ((xhp)))
                        (((unsupported)).apply ((((unsupported)).apply ((xhp)) ((xh)) ((xp)))) ((((unsupported)).apply ((((unsupported)).apply ("[fe80::207:e9ff:fe9b]:8000") ("fe80::207:e9ff:fe9b") (8000))) ((((unsupported)).apply ("www.python.org:443") ("www.python.org") (443))) ((((unsupported)).apply ("www.python.org:") ("www.python.org") (443))) ((((unsupported)).apply ("www.python.org") ("www.python.org") (443))) ((((unsupported)).apply ("[fe80::207:e9ff:fe9b]") ("fe80::207:e9ff:fe9b") (443))) ((((unsupported)).apply ("[fe80::207:e9ff:fe9b]:") ("fe80::207:e9ff:fe9b") (443))))))
                          seq
                            xc.write ((((xclient).xHTTPSConnection)).apply ((xhp)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xh)) (((xc).xhost)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xp)) (((xc).xport)))
                xtest_tls13_pha.write
                  [xself]
                    memory > xcontext
                    memory > xh
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xssl).xHAS_TLSv1_3).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("TLS 1.3 support required"))
                        xh.write ((((xclient).xHTTPSConnection)).apply ("localhost") (443))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xh).x_context).xpost_handshake_auth)))
                        xcontext.write ((((xssl).xSSLContext)).apply (((xssl).xPROTOCOL_TLS_CLIENT)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xcontext).xpost_handshake_auth)))
                        xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("localhost") (443) ((xcontext)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xh).x_context)) ((xcontext)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xh).x_context).xpost_handshake_auth)))
                        (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xfilterwarnings)).apply ("ignore") ("key_file, cert_file and check_hostname are deprecated") ((xDeprecationWarning)))
                            xh.write (((unsupported)).apply (((xclient).xHTTPSConnection)) ("localhost") (443) ((xcontext)) ((xCERT_localhost)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xh).x_context).xpost_handshake_auth)))
            (((unsupported)).apply ((xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xconn)) (((((xclient).xHTTPConnection)).apply ("example.com"))))
                        (((unsupported)).apply ((((xself).xconn).xsock)) (((xself).xsock)) ((((xFakeSocket)).apply (""))))
                        (((unsupported)).apply ((((xself).xconn).xsock)) (((xself).xsock)))
                xget_headers_and_fp.write
                  [xself]
                    memory > xmessage
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xio).xBytesIO)).apply ((((xself).xsock).xdata)))
                        bogusForceDataize.write ((((xf).xreadline)).apply)
                        xmessage.write ((((xclient).xparse_headers)).apply ((xf)))
                        (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ((xf)))))
                xtest_list_body.write
                  [xself]
                    memory > xcases
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ("3rnfoorn3rnbarrn0rnrn"))) ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ("3rnfoorn3rnbarrn0rnrn"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xbody)) ((xexpected)))) ((xcases)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xbody)))))
                            seq
                              (((unsupported)).apply (((xself).xconn)) (((((xclient).xHTTPConnection)).apply ("example.com"))))
                              (((unsupported)).apply ((((xself).xconn).xsock)) (((xself).xsock)) ((((xFakeSocket)).apply (""))))
                              bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("PUT") ("/url") ((xbody)))
                              (((unsupported)).apply ((((unsupported)).apply ((xmsg)) ((xf)))) (((((xself).xget_headers_and_fp)).apply)))
                              bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Content-Type") ((xmsg)))
                              bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Content-Length") ((xmsg)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmsg).xget)).apply ("Transfer-Encoding"))) ("chunked"))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) (((((xf).xread)).apply)))
                xtest_manual_content_length.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("PUT") ("/url") ("body") ((((unsupported)).apply ("Content-Length") ("42"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ((xf)))) (((((xself).xget_headers_and_fp)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("42") (((((xmessage).xget)).apply ("content-length"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (4) ((((xlen)).apply (((((xf).xread)).apply)))))
                xtest_ascii_body.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("PUT") ("/url") ("body"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ((xf)))) (((((xself).xget_headers_and_fp)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("text/plain") (((((xmessage).xget_content_type)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xmessage).xget_charset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("4") (((((xmessage).xget)).apply ("content-length"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("body") (((((xf).xread)).apply)))
                xtest_latin1_body.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("PUT") ("/url") ("bodyxc1"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ((xf)))) (((((xself).xget_headers_and_fp)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("text/plain") (((((xmessage).xget_content_type)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xmessage).xget_charset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("5") (((((xmessage).xget)).apply ("content-length"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("bodyxc1") (((((xf).xread)).apply)))
                xtest_bytes_body.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("PUT") ("/url") ("bodyxc1"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ((xf)))) (((((xself).xget_headers_and_fp)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("text/plain") (((((xmessage).xget_content_type)).apply)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xmessage).xget_charset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("5") (((((xmessage).xget)).apply ("content-length"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("bodyxc1") (((((xf).xread)).apply)))
                xtest_text_file_body.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("w"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("body"))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)))) ((xf)))
                          seq
                            bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("PUT") ("/url") ((xf)))
                            (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ((xf)))) (((((xself).xget_headers_and_fp)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("text/plain") (((((xmessage).xget_content_type)).apply)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xmessage).xget_charset)).apply)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xmessage).xget)).apply ("content-length"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("chunked") (((((xmessage).xget)).apply ("transfer-encoding"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("4rnbodyrn0rnrn") (((((xf).xread)).apply)))
                xtest_binary_file_body.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("bodyxc1"))
                        (((unsupported)).apply ((((xopen)).apply (((xsupport).xTESTFN)) ("rb"))) ((xf)))
                          seq
                            bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("PUT") ("/url") ((xf)))
                            (((unsupported)).apply ((((unsupported)).apply ((xmessage)) ((xf)))) (((((xself).xget_headers_and_fp)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("text/plain") (((((xmessage).xget_content_type)).apply)))
                            bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((xmessage).xget_charset)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("chunked") (((((xmessage).xget)).apply ("Transfer-Encoding"))))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Content-Length") ((xmessage)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("5rnbodyxc1rn0rnrn") (((((xf).xread)).apply)))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xsock
                    memory > xbody
                    seq > @
                      seq
                        xbody.write (((unsupported)).apply)
                        xsock.write (((xFakeSocket)).apply ((xbody)))
                        (((unsupported)).apply (((xself).xresp)) (((((xclient).xHTTPResponse)).apply ((xsock)))))
                        bogusForceDataize.write (((((xself).xresp).xbegin)).apply)
                xtest_getting_header.write
                  [xself]
                    memory > xheader
                    seq > @
                      seq
                        xheader.write (((((xself).xresp).xgetheader)).apply ("My-Header"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xheader)) ("first-value, second-value"))
                        xheader.write (((((xself).xresp).xgetheader)).apply ("My-Header") ("some default"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xheader)) ("first-value, second-value"))
                xtest_getting_nonexistent_header_with_string_default.write
                  [xself]
                    memory > xheader
                    seq > @
                      seq
                        xheader.write (((((xself).xresp).xgetheader)).apply ("No-Such-Header") ("default-value"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xheader)) ("default-value"))
                xtest_getting_nonexistent_header_with_iterable_default.write
                  [xself]
                    memory > xheader
                    seq > @
                      seq
                        xheader.write (((((xself).xresp).xgetheader)).apply ("No-Such-Header") ((((unsupported)).apply ("default") ("values"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xheader)) ("default, values"))
                        xheader.write (((((xself).xresp).xgetheader)).apply ("No-Such-Header") ((((unsupported)).apply ("default") ("values"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xheader)) ("default, values"))
                xtest_getting_nonexistent_header_without_default.write
                  [xself]
                    memory > xheader
                    seq > @
                      seq
                        xheader.write (((((xself).xresp).xgetheader)).apply ("No-Such-Header"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xheader)) ("None: is there a None literal in the EO language?"))
                xtest_getting_header_defaultint.write
                  [xself]
                    memory > xheader
                    seq > @
                      seq
                        xheader.write (((unsupported)).apply ((((xself).xresp).xgetheader)) ("No-Such-Header") (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xheader)) (42))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xresponse_text
                    seq > @
                      seq
                        xresponse_text.write "HTTP/1.0 200 OKrnrnHTTP/1.1 200 OKrnContent-Length: 42rnrn"
                        (((unsupported)).apply (((xself).xhost)) ("proxy.com"))
                        (((unsupported)).apply (((xself).xconn)) (((((xclient).xHTTPConnection)).apply (((xself).xhost)))))
                        (((unsupported)).apply ((((xself).xconn).x_create_connection)) (((((xself).x_create_connection)).apply ((xresponse_text)))))
                xtearDown.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((((xself).xconn).xclose)).apply)
                x_create_connection.write
                  [xself xresponse_text]
                    memory > xcreate_connection
                    seq > @
                      seq
                        xcreate_connection.write
                          [xaddress xtimeout xsource_address]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xFakeSocket)) ((xresponse_text)) ((((unsupported)).apply ((xaddress)) (0))) ((((unsupported)).apply ((xaddress)) (1))))))
                        (((unsupported)).apply ((xcreate_connection)))
                xtest_set_tunnel_host_port_headers.write
                  [xself]
                    memory > xtunnel_port
                    memory > xtunnel_host
                    memory > xtunnel_headers
                    seq > @
                      seq
                        xtunnel_host.write "destination.com"
                        xtunnel_port.write 8888
                        xtunnel_headers.write (((unsupported)).apply ("User-Agent") ("Mozilla/5.0 (compatible, MSIE 11)"))
                        (((unsupported)).apply ((((xself).xconn).xset_tunnel)) ((xtunnel_host)) ((xtunnel_port)) ((xtunnel_headers)))
                        bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("HEAD") ("/") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xconn).xsock).xhost)) (((xself).xhost)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xconn).xsock).xport)) (((xclient).xHTTP_PORT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xconn).x_tunnel_host)) ((xtunnel_host)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xconn).x_tunnel_port)) ((xtunnel_port)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xconn).x_tunnel_headers)) ((xtunnel_headers)))
                xtest_disallow_set_tunnel_after_connect.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xconn).xconnect)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((((xself).xconn).xset_tunnel)) ("destination.com"))
                xtest_connect_with_tunnel.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xconn).xset_tunnel)).apply ("destination.com"))
                        bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("HEAD") ("/") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xconn).xsock).xhost)) (((xself).xhost)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xconn).xsock).xport)) (((xclient).xHTTP_PORT)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("CONNECT destination.com") (((((xself).xconn).xsock).xdata)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Host: destination.com:None") (((((xself).xconn).xsock).xdata)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Host: destination.com") (((((xself).xconn).xsock).xdata)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Host: proxy.com") (((((xself).xconn).xsock).xdata)))
                xtest_connect_put_request.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xconn).xset_tunnel)).apply ("destination.com"))
                        bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("PUT") ("/") (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xconn).xsock).xhost)) (((xself).xhost)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xconn).xsock).xport)) (((xclient).xHTTP_PORT)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("CONNECT destination.com") (((((xself).xconn).xsock).xdata)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Host: destination.com") (((((xself).xconn).xsock).xdata)))
                xtest_tunnel_debuglog.write
                  [xself]
                    memory > xexpected_header
                    memory > xlines
                    memory > xresponse_text
                    seq > @
                      seq
                        xexpected_header.write "X-Dummy: 1"
                        xresponse_text.write ((("HTTP/1.0 200 OKrn{}rnrn".xformat)).apply ((xexpected_header)))
                        bogusForceDataize.write (((((xself).xconn).xset_debuglevel)).apply (1))
                        (((unsupported)).apply ((((xself).xconn).x_create_connection)) (((((xself).x_create_connection)).apply ((xresponse_text)))))
                        bogusForceDataize.write (((((xself).xconn).xset_tunnel)).apply ("destination.com"))
                        (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xoutput)))
                          bogusForceDataize.write (((((xself).xconn).xrequest)).apply ("PUT") ("/") (""))
                        xlines.write (((((((xoutput).xgetvalue)).apply).xsplitlines)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((("header: {}".xformat)).apply ((xexpected_header)))) ((xlines)))
            ((x__name__).eq "__main__").if
              (((unsupported)).apply (((xunittest).xmain)) (2))