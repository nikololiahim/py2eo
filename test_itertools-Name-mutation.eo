memory > xd
memory > xcm
memory > xk
memory > xthreading
memory > xSubclassWithKwargsTest
memory > xcopy
memory > xgroupby
memory > xindices
memory > xmin
memory > xcomplex
memory > xTestVariousIteratorArgs
memory > xzip_longest
memory > xRepeater
memory > xstep
memory > xc
memory > xcount
memory > xig
memory > xunused
memory > xall
memory > xpickle
memory > xlist
memory > xRuntimeError
memory > xrepeat
memory > xcombinations_with_replacement
memory > xenumerate
memory > xlocals
memory > xRegressionTests
memory > xSubclass
memory > xelement
memory > xTestPurePythonRoughEquivalents
memory > xK
memory > xValueError
memory > xsb
memory > xstr
memory > xforward
memory > xpool
memory > xq
memory > xIntLike
memory > xg
memory > xproduct
memory > xAssertionError
memory > xresult1
memory > xt
memory > xcombinations
memory > xpermutations
memory > xpair
memory > xrange
memory > xS
memory > xaccumulate
memory > xb
memory > xG
memory > xvalue
memory > xZeroDivisionError
memory > xstop
memory > xT
memory > xg3
memory > xeval
memory > x_
memory > xt2
memory > xStopIteration
memory > xMemoryError
memory > xik
memory > xcycle
memory > xstart
memory > xproto
memory > xmax
memory > xDummyCmp
memory > xerr
memory > xrandom
memory > xp
memory > xfilterfalse
memory > xdropwhile
memory > xresult2
memory > xit1
memory > xreversed
memory > xprint
memory > xany
memory > xtype
memory > xf
memory > xFraction
memory > xstarmap
memory > xset
memory > xrepr
memory > xint
memory > xit
memory > xException
memory > xr
memory > xBadIterable
memory > xX
memory > xhasattr
memory > xOverflowError
memory > xbackward
memory > xtee
memory > xx
memory > xI
memory > xExpectedError
memory > xi
memory > xstmt
memory > xoperator
memory > xstruct
memory > xarg
memory > xTestExamples
memory > xSizeofTest
memory > xchain
memory > xs
memory > xsupport
memory > xsys
memory > xkwds
memory > xbool
memory > xglobals
memory > xtuple
memory > xoper
memory > xsorted
memory > xTestGC
memory > xfloat
memory > xLengthTransparency
memory > xchr
memory > xIg
memory > xcls
memory > xgc
memory > xargs
memory > xg2
memory > xtakewhile
memory > xslice
memory > xweakref
memory > xpow
memory > xval
memory > xgetattr
memory > xv
memory > xid
memory > xtgtargs
memory > xiter
memory > xe
memory > xE
memory > xDecimal
memory > xelem
memory > xTestBasicOps
memory > xzip
memory > xunittest
memory > xresult
memory > xit2
memory > xy
memory > xnext
memory > xmap
memory > xn
memory > xobject
memory > xtyp
memory > xReferenceError
memory > xfilter
memory > xN
memory > xop
memory > xiterables
memory > xStopNow
memory > xlen
memory > xdict
memory > xcompress
memory > xreduce
memory > xj
memory > xisinstance
memory > xg1
memory > xTypeError
memory > xt1
memory > x__name__
memory > xa
[] > test_itertools
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xunderten
        memory > xtest_main
        memory > xlibreftest
        memory > xtest_takewhile
        memory > xtest_product
        memory > xtest_StopIteration
        memory > xtest_zip
        memory > xtest_combinations_result_gc
        memory > xtest_zip_longest
        memory > xmakecycle
        memory > xtest_count_with_stride
        memory > xlzip
        memory > xtest_compress
        memory > xtest_combinations
        memory > xtest_combinations_with_replacement_result_gc
        memory > xtest_tee_del_backward
        memory > xtest_tee
        memory > xtest_groupby
        memory > xtest_product_overflow
        memory > xtest_zip_longest_bad_iterable
        memory > xtest_permutations_overflow
        memory > xtest_combinatorics
        memory > xtest_accumulate_reducible
        memory > xtest_tee_concurrent
        memory > xtest_ziplongest
        memory > xtestR
        memory > xtest_filter
        memory > xtest_bug_7244
        memory > xtest_issue30347_2
        memory > xisEven
        memory > xgen3
        memory > x__iter__
        memory > xtest_combinations_sizeof
        memory > xtest_filterfalse
        memory > xtest_chain_reducible
        memory > xminsize2
        memory > x__getitem__
        memory > xtestR2
        memory > xtest_accumulate_reducible_none
        memory > xtest_chain
        memory > xL
        memory > xsetUp
        memory > xtest_stapmap
        memory > xtest_issue30347_1
        memory > xtupleize
        memory > xtest_islice_recipe
        memory > xfact
        memory > xtest_count
        memory > xtest_zip_tuple_reuse
        memory > xislice
        memory > xtest_repeat
        memory > xerrfunc
        memory > xtest_combinations_with_replacement_tuple_reuse
        memory > xtest_zip_longest_tuple_reuse
        memory > xmaxsize
        memory > xtest_tee_reenter
        memory > x__next__
        memory > xtest_sf_950057
        memory > xtest_islice
        memory > xtest_combinations_with_replacement_overflow
        memory > xtest_repeat_with_negative_times
        memory > xpickletest
        memory > xtest_long_chain_of_empty_iterables
        memory > xR
        memory > xpicklecopiers
        memory > xtest_product_tuple_reuse
        memory > xtest_product_pickling
        memory > xisOdd
        memory > xtest_permutations_result_gc
        memory > xtest_product_sizeof
        memory > xtest_accumulate
        memory > xtest_cycle
        memory > xtest_combinations_tuple_reuse
        memory > xprod
        memory > xtest_issue2246
        memory > xtest_product_issue_25021
        memory > xtest_chain_setstate
        memory > x__init__
        memory > xtest_map
        memory > xtest_zip_longest_result_gc
        memory > xtest_chain_from_iterable
        memory > xtest_combinations_overflow
        memory > xtest_combinations_with_replacement_sizeof
        memory > xtest_keywords_in_subclass
        memory > xirange
        memory > xtest_sf_793826
        memory > xtest_permutations_sizeof
        memory > xtest_permutations_tuple_reuse
        memory > xtest_dropwhile
        memory > xtest_zip_longest_pickling
        memory > xcheck_sizeof
        memory > x__test__
        memory > xtest_permutations
        memory > xtest_starmap
        memory > xtest_cycle_setstate
        memory > xtest_combinations_with_replacement
        memory > xtest_product_result_gc
        memory > xtake
        memory > xonearg
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xmaxsize.write ((xsupport).xMAX_Py_ssize_t)
            xminsize2.write (((xmaxsize).neg).sub 1)
            xlzip.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((xlist)).apply ((((xzip)).apply ((((unsupported)).apply ((xargs)))))))))
            xonearg.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((2.mul (xx))))
            xerrfunc.write
              []
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xValueError)))
            xgen3.write
              []
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((xi)) ((((unsupported)).apply (0) (1) (2))))
                      (((unsupported)).apply ((xi)))
            xisEven.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((xx).mod 2).eq 0)))
            xisOdd.write
              [xx]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((xx).mod 2).eq 1)))
            xtupleize.write
              []
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xargs)))
            xirange.write
              [xn]
                seq > @
                  (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                    (((unsupported)).apply ((xi)))
            (((unsupported)).apply)
              seq
                unsupported
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
                x__next__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xStopIteration)))
            xtake.write
              [xn xseq]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((xlist)).apply ((((xislice)).apply ((xseq)) ((xn)))))))
            xprod.write
              [xiterable]
                seq > @
                  (((unsupported)).apply ((((xreduce)).apply (((xoperator).xmul)) ((xiterable)) (1))))
            xfact.write
              [xn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((xprod)).apply ((((xrange)).apply (1) (((xn).add 1)))))))
            xtestR.write
              [xr]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xr)) (0))))
            xtestR2.write
              [xr]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xr)) (2))))
            xunderten.write
              [xx]
                seq > @
                  (((unsupported)).apply (((xx).less 10)))
            xpicklecopiers.write (((unsupported)).apply ((((unsupported)).apply (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xs)) ((xproto)))))))) ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xpickletest.write
                  [xself xprotocol xit xstop xtake xcompare]
                    memory > xc
                    memory > xtook
                    memory > xi3
                    memory > xexpand
                    memory > xdump
                    memory > xi4
                    memory > xi2
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xexpand.write
                          [xit xi]
                            memory > xl
                            seq > @
                              (((unsupported)).apply)
                                ((xi).greater 10).if
                                  (((unsupported)).apply ((((xRuntimeError)).apply ("infinite recursion encountered"))))
                                (((xisinstance)).apply ((xit)) ((xstr))).if
                                  (((unsupported)).apply ((xit)))
                                (((unsupported)).apply ((xTypeError)))
                                  xl.write (((xlist)).apply ((((xislice)).apply ((xit)) ((xstop)))))
                                  (((unsupported)).apply ((xit)))
                                (((unsupported)).apply ((((unsupported)).apply ((((xexpand)).apply ((xe)) (((xi).add 1)))) ((xe)) ((xl)))))
                        xdump.write ((((xpickle).xdumps)).apply ((xit)) ((xprotocol)))
                        xi2.write ((((xpickle).xloads)).apply ((xdump)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xi2)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((unsupported)).apply ((((xexpand)).apply ((xit)))) ((((xexpand)).apply ((xi2)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                        (xcompare).if
                          seq
                            xc.write (((xexpand)).apply ((xcompare)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xc)))
                        xi3.write ((((xpickle).xloads)).apply ((xdump)))
                        xtook.write 0
                        (((unsupported)).apply ((xStopIteration)))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply ((xtake)))))
                            seq
                              bogusForceDataize.write (((xnext)).apply ((xi3)))
                              (((unsupported)).apply ((xtook)) (1))
                        xdump.write ((((xpickle).xdumps)).apply ((xi3)) ((xprotocol)))
                        xi4.write ((((xpickle).xloads)).apply ((xdump)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((unsupported)).apply ((((xexpand)).apply ((xi3)))) ((((xexpand)).apply ((xi4)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                        (xcompare).if
                          seq
                            xc.write (((xexpand)).apply ((((unsupported)).apply ((xcompare)) ((((unsupported)).apply ((xtook)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xc)))
                xtest_accumulate.write
                  [xself]
                    memory > xs
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((((xrange)).apply (10))))))) ((((unsupported)).apply (0) (1) (3) (6) (10) (15) (21) (28) (36) (45))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xaccumulate)) ((((xrange)).apply (10))))))) ((((unsupported)).apply (0) (1) (3) (6) (10) (15) (21) (28) (36) (45))))
                        (((unsupported)).apply ((xtyp)) ((((unsupported)).apply ((xint)) ((xcomplex)) ((xDecimal)) ((xFraction)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((((xmap)).apply ((xtyp)) ((((xrange)).apply (10))))))))) ((((xlist)).apply ((((xmap)).apply ((xtyp)) ((((unsupported)).apply (0) (1) (3) (6) (10) (15) (21) (28) (36) (45))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ("abc"))))) ((((unsupported)).apply ("a") ("ab") ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((((unsupported)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((((unsupported)).apply (7))))))) ((((unsupported)).apply (7))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xaccumulate)) ((((xrange)).apply (10))) (5) (6))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xaccumulate)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xaccumulate)) ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlist)) ((((xaccumulate)).apply ((((unsupported)).apply (1) ((((unsupported)).apply)))))))
                        xs.write (((unsupported)).apply (2) (8) (9) (5) (7) (0) (3) (4) (1) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((xs)) ((xmin)))))) ((((unsupported)).apply (2) (2) (2) (2) (2) (0) (0) (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((xs)) ((xmax)))))) ((((unsupported)).apply (2) (8) (9) (9) (9) (9) (9) (9) (9) (9))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((xs)) (((xoperator).xmul)))))) ((((unsupported)).apply (2) (16) (144) (720) (5040) (0) (0) (0) (0) (0))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xlist)).apply ((((xaccumulate)).apply ((xs)) ((xchr)))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xaccumulate)).apply ((((xrange)).apply (10))))))
                            bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((unsupported)).apply ((xaccumulate)) ((((xrange)).apply (10))) (7))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xaccumulate)) ((((unsupported)).apply (10) (5) (1))) ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply (10) (15) (16))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xaccumulate)) ((((unsupported)).apply (10) (5) (1))) (100))))) ((((unsupported)).apply (100) (110) (115) (116))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xaccumulate)) ((((unsupported)).apply)) (100))))) ((((unsupported)).apply (100))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xlist)).apply ((((xaccumulate)).apply ((((unsupported)).apply (10) (20))) (100))))
                xtest_chain.write
                  [xself]
                    memory > xchain2
                    seq > @
                      seq
                        xchain2.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                (((unsupported)).apply ((xit)) ((xiterables)))
                                  (((unsupported)).apply ((xelement)) ((xit)))
                                    (((unsupported)).apply ((xelement)))
                        (((unsupported)).apply ((xc)) ((((unsupported)).apply ((xchain)) ((xchain2)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xc)).apply ("abc") ("def"))))) ((((xlist)).apply ("abcdef"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xc)).apply ("abc"))))) ((((xlist)).apply ("abc"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xc)).apply (""))))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (4) ((((xc)).apply ("abc") ("def"))))) ((((xlist)).apply ("abcd"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlist)) ((((xc)).apply (2) (3))))
                xtest_chain_from_iterable.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xchain).xfrom_iterable)).apply ((((unsupported)).apply ("abc") ("def"))))))) ((((xlist)).apply ("abcdef"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xchain).xfrom_iterable)).apply ((((unsupported)).apply ("abc"))))))) ((((xlist)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xchain).xfrom_iterable)).apply ((((unsupported)).apply (""))))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (4) (((((xchain).xfrom_iterable)).apply ((((unsupported)).apply ("abc") ("def"))))))) ((((xlist)).apply ("abcd"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlist)) (((((xchain).xfrom_iterable)).apply ((((unsupported)).apply (2) (3))))))
                xtest_chain_reducible.write
                  [xself]
                    memory > xit
                    seq > @
                      seq
                        (((unsupported)).apply ((xoper)) (((((unsupported)).apply (((xcopy).xdeepcopy))).add (xpicklecopiers))))
                          seq
                            xit.write (((xchain)).apply ("abc") ("def"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xoper)).apply ((xit)))))) ((((xlist)).apply ("abcdef"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xoper)).apply ((xit)))))) ((((xlist)).apply ("bcdef"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xoper)).apply ((((xchain)).apply (""))))))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (4) ((((xoper)).apply ((((xchain)).apply ("abc") ("def"))))))) ((((xlist)).apply ("abcd"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlist)) ((((xoper)).apply ((((xchain)).apply (2) (3))))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          (((unsupported)).apply (((xself).xpickletest)) ((xproto)) ((((xchain)).apply ("abc") ("def"))) ((((xlist)).apply ("abcdef"))))
                xtest_chain_setstate.write
                  [xself]
                    memory > xit
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((xchain)).apply).x__setstate__)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((xchain)).apply).x__setstate__)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((xchain)).apply).x__setstate__)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((xchain)).apply).x__setstate__)) ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((xchain)).apply).x__setstate__)) ((((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply)))) ((((unsupported)).apply)))))
                        xit.write (((xchain)).apply)
                        bogusForceDataize.write ((((xit).x__setstate__)).apply ((((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply ("abc") ("def"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply ("a") ("b") ("c") ("d") ("e") ("f"))))
                        xit.write (((xchain)).apply)
                        bogusForceDataize.write ((((xit).x__setstate__)).apply ((((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply ("abc") ("def"))))) ((((xiter)).apply ((((unsupported)).apply ("ghi"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply ("ghi") ("a") ("b") ("c") ("d") ("e") ("f"))))
                xtest_combinations.write
                  [xself]
                    memory > xvalues
                    memory > xtestIntermediate
                    memory > xresult
                    memory > xcombinations3
                    memory > xcombinations2
                    memory > xcombinations1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcombinations)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcombinations)) ("abc") (2) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcombinations)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xcombinations)) ("abc") ((2.neg)))
                        (((unsupported)).apply ((xop)) (((((unsupported)).apply ((((unsupported)).apply ((xa))))).add (xpicklecopiers))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((((xcombinations)).apply ("abc") (32))))))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((((xcombinations)).apply ("ABCD") (2))))))) ((((unsupported)).apply ((((unsupported)).apply ("A") ("B"))) ((((unsupported)).apply ("A") ("C"))) ((((unsupported)).apply ("A") ("D"))) ((((unsupported)).apply ("B") ("C"))) ((((unsupported)).apply ("B") ("D"))) ((((unsupported)).apply ("C") ("D"))))))
                            xtestIntermediate.write (((xcombinations)).apply ("ABCD") (2))
                            bogusForceDataize.write (((xnext)).apply ((xtestIntermediate)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((xtestIntermediate)))))) ((((unsupported)).apply ((((unsupported)).apply ("A") ("C"))) ((((unsupported)).apply ("A") ("D"))) ((((unsupported)).apply ("B") ("C"))) ((((unsupported)).apply ("B") ("D"))) ((((unsupported)).apply ("C") ("D"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((((xcombinations)).apply ((((xrange)).apply (4))) (3))))))) ((((unsupported)).apply ((((unsupported)).apply (0) (1) (2))) ((((unsupported)).apply (0) (1) (3))) ((((unsupported)).apply (0) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))
                            xtestIntermediate.write (((xcombinations)).apply ((((xrange)).apply (4))) (3))
                            bogusForceDataize.write (((xnext)).apply ((xtestIntermediate)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((xtestIntermediate)))))) ((((unsupported)).apply ((((unsupported)).apply (0) (1) (3))) ((((unsupported)).apply (0) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))
                        xcombinations1.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            memory > xindices
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)).apply ((xiterable)))
                                xn.write (((xlen)).apply ((xpool)))
                                ((xr).greater (xn)).if
                                  (((unsupported)).apply)
                                xindices.write (((xlist)).apply ((((xrange)).apply ((xr)))))
                                (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)).apply ((xi)) ((((xreversed)).apply ((((xrange)).apply ((xr)))))))
                                          ((((unsupported)).apply ((xindices)) ((xi))).neq (((xi).add (xn)).sub (xr))).if
                                            (((unsupported)).apply)
                                          (((unsupported)).apply)
                                        (((unsupported)).apply ((((unsupported)).apply ((xindices)) ((xi)))) (1))
                                        (((unsupported)).apply ((xj)) ((((xrange)).apply (((xi).add 1)) ((xr)))))
                                          (((unsupported)).apply ((((unsupported)).apply ((xindices)) ((xj)))) (((((unsupported)).apply ((xindices)) (((xj).sub 1))).add 1)))
                                        (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        xcombinations2.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)).apply ((xiterable)))
                                xn.write (((xlen)).apply ((xpool)))
                                (((unsupported)).apply ((xindices)) ((((xpermutations)).apply ((((xrange)).apply ((xn)))) ((xr)))))
                                  ((((xsorted)).apply ((xindices))).eq (((xlist)).apply ((xindices)))).if
                                    (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        xcombinations3.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)).apply ((xiterable)))
                                xn.write (((xlen)).apply ((xpool)))
                                (((unsupported)).apply ((xindices)) ((((xcombinations_with_replacement)).apply ((((xrange)).apply ((xn)))) ((xr)))))
                                  ((((xlen)).apply ((((xset)).apply ((xindices))))).eq (xr)).if
                                    (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (7))))
                          seq
                            xvalues.write (((unsupported)).apply (((5.mul (xx)).sub 12)) ((xx)) ((((xrange)).apply ((xn)))))
                            (((unsupported)).apply ((xr)) ((((xrange)).apply (((xn).add 2)))))
                              seq
                                xresult.write (((xlist)).apply ((((xcombinations)).apply ((xvalues)) ((xr)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresult)))) ((((xr).greater (xn)).if 0 (((((xfact)).apply ((xn))).div (((xfact)).apply ((xr)))).div (((xfact)).apply (((xn).sub (xr))))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresult)))) ((((xlen)).apply ((((xset)).apply ((xresult)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xsorted)).apply ((xresult)))))
                                (((unsupported)).apply ((xc)) ((xresult)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) ((xr)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xset)).apply ((xc)))))) ((xr)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xc)))) ((((xsorted)).apply ((xc)))))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply ((((unsupported)).apply ((xe)) ((xvalues)))) ((xe)) ((xc)))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xc)))) ((((unsupported)).apply ((xe)) ((xe)) ((xvalues)) ((((unsupported)).apply ((xe)) ((xc)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xcombinations1)).apply ((xvalues)) ((xr)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xcombinations2)).apply ((xvalues)) ((xr)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xcombinations3)).apply ((xvalues)) ((xr)))))))
                                (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                  bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xcombinations)).apply ((xvalues)) ((xr)))))
                xtest_combinations_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOverflowError)) ((xMemoryError)))))))
                          bogusForceDataize.write (((xcombinations)).apply ("AA") ((((unsupported)).apply (2) (29))))
                xtest_combinations_tuple_reuse.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xset)).apply ((((xmap)).apply ((xid)) ((((xcombinations)).apply ("abcde") (3))))))))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xlen)).apply ((((xset)).apply ((((xmap)).apply ((xid)) ((((xlist)).apply ((((xcombinations)).apply ("abcde") (3))))))))))) (1))
                xtest_combinations_with_replacement.write
                  [xself]
                    memory > xcwr1
                    memory > xcwr
                    memory > xtestIntermediate
                    memory > xnoruns
                    memory > xcwr2
                    memory > xvalues
                    memory > xregular_combs
                    memory > xnumcombs
                    memory > xresult
                    seq > @
                      seq
                        xcwr.write (xcombinations_with_replacement)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcwr)) ("abc"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcwr)) ("abc") (2) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcwr)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xcwr)) ("abc") ((2.neg)))
                        (((unsupported)).apply ((xop)) (((((unsupported)).apply ((((unsupported)).apply ((xa))))).add (xpicklecopiers))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((((xcwr)).apply ("ABC") (2))))))) ((((unsupported)).apply ((((unsupported)).apply ("A") ("A"))) ((((unsupported)).apply ("A") ("B"))) ((((unsupported)).apply ("A") ("C"))) ((((unsupported)).apply ("B") ("B"))) ((((unsupported)).apply ("B") ("C"))) ((((unsupported)).apply ("C") ("C"))))))
                            xtestIntermediate.write (((xcwr)).apply ("ABC") (2))
                            bogusForceDataize.write (((xnext)).apply ((xtestIntermediate)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((xtestIntermediate)))))) ((((unsupported)).apply ((((unsupported)).apply ("A") ("B"))) ((((unsupported)).apply ("A") ("C"))) ((((unsupported)).apply ("B") ("B"))) ((((unsupported)).apply ("B") ("C"))) ((((unsupported)).apply ("C") ("C"))))))
                        xcwr1.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            memory > xindices
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)).apply ((xiterable)))
                                xn.write (((xlen)).apply ((xpool)))
                                (((xn).not).and (xr)).if
                                  (((unsupported)).apply)
                                xindices.write ((((unsupported)).apply (0)).mul (xr))
                                (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      seq
                                        (((unsupported)).apply ((xi)) ((((xreversed)).apply ((((xrange)).apply ((xr)))))))
                                          ((((unsupported)).apply ((xindices)) ((xi))).neq ((xn).sub 1)).if
                                            (((unsupported)).apply)
                                          (((unsupported)).apply)
                                        (((unsupported)).apply ((((unsupported)).apply ((xindices)) ((((unsupported)).apply ((xi)))))) (((((unsupported)).apply (((((unsupported)).apply ((xindices)) ((xi))).add 1))).mul ((xr).sub (xi)))))
                                        (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        xcwr2.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            seq > @
                              seq
                                unsupported
                                xpool.write (((xtuple)).apply ((xiterable)))
                                xn.write (((xlen)).apply ((xpool)))
                                (((unsupported)).apply ((xindices)) ((((unsupported)).apply ((xproduct)) ((((xrange)).apply ((xn)))) ((xr)))))
                                  ((((xsorted)).apply ((xindices))).eq (((xlist)).apply ((xindices)))).if
                                    (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        xnumcombs.write
                          [xn xr]
                            seq > @
                              seq
                                ((xn).not).if
                                  (((unsupported)).apply (((xr).if 0 1)))
                                (((unsupported)).apply ((((((xfact)).apply ((((xn).add (xr)).sub 1))).div (((xfact)).apply ((xr)))).div (((xfact)).apply (((xn).sub 1))))))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (7))))
                          seq
                            xvalues.write (((unsupported)).apply (((5.mul (xx)).sub 12)) ((xx)) ((((xrange)).apply ((xn)))))
                            (((unsupported)).apply ((xr)) ((((xrange)).apply (((xn).add 2)))))
                              seq
                                xresult.write (((xlist)).apply ((((xcwr)).apply ((xvalues)) ((xr)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresult)))) ((((xnumcombs)).apply ((xn)) ((xr)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresult)))) ((((xlen)).apply ((((xset)).apply ((xresult)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xsorted)).apply ((xresult)))))
                                xregular_combs.write (((xlist)).apply ((((xcombinations)).apply ((xvalues)) ((xr)))))
                                (((xn).eq 0).or ((xr).leq 1)).if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((xregular_combs)))
                                  bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xset)).apply ((xresult))).geq (((xset)).apply ((xregular_combs))))))
                                (((unsupported)).apply ((xc)) ((xresult)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xc)))) ((xr)))
                                    xnoruns.write (((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xv)))) ((((xgroupby)).apply ((xc)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xnoruns)))) ((((xlen)).apply ((((xset)).apply ((xnoruns)))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xc)))) ((((xsorted)).apply ((xc)))))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply ((((unsupported)).apply ((xe)) ((xvalues)))) ((xe)) ((xc)))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnoruns)) ((((unsupported)).apply ((xe)) ((xe)) ((xvalues)) ((((unsupported)).apply ((xe)) ((xc)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xcwr1)).apply ((xvalues)) ((xr)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xcwr2)).apply ((xvalues)) ((xr)))))))
                                (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                  bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xcwr)).apply ((xvalues)) ((xr)))))
                xtest_combinations_with_replacement_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOverflowError)) ((xMemoryError)))))))
                          bogusForceDataize.write (((xcombinations_with_replacement)).apply ("AA") ((((unsupported)).apply (2) (30))))
                xtest_combinations_with_replacement_tuple_reuse.write
                  [xself]
                    memory > xcwr
                    seq > @
                      (((unsupported)).apply)
                        xcwr.write (xcombinations_with_replacement)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xset)).apply ((((xmap)).apply ((xid)) ((((xcwr)).apply ("abcde") (3))))))))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xlen)).apply ((((xset)).apply ((((xmap)).apply ((xid)) ((((xlist)).apply ((((xcwr)).apply ("abcde") (3))))))))))) (1))
                xtest_permutations.write
                  [xself]
                    memory > xpermutations2
                    memory > xresult
                    memory > xvalues
                    memory > xpermutations1
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xpermutations)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xpermutations)) ("abc") (2) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xpermutations)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xpermutations)) ("abc") ((2.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xpermutations)).apply ("abc") (32))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xpermutations)) ("abc") ("s"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xpermutations)).apply ((((xrange)).apply (3))) (2))))) ((((unsupported)).apply ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (0) (2))) ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (2) (0))) ((((unsupported)).apply (2) (1))))))
                        xpermutations1.write
                          [xiterable xr]
                            memory > xindices
                            memory > xpool
                            memory > xcycles
                            memory > xn
                            memory > xj
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                xpool.write (((xtuple)).apply ((xiterable)))
                                xn.write (((xlen)).apply ((xpool)))
                                xr.write ((((unsupported)).apply ((xr)) ("None: is there a None literal in the EO language?")).if (xn) (xr))
                                ((xr).greater (xn)).if
                                  (((unsupported)).apply)
                                xindices.write (((xlist)).apply ((((xrange)).apply ((xn)))))
                                xcycles.write (((unsupported)).apply ((((xlist)).apply ((((xrange)).apply ((((xn).sub (xr)).add 1)) (((xn).add 1)))))) ((((unsupported)).apply ((1.neg)))))
                                (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((((unsupported)).apply ((xindices)) ((((unsupported)).apply ((xr)))))))))))
                                while.
                                  (xn)
                                  [unused]
                                    seq > @
                                      (((unsupported)).apply ((xi)) ((((xreversed)).apply ((((xrange)).apply ((xr)))))))
                                        seq
                                          (((unsupported)).apply ((((unsupported)).apply ((xcycles)) ((xi)))) (1))
                                          ((((unsupported)).apply ((xcycles)) ((xi))).eq 0).if
                                            seq
                                              (((unsupported)).apply ((((unsupported)).apply ((xindices)) ((((unsupported)).apply ((xi)))))) (((((unsupported)).apply ((xindices)) ((((unsupported)).apply (((xi).add 1))))).add (((unsupported)).apply ((xindices)) ((((unsupported)).apply ((xi)) (((xi).add 1))))))))
                                              (((unsupported)).apply ((((unsupported)).apply ((xcycles)) ((xi)))) (((xn).sub (xi))))
                                            seq
                                              xj.write (((unsupported)).apply ((xcycles)) ((xi)))
                                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xindices)) ((xi)))) ((((unsupported)).apply ((xindices)) (((xj).neg)))))) ((((unsupported)).apply ((((unsupported)).apply ((xindices)) (((xj).neg)))) ((((unsupported)).apply ((xindices)) ((xi)))))))
                                              (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((((unsupported)).apply ((xindices)) ((((unsupported)).apply ((xr)))))))))))
                                              (((unsupported)).apply)
                                        (((unsupported)).apply)
                        xpermutations2.write
                          [xiterable xr]
                            memory > xn
                            memory > xpool
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                xpool.write (((xtuple)).apply ((xiterable)))
                                xn.write (((xlen)).apply ((xpool)))
                                xr.write ((((unsupported)).apply ((xr)) ("None: is there a None literal in the EO language?")).if (xn) (xr))
                                (((unsupported)).apply ((xindices)) ((((unsupported)).apply ((xproduct)) ((((xrange)).apply ((xn)))) ((xr)))))
                                  ((((xlen)).apply ((((xset)).apply ((xindices))))).eq (xr)).if
                                    (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((xi)) ((xindices)))))))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (7))))
                          seq
                            xvalues.write (((unsupported)).apply (((5.mul (xx)).sub 12)) ((xx)) ((((xrange)).apply ((xn)))))
                            (((unsupported)).apply ((xr)) ((((xrange)).apply (((xn).add 2)))))
                              seq
                                xresult.write (((xlist)).apply ((((xpermutations)).apply ((xvalues)) ((xr)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresult)))) ((((xr).greater (xn)).if 0 ((((xfact)).apply ((xn))).div (((xfact)).apply (((xn).sub (xr))))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresult)))) ((((xlen)).apply ((((xset)).apply ((xresult)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xsorted)).apply ((xresult)))))
                                (((unsupported)).apply ((xp)) ((xresult)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xp)))) ((xr)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xset)).apply ((xp)))))) ((xr)))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xall)).apply ((((unsupported)).apply ((((unsupported)).apply ((xe)) ((xvalues)))) ((xe)) ((xp)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xpermutations1)).apply ((xvalues)) ((xr)))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xpermutations2)).apply ((xvalues)) ((xr)))))))
                                ((xr).eq (xn)).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xpermutations)).apply ((xvalues)) ("None: is there a None literal in the EO language?"))))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((((xlist)).apply ((((xpermutations)).apply ((xvalues)))))))
                                (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                  bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xpermutations)).apply ((xvalues)) ((xr)))))
                xtest_permutations_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOverflowError)) ((xMemoryError)))))))
                          bogusForceDataize.write (((xpermutations)).apply ("A") ((((unsupported)).apply (2) (30))))
                xtest_permutations_tuple_reuse.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xset)).apply ((((xmap)).apply ((xid)) ((((xpermutations)).apply ("abcde") (3))))))))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xlen)).apply ((((xset)).apply ((((xmap)).apply ((xid)) ((((xlist)).apply ((((xpermutations)).apply ("abcde") (3))))))))))) (1))
                xtest_combinatorics.write
                  [xself]
                    memory > xcomb
                    memory > xs
                    memory > xprod
                    memory > xcwr
                    memory > xperm
                    seq > @
                      (((unsupported)).apply ((xn)) ((((xrange)).apply (6))))
                        seq
                          xs.write (((unsupported)).apply ("ABCDEFG") ((((unsupported)).apply ((xn)))))
                          (((unsupported)).apply ((xr)) ((((xrange)).apply (8))))
                            seq
                              xprod.write (((xlist)).apply ((((unsupported)).apply ((xproduct)) ((xs)) ((xr)))))
                              xcwr.write (((xlist)).apply ((((xcombinations_with_replacement)).apply ((xs)) ((xr)))))
                              xperm.write (((xlist)).apply ((((xpermutations)).apply ((xs)) ((xr)))))
                              xcomb.write (((xlist)).apply ((((xcombinations)).apply ((xs)) ((xr)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xprod)))) ((((unsupported)).apply ((xn)) ((xr)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcwr)))) (((xn).if (((((xfact)).apply ((((xn).add (xr)).sub 1))).div (((xfact)).apply ((xr)))).div (((xfact)).apply (((xn).sub 1)))) ((xr).not))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xperm)))) ((((xr).greater (xn)).if 0 ((((xfact)).apply ((xn))).div (((xfact)).apply (((xn).sub (xr))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcomb)))) ((((xr).greater (xn)).if 0 (((((xfact)).apply ((xn))).div (((xfact)).apply ((xr)))).div (((xfact)).apply (((xn).sub (xr))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xprod)) ((((xsorted)).apply ((((xset)).apply ((xprod)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcwr)) ((((xsorted)).apply ((((xset)).apply ((xcwr)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xperm)) ((((xsorted)).apply ((((xset)).apply ((xperm)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomb)) ((((xsorted)).apply ((((xset)).apply ((xcomb)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcwr)) ((((unsupported)).apply ((xt)) ((xt)) ((xprod)) (((((xsorted)).apply ((xt))).eq (((xlist)).apply ((xt))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xperm)) ((((unsupported)).apply ((xt)) ((xt)) ((xprod)) (((((xlen)).apply ((((xset)).apply ((xt))))).eq (xr))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomb)) ((((unsupported)).apply ((xt)) ((xt)) ((xperm)) (((((xsorted)).apply ((xt))).eq (((xlist)).apply ((xt))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomb)) ((((unsupported)).apply ((xt)) ((xt)) ((xcwr)) (((((xlen)).apply ((((xset)).apply ((xt))))).eq (xr))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomb)) ((((xlist)).apply ((((xfilter)).apply (((((xset)).apply ((xcwr))).x__contains__)) ((xperm)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomb)) ((((xlist)).apply ((((xfilter)).apply (((((xset)).apply ((xperm))).x__contains__)) ((xcwr)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomb)) ((((xsorted)).apply (((((xset)).apply ((xcwr))).and (((xset)).apply ((xperm))))))))
                xtest_compress.write
                  [xself]
                    memory > xn
                    memory > xtestIntermediate
                    memory > xselectors
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xcompress)) ("ABCDEF") ((((unsupported)).apply (1) (0) (1) (0) (1) (1))))))) ((((xlist)).apply ("ACEF"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcompress)).apply ("ABCDEF") ((((unsupported)).apply (1) (0) (1) (0) (1) (1))))))) ((((xlist)).apply ("ACEF"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcompress)).apply ("ABCDEF") ((((unsupported)).apply (0) (0) (0) (0) (0) (0))))))) ((((xlist)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcompress)).apply ("ABCDEF") ((((unsupported)).apply (1) (1) (1) (1) (1) (1))))))) ((((xlist)).apply ("ABCDEF"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcompress)).apply ("ABCDEF") ((((unsupported)).apply (1) (0) (1))))))) ((((xlist)).apply ("AC"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcompress)).apply ("ABC") ((((unsupported)).apply (0) (1) (1) (1) (1) (1))))))) ((((xlist)).apply ("BC"))))
                        xn.write 10000
                        xdata.write ((((xchain).xfrom_iterable)).apply ((((xrepeat)).apply ((((xrange)).apply (6))) ((xn)))))
                        xselectors.write ((((xchain).xfrom_iterable)).apply ((((xrepeat)).apply ((((unsupported)).apply (0) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcompress)).apply ((xdata)) ((xselectors)))))) (((((unsupported)).apply (1) (3) (5)).mul (xn))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompress)) ("None: is there a None literal in the EO language?") ((((xrange)).apply (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompress)) ((((xrange)).apply (6))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompress)) ((((xrange)).apply (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompress)) ((((xrange)).apply (6))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xop)) (((((unsupported)).apply ((((unsupported)).apply (((((xcopy).xcopy)).apply ((xa)))))) ((((unsupported)).apply (((((xcopy).xdeepcopy)).apply ((xa))))))).add (xpicklecopiers))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((xselectors)) ((xresult1)) ((xresult2)))) ((((unsupported)).apply ((((unsupported)).apply ("ABCDEF") ((((unsupported)).apply (1) (0) (1) (0) (1) (1))) ("ACEF") ("CEF"))) ((((unsupported)).apply ("ABCDEF") ((((unsupported)).apply (0) (0) (0) (0) (0) (0))) ("") (""))) ((((unsupported)).apply ("ABCDEF") ((((unsupported)).apply (1) (1) (1) (1) (1) (1))) ("ABCDEF") ("BCDEF"))) ((((unsupported)).apply ("ABCDEF") ((((unsupported)).apply (1) (0) (1))) ("AC") ("C"))) ((((unsupported)).apply ("ABC") ((((unsupported)).apply (0) (1) (1) (1) (1) (1))) ("BC") ("C"))))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((((unsupported)).apply ((xcompress)) ((xdata)) ((xselectors)))))))) ((((xlist)).apply ((xresult1)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((((xcompress)).apply ((xdata)) ((xselectors)))))))) ((((xlist)).apply ((xresult1)))))
                              xtestIntermediate.write (((xcompress)).apply ((xdata)) ((xselectors)))
                              (xresult1).if
                                seq
                                  bogusForceDataize.write (((xnext)).apply ((xtestIntermediate)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xop)).apply ((xtestIntermediate)))))) ((((xlist)).apply ((xresult2)))))
                xtest_count.write
                  [xself]
                    memory > xBIGINT
                    memory > xc
                    memory > xr1
                    memory > xr2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ("abc") ((((xcount)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ("abc") ((((xcount)).apply (3))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (3))) ((((unsupported)).apply ("b") (4))) ((((unsupported)).apply ("c") (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (2) ((((xlzip)).apply ("abc") ((((xcount)).apply (3))))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (3))) ((((unsupported)).apply ("b") (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (2) ((((xzip)).apply ("abc") ((((xcount)).apply ((1.neg)))))))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((1.neg)))) ((((unsupported)).apply ("b") (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (2) ((((xzip)).apply ("abc") ((((xcount)).apply ((3.neg)))))))) ((((unsupported)).apply ((((unsupported)).apply ("a") ((3.neg)))) ((((unsupported)).apply ("b") ((2.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcount)) (2) (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcount)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (10) ((((xcount)).apply (((xmaxsize).sub 5)))))) ((((xlist)).apply ((((xrange)).apply (((xmaxsize).sub 5)) (((xmaxsize).add 5)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (10) ((((xcount)).apply ((((xmaxsize).neg).sub 5)))))) ((((xlist)).apply ((((xrange)).apply ((((xmaxsize).neg).sub 5)) ((((xmaxsize).neg).add 5)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply (3.25))))) ((((unsupported)).apply (3.25) (4.25) (5.25))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply ((3.25.sub (((unsupported)).apply))))))) ((((unsupported)).apply ((3.25.sub (((unsupported)).apply))) ((4.25.sub (((unsupported)).apply))) ((5.25.sub (((unsupported)).apply))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply ((((xDecimal)).apply ("1.1"))))))) ((((unsupported)).apply ((((xDecimal)).apply ("1.1"))) ((((xDecimal)).apply ("2.1"))) ((((xDecimal)).apply ("3.1"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply ((((xFraction)).apply (2) (3))))))) ((((unsupported)).apply ((((xFraction)).apply (2) (3))) ((((xFraction)).apply (5) (3))) ((((xFraction)).apply (8) (3))))))
                        xBIGINT.write (((unsupported)).apply (1) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply ((xBIGINT)))))) ((((unsupported)).apply ((xBIGINT)) (((xBIGINT).add 1)) (((xBIGINT).add 2)))))
                        xc.write (((xcount)).apply (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(3)"))
                        bogusForceDataize.write (((xnext)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(4)"))
                        xc.write (((xcount)).apply ((9.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(-9)"))
                        bogusForceDataize.write (((xnext)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xc)))) ((8.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xcount)).apply (10.25))))) ("count(10.25)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xcount)).apply (10.0))))) ("count(10.0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xnext)).apply ((((xcount)).apply (10.0))))))) ((xfloat)))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (((((xsys).xmaxsize).neg).sub 5)) (((((xsys).xmaxsize).neg).add 5)) ((10.neg)) ((1.neg)) (0) (10) ((((xsys).xmaxsize).sub 5)) ((((xsys).xmaxsize).add 5)))))
                          seq
                            xr1.write (((xrepr)).apply ((((xcount)).apply ((xi)))))
                            xr2.write ((("count(%r)".x__mod__)).apply ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr1)) ((xr2)))
                        (((unsupported)).apply ((xvalue)) ((((unsupported)).apply ((3.neg)) (3) (((xmaxsize).sub 5)) (((xmaxsize).add 5)))))
                          seq
                            xc.write (((xcount)).apply ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply (((((xcopy).xcopy)).apply ((xc)))))) ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply (((((xcopy).xdeepcopy)).apply ((xc)))))) ((xvalue)))
                            (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xcount)).apply ((xvalue)))))
                        bogusForceDataize.write (((xcount)).apply (1) (((xmaxsize).add 5)))
                        bogusForceDataize.write ((((xsys).xexc_info)).apply)
                xtest_count_with_stride.write
                  [xself]
                    memory > xBIGINT
                    memory > xc
                    memory > xr1
                    memory > xr2
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ("abc") ((((xcount)).apply (2) (3))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (2))) ((((unsupported)).apply ("b") (5))) ((((unsupported)).apply ("c") (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ("abc") ((((unsupported)).apply ((xcount)) (2) (3))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (2))) ((((unsupported)).apply ("b") (5))) ((((unsupported)).apply ("c") (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ("abc") ((((unsupported)).apply ((xcount)) ((1.neg)))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") ((1.neg)))) ((((unsupported)).apply ("c") ((2.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcount)) ("a") ("b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ("abc") ((((xcount)).apply (2) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (2))) ((((unsupported)).apply ("b") (2))) ((((unsupported)).apply ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ("abc") ((((xcount)).apply (2) (1))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (2))) ((((unsupported)).apply ("b") (3))) ((((unsupported)).apply ("c") (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ("abc") ((((xcount)).apply (2) (3))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (2))) ((((unsupported)).apply ("b") (5))) ((((unsupported)).apply ("c") (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (20) ((((xcount)).apply (((xmaxsize).sub 15)) (3))))) ((((xtake)).apply (20) ((((xrange)).apply (((xmaxsize).sub 15)) (((xmaxsize).add 100)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (20) ((((xcount)).apply ((((xmaxsize).neg).sub 15)) (3))))) ((((xtake)).apply (20) ((((xrange)).apply ((((xmaxsize).neg).sub 15)) ((((xmaxsize).neg).add 100)) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply (10) (((xmaxsize).add 5)))))) ((((xlist)).apply ((((xrange)).apply (10) ((10.add (3.mul ((xmaxsize).add 5)))) (((xmaxsize).add 5)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply (2) (1.25))))) ((((unsupported)).apply (2) (3.25) (4.5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply (2) ((3.25.sub (((unsupported)).apply))))))) ((((unsupported)).apply (2) ((5.25.sub (((unsupported)).apply))) ((8.5.sub (((unsupported)).apply))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply ((((xDecimal)).apply ("1.1"))) ((((xDecimal)).apply (".1"))))))) ((((unsupported)).apply ((((xDecimal)).apply ("1.1"))) ((((xDecimal)).apply ("1.2"))) ((((xDecimal)).apply ("1.3"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xcount)).apply ((((xFraction)).apply (2) (3))) ((((xFraction)).apply (1) (7))))))) ((((unsupported)).apply ((((xFraction)).apply (2) (3))) ((((xFraction)).apply (17) (21))) ((((xFraction)).apply (20) (21))))))
                        xBIGINT.write (((unsupported)).apply (1) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((unsupported)).apply ((xcount)) ((xBIGINT)))))) ((((unsupported)).apply (0) ((xBIGINT)) ((2.mul (xBIGINT))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xtake)).apply (3) ((((xcount)).apply (10) (2.5))))))) ((((xrepr)).apply ((((unsupported)).apply (10) (12.5) (15.0))))))
                        xc.write (((xcount)).apply (3) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(3, 5)"))
                        bogusForceDataize.write (((xnext)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(8, 5)"))
                        xc.write (((xcount)).apply ((9.neg)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(-9, 0)"))
                        bogusForceDataize.write (((xnext)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(-9, 0)"))
                        xc.write (((xcount)).apply ((9.neg)) ((3.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(-9, -3)"))
                        bogusForceDataize.write (((xnext)).apply ((xc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(-12, -3)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xc)))) ("count(-12, -3)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xcount)).apply (10.5) (1.25))))) ("count(10.5, 1.25)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xcount)).apply (10.5) (1))))) ("count(10.5)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xcount)).apply (10.5) (1.00))))) ("count(10.5, 1.0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xcount)).apply (10) (1.00))))) ("count(10, 1.0)"))
                        xc.write (((xcount)).apply (10) (1.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xnext)).apply ((xc)))))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xnext)).apply ((xc)))))) ((xfloat)))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (((((xsys).xmaxsize).neg).sub 5)) (((((xsys).xmaxsize).neg).add 5)) ((10.neg)) ((1.neg)) (0) (10) ((((xsys).xmaxsize).sub 5)) ((((xsys).xmaxsize).add 5)))))
                          (((unsupported)).apply ((xj)) ((((unsupported)).apply (((((xsys).xmaxsize).neg).sub 5)) (((((xsys).xmaxsize).neg).add 5)) ((10.neg)) ((1.neg)) (0) (1) (10) ((((xsys).xmaxsize).sub 5)) ((((xsys).xmaxsize).add 5)))))
                            seq
                              xr1.write (((xrepr)).apply ((((xcount)).apply ((xi)) ((xj)))))
                              ((xj).eq 1).if
                                xr2.write ("count(%r)".mod (xi))
                                xr2.write ("count(%r, %r)".mod (((unsupported)).apply ((xi)) ((xj))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr1)) ((xr2)))
                              (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xcount)).apply ((xi)) ((xj)))))
                xtest_cycle.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > x_
                    memory > xp
                    memory > xit
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (10) ((((xcycle)).apply ("abc"))))) ((((xlist)).apply ("abcabcabca"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcycle)).apply (""))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcycle)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcycle)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xcycle)).apply ((((xgen3)).apply)))) (10))))) ((((unsupported)).apply (0) (1) (2) (0) (1) (2) (0) (1) (2) (0))))
                        xc.write (((xcycle)).apply ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xc)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (10) (((((xcopy).xdeepcopy)).apply ((xc)))))) ((((xlist)).apply ("bcabcabcab"))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (10) (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xc)) ((xproto)))))))) ((((xlist)).apply ("bcabcabcab"))))
                            bogusForceDataize.write (((xnext)).apply ((xc)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (10) (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xc)) ((xproto)))))))) ((((xlist)).apply ("cabcabcabc"))))
                            bogusForceDataize.write (((xnext)).apply ((xc)))
                            bogusForceDataize.write (((xnext)).apply ((xc)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xcycle)).apply ("abc"))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xit.write (((xiter)).apply ("abcde"))
                            xc.write (((xcycle)).apply ((xit)))
                            x_.write (((unsupported)).apply ((((xnext)).apply ((xc)))) ((xi)) ((((xrange)).apply (2))))
                            xp.write ((((xpickle).xdumps)).apply ((xc)) ((xproto)))
                            xd.write ((((xpickle).xloads)).apply ((xp)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (20) ((xd)))) ((((xlist)).apply ("cdeabcdeabcdeabcdeab"))))
                            xit.write (((xiter)).apply ("abcde"))
                            xc.write (((xcycle)).apply ((xit)))
                            x_.write (((unsupported)).apply ((((xnext)).apply ((xc)))) ((xi)) ((((xrange)).apply (7))))
                            xp.write ((((xpickle).xdumps)).apply ((xc)) ((xproto)))
                            xd.write ((((xpickle).xloads)).apply ((xp)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (20) ((xd)))) ((((xlist)).apply ("cdeabcdeabcdeabcdeab"))))
                xtest_cycle_setstate.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write (((xcycle)).apply ("defg"))
                        bogusForceDataize.write ((((xc).x__setstate__)).apply ((((unsupported)).apply ((((xlist)).apply ("abc"))) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (20) ((xc)))) ((((xlist)).apply ("defgabcdefgabcdefgab"))))
                        xc.write (((xcycle)).apply ("defg"))
                        bogusForceDataize.write ((((xc).x__setstate__)).apply ((((unsupported)).apply ((((xlist)).apply ("abcdefg"))) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (20) ((xc)))) ((((xlist)).apply ("defgabcdefgabcdefgab"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((((xcycle)).apply ("defg")).x__setstate__)).apply ((((unsupported)).apply ((((xlist)).apply ("abcdefg"))) (0))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          seq
                            xc.write (((xcycle)).apply ("defg"))
                            bogusForceDataize.write ((((xc).x__setstate__)).apply ((((unsupported)).apply ((((xtuple)).apply ("defg"))) (0))))
                        bogusForceDataize.write (((xtake)).apply (20) ((xc)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((((xcycle)).apply ("defg")).x__setstate__)).apply ((((unsupported)).apply ((((xlist)).apply ("abcdefg"))) ("x"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((xcycle)).apply ("")).x__setstate__)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((((xcycle)).apply ("")).x__setstate__)) ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_groupby.write
                  [xself]
                    memory > x__eq__
                    memory > xkeys
                    memory > xs
                    memory > xexpectedkeys
                    memory > xkeyfunc
                    memory > xdup
                    memory > xdelayed_raise
                    memory > xit
                    memory > xr
                    memory > xgulp
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) ((((xlist)).apply ((((xgroupby)).apply ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply)) ((((xlist)).apply ((((unsupported)).apply ((xgroupby)) ((((unsupported)).apply)) ((xid)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlist)) ((((xgroupby)).apply ("abc") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xgroupby)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xgroupby)) ("abc") ((((unsupported)).apply ((xx)))) (10))
                        xs.write (((unsupported)).apply ((((unsupported)).apply (0) (10) (20))) ((((unsupported)).apply (0) (11) (21))) ((((unsupported)).apply (0) (12) (21))) ((((unsupported)).apply (1) (13) (21))) ((((unsupported)).apply (1) (14) (22))) ((((unsupported)).apply (2) (15) (22))) ((((unsupported)).apply (3) (16) (23))) ((((unsupported)).apply (3) (17) (23))))
                        xdup.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ((xs)) ((((unsupported)).apply ((((unsupported)).apply ((xr)) (0))))))))
                          (((unsupported)).apply ((xelem)) ((xg)))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((((unsupported)).apply ((xelem)) (0))))
                              bogusForceDataize.write ((((xdup).xappend)).apply ((xelem)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xdup)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xdup.write (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xg)))) (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((((xgroupby)).apply ((xs)) ((xtestR)))) ((xproto)))))))
                              (((unsupported)).apply ((xelem)) ((xg)))
                                seq
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((((unsupported)).apply ((xelem)) (0))))
                                  bogusForceDataize.write ((((xdup).xappend)).apply ((xelem)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xdup)))
                        xdup.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ((xs)) ((xtestR)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xik)) ((xig)))) ((((xgroupby)).apply ((xg)) ((xtestR2)))))
                            (((unsupported)).apply ((xelem)) ((xig)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((((unsupported)).apply ((xelem)) (0))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xik)) ((((unsupported)).apply ((xelem)) (2))))
                                bogusForceDataize.write ((((xdup).xappend)).apply ((xelem)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xdup)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xdup.write (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xg)))) (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((((xgroupby)).apply ((xs)) ((xtestR)))) ((xproto)))))))
                              (((unsupported)).apply ((((unsupported)).apply ((xik)) ((xig)))) (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((((xgroupby)).apply ((xg)) ((xtestR2)))) ((xproto)))))))
                                (((unsupported)).apply ((xelem)) ((xig)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xk)) ((((unsupported)).apply ((xelem)) (0))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xik)) ((((unsupported)).apply ((xelem)) (2))))
                                    bogusForceDataize.write ((((xdup).xappend)).apply ((xelem)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xdup)))
                        xkeys.write (((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ((xs)) ((xtestR)))))
                        xexpectedkeys.write (((xset)).apply ((((unsupported)).apply ((((unsupported)).apply ((xr)) (0))) ((xr)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((xkeys)))) ((xexpectedkeys)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xkeys)))) ((((xlen)).apply ((xexpectedkeys)))))
                        xs.write (((xlist)).apply ((((xzip)).apply ("AABBBAAAA") ((((xrange)).apply (9))))))
                        xit.write (((xgroupby)).apply ((xs)) ((xtestR)))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xg1)))) ((((xnext)).apply ((xit)))))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xg2)))) ((((xnext)).apply ((xit)))))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xg3)))) ((((xnext)).apply ((xit)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xg1)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xg2)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xg3)))) ((((unsupported)).apply ("A") (5))))
                        bogusForceDataize.write (((xlist)).apply ((xit)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xg3)))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xit.write (((xgroupby)).apply ((xs)) ((xtestR)))
                            (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xg)))) ((((xnext)).apply ((xit)))))
                            bogusForceDataize.write (((xnext)).apply ((xit)))
                            bogusForceDataize.write (((xnext)).apply ((xit)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xg)) ((xproto)))))))) ((((unsupported)).apply)))
                        xs.write "abracadabra"
                        xr.write (((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ((((xsorted)).apply ((xs)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) ((((unsupported)).apply ("a") ("b") ("c") ("d") ("r"))))
                        xr.write (((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ((((xsorted)).apply ((xs)))))) ((((xlist)).apply ((((xislice)).apply ((xg)) (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) ((((unsupported)).apply ("a") ("b") ("r"))))
                        xr.write (((unsupported)).apply ((((unsupported)).apply ((((xlen)).apply ((((xlist)).apply ((xg)))))) ((xk)))) ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ((((xsorted)).apply ((xs)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) ((((unsupported)).apply ((((unsupported)).apply (5) ("a"))) ((((unsupported)).apply (2) ("b"))) ((((unsupported)).apply (1) ("c"))) ((((unsupported)).apply (1) ("d"))) ((((unsupported)).apply (2) ("r"))))))
                        xr.write (((unsupported)).apply ((((unsupported)).apply ((xsorted)) ((((unsupported)).apply ((((unsupported)).apply ((((xlen)).apply ((((xlist)).apply ((xg)))))) ((xk)))) ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ((((xsorted)).apply ((xs)))))))) (TRUE))) ((((unsupported)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) ((((unsupported)).apply ((((unsupported)).apply (5) ("a"))) ((((unsupported)).apply (2) ("r"))) ((((unsupported)).apply (2) ("b"))))))
                        (((unsupported)).apply ((xException)))
                        xdelayed_raise.write
                          [xn]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                                  (((unsupported)).apply ("yo"))
                                (((unsupported)).apply ((xExpectedError)))
                        xgulp.write
                          [xiterable xkeyp xfunc]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((((xfunc)).apply ((xg)))) ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ((xiterable)) ((xkeyp)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExpectedError)) ((xgulp)) ((((xdelayed_raise)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExpectedError)) ((xgulp)) ((((xdelayed_raise)).apply (1))))
                        (((unsupported)).apply)
                          x__eq__.write
                            [xself xdst]
                              seq > @
                                (((unsupported)).apply ((xExpectedError)))
                        xs.write (((unsupported)).apply ((((xDummyCmp)).apply)) ((((xDummyCmp)).apply)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xExpectedError)) ((xgulp)) ((xs)) ((xid)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExpectedError)) ((xgulp)) ((xs)))
                        xkeyfunc.write
                          [xobj]
                            seq > @
                              (((xkeyfunc).xskip).greater 0).if
                                seq
                                  (((unsupported)).apply (((xkeyfunc).xskip)) (1))
                                  (((unsupported)).apply ((xobj)))
                                (((unsupported)).apply ((xExpectedError)))
                        (((unsupported)).apply (((xkeyfunc).xskip)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExpectedError)) ((xgulp)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))) ((xkeyfunc)))
                        (((unsupported)).apply (((xkeyfunc).xskip)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xExpectedError)) ((xgulp)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) ((xkeyfunc)))
                xtest_filter.write
                  [xself]
                    memory > xc
                    memory > xans
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilter)).apply ((xisEven)) ((((xrange)).apply (6))))))) ((((unsupported)).apply (0) (2) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilter)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply (0) (1) (0) (2) (0))))))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilter)).apply ((xbool)) ((((unsupported)).apply (0) (1) (0) (2) (0))))))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (4) ((((xfilter)).apply ((xisEven)) ((((xcount)).apply)))))) ((((unsupported)).apply (0) (2) (4) (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilter)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilter)) ((((unsupported)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilter)) ((((unsupported)).apply ((xx)))) ((((xrange)).apply (6))) (7))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilter)) ((xisEven)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xnext)) ((((xfilter)).apply ((((xrange)).apply (6))) ((((xrange)).apply (6))))))
                        xans.write (((unsupported)).apply (0) (2) (4))
                        xc.write (((xfilter)).apply ((xisEven)) ((((xrange)).apply (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xc)))))) ((xans)))
                        xc.write (((xfilter)).apply ((xisEven)) ((((xrange)).apply (6))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xc)))))) ((xans)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xc.write (((xfilter)).apply ((xisEven)) ((((xrange)).apply (6))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xc)) ((xproto)))))))) ((xans)))
                            bogusForceDataize.write (((xnext)).apply ((xc)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xc)) ((xproto)))))))) ((((unsupported)).apply ((xans)) ((((unsupported)).apply (1))))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xc.write (((xfilter)).apply ((xisEven)) ((((xrange)).apply (6))))
                            bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((xc)))
                xtest_filterfalse.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilterfalse)).apply ((xisEven)) ((((xrange)).apply (6))))))) ((((unsupported)).apply (1) (3) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilterfalse)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply (0) (1) (0) (2) (0))))))) ((((unsupported)).apply (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilterfalse)).apply ((xbool)) ((((unsupported)).apply (0) (1) (0) (2) (0))))))) ((((unsupported)).apply (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (4) ((((xfilterfalse)).apply ((xisEven)) ((((xcount)).apply)))))) ((((unsupported)).apply (1) (3) (5) (7))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilterfalse)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilterfalse)) ((((unsupported)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilterfalse)) ((((unsupported)).apply ((xx)))) ((((xrange)).apply (6))) (7))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilterfalse)) ((xisEven)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xnext)) ((((xfilterfalse)).apply ((((xrange)).apply (6))) ((((xrange)).apply (6))))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xfilterfalse)).apply ((xisEven)) ((((xrange)).apply (6))))))
                xtest_zip.write
                  [xself]
                    memory > xans
                    seq > @
                      seq
                        xans.write (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) ((((xzip)).apply ("abc") ((((xcount)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xans)) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip)).apply ("abc") ((((xrange)).apply (6))))))) ((((xlzip)).apply ("abc") ((((xrange)).apply (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip)).apply ("abcdef") ((((xrange)).apply (3))))))) ((((xlzip)).apply ("abcdef") ((((xrange)).apply (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xzip)).apply ("abcdef") ((((xcount)).apply)))))) ((((xlzip)).apply ("abcdef") ((((xrange)).apply (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip)).apply ("abcdef"))))) ((((xlzip)).apply ("abcdef"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip)).apply)))) ((((xlzip)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xzip)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xzip)) ((((xrange)).apply (3))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xtuple)).apply ((((xlist)).apply ((xpair)))))) ((xpair)) ((((xzip)).apply ("abc") ("def"))))) ((((xlzip)).apply ("abc") ("def"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpair)) ((xpair)) ((((xzip)).apply ("abc") ("def"))))) ((((xlzip)).apply ("abc") ("def"))))
                xtest_zip_tuple_reuse.write
                  [xself]
                    memory > xtestIntermediate
                    memory > xids
                    memory > xans
                    seq > @
                      (((unsupported)).apply)
                        xids.write (((xlist)).apply ((((xmap)).apply ((xid)) ((((xzip)).apply ("abc") ("def"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmin)).apply ((xids)))) ((((xmax)).apply ((xids)))))
                        xids.write (((xlist)).apply ((((xmap)).apply ((xid)) ((((xlist)).apply ((((xzip)).apply ("abc") ("def"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xdict).xfromkeys)).apply ((xids)))))) ((((xlen)).apply ((xids)))))
                        xans.write (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) (((((xcopy).xcopy)).apply ((((xzip)).apply ("abc") ((((xcount)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xans)) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ("c") (2))))))
                        xans.write (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) (((((xcopy).xdeepcopy)).apply ((((xzip)).apply ("abc") ((((xcount)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xans)) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ("c") (2))))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xans.write (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((((xzip)).apply ("abc") ((((xcount)).apply)))) ((xproto)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xans)) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ("c") (2))))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xtestIntermediate.write (((xzip)).apply ("abc") ((((xcount)).apply)))
                            bogusForceDataize.write (((xnext)).apply ((xtestIntermediate)))
                            xans.write (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xtestIntermediate)) ((xproto)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xans)) ((((unsupported)).apply ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ("c") (2))))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xzip)).apply ("abc") ((((xcount)).apply)))))
                xtest_ziplongest.write
                  [xself]
                    memory > xtarget
                    seq > @
                      seq
                        (((unsupported)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ("abc") ((((xrange)).apply (6))))) ((((unsupported)).apply ((((xrange)).apply (6))) ("abc"))) ((((unsupported)).apply ((((xrange)).apply (1000))) ((((xrange)).apply (2000) (2100))) ((((xrange)).apply (3000) (3050))))) ((((unsupported)).apply ((((xrange)).apply (1000))) ((((xrange)).apply (0))) ((((xrange)).apply (3000) (3050))) ((((xrange)).apply (1200))) ((((xrange)).apply (1500))))) ((((unsupported)).apply ((((xrange)).apply (1000))) ((((xrange)).apply (0))) ((((xrange)).apply (3000) (3050))) ((((xrange)).apply (1200))) ((((xrange)).apply (1500))) ((((xrange)).apply (0))))))))
                          seq
                            xtarget.write (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((xi).less (((xlen)).apply ((xarg)))).if (((unsupported)).apply ((xarg)) ((xi))) "None: is there a None literal in the EO language?")) ((xarg)) ((xargs)))))) ((xi)) ((((xrange)).apply ((((xmax)).apply ((((xmap)).apply ((xlen)) ((xargs)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip_longest)).apply ((((unsupported)).apply ((xargs)))))))) ((xtarget)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip_longest)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((((unsupported)).apply)))))))) ((xtarget)))
                            xtarget.write (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((((unsupported)).apply ((xe)) ("None: is there a None literal in the EO language?")).and "X").or (xe))) ((xe)) ((xt)))))) ((xt)) ((xtarget)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip_longest)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((((unsupported)).apply ((xdict)) ("X"))))))))) ((xtarget)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xzip_longest)).apply ("abcdef") ((((xcount)).apply)))))) ((((xlist)).apply ((((xzip)).apply ("abcdef") ((((xrange)).apply (3))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip_longest)).apply)))) ((((xlist)).apply ((((xzip)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip_longest)).apply ((((unsupported)).apply)))))) ((((xlist)).apply ((((xzip)).apply ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip_longest)).apply ("abcdef"))))) ((((xlist)).apply ((((xzip)).apply ("abcdef"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip_longest)).apply ("abc") ("defg") ((((unsupported)).apply ((((unsupported)).apply)))))))) ((((xlist)).apply ((((xzip)).apply (((((xlist)).apply ("abc")).add (((unsupported)).apply ("None: is there a None literal in the EO language?")))) ("defg"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xzip_longest)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xzip_longest)) ((((xrange)).apply (3))) (3))
                        (((unsupported)).apply ((xstmt)) ((((unsupported)).apply ("zip_longest('abc', fv=1)") ("zip_longest('abc', fillvalue=1, bogus_keyword=None)"))))
                          (((unsupported)).apply ((xTypeError)))
                            bogusForceDataize.write (((xeval)).apply ((xstmt)) ((((xglobals)).apply)) ((((xlocals)).apply)))
                            bogusForceDataize.write ((((xself).xfail)).apply (("Did not raise Type in:  ".add (xstmt))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xtuple)).apply ((((xlist)).apply ((xpair)))))) ((xpair)) ((((xzip_longest)).apply ("abc") ("def"))))) ((((xlist)).apply ((((xzip)).apply ("abc") ("def"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpair)) ((xpair)) ((((xzip_longest)).apply ("abc") ("def"))))) ((((xlist)).apply ((((xzip)).apply ("abc") ("def"))))))
                xtest_zip_longest_tuple_reuse.write
                  [xself]
                    memory > xids
                    seq > @
                      (((unsupported)).apply)
                        xids.write (((xlist)).apply ((((xmap)).apply ((xid)) ((((xzip_longest)).apply ("abc") ("def"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmin)).apply ((xids)))) ((((xmax)).apply ((xids)))))
                        xids.write (((xlist)).apply ((((xmap)).apply ((xid)) ((((xlist)).apply ((((xzip_longest)).apply ("abc") ("def"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xdict).xfromkeys)).apply ((xids)))))) ((((xlen)).apply ((xids)))))
                xtest_zip_longest_pickling.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xzip_longest)).apply ("abc") ("def"))))
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xzip_longest)).apply ("abc") ("defgh"))))
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((unsupported)).apply ((xzip_longest)) ("abc") ("defgh") (1))))
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xzip_longest)).apply ("") ("defgh"))))
                xtest_zip_longest_bad_iterable.write
                  [xself]
                    memory > xexception
                    memory > x__iter__
                    seq > @
                      seq
                        xexception.write (((xTypeError)).apply)
                        (((unsupported)).apply)
                          x__iter__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xexception)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                          bogusForceDataize.write (((xzip_longest)).apply ((((xBadIterable)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xcm).xexception)) ((xexception)))
                xtest_bug_7244.write
                  [xself]
                    memory > x__iter__
                    memory > xr1
                    memory > xit
                    memory > x__next__
                    memory > xr2
                    memory > xrun
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xo xt xe]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xo)) ((xo)))
                                    (((unsupported)).apply (((xself).xt)) ((((xint)).apply ((xt)))))
                                    (((unsupported)).apply (((xself).xe)) ((xe)))
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  (((xself).xt).greater 0).if
                                    seq
                                      (((unsupported)).apply (((xself).xt)) (1))
                                      (((unsupported)).apply (((xself).xo)))
                                    (((unsupported)).apply (((xself).xe)))
                        xr1.write (((xRepeater)).apply (1) (3) ((xStopIteration)))
                        xr2.write (((xRepeater)).apply (2) (4) ((xStopIteration)))
                        xrun.write
                          [xr1 xr2]
                            memory > xresult
                            seq > @
                              seq
                                xresult.write (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xj)))) ((((unsupported)).apply ((xzip_longest)) ((xr1)) ((xr2)) (0))))
                                  seq
                                    (((unsupported)).apply (((((xsupport).xcaptured_output)).apply ("stdout"))))
                                      bogusForceDataize.write (((xprint)).apply ((((unsupported)).apply ((xi)) ((xj)))))
                                    bogusForceDataize.write ((((xresult).xappend)).apply ((((unsupported)).apply ((xi)) ((xj)))))
                                (((unsupported)).apply ((xresult)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrun)).apply ((xr1)) ((xr2)))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (0) (2))))))
                        xr1.write (((xRepeater)).apply (1) (3) ((xRuntimeError)))
                        xr2.write (((xRepeater)).apply (2) (4) ((xStopIteration)))
                        xit.write (((unsupported)).apply ((xzip_longest)) ((xr1)) ((xr2)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) ((xnext)) ((xit)))
                xtest_product.write
                  [xself]
                    memory > xproduct2
                    memory > xargtypes
                    memory > xexpected_len
                    memory > xargs
                    memory > xproduct1
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xresult)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply ("ab"))) ((((unsupported)).apply ((((unsupported)).apply ("a"))) ((((unsupported)).apply ("b"))))))) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (2))) ((((xrange)).apply (3))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0))) ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (0) (2))) ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (1) (2))))))) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (0))) ((((xrange)).apply (2))) ((((xrange)).apply (3))))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (2))) ((((xrange)).apply (0))) ((((xrange)).apply (3))))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (2))) ((((xrange)).apply (3))) ((((xrange)).apply (0))))) ((((unsupported)).apply)))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xproduct)).apply ((((unsupported)).apply ((xargs)))))))) ((xresult)))
                            (((unsupported)).apply ((xr)) ((((xrange)).apply (4))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xproduct)).apply ((((unsupported)).apply (((xargs).mul (xr))))))))) ((((xlist)).apply ((((xproduct)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((((unsupported)).apply ((xdict)) ((xr)))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((((xproduct)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xrange)).apply (7)))).mul 6)))))))))) ((((unsupported)).apply (7) (6))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xproduct)) ((((xrange)).apply (6))) ("None: is there a None literal in the EO language?"))
                        xproduct1.write
                          []
                            memory > xn
                            memory > xindices
                            memory > xpools
                            seq > @
                              (((unsupported)).apply)
                                xpools.write ((((xlist)).apply ((((xmap)).apply ((xtuple)) ((xargs))))).mul ((((xkwds).xget)).apply ("repeat") (1)))
                                xn.write (((xlen)).apply ((xpools)))
                                ((xn).eq 0).if
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply)))
                                    (((unsupported)).apply)
                                (((xany)).apply ((((unsupported)).apply (((((xlen)).apply ((xpool))).eq 0)) ((xpool)) ((xpools))))).if
                                  (((unsupported)).apply)
                                xindices.write ((((unsupported)).apply (0)).mul (xn))
                                (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((((unsupported)).apply ((xpool)) ((xi)))) ((((xzip)).apply ((xpools)) ((xindices)))))))))
                                while.
                                  1
                                  [unused]
                                    seq > @
                                      (((unsupported)).apply ((xi)) ((((xreversed)).apply ((((xrange)).apply ((xn)))))))
                                        seq
                                          ((((unsupported)).apply ((xindices)) ((xi))).eq ((((xlen)).apply ((((unsupported)).apply ((xpools)) ((xi))))).sub 1)).if
                                            (((unsupported)).apply)
                                          (((unsupported)).apply ((((unsupported)).apply ((xindices)) ((xi)))) (1))
                                          (((unsupported)).apply ((xj)) ((((xrange)).apply (((xi).add 1)) ((xn)))))
                                            (((unsupported)).apply ((((unsupported)).apply ((xindices)) ((xj)))) (0))
                                          (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpool)) ((xi)))) ((((unsupported)).apply ((xpool)) ((xi)))) ((((xzip)).apply ((xpools)) ((xindices)))))))))
                                          (((unsupported)).apply)
                                        (((unsupported)).apply)
                        xproduct2.write
                          []
                            memory > xresult
                            memory > xpools
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                xpools.write ((((xlist)).apply ((((xmap)).apply ((xtuple)) ((xargs))))).mul ((((xkwds).xget)).apply ("repeat") (1)))
                                xresult.write (((unsupported)).apply ((((unsupported)).apply)))
                                (((unsupported)).apply ((xpool)) ((xpools)))
                                  xresult.write (((unsupported)).apply (((xx).add (((unsupported)).apply ((xy))))) ((xx)) ((xresult)) ((xy)) ((xpool)))
                                (((unsupported)).apply ((xprod)) ((xresult)))
                                  (((unsupported)).apply ((((xtuple)).apply ((xprod)))))
                        xargtypes.write (((unsupported)).apply ("") ("abc") ("") ((((xrange)).apply (0))) ((((xrange)).apply (4))) ((((unsupported)).apply ((xdict)) (1) (2) (3))) ((((xset)).apply ("abcdefg"))) ((((xrange)).apply (11))) ((((xtuple)).apply ((((xrange)).apply (13))))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          seq
                            xargs.write (((unsupported)).apply (((((xrandom).xchoice)).apply ((xargtypes)))) ((xj)) ((((xrange)).apply (((((xrandom).xrandrange)).apply (5))))))
                            xexpected_len.write (((xprod)).apply ((((xmap)).apply ((xlen)) ((xargs)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((((xproduct)).apply ((((unsupported)).apply ((xargs)))))))))) ((xexpected_len)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xproduct)).apply ((((unsupported)).apply ((xargs)))))))) ((((xlist)).apply ((((xproduct1)).apply ((((unsupported)).apply ((xargs)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xproduct)).apply ((((unsupported)).apply ((xargs)))))))) ((((xlist)).apply ((((xproduct2)).apply ((((unsupported)).apply ((xargs)))))))))
                            xargs.write (((xmap)).apply ((xiter)) ((xargs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((((xproduct)).apply ((((unsupported)).apply ((xargs)))))))))) ((xexpected_len)))
                xtest_product_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOverflowError)) ((xMemoryError)))))))
                          (((unsupported)).apply ((xproduct)) ((((unsupported)).apply (((((unsupported)).apply ("ab")).mul (((unsupported)).apply (2) (5)))))) ((((unsupported)).apply (2) (25))))
                xtest_product_tuple_reuse.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xset)).apply ((((xmap)).apply ((xid)) ((((xproduct)).apply ("abc") ("def"))))))))) (1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xlen)).apply ((((xset)).apply ((((xmap)).apply ((xid)) ((((xlist)).apply ((((xproduct)).apply ("abc") ("def"))))))))))) (1))
                xtest_product_pickling.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xresult)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply ("ab"))) ((((unsupported)).apply ((((unsupported)).apply ("a"))) ((((unsupported)).apply ("b"))))))) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (2))) ((((xrange)).apply (3))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0))) ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (0) (2))) ((((unsupported)).apply (1) (0))) ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (1) (2))))))) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (0))) ((((xrange)).apply (2))) ((((xrange)).apply (3))))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (2))) ((((xrange)).apply (0))) ((((xrange)).apply (3))))) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply ((((xrange)).apply (2))) ((((xrange)).apply (3))) ((((xrange)).apply (0))))) ((((unsupported)).apply)))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((((xproduct)).apply ((((unsupported)).apply ((xargs)))))))))) ((xresult)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((((xproduct)).apply ((((unsupported)).apply ((xargs)))))))))) ((xresult)))
                          (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xproduct)).apply ((((unsupported)).apply ((xargs)))))))
                xtest_product_issue_25021.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((xproduct)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3))))
                        bogusForceDataize.write ((((xp).x__setstate__)).apply ((((unsupported)).apply (0) (4096))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xp)))) ((((unsupported)).apply (2) (3))))
                        xp.write (((xproduct)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply)) ((((unsupported)).apply (3))))
                        bogusForceDataize.write ((((xp).x__setstate__)).apply ((((unsupported)).apply (0) (0) (4096))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xp)))
                xtest_repeat.write
                  [xself]
                    memory > xc
                    memory > xr
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xrepeat)) ("a") (3))))) ((((unsupported)).apply ("a") ("a") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ((((xrange)).apply (3))) ((((xrepeat)).apply ("a"))))) ((((unsupported)).apply ((((unsupported)).apply (0) ("a"))) ((((unsupported)).apply (1) ("a"))) ((((unsupported)).apply (2) ("a"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrepeat)).apply ("a") (3))))) ((((unsupported)).apply ("a") ("a") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xrepeat)).apply ("a"))))) ((((unsupported)).apply ("a") ("a") ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrepeat)).apply ("a") (0))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrepeat)).apply ("a") ((3.neg)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrepeat)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrepeat)) ("None: is there a None literal in the EO language?") (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xrepeat)) ("None: is there a None literal in the EO language?") ("a"))
                        xr.write (((xrepeat)).apply ((1.add (((unsupported)).apply))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xr)))) ("repeat((1+0j))"))
                        xr.write (((xrepeat)).apply ((1.add (((unsupported)).apply))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xr)))) ("repeat((1+0j), 5)"))
                        bogusForceDataize.write (((xlist)).apply ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xr)))) ("repeat((1+0j), 0)"))
                        xc.write (((unsupported)).apply ((xrepeat)) ("a") (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xc)))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (2) (((((xcopy).xcopy)).apply ((xc)))))) ((((xlist)).apply (("a".mul 2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (2) (((((xcopy).xdeepcopy)).apply ((xc)))))) ((((xlist)).apply (("a".mul 2)))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((unsupported)).apply ((xrepeat)) ("a") (10))))
                xtest_repeat_with_negative_times.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xrepeat)).apply ("a") ((1.neg)))))) ("repeat('a', 0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((xrepeat)).apply ("a") ((2.neg)))))) ("repeat('a', 0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xrepeat)) ("a") ((1.neg)))))) ("repeat('a', 0)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((xrepeat)) ("a") ((2.neg)))))) ("repeat('a', 0)"))
                xtest_map.write
                  [xself]
                    memory > xc
                    memory > xans
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply (((xoperator).xpow)) ((((xrange)).apply (3))) ((((xrange)).apply (1) (7))))))) ((((unsupported)).apply ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply ((xtupleize)) ("abc") ((((xrange)).apply (5))))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply ((xtupleize)) ("abc") ((((xcount)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ("c") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (2) ((((xmap)).apply ((xtupleize)) ("abc") ((((xcount)).apply)))))) ((((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply (((xoperator).xpow)) ((((unsupported)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xmap)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlist)) ((((xmap)).apply ("None: is there a None literal in the EO language?") ((((xrange)).apply (3))) ((((xrange)).apply (3))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xmap)) (((xoperator).xneg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xnext)) ((((xmap)).apply (10) ((((xrange)).apply (5))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xnext)) ((((xmap)).apply ((xerrfunc)) ((((unsupported)).apply (4))) ((((unsupported)).apply (5))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xnext)) ((((xmap)).apply ((xonearg)) ((((unsupported)).apply (4))) ((((unsupported)).apply (5))))))
                        xans.write (((unsupported)).apply ((((unsupported)).apply ("a") (0))) ((((unsupported)).apply ("b") (1))) ((((unsupported)).apply ("c") (2))))
                        xc.write (((xmap)).apply ((xtupleize)) ("abc") ((((xcount)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xc)))))) ((xans)))
                        xc.write (((xmap)).apply ((xtupleize)) ("abc") ((((xcount)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xc)))))) ((xans)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xc.write (((xmap)).apply ((xtupleize)) ("abc") ((((xcount)).apply)))
                            bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((xc)))
                xtest_starmap.write
                  [xself]
                    memory > xc
                    memory > xans
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xstarmap)).apply (((xoperator).xpow)) ((((xzip)).apply ((((xrange)).apply (3))) ((((xrange)).apply (1) (7))))))))) ((((unsupported)).apply ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtake)).apply (3) ((((xstarmap)).apply (((xoperator).xpow)) ((((xzip)).apply ((((xcount)).apply)) ((((xcount)).apply (1))))))))) ((((unsupported)).apply ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (2) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xstarmap)).apply (((xoperator).xpow)) ((((unsupported)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xstarmap)).apply (((xoperator).xpow)) ((((unsupported)).apply ((((xiter)).apply ((((unsupported)).apply (4) (5))))))))))) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlist)) ((((xstarmap)).apply (((xoperator).xpow)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xstarmap)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xstarmap)) (((xoperator).xpow)) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))) ("extra"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xnext)) ((((xstarmap)).apply (10) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xnext)) ((((xstarmap)).apply ((xerrfunc)) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xnext)) ((((xstarmap)).apply ((xonearg)) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))))))
                        xans.write (((unsupported)).apply ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (2) (3))))
                        xc.write (((xstarmap)).apply (((xoperator).xpow)) ((((xzip)).apply ((((xrange)).apply (3))) ((((xrange)).apply (1) (7))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xc)))))) ((xans)))
                        xc.write (((xstarmap)).apply (((xoperator).xpow)) ((((xzip)).apply ((((xrange)).apply (3))) ((((xrange)).apply (1) (7))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xc)))))) ((xans)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xc.write (((xstarmap)).apply (((xoperator).xpow)) ((((xzip)).apply ((((xrange)).apply (3))) ((((xrange)).apply (1) (7))))))
                            bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((xc)))
                xtest_islice.write
                  [xself]
                    memory > xc
                    memory > x__index__
                    memory > xwr
                    memory > xit
                    memory > x__init__
                    memory > xra
                    seq > @
                      seq
                        (((unsupported)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply (10) (20) (3))) ((((unsupported)).apply (10) (3) (20))) ((((unsupported)).apply (10) (20))) ((((unsupported)).apply (10) (10))) ((((unsupported)).apply (10) (3))) ((((unsupported)).apply (20))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (100))) ((((unsupported)).apply ((xargs)))))))) ((((xlist)).apply ((((xrange)).apply ((((unsupported)).apply ((xargs)))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xtgtargs)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (10) (110) (3))) ((((unsupported)).apply (10) (100) (3))))) ((((unsupported)).apply ((((unsupported)).apply (10) (110))) ((((unsupported)).apply (10) (100))))) ((((unsupported)).apply ((((unsupported)).apply (110))) ((((unsupported)).apply (100))))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (100))) ((((unsupported)).apply ((xargs)))))))) ((((xlist)).apply ((((xrange)).apply ((((unsupported)).apply ((xtgtargs)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (10))) ("None: is there a None literal in the EO language?"))))) ((((xlist)).apply ((((xrange)).apply (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (10))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((xlist)).apply ((((xrange)).apply (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (10))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((xlist)).apply ((((xrange)).apply (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (10))) (2) ("None: is there a None literal in the EO language?"))))) ((((xlist)).apply ((((xrange)).apply (2) (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (10))) (1) ("None: is there a None literal in the EO language?") (2))))) ((((xlist)).apply ((((xrange)).apply (1) (10) (2))))))
                        xit.write (((xiter)).apply ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((xit)) (3))))) ((((xlist)).apply ((((xrange)).apply (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply ((((xrange)).apply (3) (10))))))
                        xit.write (((xiter)).apply ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((xit)) (3) (3))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply ((((xrange)).apply (3) (10))))))
                        xra.write (((xrange)).apply (10))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xislice)) ((xra)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xislice)) ((xra)) (1) (2) (3) (4))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xislice)) ((xra)) ((5.neg)) (10) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xislice)) ((xra)) (1) ((5.neg)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xislice)) ((xra)) (1) (10) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xislice)) ((xra)) (1) (10) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xislice)) ((xra)) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xislice)) ((xra)) ("a") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xislice)) ((xra)) (1) ("a"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xislice)) ((xra)) ("a") (1) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xislice)) ((xra)) (1) ("a") (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((xlist)).apply ((((xislice)).apply ((((xcount)).apply)) (1) (10) ((xmaxsize)))))))) (1))
                        xc.write (((xcount)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((xc)) (1) (3) (50))))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xc)))) (3))
                        (((unsupported)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply (10) (20) (3))) ((((unsupported)).apply (10) (3) (20))) ((((unsupported)).apply (10) (20))) ((((unsupported)).apply (10) (3))) ((((unsupported)).apply (20))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((((xislice)).apply ((((xrange)).apply (100))) ((((unsupported)).apply ((xargs)))))))))) ((((xlist)).apply ((((xrange)).apply ((((unsupported)).apply ((xargs)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((((xislice)).apply ((((xrange)).apply (100))) ((((unsupported)).apply ((xargs)))))))))) ((((xlist)).apply ((((xrange)).apply ((((unsupported)).apply ((xargs)))))))))
                            (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xislice)).apply ((((xrange)).apply (100))) ((((unsupported)).apply ((xargs)))))))
                        xit.write (((unsupported)).apply ((xx)) ((xx)) ((((unsupported)).apply (1) (2))))
                        xwr.write ((((xweakref).xref)).apply ((xit)))
                        xit.write (((xislice)).apply ((xit)) (1))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((((xwr)).apply)))
                        bogusForceDataize.write (((xlist)).apply ((xit)))
                        bogusForceDataize.write ((((xsupport).xgc_collect)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xwr)).apply)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself xval]
                                seq > @
                                  (((unsupported)).apply (((xself).xval)) ((xval)))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xval)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (100))) ((((xIntLike)).apply (10))))))) ((((xlist)).apply ((((xrange)).apply (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (100))) ((((xIntLike)).apply (10))) ((((xIntLike)).apply (50))))))) ((((xlist)).apply ((((xrange)).apply (10) (50))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xrange)).apply (100))) ((((xIntLike)).apply (10))) ((((xIntLike)).apply (50))) ((((xIntLike)).apply (5))))))) ((((xlist)).apply ((((xrange)).apply (10) (50) (5))))))
                xtest_takewhile.write
                  [xself]
                    memory > xt
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply (1) (3) (5) (20) (2) (4) (6) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xtakewhile)).apply ((xunderten)) ((xdata)))))) ((((unsupported)).apply (1) (3) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xtakewhile)).apply ((xunderten)) ((((unsupported)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtakewhile)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtakewhile)) (((xoperator).xpow)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtakewhile)) (((xoperator).xpow)) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))) ("extra"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xnext)) ((((xtakewhile)).apply (10) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xnext)) ((((xtakewhile)).apply ((xerrfunc)) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))))))
                        xt.write (((xtakewhile)).apply ((xbool)) ((((unsupported)).apply (1) (1) (1) (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xt)))) ((((unsupported)).apply (1) (1) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((((xtakewhile)).apply ((xunderten)) ((xdata)))))))) ((((unsupported)).apply (1) (3) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((((xtakewhile)).apply ((xunderten)) ((xdata)))))))) ((((unsupported)).apply (1) (3) (5))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xtakewhile)).apply ((xunderten)) ((xdata)))))
                xtest_dropwhile.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply (1) (3) (5) (20) (2) (4) (6) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xdropwhile)).apply ((xunderten)) ((xdata)))))) ((((unsupported)).apply (20) (2) (4) (6) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xdropwhile)).apply ((xunderten)) ((((unsupported)).apply)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdropwhile)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdropwhile)) (((xoperator).xpow)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdropwhile)) (((xoperator).xpow)) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))) ("extra"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xnext)) ((((xdropwhile)).apply (10) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xnext)) ((((xdropwhile)).apply ((xerrfunc)) ((((unsupported)).apply ((((unsupported)).apply (4) (5))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((((xdropwhile)).apply ((xunderten)) ((xdata)))))))) ((((unsupported)).apply (20) (2) (4) (6) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((((xdropwhile)).apply ((xunderten)) ((xdata)))))))) ((((unsupported)).apply (20) (2) (4) (6) (8))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xdropwhile)).apply ((xunderten)) ((xdata)))))
                xtest_tee.write
                  [xself]
                    memory > xlong_ans
                    memory > xvalue
                    memory > xp
                    memory > xt3
                    memory > xresult
                    memory > xits
                    memory > xtnew
                    memory > xc
                    memory > xans
                    memory > xlists
                    memory > xn
                    memory > xorder
                    seq > @
                      seq
                        xn.write 200
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xirange)).apply ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlzip)).apply ((xa)) ((xb)))) ((((xlzip)).apply ((((xrange)).apply ((xn)))) ((((xrange)).apply ((xn)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xirange)).apply ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((xlist)).apply ((((xrange)).apply ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply ((xn)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xirange)).apply ((xn)))))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xa)))) ((xi)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply ((xn)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xirange)).apply ((xn)))))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xa)))) ((xi)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((xlist)).apply ((((xrange)).apply (100) ((xn)))))))
                        (((unsupported)).apply ((xj)) ((((xrange)).apply (5))))
                          seq
                            xorder.write (((((unsupported)).apply (0)).mul (xn)).add ((((unsupported)).apply (1)).mul (xn)))
                            bogusForceDataize.write ((((xrandom).xshuffle)).apply ((xorder)))
                            xlists.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            xits.write (((xtee)).apply ((((xirange)).apply ((xn)))))
                            (((unsupported)).apply ((xi)) ((xorder)))
                              seq
                                xvalue.write (((xnext)).apply ((((unsupported)).apply ((xits)) ((xi)))))
                                bogusForceDataize.write ((((((unsupported)).apply ((xlists)) ((xi))).xappend)).apply ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlists)) (0))) ((((xlist)).apply ((((xrange)).apply ((xn)))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlists)) (1))) ((((xlist)).apply ((((xrange)).apply ((xn)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtee)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtee)) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtee)) ((((unsupported)).apply (1) (2))) ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtee)) ((((unsupported)).apply (1) (2))) (3) ("x"))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ("abc"))))
                        xc.write (((((xtype)).apply ((xa)))).apply ("def"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xc)))) ((((xlist)).apply ("def"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)) ((xc)))) ((((xtee)).apply ((((xrange)).apply (2000))) (3))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (100))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xa)))) ((xi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((xlist)).apply ((((xrange)).apply (2000))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xnext)).apply ((xc)))) ((((xnext)).apply ((xc)))))) ((((xlist)).apply ((((xrange)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((xlist)).apply ((((xrange)).apply (100) (2000))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xc)))) ((((xlist)).apply ((((xrange)).apply (2) (2000))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtee)) ("abc") ("invalid"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xtee)) ((((unsupported)).apply)) ((1.neg)))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (5))))
                          seq
                            xresult.write (((xtee)).apply ("abc") ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xresult)))) ((xtuple)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresult)))) ((xn)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xlist)).apply ((xx)))) ((xx)) ((xresult)))) (((((unsupported)).apply ((((xlist)).apply ("abc")))).mul (xn))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ("abc"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xd)))) ((((xtee)).apply ((xa)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xa)) ((xc)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xt1)) ((xt2)))) ((((xtee)).apply ("abc"))))
                        xtnew.write (((xtype)).apply ((xt1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtnew)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtnew)) (10))
                        xt3.write (((xtnew)).apply ((xt1)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((xlist)).apply ((xt1)))) ((((xlist)).apply ((xt2)))) ((((xlist)).apply ((xt3)))) ((((xlist)).apply ("abc"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xrange)).apply (10))))))
                        xp.write ((((xweakref).xproxy)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xp)) ("__class__"))) ((((xtype)).apply ((xb)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xReferenceError)) ((xgetattr)) ((xp)) ("__class__"))
                        xans.write (((xlist)).apply ("abc"))
                        xlong_ans.write (((xlist)).apply ((((xrange)).apply (10000))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xa)))))) ((xans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xb)))))) ((xans)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xlist)).apply ((((xrange)).apply (10000))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xa)))))) ((xlong_ans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xb)))))) ((xlong_ans)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ("abc"))))
                        bogusForceDataize.write (((xtake)).apply (2) ((xa)))
                        bogusForceDataize.write (((xtake)).apply (1) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xa)))))) ((((unsupported)).apply ((xans)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xb)))))) ((((unsupported)).apply ((xans)) ((((unsupported)).apply (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ((xans)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ((xans)) ((((unsupported)).apply (1))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xrange)).apply (10000))))))
                        bogusForceDataize.write (((xtake)).apply (100) ((xa)))
                        bogusForceDataize.write (((xtake)).apply (60) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xa)))))) ((((unsupported)).apply ((xlong_ans)) ((((unsupported)).apply (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xb)))))) ((((unsupported)).apply ((xlong_ans)) ((((unsupported)).apply (60))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ((xlong_ans)) ((((unsupported)).apply (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ((xlong_ans)) ((((unsupported)).apply (60))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ("abc"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xa)))))) ((xans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xb)))))) ((xans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((xans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((xans)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xrange)).apply (10000))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xa)))))) ((xlong_ans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xb)))))) ((xlong_ans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((xlong_ans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((xlong_ans)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ("abc"))))
                        bogusForceDataize.write (((xtake)).apply (2) ((xa)))
                        bogusForceDataize.write (((xtake)).apply (1) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xa)))))) ((((unsupported)).apply ((xans)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xb)))))) ((((unsupported)).apply ((xans)) ((((unsupported)).apply (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ((xans)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ((xans)) ((((unsupported)).apply (1))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xrange)).apply (10000))))))
                        bogusForceDataize.write (((xtake)).apply (100) ((xa)))
                        bogusForceDataize.write (((xtake)).apply (60) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xa)))))) ((((unsupported)).apply ((xlong_ans)) ((((unsupported)).apply (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xb)))))) ((((unsupported)).apply ((xlong_ans)) ((((unsupported)).apply (60))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ((xlong_ans)) ((((unsupported)).apply (100))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xb)))) ((((unsupported)).apply ((xlong_ans)) ((((unsupported)).apply (60))))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            bogusForceDataize.write ((((xself).xpickletest)).apply ((xproto)) ((((xiter)).apply ((((xtee)).apply ("abc"))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ("abc"))))
                            (((unsupported)).apply (((xself).xpickletest)) ((xproto)) ((xa)) ((xans)))
                            (((unsupported)).apply (((xself).xpickletest)) ((xproto)) ((xb)) ((xans)))
                xtest_tee_del_backward.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xforward)) ((xbackward)))) ((((xtee)).apply ((((xrepeat)).apply ("None: is there a None literal in the EO language?") (20000000))))))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write (((xany)).apply ((xforward)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xbackward)))))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xforward)) ((xbackward)))))))
                            (((unsupported)).apply)
                xtest_tee_reenter.write
                  [xself]
                    memory > x__next__
                    memory > xfirst
                    memory > x__iter__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            xfirst.write TRUE
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__next__.write
                              [xself]
                                memory > xfirst
                                seq > @
                                  seq
                                    xfirst.write ((xself).xfirst)
                                    (((unsupported)).apply (((xself).xfirst)) (FALSE))
                                    (xfirst).if
                                      (((unsupported)).apply ((((xnext)).apply ((xb)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xI)).apply)))))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("tee"))))
                          bogusForceDataize.write (((xnext)).apply ((xa)))
                xtest_tee_concurrent.write
                  [xself]
                    memory > x__iter__
                    memory > xfinish
                    memory > xstart
                    memory > x__next__
                    memory > xthread
                    seq > @
                      seq
                        xstart.write ((((xthreading).xEvent)).apply)
                        xfinish.write ((((xthreading).xEvent)).apply)
                        (((unsupported)).apply)
                          seq
                            x__iter__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((xself)))
                            x__next__.write
                              [xself]
                                seq > @
                                  seq
                                    bogusForceDataize.write ((((xstart).xset)).apply)
                                    bogusForceDataize.write ((((xfinish).xwait)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)))) ((((xtee)).apply ((((xI)).apply)))))
                        xthread.write (((unsupported)).apply (((xthreading).xThread)) ((xnext)) ((((unsupported)).apply ((xa)))))
                        bogusForceDataize.write ((((xthread).xstart)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xstart).xwait)).apply)
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xRuntimeError)) ("tee"))))
                              bogusForceDataize.write (((xnext)).apply ((xb)))
                          seq
                            bogusForceDataize.write ((((xfinish).xset)).apply)
                            bogusForceDataize.write ((((xthread).xjoin)).apply)
                xtest_StopIteration.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((((xzip)).apply)))
                        (((unsupported)).apply ((xf)) ((((unsupported)).apply ((xchain)) ((xcycle)) ((xzip)) ((xgroupby)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((((xf)).apply ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((((xf)).apply ((((xStopNow)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((((xislice)).apply ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((((xislice)).apply ((((xStopNow)).apply)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xq)))) ((((xtee)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xp)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xq)))
                        (((unsupported)).apply ((((unsupported)).apply ((xp)) ((xq)))) ((((xtee)).apply ((((xStopNow)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xp)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xq)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((((xrepeat)).apply ("None: is there a None literal in the EO language?") (0))))
                        (((unsupported)).apply ((xf)) ((((unsupported)).apply ((xfilter)) ((xfilterfalse)) ((xmap)) ((xtakewhile)) ((xdropwhile)) ((xstarmap)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((((xf)).apply ((((unsupported)).apply ((xx)))) ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((((xf)).apply ((((unsupported)).apply ((xx)))) ((((xStopNow)).apply)))))
                xtest_combinations_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xit.write (((xcombinations)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) (1))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xnext)).apply ((xit)))))))
                xtest_combinations_with_replacement_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xit.write (((xcombinations_with_replacement)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) (1))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xnext)).apply ((xit)))))))
                xtest_permutations_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xit.write (((xpermutations)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))) (1))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xnext)).apply ((xit)))))))
                xtest_product_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xit.write (((xproduct)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xnext)).apply ((xit)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xnext)).apply ((xit)))))))
                xtest_zip_longest_result_gc.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xit.write (((xzip_longest)).apply ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xgc).xis_tracked)).apply ((((xnext)).apply ((xit)))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_accumulate.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((((unsupported)).apply (1) (2) (3) (4) (5))))))) ((((unsupported)).apply (1) (3) (6) (10) (15))))
                xtest_accumulate_reducible.write
                  [xself]
                    memory > xaccumulated
                    memory > xit
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply (1) (2) (3) (4) (5))
                        xaccumulated.write (((unsupported)).apply (1) (3) (6) (10) (15))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xit.write (((xaccumulate)).apply ((xdata)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xit)) ((xproto)))))))) ((((unsupported)).apply ((xaccumulated)) ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xit)) ((xproto)))))))) ((((unsupported)).apply ((xaccumulated)) ((((unsupported)).apply (1))))))
                        xit.write (((xaccumulate)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xit)))))) ((((unsupported)).apply ((xaccumulated)) ((((unsupported)).apply (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xit)))))) ((((unsupported)).apply ((xaccumulated)) ((((unsupported)).apply (1))))))
                xtest_accumulate_reducible_none.write
                  [xself]
                    memory > xit
                    memory > xit_copy
                    seq > @
                      seq
                        xit.write (((xaccumulate)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))) (((xoperator).xis_)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xit)))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xit_copy.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xit)) ((xproto)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit_copy)))) ((((unsupported)).apply (TRUE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xdeepcopy)).apply ((xit)))))) ((((unsupported)).apply (TRUE) (FALSE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xcopy).xcopy)).apply ((xit)))))) ((((unsupported)).apply (TRUE) (FALSE))))
                xtest_chain.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((("".xjoin)).apply ((((xchain)).apply ("ABC") ("DEF"))))) ("ABCDEF"))
                xtest_chain_from_iterable.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((("".xjoin)).apply (((((xchain).xfrom_iterable)).apply ((((unsupported)).apply ("ABC") ("DEF"))))))) ("ABCDEF"))
                xtest_combinations.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcombinations)).apply ("ABCD") (2))))) ((((unsupported)).apply ((((unsupported)).apply ("A") ("B"))) ((((unsupported)).apply ("A") ("C"))) ((((unsupported)).apply ("A") ("D"))) ((((unsupported)).apply ("B") ("C"))) ((((unsupported)).apply ("B") ("D"))) ((((unsupported)).apply ("C") ("D"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcombinations)).apply ((((xrange)).apply (4))) (3))))) ((((unsupported)).apply ((((unsupported)).apply (0) (1) (2))) ((((unsupported)).apply (0) (1) (3))) ((((unsupported)).apply (0) (2) (3))) ((((unsupported)).apply (1) (2) (3))))))
                xtest_combinations_with_replacement.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcombinations_with_replacement)).apply ("ABC") (2))))) ((((unsupported)).apply ((((unsupported)).apply ("A") ("A"))) ((((unsupported)).apply ("A") ("B"))) ((((unsupported)).apply ("A") ("C"))) ((((unsupported)).apply ("B") ("B"))) ((((unsupported)).apply ("B") ("C"))) ((((unsupported)).apply ("C") ("C"))))))
                xtest_compress.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcompress)).apply ("ABCDEF") ((((unsupported)).apply (1) (0) (1) (0) (1) (1))))))) ((((xlist)).apply ("ACEF"))))
                xtest_count.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xcount)).apply (10))) (5))))) ((((unsupported)).apply (10) (11) (12) (13) (14))))
                xtest_cycle.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xcycle)).apply ("ABCD"))) (12))))) ((((xlist)).apply ("ABCDABCDABCD"))))
                xtest_dropwhile.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xdropwhile)).apply ((((unsupported)).apply (((xx).less 5)))) ((((unsupported)).apply (1) (4) (6) (4) (1))))))) ((((unsupported)).apply (6) (4) (1))))
                xtest_groupby.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ("AAAABBBCCDAABBB"))))) ((((xlist)).apply ("ABCDAB"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xlist)).apply ((xg)))) ((((unsupported)).apply ((xk)) ((xg)))) ((((xgroupby)).apply ("AAAABBBCCD"))))) ((((unsupported)).apply ((((xlist)).apply ("AAAA"))) ((((xlist)).apply ("BBB"))) ((((xlist)).apply ("CC"))) ((((xlist)).apply ("D"))))))
                xtest_filter.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilter)).apply ((((unsupported)).apply (((xx).mod 2)))) ((((xrange)).apply (10))))))) ((((unsupported)).apply (1) (3) (5) (7) (9))))
                xtest_filterfalse.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilterfalse)).apply ((((unsupported)).apply (((xx).mod 2)))) ((((xrange)).apply (10))))))) ((((unsupported)).apply (0) (2) (4) (6) (8))))
                xtest_map.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply ((xpow)) ((((unsupported)).apply (2) (3) (10))) ((((unsupported)).apply (5) (2) (3))))))) ((((unsupported)).apply (32) (9) (1000))))
                xtest_islice.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ("ABCDEFG") (2))))) ((((xlist)).apply ("AB"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ("ABCDEFG") (2) (4))))) ((((xlist)).apply ("CD"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ("ABCDEFG") (2) ("None: is there a None literal in the EO language?"))))) ((((xlist)).apply ("CDEFG"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ("ABCDEFG") (0) ("None: is there a None literal in the EO language?") (2))))) ((((xlist)).apply ("ACEG"))))
                xtest_zip.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip)).apply ("ABCD") ("xy"))))) ((((unsupported)).apply ((((unsupported)).apply ("A") ("x"))) ((((unsupported)).apply ("B") ("y"))))))
                xtest_zip_longest.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xzip_longest)) ("ABCD") ("xy") ("-"))))) ((((unsupported)).apply ((((unsupported)).apply ("A") ("x"))) ((((unsupported)).apply ("B") ("y"))) ((((unsupported)).apply ("C") ("-"))) ((((unsupported)).apply ("D") ("-"))))))
                xtest_permutations.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xpermutations)).apply ("ABCD") (2))))) ((((xlist)).apply ((((xmap)).apply ((xtuple)) (((("AB AC AD BA BC BD CA CB CD DA DB DC".xsplit)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xpermutations)).apply ((((xrange)).apply (3))))))) ((((unsupported)).apply ((((unsupported)).apply (0) (1) (2))) ((((unsupported)).apply (0) (2) (1))) ((((unsupported)).apply (1) (0) (2))) ((((unsupported)).apply (1) (2) (0))) ((((unsupported)).apply (2) (0) (1))) ((((unsupported)).apply (2) (1) (0))))))
                xtest_product.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xproduct)).apply ("ABCD") ("xy"))))) ((((xlist)).apply ((((xmap)).apply ((xtuple)) (((("Ax Ay Bx By Cx Cy Dx Dy".xsplit)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xproduct)) ((((xrange)).apply (2))) (3))))) ((((unsupported)).apply ((((unsupported)).apply (0) (0) (0))) ((((unsupported)).apply (0) (0) (1))) ((((unsupported)).apply (0) (1) (0))) ((((unsupported)).apply (0) (1) (1))) ((((unsupported)).apply (1) (0) (0))) ((((unsupported)).apply (1) (0) (1))) ((((unsupported)).apply (1) (1) (0))) ((((unsupported)).apply (1) (1) (1))))))
                xtest_repeat.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xrepeat)).apply (10) (3))))) ((((unsupported)).apply (10) (10) (10))))
                xtest_stapmap.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xstarmap)).apply ((xpow)) ((((unsupported)).apply ((((unsupported)).apply (2) (5))) ((((unsupported)).apply (3) (2))) ((((unsupported)).apply (10) (3))))))))) ((((unsupported)).apply (32) (9) (1000))))
                xtest_takewhile.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xtakewhile)).apply ((((unsupported)).apply (((xx).less 5)))) ((((unsupported)).apply (1) (4) (6) (4) (1))))))) ((((unsupported)).apply (1) (4))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xislice.write
                  [xiterable]
                    memory > xs
                    memory > xnexti
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xs.write (((xslice)).apply ((((unsupported)).apply ((xargs)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))) ((((unsupported)).apply ((((xs).xstart).or 0)) ((((xs).xstop).or ((xsys).xmaxsize))) ((((xs).xstep).or 1)))))
                        xit.write (((xiter)).apply ((((xrange)).apply ((xstart)) ((xstop)) ((xstep)))))
                        (((unsupported)).apply ((xStopIteration)))
                          xnexti.write (((xnext)).apply ((xit)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xelement)))) ((((xzip)).apply ((((xrange)).apply ((xstart)))) ((xiterable)))))
                            (((unsupported)).apply)
                        (((unsupported)).apply ((xStopIteration)))
                          (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xelement)))) ((((xenumerate)).apply ((xiterable)))))
                            ((xi).eq (xnexti)).if
                              seq
                                (((unsupported)).apply ((xelement)))
                                xnexti.write (((xnext)).apply ((xit)))
                          (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xelement)))) ((((xzip)).apply ((((xrange)).apply (((xi).add 1)) ((xstop)))) ((xiterable)))))
                xtest_islice_recipe.write
                  [xself]
                    memory > xc
                    memory > xit
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xself).xislice)).apply ("ABCDEFG") (2))))) ((((xlist)).apply ("AB"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xself).xislice)).apply ("ABCDEFG") (2) (4))))) ((((xlist)).apply ("CD"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xself).xislice)).apply ("ABCDEFG") (2) ("None: is there a None literal in the EO language?"))))) ((((xlist)).apply ("CDEFG"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xself).xislice)).apply ("ABCDEFG") (0) ("None: is there a None literal in the EO language?") (2))))) ((((xlist)).apply ("ACEG"))))
                        xit.write (((xiter)).apply ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xself).xislice)).apply ((xit)) (3))))) ((((xlist)).apply ((((xrange)).apply (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply ((((xrange)).apply (3) (10))))))
                        xit.write (((xiter)).apply ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xself).xislice)).apply ((xit)) (3) (3))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((xlist)).apply ((((xrange)).apply (3) (10))))))
                        xc.write (((xcount)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xself).xislice)).apply ((xc)) (1) (3) (50))))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xc)))) (3))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xmakecycle.write
                  [xself xiterator xcontainer]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xcontainer).xappend)).apply ((xiterator)))
                        bogusForceDataize.write (((xnext)).apply ((xiterator)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontainer)) ((xiterator)))))))
                xtest_accumulate.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xaccumulate)).apply ((((unsupported)).apply (1) (2) ((xa)) (3))))) ((xa)))
                xtest_chain.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xchain)).apply ((xa)))) ((xa)))
                xtest_chain_from_iterable.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply (((((xchain).xfrom_iterable)).apply ((((unsupported)).apply ((xa)))))) ((xa)))
                xtest_combinations.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xcombinations)).apply ((((unsupported)).apply (1) (2) ((xa)) (3))) (3))) ((xa)))
                xtest_combinations_with_replacement.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xcombinations_with_replacement)).apply ((((unsupported)).apply (1) (2) ((xa)) (3))) (3))) ((xa)))
                xtest_compress.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xcompress)).apply ("ABCDEF") ((((unsupported)).apply (1) (0) (1) (0) (1) (0))))) ((xa)))
                xtest_count.write
                  [xself]
                    memory > xInt
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        xInt.write (((xtype)).apply ("Int") ((((unsupported)).apply ((xint)))) ((((unsupported)).apply ((xdict)) ((xa)))))
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xcount)).apply ((((xInt)).apply (0))) ((((xInt)).apply (1))))) ((xa)))
                xtest_cycle.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xcycle)).apply (((((unsupported)).apply ((xa))).mul 2)))) ((xa)))
                xtest_dropwhile.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xdropwhile)).apply ((xbool)) ((((unsupported)).apply (0) ((xa)) ((xa)))))) ((xa)))
                xtest_groupby.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xgroupby)).apply (((((unsupported)).apply ((xa))).mul 2)) ((((unsupported)).apply ((xx)))))) ((xa)))
                xtest_issue2246.write
                  [xself]
                    memory > xn
                    memory > xkeyfunc
                    seq > @
                      seq
                        xn.write 10
                        xkeyfunc.write (((unsupported)).apply ((xx)))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xj)))) ((((unsupported)).apply ((xgroupby)) ((((xrange)).apply ((xn)))) ((xkeyfunc)))))
                          bogusForceDataize.write ((((((((xkeyfunc).x__dict__).xsetdefault)).apply ("x") ((((unsupported)).apply))).xappend)).apply ((xj)))
                xtest_filter.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xfilter)).apply ((((unsupported)).apply (TRUE))) (((((unsupported)).apply ((xa))).mul 2)))) ((xa)))
                xtest_filterfalse.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xfilterfalse)).apply ((((unsupported)).apply (FALSE))) ((xa)))) ((xa)))
                xtest_zip.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xzip)).apply (((((unsupported)).apply ((xa))).mul 2)) (((((unsupported)).apply ((xa))).mul 3)))) ((xa)))
                xtest_zip_longest.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xzip_longest)).apply (((((unsupported)).apply ((xa))).mul 2)) (((((unsupported)).apply ((xa))).mul 3)))) ((xa)))
                        xb.write (((unsupported)).apply ((xa)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((unsupported)).apply ((xzip_longest)) (((((unsupported)).apply ((xa))).mul 2)) (((((unsupported)).apply ((xa))).mul 3)) ((xb)))) ((xa)))
                xtest_map.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xmap)).apply ((((unsupported)).apply ((xx)))) (((((unsupported)).apply ((xa))).mul 2)))) ((xa)))
                xtest_islice.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xislice)).apply (((((unsupported)).apply ((xa))).mul 2)) ("None: is there a None literal in the EO language?"))) ((xa)))
                xtest_permutations.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xpermutations)).apply ((((unsupported)).apply (1) (2) ((xa)) (3))) (3))) ((xa)))
                xtest_product.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((unsupported)).apply ((xproduct)) ((((unsupported)).apply (1) (2) ((xa)) (3))) (3))) ((xa)))
                xtest_repeat.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xrepeat)).apply ((xa)))) ((xa)))
                xtest_starmap.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xstarmap)).apply ((((unsupported)).apply ((xt)))) (((((unsupported)).apply ((((unsupported)).apply ((xa)) ((xa))))).mul 2)))) ((xa)))
                xtest_takewhile.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xmakecycle)).apply ((((xtakewhile)).apply ((xbool)) ((((unsupported)).apply (1) (0) ((xa)) ((xa)))))) ((xa)))
            xR.write
              [xseqn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((xi)) ((xseqn)))
                      (((unsupported)).apply ((xi)))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      (((unsupported)).apply (((xself).xseqn)) ((xseqn)))
                x__getitem__.write
                  [xself xi]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xseqn)) ((xi)))))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xseqn)) ((xseqn)))
                        (((unsupported)).apply (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
                x__next__.write
                  [xself]
                    memory > xv
                    seq > @
                      seq
                        (((xself).xi).geq (((xlen)).apply (((xself).xseqn)))).if
                          (((unsupported)).apply ((xStopIteration)))
                        xv.write (((unsupported)).apply (((xself).xseqn)) (((xself).xi)))
                        (((unsupported)).apply (((xself).xi)) (1))
                        (((unsupported)).apply ((xv)))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xseqn)) ((xseqn)))
                        (((unsupported)).apply (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xval)) (((xself).xseqn)))
                        (((unsupported)).apply ((xval)))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xseqn)) ((xseqn)))
                        (((unsupported)).apply (((xself).xi)) (0))
                x__next__.write
                  [xself]
                    memory > xv
                    seq > @
                      seq
                        (((xself).xi).geq (((xlen)).apply (((xself).xseqn)))).if
                          (((unsupported)).apply ((xStopIteration)))
                        xv.write (((unsupported)).apply (((xself).xseqn)) (((xself).xi)))
                        (((unsupported)).apply (((xself).xi)) (1))
                        (((unsupported)).apply ((xv)))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xseqn)) ((xseqn)))
                        (((unsupported)).apply (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xseqn)) ((xseqn)))
                        (((unsupported)).apply (((xself).xi)) (0))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
                x__next__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (3) (0))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xseqn]
                    seq > @
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
                x__next__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xStopIteration)))
            xL.write
              [xseqn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((xchain)).apply ((((xmap)).apply ((((unsupported)).apply ((xx)))) ((((xR)).apply ((((xIg)).apply ((((xG)).apply ((xseqn)))))))))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_accumulate.write
                  [xself]
                    memory > xn
                    memory > xs
                    memory > xr
                    seq > @
                      seq
                        xs.write (((unsupported)).apply (1) (2) (3) (4) (5))
                        xr.write (((unsupported)).apply (1) (3) (6) (10) (15))
                        xn.write (((xlen)).apply ((xs)))
                        (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xL)) ((xR)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((((xg)).apply ((xs)))))))) ((xr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xaccumulate)).apply ((((xS)).apply ((xs)))))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xaccumulate)) ((((xX)).apply ((xs)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xaccumulate)) ((((xN)).apply ((xs)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xaccumulate)).apply ((((xE)).apply ((xs)))))))
                xtest_chain.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("123") ("") ((((xrange)).apply (1000))) ((((unsupported)).apply ("do") (1.2))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xchain)).apply ((((xg)).apply ((xs)))))))) ((((xlist)).apply ((((xg)).apply ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xchain)).apply ((((xg)).apply ((xs)))) ((((xg)).apply ((xs)))))))) (((((xlist)).apply ((((xg)).apply ((xs))))).add (((xlist)).apply ((((xg)).apply ((xs))))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlist)) ((((xchain)).apply ((((xX)).apply ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xlist)) ((((xchain)).apply ((((xN)).apply ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xchain)).apply ((((xE)).apply ((xs)))))))
                xtest_compress.write
                  [xself]
                    memory > xn
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("123") ("") ((((xrange)).apply (1000))) ((((unsupported)).apply ("do") (1.2))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          xn.write (((xlen)).apply ((xs)))
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xcompress)).apply ((((xg)).apply ((xs)))) ((((xrepeat)).apply (1))))))) ((((xlist)).apply ((((xg)).apply ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompress)) ((((xX)).apply ((xs)))) ((((xrepeat)).apply (1))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcompress)) ((((xN)).apply ((xs)))) ((((xrepeat)).apply (1))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xcompress)).apply ((((xE)).apply ((xs)))) ((((xrepeat)).apply (1))))))
                xtest_product.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("123") ("") ((((xrange)).apply (1000))) ((((unsupported)).apply ("do") (1.2))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xproduct)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xproduct)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xproduct)) ((((xE)).apply ((xs)))))
                xtest_cycle.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    memory > xtgtlen
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("123") ("") ((((xrange)).apply (1000))) ((((unsupported)).apply ("do") (1.2))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              xtgtlen.write ((((xlen)).apply ((xs))).mul 3)
                              xexpected.write ((((xlist)).apply ((((xg)).apply ((xs))))).mul 3)
                              xactual.write (((xlist)).apply ((((xislice)).apply ((((xcycle)).apply ((((xg)).apply ((xs)))))) ((xtgtlen)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcycle)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcycle)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xcycle)).apply ((((xE)).apply ((xs)))))))
                xtest_groupby.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xrange)).apply (10))) ((((xrange)).apply (0))) ((((xrange)).apply (1000))) ((((unsupported)).apply (7) (11))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xk)) ((((unsupported)).apply ((xk)) ((xsb)))) ((((xgroupby)).apply ((((xg)).apply ((xs)))))))) ((((xlist)).apply ((((xg)).apply ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xgroupby)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xgroupby)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xgroupby)).apply ((((xE)).apply ((xs)))))))
                xtest_filter.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xrange)).apply (10))) ((((xrange)).apply (0))) ((((xrange)).apply (1000))) ((((unsupported)).apply (7) (11))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilter)).apply ((xisEven)) ((((xg)).apply ((xs)))))))) ((((unsupported)).apply ((xx)) ((xx)) ((((xg)).apply ((xs)))) ((((xisEven)).apply ((xx)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilter)) ((xisEven)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilter)) ((xisEven)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xfilter)).apply ((xisEven)) ((((xE)).apply ((xs)))))))
                xtest_filterfalse.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xrange)).apply (10))) ((((xrange)).apply (0))) ((((xrange)).apply (1000))) ((((unsupported)).apply (7) (11))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xfilterfalse)).apply ((xisEven)) ((((xg)).apply ((xs)))))))) ((((unsupported)).apply ((xx)) ((xx)) ((((xg)).apply ((xs)))) ((((xisOdd)).apply ((xx)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilterfalse)) ((xisEven)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xfilterfalse)) ((xisEven)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xfilterfalse)).apply ((xisEven)) ((((xE)).apply ((xs)))))))
                xtest_zip.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("123") ("") ((((xrange)).apply (1000))) ((((unsupported)).apply ("do") (1.2))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip)).apply ((((xg)).apply ((xs)))))))) ((((xlzip)).apply ((((xg)).apply ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip)).apply ((((xg)).apply ((xs)))) ((((xg)).apply ((xs)))))))) ((((xlzip)).apply ((((xg)).apply ((xs)))) ((((xg)).apply ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xzip)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xzip)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xzip)).apply ((((xE)).apply ((xs)))))))
                xtest_ziplongest.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("123") ("") ((((xrange)).apply (1000))) ((((unsupported)).apply ("do") (1.2))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip_longest)).apply ((((xg)).apply ((xs)))))))) ((((xlist)).apply ((((xzip)).apply ((((xg)).apply ((xs)))))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xzip_longest)).apply ((((xg)).apply ((xs)))) ((((xg)).apply ((xs)))))))) ((((xlist)).apply ((((xzip)).apply ((((xg)).apply ((xs)))) ((((xg)).apply ((xs)))))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xzip_longest)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xzip_longest)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xzip_longest)).apply ((((xE)).apply ((xs)))))))
                xtest_map.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xrange)).apply (10))) ((((xrange)).apply (0))) ((((xrange)).apply (100))) ((((unsupported)).apply (7) (11))) ((((xrange)).apply (20) (50) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply ((xonearg)) ((((xg)).apply ((xs)))))))) ((((unsupported)).apply ((((xonearg)).apply ((xx)))) ((xx)) ((((xg)).apply ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply (((xoperator).xpow)) ((((xg)).apply ((xs)))) ((((xg)).apply ((xs)))))))) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xx)))) ((xx)) ((((xg)).apply ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xmap)) ((xonearg)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xmap)) ((xonearg)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xmap)).apply ((xonearg)) ((((xE)).apply ((xs)))))))
                xtest_islice.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("12345") ("") ((((xrange)).apply (1000))) ((((unsupported)).apply ("do") (1.2))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xislice)).apply ((((xg)).apply ((xs)))) (1) ("None: is there a None literal in the EO language?") (2))))) ((((unsupported)).apply ((((xlist)).apply ((((xg)).apply ((xs)))))) ((((unsupported)).apply (1) (2))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xislice)) ((((xX)).apply ((xs)))) (10))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xislice)) ((((xN)).apply ((xs)))) (10))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xislice)).apply ((((xE)).apply ((xs)))) (10))))
                xtest_starmap.write
                  [xself]
                    memory > xss
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xrange)).apply (10))) ((((xrange)).apply (0))) ((((xrange)).apply (100))) ((((unsupported)).apply (7) (11))) ((((xrange)).apply (20) (50) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              xss.write (((xlzip)).apply ((xs)) ((xs)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xstarmap)).apply (((xoperator).xpow)) ((((xg)).apply ((xss)))))))) ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xx)))) ((xx)) ((((xg)).apply ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xstarmap)) (((xoperator).xpow)) ((((xX)).apply ((xss)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xstarmap)) (((xoperator).xpow)) ((((xN)).apply ((xss)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xstarmap)).apply (((xoperator).xpow)) ((((xE)).apply ((xss)))))))
                xtest_takewhile.write
                  [xself]
                    memory > xtgt
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xrange)).apply (10))) ((((xrange)).apply (0))) ((((xrange)).apply (1000))) ((((unsupported)).apply (7) (11))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              xtgt.write (((unsupported)).apply)
                              (((unsupported)).apply ((xelem)) ((((xg)).apply ((xs)))))
                                seq
                                  ((((xisEven)).apply ((xelem))).not).if
                                    (((unsupported)).apply)
                                  bogusForceDataize.write ((((xtgt).xappend)).apply ((xelem)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xtakewhile)).apply ((xisEven)) ((((xg)).apply ((xs)))))))) ((xtgt)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtakewhile)) ((xisEven)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtakewhile)) ((xisEven)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xtakewhile)).apply ((xisEven)) ((((xE)).apply ((xs)))))))
                xtest_dropwhile.write
                  [xself]
                    memory > xtgt
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xrange)).apply (10))) ((((xrange)).apply (0))) ((((xrange)).apply (1000))) ((((unsupported)).apply (7) (11))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              xtgt.write (((unsupported)).apply)
                              (((unsupported)).apply ((xelem)) ((((xg)).apply ((xs)))))
                                seq
                                  (((xtgt).not).and (((xisOdd)).apply ((xelem)))).if
                                    (((unsupported)).apply)
                                  bogusForceDataize.write ((((xtgt).xappend)).apply ((xelem)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xdropwhile)).apply ((xisOdd)) ((((xg)).apply ((xs)))))))) ((xtgt)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdropwhile)) ((xisOdd)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xdropwhile)) ((xisOdd)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((xdropwhile)).apply ((xisOdd)) ((((xE)).apply ((xs)))))))
                xtest_tee.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xs)) ((((unsupported)).apply ("123") ("") ((((xrange)).apply (1000))) ((((unsupported)).apply ("do") (1.2))) ((((xrange)).apply (2000) (2200) (5))))))
                        seq
                          (((unsupported)).apply ((xg)) ((((unsupported)).apply ((xG)) ((xI)) ((xIg)) ((xS)) ((xL)) ((xR)))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xit1)) ((xit2)))) ((((xtee)).apply ((((xg)).apply ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit1)))) ((((xlist)).apply ((((xg)).apply ((xs)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit2)))) ((((xlist)).apply ((((xg)).apply ((xs)))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtee)) ((((xX)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xtee)) ((((xN)).apply ((xs)))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((xlist)) ((((unsupported)).apply ((((xtee)).apply ((((xE)).apply ((xs)))))) (0))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_repeat.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoperator).xlength_hint)).apply ((((xrepeat)).apply ("None: is there a None literal in the EO language?") (50))))) (50))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoperator).xlength_hint)).apply ((((xrepeat)).apply ("None: is there a None literal in the EO language?") (0))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoperator).xlength_hint)).apply ((((xrepeat)).apply ("None: is there a None literal in the EO language?"))) (12))) (12))
                xtest_repeat_with_negative_times.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoperator).xlength_hint)).apply ((((xrepeat)).apply ("None: is there a None literal in the EO language?") ((1.neg)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoperator).xlength_hint)).apply ((((xrepeat)).apply ("None: is there a None literal in the EO language?") ((2.neg)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoperator).xlength_hint)).apply ((((unsupported)).apply ((xrepeat)) ("None: is there a None literal in the EO language?") ((1.neg)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoperator).xlength_hint)).apply ((((unsupported)).apply ((xrepeat)) ("None: is there a None literal in the EO language?") ((2.neg)))))) (0))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_sf_793826.write
                  [xself]
                    memory > xfirst
                    memory > xmutatingtuple
                    memory > xf
                    memory > xsecond
                    seq > @
                      seq
                        xmutatingtuple.write
                          [xtuple1 xf xtuple2]
                            memory > xgen
                            memory > xitems
                            memory > xz
                            memory > xg
                            seq > @
                              seq
                                xg.write
                                  [xvalue xfirst]
                                    seq > @
                                      (((unsupported)).apply)
                                        (xfirst).if
                                          seq
                                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfirst)) ((((unsupported)).apply)))))))))
                                            bogusForceDataize.write (((xf)).apply ((((xnext)).apply ((xz)))))
                                        (((unsupported)).apply ((xvalue)))
                                xitems.write (((xlist)).apply ((xtuple2)))
                                (((unsupported)).apply ((((unsupported)).apply ((xitems)) ((((unsupported)).apply (1) (1))))) ((((xlist)).apply ((xtuple1)))))
                                xgen.write (((xmap)).apply ((xg)) ((xitems)))
                                xz.write (((xzip)).apply ((((unsupported)).apply (((((unsupported)).apply ((xgen))).mul (((xlen)).apply ((xtuple1))))))))
                                bogusForceDataize.write (((xnext)).apply ((xz)))
                        xf.write
                          [xt]
                            memory > xT
                            seq > @
                              seq
                                (((unsupported)).apply)
                                xT.write (xt)
                                (((unsupported)).apply ((((unsupported)).apply ((xfirst)) ((((unsupported)).apply)))) ((((xlist)).apply ((xT)))))
                        xfirst.write (((unsupported)).apply)
                        bogusForceDataize.write (((xmutatingtuple)).apply ((((unsupported)).apply (1) (2) (3))) ((xf)) ((((unsupported)).apply (4) (5) (6))))
                        xsecond.write (((xlist)).apply ((xT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfirst)) ((xsecond)))
                xtest_sf_950057.write
                  [xself]
                    memory > xhist
                    memory > xgen2
                    memory > xgen1
                    seq > @
                      seq
                        xgen1.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xhist).xappend)).apply (0))
                                (((unsupported)).apply (1))
                                bogusForceDataize.write ((((xhist).xappend)).apply (1))
                                (((unsupported)).apply ((xAssertionError)))
                                bogusForceDataize.write ((((xhist).xappend)).apply (2))
                        xgen2.write
                          [xx]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xhist).xappend)).apply (3))
                                (((unsupported)).apply (2))
                                bogusForceDataize.write ((((xhist).xappend)).apply (4))
                        xhist.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAssertionError)) ((xlist)) ((((xchain)).apply ((((xgen1)).apply)) ((((xgen2)).apply (FALSE))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhist)) ((((unsupported)).apply (0) (1))))
                        xhist.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAssertionError)) ((xlist)) ((((xchain)).apply ((((xgen1)).apply)) ((((xgen2)).apply (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhist)) ((((unsupported)).apply (0) (1))))
                        xhist.write (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAssertionError)) ((xlist)) ((((xcycle)).apply ((((xgen1)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhist)) ((((unsupported)).apply (0) (1))))
                xtest_long_chain_of_empty_iterables.write
                  [xself]
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        xit.write ((((xchain).xfrom_iterable)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((xunused)) ((((xrange)).apply (10000000))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xStopIteration)))))
                          bogusForceDataize.write (((xnext)).apply ((xit)))
                xtest_issue30347_1.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xn]
                            seq > @
                              seq
                                ((xn).eq 5).if
                                  bogusForceDataize.write (((xlist)).apply ((xb)))
                                (((unsupported)).apply (((xn).neq 6)))
                        (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xb)))) ((((xgroupby)).apply ((((xrange)).apply (10))) ((xf)))))
                          bogusForceDataize.write (((xlist)).apply ((xb)))
                xtest_issue30347_2.write
                  [xself]
                    memory > x__eq__
                    memory > xi
                    memory > x__init__
                    memory > xg
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xv]
                                seq > @
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((unsupported)).apply)
                                    (((unsupported)).apply ((xi)) (1))
                                    ((xi).eq 1).if
                                      bogusForceDataize.write (((xnext)).apply ((xg)) ("None: is there a None literal in the EO language?"))
                                    (((unsupported)).apply (TRUE))
                        xi.write 0
                        xg.write (((unsupported)).apply ((((xnext)).apply ((((xgroupby)).apply ((((xrange)).apply (10))) ((xK)))))) (1))
                        (((unsupported)).apply ((xj)) ((((xrange)).apply (2))))
                          bogusForceDataize.write (((xnext)).apply ((xg)) ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_keywords_in_subclass.write
                [xself]
                  memory > x__init__
                  seq > @
                    (((unsupported)).apply ((xcls)) ((((unsupported)).apply ((xrepeat)) ((xzip)) ((xfilter)) ((xfilterfalse)) ((xchain)) ((xmap)) ((xstarmap)) ((xislice)) ((xtakewhile)) ((xdropwhile)) ((xcycle)) ((xcompress)))))
                      seq
                        (((unsupported)).apply ((xcls)))
                          x__init__.write
                            [xself xnewarg]
                              seq > @
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((xcls).x__init__)).apply ((xself)) ((((unsupported)).apply ((xargs)))))
                        (((unsupported)).apply ((xTypeError)))
                          (((unsupported)).apply ((xSubclass)) (1))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ("keyword arguments") ((((unsupported)).apply (((xerr).xargs)) (0))))
            (((unsupported)).apply (((xunittest).xTestCase)) (((xsupport).xcpython_only)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xssize_t)) (((((xstruct).xcalcsize)).apply ("n"))))
                xcheck_sizeof.write ((xsupport).xcheck_sizeof)
                xtest_product_sizeof.write
                  [xself]
                    memory > xbasesize
                    memory > xcheck
                    seq > @
                      seq
                        xbasesize.write ((((xsupport).xcalcobjsize)).apply ("3Pi"))
                        xcheck.write ((xself).xcheck_sizeof)
                        bogusForceDataize.write (((xcheck)).apply ((((xproduct)).apply ("ab") ("12"))) (((xbasesize).add (2.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xproduct)).apply ((((unsupported)).apply (((((unsupported)).apply ("abc")).mul 10)))))) (((xbasesize).add (10.mul ((xself).xssize_t)))))
                xtest_combinations_sizeof.write
                  [xself]
                    memory > xbasesize
                    memory > xcheck
                    seq > @
                      seq
                        xbasesize.write ((((xsupport).xcalcobjsize)).apply ("3Pni"))
                        xcheck.write ((xself).xcheck_sizeof)
                        bogusForceDataize.write (((xcheck)).apply ((((xcombinations)).apply ("abcd") (3))) (((xbasesize).add (3.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcombinations)).apply ((((xrange)).apply (10))) (4))) (((xbasesize).add (4.mul ((xself).xssize_t)))))
                xtest_combinations_with_replacement_sizeof.write
                  [xself]
                    memory > xcwr
                    memory > xbasesize
                    memory > xcheck
                    seq > @
                      seq
                        xcwr.write (xcombinations_with_replacement)
                        xbasesize.write ((((xsupport).xcalcobjsize)).apply ("3Pni"))
                        xcheck.write ((xself).xcheck_sizeof)
                        bogusForceDataize.write (((xcheck)).apply ((((xcwr)).apply ("abcd") (3))) (((xbasesize).add (3.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xcwr)).apply ((((xrange)).apply (10))) (4))) (((xbasesize).add (4.mul ((xself).xssize_t)))))
                xtest_permutations_sizeof.write
                  [xself]
                    memory > xbasesize
                    memory > xcheck
                    seq > @
                      seq
                        xbasesize.write ((((xsupport).xcalcobjsize)).apply ("4Pni"))
                        xcheck.write ((xself).xcheck_sizeof)
                        bogusForceDataize.write (((xcheck)).apply ((((xpermutations)).apply ("abcd"))) ((((xbasesize).add (4.mul ((xself).xssize_t))).add (4.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xpermutations)).apply ("abcd") (3))) ((((xbasesize).add (4.mul ((xself).xssize_t))).add (3.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xpermutations)).apply ("abcde") (3))) ((((xbasesize).add (5.mul ((xself).xssize_t))).add (3.mul ((xself).xssize_t)))))
                        bogusForceDataize.write (((xcheck)).apply ((((xpermutations)).apply ((((xrange)).apply (10))) (4))) ((((xbasesize).add (10.mul ((xself).xssize_t))).add (4.mul ((xself).xssize_t)))))
            xlibreftest.write (((unsupported)).apply)
            x__test__.write (((unsupported)).apply ("libreftest") ((xlibreftest)))
            xtest_main.write
              [xverbose]
                memory > xtest_classes
                memory > xcounts
                seq > @
                  (((unsupported)).apply)
                    xtest_classes.write (((unsupported)).apply ((xTestBasicOps)) ((xTestVariousIteratorArgs)) ((xTestGC)) ((xRegressionTests)) ((xLengthTransparency)) ((xSubclassWithKwargsTest)) ((xTestExamples)) ((xTestPurePythonRoughEquivalents)) ((xSizeofTest)))
                    bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((((unsupported)).apply ((xtest_classes)))))
                    ((xverbose).and (((xhasattr)).apply ((xsys)) ("gettotalrefcount"))).if
                      seq
                        (((unsupported)).apply)
                        xcounts.write ((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xcounts)))))))
                          seq
                            bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((((unsupported)).apply ((xtest_classes)))))
                            bogusForceDataize.write ((((xgc).xcollect)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xcounts)) ((xi)))) (((((xsys).xgettotalrefcount)).apply)))
                        bogusForceDataize.write (((xprint)).apply ((xcounts)))
                    bogusForceDataize.write ((((xsupport).xrun_doctest)).apply ((((unsupported)).apply (((xsys).xmodules)) ((x__name__)))) ((xverbose)))
            ((x__name__).eq "__main__").if
              (((unsupported)).apply ((xtest_main)) (TRUE))