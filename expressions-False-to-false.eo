memory > xarg_sql
memory > xexpr
memory > xExpression
memory > xd
memory > xSQLiteNumericMixin
memory > xinspect
memory > xexpression_sql
memory > xTemporalSubtraction
memory > xfalse
memory > xWindowFrame
memory > xAttributeError
memory > xc
memory > xRef
memory > xEmptyResultSet
memory > xexpr_sql
memory > xWhen
memory > xdatetime
memory > xall
memory > xSubquery
memory > xlist
memory > xparent
memory > xenumerate
memory > xFunc
memory > xcondition_params
memory > xframe_sql
memory > xsql_expr
memory > xValueError
memory > xparent_field
memory > xstr
memory > xQ
memory > xdefault_params
memory > xFieldError
memory > xlookups
memory > xfields
memory > xframe_params
memory > xWindow
memory > xCase
memory > xLOOKUP_SEP
memory > xpos
memory > xarg_params
memory > xvalue
memory > xcolumn_name
memory > xdeconstructible
memory > xresult_sql
memory > xlhs
memory > xwindow_params
memory > x_
memory > xalias
memory > xResolvedOuterRef
memory > xcase
memory > xextra
memory > xNotImplementedError
memory > xcase_params
memory > xconnection
memory > xstart
memory > xrhs
memory > xCombinable
memory > xDurationExpression
memory > xorder_params
memory > xany
memory > xtype
memory > xValue
memory > xresult_params
memory > xcase_sql
memory > xint
memory > xBaseExpression
memory > xDatabaseError
memory > xhasattr
memory > xOrderBy
memory > xend
memory > xdefault_sql
memory > xparams
memory > xNotSupportedError
memory > xwindow_sql
memory > xF
memory > xarg
memory > xfield_type
memory > xsuper
memory > xsubquery_sql
memory > xbool
memory > xissubclass
memory > xfield_types
memory > xbytes
memory > xtuple
memory > xexpressions
memory > xNotImplemented
memory > xsorted
memory > xfloat
memory > xconnector
memory > xargs
memory > xExpressionList
memory > xUUID
memory > xcolumn
memory > xmake_hashable
memory > xval
memory > xgetattr
memory > xextra_context
memory > xcombinator_rhs_type
memory > xsql
memory > xdefaultdict
memory > xe
memory > xtarget
memory > xOrderByList
memory > xDecimal
memory > xsource
memory > xresult
memory > xcombined_type
memory > xhash
memory > xmap
memory > xcombinator_lhs_type
memory > xCombinedExpression
memory > xkwargs
memory > xabs
memory > xisinstance
memory > xlen
memory > xcases
memory > xcondition_sql
memory > xorder_sql
memory > xTypeError
memory > xsql_params
memory > xkey
[] > expressions
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_get_repr_options
        memory > xtemplate
        memory > x__rmod__
        memory > xselect_format
        memory > xoutput_field
        memory > xwindow_compatible
        memory > xconvert_value
        memory > x__str__
        memory > xcopy
        memory > xfield
        memory > xbitand
        memory > x_combine
        memory > xwindow_frame_start_end
        memory > xget_lookup
        memory > xframe_type
        memory > x__radd__
        memory > xflatten
        memory > xrelabeled_clone
        memory > xas_oracle
        memory > x__eq__
        memory > x__repr__
        memory > xBITRIGHTSHIFT
        memory > xcase_joiner
        memory > x__pow__
        memory > x__truediv__
        memory > xempty_result_set_value
        memory > x__sub__
        memory > x_connector_combinators
        memory > xarg_joiner
        memory > xMUL
        memory > xDIV
        memory > xcontains_aggregate
        memory > xfor_save
        memory > x__rxor__
        memory > xdesc
        memory > xregister_combinable_fields
        memory > x__xor__
        memory > x_parse_expressions
        memory > xpossibly_multivalued
        memory > x_resolve_output_field
        memory > x__rmul__
        memory > x__invert__
        memory > x_output_field_resolved_to_none
        memory > x__ror__
        memory > xSUB
        memory > xNoneType
        memory > xget_db_converters
        memory > xbitleftshift
        memory > xcontains_over_clause
        memory > xbitxor
        memory > xget_source_expressions
        memory > xarity
        memory > x__rsub__
        memory > x_connector_combinations
        memory > xas_sql
        memory > xset_source_expressions
        memory > x__rand__
        memory > x_resolve_combined_type
        memory > x__or__
        memory > x__getstate__
        memory > x__rtruediv__
        memory > xMOD
        memory > xcompile
        memory > xas_sqlite
        memory > x_output_field_or_none
        memory > xBITXOR
        memory > xBITAND
        memory > xasc
        memory > x_convert_value_noop
        memory > xget_group_by_cols
        memory > xget_source_fields
        memory > xbitrightshift
        memory > x__add__
        memory > x__neg__
        memory > x__mod__
        memory > xbitor
        memory > xconditional
        memory > xcontains_column_references
        memory > x__init__
        memory > xis_summary
        memory > xget_external_cols
        memory > x__hash__
        memory > xfunction
        memory > xresolve_expression
        memory > xexternal_aliases
        memory > x__rpow__
        memory > xidentity
        memory > xfilterable
        memory > xPOW
        memory > x__and__
        memory > xADD
        memory > xreverse_ordering
        memory > xget_transform
        memory > xBITOR
        memory > x__mul__
        memory > xBITLEFTSHIFT
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    memory > xsql
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xself).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
                        (((unsupported)).apply ((xFieldError)))
                          ((((((xself).xoutput_field).xget_internal_type)).apply).eq "DecimalField").if
                            xsql.write ("CAST(%s AS NUMERIC)".mod (xsql))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xADD.write "+"
                xSUB.write "-"
                xMUL.write "*"
                xDIV.write "/"
                xPOW.write "^"
                xMOD.write "%%"
                xBITAND.write "&"
                xBITOR.write "|"
                xBITLEFTSHIFT.write "<<"
                xBITRIGHTSHIFT.write ">>"
                xBITXOR.write "#"
                x_combine.write
                  [xself xother xconnector xreversed]
                    seq > @
                      seq
                        ((((xhasattr)).apply ((xother)) ("resolve_expression")).not).if
                          xother.write (((xValue)).apply ((xother)))
                        (xreversed).if
                          (((unsupported)).apply ((((xCombinedExpression)).apply ((xother)) ((xconnector)) ((xself)))))
                        (((unsupported)).apply ((((xCombinedExpression)).apply ((xself)) ((xconnector)) ((xother)))))
                x__neg__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((1.neg)) (((xself).xMUL)) ((xfalse)))))
                x__add__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xADD)) ((xfalse)))))
                x__sub__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xSUB)) ((xfalse)))))
                x__mul__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xMUL)) ((xfalse)))))
                x__truediv__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xDIV)) ((xfalse)))))
                x__mod__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xMOD)) ((xfalse)))))
                x__pow__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xPOW)) ((xfalse)))))
                x__and__.write
                  [xself xother]
                    seq > @
                      seq
                        ((((xgetattr)).apply ((xself)) ("conditional") ((xfalse))).and (((xgetattr)).apply ((xother)) ("conditional") ((xfalse)))).if
                          (((unsupported)).apply (((((xQ)).apply ((xself))).and (((xQ)).apply ((xother))))))
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations."))))
                xbitand.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xBITAND)) ((xfalse)))))
                xbitleftshift.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xBITLEFTSHIFT)) ((xfalse)))))
                xbitrightshift.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xBITRIGHTSHIFT)) ((xfalse)))))
                x__xor__.write
                  [xself xother]
                    seq > @
                      seq
                        ((((xgetattr)).apply ((xself)) ("conditional") ((xfalse))).and (((xgetattr)).apply ((xother)) ("conditional") ((xfalse)))).if
                          (((unsupported)).apply ((((unsupported)).apply ((((xQ)).apply ((xself)))) ((((xQ)).apply ((xother)))))))
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations."))))
                xbitxor.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xBITXOR)) ((xfalse)))))
                x__or__.write
                  [xself xother]
                    seq > @
                      seq
                        ((((xgetattr)).apply ((xself)) ("conditional") ((xfalse))).and (((xgetattr)).apply ((xother)) ("conditional") ((xfalse)))).if
                          (((unsupported)).apply (((((xQ)).apply ((xself))).or (((xQ)).apply ((xother))))))
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations."))))
                xbitor.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xBITOR)) ((xfalse)))))
                x__radd__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xADD)) (TRUE))))
                x__rsub__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xSUB)) (TRUE))))
                x__rmul__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xMUL)) (TRUE))))
                x__rtruediv__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xDIV)) (TRUE))))
                x__rmod__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xMOD)) (TRUE))))
                x__rpow__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x_combine)).apply ((xother)) (((xself).xPOW)) (TRUE))))
                x__rand__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xNotImplementedError)).apply ("Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations."))))
                x__ror__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xNotImplementedError)).apply ("Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations."))))
                x__rxor__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xNotImplementedError)).apply ("Use .bitand(), .bitor(), and .bitxor() for bitwise logical operations."))))
            (((unsupported)).apply)
              seq
                unsupported
                xempty_result_set_value.write (xNotImplemented)
                xis_summary.write (xfalse)
                x_output_field_resolved_to_none.write (xfalse)
                xfilterable.write TRUE
                xwindow_compatible.write (xfalse)
                x__init__.write
                  [xself xoutput_field]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xoutput_field)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xoutput_field)) ((xoutput_field)))
                x__getstate__.write
                  [xself]
                    memory > xstate
                    seq > @
                      seq
                        xstate.write (((((xself).x__dict__).xcopy)).apply)
                        bogusForceDataize.write ((((xstate).xpop)).apply ("convert_value") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xstate)))
                xget_db_converters.write
                  [xself xconnection]
                    seq > @
                      (((unsupported)).apply ((((((unsupported)).apply (((xself).xconvert_value)) (((xself).x_convert_value_noop))).if (((unsupported)).apply) (((unsupported)).apply (((xself).xconvert_value)))).add (((((xself).xoutput_field).xget_db_converters)).apply ((xconnection))))))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply)))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply (((xexprs).not)))
                x_parse_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((((xhasattr)).apply ((xarg)) ("resolve_expression")).if (xarg) ((((xisinstance)).apply ((xarg)) ((xstr))).if (((xF)).apply ((xarg))) (((xValue)).apply ((xarg)))))) ((xarg)) ((xexpressions)))))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("Subclasses must implement as_sql()"))))
                xcontains_aggregate.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xany)).apply ((((unsupported)).apply (((xexpr).and ((xexpr).xcontains_aggregate))) ((xexpr)) (((((xself).xget_source_expressions)).apply)))))))
                xcontains_over_clause.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xany)).apply ((((unsupported)).apply (((xexpr).and ((xexpr).xcontains_over_clause))) ((xexpr)) (((((xself).xget_source_expressions)).apply)))))))
                xcontains_column_references.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xany)).apply ((((unsupported)).apply (((xexpr).and ((xexpr).xcontains_column_references))) ((xexpr)) (((((xself).xget_source_expressions)).apply)))))))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    memory > xc
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xc.write ((((xself).xcopy)).apply)
                        (((unsupported)).apply (((xc).xis_summary)) ((xsummarize)))
                        bogusForceDataize.write ((((xc).xset_source_expressions)).apply ((((unsupported)).apply (((xexpr).if ((((xexpr).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize))) "None: is there a None literal in the EO language?")) ((xexpr)) (((((xc).xget_source_expressions)).apply)))))
                        (((unsupported)).apply ((xc)))
                xconditional.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xisinstance)).apply (((xself).xoutput_field)) (((xfields).xBooleanField)))))
                xfield.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xoutput_field)))
                xoutput_field.write
                  [xself]
                    memory > xoutput_field
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xoutput_field.write ((((xself).x_resolve_output_field)).apply)
                        (((unsupported)).apply ((xoutput_field)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply (((xself).x_output_field_resolved_to_none)) (TRUE))
                            (((unsupported)).apply ((((xFieldError)).apply ("Cannot resolve expression type, unknown output_field"))))
                        (((unsupported)).apply ((xoutput_field)))
                x_output_field_or_none.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xFieldError)))
                          (((unsupported)).apply (((xself).xoutput_field)))
                          (((xself).x_output_field_resolved_to_none).not).if
                            (((unsupported)).apply)
                x_resolve_output_field.write
                  [xself]
                    memory > xsources_iter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xsources_iter.write (((unsupported)).apply ((xsource)) ((xsource)) (((((xself).xget_source_fields)).apply)) ((((unsupported)).apply ((xsource)) ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((xoutput_field)) ((xsources_iter)))
                          seq
                            (((unsupported)).apply ((xsource)) ((xsources_iter)))
                              ((((xisinstance)).apply ((xoutput_field)) (((xsource).x__class__))).not).if
                                (((unsupported)).apply ((((xFieldError)).apply (("Expression contains mixed types: %s, %s. You must set output_field.".mod (((unsupported)).apply ((((xoutput_field).x__class__).x__name__)) ((((xsource).x__class__).x__name__))))))))
                            (((unsupported)).apply ((xoutput_field)))
                x_convert_value_noop.write
                  [xvalue xexpression xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xvalue)))
                xconvert_value.write
                  [xself]
                    memory > xfield
                    memory > xinternal_type
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xfield.write ((xself).xoutput_field)
                        xinternal_type.write ((((xfield).xget_internal_type)).apply)
                        ((xinternal_type).eq "FloatField").if
                          (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if "None: is there a None literal in the EO language?" (((xfloat)).apply ((xvalue))))))))
                          ((((xinternal_type).xendswith)).apply ("IntegerField")).if
                            (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if "None: is there a None literal in the EO language?" (((xint)).apply ((xvalue))))))))
                            ((xinternal_type).eq "DecimalField").if
                              (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if "None: is there a None literal in the EO language?" (((xDecimal)).apply ((xvalue))))))))
                        (((unsupported)).apply (((xself).x_convert_value_noop)))
                xget_lookup.write
                  [xself xlookup]
                    seq > @
                      (((unsupported)).apply ((((((xself).xoutput_field).xget_lookup)).apply ((xlookup)))))
                xget_transform.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply ((((((xself).xoutput_field).xget_transform)).apply ((xname)))))
                xrelabeled_clone.write
                  [xself xchange_map]
                    memory > xclone
                    seq > @
                      seq
                        xclone.write ((((xself).xcopy)).apply)
                        bogusForceDataize.write ((((xclone).xset_source_expressions)).apply ((((unsupported)).apply (((((unsupported)).apply ((xe)) ("None: is there a None literal in the EO language?")).if ((((xe).xrelabeled_clone)).apply ((xchange_map))) "None: is there a None literal in the EO language?")) ((xe)) (((((xself).xget_source_expressions)).apply)))))
                        (((unsupported)).apply ((xclone)))
                xcopy.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xcopy).xcopy)).apply ((xself)))))
                xget_group_by_cols.write
                  [xself xalias]
                    memory > xcols
                    seq > @
                      (((unsupported)).apply)
                        (((xself).xcontains_aggregate).not).if
                          (((unsupported)).apply ((((unsupported)).apply ((xself)))))
                        xcols.write (((unsupported)).apply)
                        (((unsupported)).apply ((xsource)) (((((xself).xget_source_expressions)).apply)))
                          bogusForceDataize.write ((((xcols).xextend)).apply (((((xsource).xget_group_by_cols)).apply)))
                        (((unsupported)).apply ((xcols)))
                xget_source_fields.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xe).x_output_field_or_none)) ((xe)) (((((xself).xget_source_expressions)).apply)))))
                xasc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xOrderBy)).apply ((xself)) ((((unsupported)).apply ((xkwargs)))))))
                xdesc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xOrderBy)) ((xself)) (TRUE) ((((unsupported)).apply ((xkwargs)))))))
                xreverse_ordering.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
                xflatten.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((xexpr)) (((((xself).xget_source_expressions)).apply)))
                          (xexpr).if
                            (((xhasattr)).apply ((xexpr)) ("flatten")).if
                              (((unsupported)).apply (((((xexpr).xflatten)).apply)))
                              (((unsupported)).apply ((xexpr)))
                xselect_format.write
                  [xself xcompiler xsql xparams]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xhasattr)).apply (((xself).xoutput_field)) ("select_format")).if
                          (((unsupported)).apply ((((((xself).xoutput_field).xselect_format)).apply ((xcompiler)) ((xsql)) ((xparams)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))))
            (((unsupported)).apply ((xBaseExpression)) ((xCombinable)) ((xdeconstructible)))
              seq
                unsupported
                xidentity.write
                  [xself]
                    memory > xarguments
                    memory > xvalue
                    memory > xconstructor_signature
                    memory > xsignature
                    memory > xidentity
                    seq > @
                      (((unsupported)).apply)
                        xconstructor_signature.write ((((xinspect).xsignature)).apply (((xself).x__init__)))
                        (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))) (((xself).x_constructor_args)))
                        xsignature.write ((((xconstructor_signature).xbind_partial)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xsignature).xapply_defaults)).apply)
                        xarguments.write (((((xsignature).xarguments).xitems)).apply)
                        xidentity.write (((unsupported)).apply (((xself).x__class__)))
                        (((unsupported)).apply ((((unsupported)).apply ((xarg)) ((xvalue)))) ((xarguments)))
                          seq
                            (((xisinstance)).apply ((xvalue)) (((xfields).xField))).if
                              (((xvalue).xname).and ((xvalue).xmodel)).if
                                xvalue.write (((unsupported)).apply (((((xvalue).xmodel).x_meta).xlabel)) (((xvalue).xname)))
                                xvalue.write (((xtype)).apply ((xvalue)))
                              xvalue.write (((xmake_hashable)).apply ((xvalue)))
                            bogusForceDataize.write ((((xidentity).xappend)).apply ((((unsupported)).apply ((xarg)) ((xvalue)))))
                        (((unsupported)).apply ((((xtuple)).apply ((xidentity)))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      seq
                        ((((xisinstance)).apply ((xother)) ((xExpression))).not).if
                          (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply ((((xother).xidentity).eq ((xself).xidentity))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xhash)).apply (((xself).xidentity)))))
            xNoneType.write (((xtype)).apply ("None: is there a None literal in the EO language?"))
            x_connector_combinations.write (((unsupported)).apply ((((unsupported)).apply ((xconnector)) ((((unsupported)).apply ((((unsupported)).apply (((xfields).xIntegerField)) (((xfields).xIntegerField)) (((xfields).xIntegerField)))) ((((unsupported)).apply (((xfields).xFloatField)) (((xfields).xFloatField)) (((xfields).xFloatField)))) ((((unsupported)).apply (((xfields).xDecimalField)) (((xfields).xDecimalField)) (((xfields).xDecimalField)))))) ((xconnector)) ((((unsupported)).apply (((xCombinable).xADD)) (((xCombinable).xSUB)) (((xCombinable).xMUL)) (((xCombinable).xDIV)) (((xCombinable).xMOD)) (((xCombinable).xPOW)))))) ((((unsupported)).apply ((xconnector)) ((((unsupported)).apply ((((unsupported)).apply (((xfields).xIntegerField)) (((xfields).xDecimalField)) (((xfields).xDecimalField)))) ((((unsupported)).apply (((xfields).xDecimalField)) (((xfields).xIntegerField)) (((xfields).xDecimalField)))) ((((unsupported)).apply (((xfields).xIntegerField)) (((xfields).xFloatField)) (((xfields).xFloatField)))) ((((unsupported)).apply (((xfields).xFloatField)) (((xfields).xIntegerField)) (((xfields).xFloatField)))))) ((xconnector)) ((((unsupported)).apply (((xCombinable).xADD)) (((xCombinable).xSUB)) (((xCombinable).xMUL)) (((xCombinable).xDIV)))))) ((((unsupported)).apply ((xconnector)) ((((unsupported)).apply ((((unsupported)).apply (((xfields).xIntegerField)) (((xfields).xIntegerField)) (((xfields).xIntegerField)))))) ((xconnector)) ((((unsupported)).apply (((xCombinable).xBITAND)) (((xCombinable).xBITOR)) (((xCombinable).xBITLEFTSHIFT)) (((xCombinable).xBITRIGHTSHIFT)) (((xCombinable).xBITXOR)))))) ((((unsupported)).apply ((xconnector)) ((((unsupported)).apply ((((unsupported)).apply ((xfield_type)) ((xNoneType)) ((xfield_type)))) ((((unsupported)).apply ((xNoneType)) ((xfield_type)) ((xfield_type)))))) ((xconnector)) ((((unsupported)).apply (((xCombinable).xADD)) (((xCombinable).xSUB)) (((xCombinable).xMUL)) (((xCombinable).xDIV)) (((xCombinable).xMOD)) (((xCombinable).xPOW)))) ((xfield_type)) ((((unsupported)).apply (((xfields).xIntegerField)) (((xfields).xDecimalField)) (((xfields).xFloatField)))))) ((((unsupported)).apply (((xCombinable).xADD)) ((((unsupported)).apply ((((unsupported)).apply (((xfields).xDateField)) (((xfields).xDurationField)) (((xfields).xDateTimeField)))) ((((unsupported)).apply (((xfields).xDateTimeField)) (((xfields).xDurationField)) (((xfields).xDateTimeField)))) ((((unsupported)).apply (((xfields).xDurationField)) (((xfields).xDateField)) (((xfields).xDateTimeField)))) ((((unsupported)).apply (((xfields).xDurationField)) (((xfields).xDateTimeField)) (((xfields).xDateTimeField)))) ((((unsupported)).apply (((xfields).xDurationField)) (((xfields).xDurationField)) (((xfields).xDurationField)))) ((((unsupported)).apply (((xfields).xTimeField)) (((xfields).xDurationField)) (((xfields).xTimeField)))) ((((unsupported)).apply (((xfields).xDurationField)) (((xfields).xTimeField)) (((xfields).xTimeField)))))))) ((((unsupported)).apply (((xCombinable).xSUB)) ((((unsupported)).apply ((((unsupported)).apply (((xfields).xDateField)) (((xfields).xDurationField)) (((xfields).xDateTimeField)))) ((((unsupported)).apply (((xfields).xDateTimeField)) (((xfields).xDurationField)) (((xfields).xDateTimeField)))) ((((unsupported)).apply (((xfields).xDateField)) (((xfields).xDateField)) (((xfields).xDurationField)))) ((((unsupported)).apply (((xfields).xDateField)) (((xfields).xDateTimeField)) (((xfields).xDurationField)))) ((((unsupported)).apply (((xfields).xDateTimeField)) (((xfields).xDateField)) (((xfields).xDurationField)))) ((((unsupported)).apply (((xfields).xDateTimeField)) (((xfields).xDateTimeField)) (((xfields).xDurationField)))) ((((unsupported)).apply (((xfields).xDurationField)) (((xfields).xDurationField)) (((xfields).xDurationField)))) ((((unsupported)).apply (((xfields).xTimeField)) (((xfields).xDurationField)) (((xfields).xTimeField)))) ((((unsupported)).apply (((xfields).xTimeField)) (((xfields).xTimeField)) (((xfields).xDurationField)))))))))
            x_connector_combinators.write (((xdefaultdict)).apply ((xlist)))
            xregister_combinable_fields.write
              [xlhs xconnector xrhs xresult]
                seq > @
                  seq
                    (((unsupported)).apply)
                    bogusForceDataize.write ((((((unsupported)).apply ((x_connector_combinators)) ((xconnector))).xappend)).apply ((((unsupported)).apply ((xlhs)) ((xrhs)) ((xresult)))))
            (((unsupported)).apply ((xd)) ((x_connector_combinations)))
              (((unsupported)).apply ((((unsupported)).apply ((xconnector)) ((xfield_types)))) (((((xd).xitems)).apply)))
                (((unsupported)).apply ((((unsupported)).apply ((xlhs)) ((xrhs)) ((xresult)))) ((xfield_types)))
                  bogusForceDataize.write (((xregister_combinable_fields)).apply ((xlhs)) ((xconnector)) ((xrhs)) ((xresult)))
            x_resolve_combined_type.write
              [xconnector xlhs_type xrhs_type]
                memory > xcombinators
                seq > @
                  (((unsupported)).apply)
                    xcombinators.write ((((x_connector_combinators).xget)).apply ((xconnector)) ((((unsupported)).apply)))
                    (((unsupported)).apply ((((unsupported)).apply ((xcombinator_lhs_type)) ((xcombinator_rhs_type)) ((xcombined_type)))) ((xcombinators)))
                      ((((xissubclass)).apply ((xlhs_type)) ((xcombinator_lhs_type))).and (((xissubclass)).apply ((xrhs_type)) ((xcombinator_rhs_type)))).if
                        (((unsupported)).apply ((xcombined_type)))
            (((unsupported)).apply ((xSQLiteNumericMixin)) ((xExpression)))
              seq
                x__init__.write
                  [xself xlhs xconnector xrhs xoutput_field]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xoutput_field)))
                        (((unsupported)).apply (((xself).xconnector)) ((xconnector)))
                        (((unsupported)).apply (((xself).xlhs)) ((xlhs)))
                        (((unsupported)).apply (((xself).xrhs)) ((xrhs)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("<{}: {}>".xformat)).apply ((((xself).x__class__).x__name__)) ((xself)))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("{} {} {}".xformat)).apply (((xself).xlhs)) (((xself).xconnector)) (((xself).xrhs)))))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xlhs)) (((xself).xrhs)))))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xlhs)) (((xself).xrhs)))) ((xexprs)))
                x_resolve_output_field.write
                  [xself]
                    memory > xcombined_type
                    seq > @
                      seq
                        xcombined_type.write (((x_resolve_combined_type)).apply (((xself).xconnector)) ((((xtype)).apply ((((xself).xlhs).x_output_field_or_none)))) ((((xtype)).apply ((((xself).xrhs).x_output_field_or_none)))))
                        (((unsupported)).apply ((xcombined_type)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xFieldError)).apply ("Cannot infer type of {self.connector!r} expression involving these types: {self.lhs.output_field.__class__.__name__}, {self.rhs.output_field.__class__.__name__}. You must set output_field."))))
                        (((unsupported)).apply ((((xcombined_type)).apply)))
                xas_sql.write
                  [xself xcompiler xconnection]
                    memory > xsql
                    memory > xexpression_params
                    memory > xexpressions
                    memory > xexpression_wrapper
                    seq > @
                      seq
                        xexpressions.write (((unsupported)).apply)
                        xexpression_params.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xcompiler).xcompile)).apply (((xself).xlhs)))))
                        bogusForceDataize.write ((((xexpressions).xappend)).apply ((xsql)))
                        bogusForceDataize.write ((((xexpression_params).xextend)).apply ((xparams)))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xcompiler).xcompile)).apply (((xself).xrhs)))))
                        bogusForceDataize.write ((((xexpressions).xappend)).apply ((xsql)))
                        bogusForceDataize.write ((((xexpression_params).xextend)).apply ((xparams)))
                        xexpression_wrapper.write "(%s)"
                        xsql.write (((((xconnection).xops).xcombine_expression)).apply (((xself).xconnector)) ((xexpressions)))
                        (((unsupported)).apply ((((unsupported)).apply (((xexpression_wrapper).mod (xsql))) ((xexpression_params)))))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    memory > xc
                    memory > xlhs
                    memory > xrhs_type
                    memory > xrhs
                    memory > xdatetime_fields
                    memory > xlhs_type
                    seq > @
                      (((unsupported)).apply)
                        xlhs.write (((((xself).xlhs).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))
                        xrhs.write (((((xself).xrhs).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))
                        ((((xisinstance)).apply ((xself)) ((((unsupported)).apply ((xDurationExpression)) ((xTemporalSubtraction))))).not).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xFieldError)))))
                              xlhs_type.write (((((xlhs).xoutput_field).xget_internal_type)).apply)
                              xlhs_type.write "None: is there a None literal in the EO language?"
                            (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xFieldError)))))
                              xrhs_type.write (((((xrhs).xoutput_field).xget_internal_type)).apply)
                              xrhs_type.write "None: is there a None literal in the EO language?"
                            ((((unsupported)).apply ("DurationField") ((((unsupported)).apply ((xlhs_type)) ((xrhs_type))))).and ((xlhs_type).neq (xrhs_type))).if
                              (((unsupported)).apply (((((((xDurationExpression)).apply (((xself).xlhs)) (((xself).xconnector)) (((xself).xrhs))).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))))
                            xdatetime_fields.write (((unsupported)).apply ("DateField") ("DateTimeField") ("TimeField"))
                            (((((xself).xconnector).eq ((xself).xSUB)).and (((unsupported)).apply ((xlhs_type)) ((xdatetime_fields)))).and ((xlhs_type).eq (xrhs_type))).if
                              (((unsupported)).apply (((((((xTemporalSubtraction)).apply (((xself).xlhs)) (((xself).xrhs))).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))))
                        xc.write ((((xself).xcopy)).apply)
                        (((unsupported)).apply (((xc).xis_summary)) ((xsummarize)))
                        (((unsupported)).apply (((xc).xlhs)) ((xlhs)))
                        (((unsupported)).apply (((xc).xrhs)) ((xrhs)))
                        (((unsupported)).apply ((xc)))
            (((unsupported)).apply ((xCombinedExpression)))
              seq
                xcompile.write
                  [xself xside xcompiler xconnection]
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply ((xFieldError)))
                          xoutput.write ((xside).xoutput_field)
                          (((((xoutput).xget_internal_type)).apply).eq "DurationField").if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xcompiler).xcompile)).apply ((xside)))))
                              (((unsupported)).apply ((((unsupported)).apply ((((((xconnection).xops).xformat_for_duration_arithmetic)).apply ((xsql)))) ((xparams)))))
                        (((unsupported)).apply (((((xcompiler).xcompile)).apply ((xside)))))
                xas_sql.write
                  [xself xcompiler xconnection]
                    memory > xsql
                    memory > xexpression_params
                    memory > xexpressions
                    memory > xexpression_wrapper
                    seq > @
                      seq
                        (((xconnection).xfeatures).xhas_native_duration_field).if
                          (((unsupported)).apply (((((((xsuper)).apply).xas_sql)).apply ((xcompiler)) ((xconnection)))))
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        xexpressions.write (((unsupported)).apply)
                        xexpression_params.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xself).xcompile)).apply (((xself).xlhs)) ((xcompiler)) ((xconnection)))))
                        bogusForceDataize.write ((((xexpressions).xappend)).apply ((xsql)))
                        bogusForceDataize.write ((((xexpression_params).xextend)).apply ((xparams)))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xself).xcompile)).apply (((xself).xrhs)) ((xcompiler)) ((xconnection)))))
                        bogusForceDataize.write ((((xexpressions).xappend)).apply ((xsql)))
                        bogusForceDataize.write ((((xexpression_params).xextend)).apply ((xparams)))
                        xexpression_wrapper.write "(%s)"
                        xsql.write (((((xconnection).xops).xcombine_duration_expression)).apply (((xself).xconnector)) ((xexpressions)))
                        (((unsupported)).apply ((((unsupported)).apply (((xexpression_wrapper).mod (xsql))) ((xexpression_params)))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    memory > xlhs_type
                    memory > xrhs_type
                    memory > xallowed_fields
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) (((((xself).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
                        (((unsupported)).apply (((xself).xconnector)) ((((unsupported)).apply (((xCombinable).xMUL)) (((xCombinable).xDIV))))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xFieldError)))))
                            seq
                              xlhs_type.write ((((((xself).xlhs).xoutput_field).xget_internal_type)).apply)
                              xrhs_type.write ((((((xself).xrhs).xoutput_field).xget_internal_type)).apply)
                            seq
                              xallowed_fields.write (((unsupported)).apply ("DecimalField") ("DurationField") ("FloatField") ("IntegerField"))
                              ((((unsupported)).apply ((xlhs_type)) ((xallowed_fields))).or (((unsupported)).apply ((xrhs_type)) ((xallowed_fields)))).if
                                (((unsupported)).apply ((((xDatabaseError)).apply ("Invalid arguments for operator {self.connector}."))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))))
            (((unsupported)).apply ((xCombinedExpression)))
              seq
                xoutput_field.write ((((xfields).xDurationField)).apply)
                x__init__.write
                  [xself xlhs xrhs]
                    seq > @
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xlhs)) (((xself).xSUB)) ((xrhs)))
                xas_sql.write
                  [xself xcompiler xconnection]
                    memory > xrhs
                    memory > xlhs
                    seq > @
                      seq
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        xlhs.write ((((xcompiler).xcompile)).apply (((xself).xlhs)))
                        xrhs.write ((((xcompiler).xcompile)).apply (((xself).xrhs)))
                        (((unsupported)).apply ((((((xconnection).xops).xsubtract_temporals)).apply (((((((xself).xlhs).xoutput_field).xget_internal_type)).apply)) ((xlhs)) ((xrhs)))))
            (((unsupported)).apply ((xCombinable)) ((((unsupported)).apply ((xdeconstructible)) ("django.db.models.F"))))
              seq
                unsupported
                x__init__.write
                  [xself xname]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("{}({})".xformat)).apply ((((xself).x__class__).x__name__)) (((xself).xname)))))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xquery).xresolve_ref)).apply (((xself).xname)) ((xallow_joins)) ((xreuse)) ((xsummarize)))))
                xasc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xOrderBy)).apply ((xself)) ((((unsupported)).apply ((xkwargs)))))))
                xdesc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xOrderBy)) ((xself)) (TRUE) ((((unsupported)).apply ((xkwargs)))))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).x__class__).eq ((xother).x__class__)).and (((xself).xname).eq ((xother).xname)))))
                x__hash__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xhash)).apply (((xself).xname)))))
            (((unsupported)).apply ((xF)))
              seq
                (((unsupported)).apply)
                xcontains_aggregate.write (xfalse)
                xas_sql.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xValueError)).apply ("This queryset contains a reference to an outer query and may only be used in a subquery."))))
                xresolve_expression.write
                  [xself]
                    memory > xcol
                    seq > @
                      (((unsupported)).apply)
                        xcol.write ((((((xsuper)).apply).xresolve_expression)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xcol).xpossibly_multivalued)) ((((unsupported)).apply ((xLOOKUP_SEP)) (((xself).xname)))))
                        (((unsupported)).apply ((xcol)))
                xrelabeled_clone.write
                  [xself xrelabels]
                    seq > @
                      (((unsupported)).apply ((xself)))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply)))
            (((unsupported)).apply ((xF)))
              seq
                xcontains_aggregate.write (xfalse)
                xresolve_expression.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((xisinstance)).apply (((xself).xname)) (((xself).x__class__))).if
                          (((unsupported)).apply (((xself).xname)))
                        (((unsupported)).apply ((((xResolvedOuterRef)).apply (((xself).xname)))))
                xrelabeled_clone.write
                  [xself xrelabels]
                    seq > @
                      (((unsupported)).apply ((xself)))
            (((unsupported)).apply ((xSQLiteNumericMixin)) ((xExpression)) ((((unsupported)).apply ((xdeconstructible)) ("django.db.models.Func"))))
              seq
                unsupported
                xfunction.write "None: is there a None literal in the EO language?"
                xtemplate.write "%(function)s(%(expressions)s)"
                xarg_joiner.write ", "
                xarity.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xoutput_field]
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply (((xself).xarity)) ("None: is there a None literal in the EO language?")).and ((((xlen)).apply ((xexpressions))).neq ((xself).xarity))).if
                          (((unsupported)).apply ((((xTypeError)).apply (("'%s' takes exactly %s %s (%s given)".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) (((xself).xarity)) (((((xself).xarity).eq 1).if "argument" "arguments")) ((((xlen)).apply ((xexpressions))))))))))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xoutput_field)))
                        (((unsupported)).apply (((xself).xsource_expressions)) (((((xself).x_parse_expressions)).apply ((((unsupported)).apply ((xexpressions)))))))
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                x__repr__.write
                  [xself]
                    memory > xextra
                    memory > xargs
                    seq > @
                      seq
                        xargs.write (((((xself).xarg_joiner).xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xarg)))) ((xarg)) (((xself).xsource_expressions)))))
                        xextra.write (((unsupported)).apply (((xself).xextra)) (((((xself).x_get_repr_options)).apply)))
                        (xextra).if
                          seq
                            xextra.write (((", ".xjoin)).apply ((((unsupported)).apply ((((((xstr)).apply ((xkey))).add "=").add (((xstr)).apply ((xval))))) ((((unsupported)).apply ((xkey)) ((xval)))) ((((xsorted)).apply (((((xextra).xitems)).apply)))))))
                            (((unsupported)).apply (((("{}({}, {})".xformat)).apply ((((xself).x__class__).x__name__)) ((xargs)) ((xextra)))))
                        (((unsupported)).apply (((("{}({})".xformat)).apply ((((xself).x__class__).x__name__)) ((xargs)))))
                x_get_repr_options.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply)))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xsource_expressions)))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply (((xself).xsource_expressions)) ((xexprs)))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    memory > xc
                    seq > @
                      (((unsupported)).apply)
                        xc.write ((((xself).xcopy)).apply)
                        (((unsupported)).apply (((xc).xis_summary)) ((xsummarize)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpos)) ((xarg)))) ((((xenumerate)).apply (((xc).xsource_expressions)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xc).xsource_expressions)) ((xpos)))) (((((xarg).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))))
                        (((unsupported)).apply ((xc)))
                xas_sql.write
                  [xself xcompiler xconnection xfunction xtemplate xarg_joiner]
                    memory > xsql_parts
                    memory > xparams
                    memory > xdata
                    memory > xempty_result_set_value
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        xsql_parts.write (((unsupported)).apply)
                        xparams.write (((unsupported)).apply)
                        (((unsupported)).apply ((xarg)) (((xself).xsource_expressions)))
                          seq
                            (((unsupported)).apply ((xEmptyResultSet)))
                              (((unsupported)).apply ((((unsupported)).apply ((xarg_sql)) ((xarg_params)))) (((((xcompiler).xcompile)).apply ((xarg)))))
                              seq
                                xempty_result_set_value.write (((xgetattr)).apply ((xarg)) ("empty_result_set_value") ((xNotImplemented)))
                                (((unsupported)).apply ((xempty_result_set_value)) ((xNotImplemented))).if
                                  (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xarg_sql)) ((xarg_params)))) (((((xcompiler).xcompile)).apply ((((xValue)).apply ((xempty_result_set_value)))))))
                            bogusForceDataize.write ((((xsql_parts).xappend)).apply ((xarg_sql)))
                            bogusForceDataize.write ((((xparams).xextend)).apply ((xarg_params)))
                        xdata.write (((unsupported)).apply (((xself).xextra)) ((xextra_context)))
                        (((unsupported)).apply ((xfunction)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("function"))) ((xfunction)))
                          bogusForceDataize.write ((((xdata).xsetdefault)).apply ("function") (((xself).xfunction)))
                        xtemplate.write ((xtemplate).or ((((xdata).xget)).apply ("template") (((xself).xtemplate))))
                        xarg_joiner.write ((xarg_joiner).or ((((xdata).xget)).apply ("arg_joiner") (((xself).xarg_joiner))))
                        (((unsupported)).apply ((((unsupported)).apply ((xdata)) ("expressions"))) ((((unsupported)).apply ((xdata)) ("field"))) (((((xarg_joiner).xjoin)).apply ((xsql_parts)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xtemplate).mod (xdata))) ((xparams)))))
                xcopy.write
                  [xself]
                    memory > xcopy
                    seq > @
                      seq
                        xcopy.write ((((((xsuper)).apply).xcopy)).apply)
                        (((unsupported)).apply (((xcopy).xsource_expressions)) ((((unsupported)).apply (((xself).xsource_expressions)) ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xcopy).xextra)) ((((((xself).xextra).xcopy)).apply)))
                        (((unsupported)).apply ((xcopy)))
            (((unsupported)).apply ((xSQLiteNumericMixin)) ((xExpression)) ((((unsupported)).apply ((xdeconstructible)) ("django.db.models.Value"))))
              seq
                unsupported
                xfor_save.write (xfalse)
                x__init__.write
                  [xself xvalue xoutput_field]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xoutput_field)))
                        (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("{self.__class__.__name__}({self.value!r})"))
                xas_sql.write
                  [xself xcompiler xconnection]
                    memory > xoutput_field
                    memory > xval
                    seq > @
                      seq
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        xval.write ((xself).xvalue)
                        xoutput_field.write ((xself).x_output_field_or_none)
                        (((unsupported)).apply ((xoutput_field)) ("None: is there a None literal in the EO language?")).if
                          seq
                            ((xself).xfor_save).if
                              xval.write (((unsupported)).apply (((xoutput_field).xget_db_prep_save)) ((xval)) ((xconnection)))
                              xval.write (((unsupported)).apply (((xoutput_field).xget_db_prep_value)) ((xval)) ((xconnection)))
                            (((xhasattr)).apply ((xoutput_field)) ("get_placeholder")).if
                              (((unsupported)).apply ((((unsupported)).apply (((((xoutput_field).xget_placeholder)).apply ((xval)) ((xcompiler)) ((xconnection)))) ((((unsupported)).apply ((xval)))))))
                        (((unsupported)).apply ((xval)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ("NULL") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ("%s") ((((unsupported)).apply ((xval)))))))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    memory > xc
                    seq > @
                      (((unsupported)).apply)
                        xc.write ((((((xsuper)).apply).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))
                        (((unsupported)).apply (((xc).xfor_save)) ((xfor_save)))
                        (((unsupported)).apply ((xc)))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply)))
                x_resolve_output_field.write
                  [xself]
                    seq > @
                      seq
                        (((xisinstance)).apply (((xself).xvalue)) ((xstr))).if
                          (((unsupported)).apply (((((xfields).xCharField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) ((xbool))).if
                          (((unsupported)).apply (((((xfields).xBooleanField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) ((xint))).if
                          (((unsupported)).apply (((((xfields).xIntegerField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) ((xfloat))).if
                          (((unsupported)).apply (((((xfields).xFloatField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) (((xdatetime).xdatetime))).if
                          (((unsupported)).apply (((((xfields).xDateTimeField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) (((xdatetime).xdate))).if
                          (((unsupported)).apply (((((xfields).xDateField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) (((xdatetime).xtime))).if
                          (((unsupported)).apply (((((xfields).xTimeField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) (((xdatetime).xtimedelta))).if
                          (((unsupported)).apply (((((xfields).xDurationField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) ((xDecimal))).if
                          (((unsupported)).apply (((((xfields).xDecimalField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) ((xbytes))).if
                          (((unsupported)).apply (((((xfields).xBinaryField)).apply)))
                        (((xisinstance)).apply (((xself).xvalue)) ((xUUID))).if
                          (((unsupported)).apply (((((xfields).xUUIDField)).apply)))
                xempty_result_set_value.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xvalue)))
            (((unsupported)).apply ((xExpression)))
              seq
                x__init__.write
                  [xself xsql xparams xoutput_field]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xoutput_field)) ("None: is there a None literal in the EO language?")).if
                          xoutput_field.write ((((xfields).xField)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsql)) (((xself).xparams)))) ((((unsupported)).apply ((xsql)) ((xparams)))))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xoutput_field)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("{}({}, {})".xformat)).apply ((((xself).x__class__).x__name__)) (((xself).xsql)) (((xself).xparams)))))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (("(%s)".mod ((xself).xsql))) (((xself).xparams)))))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xself)))))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    seq > @
                      (((unsupported)).apply)
                        ((xquery).xmodel).if
                          (((unsupported)).apply ((xparent)) (((((((xquery).xmodel).x_meta).xget_parent_list)).apply)))
                            (((unsupported)).apply ((xparent_field)) ((((xparent).x_meta).xlocal_fields)))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xcolumn_name)))) (((((xparent_field).xget_attname_column)).apply)))
                                (((unsupported)).apply (((((xcolumn_name).xlower)).apply)) ((((((xself).xsql).xlower)).apply))).if
                                  seq
                                    bogusForceDataize.write ((((xquery).xresolve_ref)).apply (((xparent_field).xname)) ((xallow_joins)) ((xreuse)) ((xsummarize)))
                                    (((unsupported)).apply)
                        (((unsupported)).apply (((((((xsuper)).apply).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))))
            (((unsupported)).apply ((xExpression)))
              seq
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("'*'"))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ("*") ((((unsupported)).apply)))))
            (((unsupported)).apply ((xExpression)))
              seq
                xcontains_column_references.write TRUE
                xpossibly_multivalued.write (xfalse)
                x__init__.write
                  [xself xalias xtarget xoutput_field]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xoutput_field)) ("None: is there a None literal in the EO language?")).if
                          xoutput_field.write (xtarget)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xoutput_field)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xalias)) (((xself).xtarget)))) ((((unsupported)).apply ((xalias)) ((xtarget)))))
                x__repr__.write
                  [xself]
                    memory > xidentifiers
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xalias)) ((xtarget)))) ((((unsupported)).apply (((xself).xalias)) (((xself).xtarget)))))
                        xidentifiers.write ((xalias).if (((unsupported)).apply ((xalias)) ((((xstr)).apply ((xtarget))))) (((unsupported)).apply ((((xstr)).apply ((xtarget))))))
                        (((unsupported)).apply (((("{}({})".xformat)).apply ((((xself).x__class__).x__name__)) ((((", ".xjoin)).apply ((xidentifiers)))))))
                xas_sql.write
                  [xself xcompiler xconnection]
                    memory > xsql
                    memory > xidentifiers
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xalias)) ((xcolumn)))) ((((unsupported)).apply (((xself).xalias)) ((((xself).xtarget).xcolumn)))))
                        xidentifiers.write ((xalias).if (((unsupported)).apply ((xalias)) ((xcolumn))) (((unsupported)).apply ((xcolumn))))
                        xsql.write (((".".xjoin)).apply ((((xmap)).apply (((xcompiler).xquote_name_unless_alias)) ((xidentifiers)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((((unsupported)).apply)))))
                xrelabeled_clone.write
                  [xself xrelabels]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xalias)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xself)))
                        (((unsupported)).apply (((((xself).x__class__)).apply (((((xrelabels).xget)).apply (((xself).xalias)) (((xself).xalias)))) (((xself).xtarget)) (((xself).xoutput_field)))))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xself)))))
                xget_db_converters.write
                  [xself xconnection]
                    seq > @
                      seq
                        (((xself).xtarget).eq ((xself).xoutput_field)).if
                          (((unsupported)).apply ((((((xself).xoutput_field).xget_db_converters)).apply ((xconnection)))))
                        (((unsupported)).apply (((((((xself).xoutput_field).xget_db_converters)).apply ((xconnection))).add (((((xself).xtarget).xget_db_converters)).apply ((xconnection))))))
            (((unsupported)).apply ((xExpression)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xrefs xsource]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xrefs)) (((xself).xsource)))) ((((unsupported)).apply ((xrefs)) ((xsource)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("{}({}, {})".xformat)).apply ((((xself).x__class__).x__name__)) (((xself).xrefs)) (((xself).xsource)))))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsource)))))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsource)))) ((xexprs)))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xself)))
                xrelabeled_clone.write
                  [xself xrelabels]
                    seq > @
                      (((unsupported)).apply ((xself)))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((((xconnection).xops).xquote_name)).apply (((xself).xrefs)))) ((((unsupported)).apply)))))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xself)))))
            (((unsupported)).apply ((xFunc)))
              seq
                (((unsupported)).apply)
                xtemplate.write "%(expressions)s"
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        ((xexpressions).not).if
                          (((unsupported)).apply ((((xValueError)).apply (("%s requires at least one expression.".mod (((xself).x__class__).x__name__))))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).xarg_joiner).xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xarg)))) ((xarg)) (((xself).xsource_expressions)))))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xas_sql)).apply ((xcompiler)) ((xconnection)) ((((unsupported)).apply ((xextra_context)))))))
            (((unsupported)).apply ((xFunc)))
              seq
                xtemplate.write "ORDER BY %(expressions)s"
                x__init__.write
                  [xself]
                    memory > xexpressions
                    seq > @
                      (((unsupported)).apply)
                        xexpressions.write (((unsupported)).apply ((((((xisinstance)).apply ((xexpr)) ((xstr))).and ((((unsupported)).apply ((xexpr)) (0)).eq "-")).if (((unsupported)).apply ((xOrderBy)) ((((xF)).apply ((((unsupported)).apply ((xexpr)) ((((unsupported)).apply (1))))))) (TRUE)) (xexpr))) ((xexpr)) ((xexpressions)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xexpressions)))) ((((unsupported)).apply ((xextra)))))
                xas_sql.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((xself).xsource_expressions).not).if
                          (((unsupported)).apply ((((unsupported)).apply ("") ((((unsupported)).apply)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xas_sql)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
            (((unsupported)).apply ((xSQLiteNumericMixin)) ((xExpression)) ((((unsupported)).apply ((xdeconstructible)) ("django.db.models.ExpressionWrapper"))))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xexpression xoutput_field]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xoutput_field)))
                        (((unsupported)).apply (((xself).xexpression)) ((xexpression)))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply (((xself).xexpression)) ((((unsupported)).apply ((xexprs)) (0))))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xexpression)))))
                xget_group_by_cols.write
                  [xself xalias]
                    memory > xexpression
                    seq > @
                      (((unsupported)).apply)
                        (((xisinstance)).apply (((xself).xexpression)) ((xExpression))).if
                          seq
                            xexpression.write (((((xself).xexpression).xcopy)).apply)
                            (((unsupported)).apply (((xexpression).xoutput_field)) (((xself).xoutput_field)))
                            (((unsupported)).apply ((((unsupported)).apply (((xexpression).xget_group_by_cols)) ((xalias)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_group_by_cols)).apply)))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      (((unsupported)).apply (((((xcompiler).xcompile)).apply (((xself).xexpression)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("{}({})".xformat)).apply ((((xself).x__class__).x__name__)) (((xself).xexpression)))))
            (((unsupported)).apply ((xExpression)) ((((unsupported)).apply ((xdeconstructible)) ("django.db.models.When"))))
              seq
                xtemplate.write "WHEN %(condition)s THEN %(result)s"
                xconditional.write (xfalse)
                x__init__.write
                  [xself xcondition xthen]
                    seq > @
                      (((unsupported)).apply)
                        (xlookups).if
                          (((unsupported)).apply ((xcondition)) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply ((((unsupported)).apply ((xcondition)) ((xlookups)))) ((((unsupported)).apply ((((xQ)).apply ((((unsupported)).apply ((xlookups)))))) ("None: is there a None literal in the EO language?"))))
                            (((xgetattr)).apply ((xcondition)) ("conditional") ((xfalse))).if
                              (((unsupported)).apply ((((unsupported)).apply ((xcondition)) ((xlookups)))) ((((unsupported)).apply ((((xQ)).apply ((xcondition)) ((((unsupported)).apply ((xlookups)))))) ("None: is there a None literal in the EO language?"))))
                        (((((unsupported)).apply ((xcondition)) ("None: is there a None literal in the EO language?")).or ((((xgetattr)).apply ((xcondition)) ("conditional") ((xfalse))).not)).or (xlookups)).if
                          (((unsupported)).apply ((((xTypeError)).apply ("When() supports a Q object, a boolean expression, or lookups as a condition."))))
                        ((((xisinstance)).apply ((xcondition)) ((xQ))).and ((xcondition).not)).if
                          (((unsupported)).apply ((((xValueError)).apply ("An empty Q() can't be used as a When() condition."))))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xcondition)) ((xcondition)))
                        (((unsupported)).apply (((xself).xresult)) ((((unsupported)).apply (((((xself).x_parse_expressions)).apply ((xthen)))) (0))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("WHEN %r THEN %r".mod (((unsupported)).apply (((xself).xcondition)) (((xself).xresult))))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: %s>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((xself))))))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xcondition)) (((xself).xresult)))))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xcondition)) (((xself).xresult)))) ((xexprs)))
                xget_source_fields.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((xself).xresult).x_output_field_or_none)))))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    memory > xc
                    seq > @
                      (((unsupported)).apply)
                        xc.write ((((xself).xcopy)).apply)
                        (((unsupported)).apply (((xc).xis_summary)) ((xsummarize)))
                        (((xhasattr)).apply (((xc).xcondition)) ("resolve_expression")).if
                          (((unsupported)).apply (((xc).xcondition)) ((((((xc).xcondition).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfalse)))))
                        (((unsupported)).apply (((xc).xresult)) ((((((xc).xresult).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))))
                        (((unsupported)).apply ((xc)))
                xas_sql.write
                  [xself xcompiler xconnection xtemplate]
                    memory > xsql_params
                    memory > xtemplate_params
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        xtemplate_params.write (xextra_context)
                        xsql_params.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xcondition_sql)) ((xcondition_params)))) (((((xcompiler).xcompile)).apply (((xself).xcondition)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtemplate_params)) ("condition"))) ((xcondition_sql)))
                        bogusForceDataize.write ((((xsql_params).xextend)).apply ((xcondition_params)))
                        (((unsupported)).apply ((((unsupported)).apply ((xresult_sql)) ((xresult_params)))) (((((xcompiler).xcompile)).apply (((xself).xresult)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtemplate_params)) ("result"))) ((xresult_sql)))
                        bogusForceDataize.write ((((xsql_params).xextend)).apply ((xresult_params)))
                        xtemplate.write ((xtemplate).or ((xself).xtemplate))
                        (((unsupported)).apply ((((unsupported)).apply (((xtemplate).mod (xtemplate_params))) ((xsql_params)))))
                xget_group_by_cols.write
                  [xself xalias]
                    memory > xcols
                    seq > @
                      (((unsupported)).apply)
                        xcols.write (((unsupported)).apply)
                        (((unsupported)).apply ((xsource)) (((((xself).xget_source_expressions)).apply)))
                          bogusForceDataize.write ((((xcols).xextend)).apply (((((xsource).xget_group_by_cols)).apply)))
                        (((unsupported)).apply ((xcols)))
            (((unsupported)).apply ((xSQLiteNumericMixin)) ((xExpression)) ((((unsupported)).apply ((xdeconstructible)) ("django.db.models.Case"))))
              seq
                (((unsupported)).apply)
                xtemplate.write "CASE %(cases)s ELSE %(default)s END"
                xcase_joiner.write " "
                x__init__.write
                  [xself xdefault xoutput_field]
                    seq > @
                      (((unsupported)).apply)
                        ((((xall)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xcase)) ((xWhen)))) ((xcase)) ((xcases))))).not).if
                          (((unsupported)).apply ((((xTypeError)).apply ("Positional arguments must all be When objects."))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xoutput_field)))
                        (((unsupported)).apply (((xself).xcases)) ((((xlist)).apply ((xcases)))))
                        (((unsupported)).apply (((xself).xdefault)) ((((unsupported)).apply (((((xself).x_parse_expressions)).apply ((xdefault)))) (0))))
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("CASE %s, ELSE %r".mod (((unsupported)).apply ((((", ".xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xc)))) ((xc)) (((xself).xcases)))))) (((xself).xdefault))))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: %s>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((xself))))))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xcases).add (((unsupported)).apply (((xself).xdefault))))))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xcases)))) (((xself).xdefault)))) ((xexprs)))
                xresolve_expression.write
                  [xself xquery xallow_joins xreuse xsummarize xfor_save]
                    memory > xc
                    seq > @
                      (((unsupported)).apply)
                        xc.write ((((xself).xcopy)).apply)
                        (((unsupported)).apply (((xc).xis_summary)) ((xsummarize)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpos)) ((xcase)))) ((((xenumerate)).apply (((xc).xcases)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xc).xcases)) ((xpos)))) (((((xcase).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))))
                        (((unsupported)).apply (((xc).xdefault)) ((((((xc).xdefault).xresolve_expression)).apply ((xquery)) ((xallow_joins)) ((xreuse)) ((xsummarize)) ((xfor_save)))))
                        (((unsupported)).apply ((xc)))
                xcopy.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write ((((((xsuper)).apply).xcopy)).apply)
                        (((unsupported)).apply (((xc).xcases)) ((((unsupported)).apply (((xc).xcases)) ((((unsupported)).apply)))))
                        (((unsupported)).apply ((xc)))
                xas_sql.write
                  [xself xcompiler xconnection xtemplate xcase_joiner]
                    memory > xsql
                    memory > xsql_params
                    memory > xcase_parts
                    memory > xtemplate_params
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        (((xself).xcases).not).if
                          (((unsupported)).apply (((((xcompiler).xcompile)).apply (((xself).xdefault)))))
                        xtemplate_params.write (((unsupported)).apply (((xself).xextra)) ((xextra_context)))
                        xcase_parts.write (((unsupported)).apply)
                        xsql_params.write (((unsupported)).apply)
                        (((unsupported)).apply ((xcase)) (((xself).xcases)))
                          seq
                            (((unsupported)).apply ((xEmptyResultSet)))
                              (((unsupported)).apply ((((unsupported)).apply ((xcase_sql)) ((xcase_params)))) (((((xcompiler).xcompile)).apply ((xcase)))))
                              (((unsupported)).apply)
                            bogusForceDataize.write ((((xcase_parts).xappend)).apply ((xcase_sql)))
                            bogusForceDataize.write ((((xsql_params).xextend)).apply ((xcase_params)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdefault_sql)) ((xdefault_params)))) (((((xcompiler).xcompile)).apply (((xself).xdefault)))))
                        ((xcase_parts).not).if
                          (((unsupported)).apply ((((unsupported)).apply ((xdefault_sql)) ((xdefault_params)))))
                        xcase_joiner.write ((xcase_joiner).or ((xself).xcase_joiner))
                        (((unsupported)).apply ((((unsupported)).apply ((xtemplate_params)) ("cases"))) (((((xcase_joiner).xjoin)).apply ((xcase_parts)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtemplate_params)) ("default"))) ((xdefault_sql)))
                        bogusForceDataize.write ((((xsql_params).xextend)).apply ((xdefault_params)))
                        xtemplate.write ((xtemplate).or ((((xtemplate_params).xget)).apply ("template") (((xself).xtemplate))))
                        xsql.write ((xtemplate).mod (xtemplate_params))
                        (((unsupported)).apply (((xself).x_output_field_or_none)) ("None: is there a None literal in the EO language?")).if
                          xsql.write ((((((xconnection).xops).xunification_cast_sql)).apply (((xself).xoutput_field))).mod (xsql))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xsql_params)))))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((xself).xcases).not).if
                          (((unsupported)).apply ((((((xself).xdefault).xget_group_by_cols)).apply ((xalias)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_group_by_cols)).apply ((xalias)))))
            (((unsupported)).apply ((xBaseExpression)) ((xCombinable)))
              seq
                (((unsupported)).apply)
                xtemplate.write "(%(subquery)s)"
                xcontains_aggregate.write (xfalse)
                xempty_result_set_value.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself xqueryset xoutput_field]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xquery)) (((((((xgetattr)).apply ((xqueryset)) ("query") ((xqueryset))).xclone)).apply)))
                        (((unsupported)).apply ((((xself).xquery).xsubquery)) (TRUE))
                        (((unsupported)).apply (((xself).xextra)) ((xextra)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xoutput_field)))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xquery)))))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply (((xself).xquery)) ((((unsupported)).apply ((xexprs)) (0))))
                x_resolve_output_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xquery).xoutput_field)))
                xcopy.write
                  [xself]
                    memory > xclone
                    seq > @
                      seq
                        xclone.write ((((((xsuper)).apply).xcopy)).apply)
                        (((unsupported)).apply (((xclone).xquery)) ((((((xclone).xquery).xclone)).apply)))
                        (((unsupported)).apply ((xclone)))
                xexternal_aliases.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xquery).xexternal_aliases)))
                xget_external_cols.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((((xself).xquery).xget_external_cols)).apply)))
                xas_sql.write
                  [xself xcompiler xconnection xtemplate xquery]
                    memory > xsql
                    memory > xtemplate_params
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        xtemplate_params.write (((unsupported)).apply (((xself).xextra)) ((xextra_context)))
                        xquery.write ((xquery).or ((xself).xquery))
                        (((unsupported)).apply ((((unsupported)).apply ((xsubquery_sql)) ((xsql_params)))) (((((xquery).xas_sql)).apply ((xcompiler)) ((xconnection)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtemplate_params)) ("subquery"))) ((((unsupported)).apply ((xsubquery_sql)) ((((unsupported)).apply (1) ((1.neg)))))))
                        xtemplate.write ((xtemplate).or ((((xtemplate_params).xget)).apply ("template") (((xself).xtemplate))))
                        xsql.write ((xtemplate).mod (xtemplate_params))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xsql_params)))))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (xalias).if
                          (((unsupported)).apply ((((unsupported)).apply ((((xRef)).apply ((xalias)) ((xself)))))))
                        (((unsupported)).apply ((((((xself).xquery).xget_group_by_cols)).apply)))
            (((unsupported)).apply ((xSubquery)))
              seq
                xtemplate.write "EXISTS(%(subquery)s)"
                xoutput_field.write ((((xfields).xBooleanField)).apply)
                x__init__.write
                  [xself xqueryset xnegated]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xnegated)) ((xnegated)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xqueryset)) ((((unsupported)).apply ((xkwargs)))))
                x__invert__.write
                  [xself]
                    memory > xclone
                    seq > @
                      seq
                        xclone.write ((((xself).xcopy)).apply)
                        (((unsupported)).apply (((xclone).xnegated)) ((((xself).xnegated).not)))
                        (((unsupported)).apply ((xclone)))
                xas_sql.write
                  [xself xcompiler xconnection xtemplate]
                    memory > xsql
                    memory > xfeatures
                    memory > xquery
                    seq > @
                      (((unsupported)).apply)
                        xquery.write (((unsupported)).apply ((((xself).xquery).xexists)) (((xconnection).xalias)))
                        (((unsupported)).apply ((xEmptyResultSet)))
                          (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))) ((((unsupported)).apply (((((xsuper)).apply).xas_sql)) ((xcompiler)) ((xconnection)) ((xtemplate)) ((xquery)) ((((unsupported)).apply ((xextra_context)))))))
                          seq
                            ((xself).xnegated).if
                              seq
                                xfeatures.write (((xcompiler).xconnection).xfeatures)
                                (((xfeatures).xsupports_boolean_expr_in_select_clause).not).if
                                  (((unsupported)).apply ((((unsupported)).apply ("1=1") ((((unsupported)).apply)))))
                                (((unsupported)).apply (((((xcompiler).xcompile)).apply ((((xValue)).apply (TRUE))))))
                            (((unsupported)).apply)
                        ((xself).xnegated).if
                          xsql.write ((("NOT {}".xformat)).apply ((xsql)))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))))
                xselect_format.write
                  [xself xcompiler xsql xparams]
                    seq > @
                      seq
                        (((((xcompiler).xconnection).xfeatures).xsupports_boolean_expr_in_select_clause).not).if
                          xsql.write ((("CASE WHEN {} THEN 1 ELSE 0 END".xformat)).apply ((xsql)))
                        (((unsupported)).apply ((((unsupported)).apply ((xsql)) ((xparams)))))
            (((unsupported)).apply ((xExpression)) ((((unsupported)).apply ((xdeconstructible)) ("django.db.models.OrderBy"))))
              seq
                xtemplate.write "%(expression)s %(ordering)s"
                xconditional.write (xfalse)
                x__init__.write
                  [xself xexpression xdescending xnulls_first xnulls_last]
                    seq > @
                      (((unsupported)).apply)
                        ((xnulls_first).and (xnulls_last)).if
                          (((unsupported)).apply ((((xValueError)).apply ("nulls_first and nulls_last are mutually exclusive"))))
                        (((unsupported)).apply (((xself).xnulls_first)) ((xnulls_first)))
                        (((unsupported)).apply (((xself).xnulls_last)) ((xnulls_last)))
                        (((unsupported)).apply (((xself).xdescending)) ((xdescending)))
                        ((((xhasattr)).apply ((xexpression)) ("resolve_expression")).not).if
                          (((unsupported)).apply ((((xValueError)).apply ("expression must be an expression type"))))
                        (((unsupported)).apply (((xself).xexpression)) ((xexpression)))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("{}({}, descending={})".xformat)).apply ((((xself).x__class__).x__name__)) (((xself).xexpression)) (((xself).xdescending)))))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply (((xself).xexpression)) ((((unsupported)).apply ((xexprs)) (0))))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xexpression)))))
                xas_sql.write
                  [xself xcompiler xconnection xtemplate]
                    memory > xplaceholders
                    seq > @
                      (((unsupported)).apply)
                        xtemplate.write ((xtemplate).or ((xself).xtemplate))
                        (((xconnection).xfeatures).xsupports_order_by_nulls_modifier).if
                          ((xself).xnulls_last).if
                            xtemplate.write ("%s NULLS LAST".mod (xtemplate))
                            ((xself).xnulls_first).if
                              xtemplate.write ("%s NULLS FIRST".mod (xtemplate))
                          (((xself).xnulls_last).and ((((xself).xdescending).and (((xconnection).xfeatures).xorder_by_nulls_first)).not)).if
                            xtemplate.write ("%%(expression)s IS NULL, %s".mod (xtemplate))
                            (((xself).xnulls_first).and (((((xself).xdescending).not).and (((xconnection).xfeatures).xorder_by_nulls_first)).not)).if
                              xtemplate.write ("%%(expression)s IS NOT NULL, %s".mod (xtemplate))
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        (((unsupported)).apply ((((unsupported)).apply ((xexpression_sql)) ((xparams)))) (((((xcompiler).xcompile)).apply (((xself).xexpression)))))
                        xplaceholders.write (((unsupported)).apply ("expression") ((xexpression_sql)) ("ordering") ((((xself).xdescending).if "DESC" "ASC")) ((xextra_context)))
                        (((unsupported)).apply ((xparams)) (((((xtemplate).xcount)).apply ("%(expression)s"))))
                        (((unsupported)).apply ((((unsupported)).apply ((((((xtemplate).mod (xplaceholders)).xrstrip)).apply)) ((xparams)))))
                xas_oracle.write
                  [xself xcompiler xconnection]
                    memory > xcopy
                    seq > @
                      seq
                        (((((xconnection).xops).xconditional_expression_supported_in_where_clause)).apply (((xself).xexpression))).if
                          seq
                            xcopy.write ((((xself).xcopy)).apply)
                            (((unsupported)).apply (((xcopy).xexpression)) ((((unsupported)).apply ((xCase)) ((((unsupported)).apply ((xWhen)) (((xself).xexpression)) (TRUE))) ((xfalse)))))
                            (((unsupported)).apply (((((xcopy).xas_sql)).apply ((xcompiler)) ((xconnection)))))
                        (((unsupported)).apply (((((xself).xas_sql)).apply ((xcompiler)) ((xconnection)))))
                xget_group_by_cols.write
                  [xself xalias]
                    memory > xcols
                    seq > @
                      (((unsupported)).apply)
                        xcols.write (((unsupported)).apply)
                        (((unsupported)).apply ((xsource)) (((((xself).xget_source_expressions)).apply)))
                          bogusForceDataize.write ((((xcols).xextend)).apply (((((xsource).xget_group_by_cols)).apply)))
                        (((unsupported)).apply ((xcols)))
                xreverse_ordering.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xdescending)) ((((xself).xdescending).not)))
                        (((xself).xnulls_first).or ((xself).xnulls_last)).if
                          seq
                            (((unsupported)).apply (((xself).xnulls_first)) ((((xself).xnulls_first).not)))
                            (((unsupported)).apply (((xself).xnulls_last)) ((((xself).xnulls_last).not)))
                        (((unsupported)).apply ((xself)))
                xasc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xdescending)) ((xfalse)))
                xdesc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xdescending)) (TRUE))
            (((unsupported)).apply ((xSQLiteNumericMixin)) ((xExpression)))
              seq
                xtemplate.write "%(expression)s OVER (%(window)s)"
                xcontains_aggregate.write (xfalse)
                xcontains_over_clause.write TRUE
                xfilterable.write (xfalse)
                x__init__.write
                  [xself xexpression xpartition_by xorder_by xframe xoutput_field]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xpartition_by)) ((xpartition_by)))
                        (((unsupported)).apply (((xself).xorder_by)) ((xorder_by)))
                        (((unsupported)).apply (((xself).xframe)) ((xframe)))
                        ((((xgetattr)).apply ((xexpression)) ("window_compatible") ((xfalse))).not).if
                          (((unsupported)).apply ((((xValueError)).apply (("Expression '%s' isn't compatible with OVER clauses.".mod (((xexpression).x__class__).x__name__))))))
                        (((unsupported)).apply (((xself).xpartition_by)) ("None: is there a None literal in the EO language?")).if
                          seq
                            ((((xisinstance)).apply (((xself).xpartition_by)) ((((unsupported)).apply ((xtuple)) ((xlist))))).not).if
                              (((unsupported)).apply (((xself).xpartition_by)) ((((unsupported)).apply (((xself).xpartition_by)))))
                            (((unsupported)).apply (((xself).xpartition_by)) ((((xExpressionList)).apply ((((unsupported)).apply (((xself).xpartition_by)))))))
                        (((unsupported)).apply (((xself).xorder_by)) ("None: is there a None literal in the EO language?")).if
                          (((xisinstance)).apply (((xself).xorder_by)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                            (((unsupported)).apply (((xself).xorder_by)) ((((xOrderByList)).apply ((((unsupported)).apply (((xself).xorder_by)))))))
                            (((xisinstance)).apply (((xself).xorder_by)) ((((unsupported)).apply ((xBaseExpression)) ((xstr))))).if
                              (((unsupported)).apply (((xself).xorder_by)) ((((xOrderByList)).apply (((xself).xorder_by)))))
                              (((unsupported)).apply ((((xValueError)).apply ("Window.order_by must be either a string reference to a field, an expression, or a list or tuple of them."))))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xoutput_field)))
                        (((unsupported)).apply (((xself).xsource_expression)) ((((unsupported)).apply (((((xself).x_parse_expressions)).apply ((xexpression)))) (0))))
                x_resolve_output_field.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xsource_expression).xoutput_field)))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsource_expression)) (((xself).xpartition_by)) (((xself).xorder_by)) (((xself).xframe)))))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsource_expression)) (((xself).xpartition_by)) (((xself).xorder_by)) (((xself).xframe)))) ((xexprs)))
                xas_sql.write
                  [xself xcompiler xconnection xtemplate]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        ((((xconnection).xfeatures).xsupports_over_clause).not).if
                          (((unsupported)).apply ((((xNotSupportedError)).apply ("This backend does not support window expressions."))))
                        (((unsupported)).apply ((((unsupported)).apply ((xexpr_sql)) ((xparams)))) (((((xcompiler).xcompile)).apply (((xself).xsource_expression)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xwindow_sql)) ((xwindow_params)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xself).xpartition_by)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xsql_expr)) ((xsql_params)))) ((((unsupported)).apply ((((xself).xpartition_by).xas_sql)) ((xcompiler)) ((xconnection)) ("PARTITION BY %(expressions)s"))))
                            bogusForceDataize.write ((((xwindow_sql).xappend)).apply ((xsql_expr)))
                            bogusForceDataize.write ((((xwindow_params).xextend)).apply ((xsql_params)))
                        (((unsupported)).apply (((xself).xorder_by)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xorder_sql)) ((xorder_params)))) (((((xcompiler).xcompile)).apply (((xself).xorder_by)))))
                            bogusForceDataize.write ((((xwindow_sql).xappend)).apply ((xorder_sql)))
                            bogusForceDataize.write ((((xwindow_params).xextend)).apply ((xorder_params)))
                        ((xself).xframe).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xframe_sql)) ((xframe_params)))) (((((xcompiler).xcompile)).apply (((xself).xframe)))))
                            bogusForceDataize.write ((((xwindow_sql).xappend)).apply ((xframe_sql)))
                            bogusForceDataize.write ((((xwindow_params).xextend)).apply ((xframe_params)))
                        bogusForceDataize.write ((((xparams).xextend)).apply ((xwindow_params)))
                        xtemplate.write ((xtemplate).or ((xself).xtemplate))
                        (((unsupported)).apply ((((unsupported)).apply (((xtemplate).mod (((unsupported)).apply ("expression") ((xexpr_sql)) ("window") (((((((" ".xjoin)).apply ((xwindow_sql))).xstrip)).apply))))) ((xparams)))))
                xas_sqlite.write
                  [xself xcompiler xconnection]
                    memory > xcopy
                    memory > xsource_expressions
                    seq > @
                      seq
                        (((xisinstance)).apply (((xself).xoutput_field)) (((xfields).xDecimalField))).if
                          seq
                            xcopy.write ((((xself).xcopy)).apply)
                            xsource_expressions.write ((((xcopy).xget_source_expressions)).apply)
                            (((unsupported)).apply (((((unsupported)).apply ((xsource_expressions)) (0)).xoutput_field)) (((((xfields).xFloatField)).apply)))
                            bogusForceDataize.write ((((xcopy).xset_source_expressions)).apply ((xsource_expressions)))
                            (((unsupported)).apply (((((((xsuper)).apply ((xWindow)) ((xcopy))).xas_sqlite)).apply ((xcompiler)) ((xconnection)))))
                        (((unsupported)).apply (((((xself).xas_sql)).apply ((xcompiler)) ((xconnection)))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("{} OVER ({}{}{})".xformat)).apply ((((xstr)).apply (((xself).xsource_expression)))) ((((xself).xpartition_by).if ("PARTITION BY ".add (((xstr)).apply (((xself).xpartition_by)))) "")) ((((xstr)).apply ((((xself).xorder_by).or "")))) ((((xstr)).apply ((((xself).xframe).or "")))))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: %s>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((xself))))))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply)))
            (((unsupported)).apply ((xExpression)))
              seq
                (((unsupported)).apply)
                xtemplate.write "%(frame_type)s BETWEEN %(start)s AND %(end)s"
                x__init__.write
                  [xself xstart xend]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xstart)) ((((xValue)).apply ((xstart)))))
                        (((unsupported)).apply (((xself).xend)) ((((xValue)).apply ((xend)))))
                xset_source_expressions.write
                  [xself xexprs]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xstart)) (((xself).xend)))) ((xexprs)))
                xget_source_expressions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xstart)) (((xself).xend)))))
                xas_sql.write
                  [xself xcompiler xconnection]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xconnection).xops).xcheck_expression_support)).apply ((xself)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xend)))) (((((xself).xwindow_frame_start_end)).apply ((xconnection)) ((((xself).xstart).xvalue)) ((((xself).xend).xvalue)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).xtemplate).mod (((unsupported)).apply ("frame_type") (((xself).xframe_type)) ("start") ((xstart)) ("end") ((xend))))) ((((unsupported)).apply)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: %s>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) ((xself))))))
                xget_group_by_cols.write
                  [xself xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply)))
                x__str__.write
                  [xself]
                    memory > xend
                    memory > xstart
                    seq > @
                      seq
                        ((((unsupported)).apply ((((xself).xstart).xvalue)) ("None: is there a None literal in the EO language?")).and ((((xself).xstart).xvalue).less 0)).if
                          xstart.write ("%d %s".mod (((unsupported)).apply ((((xabs)).apply ((((xself).xstart).xvalue)))) ((((xconnection).xops).xPRECEDING))))
                          ((((unsupported)).apply ((((xself).xstart).xvalue)) ("None: is there a None literal in the EO language?")).and ((((xself).xstart).xvalue).eq 0)).if
                            xstart.write (((xconnection).xops).xCURRENT_ROW)
                            xstart.write (((xconnection).xops).xUNBOUNDED_PRECEDING)
                        ((((unsupported)).apply ((((xself).xend).xvalue)) ("None: is there a None literal in the EO language?")).and ((((xself).xend).xvalue).greater 0)).if
                          xend.write ("%d %s".mod (((unsupported)).apply ((((xself).xend).xvalue)) ((((xconnection).xops).xFOLLOWING))))
                          ((((unsupported)).apply ((((xself).xend).xvalue)) ("None: is there a None literal in the EO language?")).and ((((xself).xend).xvalue).eq 0)).if
                            xend.write (((xconnection).xops).xCURRENT_ROW)
                            xend.write (((xconnection).xops).xUNBOUNDED_FOLLOWING)
                        (((unsupported)).apply ((((xself).xtemplate).mod (((unsupported)).apply ("frame_type") (((xself).xframe_type)) ("start") ((xstart)) ("end") ((xend))))))
                xwindow_frame_start_end.write
                  [xself xconnection xstart xend]
                    seq > @
                      (((unsupported)).apply ((((xNotImplementedError)).apply ("Subclasses must implement window_frame_start_end()."))))
            (((unsupported)).apply ((xWindowFrame)))
              seq
                xframe_type.write "ROWS"
                xwindow_frame_start_end.write
                  [xself xconnection xstart xend]
                    seq > @
                      (((unsupported)).apply ((((((xconnection).xops).xwindow_frame_rows_start_end)).apply ((xstart)) ((xend)))))
            (((unsupported)).apply ((xWindowFrame)))
              seq
                xframe_type.write "RANGE"
                xwindow_frame_start_end.write
                  [xself xconnection xstart xend]
                    seq > @
                      (((unsupported)).apply ((((((xconnection).xops).xwindow_frame_range_start_end)).apply ((xstart)) ((xend)))))