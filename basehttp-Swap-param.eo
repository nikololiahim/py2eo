memory > xk
memory > xsimple_server
memory > xget_wsgi_application
memory > xValueError
memory > xsocket
memory > xWSGIRequestHandler
memory > xServerHandler
memory > xerr
memory > xtype
memory > xconnections
memory > xexc_type
memory > xImportError
memory > xAttributeError
memory > ximport_string
memory > xconn
memory > x_
memory > xalias
memory > xsettings
memory > xConnectionResetError
memory > xint
memory > xsuper
memory > xsys
memory > xissubclass
memory > xBrokenPipeError
memory > xWSGIServer
memory > xsocketserver
memory > xargs
memory > xOSError
memory > xConnectionAbortedError
memory > xgetattr
memory > xImproperlyConfigured
memory > xLimitedStream
memory > xkwargs
memory > xisinstance
memory > xlen
memory > xTypeError
memory > xlogging
[] > basehttp
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xhandle_error
        memory > xget_environ
        memory > xlogger
        memory > xclose
        memory > xlog_message
        memory > xdaemon_threads
        memory > x_close_connections
        memory > xhttp_version
        memory > xhandle
        memory > xrequest_queue_size
        memory > xcleanup_headers
        memory > x__init__
        memory > xaddress_string
        memory > xget_internal_wsgi_application
        memory > xis_broken_pipe_error
        memory > xhandle_one_request
        memory > x__all__
        memory > xrun
        memory > xclose_request
        memory > xprotocol_version
        memory > xprocess_request_thread
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x__all__.write (((unsupported)).apply ("WSGIServer") ("WSGIRequestHandler"))
            xlogger.write ((((xlogging).xgetLogger)).apply ("django.server"))
            xget_internal_wsgi_application.write
              []
                memory > xapp_path
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    xapp_path.write (((xgetattr)).apply ("WSGI_APPLICATION") ((xsettings)))
                    (((unsupported)).apply ((xapp_path)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((xget_wsgi_application)).apply)))
                    (((unsupported)).apply ((xImportError)))
                      (((unsupported)).apply ((((ximport_string)).apply ((xapp_path)))))
                      (((unsupported)).apply ((((xImproperlyConfigured)).apply (("WSGI application '%s' could not be loaded; Error importing module.".mod (xapp_path))))) ((xerr)))
            xis_broken_pipe_error.write
              []
                seq > @
                  seq
                    (((unsupported)).apply ((((unsupported)).apply ((xexc_type)) ((x_)) ((x_)))) (((((xsys).xexc_info)).apply)))
                    (((unsupported)).apply ((((xissubclass)).apply ((xexc_type)) ((((unsupported)).apply ((xBrokenPipeError)) ((xConnectionAbortedError)) ((xConnectionResetError)))))))
            (((unsupported)).apply (((xsimple_server).xWSGIServer)))
              seq
                unsupported
                xrequest_queue_size.write 10
                x__init__.write
                  [xself xipv6 xallow_reuse_address]
                    seq > @
                      (((unsupported)).apply)
                        (xipv6).if
                          (((unsupported)).apply (((xself).xaddress_family)) (((xsocket).xAF_INET6)))
                        (((unsupported)).apply (((xself).xallow_reuse_address)) ((xallow_reuse_address)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                xhandle_error.write
                  [xself xrequest xclient_address]
                    seq > @
                      (((xis_broken_pipe_error)).apply).if
                        bogusForceDataize.write ((((xlogger).xinfo)).apply ("- Broken pipe from %s") ((xclient_address)))
                        bogusForceDataize.write ((((((xsuper)).apply).xhandle_error)).apply ((xrequest)) ((xclient_address)))
            (((unsupported)).apply (((xsocketserver).xThreadingMixIn)) ((xWSGIServer)))
              seq
                unsupported
                xdaemon_threads.write TRUE
                x__init__.write
                  [xself xconnections_override]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xconnections_override)) ((xconnections_override)))
                xprocess_request_thread.write
                  [xself xrequest xclient_address]
                    seq > @
                      seq
                        ((xself).xconnections_override).if
                          (((unsupported)).apply ((((unsupported)).apply ((xalias)) ((xconn)))) ((((((xself).xconnections_override).xitems)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply ((xconnections)) ((xalias)))) ((xconn)))
                        bogusForceDataize.write ((((((xsuper)).apply).xprocess_request_thread)).apply ((xrequest)) ((xclient_address)))
                x_close_connections.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xconnections).xclose_all)).apply)
                xclose_request.write
                  [xself xrequest]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_close_connections)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xclose_request)).apply ((xrequest)))
            (((unsupported)).apply (((xsimple_server).xServerHandler)))
              seq
                xhttp_version.write "1.1"
                x__init__.write
                  [xself xstdin xstdout xstderr xenviron]
                    memory > xcontent_length
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                          xcontent_length.write (((xint)).apply (((((xenviron).xget)).apply ("CONTENT_LENGTH"))))
                          xcontent_length.write 0
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((xLimitedStream)).apply ((xstdin)) ((xcontent_length)))) ((xstdout)) ((xstderr)) ((xenviron)) ((((unsupported)).apply ((xkwargs)))))
                xcleanup_headers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xcleanup_headers)).apply)
                        (((unsupported)).apply ("Content-Length") (((xself).xheaders))).if
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Connection"))) ("close"))
                          ((((xisinstance)).apply ((((xself).xrequest_handler).xserver)) (((xsocketserver).xThreadingMixIn))).not).if
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ("Connection"))) ("close"))
                        ((((((xself).xheaders).xget)).apply ("Connection")).eq "close").if
                          (((unsupported)).apply ((((xself).xrequest_handler).xclose_connection)) (TRUE))
                xclose.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((((xself).xget_stdin)).apply).x_read_limited)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xclose)).apply)
            (((unsupported)).apply (((xsimple_server).xWSGIRequestHandler)))
              seq
                xprotocol_version.write "HTTP/1.1"
                xaddress_string.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xclient_address)) (0))))
                xlog_message.write
                  [xself xformat]
                    memory > xextra
                    memory > xlevel
                    memory > xstatus_code
                    seq > @
                      (((unsupported)).apply)
                        xextra.write (((unsupported)).apply ("request") (((xself).xrequest)) ("server_time") (((((xself).xlog_date_time_string)).apply)))
                        ((((unsupported)).apply ((((unsupported)).apply ((xargs)) (1))) (0)).eq "4").if
                          ((((((unsupported)).apply ((xargs)) (0)).xstartswith)).apply ("x16x03")).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xextra)) ("status_code"))) (500))
                              (((unsupported)).apply (((xlogger).xerror)) ("You're accessing the development server over HTTPS, but it only supports HTTP.") ((xextra)))
                              (((unsupported)).apply)
                        (((((((unsupported)).apply ((xargs)) (1)).xisdigit)).apply).and ((((xlen)).apply ((((unsupported)).apply ((xargs)) (1)))).eq 3)).if
                          seq
                            xstatus_code.write (((xint)).apply ((((unsupported)).apply ((xargs)) (1))))
                            (((unsupported)).apply ((((unsupported)).apply ((xextra)) ("status_code"))) ((xstatus_code)))
                            ((xstatus_code).geq 500).if
                              xlevel.write ((xlogger).xerror)
                              ((xstatus_code).geq 400).if
                                xlevel.write ((xlogger).xwarning)
                                xlevel.write ((xlogger).xinfo)
                          xlevel.write ((xlogger).xinfo)
                        (((unsupported)).apply ((xlevel)) ((xformat)) ((((unsupported)).apply ((xargs)))) ((xextra)))
                xget_environ.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xk)) (((xself).xheaders)))
                          (((unsupported)).apply ("_") ((xk))).if
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xheaders)) ((xk)))))))))
                        (((unsupported)).apply (((((((xsuper)).apply).xget_environ)).apply)))
                xhandle.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xclose_connection)) (TRUE))
                        bogusForceDataize.write ((((xself).xhandle_one_request)).apply)
                        while.
                          (((xself).xclose_connection).not)
                          [unused]
                            seq > @
                              bogusForceDataize.write ((((xself).xhandle_one_request)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xOSError)))))
                          bogusForceDataize.write (((((xself).xconnection).xshutdown)).apply (((xsocket).xSHUT_WR)))
                xhandle_one_request.write
                  [xself]
                    memory > xhandler
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xraw_requestline)) ((((((xself).xrfile).xreadline)).apply (65537))))
                        ((((xlen)).apply (((xself).xraw_requestline))).greater 65536).if
                          seq
                            (((unsupported)).apply (((xself).xrequestline)) (""))
                            (((unsupported)).apply (((xself).xrequest_version)) (""))
                            (((unsupported)).apply (((xself).xcommand)) (""))
                            bogusForceDataize.write ((((xself).xsend_error)).apply (414))
                            (((unsupported)).apply)
                        (((((xself).xparse_request)).apply).not).if
                          (((unsupported)).apply)
                        xhandler.write (((xServerHandler)).apply (((xself).xrfile)) (((xself).xwfile)) (((((xself).xget_stderr)).apply)) (((((xself).xget_environ)).apply)))
                        (((unsupported)).apply (((xhandler).xrequest_handler)) ((xself)))
                        bogusForceDataize.write ((((xhandler).xrun)).apply ((((((xself).xserver).xget_app)).apply)))
            xrun.write
              [xaddr xport xwsgi_handler xipv6 xthreading xserver_cls]
                memory > xserver_address
                memory > xhttpd_cls
                memory > xhttpd
                seq > @
                  (((unsupported)).apply)
                    xserver_address.write (((unsupported)).apply ((xaddr)) ((xport)))
                    (xthreading).if
                      xhttpd_cls.write (((xtype)).apply ("WSGIServer") ((((unsupported)).apply (((xsocketserver).xThreadingMixIn)) ((xserver_cls)))) ((((unsupported)).apply)))
                      xhttpd_cls.write (xserver_cls)
                    xhttpd.write (((unsupported)).apply ((xhttpd_cls)) ((xserver_address)) ((xWSGIRequestHandler)) ((xipv6)))
                    (xthreading).if
                      (((unsupported)).apply (((xhttpd).xdaemon_threads)) (TRUE))
                    bogusForceDataize.write ((((xhttpd).xset_app)).apply ((xwsgi_handler)))
                    bogusForceDataize.write ((((xhttpd).xserve_forever)).apply)