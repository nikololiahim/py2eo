memory > xget_user_model
memory > xKeyboardInterrupt
memory > xvalidate_password
memory > xstr
memory > xpk
memory > xBaseCommand
memory > xcapfirst
memory > xNotRunningInTTYException
memory > xfalse
memory > xDEFAULT_DB_ALIAS
memory > xexceptions
memory > xerr
memory > xException
memory > xhasattr
memory > xsuper
memory > xsys
memory > xargs
memory > xos
memory > xunique_constraint
memory > xget_default_username
memory > xinput
memory > xe
memory > xoptions
memory > xkwargs
memory > xisinstance
memory > xgetpass
memory > xfield_name
memory > xCommandError
memory > xlen
[] > createsuperuser
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xPASSWORD_FIELD
        memory > x_get_input_message
        memory > xrequires_migrations_checks
        memory > xexecute
        memory > xhelp
        memory > xusername_is_unique
        memory > xstealth_options
        memory > xhandle
        memory > x__init__
        memory > xget_input_data
        memory > x_validate_username
        memory > xadd_arguments
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xException)))
            xPASSWORD_FIELD.write "password"
            (((unsupported)).apply ((xBaseCommand)))
              seq
                xhelp.write "Used to create a superuser."
                xrequires_migrations_checks.write TRUE
                xstealth_options.write (((unsupported)).apply ("stdin"))
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xUserModel)) ((((xget_user_model)).apply)))
                        (((unsupported)).apply (((xself).xusername_field)) (((((((xself).xUserModel).x_meta).xget_field)).apply ((((xself).xUserModel).xUSERNAME_FIELD)))))
                xadd_arguments.write
                  [xself xparser]
                    memory > xfield
                    seq > @
                      seq
                        (((unsupported)).apply (((xparser).xadd_argument)) (("--%s".mod (((xself).xUserModel).xUSERNAME_FIELD))) ("Specifies the login for the superuser."))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--noinput") ("--no-input") ("store_false") ("interactive") (("Tells Django to NOT prompt the user for input of any kind. You must use --%s with --noinput, along with an option for any other required field. Superusers created with --noinput will not be able to log in until they're given a valid password.".mod (((xself).xUserModel).xUSERNAME_FIELD))))
                        (((unsupported)).apply (((xparser).xadd_argument)) ("--database") ((xDEFAULT_DB_ALIAS)) ("Specifies the database to use. Default is \"default\"."))
                        (((unsupported)).apply ((xfield_name)) ((((xself).xUserModel).xREQUIRED_FIELDS)))
                          seq
                            xfield.write ((((((xself).xUserModel).x_meta).xget_field)).apply ((xfield_name)))
                            ((xfield).xmany_to_many).if
                              ((((xfield).xremote_field).xthrough).and ((((((xfield).xremote_field).xthrough).x_meta).xauto_created).not)).if
                                (((unsupported)).apply ((((xCommandError)).apply (("Required field '%s' specifies a many-to-many relation through model, which is not supported.".mod (xfield_name))))))
                                (((unsupported)).apply (((xparser).xadd_argument)) (("--%s".mod (xfield_name))) ("append") ((((unsupported)).apply (("Specifies the %s for the superuser. Can be used multiple times.".mod (xfield_name))))))
                              (((unsupported)).apply (((xparser).xadd_argument)) (("--%s".mod (xfield_name))) (("Specifies the %s for the superuser.".mod (xfield_name))))
                xexecute.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xstdin)) (((((xoptions).xget)).apply ("stdin") (((xsys).xstdin)))))
                        (((unsupported)).apply (((((((xsuper)).apply).xexecute)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xoptions)))))))
                xhandle.write
                  [xself]
                    memory > xdefault_username
                    memory > xmessage
                    memory > xpassword2
                    memory > xusername
                    memory > xinput_value
                    memory > xresponse
                    memory > xuser_data
                    memory > xfake_user_data
                    memory > xverbose_field_name
                    memory > xdatabase
                    memory > xfield
                    memory > xenv_var
                    memory > xpassword
                    memory > xvalue
                    memory > xerror_msg
                    seq > @
                      (((unsupported)).apply)
                        xusername.write (((unsupported)).apply ((xoptions)) ((((xself).xUserModel).xUSERNAME_FIELD)))
                        xdatabase.write (((unsupported)).apply ((xoptions)) ("database"))
                        xuser_data.write (((unsupported)).apply)
                        xverbose_field_name.write (((xself).xusername_field).xverbose_name)
                        (((unsupported)).apply (((xexceptions).xFieldDoesNotExist)))
                          bogusForceDataize.write ((((((xself).xUserModel).x_meta).xget_field)).apply ((xPASSWORD_FIELD)))
                          (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xPASSWORD_FIELD)))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xKeyboardInterrupt)) (((xexceptions).xValidationError)) ((xNotRunningInTTYException)))
                          seq
                            (((unsupported)).apply ((xoptions)) ("interactive")).if
                              seq
                                xfake_user_data.write (((unsupported)).apply)
                                ((((xhasattr)).apply (((xself).xstdin)) ("isatty")).and ((((((xself).xstdin).xisatty)).apply).not)).if
                                  (((unsupported)).apply ((xNotRunningInTTYException)))
                                xdefault_username.write (((unsupported)).apply ((xget_default_username)) ((xdatabase)))
                                (xusername).if
                                  seq
                                    xerror_msg.write ((((xself).x_validate_username)).apply ((xusername)) ((xverbose_field_name)) ((xdatabase)))
                                    (xerror_msg).if
                                      seq
                                        bogusForceDataize.write (((((xself).xstderr).xwrite)).apply ((xerror_msg)))
                                        xusername.write "None: is there a None literal in the EO language?"
                                  ((xusername).eq "").if
                                    (((unsupported)).apply ((((xCommandError)).apply (("%s cannot be blank.".mod (((xcapfirst)).apply ((xverbose_field_name))))))))
                                while.
                                  (((unsupported)).apply ((xusername)) ("None: is there a None literal in the EO language?"))
                                  [unused]
                                    seq > @
                                      seq
                                        xmessage.write ((((xself).x_get_input_message)).apply (((xself).xusername_field)) ((xdefault_username)))
                                        xusername.write ((((xself).xget_input_data)).apply (((xself).xusername_field)) ((xmessage)) ((xdefault_username)))
                                        (xusername).if
                                          seq
                                            xerror_msg.write ((((xself).x_validate_username)).apply ((xusername)) ((xverbose_field_name)) ((xdatabase)))
                                            (xerror_msg).if
                                              seq
                                                bogusForceDataize.write (((((xself).xstderr).xwrite)).apply ((xerror_msg)))
                                                xusername.write "None: is there a None literal in the EO language?"
                                                (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((((xself).xUserModel).xUSERNAME_FIELD)))) ((xusername)))
                                (((unsupported)).apply ((((unsupported)).apply ((xfake_user_data)) ((((xself).xUserModel).xUSERNAME_FIELD)))) (((((xself).xusername_field).xremote_field).if ((((((xself).xusername_field).xremote_field).xmodel)).apply ((xusername))) (xusername))))
                                (((unsupported)).apply ((xfield_name)) ((((xself).xUserModel).xREQUIRED_FIELDS)))
                                  seq
                                    xfield.write ((((((xself).xUserModel).x_meta).xget_field)).apply ((xfield_name)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) ((((unsupported)).apply ((xoptions)) ((xfield_name)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) ("None: is there a None literal in the EO language?")).if
                                      (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) (((((xfield).xclean)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) ("None: is there a None literal in the EO language?"))))
                                    while.
                                      (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) ("None: is there a None literal in the EO language?"))
                                      [unused]
                                        seq > @
                                          seq
                                            xmessage.write ((((xself).x_get_input_message)).apply ((xfield)))
                                            xinput_value.write ((((xself).xget_input_data)).apply ((xfield)) ((xmessage)))
                                            (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) ((xinput_value)))
                                            (((xfield).xmany_to_many).and (xinput_value)).if
                                              seq
                                                (((((xinput_value).xstrip)).apply).not).if
                                                  seq
                                                    (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) ("None: is there a None literal in the EO language?"))
                                                    bogusForceDataize.write (((((xself).xstderr).xwrite)).apply ("Error: This field cannot be blank."))
                                                    (((unsupported)).apply)
                                                (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) ((((unsupported)).apply (((((xpk).xstrip)).apply)) ((xpk)) (((((xinput_value).xsplit)).apply (","))))))
                                    (((xfield).xmany_to_many).not).if
                                      (((unsupported)).apply ((((unsupported)).apply ((xfake_user_data)) ((xfield_name)))) ((((unsupported)).apply ((xuser_data)) ((xfield_name)))))
                                    ((xfield).xmany_to_one).if
                                      (((unsupported)).apply ((((unsupported)).apply ((xfake_user_data)) ((xfield_name)))) ((((((xfield).xremote_field).xmodel)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))))))
                                while.
                                  ((((unsupported)).apply ((xPASSWORD_FIELD)) ((xuser_data))).and (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xPASSWORD_FIELD)))) ("None: is there a None literal in the EO language?")))
                                  [unused]
                                    seq > @
                                      seq
                                        xpassword.write ((((xgetpass).xgetpass)).apply)
                                        xpassword2.write ((((xgetpass).xgetpass)).apply ("Password (again): "))
                                        ((xpassword).neq (xpassword2)).if
                                          seq
                                            bogusForceDataize.write (((((xself).xstderr).xwrite)).apply ("Error: Your passwords didn't match."))
                                            (((unsupported)).apply)
                                        (((((xpassword).xstrip)).apply).eq "").if
                                          seq
                                            bogusForceDataize.write (((((xself).xstderr).xwrite)).apply ("Error: Blank passwords aren't allowed."))
                                            (((unsupported)).apply)
                                        (((unsupported)).apply (((xexceptions).xValidationError)))
                                          bogusForceDataize.write (((xvalidate_password)).apply ((xpassword2)) (((((xself).xUserModel)).apply ((((unsupported)).apply ((xfake_user_data)))))))
                                          seq
                                            bogusForceDataize.write (((((xself).xstderr).xwrite)).apply (((("n".xjoin)).apply (((xerr).xmessages)))))
                                            xresponse.write (((xinput)).apply ("Bypass password validation and create user anyway? [y/N]: "))
                                            (((((xresponse).xlower)).apply).neq "y").if
                                              (((unsupported)).apply)
                                        (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xPASSWORD_FIELD)))) ((xpassword)))
                              seq
                                ((((unsupported)).apply ((xPASSWORD_FIELD)) ((xuser_data))).and (((unsupported)).apply ("DJANGO_SUPERUSER_PASSWORD") (((xos).xenviron)))).if
                                  (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xPASSWORD_FIELD)))) ((((unsupported)).apply (((xos).xenviron)) ("DJANGO_SUPERUSER_PASSWORD"))))
                                (((unsupported)).apply ((xusername)) ("None: is there a None literal in the EO language?")).if
                                  xusername.write (((((xos).xenviron).xget)).apply (("DJANGO_SUPERUSER_".add ((((((xself).xUserModel).xUSERNAME_FIELD).xupper)).apply))))
                                (((unsupported)).apply ((xusername)) ("None: is there a None literal in the EO language?")).if
                                  (((unsupported)).apply ((((xCommandError)).apply (("You must use --%s with --noinput.".mod (((xself).xUserModel).xUSERNAME_FIELD))))))
                                  seq
                                    xerror_msg.write ((((xself).x_validate_username)).apply ((xusername)) ((xverbose_field_name)) ((xdatabase)))
                                    (xerror_msg).if
                                      (((unsupported)).apply ((((xCommandError)).apply ((xerror_msg)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((((xself).xUserModel).xUSERNAME_FIELD)))) ((xusername)))
                                (((unsupported)).apply ((xfield_name)) ((((xself).xUserModel).xREQUIRED_FIELDS)))
                                  seq
                                    xenv_var.write ("DJANGO_SUPERUSER_".add ((((xfield_name).xupper)).apply))
                                    xvalue.write ((((unsupported)).apply ((xoptions)) ((xfield_name))).or (((((xos).xenviron).xget)).apply ((xenv_var))))
                                    ((xvalue).not).if
                                      (((unsupported)).apply ((((xCommandError)).apply (("You must use --%s with --noinput.".mod (xfield_name))))))
                                    xfield.write ((((((xself).xUserModel).x_meta).xget_field)).apply ((xfield_name)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) (((((xfield).xclean)).apply ((xvalue)) ("None: is there a None literal in the EO language?"))))
                                    (((xfield).xmany_to_many).and (((xisinstance)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) ((xstr)))).if
                                      (((unsupported)).apply ((((unsupported)).apply ((xuser_data)) ((xfield_name)))) ((((unsupported)).apply (((((xpk).xstrip)).apply)) ((xpk)) (((((((unsupported)).apply ((xuser_data)) ((xfield_name))).xsplit)).apply (","))))))
                            bogusForceDataize.write (((((((((xself).xUserModel).x_default_manager).xdb_manager)).apply ((xdatabase))).xcreate_superuser)).apply ((((unsupported)).apply ((xuser_data)))))
                            ((((unsupported)).apply ((xoptions)) ("verbosity")).geq 1).if
                              bogusForceDataize.write (((((xself).xstdout).xwrite)).apply ("Superuser created successfully."))
                          seq
                            bogusForceDataize.write (((((xself).xstderr).xwrite)).apply ("nOperation cancelled."))
                            bogusForceDataize.write ((((xsys).xexit)).apply (1))
                          (((unsupported)).apply ((((xCommandError)).apply (((("; ".xjoin)).apply (((xe).xmessages)))))))
                          bogusForceDataize.write (((((xself).xstdout).xwrite)).apply ("Superuser creation skipped due to not running in a TTY. You can run `manage.py createsuperuser` in your project to create one manually."))
                xget_input_data.write
                  [xself xfield xmessage xdefault]
                    memory > xval
                    memory > xraw_value
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xraw_value.write (((xinput)).apply ((xmessage)))
                        ((xdefault).and ((xraw_value).eq "")).if
                          xraw_value.write (xdefault)
                        (((unsupported)).apply (((xexceptions).xValidationError)))
                          xval.write ((((xfield).xclean)).apply ((xraw_value)) ("None: is there a None literal in the EO language?"))
                          seq
                            bogusForceDataize.write (((((xself).xstderr).xwrite)).apply (("Error: %s".mod ((("; ".xjoin)).apply (((xe).xmessages))))))
                            xval.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xval)))
                x_get_input_message.write
                  [xself xfield xdefault]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (("%s%s%s: ".mod (((unsupported)).apply ((((xcapfirst)).apply (((xfield).xverbose_name)))) (((xdefault).if (" (leave blank to use '%s')".mod (xdefault)) "")) ((((xfield).xremote_field).if (" (%s.%s)".mod (((unsupported)).apply ((((((xfield).xremote_field).xmodel).x_meta).xobject_name)) ((((xfield).xmany_to_many).if ((((xfield).xm2m_target_field_name)).apply) (((xfield).xremote_field).xfield_name))))) ""))))))
                xusername_is_unique.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((xself).xusername_field).xunique).if
                          (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xunique_constraint)) (((((xself).xUserModel).x_meta).xtotal_unique_constraints)))
                          (((((xlen)).apply (((xunique_constraint).xfields))).eq 1).and ((((unsupported)).apply (((xunique_constraint).xfields)) (0)).eq (((xself).xusername_field).xname))).if
                            (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xfalse)))
                x_validate_username.write
                  [xself xusername xverbose_field_name xdatabase]
                    seq > @
                      seq
                        unsupported
                        ((xself).xusername_is_unique).if
                          (((unsupported)).apply ((((xself).xUserModel).xDoesNotExist)))
                            bogusForceDataize.write (((((((((xself).xUserModel).x_default_manager).xdb_manager)).apply ((xdatabase))).xget_by_natural_key)).apply ((xusername)))
                            (((unsupported)).apply (("Error: That %s is already taken.".mod (xverbose_field_name))))
                        ((xusername).not).if
                          (((unsupported)).apply (("%s cannot be blank.".mod (((xcapfirst)).apply ((xverbose_field_name))))))
                        (((unsupported)).apply (((xexceptions).xValidationError)))
                          bogusForceDataize.write (((((xself).xusername_field).xclean)).apply ((xusername)) ("None: is there a None literal in the EO language?"))
                          (((unsupported)).apply (((("; ".xjoin)).apply (((xe).xmessages)))))