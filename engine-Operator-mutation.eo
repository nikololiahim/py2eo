memory > xContext
memory > xlist
memory > xtemplate_name
memory > xpath
memory > xhasattr
memory > xx
memory > xTemplateDoesNotExist
memory > xexc
memory > xDjangoTemplates
memory > xloader
memory > xengine
memory > ximport_string
memory > xstr
memory > xrepr
memory > x_builtin_context_processors
memory > xtuple
memory > xorigin
memory > xTemplate
memory > xe
memory > xname
memory > xengines
memory > xImproperlyConfigured
memory > xtemplate_loader
memory > xisinstance
memory > ximport_library
[] > engine
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_template_libraries
        memory > x__repr__
        memory > xtemplate_loaders
        memory > xfind_template
        memory > xget_default
        memory > xrender_to_string
        memory > xget_template_builtins
        memory > x__init__
        memory > xget_template
        memory > xfind_template_loader
        memory > xdefault_builtins
        memory > xfrom_string
        memory > xtemplate_context_processors
        memory > xget_template_loaders
        memory > xselect_template
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xdefault_builtins.write (((unsupported)).apply ("django.template.defaulttags") ("django.template.defaultfilters") ("django.template.loader_tags"))
                x__init__.write
                  [xself xdirs xapp_dirs xcontext_processors xdebug xloaders xstring_if_invalid xfile_charset xlibraries xbuiltins xautoescape]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xdirs)) ("None: is there a None literal in the EO language?")).if
                          xdirs.write (((unsupported)).apply)
                        (((unsupported)).apply ((xcontext_processors)) ("None: is there a None literal in the EO language?")).if
                          xcontext_processors.write (((unsupported)).apply)
                        (((unsupported)).apply ((xloaders)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xloaders.write (((unsupported)).apply ("django.template.loaders.filesystem.Loader"))
                            (xapp_dirs).if
                              (((unsupported)).apply ((xloaders)) ((((unsupported)).apply ("django.template.loaders.app_directories.Loader"))))
                            ((xdebug).not).if
                              xloaders.write (((unsupported)).apply ((((unsupported)).apply ("django.template.loaders.cached.Loader") ((xloaders)))))
                          (xapp_dirs).if
                            (((unsupported)).apply ((((xImproperlyConfigured)).apply ("app_dirs must not be set when loaders is defined."))))
                        (((unsupported)).apply ((xlibraries)) ("None: is there a None literal in the EO language?")).if
                          xlibraries.write (((unsupported)).apply)
                        (((unsupported)).apply ((xbuiltins)) ("None: is there a None literal in the EO language?")).if
                          xbuiltins.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xdirs)) ((xdirs)))
                        (((unsupported)).apply (((xself).xapp_dirs)) ((xapp_dirs)))
                        (((unsupported)).apply (((xself).xautoescape)) ((xautoescape)))
                        (((unsupported)).apply (((xself).xcontext_processors)) ((xcontext_processors)))
                        (((unsupported)).apply (((xself).xdebug)) ((xdebug)))
                        (((unsupported)).apply (((xself).xloaders)) ((xloaders)))
                        (((unsupported)).apply (((xself).xstring_if_invalid)) ((xstring_if_invalid)))
                        (((unsupported)).apply (((xself).xfile_charset)) ((xfile_charset)))
                        (((unsupported)).apply (((xself).xlibraries)) ((xlibraries)))
                        (((unsupported)).apply (((xself).xtemplate_libraries)) (((((xself).xget_template_libraries)).apply ((xlibraries)))))
                        (((unsupported)).apply (((xself).xbuiltins)) ((((xself).xdefault_builtins).sub (xbuiltins))))
                        (((unsupported)).apply (((xself).xtemplate_builtins)) (((((xself).xget_template_builtins)).apply (((xself).xbuiltins)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s:%s app_dirs=%s%s debug=%s loaders=%s string_if_invalid=%s file_charset=%s%s%s autoescape=%s>".mod (((unsupported)).apply ((((xself).x__class__).x__qualname__)) (((((xself).xdirs).not).if "" (" dirs=%s".mod (((xrepr)).apply (((xself).xdirs)))))) (((xself).xapp_dirs)) (((((xself).xcontext_processors).not).if "" (" context_processors=%s".mod (((xrepr)).apply (((xself).xcontext_processors)))))) (((xself).xdebug)) ((((xrepr)).apply (((xself).xloaders)))) ((((xrepr)).apply (((xself).xstring_if_invalid)))) ((((xrepr)).apply (((xself).xfile_charset)))) (((((xself).xlibraries).not).if "" (" libraries=%s".mod (((xrepr)).apply (((xself).xlibraries)))))) (((((xself).xbuiltins).not).if "" (" builtins=%s".mod (((xrepr)).apply (((xself).xbuiltins)))))) ((((xrepr)).apply (((xself).xautoescape))))))))
                xget_default.write
                  []
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xengine)) (((((xengines).xall)).apply)))
                          (((xisinstance)).apply ((xengine)) ((xDjangoTemplates))).if
                            (((unsupported)).apply (((xengine).xengine)))
                        (((unsupported)).apply ((((xImproperlyConfigured)).apply ("No DjangoTemplates backend is configured."))))
                xtemplate_context_processors.write
                  [xself]
                    memory > xcontext_processors
                    seq > @
                      (((unsupported)).apply)
                        xcontext_processors.write (x_builtin_context_processors)
                        (((unsupported)).apply ((xcontext_processors)) ((((xtuple)).apply (((xself).xcontext_processors)))))
                        (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((ximport_string)).apply ((xpath)))) ((xpath)) ((xcontext_processors)))))))
                xget_template_builtins.write
                  [xself xbuiltins]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((ximport_library)).apply ((xx)))) ((xx)) ((xbuiltins)))))
                xget_template_libraries.write
                  [xself xlibraries]
                    memory > xloaded
                    seq > @
                      seq
                        xloaded.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)))) (((((xlibraries).xitems)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((xloaded)) ((xname)))) ((((ximport_library)).apply ((xpath)))))
                        (((unsupported)).apply ((xloaded)))
                xtemplate_loaders.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xget_template_loaders)).apply (((xself).xloaders)))))
                xget_template_loaders.write
                  [xself xtemplate_loaders]
                    memory > xloader
                    memory > xloaders
                    seq > @
                      seq
                        xloaders.write (((unsupported)).apply)
                        (((unsupported)).apply ((xtemplate_loader)) ((xtemplate_loaders)))
                          seq
                            xloader.write ((((xself).xfind_template_loader)).apply ((xtemplate_loader)))
                            (((unsupported)).apply ((xloader)) ("None: is there a None literal in the EO language?")).if
                              bogusForceDataize.write ((((xloaders).xappend)).apply ((xloader)))
                        (((unsupported)).apply ((xloaders)))
                xfind_template_loader.write
                  [xself xloader]
                    memory > xloader_class
                    memory > xargs
                    seq > @
                      seq
                        (((xisinstance)).apply ((xloader)) ((((unsupported)).apply ((xtuple)) ((xlist))))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xloader)) ((((unsupported)).apply ((xargs)))))) ((xloader)))
                          xargs.write (((unsupported)).apply)
                        (((xisinstance)).apply ((xloader)) ((xstr))).if
                          seq
                            xloader_class.write (((ximport_string)).apply ((xloader)))
                            (((unsupported)).apply ((((xloader_class)).apply ((xself)) ((((unsupported)).apply ((xargs)))))))
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply (("Invalid value in template loaders configuration: %r".mod (xloader))))))
                xfind_template.write
                  [xself xname xdirs xskip]
                    memory > xtemplate
                    memory > xtried
                    seq > @
                      (((unsupported)).apply)
                        xtried.write (((unsupported)).apply)
                        (((unsupported)).apply ((xloader)) (((xself).xtemplate_loaders)))
                          (((unsupported)).apply ((xTemplateDoesNotExist)))
                            seq
                              xtemplate.write (((unsupported)).apply (((xloader).xget_template)) ((xname)) ((xskip)))
                              (((unsupported)).apply ((((unsupported)).apply ((xtemplate)) (((xtemplate).xorigin)))))
                            bogusForceDataize.write ((((xtried).xextend)).apply (((xe).xtried)))
                        (((unsupported)).apply ((((unsupported)).apply ((xTemplateDoesNotExist)) ((xname)) ((xtried)))))
                xfrom_string.write
                  [xself xtemplate_code]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xTemplate)) ((xtemplate_code)) ((xself)))))
                xget_template.write
                  [xself xtemplate_name]
                    memory > xtemplate
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xtemplate)) ((xorigin)))) (((((xself).xfind_template)).apply ((xtemplate_name)))))
                        ((((xhasattr)).apply ((xtemplate)) ("render")).not).if
                          xtemplate.write (((unsupported)).apply ((xTemplate)) ((xtemplate)) ((xorigin)) ((xtemplate_name)) ((xself)))
                        (((unsupported)).apply ((xtemplate)))
                xrender_to_string.write
                  [xself xtemplate_name xcontext]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((xisinstance)).apply ((xtemplate_name)) ((((unsupported)).apply ((xlist)) ((xtuple))))).if
                          xt.write ((((xself).xselect_template)).apply ((xtemplate_name)))
                          xt.write ((((xself).xget_template)).apply ((xtemplate_name)))
                        (((xisinstance)).apply ((xcontext)) ((xContext))).if
                          (((unsupported)).apply (((((xt).xrender)).apply ((xcontext)))))
                          (((unsupported)).apply (((((xt).xrender)).apply ((((unsupported)).apply ((xContext)) ((xcontext)) (((xself).xautoescape)))))))
                xselect_template.write
                  [xself xtemplate_name_list]
                    memory > xnot_found
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xtemplate_name_list).not).if
                          (((unsupported)).apply ((((xTemplateDoesNotExist)).apply ("No template names provided"))))
                        xnot_found.write (((unsupported)).apply)
                        (((unsupported)).apply ((xtemplate_name)) ((xtemplate_name_list)))
                          (((unsupported)).apply ((xTemplateDoesNotExist)))
                            (((unsupported)).apply (((((xself).xget_template)).apply ((xtemplate_name)))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply (((xexc).xargs)) (0))) ((xnot_found))).if
                                bogusForceDataize.write ((((xnot_found).xappend)).apply ((((unsupported)).apply (((xexc).xargs)) (0))))
                              (((unsupported)).apply)
                        (((unsupported)).apply ((((xTemplateDoesNotExist)).apply ((((", ".xjoin)).apply ((xnot_found)))))))