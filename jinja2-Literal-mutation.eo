memory > xTemplateSyntaxError
memory > xmin
memory > xlist
memory > xenumerate
memory > xmax
memory > xsettings
memory > xsuper
memory > xBaseEngine
memory > xTemplateDoesNotExist
memory > xTemplate
memory > xjinja2
memory > xlen
memory > xcontext_processor
memory > xcsrf_token_lazy
memory > ximport_string
memory > xOrigin
memory > xpath
memory > xPath
memory > xexc
memory > xcsrf_input_lazy
[] > jinja2
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_template
        memory > xapp_dirname
        memory > x__init__
        memory > xrender
        memory > xget_exception_info
        memory > xfrom_string
        memory > xtemplate_context_processors
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xBaseEngine)))
              seq
                xapp_dirname.write "jinja2"
                x__init__.write
                  [xself xparams]
                    memory > xenvironment
                    memory > xoptions
                    memory > xenvironment_cls
                    seq > @
                      seq
                        xparams.write ((((xparams).xcopy)).apply)
                        xoptions.write (((((((xparams).xpop)).apply ("OPTIONS")).xcopy)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xparams)))
                        (((unsupported)).apply (((xself).xcontext_processors)) (((((xoptions).xpop)).apply ("context_processors") ((((unsupported)).apply)))))
                        xenvironment.write ((((xoptions).xpop)).apply ("environment") ("jinja2.Environment"))
                        xenvironment_cls.write (((ximport_string)).apply ((xenvironment)))
                        (((unsupported)).apply ("loader") ((xoptions))).if
                          (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ("loader"))) (((((xjinja2).xFileSystemLoader)).apply (((xself).xtemplate_dirs)))))
                        bogusForceDataize.write ((((xoptions).xsetdefault)).apply ("autoescape") (TRUE))
                        bogusForceDataize.write ((((xoptions).xsetdefault)).apply ("auto_reload") (((xsettings).xDEBUG)))
                        bogusForceDataize.write ((((xoptions).xsetdefault)).apply ("undefined") ((((xsettings).xDEBUG).if ((xjinja2).xDebugUndefined) ((xjinja2).xUndefined))))
                        (((unsupported)).apply (((xself).xenv)) ((((xenvironment_cls)).apply ((((unsupported)).apply ((xoptions)))))))
                xfrom_string.write
                  [xself xtemplate_code]
                    seq > @
                      (((unsupported)).apply ((((xTemplate)).apply ((((((xself).xenv).xfrom_string)).apply ((xtemplate_code)))) ((xself)))))
                xget_template.write
                  [xself xtemplate_name]
                    memory > xnew
                    seq > @
                      (((unsupported)).apply (((xjinja2).xTemplateNotFound)) (((xjinja2).xTemplateSyntaxError)))
                        (((unsupported)).apply ((((xTemplate)).apply ((((((xself).xenv).xget_template)).apply ((xtemplate_name)))) ((xself)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xTemplateDoesNotExist)) (((xexc).xname)) ((xself)))) ((xexc)))
                        seq
                          xnew.write (((xTemplateSyntaxError)).apply (((xexc).xargs)))
                          (((unsupported)).apply (((xnew).xtemplate_debug)) ((((xget_exception_info)).apply ((xexc)))))
                          (((unsupported)).apply ((xnew)) ((xexc)))
                xtemplate_context_processors.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((((ximport_string)).apply ((xpath)))) ((xpath)) (((xself).xcontext_processors)))))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xtemplate xbackend]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtemplate)) ((xtemplate)))
                        (((unsupported)).apply (((xself).xbackend)) ((xbackend)))
                        (((unsupported)).apply (((xself).xorigin)) ((((unsupported)).apply ((xOrigin)) (((xtemplate).xfilename)) (((xtemplate).xname)))))
                xrender.write
                  [xself xcontext xrequest]
                    memory > xnew
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xcontext)) ("None: is there a None literal in the EO language?")).if
                          xcontext.write (((unsupported)).apply)
                        (((unsupported)).apply ((xrequest)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("request"))) ((xrequest)))
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("csrf_input"))) ((((xcsrf_input_lazy)).apply ((xrequest)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("csrf_token"))) ((((xcsrf_token_lazy)).apply ((xrequest)))))
                            (((unsupported)).apply ((xcontext_processor)) ((((xself).xbackend).xtemplate_context_processors)))
                              bogusForceDataize.write ((((xcontext).xupdate)).apply ((((xcontext_processor)).apply ((xrequest)))))
                        (((unsupported)).apply (((xjinja2).xTemplateSyntaxError)))
                          (((unsupported)).apply ((((((xself).xtemplate).xrender)).apply ((xcontext)))))
                          seq
                            xnew.write (((xTemplateSyntaxError)).apply (((xexc).xargs)))
                            (((unsupported)).apply (((xnew).xtemplate_debug)) ((((xget_exception_info)).apply ((xexc)))))
                            (((unsupported)).apply ((xnew)) ((xexc)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xname xtemplate_name]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                        (((unsupported)).apply (((xself).xtemplate_name)) ((xtemplate_name)))
            xget_exception_info.write
              [xexception]
                memory > xlines
                memory > xduring
                memory > xtotal
                memory > xlineno
                memory > xtop
                memory > xsource
                memory > xbottom
                memory > xcontext_lines
                memory > xexception_file
                seq > @
                  seq
                    (((unsupported)).apply)
                    xcontext_lines.write 10
                    xlineno.write ((xexception).xlineno)
                    xsource.write ((xexception).xsource)
                    (((unsupported)).apply ((xsource)) ("None: is there a None literal in the EO language?")).if
                      seq
                        xexception_file.write (((xPath)).apply (((xexception).xfilename)))
                        ((((xexception_file).xexists)).apply).if
                          xsource.write ((((xexception_file).xread_text)).apply)
                    (((unsupported)).apply ((xsource)) ("None: is there a None literal in the EO language?")).if
                      seq
                        xlines.write (((xlist)).apply ((((unsupported)).apply ((xenumerate)) ((((((((xsource).xstrip)).apply).xsplit)).apply ("n"))) (1))))
                        xduring.write (((unsupported)).apply ((((unsupported)).apply ((xlines)) (((xlineno).sub 1)))) (1))
                        xtotal.write (((xlen)).apply ((xlines)))
                        xtop.write (((xmax)).apply (0) ((((xlineno).sub (xcontext_lines)).sub 1)))
                        xbottom.write (((xmin)).apply ((xtotal)) (((xlineno).add (xcontext_lines))))
                      seq
                        xduring.write ""
                        xlines.write (((unsupported)).apply)
                        (((unsupported)).apply ((xtotal)) ((xtop)) ((xbottom)) (1))
                    (((unsupported)).apply ((((unsupported)).apply ("name") (((xexception).xfilename)) ("message") (((xexception).xmessage)) ("source_lines") ((((unsupported)).apply ((xlines)) ((((unsupported)).apply ((xtop)) ((xbottom)))))) ("line") ((xlineno)) ("before") ("") ("during") ((xduring)) ("after") ("") ("total") ((xtotal)) ("top") ((xtop)) ("bottom") ((xbottom)))))