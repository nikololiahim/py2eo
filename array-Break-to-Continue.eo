memory > xcopy
memory > xforms
memory > xValidationError
memory > xrange
memory > xvalue
memory > xIndexError
memory > xmax
memory > xint
memory > xi
memory > xArrayMaxLengthValidator
memory > xSplitArrayWidget
memory > xall
memory > xlist
memory > xindex
memory > xenumerate
memory > xprefix_validation_error
memory > xstr
memory > xerror
memory > xreversed
memory > xany
memory > xtype
memory > xsuper
memory > xchain
memory > xnull_index
memory > xitem
memory > xval
memory > xv
memory > xfilter
memory > xkwargs
memory > xisinstance
memory > xlen
memory > xArrayMinLengthValidator
[] > array
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xclean
        memory > x__deepcopy__
        memory > xvalue_omitted_from_data
        memory > xvalue_from_datadict
        memory > x_
        memory > xto_python
        memory > xvalidate
        memory > xrun_validators
        memory > xprepare_value
        memory > xid_for_label
        memory > x__init__
        memory > xmedia
        memory > xneeds_multipart_form
        memory > xget_context
        memory > xdefault_error_messages
        memory > xhas_changed
        memory > xis_hidden
        memory > x_remove_trailing_nulls
        memory > xtemplate_name
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xforms).xCharField)))
              seq
                xdefault_error_messages.write (((unsupported)).apply ("item_invalid") ((((x_)).apply ("Item %(nth)s in the array did not validate:"))))
                x__init__.write
                  [xself xbase_field xdelimiter xmax_length xmin_length]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xbase_field)) ((xbase_field)))
                        (((unsupported)).apply (((xself).xdelimiter)) ((xdelimiter)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xkwargs)))))
                        (((unsupported)).apply ((xmin_length)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply (((xself).xmin_length)) ((xmin_length)))
                            bogusForceDataize.write (((((xself).xvalidators).xappend)).apply ((((xArrayMinLengthValidator)).apply ((((xint)).apply ((xmin_length)))))))
                        (((unsupported)).apply ((xmax_length)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply (((xself).xmax_length)) ((xmax_length)))
                            bogusForceDataize.write (((((xself).xvalidators).xappend)).apply ((((xArrayMaxLengthValidator)).apply ((((xint)).apply ((xmax_length)))))))
                xclean.write
                  [xself xvalue]
                    seq > @
                      seq
                        xvalue.write ((((((xsuper)).apply).xclean)).apply ((xvalue)))
                        (((unsupported)).apply ((((unsupported)).apply ((((((xself).xbase_field).xclean)).apply ((xval)))) ((xval)) ((xvalue)))))
                xprepare_value.write
                  [xself xvalue]
                    seq > @
                      seq
                        (((xisinstance)).apply ((xvalue)) ((xlist))).if
                          (((unsupported)).apply ((((((xself).xdelimiter).xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((((((xself).xbase_field).xprepare_value)).apply ((xv)))))) ((xv)) ((xvalue)))))))
                        (((unsupported)).apply ((xvalue)))
                xto_python.write
                  [xself xvalue]
                    memory > xerrors
                    memory > xvalues
                    memory > xitems
                    seq > @
                      seq
                        (((xisinstance)).apply ((xvalue)) ((xlist))).if
                          xitems.write (xvalue)
                          (xvalue).if
                            xitems.write ((((xvalue).xsplit)).apply (((xself).xdelimiter)))
                            xitems.write (((unsupported)).apply)
                        xerrors.write (((unsupported)).apply)
                        xvalues.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((xitem)))) ((((xenumerate)).apply ((xitems)))))
                          (((unsupported)).apply ((xValidationError)))
                            bogusForceDataize.write ((((xvalues).xappend)).apply ((((((xself).xbase_field).xto_python)).apply ((xitem)))))
                            bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply ((xprefix_validation_error)) ((xerror)) ((((unsupported)).apply (((xself).xerror_messages)) ("item_invalid"))) ("item_invalid") ((((unsupported)).apply ("nth") (((xindex).add 1)))))))
                        (xerrors).if
                          (((unsupported)).apply ((((xValidationError)).apply ((xerrors)))))
                        (((unsupported)).apply ((xvalues)))
                xvalidate.write
                  [xself xvalue]
                    memory > xerrors
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xvalidate)).apply ((xvalue)))
                        xerrors.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((xitem)))) ((((xenumerate)).apply ((xvalue)))))
                          (((unsupported)).apply ((xValidationError)))
                            bogusForceDataize.write (((((xself).xbase_field).xvalidate)).apply ((xitem)))
                            bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply ((xprefix_validation_error)) ((xerror)) ((((unsupported)).apply (((xself).xerror_messages)) ("item_invalid"))) ("item_invalid") ((((unsupported)).apply ("nth") (((xindex).add 1)))))))
                        (xerrors).if
                          (((unsupported)).apply ((((xValidationError)).apply ((xerrors)))))
                xrun_validators.write
                  [xself xvalue]
                    memory > xerrors
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xrun_validators)).apply ((xvalue)))
                        xerrors.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xindex)) ((xitem)))) ((((xenumerate)).apply ((xvalue)))))
                          (((unsupported)).apply ((xValidationError)))
                            bogusForceDataize.write (((((xself).xbase_field).xrun_validators)).apply ((xitem)))
                            bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply ((xprefix_validation_error)) ((xerror)) ((((unsupported)).apply (((xself).xerror_messages)) ("item_invalid"))) ("item_invalid") ((((unsupported)).apply ("nth") (((xindex).add 1)))))))
                        (xerrors).if
                          (((unsupported)).apply ((((xValidationError)).apply ((xerrors)))))
                xhas_changed.write
                  [xself xinitial xdata]
                    memory > xvalue
                    seq > @
                      seq
                        (((unsupported)).apply ((xValidationError)))
                          xvalue.write ((((xself).xto_python)).apply ((xdata)))
                          ((((unsupported)).apply ((xinitial)) (((xself).xempty_values))).and (((unsupported)).apply ((xvalue)) (((xself).xempty_values)))).if
                            (((unsupported)).apply (FALSE))
                        (((unsupported)).apply (((((((xsuper)).apply).xhas_changed)).apply ((xinitial)) ((xdata)))))
            (((unsupported)).apply (((xforms).xWidget)))
              seq
                xtemplate_name.write "postgres/widgets/split_array.html"
                x__init__.write
                  [xself xwidget xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xwidget)) (((((xisinstance)).apply ((xwidget)) ((xtype))).if (((xwidget)).apply) (xwidget))))
                        (((unsupported)).apply (((xself).xsize)) ((xsize)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xkwargs)))))
                xis_hidden.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xwidget).xis_hidden)))
                xvalue_from_datadict.write
                  [xself xdata xfiles xname]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((((xself).xwidget).xvalue_from_datadict)).apply ((xdata)) ((xfiles)) (("%s_%s".mod (((unsupported)).apply ((xname)) ((xindex))))))) ((xindex)) ((((xrange)).apply (((xself).xsize)))))))
                xvalue_omitted_from_data.write
                  [xself xdata xfiles xname]
                    seq > @
                      (((unsupported)).apply ((((xall)).apply ((((unsupported)).apply ((((((xself).xwidget).xvalue_omitted_from_data)).apply ((xdata)) ((xfiles)) (("%s_%s".mod (((unsupported)).apply ((xname)) ((xindex))))))) ((xindex)) ((((xrange)).apply (((xself).xsize)))))))))
                xid_for_label.write
                  [xself xid_]
                    seq > @
                      seq
                        (xid_).if
                          (((unsupported)).apply ((xid_)) ("_0"))
                        (((unsupported)).apply ((xid_)))
                xget_context.write
                  [xself xname xvalue xattrs]
                    memory > xcontext
                    memory > xfinal_attrs
                    memory > xwidget_value
                    memory > xid_
                    seq > @
                      (((unsupported)).apply)
                        xattrs.write ((((unsupported)).apply ((xattrs)) ("None: is there a None literal in the EO language?")).if (((unsupported)).apply) (xattrs))
                        xcontext.write ((((((xsuper)).apply).xget_context)).apply ((xname)) ((xvalue)) ((xattrs)))
                        ((xself).xis_localized).if
                          (((unsupported)).apply ((((xself).xwidget).xis_localized)) (((xself).xis_localized)))
                        xvalue.write ((xvalue).or (((unsupported)).apply))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("subwidgets"))) ((((unsupported)).apply)))
                        xfinal_attrs.write ((((xself).xbuild_attrs)).apply ((xattrs)))
                        xid_.write ((((xfinal_attrs).xget)).apply ("id"))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xmax)).apply ((((xlen)).apply ((xvalue)))) (((xself).xsize)))))))
                          seq
                            (((unsupported)).apply ((xIndexError)))
                              xwidget_value.write (((unsupported)).apply ((xvalue)) ((xi)))
                              xwidget_value.write "None: is there a None literal in the EO language?"
                            (xid_).if
                              xfinal_attrs.write (((unsupported)).apply ((xfinal_attrs)) ("id") (("%s_%s".mod (((unsupported)).apply ((xid_)) ((xi))))))
                            bogusForceDataize.write ((((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("subwidgets")).xappend)).apply ((((unsupported)).apply ((((((xself).xwidget).xget_context)).apply (((xname).add ("_%s".mod (xi)))) ((xwidget_value)) ((xfinal_attrs)))) ("widget"))))
                        (((unsupported)).apply ((xcontext)))
                xmedia.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xwidget).xmedia)))
                x__deepcopy__.write
                  [xself xmemo]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write ((((((xsuper)).apply).x__deepcopy__)).apply ((xmemo)))
                        (((unsupported)).apply (((xobj).xwidget)) (((((xcopy).xdeepcopy)).apply (((xself).xwidget)))))
                        (((unsupported)).apply ((xobj)))
                xneeds_multipart_form.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xwidget).xneeds_multipart_form)))
            (((unsupported)).apply (((xforms).xField)))
              seq
                xdefault_error_messages.write (((unsupported)).apply ("item_invalid") ((((x_)).apply ("Item %(nth)s in the array did not validate:"))))
                x__init__.write
                  [xself xbase_field xsize xremove_trailing_nulls]
                    memory > xwidget
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xbase_field)) ((xbase_field)))
                        (((unsupported)).apply (((xself).xsize)) ((xsize)))
                        (((unsupported)).apply (((xself).xremove_trailing_nulls)) ((xremove_trailing_nulls)))
                        xwidget.write (((unsupported)).apply ((xSplitArrayWidget)) (((xbase_field).xwidget)) ((xsize)))
                        bogusForceDataize.write ((((xkwargs).xsetdefault)).apply ("widget") ((xwidget)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((xkwargs)))))
                x_remove_trailing_nulls.write
                  [xself xvalues]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write "None: is there a None literal in the EO language?"
                        ((xself).xremove_trailing_nulls).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xvalue)))) ((((xreversed)).apply ((((xlist)).apply ((((xenumerate)).apply ((xvalues)))))))))
                              (((unsupported)).apply ((xvalue)) ((((xself).xbase_field).xempty_values))).if
                                xindex.write (xi)
                                (((unsupported)).apply)
                            (((unsupported)).apply ((xindex)) ("None: is there a None literal in the EO language?")).if
                              xvalues.write (((unsupported)).apply ((xvalues)) ((((unsupported)).apply ((xindex)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalues)) ((xindex)))))
                xto_python.write
                  [xself xvalue]
                    seq > @
                      seq
                        xvalue.write ((((((xsuper)).apply).xto_python)).apply ((xvalue)))
                        (((unsupported)).apply ((((unsupported)).apply ((((((xself).xbase_field).xto_python)).apply ((xitem)))) ((xitem)) ((xvalue)))))
                xclean.write
                  [xself xvalue]
                    memory > xerrors
                    memory > xmax_size
                    memory > xcleaned_data
                    memory > xitem
                    seq > @
                      seq
                        xcleaned_data.write (((unsupported)).apply)
                        xerrors.write (((unsupported)).apply)
                        (((((xany)).apply ((xvalue))).not).and ((xself).xrequired)).if
                          (((unsupported)).apply ((((xValidationError)).apply ((((unsupported)).apply (((xself).xerror_messages)) ("required"))))))
                        xmax_size.write (((xmax)).apply (((xself).xsize)) ((((xlen)).apply ((xvalue)))))
                        (((unsupported)).apply ((xindex)) ((((xrange)).apply ((xmax_size)))))
                          seq
                            xitem.write (((unsupported)).apply ((xvalue)) ((xindex)))
                            (((unsupported)).apply ((xValidationError)))
                              bogusForceDataize.write ((((xcleaned_data).xappend)).apply ((((((xself).xbase_field).xclean)).apply ((xitem)))))
                              seq
                                bogusForceDataize.write ((((xerrors).xappend)).apply ((((unsupported)).apply ((xprefix_validation_error)) ((xerror)) ((((unsupported)).apply (((xself).xerror_messages)) ("item_invalid"))) ("item_invalid") ((((unsupported)).apply ("nth") (((xindex).add 1)))))))
                                bogusForceDataize.write ((((xcleaned_data).xappend)).apply ("None: is there a None literal in the EO language?"))
                              bogusForceDataize.write ((((xerrors).xappend)).apply ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply ((xcleaned_data)) ((xnull_index)))) (((((xself).x_remove_trailing_nulls)).apply ((xcleaned_data)))))
                        (((unsupported)).apply ((xnull_index)) ("None: is there a None literal in the EO language?")).if
                          xerrors.write (((unsupported)).apply ((xerrors)) ((((unsupported)).apply ((xnull_index)))))
                        xerrors.write (((xlist)).apply ((((xfilter)).apply ("None: is there a None literal in the EO language?") ((xerrors)))))
                        (xerrors).if
                          (((unsupported)).apply ((((xValidationError)).apply ((((xlist)).apply (((((xchain).xfrom_iterable)).apply ((xerrors)))))))))
                        (((unsupported)).apply ((xcleaned_data)))
                xhas_changed.write
                  [xself xinitial xdata]
                    seq > @
                      seq
                        (((unsupported)).apply ((xValidationError)))
                          xdata.write ((((xself).xto_python)).apply ((xdata)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xdata)) ((x_)))) (((((xself).x_remove_trailing_nulls)).apply ((xdata)))))
                            ((((unsupported)).apply ((xinitial)) (((xself).xempty_values))).and (((unsupported)).apply ((xdata)) (((xself).xempty_values)))).if
                              (((unsupported)).apply (FALSE))
                        (((unsupported)).apply (((((((xsuper)).apply).xhas_changed)).apply ((xinitial)) ((xdata)))))