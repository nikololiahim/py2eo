memory > xerror
memory > xError
memory > xconnections
memory > xmock
memory > xModel
memory > xmodels
memory > xisolate_apps
memory > xSimpleTestCase
[] > test_backend_specific
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xdummy_allow_migrate
        memory > xtest_check_field
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xdummy_allow_migrate.write
              [xdb xapp_label]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply (((xdb).eq "default")))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xisolate_apps)).apply ("invalid_models_tests"))))
              xtest_check_field.write
                [xself]
                  memory > xfield
                  memory > xerror2
                  seq > @
                    (((unsupported)).apply)
                      unsupported
                      xerror2.write (((xError)).apply ("an error"))
                      (((unsupported)).apply (((xmodels).xModel)))
                        xfield.write ((((xmodels).xIntegerField)).apply)
                      xfield.write (((((xModel).x_meta).xget_field)).apply ("field"))
                      (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) (((((unsupported)).apply ((xconnections)) ("default")).xvalidation)) ("check_field") ((((unsupported)).apply ((xerror)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xfield).xcheck)) ((((unsupported)).apply ("default"))))) ((((unsupported)).apply ((xerror)))))