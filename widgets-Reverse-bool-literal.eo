memory > xk
memory > xUUIDField
memory > xValueError
memory > xstr
memory > xValidationError
memory > xurlencode
memory > xAutocompleteMixin
memory > xTruncator
memory > xForeignKeyRawIdWidget
memory > xparam
memory > xcallable
memory > xsmart_urlquote
memory > xreverse
memory > xCASCADE
memory > xcopy
memory > xNoReverseMatch
memory > xforms
memory > xAdminIntegerFieldWidget
memory > xlist
memory > xsettings
memory > xint
memory > xhasattr
memory > xTO_FIELD_VAR
memory > xx
memory > xAdminDateWidget
memory > xsuper
memory > xoption_label
memory > xbool
memory > xtuple
memory > xargs
memory > xobj
memory > xoption_value
memory > xgetattr
memory > xv
memory > xid
memory > xIS_POPUP_VAR
memory > xjson
memory > xget_language
memory > xisinstance
memory > xAdminTimeWidget
memory > xlen
[] > widgets
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x__deepcopy__
        memory > xurl_parameters
        memory > xvalue_omitted_from_data
        memory > xclass_name
        memory > x_
        memory > xlabel_and_url_for_value
        memory > xbuild_attrs
        memory > xjs
        memory > xbase_url_parameters
        memory > xid_for_label
        memory > xget_related_url
        memory > x__init__
        memory > xmedia
        memory > xget_context
        memory > xget_url
        memory > xget_select2_language
        memory > xformat_value
        memory > xurl_name
        memory > xvalue_from_datadict
        memory > xSELECT2_TRANSLATIONS
        memory > xoptgroups
        memory > xis_hidden
        memory > xtemplate_name
        memory > xurl_params_from_lookup_dict
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xforms).xSelectMultiple)))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply)
                  xjs.write (((unsupported)).apply ("admin/js/core.js") ("admin/js/SelectBox.js") ("admin/js/SelectFilter2.js"))
                x__init__.write
                  [xself xverbose_name xis_stacked xattrs xchoices]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xverbose_name)) ((xverbose_name)))
                        (((unsupported)).apply (((xself).xis_stacked)) ((xis_stacked)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xattrs)) ((xchoices)))
                xget_context.write
                  [xself xname xvalue xattrs]
                    memory > xcontext
                    seq > @
                      seq
                        xcontext.write ((((((xsuper)).apply).xget_context)).apply ((xname)) ((xvalue)) ((xattrs)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("attrs"))) ("class"))) ("selectfilter"))
                        ((xself).xis_stacked).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("attrs"))) ("class"))) ("stacked"))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("attrs"))) ("data-field-name"))) (((xself).xverbose_name)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("attrs"))) ("data-is-stacked"))) ((((xint)).apply (((xself).xis_stacked)))))
                        (((unsupported)).apply ((xcontext)))
            (((unsupported)).apply (((xforms).xDateInput)))
              seq
                (((unsupported)).apply)
                  xjs.write (((unsupported)).apply ("admin/js/calendar.js") ("admin/js/admin/DateTimeShortcuts.js"))
                x__init__.write
                  [xself xattrs xformat]
                    seq > @
                      (((unsupported)).apply)
                        xattrs.write (((unsupported)).apply ("class") ("vDateField") ("size") ("10") (((xattrs).or (((unsupported)).apply))))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xattrs)) ((xformat)))
            (((unsupported)).apply (((xforms).xTimeInput)))
              seq
                (((unsupported)).apply)
                  xjs.write (((unsupported)).apply ("admin/js/calendar.js") ("admin/js/admin/DateTimeShortcuts.js"))
                x__init__.write
                  [xself xattrs xformat]
                    seq > @
                      (((unsupported)).apply)
                        xattrs.write (((unsupported)).apply ("class") ("vTimeField") ("size") ("8") (((xattrs).or (((unsupported)).apply))))
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((xattrs)) ((xformat)))
            (((unsupported)).apply (((xforms).xSplitDateTimeWidget)))
              seq
                (((unsupported)).apply)
                xtemplate_name.write "admin/widgets/split_datetime.html"
                x__init__.write
                  [xself xattrs]
                    memory > xwidgets
                    seq > @
                      (((unsupported)).apply)
                        xwidgets.write (((unsupported)).apply ((xAdminDateWidget)) ((xAdminTimeWidget)))
                        bogusForceDataize.write (((((xforms).xMultiWidget).x__init__)).apply ((xself)) ((xwidgets)) ((xattrs)))
                xget_context.write
                  [xself xname xvalue xattrs]
                    memory > xcontext
                    seq > @
                      seq
                        xcontext.write ((((((xsuper)).apply).xget_context)).apply ((xname)) ((xvalue)) ((xattrs)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("date_label"))) ((((x_)).apply ("Date:"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("time_label"))) ((((x_)).apply ("Time:"))))
                        (((unsupported)).apply ((xcontext)))
            (((unsupported)).apply (((xforms).xRadioSelect)))
              xtemplate_name.write "admin/widgets/radio.html"
            (((unsupported)).apply (((xforms).xClearableFileInput)))
              xtemplate_name.write "admin/widgets/clearable_file_input.html"
            xurl_params_from_lookup_dict.write
              [xlookups]
                memory > xv
                memory > xparams
                seq > @
                  seq
                    (((unsupported)).apply)
                    xparams.write (((unsupported)).apply)
                    ((xlookups).and (((xhasattr)).apply ((xlookups)) ("items"))).if
                      (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) (((((xlookups).xitems)).apply)))
                        seq
                          (((xcallable)).apply ((xv))).if
                            xv.write (((xv)).apply)
                          (((xisinstance)).apply ((xv)) ((((unsupported)).apply ((xtuple)) ((xlist))))).if
                            xv.write (((",".xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xx)))) ((xx)) ((xv)))))
                            (((xisinstance)).apply ((xv)) ((xbool))).if
                              xv.write (((unsupported)).apply ((((unsupported)).apply ("0") ("1"))) ((xv)))
                              xv.write (((xstr)).apply ((xv)))
                          (((unsupported)).apply ((((unsupported)).apply ((xparams)) ((xk)))) ((xv)))
                    (((unsupported)).apply ((xparams)))
            (((unsupported)).apply (((xforms).xTextInput)))
              seq
                (((unsupported)).apply)
                xtemplate_name.write "admin/widgets/foreign_key_raw_id.html"
                x__init__.write
                  [xself xrel xadmin_site xattrs xusing]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xrel)) ((xrel)))
                        (((unsupported)).apply (((xself).xadmin_site)) ((xadmin_site)))
                        (((unsupported)).apply (((xself).xdb)) ((xusing)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xattrs)))
                xget_context.write
                  [xself xname xvalue xattrs]
                    memory > xrel_to
                    memory > xcontext
                    memory > xcss_class
                    memory > xparams
                    memory > xrelated_url
                    seq > @
                      seq
                        xcontext.write ((((((xsuper)).apply).xget_context)).apply ((xname)) ((xvalue)) ((xattrs)))
                        xrel_to.write (((xself).xrel).xmodel)
                        (((unsupported)).apply ((xrel_to)) ((((xself).xadmin_site).x_registry))).if
                          seq
                            xrelated_url.write (((unsupported)).apply ((xreverse)) (("admin:%s_%s_changelist".mod (((unsupported)).apply ((((xrel_to).x_meta).xapp_label)) ((((xrel_to).x_meta).xmodel_name))))) ((((xself).xadmin_site).xname)))
                            xparams.write ((((xself).xurl_parameters)).apply)
                            (xparams).if
                              (((unsupported)).apply ((xrelated_url)) (("?".add (((xurlencode)).apply ((xparams))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("related_url"))) ((xrelated_url)))
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("link_title"))) ((((x_)).apply ("Lookup"))))
                            xcss_class.write "vForeignKeyRawIdAdminField"
                            (((xisinstance)).apply ((((((xself).xrel).xget_related_field)).apply)) ((xUUIDField))).if
                              (((unsupported)).apply ((xcss_class)) (" vUUIDField"))
                            bogusForceDataize.write ((((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("attrs")).xsetdefault)).apply ("class") ((xcss_class)))
                          (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("related_url"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("value")).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("link_label"))) ((((unsupported)).apply ((xcontext)) ("link_url"))))) (((((xself).xlabel_and_url_for_value)).apply ((xvalue)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("link_label"))) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xcontext)))
                xbase_url_parameters.write
                  [xself]
                    memory > xlimit_choices_to
                    seq > @
                      seq
                        xlimit_choices_to.write (((xself).xrel).xlimit_choices_to)
                        (((xcallable)).apply ((xlimit_choices_to))).if
                          xlimit_choices_to.write (((xlimit_choices_to)).apply)
                        (((unsupported)).apply ((((xurl_params_from_lookup_dict)).apply ((xlimit_choices_to)))))
                xurl_parameters.write
                  [xself]
                    memory > xparams
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xparams.write ((((xself).xbase_url_parameters)).apply)
                        bogusForceDataize.write ((((xparams).xupdate)).apply ((((unsupported)).apply ((xTO_FIELD_VAR)) (((((((xself).xrel).xget_related_field)).apply).xname)))))
                        (((unsupported)).apply ((xparams)))
                xlabel_and_url_for_value.write
                  [xself xvalue]
                    memory > xobj
                    memory > xurl
                    memory > xkey
                    seq > @
                      seq
                        xkey.write ((((((xself).xrel).xget_related_field)).apply).xname)
                        (((unsupported)).apply ((((unsupported)).apply ((xValueError)) (((((xself).xrel).xmodel).xDoesNotExist)) ((xValidationError)))))
                          xobj.write ((((((((((xself).xrel).xmodel).x_default_manager).xusing)).apply (((xself).xdb))).xget)).apply ((((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xvalue)))))))
                          (((unsupported)).apply ((((unsupported)).apply ("") (""))))
                        (((unsupported)).apply ((xNoReverseMatch)))
                          xurl.write (((unsupported)).apply ((xreverse)) (("%s:%s_%s_change".mod (((unsupported)).apply ((((xself).xadmin_site).xname)) ((((xobj).x_meta).xapp_label)) (((((((xobj).x_meta).xobject_name).xlower)).apply))))) ((((unsupported)).apply (((xobj).xpk)))))
                          xurl.write ""
                        (((unsupported)).apply ((((unsupported)).apply (((((((xTruncator)).apply ((xobj))).xwords)).apply (14))) ((xurl)))))
            (((unsupported)).apply ((xForeignKeyRawIdWidget)))
              seq
                (((unsupported)).apply)
                xtemplate_name.write "admin/widgets/many_to_many_raw_id.html"
                xget_context.write
                  [xself xname xvalue xattrs]
                    memory > xcontext
                    seq > @
                      seq
                        xcontext.write ((((((xsuper)).apply).xget_context)).apply ((xname)) ((xvalue)) ((xattrs)))
                        (((unsupported)).apply ((((xself).xrel).xmodel)) ((((xself).xadmin_site).x_registry))).if
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("attrs"))) ("class"))) ("vManyToManyRawIdAdminField"))
                        (((unsupported)).apply ((xcontext)))
                xurl_parameters.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xbase_url_parameters)).apply)))
                xlabel_and_url_for_value.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ("") (""))))
                xvalue_from_datadict.write
                  [xself xdata xfiles xname]
                    memory > xvalue
                    seq > @
                      seq
                        xvalue.write ((((xdata).xget)).apply ((xname)))
                        (xvalue).if
                          (((unsupported)).apply (((((xvalue).xsplit)).apply (","))))
                xformat_value.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply (((xvalue).if (((",".xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xv)))) ((xv)) ((xvalue))))) "")))
            (((unsupported)).apply (((xforms).xWidget)))
              seq
                (((unsupported)).apply)
                xtemplate_name.write "admin/widgets/related_widget_wrapper.html"
                x__init__.write
                  [xself xwidget xrel xadmin_site xcan_add_related xcan_change_related xcan_delete_related xcan_view_related]
                    memory > xmultiple
                    memory > xcascade
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xneeds_multipart_form)) (((xwidget).xneeds_multipart_form)))
                        (((unsupported)).apply (((xself).xattrs)) (((xwidget).xattrs)))
                        (((unsupported)).apply (((xself).xchoices)) (((xwidget).xchoices)))
                        (((unsupported)).apply (((xself).xwidget)) ((xwidget)))
                        (((unsupported)).apply (((xself).xrel)) ((xrel)))
                        (((unsupported)).apply ((xcan_add_related)) ("None: is there a None literal in the EO language?")).if
                          xcan_add_related.write (((unsupported)).apply (((xrel).xmodel)) (((xadmin_site).x_registry)))
                        (((unsupported)).apply (((xself).xcan_add_related)) ((xcan_add_related)))
                        xmultiple.write (((xgetattr)).apply ((xwidget)) ("allow_multiple_selected") (FALSE))
                        (((unsupported)).apply (((xself).xcan_change_related)) ((((xmultiple).not).and (xcan_change_related))))
                        xcascade.write (((unsupported)).apply ((((xgetattr)).apply ((xrel)) ("on_delete") ("None: is there a None literal in the EO language?"))) ((xCASCADE)))
                        (((unsupported)).apply (((xself).xcan_delete_related)) (((((xmultiple).not).and ((xcascade).not)).and (xcan_delete_related))))
                        (((unsupported)).apply (((xself).xcan_view_related)) ((((xmultiple).not).and (xcan_view_related))))
                        (((unsupported)).apply (((xself).xadmin_site)) ((xadmin_site)))
                x__deepcopy__.write
                  [xself xmemo]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write ((((xcopy).xcopy)).apply ((xself)))
                        (((unsupported)).apply (((xobj).xwidget)) (((((xcopy).xdeepcopy)).apply (((xself).xwidget)) ((xmemo)))))
                        (((unsupported)).apply (((xobj).xattrs)) ((((xself).xwidget).xattrs)))
                        (((unsupported)).apply ((((unsupported)).apply ((xmemo)) ((((xid)).apply ((xself)))))) ((xobj)))
                        (((unsupported)).apply ((xobj)))
                xis_hidden.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xwidget).xis_hidden)))
                xmedia.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xwidget).xmedia)))
                xget_related_url.write
                  [xself xinfo xaction]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xreverse)) (("admin:%s_%s_%s".mod ((xinfo).add (((unsupported)).apply ((xaction)))))) ((((xself).xadmin_site).xname)) ((xargs)))))
                xget_context.write
                  [xself xname xvalue xattrs]
                    memory > xurl_params
                    memory > xrel_opts
                    memory > xrelated_field_name
                    memory > xcontext
                    memory > xinfo
                    seq > @
                      seq
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                        xrel_opts.write ((((xself).xrel).xmodel).x_meta)
                        xinfo.write (((unsupported)).apply (((xrel_opts).xapp_label)) (((xrel_opts).xmodel_name)))
                        (((unsupported)).apply ((((xself).xwidget).xchoices)) (((xself).xchoices)))
                        xrelated_field_name.write ((((((xself).xrel).xget_related_field)).apply).xname)
                        xurl_params.write ((("&".xjoin)).apply ((((unsupported)).apply (("%s=%s".mod (xparam))) ((xparam)) ((((unsupported)).apply ((((unsupported)).apply ((xTO_FIELD_VAR)) ((xrelated_field_name)))) ((((unsupported)).apply ((xIS_POPUP_VAR)) (1))))))))
                        xcontext.write (((unsupported)).apply ("rendered_widget") ((((((xself).xwidget).xrender)).apply ((xname)) ((xvalue)) ((xattrs)))) ("is_hidden") (((xself).xis_hidden)) ("name") ((xname)) ("url_params") ((xurl_params)) ("model") (((xrel_opts).xverbose_name)) ("can_add_related") (((xself).xcan_add_related)) ("can_change_related") (((xself).xcan_change_related)) ("can_delete_related") (((xself).xcan_delete_related)) ("can_view_related") (((xself).xcan_view_related)))
                        ((xself).xcan_add_related).if
                          (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("add_related_url"))) (((((xself).xget_related_url)).apply ((xinfo)) ("add"))))
                        ((xself).xcan_delete_related).if
                          (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("delete_related_template_url"))) (((((xself).xget_related_url)).apply ((xinfo)) ("delete") ("__fk__"))))
                        (((xself).xcan_view_related).or ((xself).xcan_change_related)).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("view_related_url_params"))) ("{TO_FIELD_VAR}={related_field_name}"))
                            (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("change_related_template_url"))) (((((xself).xget_related_url)).apply ((xinfo)) ("change") ("__fk__"))))
                        (((unsupported)).apply ((xcontext)))
                xvalue_from_datadict.write
                  [xself xdata xfiles xname]
                    seq > @
                      (((unsupported)).apply ((((((xself).xwidget).xvalue_from_datadict)).apply ((xdata)) ((xfiles)) ((xname)))))
                xvalue_omitted_from_data.write
                  [xself xdata xfiles xname]
                    seq > @
                      (((unsupported)).apply ((((((xself).xwidget).xvalue_omitted_from_data)).apply ((xdata)) ((xfiles)) ((xname)))))
                xid_for_label.write
                  [xself xid_]
                    seq > @
                      (((unsupported)).apply ((((((xself).xwidget).xid_for_label)).apply ((xid_)))))
            (((unsupported)).apply (((xforms).xTextarea)))
              x__init__.write
                [xself xattrs]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((((unsupported)).apply ("class") ("vLargeTextField") (((xattrs).or (((unsupported)).apply))))))
            (((unsupported)).apply (((xforms).xTextInput)))
              x__init__.write
                [xself xattrs]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((((unsupported)).apply ("class") ("vTextField") (((xattrs).or (((unsupported)).apply))))))
            (((unsupported)).apply (((xforms).xEmailInput)))
              x__init__.write
                [xself xattrs]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((((unsupported)).apply ("class") ("vTextField") (((xattrs).or (((unsupported)).apply))))))
            (((unsupported)).apply (((xforms).xURLInput)))
              seq
                xtemplate_name.write "admin/widgets/url.html"
                x__init__.write
                  [xself xattrs xvalidator_class]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((((unsupported)).apply ("class") ("vURLField") (((xattrs).or (((unsupported)).apply))))))
                        (((unsupported)).apply (((xself).xvalidator)) ((((xvalidator_class)).apply)))
                xget_context.write
                  [xself xname xvalue xattrs]
                    memory > xurl_valid
                    memory > xcontext
                    seq > @
                      seq
                        (((unsupported)).apply ((xValidationError)))
                          seq
                            bogusForceDataize.write ((((xself).xvalidator)).apply (((xvalue).if (xvalue) "")))
                            xurl_valid.write TRUE
                          xurl_valid.write FALSE
                        xcontext.write ((((((xsuper)).apply).xget_context)).apply ((xname)) ((xvalue)) ((xattrs)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("current_label"))) ((((x_)).apply ("Currently:"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("change_label"))) ((((x_)).apply ("Change:"))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("href"))) (((xvalue).if (((xsmart_urlquote)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("widget"))) ("value")))) "")))
                        (((unsupported)).apply ((((unsupported)).apply ((xcontext)) ("url_valid"))) ((xurl_valid)))
                        (((unsupported)).apply ((xcontext)))
            (((unsupported)).apply (((xforms).xNumberInput)))
              seq
                xclass_name.write "vIntegerField"
                x__init__.write
                  [xself xattrs]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((((unsupported)).apply ("class") (((xself).xclass_name)) (((xattrs).or (((unsupported)).apply))))))
            (((unsupported)).apply ((xAdminIntegerFieldWidget)))
              xclass_name.write "vBigIntegerField"
            (((unsupported)).apply (((xforms).xTextInput)))
              x__init__.write
                [xself xattrs]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply (((((xsuper)).apply).x__init__)) ((((unsupported)).apply ("class") ("vUUIDField") (((xattrs).or (((unsupported)).apply))))))
            xSELECT2_TRANSLATIONS.write (((unsupported)).apply (((((xx).xlower)).apply)) ((xx)) ((xx)) ((((unsupported)).apply ("ar") ("az") ("bg") ("ca") ("cs") ("da") ("de") ("el") ("en") ("es") ("et") ("eu") ("fa") ("fi") ("fr") ("gl") ("he") ("hi") ("hr") ("hu") ("id") ("is") ("it") ("ja") ("km") ("ko") ("lt") ("lv") ("mk") ("ms") ("nb") ("nl") ("pl") ("pt-BR") ("pt") ("ro") ("ru") ("sk") ("sr-Cyrl") ("sr") ("sv") ("th") ("tr") ("uk") ("vi"))))
            bogusForceDataize.write ((((xSELECT2_TRANSLATIONS).xupdate)).apply ((((unsupported)).apply ("zh-hans") ("zh-CN") ("zh-hant") ("zh-TW"))))
            xget_select2_language.write
              []
                memory > xsupported_code
                memory > xlang_code
                memory > xi
                seq > @
                  seq
                    xlang_code.write (((xget_language)).apply)
                    xsupported_code.write ((((xSELECT2_TRANSLATIONS).xget)).apply ((xlang_code)))
                    (((unsupported)).apply ((xsupported_code)) ("None: is there a None literal in the EO language?")).if
                      seq
                        xi.write "None: is there a None literal in the EO language?"
                        while.
                          ((((unsupported)).apply (((((xlang_code).xrfind)).apply ("-") (0) ((xi))))).greater (1.neg))
                          [unused]
                            seq > @
                              (((unsupported)).apply (((((xSELECT2_TRANSLATIONS).xget)).apply ((((unsupported)).apply ((xlang_code)) ((((unsupported)).apply ((xi))))))))).if
                                (((unsupported)).apply ((xsupported_code)))
                    (((unsupported)).apply ((xsupported_code)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xurl_name.write "%s:autocomplete"
                x__init__.write
                  [xself xfield xadmin_site xattrs xchoices xusing]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfield)) ((xfield)))
                        (((unsupported)).apply (((xself).xadmin_site)) ((xadmin_site)))
                        (((unsupported)).apply (((xself).xdb)) ((xusing)))
                        (((unsupported)).apply (((xself).xchoices)) ((xchoices)))
                        (((unsupported)).apply (((xself).xattrs)) (((((unsupported)).apply ((xattrs)) ("None: is there a None literal in the EO language?")).if (((unsupported)).apply) ((((xattrs).xcopy)).apply))))
                        (((unsupported)).apply (((xself).xi18n_name)) ((((xget_select2_language)).apply)))
                xget_url.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xreverse)).apply ((((xself).xurl_name).mod (((xself).xadmin_site).xname))))))
                xbuild_attrs.write
                  [xself xbase_attrs xextra_attrs]
                    memory > xattrs
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xattrs.write (((unsupported)).apply (((((xsuper)).apply).xbuild_attrs)) ((xbase_attrs)) ((xextra_attrs)))
                        bogusForceDataize.write ((((xattrs).xsetdefault)).apply ("class") (""))
                        bogusForceDataize.write ((((xattrs).xupdate)).apply ((((unsupported)).apply ("data-ajax--cache") ("false") ("data-ajax--delay") (250) ("data-ajax--type") ("GET") ("data-ajax--url") (((((xself).xget_url)).apply)) ("data-app-label") ((((((xself).xfield).xmodel).x_meta).xapp_label)) ("data-model-name") ((((((xself).xfield).xmodel).x_meta).xmodel_name)) ("data-field-name") ((((xself).xfield).xname)) ("data-theme") ("admin-autocomplete") ("data-allow-clear") (((((xjson).xdumps)).apply ((((xself).xis_required).not)))) ("data-placeholder") ("") ("lang") (((xself).xi18n_name)) ("class") ((((((unsupported)).apply ((xattrs)) ("class")).add ((((unsupported)).apply ((xattrs)) ("class")).if " " "")).add "admin-autocomplete")))))
                        (((unsupported)).apply ((xattrs)))
                xoptgroups.write
                  [xself xname xvalue xattr]
                    memory > xindex
                    memory > xto_field_name
                    memory > xremote_model_opts
                    memory > xselected
                    memory > xsubgroup
                    memory > xchoices
                    memory > xhas_selected
                    memory > xgroups
                    memory > xselected_choices
                    memory > xdefault
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xdefault.write (((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) (0))
                        xgroups.write (((unsupported)).apply ((xdefault)))
                        xhas_selected.write FALSE
                        xselected_choices.write (((unsupported)).apply ((((xstr)).apply ((xv)))) ((xv)) ((xvalue)) ((((unsupported)).apply ((((xstr)).apply ((xv)))) (((((xself).xchoices).xfield).xempty_values)))))
                        ((((xself).xis_required).not).and (((xself).xallow_multiple_selected).not)).if
                          bogusForceDataize.write ((((((unsupported)).apply ((xdefault)) (1)).xappend)).apply (((((xself).xcreate_option)).apply ((xname)) ("") ("") (FALSE) (0))))
                        xremote_model_opts.write (((((xself).xfield).xremote_field).xmodel).x_meta)
                        xto_field_name.write (((xgetattr)).apply ((((xself).xfield).xremote_field)) ("field_name") ((((xremote_model_opts).xpk).xattname)))
                        xto_field_name.write (((((xremote_model_opts).xget_field)).apply ((xto_field_name))).xattname)
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply ((((xgetattr)).apply ((xobj)) ((xto_field_name)))) (((((((xself).xchoices).xfield).xlabel_from_instance)).apply ((xobj)))))) ((xobj)) ((((((((((xself).xchoices).xqueryset).xusing)).apply (((xself).xdb))).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("%s__in".mod (xto_field_name))) ((xselected_choices)))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xoption_value)) ((xoption_label)))) ((xchoices)))
                          seq
                            xselected.write ((((unsupported)).apply ((((xstr)).apply ((xoption_value)))) ((xvalue))).and ((((unsupported)).apply ((xhas_selected)) (FALSE)).or ((xself).xallow_multiple_selected)))
                            (((unsupported)).apply ((xhas_selected)) ((xselected)))
                            xindex.write (((xlen)).apply ((((unsupported)).apply ((xdefault)) (1))))
                            xsubgroup.write (((unsupported)).apply ((xdefault)) (1))
                            bogusForceDataize.write ((((xsubgroup).xappend)).apply (((((xself).xcreate_option)).apply ((xname)) ((xoption_value)) ((xoption_label)) ((xselected_choices)) ((xindex)))))
                        (((unsupported)).apply ((xgroups)))
                xmedia.write
                  [xself]
                    memory > xi18n_file
                    memory > xextra
                    seq > @
                      (((unsupported)).apply)
                        xextra.write (((xsettings).xDEBUG).if "" ".min")
                        xi18n_file.write (((xself).xi18n_name).if (((unsupported)).apply (("admin/js/vendor/select2/i18n/%s.js".mod ((xself).xi18n_name)))) (((unsupported)).apply))
                        (((unsupported)).apply ((((unsupported)).apply (((xforms).xMedia)) ((((((unsupported)).apply (("admin/js/vendor/jquery/jquery%s.js".mod (xextra))) (("admin/js/vendor/select2/select2.full%s.js".mod (xextra)))).add (xi18n_file)).add (((unsupported)).apply ("admin/js/jquery.init.js") ("admin/js/autocomplete.js")))) ((((unsupported)).apply ("screen") ((((unsupported)).apply (("admin/css/vendor/select2/select2%s.css".mod (xextra))) ("admin/css/autocomplete.css"))))))))
            (((unsupported)).apply ((xAutocompleteMixin)) (((xforms).xSelect)))
            (((unsupported)).apply ((xAutocompleteMixin)) (((xforms).xSelectMultiple)))