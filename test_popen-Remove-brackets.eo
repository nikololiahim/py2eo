memory > xlist
memory > xeval
memory > xp
memory > xf
memory > xos
memory > xunittest
memory > xsupport
memory > xsys
memory > xTypeError
memory > x__name__
[] > test_popen
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_do_test_commandline
        memory > xtest_keywords
        memory > xtest_popen
        memory > xpython
        memory > xtest_iterating
        memory > xtest_return_code
        memory > xtest_contextmanager
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            xpython.write ((xsys).xexecutable)
            (((unsupported)).apply (" ") ((xpython))).if
              xpython.write (("\"".add (xpython)).add "\"")
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                x_do_test_commandline.write
                  [xself xcmdline xexpected]
                    memory > xdata
                    memory > xgot
                    memory > xcmd
                    seq > @
                      seq
                        xcmd.write "%s -c \"import sys; print(sys.argv)\" %s"
                        xcmd.write ((xcmd).mod (((unsupported)).apply ((xpython)) ((xcmdline))))
                        (((unsupported)).apply (((((xos).xpopen)).apply ((xcmd)))) ((xp)))
                          xdata.write ((xp).xread)
                        xgot.write (((unsupported)).apply ((((xeval)).apply ((xdata)))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xgot)) ((xexpected)))
                xtest_popen.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xos).xpopen)))
                        bogusForceDataize.write ((((xself).x_do_test_commandline)).apply ("foo bar") ((((unsupported)).apply ("foo") ("bar"))))
                        bogusForceDataize.write ((((xself).x_do_test_commandline)).apply ("foo \"spam and eggs\" \"silly walk\"") ((((unsupported)).apply ("foo") ("spam and eggs") ("silly walk"))))
                        bogusForceDataize.write ((((xself).x_do_test_commandline)).apply ("foo \"a \\\"quoted\\\" arg\" bar") ((((unsupported)).apply ("foo") ("a \"quoted\" arg") ("bar"))))
                        unsupported
                xtest_return_code.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpopen)).apply ("exit 0")).xclose)) ("None: is there a None literal in the EO language?"))
                        (((xos).xname).eq "nt").if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpopen)).apply ("exit 42")).xclose)) (42))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpopen)).apply ("exit 42")).xclose)) ((((unsupported)).apply (42) (8))))
                xtest_contextmanager.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xos).xpopen)).apply ("echo hello"))) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xread)) ("hellon"))
                xtest_iterating.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xos).xpopen)).apply ("echo hello"))) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xf)))) ((((unsupported)).apply ("hellon"))))
                xtest_keywords.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xos).xpopen)) ("exit 0") ("w") ((1.neg)))))
            ((x__name__).eq "__main__").if
              unsupported