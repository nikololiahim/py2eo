memory > xcopy
memory > xdelattr
memory > xValueError
memory > xstr
memory > xwarnings
memory > xtotal_ordering
memory > xNotImplementedError
memory > xmethod_name
memory > xtype_
memory > xrepr
memory > xoperator
memory > xiter
memory > xhash
memory > xobject
memory > xkwargs
memory > xTypeError
memory > xLazyObject
memory > xAttributeError
memory > xresultclass
memory > xkw
memory > xany
memory > xtype
memory > xhasattr
memory > xresultclasses
memory > xproperty
memory > xarg
memory > xsuper
memory > xRemovedInDjango50Warning
memory > xbool
memory > xbytes
memory > xargs
memory > xitertools
memory > xdir
memory > x__proxy__
memory > xitem
memory > xgetattr
memory > xid
memory > xSimpleLazyObject
memory > xsetattr
memory > xisinstance
memory > xPromise
memory > xlen
[] > functional
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_setup
        memory > xfunc
        memory > x__delitem__
        memory > xunpickle_lazyobject
        memory > x__lt__
        memory > x__ne__
        memory > x__gt__
        memory > x__get__
        memory > x__setattr__
        memory > x__set_name__
        memory > x__copy__
        memory > x__str__
        memory > x__deepcopy__
        memory > x__radd__
        memory > x__eq__
        memory > x__repr__
        memory > x__getattribute__
        memory > xempty
        memory > xpartition
        memory > x__getattr__
        memory > x__reduce__
        memory > x__class__
        memory > x__iter__
        memory > x__contains__
        memory > x_wrapped
        memory > xgetter
        memory > x__getitem__
        memory > x__delattr__
        memory > xnew_method_proxy
        memory > xkeep_lazy_text
        memory > x__setitem__
        memory > xkeep_lazy
        memory > x__add__
        memory > x__dir__
        memory > x_lazy_proxy_unpickle
        memory > x__init__
        memory > xlazy
        memory > x__hash__
        memory > x__bytes__
        memory > xname
        memory > x__len__
        memory > xlazystr
        memory > x__bool__
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xname.write "None: is there a None literal in the EO language?"
                xfunc.write
                  [xinstance]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xTypeError)).apply ("Cannot use cached_property instance without calling __set_name__() on it."))))
                x__init__.write
                  [xself xfunc xname]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xname)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xwarnings).xwarn)) ("The name argument is deprecated as it's unnecessary as of Python 3.6.") ((xRemovedInDjango50Warning)) (2))
                        (((unsupported)).apply (((xself).xreal_func)) ((xfunc)))
                        (((unsupported)).apply (((xself).x__doc__)) ((((xgetattr)).apply ((xfunc)) ("__doc__"))))
                x__set_name__.write
                  [xself xowner xname]
                    seq > @
                      (((unsupported)).apply (((xself).xname)) ("None: is there a None literal in the EO language?")).if
                        seq
                          (((unsupported)).apply (((xself).xname)) ((xname)))
                          (((unsupported)).apply (((xself).xfunc)) (((xself).xreal_func)))
                        ((xname).neq ((xself).xname)).if
                          (((unsupported)).apply ((((xTypeError)).apply (("Cannot assign the same cached_property to two different names (%r and %r).".mod (((unsupported)).apply (((xself).xname)) ((xname))))))))
                x__get__.write
                  [xself xinstance xcls]
                    memory > xres
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xinstance)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xself)))
                        (((unsupported)).apply ((xres)) ((((unsupported)).apply (((xinstance).x__dict__)) (((xself).xname)))) (((((xself).xfunc)).apply ((xinstance)))))
                        (((unsupported)).apply ((xres)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xmethod]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfget)) ((xmethod)))
                x__get__.write
                  [xself xinstance xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xfget)).apply ((xcls)))))
                xgetter.write
                  [xself xmethod]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfget)) ((xmethod)))
                        (((unsupported)).apply ((xself)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
            xlazy.write
              [xfunc]
                memory > x__reduce__
                memory > x__bytes_cast_encoded
                memory > x__wrapper__
                memory > x__promise__
                memory > x__lt__
                memory > x__prepared
                memory > x__bytes_cast
                memory > x__cast
                memory > x__add__
                memory > x__hash__
                memory > x__str__
                memory > x__deepcopy__
                memory > x__radd__
                memory > x__eq__
                memory > x__repr__
                memory > x__text_cast
                memory > x__prepare_class__
                memory > x__init__
                memory > x__mod__
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xPromise)) ((xtotal_ordering)))
                      seq
                        (((unsupported)).apply)
                        x__prepared.write FALSE
                        x__init__.write
                          [xself xargs xkw]
                            seq > @
                              seq
                                (((unsupported)).apply (((xself).x__args)) ((xargs)))
                                (((unsupported)).apply (((xself).x__kw)) ((xkw)))
                                (((xself).x__prepared).not).if
                                  bogusForceDataize.write ((((xself).x__prepare_class__)).apply)
                                (((unsupported)).apply ((((xself).x__class__).x__prepared)) (TRUE))
                        x__reduce__.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((x_lazy_proxy_unpickle)) (((((unsupported)).apply ((xfunc)) (((xself).x__args)) (((xself).x__kw))).sub (xresultclasses))))))
                        x__repr__.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((xrepr)).apply (((((xself).x__cast)).apply)))))
                        x__prepare_class__.write
                          [xcls]
                            memory > xmeth
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xresultclass)) ((xresultclasses)))
                                  (((unsupported)).apply ((xtype_)) (((((xresultclass).xmro)).apply)))
                                    (((unsupported)).apply ((xmethod_name)) (((xtype_).x__dict__)))
                                      seq
                                        (((xhasattr)).apply ((xcls)) ((xmethod_name))).if
                                          (((unsupported)).apply)
                                        xmeth.write ((((xcls).x__promise__)).apply ((xmethod_name)))
                                        bogusForceDataize.write (((xsetattr)).apply ((xcls)) ((xmethod_name)) ((xmeth)))
                                (((unsupported)).apply (((xcls).x_delegate_bytes)) ((((unsupported)).apply ((xbytes)) ((xresultclasses)))))
                                (((unsupported)).apply (((xcls).x_delegate_text)) ((((unsupported)).apply ((xstr)) ((xresultclasses)))))
                                (((xcls).x_delegate_bytes).and ((xcls).x_delegate_text)).if
                                  (((unsupported)).apply ((((xValueError)).apply ("Cannot call lazy() with both bytes and text return types."))))
                                ((xcls).x_delegate_text).if
                                  (((unsupported)).apply (((xcls).x__str__)) (((xcls).x__text_cast)))
                                  ((xcls).x_delegate_bytes).if
                                    (((unsupported)).apply (((xcls).x__bytes__)) (((xcls).x__bytes_cast)))
                        x__promise__.write
                          [xcls xmethod_name]
                            memory > x__wrapper__
                            seq > @
                              (((unsupported)).apply)
                                x__wrapper__.write
                                  [xself]
                                    memory > xres
                                    seq > @
                                      (((unsupported)).apply)
                                        xres.write (((xfunc)).apply ((((unsupported)).apply (((xself).x__args)))) ((((unsupported)).apply (((xself).x__kw)))))
                                        (((unsupported)).apply ((((((xgetattr)).apply ((xres)) ((xmethod_name)))).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkw)))))))
                                (((unsupported)).apply ((x__wrapper__)))
                        x__text_cast.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((xfunc)).apply ((((unsupported)).apply (((xself).x__args)))) ((((unsupported)).apply (((xself).x__kw)))))))
                        x__bytes_cast.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((xbytes)).apply ((((xfunc)).apply ((((unsupported)).apply (((xself).x__args)))) ((((unsupported)).apply (((xself).x__kw)))))))))
                        x__bytes_cast_encoded.write
                          [xself]
                            seq > @
                              (((unsupported)).apply (((((((xfunc)).apply ((((unsupported)).apply (((xself).x__args)))) ((((unsupported)).apply (((xself).x__kw))))).xencode)).apply)))
                        x__cast.write
                          [xself]
                            seq > @
                              ((xself).x_delegate_bytes).if
                                (((unsupported)).apply (((((xself).x__bytes_cast)).apply)))
                                ((xself).x_delegate_text).if
                                  (((unsupported)).apply (((((xself).x__text_cast)).apply)))
                                  (((unsupported)).apply ((((xfunc)).apply ((((unsupported)).apply (((xself).x__args)))) ((((unsupported)).apply (((xself).x__kw)))))))
                        x__str__.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((xstr)).apply (((((xself).x__cast)).apply)))))
                        x__eq__.write
                          [xself xother]
                            seq > @
                              seq
                                (((xisinstance)).apply ((xother)) ((xPromise))).if
                                  xother.write ((((xother).x__cast)).apply)
                                (((unsupported)).apply ((((((xself).x__cast)).apply).eq (xother))))
                        x__lt__.write
                          [xself xother]
                            seq > @
                              seq
                                (((xisinstance)).apply ((xother)) ((xPromise))).if
                                  xother.write ((((xother).x__cast)).apply)
                                (((unsupported)).apply ((((((xself).x__cast)).apply).less (xother))))
                        x__hash__.write
                          [xself]
                            seq > @
                              (((unsupported)).apply ((((xhash)).apply (((((xself).x__cast)).apply)))))
                        x__mod__.write
                          [xself xrhs]
                            seq > @
                              seq
                                ((xself).x_delegate_text).if
                                  (((unsupported)).apply (((((xstr)).apply ((xself))).mod (xrhs))))
                                (((unsupported)).apply ((((((xself).x__cast)).apply).mod (xrhs))))
                        x__add__.write
                          [xself xother]
                            seq > @
                              (((unsupported)).apply ((((((xself).x__cast)).apply).sub (xother))))
                        x__radd__.write
                          [xself xother]
                            seq > @
                              (((unsupported)).apply (((xother).sub ((((xself).x__cast)).apply))))
                        x__deepcopy__.write
                          [xself xmemo]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xmemo)) ((((xid)).apply ((xself)))))) ((xself)))
                                (((unsupported)).apply ((xself)))
                    x__wrapper__.write
                      []
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((x__proxy__)).apply ((xargs)) ((xkw)))))
                    (((unsupported)).apply ((x__wrapper__)))
            x_lazy_proxy_unpickle.write
              [xfunc xargs xkwargs]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((((xlazy)).apply ((xfunc)) ((((unsupported)).apply ((xresultclasses)))))).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
            xlazystr.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((((xlazy)).apply ((xstr)) ((xstr)))).apply ((xtext)))))
            xkeep_lazy.write
              []
                memory > xdecorator
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((xresultclasses).not).if
                      (((unsupported)).apply ((((xTypeError)).apply ("You must pass at least one argument to keep_lazy()."))))
                    xdecorator.write
                      [xfunc]
                        memory > xwrapper
                        memory > xlazy_func
                        seq > @
                          seq
                            xlazy_func.write (((xlazy)).apply ((xfunc)) ((((unsupported)).apply ((xresultclasses)))))
                            xwrapper.write
                              []
                                seq > @
                                  (((unsupported)).apply)
                                    (((xany)).apply ((((unsupported)).apply ((((xisinstance)).apply ((xarg)) ((xPromise)))) ((xarg)) (((((xitertools).xchain)).apply ((xargs)) (((((xkwargs).xvalues)).apply))))))).if
                                      (((unsupported)).apply ((((xlazy_func)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                                    (((unsupported)).apply ((((xfunc)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                            (((unsupported)).apply ((xwrapper)))
                    (((unsupported)).apply ((xdecorator)))
            xkeep_lazy_text.write
              [xfunc]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((((xkeep_lazy)).apply ((xstr)))).apply ((xfunc)))))
            xempty.write (((xobject)).apply)
            xnew_method_proxy.write
              [xfunc]
                memory > xinner
                seq > @
                  seq
                    xinner.write
                      [xself]
                        memory > x_wrapped
                        seq > @
                          (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply (((xself).x_wrapped)))) ((xempty))).if
                              seq
                                bogusForceDataize.write ((((xself).x_setup)).apply)
                                x_wrapped.write ((xself).x_wrapped)
                            (((unsupported)).apply ((((xfunc)).apply ((x_wrapped)) ((((unsupported)).apply ((xargs)))))))
                    (((unsupported)).apply (((xinner).x_mask_wrapped)) (FALSE))
                    (((unsupported)).apply ((xinner)))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x_wrapped.write "None: is there a None literal in the EO language?"
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_wrapped)) ((xempty)))
                x__getattribute__.write
                  [xself xname]
                    memory > xvalue
                    seq > @
                      seq
                        ((xname).eq "_wrapped").if
                          (((unsupported)).apply (((((((xsuper)).apply).x__getattribute__)).apply ((xname)))))
                        xvalue.write ((((((xsuper)).apply).x__getattribute__)).apply ((xname)))
                        ((((xgetattr)).apply ((xvalue)) ("_mask_wrapped") (TRUE)).not).if
                          (((unsupported)).apply ((xAttributeError)))
                        (((unsupported)).apply ((xvalue)))
                x__getattr__.write (((xnew_method_proxy)).apply ((xgetattr)))
                x__setattr__.write
                  [xself xname xvalue]
                    seq > @
                      ((xname).eq "_wrapped").if
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("_wrapped"))) ((xvalue)))
                        seq
                          (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                            bogusForceDataize.write ((((xself).x_setup)).apply)
                          bogusForceDataize.write (((xsetattr)).apply (((xself).x_wrapped)) ((xname)) ((xvalue)))
                x__delattr__.write
                  [xself xname]
                    seq > @
                      seq
                        ((xname).eq "_wrapped").if
                          (((unsupported)).apply ((((xTypeError)).apply ("can't delete _wrapped."))))
                        (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                          bogusForceDataize.write ((((xself).x_setup)).apply)
                        bogusForceDataize.write (((xdelattr)).apply (((xself).x_wrapped)) ((xname)))
                x_setup.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of LazyObject must provide a _setup() method"))))
                x__reduce__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                          bogusForceDataize.write ((((xself).x_setup)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xunpickle_lazyobject)) ((((unsupported)).apply (((xself).x_wrapped)))))))
                x__copy__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                        (((unsupported)).apply ((((((xtype)).apply ((xself)))).apply)))
                        (((unsupported)).apply (((((xcopy).xcopy)).apply (((xself).x_wrapped)))))
                x__deepcopy__.write
                  [xself xmemo]
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                          seq
                            xresult.write (((((xtype)).apply ((xself)))).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xmemo)) ((((xid)).apply ((xself)))))) ((xresult)))
                            (((unsupported)).apply ((xresult)))
                        (((unsupported)).apply (((((xcopy).xdeepcopy)).apply (((xself).x_wrapped)) ((xmemo)))))
                x__bytes__.write (((xnew_method_proxy)).apply ((xbytes)))
                x__str__.write (((xnew_method_proxy)).apply ((xstr)))
                x__bool__.write (((xnew_method_proxy)).apply ((xbool)))
                x__dir__.write (((xnew_method_proxy)).apply ((xdir)))
                x__class__.write (((xproperty)).apply ((((xnew_method_proxy)).apply (((((xoperator).xattrgetter)).apply ("__class__"))))))
                x__eq__.write (((xnew_method_proxy)).apply (((xoperator).xeq)))
                x__lt__.write (((xnew_method_proxy)).apply (((xoperator).xlt)))
                x__gt__.write (((xnew_method_proxy)).apply (((xoperator).xgt)))
                x__ne__.write (((xnew_method_proxy)).apply (((xoperator).xne)))
                x__hash__.write (((xnew_method_proxy)).apply ((xhash)))
                x__getitem__.write (((xnew_method_proxy)).apply (((xoperator).xgetitem)))
                x__setitem__.write (((xnew_method_proxy)).apply (((xoperator).xsetitem)))
                x__delitem__.write (((xnew_method_proxy)).apply (((xoperator).xdelitem)))
                x__iter__.write (((xnew_method_proxy)).apply ((xiter)))
                x__len__.write (((xnew_method_proxy)).apply ((xlen)))
                x__contains__.write (((xnew_method_proxy)).apply (((xoperator).xcontains)))
            xunpickle_lazyobject.write
              [xwrapped]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xwrapped)))
            (((unsupported)).apply ((xLazyObject)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xfunc]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("_setupfunc"))) ((xfunc)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply)
                x_setup.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_wrapped)) (((((xself).x_setupfunc)).apply)))
                x__repr__.write
                  [xself]
                    memory > xrepr_attr
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                          xrepr_attr.write ((xself).x_setupfunc)
                          xrepr_attr.write ((xself).x_wrapped)
                        (((unsupported)).apply (("<%s: %r>".mod (((unsupported)).apply (((((xtype)).apply ((xself))).x__name__)) ((xrepr_attr))))))
                x__copy__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                        (((unsupported)).apply ((((xSimpleLazyObject)).apply (((xself).x_setupfunc)))))
                        (((unsupported)).apply (((((xcopy).xcopy)).apply (((xself).x_wrapped)))))
                x__deepcopy__.write
                  [xself xmemo]
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_wrapped)) ((xempty))).if
                          seq
                            xresult.write (((xSimpleLazyObject)).apply (((xself).x_setupfunc)))
                            (((unsupported)).apply ((((unsupported)).apply ((xmemo)) ((((xid)).apply ((xself)))))) ((xresult)))
                            (((unsupported)).apply ((xresult)))
                        (((unsupported)).apply (((((xcopy).xdeepcopy)).apply (((xself).x_wrapped)) ((xmemo)))))
                x__add__.write (((xnew_method_proxy)).apply (((xoperator).xadd)))
                x__radd__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xother).sub (xself))))
            xpartition.write
              [xpredicate xvalues]
                memory > xresults
                seq > @
                  seq
                    (((unsupported)).apply)
                    xresults.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                    (((unsupported)).apply ((xitem)) ((xvalues)))
                      bogusForceDataize.write ((((((unsupported)).apply ((xresults)) ((((xpredicate)).apply ((xitem))))).xappend)).apply ((xitem)))
                    (((unsupported)).apply ((xresults)))