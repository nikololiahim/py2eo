memory > xcopy
memory > xTestForm
memory > xmark_safe
memory > xForm
memory > xWidgetTest
memory > xlen
memory > xdatetime
memory > xlist
memory > xindex
memory > xSelect
memory > xunknown
memory > xlabel
memory > xChoiceField
memory > xrange
memory > xvideo
memory > xi
memory > xaudio
memory > xoptions
[] > test_select
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_renders_required_when_possible_to_select_empty_field_none
        memory > xtest_doesnt_render_required_when_impossible_to_select_empty_field
        memory > xtest_choices_constructor
        memory > xtest_doesnt_render_required_when_no_choices_are_available
        memory > xtest_optgroups
        memory > xtest_compare_to_str
        memory > xtest_deepcopy
        memory > xtest_optgroups_integer_choices
        memory > xtest_choices_optgroup
        memory > xtest_render
        memory > xtest_render_label_value
        memory > xtest_choices_select_outer
        memory > xtest_choices_unicode
        memory > xtest_fieldset
        memory > xwidget
        memory > xtest_constructor_attrs
        memory > xtest_choices_escaping
        memory > xtest_options
        memory > xtest_renders_required_when_possible_to_select_empty_field_str
        memory > xtest_doesnt_localize_option_value
        memory > xtest_render_none
        memory > xtest_renders_required_when_possible_to_select_empty_field_list
        memory > xtest_choices_select_inner
        memory > xtest_render_selected
        memory > xnested_widget
        memory > xtest_choices_constructor_generator
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xWidgetTest)))
              seq
                xwidget.write (xSelect)
                xnested_widget.write (((unsupported)).apply ((xSelect)) ((((unsupported)).apply ((((unsupported)).apply ("outer1") ("Outer 1"))) ((((unsupported)).apply ("Group \"1\"") ((((unsupported)).apply ((((unsupported)).apply ("inner1") ("Inner 1"))) ((((unsupported)).apply ("inner2") ("Inner 2"))))))))))
                xtest_render.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) (((xself).xbeatles)))) ("beatle") ("J") ((((unsupported)).apply)))
                xtest_render_none.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) (((xself).xbeatles)))) ("beatle") ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                xtest_render_label_value.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) (((xself).xbeatles)))) ("beatle") ("John") ((((unsupported)).apply)))
                xtest_render_selected.write
                  [xself]
                    memory > xchoices
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply ("0") ("0"))) ((((unsupported)).apply ("1") ("1"))) ((((unsupported)).apply ("2") ("2"))) ((((unsupported)).apply ("3") ("3"))) ((((unsupported)).apply ("0") ("extra"))))
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((xchoices)))) ("choices") ("0") ((((unsupported)).apply)))
                xtest_constructor_attrs.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xwidget.write (((unsupported)).apply ((xSelect)) ((((unsupported)).apply ("class") ("super") ("id") ("super"))) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))) ((((unsupported)).apply (3) (3))))))
                        (((unsupported)).apply (((xself).xcheck_html)) ((xwidget)) ("num") (2) ((((unsupported)).apply)))
                xtest_compare_to_str.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply ((((unsupported)).apply ("1") ("1"))) ((((unsupported)).apply ("2") ("2"))) ((((unsupported)).apply ("3") ("3"))))))) ("num") (2) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))) ((((unsupported)).apply (3) (3))))))) ("num") ("2") ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))) ((((unsupported)).apply (3) (3))))))) ("num") (2) ((((unsupported)).apply)))
                xtest_choices_constructor.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply ((xSelect)) ((((unsupported)).apply ((((unsupported)).apply (1) (1))) ((((unsupported)).apply (2) (2))) ((((unsupported)).apply (3) (3))))))
                        (((unsupported)).apply (((xself).xcheck_html)) ((xwidget)) ("num") (2) ((((unsupported)).apply)))
                xtest_choices_constructor_generator.write
                  [xself]
                    memory > xget_choices
                    memory > xwidget
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xget_choices.write
                          []
                            seq > @
                              (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xi)))))
                        xwidget.write (((unsupported)).apply ((xSelect)) ((((xget_choices)).apply)))
                        (((unsupported)).apply (((xself).xcheck_html)) ((xwidget)) ("num") (2) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xcheck_html)) ((xwidget)) ("num") (3) ((((unsupported)).apply)))
                xtest_choices_escaping.write
                  [xself]
                    memory > xchoices
                    seq > @
                      seq
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply ("bad") ("you & me"))) ((((unsupported)).apply ("good") ((((xmark_safe)).apply ("you &gt; me"))))))
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((xchoices)))) ("escape") ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                xtest_choices_unicode.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply ((((unsupported)).apply ("ŠĐĆŽćžšđ") ("ŠĐabcĆŽćžšđ"))) ((((unsupported)).apply ("ćžšđ") ("abcćžšđ"))))))) ("email") ("ŠĐĆŽćžšđ") ((((unsupported)).apply)))
                xtest_choices_optgroup.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) (((xself).xnested_widget)) ("nestchoice") ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))
                xtest_choices_select_outer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_html)) (((xself).xnested_widget)) ("nestchoice") ("outer1") ((((unsupported)).apply)))
                xtest_choices_select_inner.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xcheck_html)) (((xself).xnested_widget)) ("nestchoice") ("inner1") ((((unsupported)).apply)))
                xtest_doesnt_localize_option_value.write
                  [xself]
                    memory > xhtml
                    memory > xchoices
                    seq > @
                      (((unsupported)).apply)
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply (1) ("One"))) ((((unsupported)).apply (1000) ("One thousand"))) ((((unsupported)).apply (1000000) ("One million"))))
                        xhtml.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((xchoices)))) ("number") ("None: is there a None literal in the EO language?") ((xhtml)))
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply (((((xdatetime).xtime)).apply (0) (0))) ("midnight"))) ((((unsupported)).apply (((((xdatetime).xtime)).apply (12) (0))) ("noon"))))
                        xhtml.write (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcheck_html)) ((((unsupported)).apply (((xself).xwidget)) ((xchoices)))) ("time") ("None: is there a None literal in the EO language?") ((xhtml)))
                xtest_options.write
                  [xself]
                    memory > xoptions
                    seq > @
                      seq
                        xoptions.write (((xlist)).apply ((((unsupported)).apply (((((unsupported)).apply (((xself).xwidget)) (((xself).xbeatles))).xoptions)) ("name") ((((unsupported)).apply ("J"))) ((((unsupported)).apply ("class") ("super"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xoptions)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (0))) ("name"))) ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (0))) ("value"))) ("J"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (0))) ("label"))) ("John"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (0))) ("index"))) ("0"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (0))) ("selected"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (1))) ("name"))) ("name"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (1))) ("value"))) ("P"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (1))) ("label"))) ("Paul"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (1))) ("index"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (1))) ("selected"))) (FALSE))
                xtest_optgroups.write
                  [xself]
                    memory > xgroups
                    memory > xchoices
                    seq > @
                      seq
                        xchoices.write (((unsupported)).apply ((((unsupported)).apply ("Audio") ((((unsupported)).apply ((((unsupported)).apply ("vinyl") ("Vinyl"))) ((((unsupported)).apply ("cd") ("CD"))))))) ((((unsupported)).apply ("Video") ((((unsupported)).apply ((((unsupported)).apply ("vhs") ("VHS Tape"))) ((((unsupported)).apply ("dvd") ("DVD"))))))) ((((unsupported)).apply ("unknown") ("Unknown"))))
                        xgroups.write (((xlist)).apply ((((unsupported)).apply (((((unsupported)).apply (((xself).xwidget)) ((xchoices))).xoptgroups)) ("name") ((((unsupported)).apply ("vhs"))) ((((unsupported)).apply ("class") ("super"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xaudio)) ((xvideo)) ((xunknown)))) ((xgroups)))
                        (((unsupported)).apply ((((unsupported)).apply ((xlabel)) ((xoptions)) ((xindex)))) ((xaudio)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlabel)) ("Audio"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoptions)) ((((unsupported)).apply ((((unsupported)).apply ("value") ("vinyl") ("type") ("select") ("attrs") ((((unsupported)).apply)) ("index") ("0_0") ("label") ("Vinyl") ("template_name") ("django/forms/widgets/select_option.html") ("name") ("name") ("selected") (FALSE) ("wrap_label") (TRUE))) ((((unsupported)).apply ("value") ("cd") ("type") ("select") ("attrs") ((((unsupported)).apply)) ("index") ("0_1") ("label") ("CD") ("template_name") ("django/forms/widgets/select_option.html") ("name") ("name") ("selected") (FALSE) ("wrap_label") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xindex)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xlabel)) ((xoptions)) ((xindex)))) ((xvideo)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlabel)) ("Video"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoptions)) ((((unsupported)).apply ((((unsupported)).apply ("value") ("vhs") ("template_name") ("django/forms/widgets/select_option.html") ("label") ("VHS Tape") ("attrs") ((((unsupported)).apply ("selected") (TRUE))) ("index") ("1_0") ("name") ("name") ("selected") (TRUE) ("type") ("select") ("wrap_label") (TRUE))) ((((unsupported)).apply ("value") ("dvd") ("template_name") ("django/forms/widgets/select_option.html") ("label") ("DVD") ("attrs") ((((unsupported)).apply)) ("index") ("1_1") ("name") ("name") ("selected") (FALSE) ("type") ("select") ("wrap_label") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xindex)) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xlabel)) ((xoptions)) ((xindex)))) ((xunknown)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((xlabel)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoptions)) ((((unsupported)).apply ((((unsupported)).apply ("value") ("unknown") ("selected") (FALSE) ("template_name") ("django/forms/widgets/select_option.html") ("label") ("Unknown") ("attrs") ((((unsupported)).apply)) ("index") ("2") ("name") ("name") ("type") ("select") ("wrap_label") (TRUE))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xindex)) (2))
                xtest_optgroups_integer_choices.write
                  [xself]
                    memory > xgroups
                    seq > @
                      seq
                        unsupported
                        xgroups.write (((xlist)).apply (((((((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply ((((unsupported)).apply (0) ("choice text")))))).xoptgroups)).apply ("name") ((((unsupported)).apply ("vhs"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlabel)) ((xoptions)) ((xindex)))) ((((unsupported)).apply ((xgroups)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) (0))) ("value"))) (0))
                xtest_deepcopy.write
                  [xself]
                    memory > xwidget
                    memory > xobj
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xwidget.write (((xSelect)).apply)
                        xobj.write ((((xcopy).xdeepcopy)).apply ((xwidget)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xwidget)) ((xobj)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwidget).xchoices)) (((xobj).xchoices)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xwidget).xchoices)) (((xobj).xchoices)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwidget).xattrs)) (((xobj).xattrs)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xwidget).xattrs)) (((xobj).xattrs)))
                xtest_doesnt_render_required_when_impossible_to_select_empty_field.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply ((((unsupported)).apply ("J") ("John"))) ((((unsupported)).apply ("P") ("Paul"))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xwidget).xuse_required_attribute)) ("None: is there a None literal in the EO language?"))) (FALSE))
                xtest_renders_required_when_possible_to_select_empty_field_str.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply ((((unsupported)).apply ("") ("select please"))) ((((unsupported)).apply ("P") ("Paul"))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xwidget).xuse_required_attribute)) ("None: is there a None literal in the EO language?"))) (TRUE))
                xtest_renders_required_when_possible_to_select_empty_field_list.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply ((((unsupported)).apply ("") ("select please"))) ((((unsupported)).apply ("P") ("Paul"))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xwidget).xuse_required_attribute)) ("None: is there a None literal in the EO language?"))) (TRUE))
                xtest_renders_required_when_possible_to_select_empty_field_none.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("select please"))) ((((unsupported)).apply ("P") ("Paul"))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xwidget).xuse_required_attribute)) ("None: is there a None literal in the EO language?"))) (TRUE))
                xtest_doesnt_render_required_when_no_choices_are_available.write
                  [xself]
                    memory > xwidget
                    seq > @
                      seq
                        xwidget.write (((unsupported)).apply (((xself).xwidget)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xwidget).xuse_required_attribute)) ("None: is there a None literal in the EO language?"))) (FALSE))
                xtest_fieldset.write
                  [xself]
                    memory > xfield
                    memory > xtemplate_name
                    memory > xform
                    seq > @
                      seq
                        (((unsupported)).apply ((xForm)))
                          seq
                            xtemplate_name.write "forms_tests/use_fieldset.html"
                            xfield.write (((unsupported)).apply ((xChoiceField)) (((xself).xwidget)) (((xself).xbeatles)))
                        xform.write (((xTestForm)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xself).xwidget).xuse_fieldset)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ("<div><label for=\"id_field\">Field:</label><select name=\"field\" id=\"id_field\"><option value=\"J\">John</option>  <option value=\"P\">Paul</option><option value=\"G\">George</option><option value=\"R\">Ringo</option></select></div>") (((((xform).xrender)).apply)))