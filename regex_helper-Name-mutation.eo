memory > xenumerate
memory > xstr
memory > xrange
memory > xlist2
memory > xi
memory > xbytes
memory > xinner_result
memory > xnext
memory > xinner_args
memory > xcount
memory > xlist
memory > xValueError
memory > xelt
memory > xi_item
memory > xNotImplementedError
memory > xStopIteration
memory > xint
memory > xre
memory > xargs
memory > xres
memory > xitem
memory > xNonCapture
memory > xChoice
memory > xGroup
memory > xch
memory > xiter
memory > xSimpleLazyObject
memory > xzip
memory > xescaped
memory > xisinstance
memory > xlen
memory > xi_args
[] > regex_helper
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_lazy_re_compile
        memory > xnext_char
        memory > xnormalize
        memory > xget_quantifier
        memory > xESCAPE_MAPPINGS
        memory > xflatten_result
        memory > xwalk_to_end
        memory > xcontains
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xESCAPE_MAPPINGS.write (((unsupported)).apply ("A") ("None: is there a None literal in the EO language?") ("b") ("None: is there a None literal in the EO language?") ("B") ("None: is there a None literal in the EO language?") ("d") ("0") ("D") ("x") ("s") (" ") ("S") ("x") ("w") ("x") ("W") ("!") ("Z") ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply ((xlist2)))
              unsupported
            (((unsupported)).apply ((xlist)))
              unsupported
            (((unsupported)).apply ((xlist)))
              unsupported
            xnormalize.write
              [xpattern]
                memory > xnum_args
                memory > xinner
                memory > xparam
                memory > xconsume_next
                memory > xname
                memory > xresult
                memory > xterminal_char
                memory > xstart
                memory > xpattern_iter
                memory > xnon_capturing_groups
                seq > @
                  seq
                    (((unsupported)).apply)
                    xresult.write (((unsupported)).apply)
                    xnon_capturing_groups.write (((unsupported)).apply)
                    xconsume_next.write TRUE
                    xpattern_iter.write (((xnext_char)).apply ((((xiter)).apply ((xpattern)))))
                    xnum_args.write 0
                    (((unsupported)).apply ((xStopIteration)))
                      (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("") ((((unsupported)).apply)))))))
                    (((unsupported)).apply ((xStopIteration)) ((xNotImplementedError)))
                      while.
                        TRUE
                        [unused]
                          seq > @
                            seq
                              (xescaped).if
                                bogusForceDataize.write ((((xresult).xappend)).apply ((xch)))
                                ((xch).eq ".").if
                                  bogusForceDataize.write ((((xresult).xappend)).apply ("."))
                                  ((xch).eq "|").if
                                    (((unsupported)).apply ((((xNotImplementedError)).apply ("Awaiting Implementation"))))
                                    ((xch).eq "^").if
                                      ((xch).eq "$").if
                                        (((unsupported)).apply)
                                        ((xch).eq ")").if
                                          seq
                                            xstart.write ((((xnon_capturing_groups).xpop)).apply)
                                            xinner.write (((xNonCapture)).apply ((((unsupported)).apply ((xresult)) ((((unsupported)).apply ((xstart)))))))
                                            xresult.write ((((unsupported)).apply ((xresult)) ((((unsupported)).apply ((xstart))))).add (((unsupported)).apply ((xinner))))
                                          ((xch).eq "[").if
                                            seq
                                              (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                                              bogusForceDataize.write ((((xresult).xappend)).apply ((xch)))
                                              (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                                              while.
                                                ((xescaped).or ((xch).neq "]"))
                                                [unused]
                                                  seq > @
                                                    (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                                            ((xch).eq "(").if
                                              seq
                                                (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                                                (((xch).neq "?").or (xescaped)).if
                                                  seq
                                                    xname.write ("_%d".mod (xnum_args))
                                                    (((unsupported)).apply ((xnum_args)) (1))
                                                    bogusForceDataize.write ((((xresult).xappend)).apply ((((xGroup)).apply ((((unsupported)).apply (("%%(%s)s".mod (xname))) ((xname)))))))
                                                    bogusForceDataize.write (((xwalk_to_end)).apply ((xch)) ((xpattern_iter)))
                                                  seq
                                                    (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                                                    (((unsupported)).apply ((xch)) ("!=<")).if
                                                      bogusForceDataize.write (((xwalk_to_end)).apply ((xch)) ((xpattern_iter)))
                                                      ((xch).eq ":").if
                                                        bogusForceDataize.write ((((xnon_capturing_groups).xappend)).apply ((((xlen)).apply ((xresult)))))
                                                        ((xch).neq "P").if
                                                          (((unsupported)).apply ((((xValueError)).apply (("Non-reversible reg-exp portion: '(?%s'".mod (xch))))))
                                                          seq
                                                            (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                                                            (((unsupported)).apply ((xch)) ((((unsupported)).apply ("<") ("=")))).if
                                                              (((unsupported)).apply ((((xValueError)).apply (("Non-reversible reg-exp portion: '(?P%s'".mod (xch))))))
                                                            ((xch).eq "<").if
                                                              xterminal_char.write ">"
                                                              xterminal_char.write ")"
                                                            xname.write (((unsupported)).apply)
                                                            (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                                                            while.
                                                              ((xch).neq (xterminal_char))
                                                              [unused]
                                                                seq > @
                                                                  seq
                                                                    bogusForceDataize.write ((((xname).xappend)).apply ((xch)))
                                                                    (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                                                            xparam.write ((("".xjoin)).apply ((xname)))
                                                            ((xterminal_char).neq ")").if
                                                              seq
                                                                bogusForceDataize.write ((((xresult).xappend)).apply ((((xGroup)).apply ((((unsupported)).apply (("%%(%s)s".mod (xparam))) ((xparam)))))))
                                                                bogusForceDataize.write (((xwalk_to_end)).apply ((xch)) ((xpattern_iter)))
                                                              bogusForceDataize.write ((((xresult).xappend)).apply ((((xGroup)).apply ((((unsupported)).apply (("%%(%s)s".mod (xparam))) ("None: is there a None literal in the EO language?"))))))
                                              (((unsupported)).apply ((xch)) ("*?+{")).if
                                                seq
                                                  (((unsupported)).apply ((((unsupported)).apply ((xcount)) ((xch)))) ((((xget_quantifier)).apply ((xch)) ((xpattern_iter)))))
                                                  (xch).if
                                                    xconsume_next.write FALSE
                                                  ((xcount).eq 0).if
                                                    (((xcontains)).apply ((((unsupported)).apply ((xresult)) ((1.neg)))) ((xGroup))).if
                                                      (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((1.neg)))) ((((xChoice)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((xresult)) ((1.neg)))))))))
                                                      bogusForceDataize.write ((((xresult).xpop)).apply)
                                                    ((xcount).greater 1).if
                                                      bogusForceDataize.write ((((xresult).xextend)).apply (((((unsupported)).apply ((((unsupported)).apply ((xresult)) ((1.neg))))).mul ((xcount).sub 1))))
                                                bogusForceDataize.write ((((xresult).xappend)).apply ((xch)))
                              (xconsume_next).if
                                (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xpattern_iter)))))
                              xconsume_next.write TRUE
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("") ((((unsupported)).apply)))))))
                    (((unsupported)).apply ((((xlist)).apply ((((xzip)).apply ((((unsupported)).apply ((((xflatten_result)).apply ((xresult)))))))))))
            xnext_char.write
              [xinput_iter]
                memory > xch
                memory > xrepresentative
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xch)) ((xinput_iter)))
                      seq
                        ((xch).neq "\\").if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xch)) (FALSE))))
                            (((unsupported)).apply)
                        xch.write (((xnext)).apply ((xinput_iter)))
                        xrepresentative.write ((((xESCAPE_MAPPINGS).xget)).apply ((xch)) ((xch)))
                        (((unsupported)).apply ((xrepresentative)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xrepresentative)) (TRUE))))
            xwalk_to_end.write
              [xch xinput_iter]
                memory > xnesting
                seq > @
                  seq
                    (((unsupported)).apply)
                    ((xch).eq "(").if
                      xnesting.write 1
                      xnesting.write 0
                    (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((xinput_iter)))
                      (xescaped).if
                        (((unsupported)).apply)
                        ((xch).eq "(").if
                          (((unsupported)).apply ((xnesting)) (1))
                          ((xch).eq ")").if
                            seq
                              ((xnesting).not).if
                                (((unsupported)).apply)
                              (((unsupported)).apply ((xnesting)) (1))
            xget_quantifier.write
              [xch xinput_iter]
                memory > xquant
                memory > xch2
                memory > xvalues
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xch)) ("*?+")).if
                      seq
                        (((unsupported)).apply ((xStopIteration)))
                          (((unsupported)).apply ((((unsupported)).apply ((xch2)) ((xescaped)))) ((((xnext)).apply ((xinput_iter)))))
                          xch2.write "None: is there a None literal in the EO language?"
                        ((xch2).eq "?").if
                          xch2.write "None: is there a None literal in the EO language?"
                        ((xch).eq "+").if
                          (((unsupported)).apply ((((unsupported)).apply (1) ((xch2)))))
                        (((unsupported)).apply ((((unsupported)).apply (0) ((xch2)))))
                    xquant.write (((unsupported)).apply)
                    while.
                      ((xch).neq "}")
                      [unused]
                        seq > @
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xinput_iter)))))
                            bogusForceDataize.write ((((xquant).xappend)).apply ((xch)))
                    xquant.write (((unsupported)).apply ((xquant)) ((((unsupported)).apply ((1.neg)))))
                    xvalues.write (((((("".xjoin)).apply ((xquant))).xsplit)).apply (","))
                    (((unsupported)).apply ((xStopIteration)))
                      (((unsupported)).apply ((((unsupported)).apply ((xch)) ((xescaped)))) ((((xnext)).apply ((xinput_iter)))))
                      xch.write "None: is there a None literal in the EO language?"
                    ((xch).eq "?").if
                      xch.write "None: is there a None literal in the EO language?"
                    (((unsupported)).apply ((((unsupported)).apply ((((xint)).apply ((((unsupported)).apply ((xvalues)) (0))))) ((xch)))))
            xcontains.write
              [xsource xinst]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xsource)) ((xinst))).if
                      (((unsupported)).apply (TRUE))
                    (((xisinstance)).apply ((xsource)) ((xNonCapture))).if
                      (((unsupported)).apply ((xelt)) ((xsource)))
                        (((xcontains)).apply ((xelt)) ((xinst))).if
                          (((unsupported)).apply (TRUE))
                    (((unsupported)).apply (FALSE))
            xflatten_result.write
              [xsource]
                memory > xnew_result
                memory > xelt
                memory > xresult_args
                memory > xpos
                memory > xpiece
                memory > xparam
                memory > xlast
                memory > xparams
                memory > xnew_args
                memory > xresult
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xsource)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (""))) ((((unsupported)).apply ((((unsupported)).apply)))))))
                    (((xisinstance)).apply ((xsource)) ((xGroup))).if
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xsource)) (1))) ("None: is there a None literal in the EO language?")).if
                          xparams.write (((unsupported)).apply)
                          xparams.write (((unsupported)).apply ((((unsupported)).apply ((xsource)) (1))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xsource)) (0))))) ((((unsupported)).apply ((xparams)))))))
                    xresult.write (((unsupported)).apply (""))
                    xresult_args.write (((unsupported)).apply ((((unsupported)).apply)))
                    (((unsupported)).apply ((xpos)) ((xlast)) (0))
                    (((unsupported)).apply ((((unsupported)).apply ((xpos)) ((xelt)))) ((((xenumerate)).apply ((xsource)))))
                      seq
                        (((xisinstance)).apply ((xelt)) ((xstr))).if
                          (((unsupported)).apply)
                        xpiece.write ((("".xjoin)).apply ((((unsupported)).apply ((xsource)) ((((unsupported)).apply ((xlast)) ((xpos)))))))
                        (((xisinstance)).apply ((xelt)) ((xGroup))).if
                          seq
                            (((unsupported)).apply ((xpiece)) ((((unsupported)).apply ((xelt)) (0))))
                            xparam.write (((unsupported)).apply ((xelt)) (1))
                          xparam.write "None: is there a None literal in the EO language?"
                        xlast.write ((xpos).add 1)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xresult)))))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((xi)))) ((xpiece)))
                            (xparam).if
                              bogusForceDataize.write ((((((unsupported)).apply ((xresult_args)) ((xi))).xappend)).apply ((xparam)))
                        (((xisinstance)).apply ((xelt)) ((((unsupported)).apply ((xChoice)) ((xNonCapture))))).if
                          seq
                            (((xisinstance)).apply ((xelt)) ((xNonCapture))).if
                              xelt.write (((unsupported)).apply ((xelt)))
                            (((unsupported)).apply ((((unsupported)).apply ((xinner_result)) ((xinner_args)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                            (((unsupported)).apply ((xitem)) ((xelt)))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xres)) ((xargs)))) ((((xflatten_result)).apply ((xitem)))))
                                bogusForceDataize.write ((((xinner_result).xextend)).apply ((xres)))
                                bogusForceDataize.write ((((xinner_args).xextend)).apply ((xargs)))
                            xnew_result.write (((unsupported)).apply)
                            xnew_args.write (((unsupported)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xitem)) ((xargs)))) ((((xzip)).apply ((xresult)) ((xresult_args)))))
                              (((unsupported)).apply ((((unsupported)).apply ((xi_item)) ((xi_args)))) ((((xzip)).apply ((xinner_result)) ((xinner_args)))))
                                seq
                                  bogusForceDataize.write ((((xnew_result).xappend)).apply (((xitem).add (xi_item))))
                                  bogusForceDataize.write ((((xnew_args).xappend)).apply (((((unsupported)).apply ((xargs)) ((((unsupported)).apply))).add (xi_args))))
                            xresult.write (xnew_result)
                            xresult_args.write (xnew_args)
                    ((xpos).geq (xlast)).if
                      seq
                        xpiece.write ((("".xjoin)).apply ((((unsupported)).apply ((xsource)) ((((unsupported)).apply ((xlast)))))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xresult)))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((xi)))) ((xpiece)))
                    (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((xresult_args)))))
            x_lazy_re_compile.write
              [xregex xflags]
                memory > x_compile
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    x_compile.write
                      []
                        seq > @
                          (((xisinstance)).apply ((xregex)) ((((unsupported)).apply ((xstr)) ((xbytes))))).if
                            (((unsupported)).apply (((((xre).xcompile)).apply ((xregex)) ((xflags)))))
                            seq
                              (((unsupported)).apply (((xflags).not)) ("flags must be empty if regex is passed pre-compiled"))
                              (((unsupported)).apply ((xregex)))
                    (((unsupported)).apply ((((xSimpleLazyObject)).apply ((x_compile)))))