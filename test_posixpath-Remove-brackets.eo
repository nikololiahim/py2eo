memory > xbasename
memory > xValueError
memory > xfile
memory > xrange
memory > xKeyError
memory > xabspath
memory > xf
memory > xi
memory > xsupport
memory > xtest_genericpath
memory > xsuffix
memory > xenv
memory > xFakePath
memory > xImportError
memory > xstr
memory > xrealpath
memory > xp
memory > xopen
memory > xreal_getcwd
memory > xbytes
memory > xOSError
memory > xmock
memory > xos
memory > xdirname
memory > xposixpath
memory > xunittest
memory > xreal_getcwdb
memory > xTypeError
memory > xhome
memory > x__name__
[] > test_posixpath
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_path_dirname
        memory > xtest_path_isabs
        memory > xtest_relpath
        memory > xtest_splitext
        memory > xtest_path_relpath
        memory > xtest_islink
        memory > xskip_if_ABSTFN_contains_backslash
        memory > xtest_path_normcase
        memory > xtest_realpath_resolve_first
        memory > xtest_normpath
        memory > xtest_basename
        memory > xtest_realpath_relative
        memory > xtest_path_commonpath
        memory > xtest_ismount
        memory > xtest_path_join
        memory > xtest_path_lexists
        memory > xtest_path_abspath
        memory > xtest_path_splitext
        memory > xtest_split
        memory > xtest_relpath_bytes
        memory > xtest_expanduser_home_envvar
        memory > xtest_ismount_different_device
        memory > xtest_realpath_repeated_indirect_symlinks
        memory > xtest_realpath_basic
        memory > xtest_realpath_pardir
        memory > xtest_expanduser_pwd
        memory > xsplitextTest
        memory > xposix
        memory > xtest_realpath_curdir
        memory > xtest_path_split
        memory > xtest_path_splitdrive
        memory > xsetUp
        memory > xassertPathEqual
        memory > xtest_commonpath
        memory > xattributes
        memory > xpath
        memory > xABSTFN
        memory > xtest_realpath_resolve_before_normalizing
        memory > xtest_path_ismount
        memory > xtest_realpath_resolve_parents
        memory > xtest_isabs
        memory > xtest_ismount_symlinks
        memory > xtest_join
        memory > xsafe_rmdir
        memory > xtest_ismount_non_existent
        memory > xtest_ismount_directory_not_readable
        memory > xpathmodule
        memory > xtest_path_expandvars
        memory > xtest_dirname
        memory > xtest_path_islink
        memory > xtest_path_realpath
        memory > xtest_realpath_deep_recursion
        memory > xtest_path_normpath
        memory > xtest_path_expanduser
        memory > xtearDown
        memory > xtest_path_basename
        memory > xtest_expanduser
        memory > xtest_realpath_symlink_loops
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xposix.write "None: is there a None literal in the EO language?"
            xABSTFN.write (((xabspath)).apply (((xsupport).xTESTFN)))
            xskip_if_ABSTFN_contains_backslash.write
              [xtest]
                memory > xfound_backslash
                memory > xmsg
                seq > @
                  seq
                    (((unsupported)).apply)
                    xfound_backslash.write (((unsupported)).apply ("\\") ((xABSTFN)))
                    xmsg.write "ABSTFN is not a posix path - tests fail"
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xtest)) (((((((xunittest).xskip)).apply ((xmsg)))).apply ((xtest)))))) ((xfound_backslash)))))
            xsafe_rmdir.write
              [xdirname]
                seq > @
                  (((unsupported)).apply ((xOSError)))
                    bogusForceDataize.write ((((xos).xrmdir)).apply ((xdirname)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      unsupported
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xsuffix)) ((((unsupported)).apply ("") ("1") ("2"))))
                        seq
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((((xsupport).xTESTFN).add (xsuffix))))
                          bogusForceDataize.write (((xsafe_rmdir)).apply ((((xsupport).xTESTFN).add (xsuffix))))
                xtest_join.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xjoin)).apply ("/foo") ("bar") ("/bar") ("baz"))) ("/bar/baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xjoin)).apply ("/foo") ("bar") ("baz"))) ("/foo/bar/baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xjoin)).apply ("/foo/") ("bar/") ("baz/"))) ("/foo/bar/baz/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xjoin)).apply ("/foo") ("bar") ("/bar") ("baz"))) ("/bar/baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xjoin)).apply ("/foo") ("bar") ("baz"))) ("/foo/bar/baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xjoin)).apply ("/foo/") ("bar/") ("baz/"))) ("/foo/bar/baz/"))
                xtest_split.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("/foo/bar"))) ((((unsupported)).apply ("/foo") ("bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("/"))) ((((unsupported)).apply ("/") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("foo"))) ((((unsupported)).apply ("") ("foo"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("////foo"))) ((((unsupported)).apply ("////") ("foo"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("//foo//bar"))) ((((unsupported)).apply ("//foo") ("bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("/foo/bar"))) ((((unsupported)).apply ("/foo") ("bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("/"))) ((((unsupported)).apply ("/") (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("foo"))) ((((unsupported)).apply ("") ("foo"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("////foo"))) ((((unsupported)).apply ("////") ("foo"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplit)).apply ("//foo//bar"))) ((((unsupported)).apply ("//foo") ("bar"))))
                xsplitextTest.write
                  [xself xpath xfilename xext]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply ((xpath)))) ((((unsupported)).apply ((xfilename)) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (("/".add (xpath))))) ((((unsupported)).apply (("/".add (xfilename))) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (("abc/".add (xpath))))) ((((unsupported)).apply (("abc/".add (xfilename))) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (("abc.def/".add (xpath))))) ((((unsupported)).apply (("abc.def/".add (xfilename))) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (("/abc.def/".add (xpath))))) ((((unsupported)).apply (("/abc.def/".add (xfilename))) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (((xpath).add "/")))) ((((unsupported)).apply ((((xfilename).add (xext)).add "/")) (""))))
                        xpath.write (((xbytes)).apply ((xpath)) ("ASCII"))
                        xfilename.write (((xbytes)).apply ((xfilename)) ("ASCII"))
                        xext.write (((xbytes)).apply ((xext)) ("ASCII"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply ((xpath)))) ((((unsupported)).apply ((xfilename)) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (("/".add (xpath))))) ((((unsupported)).apply (("/".add (xfilename))) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (("abc/".add (xpath))))) ((((unsupported)).apply (("abc/".add (xfilename))) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (("abc.def/".add (xpath))))) ((((unsupported)).apply (("abc.def/".add (xfilename))) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (("/abc.def/".add (xpath))))) ((((unsupported)).apply (("/abc.def/".add (xfilename))) ((xext)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xsplitext)).apply (((xpath).add "/")))) ((((unsupported)).apply ((((xfilename).add (xext)).add "/")) (""))))
                xtest_splitext.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply ("foo.bar") ("foo") (".bar"))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply ("foo.boo.bar") ("foo.boo") (".bar"))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply ("foo.boo.biff.bar") ("foo.boo.biff") (".bar"))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply (".csh.rc") (".csh") (".rc"))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply ("nodots") ("nodots") (""))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply (".cshrc") (".cshrc") (""))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply ("...manydots") ("...manydots") (""))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply ("...manydots.ext") ("...manydots") (".ext"))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply (".") (".") (""))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply ("..") ("..") (""))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply ("........") ("........") (""))
                        bogusForceDataize.write ((((xself).xsplitextTest)).apply ("") ("") (""))
                xtest_isabs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply (""))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply ("/"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply ("/foo"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply ("/foo/bar"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply ("foo/bar"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply (""))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply ("/"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply ("/foo"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply ("/foo/bar"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xisabs)).apply ("foo/bar"))) (FALSE))
                xtest_basename.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("/foo/bar"))) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("/"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("foo"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("////foo"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("//foo//bar"))) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("/foo/bar"))) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("/"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("foo"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("////foo"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xbasename)).apply ("//foo//bar"))) ("bar"))
                xtest_dirname.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("/foo/bar"))) ("/foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("/"))) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("foo"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("////foo"))) ("////"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("//foo//bar"))) ("//foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("/foo/bar"))) ("/foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("/"))) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("foo"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("////foo"))) ("////"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xdirname)).apply ("//foo//bar"))) ("//foo"))
                xtest_islink.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xislink)).apply ((((xsupport).xTESTFN).add "1")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xlexists)).apply ((((xsupport).xTESTFN).add "2")))) (FALSE))
                        (((unsupported)).apply ((((xopen)).apply ((((xsupport).xTESTFN).add "1")) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("foo"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xislink)).apply ((((xsupport).xTESTFN).add "1")))) (FALSE))
                        ((xsupport).xcan_symlink).if
                          seq
                            bogusForceDataize.write ((((xos).xsymlink)).apply ((((xsupport).xTESTFN).add "1")) ((((xsupport).xTESTFN).add "2")))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xislink)).apply ((((xsupport).xTESTFN).add "2")))) (TRUE))
                            bogusForceDataize.write ((((xos).xremove)).apply ((((xsupport).xTESTFN).add "1")))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xislink)).apply ((((xsupport).xTESTFN).add "2")))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xexists)).apply ((((xsupport).xTESTFN).add "2")))) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xlexists)).apply ((((xsupport).xTESTFN).add "2")))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xislink)).apply ((((xsupport).xTESTFN).add "udfff")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xislink)).apply ((((((xos).xfsencode)).apply (((xsupport).xTESTFN))).add "xff")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xislink)).apply ((((xsupport).xTESTFN).add "x00")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xislink)).apply ((((((xos).xfsencode)).apply (((xsupport).xTESTFN))).add "x00")))) (FALSE))
                xtest_ismount.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ("/"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ("/"))) (TRUE))
                xtest_ismount_non_existent.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ((xABSTFN)))) (FALSE))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xABSTFN)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ((xABSTFN)))) (FALSE))
                          bogusForceDataize.write (((xsafe_rmdir)).apply ((xABSTFN)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ("/udfff"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ("/xff"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ("/x00"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ("/x00"))) (FALSE))
                xtest_ismount_symlinks.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xsymlink)).apply ("/") ((xABSTFN)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ((xABSTFN)))) (FALSE))
                          bogusForceDataize.write ((((xos).xunlink)).apply ((xABSTFN)))
                xtest_ismount_different_device.write
                  [xself]
                    memory > xsave_lstat
                    memory > xfake_lstat
                    seq > @
                      (((unsupported)).apply)
                        xsave_lstat.write ((xos).xlstat)
                        xfake_lstat.write
                          [xpath]
                            memory > xst_ino
                            memory > xst_dev
                            seq > @
                              seq
                                xst_ino.write 0
                                xst_dev.write 0
                                ((xpath).eq (xABSTFN)).if
                                  seq
                                    xst_dev.write 1
                                    xst_ino.write 1
                                (((unsupported)).apply (((((xposix).xstat_result)).apply ((((unsupported)).apply (0) ((xst_ino)) ((xst_dev)) (0) (0) (0) (0) (0) (0) (0))))))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xos).xlstat)) ((xfake_lstat)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ((xABSTFN)))) (TRUE))
                          (((unsupported)).apply (((xos).xlstat)) ((xsave_lstat)))
                xtest_ismount_directory_not_readable.write
                  [xself]
                    memory > xsave_lstat
                    memory > xfake_lstat
                    seq > @
                      (((unsupported)).apply)
                        xsave_lstat.write ((xos).xlstat)
                        xfake_lstat.write
                          [xpath]
                            memory > xst_ino
                            memory > xst_dev
                            seq > @
                              seq
                                xst_ino.write 0
                                xst_dev.write 0
                                (((((xpath).xstartswith)).apply ((xABSTFN))).and ((xpath).neq (xABSTFN))).if
                                  (((unsupported)).apply ((((xOSError)).apply ("Fake [Errno 13] Permission denied"))))
                                ((xpath).eq (xABSTFN)).if
                                  seq
                                    xst_dev.write 1
                                    xst_ino.write 1
                                (((unsupported)).apply (((((xposix).xstat_result)).apply ((((unsupported)).apply (0) ((xst_ino)) ((xst_dev)) (0) (0) (0) (0) (0) (0) (0))))))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xos).xlstat)) ((xfake_lstat)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((xposixpath).xismount)).apply ((xABSTFN)))) (TRUE))
                          (((unsupported)).apply (((xos).xlstat)) ((xsave_lstat)))
                xtest_expanduser.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xexpanduser)).apply ("foo"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xexpanduser)).apply ("foo"))) ("foo"))
                xtest_expanduser_home_envvar.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xsupport).xEnvironmentVarGuard)) ((xenv)))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("HOME"))) ("/home/victor"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xexpanduser)).apply ("~"))) ("/home/victor"))
                          (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("HOME"))) ("/home/victor/"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xexpanduser)).apply ("~"))) ("/home/victor"))
                          (((unsupported)).apply ((xhome)) ((((unsupported)).apply ("/") ("") ("//") ("///"))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xhome)))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("HOME"))) ((xhome)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xexpanduser)).apply ("~"))) ("/"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xexpanduser)).apply ("~/"))) ("/"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xexpanduser)).apply ("~/foo"))) ("/foo"))
                xtest_expanduser_pwd.write
                  [xself]
                    memory > xpwd
                    memory > xhome
                    seq > @
                      seq
                        xpwd.write ((((xsupport).ximport_module)).apply ("pwd"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xposixpath).xexpanduser)).apply ("~/"))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xposixpath).xexpanduser)).apply ("~/"))) ((xbytes)))
                        (((((xposixpath).xexpanduser)).apply ("~")).neq "/").if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xposixpath).xexpanduser)).apply ("~")).add "/")) (((((xposixpath).xexpanduser)).apply ("~/"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xposixpath).xexpanduser)).apply ("~")).add "/")) (((((xposixpath).xexpanduser)).apply ("~/"))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xposixpath).xexpanduser)).apply ("~root/"))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xposixpath).xexpanduser)).apply ("~foo/"))) ((xstr)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xposixpath).xexpanduser)).apply ("~root/"))) ((xbytes)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xposixpath).xexpanduser)).apply ("~foo/"))) ((xbytes)))
                        (((unsupported)).apply (((xsupport).xEnvironmentVarGuard)) ((xenv)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xenv)) ("HOME"))))))
                            xhome.write (((((xpwd).xgetpwuid)).apply (((xos).xgetuid))).xpw_dir)
                            xhome.write (((((xhome).xrstrip)).apply ("/")).or "/")
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xexpanduser)).apply ("~"))) ((xhome)))
                            (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xpwd)) ("getpwuid") ((xKeyError)))) ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xpwd)) ("getpwnam") ((xKeyError)))))
                              (((unsupported)).apply ((xpath)) ((((unsupported)).apply ("~") ("~/.local") ("~vstinner/"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xexpanduser)).apply ((xpath)))) ((xpath)))
                xtest_normpath.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply (""))) ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("/"))) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("//"))) ("//"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("///"))) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("///foo/.//bar//"))) ("/foo/bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("///foo/.//bar//.//..//.//baz"))) ("/foo/baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("///..//./foo/.//bar"))) ("/foo/bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply (""))) ("."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("/"))) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("//"))) ("//"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("///"))) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("///foo/.//bar//"))) ("/foo/bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("///foo/.//bar//.//..//.//baz"))) ("/foo/baz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xnormpath)).apply ("///..//./foo/.//bar"))) ("/foo/bar"))
                xtest_realpath_curdir.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ("."))) (((xos).xgetcwd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ("./."))) (((xos).xgetcwd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((("/".xjoin)).apply (((((unsupported)).apply (".")).mul 100)))))) (((xos).xgetcwd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ("."))) (((xos).xgetcwdb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ("./."))) (((xos).xgetcwdb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((("/".xjoin)).apply (((((unsupported)).apply (".")).mul 100)))))) (((xos).xgetcwdb)))
                xtest_realpath_pardir.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (".."))) ((((xdirname)).apply (((xos).xgetcwd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ("../.."))) ((((xdirname)).apply ((((xdirname)).apply (((xos).xgetcwd)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((("/".xjoin)).apply (((((unsupported)).apply ("..")).mul 100)))))) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (".."))) ((((xdirname)).apply (((xos).xgetcwdb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ("../.."))) ((((xdirname)).apply ((((xdirname)).apply (((xos).xgetcwdb)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((("/".xjoin)).apply (((((unsupported)).apply ("..")).mul 100)))))) ("/"))
                xtest_realpath_basic.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "1")) ((xABSTFN)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ((xABSTFN)))) (((xABSTFN).add "1")))
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xABSTFN)))
                xtest_realpath_relative.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((((xposixpath).xrelpath)).apply (((xABSTFN).add "1")))) ((xABSTFN)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ((xABSTFN)))) (((xABSTFN).add "1")))
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xABSTFN)))
                xtest_realpath_symlink_loops.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xsymlink)).apply ((xABSTFN)) ((xABSTFN)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ((xABSTFN)))) ((xABSTFN)))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "1")) (((xABSTFN).add "2")))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "2")) (((xABSTFN).add "1")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add "1")))) (((xABSTFN).add "1")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add "2")))) (((xABSTFN).add "2")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add "1/x")))) (((xABSTFN).add "1/x")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add "1/..")))) ((((xdirname)).apply ((xABSTFN)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add "1/../x")))) (((((xdirname)).apply ((xABSTFN))).add "/x")))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "x")) (((xABSTFN).add "y")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((((xABSTFN).add "1/../").add (((xbasename)).apply ((xABSTFN)))).add "y")))) (((xABSTFN).add "y")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((((xABSTFN).add "1/../").add (((xbasename)).apply ((xABSTFN)))).add "1")))) (((xABSTFN).add "1")))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((((xbasename)).apply ((xABSTFN))).add "a/b")) (((xABSTFN).add "a")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add "a")))) (((xABSTFN).add "a/b")))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ((((("../".add (((xbasename)).apply ((((xdirname)).apply ((xABSTFN)))))).add "/").add (((xbasename)).apply ((xABSTFN)))).add "c")) (((xABSTFN).add "c")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add "c")))) (((xABSTFN).add "c")))
                            (((unsupported)).apply (((((xsupport).xchange_cwd)).apply ((((xdirname)).apply ((xABSTFN)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ((((xbasename)).apply ((xABSTFN)))))) ((xABSTFN)))
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply ((xABSTFN)))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "1")))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "2")))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "y")))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "c")))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "a")))
                xtest_realpath_repeated_indirect_symlinks.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xABSTFN)))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (("../".add (((xbasename)).apply ((xABSTFN))))) (((xABSTFN).add "/self")))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ("self/self/self") (((xABSTFN).add "/link")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add "/link")))) ((xABSTFN)))
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "/self")))
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "/link")))
                            bogusForceDataize.write (((xsafe_rmdir)).apply ((xABSTFN)))
                xtest_realpath_deep_recursion.write
                  [xself]
                    memory > xdepth
                    seq > @
                      (((unsupported)).apply)
                        xdepth.write 10
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xABSTFN)))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((xdepth)))))
                              bogusForceDataize.write ((((xos).xsymlink)).apply (((("/".xjoin)).apply (((((unsupported)).apply (("%d".mod (xi)))).mul 10)))) (((xABSTFN).add ("/%d".mod ((xi).add 1)))))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (".") (((xABSTFN).add "/0")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add ("/%d".mod (xdepth)))))) ((xABSTFN)))
                            (((unsupported)).apply (((((xsupport).xchange_cwd)).apply ((xABSTFN)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (("%d".mod (xdepth))))) ((xABSTFN)))
                          seq
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (((xdepth).add 1)))))
                              bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add ("/%d".mod (xi)))))
                            bogusForceDataize.write (((xsafe_rmdir)).apply ((xABSTFN)))
                xtest_realpath_resolve_parents.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xABSTFN)))
                            bogusForceDataize.write ((((xos).xmkdir)).apply (((xABSTFN).add "/y")))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "/y")) (((xABSTFN).add "/k")))
                            (((unsupported)).apply (((((xsupport).xchange_cwd)).apply (((xABSTFN).add "/k")))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply ("a"))) (((xABSTFN).add "/y/a")))
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "/k")))
                            bogusForceDataize.write (((xsafe_rmdir)).apply (((xABSTFN).add "/y")))
                            bogusForceDataize.write (((xsafe_rmdir)).apply ((xABSTFN)))
                xtest_realpath_resolve_before_normalizing.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xABSTFN)))
                            bogusForceDataize.write ((((xos).xmkdir)).apply (((xABSTFN).add "/k")))
                            bogusForceDataize.write ((((xos).xmkdir)).apply (((xABSTFN).add "/k/y")))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "/k/y")) (((xABSTFN).add "/link-y")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xABSTFN).add "/link-y/..")))) (((xABSTFN).add "/k")))
                            (((unsupported)).apply (((((xsupport).xchange_cwd)).apply ((((xdirname)).apply ((xABSTFN)))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((((xbasename)).apply ((xABSTFN))).add "/link-y/..")))) (((xABSTFN).add "/k")))
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "/link-y")))
                            bogusForceDataize.write (((xsafe_rmdir)).apply (((xABSTFN).add "/k/y")))
                            bogusForceDataize.write (((xsafe_rmdir)).apply (((xABSTFN).add "/k")))
                            bogusForceDataize.write (((xsafe_rmdir)).apply ((xABSTFN)))
                xtest_realpath_resolve_first.write
                  [xself]
                    memory > xbase
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xABSTFN)))
                            bogusForceDataize.write ((((xos).xmkdir)).apply (((xABSTFN).add "/k")))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ((xABSTFN)) (((xABSTFN).add "link")))
                            (((unsupported)).apply (((((xsupport).xchange_cwd)).apply ((((xdirname)).apply ((xABSTFN)))))))
                              seq
                                xbase.write (((xbasename)).apply ((xABSTFN)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xbase).add "link")))) ((xABSTFN)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrealpath)).apply (((xbase).add "link/k")))) (((xABSTFN).add "/k")))
                          seq
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xABSTFN).add "link")))
                            bogusForceDataize.write (((xsafe_rmdir)).apply (((xABSTFN).add "/k")))
                            bogusForceDataize.write (((xsafe_rmdir)).apply ((xABSTFN)))
                xtest_relpath.write
                  [xself]
                    memory > xcurdir
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xreal_getcwd)) (((xos).xgetcwd)))) ((((unsupported)).apply (((xos).xgetcwd)) ((((unsupported)).apply ("/home/user/bar"))))))
                        (((unsupported)).apply)
                          seq
                            xcurdir.write (((unsupported)).apply ((((((xos).xpath).xsplit)).apply (((xos).xgetcwd)))) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xposixpath).xrelpath)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a"))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply (((((xposixpath).xabspath)).apply ("a"))))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a/b"))) ("a/b"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("../a/b"))) ("../a/b"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a") ("../b"))) ((("../".add (xcurdir)).add "/a")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a/b") ("../c"))) ((("../".add (xcurdir)).add "/a/b")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a") ("b/c"))) ("../../a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a") ("a"))) ("."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/foo/bar/bat") ("/x/y/z"))) ("../../../foo/bar/bat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/foo/bar/bat") ("/foo/bar"))) ("bat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/foo/bar/bat") ("/"))) ("foo/bar/bat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/") ("/foo/bar/bat"))) ("../../.."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/foo/bar/bat") ("/x"))) ("../foo/bar/bat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/x") ("/foo/bar/bat"))) ("../../../x"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/") ("/"))) ("."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/a") ("/a"))) ("."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/a/b") ("/a/b"))) ("."))
                          (((unsupported)).apply (((xos).xgetcwd)) ((xreal_getcwd)))
                xtest_relpath_bytes.write
                  [xself]
                    memory > xcurdir
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xreal_getcwdb)) (((xos).xgetcwdb)))) ((((unsupported)).apply (((xos).xgetcwdb)) ((((unsupported)).apply ("/home/user/bar"))))))
                        (((unsupported)).apply)
                          seq
                            xcurdir.write (((unsupported)).apply ((((((xos).xpath).xsplit)).apply (((xos).xgetcwdb)))) ((1.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xposixpath).xrelpath)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a"))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply (((((xposixpath).xabspath)).apply ("a"))))) ("a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a/b"))) ("a/b"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("../a/b"))) ("../a/b"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a") ("../b"))) ((("../".add (xcurdir)).add "/a")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a/b") ("../c"))) ((("../".add (xcurdir)).add "/a/b")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a") ("b/c"))) ("../../a"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("a") ("a"))) ("."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/foo/bar/bat") ("/x/y/z"))) ("../../../foo/bar/bat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/foo/bar/bat") ("/foo/bar"))) ("bat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/foo/bar/bat") ("/"))) ("foo/bar/bat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/") ("/foo/bar/bat"))) ("../../.."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/foo/bar/bat") ("/x"))) ("../foo/bar/bat"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/x") ("/foo/bar/bat"))) ("../../../x"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/") ("/"))) ("."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/a") ("/a"))) ("."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xrelpath)).apply ("/a/b") ("/a/b"))) ("."))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposixpath).xrelpath)) ("bytes") ("str"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposixpath).xrelpath)) ("str") ("bytes"))
                          (((unsupported)).apply (((xos).xgetcwdb)) ((xreal_getcwdb)))
                xtest_commonpath.write
                  [xself]
                    memory > xcheck_error
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xpaths xexpected]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xcommonpath)).apply ((xpaths)))) ((xexpected)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xposixpath).xcommonpath)).apply ((((unsupported)).apply (((((xos).xfsencode)).apply ((xp)))) ((xp)) ((xpaths)))))) (((((xos).xfsencode)).apply ((xexpected)))))
                        xcheck_error.write
                          [xexc xpaths]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexc)) (((xposixpath).xcommonpath)) ((xpaths)))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexc)) (((xposixpath).xcommonpath)) ((((unsupported)).apply (((((xos).xfsencode)).apply ((xp)))) ((xp)) ((xpaths)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xposixpath).xcommonpath)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck_error)).apply ((xValueError)) ((((unsupported)).apply ("/usr") ("usr"))))
                        bogusForceDataize.write (((xcheck_error)).apply ((xValueError)) ((((unsupported)).apply ("usr") ("/usr"))))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr/local"))) ("/usr/local"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr/local") ("/usr/local"))) ("/usr/local"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr/local/") ("/usr/local"))) ("/usr/local"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr/local/") ("/usr/local/"))) ("/usr/local"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr//local") ("//usr/local"))) ("/usr/local"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr/./local") ("/./usr/local"))) ("/usr/local"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/") ("/dev"))) ("/"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr") ("/dev"))) ("/"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr/lib/") ("/usr/lib/python3"))) ("/usr/lib"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr/lib/") ("/usr/lib64/"))) ("/usr"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr/lib") ("/usr/lib64"))) ("/usr"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("/usr/lib/") ("/usr/lib64"))) ("/usr"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("spam"))) ("spam"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("spam") ("spam"))) ("spam"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("spam") ("alot"))) (""))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("and/jam") ("and/spam"))) ("and"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("and//jam") ("and/spam//"))) ("and"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("and/./jam") ("./and/spam"))) ("and"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("and/jam") ("and/spam") ("alot"))) (""))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("and/jam") ("and/spam") ("and"))) ("and"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply (""))) (""))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("") ("spam/alot"))) (""))
                        bogusForceDataize.write (((xcheck_error)).apply ((xValueError)) ((((unsupported)).apply ("") ("/spam/alot"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposixpath).xcommonpath)) ((((unsupported)).apply ("/usr/lib/") ("/usr/lib/python3"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposixpath).xcommonpath)) ((((unsupported)).apply ("/usr/lib/") ("usr/lib/python3"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposixpath).xcommonpath)) ((((unsupported)).apply ("usr/lib/") ("/usr/lib/python3"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposixpath).xcommonpath)) ((((unsupported)).apply ("/usr/lib/") ("/usr/lib/python3"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposixpath).xcommonpath)) ((((unsupported)).apply ("/usr/lib/") ("usr/lib/python3"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xposixpath).xcommonpath)) ((((unsupported)).apply ("usr/lib/") ("/usr/lib/python3"))))
            (((unsupported)).apply (((xtest_genericpath).xCommonTest)) (((xunittest).xTestCase)))
              seq
                xpathmodule.write (xposixpath)
                xattributes.write (((unsupported)).apply ("relpath") ("samefile") ("sameopenfile") ("samestat"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xpath.write (xposixpath)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfile_name)) ((((xsupport).xTESTFN).xlower)))
                        (((unsupported)).apply (((xself).xfile_path)) ((((xFakePath)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xself).xfile_name)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xfile_name)) ("xb") (0))) ((xfile)))
                          bogusForceDataize.write ((((xfile).xwrite)).apply ("test_posixpath.PathLikeTests"))
                xassertPathEqual.write
                  [xself xfunc]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (((xself).xfile_path)))) ((((xfunc)).apply (((xself).xfile_name)))))
                xtest_path_normcase.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xnormcase)))
                xtest_path_isabs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xisabs)))
                xtest_path_join.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xpath).xjoin)).apply ("a") ((((xFakePath)).apply ("b"))) ("c"))) ((((((xself).xpath).xjoin)).apply ("a") ("b") ("c"))))
                xtest_path_split.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xsplit)))
                xtest_path_splitext.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xsplitext)))
                xtest_path_splitdrive.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xsplitdrive)))
                xtest_path_basename.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xbasename)))
                xtest_path_dirname.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xdirname)))
                xtest_path_islink.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xislink)))
                xtest_path_lexists.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xlexists)))
                xtest_path_ismount.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xismount)))
                xtest_path_expanduser.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xexpanduser)))
                xtest_path_expandvars.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xexpandvars)))
                xtest_path_normpath.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xnormpath)))
                xtest_path_abspath.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xabspath)))
                xtest_path_realpath.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xrealpath)))
                xtest_path_relpath.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xself).xpath).xrelpath)))
                xtest_path_commonpath.write
                  [xself]
                    memory > xcommon_path
                    seq > @
                      seq
                        xcommon_path.write (((((xself).xpath).xcommonpath)).apply ((((unsupported)).apply (((xself).xfile_path)) (((xself).xfile_name)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcommon_path)) (((xself).xfile_name)))
            ((x__name__).eq "__main__").if
              unsupported