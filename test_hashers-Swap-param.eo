memory > xsummary_key
memory > xImportError
memory > xdata
memory > xScryptPasswordHasher
memory > xNotImplementedError
memory > xtype
memory > xBCryptPasswordHasher
memory > xhash
memory > xPBKDF2PasswordHasher
memory > xUNUSABLE_PASSWORD_SUFFIX_LENGTH
memory > xhasher_class
memory > xidentify_hasher
memory > xValueError
memory > xskipUnless
memory > xsalt
memory > xWarning
memory > xpassword
memory > xcheck_password
memory > xBasePasswordHasher
memory > xUNUSABLE_PASSWORD_PREFIX
memory > xalgorithm
memory > xnew_value
memory > xexcepted
memory > xPBKDF2SHA1PasswordHasher
memory > xoverride_settings
memory > xmake_password
memory > xis_password_usable
memory > xmock
memory > xMD5PasswordHasher
memory > xBCryptSHA256PasswordHasher
memory > xgetattr
memory > xsetattr
memory > xget_hasher
memory > xattr
memory > xPASSWORD_HASHERS
memory > xSHA1PasswordHasher
memory > xlen
memory > xalgo
memory > xSimpleTestCase
memory > xTypeError
memory > xkey
[] > test_hashers
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_pbkdf2_upgrade
        memory > xtest_bcrypt_salt_check
        memory > xtest_unsalted_sha1_encode_invalid_salt
        memory > xsetUp
        memory > xtest_unsalted_md5_encode_invalid_salt
        memory > xtest_bcrypt
        memory > xargon2
        memory > x_test_scrypt_upgrade
        memory > xcrypt
        memory > xtest_crypt_encode_invalid_salt
        memory > xtest_encode_invalid_salt
        memory > xtest_scrypt_upgrade
        memory > xtest_load_library_no_algorithm
        memory > xtest_no_upgrade
        memory > xtest_bytes
        memory > xtest_encode_password_required
        memory > xtest_crypt_encode_invalid_hash
        memory > xtest_bcryptsha256_salt_check
        memory > xtest_decode
        memory > xtest_safe_summary
        memory > xtest_pbkdf2_harden_runtime
        memory > xtest_unsalted_sha1
        memory > xtest_unsalted_md5
        memory > xtest_simple
        memory > xtest_must_update
        memory > xtest_is_password_usable
        memory > xnot_implemented_msg
        memory > xbcrypt
        memory > xtest_no_upgrade_on_incorrect_pass
        memory > xtest_argon2
        memory > xtest_check_password_calls_harden_runtime
        memory > xtest_unspecified_password
        memory > x_test_argon2_upgrade
        memory > xtest_md5
        memory > xtest_unusable
        memory > xtest_upgrade
        memory > xtest_argon2_version_upgrade
        memory > xtest_scrypt
        memory > xtest_bcrypt_upgrade
        memory > xtest_invalid_password
        memory > xtest_bcrypt_harden_runtime
        memory > xtest_crypt
        memory > xtest_sha1
        memory > xtest_bad_algorithm
        memory > xtest_pbkdf2
        memory > xtest_scrypt_decode
        memory > xtest_verify
        memory > xtest_argon2_decode
        memory > xtest_harden_runtime
        memory > xtest_low_level_pbkdf2
        memory > xtest_pbkdf2_upgrade_new_hasher
        memory > xtest_argon2_upgrade
        memory > xtest_bcrypt_sha256
        memory > xtest_attributes
        memory > xiterations
        memory > xtest_low_level_pbkdf2_sha1
        memory > xtest_load_library_importerror
        memory > xtest_encode
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xcrypt.write "None: is there a None literal in the EO language?"
              (((unsupported)).apply (((((xcrypt).xcrypt)).apply (""))) ("None: is there a None literal in the EO language?")).if
                xcrypt.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xbcrypt.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xargon2.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xPBKDF2PasswordHasher)))
              xiterations.write 1
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((xPASSWORD_HASHERS)))))
              seq
                xtest_simple.write
                  [xself]
                    memory > xencoded
                    memory > xblank_encoded
                    seq > @
                      seq
                        xencoded.write (((xmake_password)).apply ("lètmein"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xencoded).xstartswith)).apply ("pbkdf2_sha256$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        xblank_encoded.write (((xmake_password)).apply (""))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xblank_encoded).xstartswith)).apply ("pbkdf2_sha256$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                xtest_bytes.write
                  [xself]
                    memory > xencoded
                    seq > @
                      seq
                        xencoded.write (((xmake_password)).apply ("bytes_password"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xencoded).xstartswith)).apply ("pbkdf2_sha256$"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xis_password_usable)).apply ((xencoded)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_password)).apply ("bytes_password") ((xencoded)))) (TRUE))
                xtest_invalid_password.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Password must be a string or bytes, got int."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write (((xmake_password)).apply (1))
                xtest_pbkdf2.write
                  [xself]
                    memory > xblank_encoded
                    memory > xencoded
                    memory > xencoded_strong_salt
                    memory > xhasher
                    memory > xencoded_weak_salt
                    seq > @
                      seq
                        xencoded.write (((xmake_password)).apply ("lètmein") ("seasalt") ("pbkdf2_sha256"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("pbkdf2_sha256$390000$seasalt$8xBlGd3jVgvJ+92hWPxi5ww0uuAuAnKgC45eudxro7c="))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("pbkdf2_sha256"))
                        xblank_encoded.write (((xmake_password)).apply ("") ("seasalt") ("pbkdf2_sha256"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xblank_encoded).xstartswith)).apply ("pbkdf2_sha256$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                        xhasher.write (((xget_hasher)).apply ("pbkdf2_sha256"))
                        xencoded_weak_salt.write (((xmake_password)).apply ("lètmein") ("iodizedsalt") ("pbkdf2_sha256"))
                        xencoded_strong_salt.write (((xmake_password)).apply ("lètmein") (((((xhasher).xsalt)).apply)) ("pbkdf2_sha256"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded_weak_salt)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded_strong_salt)))) (FALSE))
                xtest_sha1.write
                  [xself]
                    memory > xblank_encoded
                    memory > xencoded
                    memory > xencoded_strong_salt
                    memory > xhasher
                    memory > xencoded_weak_salt
                    seq > @
                      (((unsupported)).apply)
                        xencoded.write (((xmake_password)).apply ("lètmein") ("seasalt") ("sha1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("sha1$seasalt$cff36ea83f5706ce9aa7454e63e431fc726b2dc8"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("sha1"))
                        xblank_encoded.write (((xmake_password)).apply ("") ("seasalt") ("sha1"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xblank_encoded).xstartswith)).apply ("sha1$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                        xhasher.write (((xget_hasher)).apply ("sha1"))
                        xencoded_weak_salt.write (((xmake_password)).apply ("lètmein") ("iodizedsalt") ("sha1"))
                        xencoded_strong_salt.write (((xmake_password)).apply ("lètmein") (((((xhasher).xsalt)).apply)) ("sha1"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded_weak_salt)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded_strong_salt)))) (FALSE))
                xtest_md5.write
                  [xself]
                    memory > xblank_encoded
                    memory > xencoded
                    memory > xencoded_strong_salt
                    memory > xhasher
                    memory > xencoded_weak_salt
                    seq > @
                      (((unsupported)).apply)
                        xencoded.write (((xmake_password)).apply ("lètmein") ("seasalt") ("md5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("md5$seasalt$3f86d0d3d465b7b458c231bf3555c0e3"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("md5"))
                        xblank_encoded.write (((xmake_password)).apply ("") ("seasalt") ("md5"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xblank_encoded).xstartswith)).apply ("md5$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                        xhasher.write (((xget_hasher)).apply ("md5"))
                        xencoded_weak_salt.write (((xmake_password)).apply ("lètmein") ("iodizedsalt") ("md5"))
                        xencoded_strong_salt.write (((xmake_password)).apply ("lètmein") (((((xhasher).xsalt)).apply)) ("md5"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded_weak_salt)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded_strong_salt)))) (FALSE))
                xtest_unsalted_md5.write
                  [xself]
                    memory > xencoded
                    memory > xblank_encoded
                    memory > xalt_encoded
                    seq > @
                      (((unsupported)).apply)
                        xencoded.write (((xmake_password)).apply ("lètmein") ("") ("unsalted_md5"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("88a434c88cca4e900f7874cd98123f43"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("unsalted_md5"))
                        xalt_encoded.write ("md5$$%s".mod (xencoded))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xalt_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xalt_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xalt_encoded)))))
                        xblank_encoded.write (((xmake_password)).apply ("") ("") ("unsalted_md5"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                xtest_unsalted_md5_encode_invalid_salt.write
                  [xself]
                    memory > xhasher
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xhasher.write (((xget_hasher)).apply ("unsalted_md5"))
                        xmsg.write "salt must be empty."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply (((xhasher).xencode)) ("password") ("salt"))
                xtest_unsalted_sha1.write
                  [xself]
                    memory > xencoded
                    memory > xblank_encoded
                    memory > xalt_encoded
                    seq > @
                      (((unsupported)).apply)
                        xencoded.write (((xmake_password)).apply ("lètmein") ("") ("unsalted_sha1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("sha1$$6d138ca3ae545631b3abd71a4f076ce759c5700b"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("unsalted_sha1"))
                        xalt_encoded.write (((unsupported)).apply ((xencoded)) ((((unsupported)).apply (6))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmein") ((xalt_encoded)))))
                        xblank_encoded.write (((xmake_password)).apply ("") ("") ("unsalted_sha1"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xblank_encoded).xstartswith)).apply ("sha1$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                xtest_unsalted_sha1_encode_invalid_salt.write
                  [xself]
                    memory > xhasher
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xhasher.write (((xget_hasher)).apply ("unsalted_sha1"))
                        xmsg.write "salt must be empty."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply (((xhasher).xencode)) ("password") ("salt"))
                xtest_crypt.write
                  [xself]
                    memory > xencoded
                    memory > xblank_encoded
                    seq > @
                      (((unsupported)).apply)
                        xencoded.write (((xmake_password)).apply ("lètmei") ("ab") ("crypt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("crypt$$ab1Hv2Lg7ltQo"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmei") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeiz") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("crypt"))
                        xblank_encoded.write (((xmake_password)).apply ("") ("ab") ("crypt"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xblank_encoded).xstartswith)).apply ("crypt$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                xtest_crypt_encode_invalid_salt.write
                  [xself]
                    memory > xhasher
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xhasher.write (((xget_hasher)).apply ("crypt"))
                        xmsg.write "salt must be of length 2."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply (((xhasher).xencode)) ("password") ("a"))
                xtest_crypt_encode_invalid_hash.write
                  [xself]
                    memory > xhasher
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xhasher.write (((xget_hasher)).apply ("crypt"))
                        xmsg.write "hash must be provided."
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("crypt.crypt") ("None: is there a None literal in the EO language?"))))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                            (((unsupported)).apply (((xhasher).xencode)) ("password") ("ab"))
                xtest_bcrypt_sha256.write
                  [xself]
                    memory > xencoded
                    memory > xpassword
                    memory > xblank_encoded
                    seq > @
                      (((unsupported)).apply)
                        xencoded.write (((unsupported)).apply ((xmake_password)) ("lètmein") ("bcrypt_sha256"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xencoded).xstartswith)).apply ("bcrypt_sha256$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("bcrypt_sha256"))
                        xpassword.write "VSK0UYV6FFQVZ0KG88DYN9WADAADZO1CTSIVDJUNZSUML6IBX7LN7ZS3R5JGB3RGZ7VI7G7DJQ9NI8BQFSRPTG6UWTTVESA5ZPUN"
                        xencoded.write (((unsupported)).apply ((xmake_password)) ((xpassword)) ("bcrypt_sha256"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ((xpassword)) ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ((((unsupported)).apply ((xpassword)) ((((unsupported)).apply (72))))) ((xencoded)))))
                        xblank_encoded.write (((unsupported)).apply ((xmake_password)) ("") ("bcrypt_sha256"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xblank_encoded).xstartswith)).apply ("bcrypt_sha256$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                xtest_bcrypt.write
                  [xself]
                    memory > xencoded
                    memory > xblank_encoded
                    seq > @
                      (((unsupported)).apply)
                        xencoded.write (((unsupported)).apply ((xmake_password)) ("lètmein") ("bcrypt"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xencoded).xstartswith)).apply ("bcrypt$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("bcrypt"))
                        xblank_encoded.write (((unsupported)).apply ((xmake_password)) ("") ("bcrypt"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xblank_encoded).xstartswith)).apply ("bcrypt$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                xtest_bcrypt_upgrade.write
                  [xself]
                    memory > xencoded
                    memory > xsetter
                    memory > xrounds
                    memory > xstate
                    memory > xold_rounds
                    memory > xhasher
                    seq > @
                      (((unsupported)).apply)
                        xhasher.write (((xget_hasher)).apply ("bcrypt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("bcrypt") (((xhasher).xalgorithm)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xhasher).xrounds)) (4))
                        xold_rounds.write ((xhasher).xrounds)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xhasher).xrounds)) (4))
                            xencoded.write (((unsupported)).apply ((xmake_password)) ("letmein") ("bcrypt"))
                            xrounds.write (((unsupported)).apply (((((xhasher).xsafe_summary)).apply ((xencoded)))) ("work factor"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrounds)) (4))
                            xstate.write (((unsupported)).apply ("upgraded") (FALSE))
                            xsetter.write
                              [xpassword]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("letmein") ((xencoded)) ((xsetter)) ("bcrypt"))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                            (((unsupported)).apply (((xhasher).xrounds)) ((xold_rounds)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("letmein") ((xencoded)) ((xsetter)) ("bcrypt"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                          (((unsupported)).apply (((xhasher).xrounds)) ((xold_rounds)))
                xtest_bcrypt_harden_runtime.write
                  [xself]
                    memory > xencoded
                    memory > xhasher
                    memory > xexpected_call
                    seq > @
                      (((unsupported)).apply)
                        xhasher.write (((xget_hasher)).apply ("bcrypt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("bcrypt") (((xhasher).xalgorithm)))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xhasher)) ("rounds") (4))))
                          xencoded.write (((unsupported)).apply ((xmake_password)) ("letmein") ("bcrypt"))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xhasher)) ("rounds") (6))) ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xhasher)) ("encode") (((xhasher).xencode)))))
                          seq
                            bogusForceDataize.write ((((xhasher).xharden_runtime)).apply ("wrong_password") ((xencoded)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhasher).xencode).xcall_count)) (3))
                            (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xdata)))) (((((xencoded).xsplit)).apply ("$") (1))))
                            xexpected_call.write (((unsupported)).apply ((((unsupported)).apply ("wrong_password") (((((((unsupported)).apply ((xdata)) ((((unsupported)).apply (29)))).xencode)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhasher).xencode).xcall_args_list)) (((((unsupported)).apply ((xexpected_call))).mul 3)))
                xtest_unusable.write
                  [xself]
                    memory > xencoded
                    seq > @
                      seq
                        xencoded.write (((xmake_password)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xencoded)))) (((((xlen)).apply ((xUNUSABLE_PASSWORD_PREFIX))).add (xUNUSABLE_PASSWORD_SUFFIX_LENGTH))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("None: is there a None literal in the EO language?") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ((xencoded)) ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ((xUNUSABLE_PASSWORD_PREFIX)) ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Unknown password hashing algorith"))))
                          bogusForceDataize.write (((xidentify_hasher)).apply ((xencoded)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xencoded)) ((((xmake_password)).apply ("None: is there a None literal in the EO language?"))) ("Random password collision?"))
                xtest_unspecified_password.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("None: is there a None literal in the EO language?") ((((xmake_password)).apply ("lètmein"))))))
                xtest_bad_algorithm.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Unknown password hashing algorithm '%s'. Did you specify it in the PASSWORD_HASHERS setting?"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) (((xmsg).mod "lolcat")))))
                          (((unsupported)).apply ((xmake_password)) ("lètmein") ("lolcat"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) (((xmsg).mod "lolcat")))))
                          bogusForceDataize.write (((xidentify_hasher)).apply ("lolcat$salt$hash"))
                xtest_is_password_usable.write
                  [xself]
                    memory > xpasswords
                    seq > @
                      seq
                        xpasswords.write (((unsupported)).apply ("lètmein_badencoded") ("") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((xpassword)) ((xpasswords)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xpassword)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xis_password_usable)).apply ((xpassword)))) (TRUE))
                xtest_low_level_pbkdf2.write
                  [xself]
                    memory > xencoded
                    memory > xhasher
                    seq > @
                      seq
                        xhasher.write (((xPBKDF2PasswordHasher)).apply)
                        xencoded.write ((((xhasher).xencode)).apply ("lètmein") ("seasalt2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("pbkdf2_sha256$390000$seasalt2$geC/uZ92nRXDSjSxeoiBqYyRcrLzMm8xK3ro1QS1uo8="))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xhasher).xverify)).apply ("lètmein") ((xencoded)))))
                xtest_low_level_pbkdf2_sha1.write
                  [xself]
                    memory > xencoded
                    memory > xhasher
                    seq > @
                      seq
                        xhasher.write (((xPBKDF2SHA1PasswordHasher)).apply)
                        xencoded.write ((((xhasher).xencode)).apply ("lètmein") ("seasalt2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("pbkdf2_sha1$390000$seasalt2$aDapRanzW8aHTz97v2TcfHzWD+I="))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xhasher).xverify)).apply ("lètmein") ((xencoded)))))
                xtest_bcrypt_salt_check.write
                  [xself]
                    memory > xencoded
                    memory > xhasher
                    seq > @
                      (((unsupported)).apply)
                        xhasher.write (((xBCryptPasswordHasher)).apply)
                        xencoded.write ((((xhasher).xencode)).apply ("lètmein") (((((xhasher).xsalt)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded)))) (FALSE))
                xtest_bcryptsha256_salt_check.write
                  [xself]
                    memory > xencoded
                    memory > xhasher
                    seq > @
                      (((unsupported)).apply)
                        xhasher.write (((xBCryptSHA256PasswordHasher)).apply)
                        xencoded.write ((((xhasher).xencode)).apply ("lètmein") (((((xhasher).xsalt)).apply)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded)))) (FALSE))
                xtest_upgrade.write
                  [xself]
                    memory > xencoded
                    memory > xstate
                    memory > xsetter
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pbkdf2_sha256") (((((xget_hasher)).apply ("default")).xalgorithm)))
                        (((unsupported)).apply ((xalgo)) ((((unsupported)).apply ("sha1") ("md5"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xalgo)))))
                            seq
                              xencoded.write (((unsupported)).apply ((xmake_password)) ("lètmein") ((xalgo)))
                              xstate.write (((unsupported)).apply ("upgraded") (FALSE))
                              xsetter.write
                                [xpassword]
                                  seq > @
                                    (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)) ((xsetter)))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                xtest_no_upgrade.write
                  [xself]
                    memory > xencoded
                    memory > xstate
                    memory > xsetter
                    seq > @
                      seq
                        xencoded.write (((xmake_password)).apply ("lètmein"))
                        xstate.write (((unsupported)).apply ("upgraded") (FALSE))
                        xsetter.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("WRONG") ((xencoded)) ((xsetter)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                xtest_no_upgrade_on_incorrect_pass.write
                  [xself]
                    memory > xencoded
                    memory > xstate
                    memory > xsetter
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pbkdf2_sha256") (((((xget_hasher)).apply ("default")).xalgorithm)))
                        (((unsupported)).apply ((xalgo)) ((((unsupported)).apply ("sha1") ("md5"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xalgo)))))
                            seq
                              xencoded.write (((unsupported)).apply ((xmake_password)) ("lètmein") ((xalgo)))
                              xstate.write (((unsupported)).apply ("upgraded") (FALSE))
                              xsetter.write
                                []
                                  seq > @
                                    (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("WRONG") ((xencoded)) ((xsetter)))))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                xtest_pbkdf2_upgrade.write
                  [xself]
                    memory > xencoded
                    memory > xsetter
                    memory > xhasher
                    memory > xold_iterations
                    memory > xstate
                    seq > @
                      seq
                        xhasher.write (((xget_hasher)).apply ("default"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pbkdf2_sha256") (((xhasher).xalgorithm)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xhasher).xiterations)) (1))
                        xold_iterations.write ((xhasher).xiterations)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xhasher).xiterations)) (1))
                            xencoded.write (((xmake_password)).apply ("letmein"))
                            (((unsupported)).apply ((((unsupported)).apply ((xalgo)) ((xiterations)) ((xsalt)) ((xhash)))) (((((xencoded).xsplit)).apply ("$") (3))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xiterations)) ("1"))
                            xstate.write (((unsupported)).apply ("upgraded") (FALSE))
                            xsetter.write
                              [xpassword]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("letmein") ((xencoded)) ((xsetter)))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                            (((unsupported)).apply (((xhasher).xiterations)) ((xold_iterations)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("letmein") ((xencoded)) ((xsetter)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                          (((unsupported)).apply (((xhasher).xiterations)) ((xold_iterations)))
                xtest_pbkdf2_harden_runtime.write
                  [xself]
                    memory > xencoded
                    memory > xhasher
                    memory > xexpected_call
                    seq > @
                      seq
                        xhasher.write (((xget_hasher)).apply ("default"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pbkdf2_sha256") (((xhasher).xalgorithm)))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xhasher)) ("iterations") (1))))
                          xencoded.write (((xmake_password)).apply ("letmein"))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xhasher)) ("iterations") (6))) ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xhasher)) ("encode") (((xhasher).xencode)))))
                          seq
                            bogusForceDataize.write ((((xhasher).xharden_runtime)).apply ("wrong_password") ((xencoded)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhasher).xencode).xcall_count)) (1))
                            (((unsupported)).apply ((((unsupported)).apply ((xalgorithm)) ((xiterations)) ((xsalt)) ((xhash)))) (((((xencoded).xsplit)).apply ("$") (3))))
                            xexpected_call.write (((unsupported)).apply ((((unsupported)).apply ("wrong_password") ((xsalt)) (5))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhasher).xencode).xcall_args)) ((xexpected_call)))
                xtest_pbkdf2_upgrade_new_hasher.write
                  [xself]
                    memory > xencoded
                    memory > xstate
                    memory > xhasher
                    memory > xsetter
                    seq > @
                      seq
                        xhasher.write (((xget_hasher)).apply ("default"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("pbkdf2_sha256") (((xhasher).xalgorithm)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xhasher).xiterations)) (1))
                        xstate.write (((unsupported)).apply ("upgraded") (FALSE))
                        xsetter.write
                          [xpassword]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ("auth_tests.test_hashers.PBKDF2SingleIterationHasher"))))))
                          seq
                            xencoded.write (((xmake_password)).apply ("letmein"))
                            (((unsupported)).apply ((((unsupported)).apply ((xalgo)) ((xiterations)) ((xsalt)) ((xhash)))) (((((xencoded).xsplit)).apply ("$") (3))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xiterations)) ("1"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("letmein") ((xencoded)) ((xsetter)))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ("django.contrib.auth.hashers.PBKDF2PasswordHasher") ("auth_tests.test_hashers.PBKDF2SingleIterationHasher"))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("letmein") ((xencoded)) ((xsetter)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                xtest_check_password_calls_harden_runtime.write
                  [xself]
                    memory > xencoded
                    memory > xhasher
                    seq > @
                      seq
                        xhasher.write (((xget_hasher)).apply ("default"))
                        xencoded.write (((xmake_password)).apply ("letmein"))
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xhasher)) ("harden_runtime"))) ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xhasher)) ("must_update") (TRUE))))
                          seq
                            bogusForceDataize.write (((xcheck_password)).apply ("letmein") ((xencoded)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhasher).xharden_runtime).xcall_count)) (0))
                            bogusForceDataize.write (((xcheck_password)).apply ("wrong_password") ((xencoded)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhasher).xharden_runtime).xcall_count)) (1))
                xtest_encode_invalid_salt.write
                  [xself]
                    memory > xhasher_classes
                    memory > xhasher
                    memory > xmsg
                    seq > @
                      seq
                        xhasher_classes.write (((unsupported)).apply ((xMD5PasswordHasher)) ((xPBKDF2PasswordHasher)) ((xPBKDF2SHA1PasswordHasher)) ((xScryptPasswordHasher)) ((xSHA1PasswordHasher)))
                        xmsg.write "salt must be provided and cannot contain $."
                        (((unsupported)).apply ((xhasher_class)) ((xhasher_classes)))
                          seq
                            xhasher.write (((xhasher_class)).apply)
                            (((unsupported)).apply ((xsalt)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("") ("sea$salt"))))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) (((xhasher_class).x__name__)) ((xsalt)))))
                                (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                                  bogusForceDataize.write ((((xhasher).xencode)).apply ("password") ((xsalt)))
                xtest_encode_password_required.write
                  [xself]
                    memory > xhasher_classes
                    memory > xhasher
                    memory > xmsg
                    seq > @
                      seq
                        xhasher_classes.write (((unsupported)).apply ((xMD5PasswordHasher)) ((xPBKDF2PasswordHasher)) ((xPBKDF2SHA1PasswordHasher)) ((xScryptPasswordHasher)) ((xSHA1PasswordHasher)))
                        xmsg.write "password must be provided."
                        (((unsupported)).apply ((xhasher_class)) ((xhasher_classes)))
                          seq
                            xhasher.write (((xhasher_class)).apply)
                            (((unsupported)).apply (((((xself).xsubTest)).apply (((xhasher_class).x__name__)))))
                              (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                                bogusForceDataize.write ((((xhasher).xencode)).apply ("None: is there a None literal in the EO language?") ("seasalt"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xnot_implemented_msg.write "subclasses of BasePasswordHasher must provide %s() method"
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xhasher)) ((((xBasePasswordHasher)).apply)))
                xtest_load_library_no_algorithm.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Hasher 'BasePasswordHasher' doesn't specify a library attribute"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xhasher).x_load_library)).apply)
                xtest_load_library_importerror.write
                  [xself]
                    memory > xmsg
                    memory > xPlainHasher
                    seq > @
                      seq
                        xPlainHasher.write (((xtype)).apply ("PlainHasher") ((((unsupported)).apply ((xBasePasswordHasher)))) ((((unsupported)).apply ("algorithm") ("plain") ("library") ("plain"))))
                        xmsg.write "Couldn't load 'PlainHasher' algorithm library: No module named 'plain'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          bogusForceDataize.write ((((((xPlainHasher)).apply).x_load_library)).apply)
                xtest_attributes.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xself).xhasher).xalgorithm)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xself).xhasher).xlibrary)))
                xtest_encode.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((xself).xnot_implemented_msg).mod "an encode")
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xhasher).xencode)).apply ("password") ("salt"))
                xtest_decode.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((xself).xnot_implemented_msg).mod "a decode")
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xhasher).xdecode)).apply ("encoded"))
                xtest_harden_runtime.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "subclasses of BasePasswordHasher should provide a harden_runtime() method"
                        (((unsupported)).apply (((((xself).xassertWarnsMessage)).apply ((xWarning)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xhasher).xharden_runtime)).apply ("password") ("encoded"))
                xtest_must_update.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xhasher).xmust_update)).apply ("encoded"))) (FALSE))
                xtest_safe_summary.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((xself).xnot_implemented_msg).mod "a safe_summary")
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xhasher).xsafe_summary)).apply ("encoded"))
                xtest_verify.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write (((xself).xnot_implemented_msg).mod "a verify")
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotImplementedError)) ((xmsg)))))
                          bogusForceDataize.write (((((xself).xhasher).xverify)).apply ("password") ("encoded"))
            (((unsupported)).apply ((xSimpleTestCase)) ((((xskipUnless)).apply ((xargon2)) ("argon2-cffi not installed"))) ((((unsupported)).apply ((xoverride_settings)) ((xPASSWORD_HASHERS)))))
              seq
                xtest_argon2.write
                  [xself]
                    memory > xblank_encoded
                    memory > xencoded
                    memory > xencoded_strong_salt
                    memory > xhasher
                    memory > xencoded_weak_salt
                    seq > @
                      seq
                        xencoded.write (((unsupported)).apply ((xmake_password)) ("lètmein") ("argon2"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xencoded).xstartswith)).apply ("argon2$argon2id$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("argon2"))
                        xblank_encoded.write (((unsupported)).apply ((xmake_password)) ("") ("argon2"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xblank_encoded).xstartswith)).apply ("argon2$argon2id$"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_password_usable)).apply ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))))
                        xencoded.write "argon2$argon2i$m=8,t=1,p=1$c29tZXNhbHQ$gwQOXSNhxiOxPOA0+PY10P9QFO4NAYysnqRt1GSQLE55m+2GYDt9FEjPMHhP2Cuf0nOEXXMocVrsJAtNSsKyfg"
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("secret") ((xencoded)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcheck_password)).apply ("wrong") ((xencoded)))))
                        xencoded.write "argon2$argon2i$v=19$m=8,t=1,p=1$c2FsdHNhbHQ$YC9+jJCrQhs5R6db7LlN8Q"
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_password)).apply ("secret") ((xencoded)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_password)).apply ("wrong") ((xencoded)))) (FALSE))
                        xhasher.write (((xget_hasher)).apply ("argon2"))
                        xencoded_weak_salt.write (((xmake_password)).apply ("lètmein") ("iodizedsalt") ("argon2"))
                        xencoded_strong_salt.write (((xmake_password)).apply ("lètmein") (((((xhasher).xsalt)).apply)) ("argon2"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded_weak_salt)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xhasher).xmust_update)).apply ((xencoded_strong_salt)))) (FALSE))
                xtest_argon2_decode.write
                  [xself]
                    memory > xencoded
                    memory > xsalt
                    memory > xhasher
                    memory > xdecoded
                    seq > @
                      seq
                        xsalt.write "abcdefghijk"
                        xencoded.write (((unsupported)).apply ((xmake_password)) ("lètmein") ((xsalt)) ("argon2"))
                        xhasher.write (((xget_hasher)).apply ("argon2"))
                        xdecoded.write ((((xhasher).xdecode)).apply ((xencoded)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdecoded)) ("memory_cost"))) (((xhasher).xmemory_cost)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdecoded)) ("parallelism"))) (((xhasher).xparallelism)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdecoded)) ("salt"))) ((xsalt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdecoded)) ("time_cost"))) (((xhasher).xtime_cost)))
                xtest_argon2_upgrade.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).x_test_argon2_upgrade)).apply ("time_cost") ("time cost") (1))
                        bogusForceDataize.write ((((xself).x_test_argon2_upgrade)).apply ("memory_cost") ("memory cost") (64))
                        bogusForceDataize.write ((((xself).x_test_argon2_upgrade)).apply ("parallelism") ("parallelism") (1))
                xtest_argon2_version_upgrade.write
                  [xself]
                    memory > xencoded
                    memory > xsetter
                    memory > xold_m
                    memory > xold_t
                    memory > xhasher
                    memory > xold_p
                    memory > xstate
                    seq > @
                      seq
                        xhasher.write (((xget_hasher)).apply ("argon2"))
                        xstate.write (((unsupported)).apply ("upgraded") (FALSE))
                        xencoded.write "argon2$argon2id$v=19$m=102400,t=2,p=8$Y041dExhNkljRUUy$TMa6A8fPJhCAUXRhJXCXdw"
                        xsetter.write
                          [xpassword]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                        xold_m.write ((xhasher).xmemory_cost)
                        xold_t.write ((xhasher).xtime_cost)
                        xold_p.write ((xhasher).xparallelism)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xhasher).xmemory_cost)) (8))
                            (((unsupported)).apply (((xhasher).xtime_cost)) (1))
                            (((unsupported)).apply (((xhasher).xparallelism)) (1))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("secret") ((xencoded)) ((xsetter)) ("argon2"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                          seq
                            (((unsupported)).apply (((xhasher).xmemory_cost)) ((xold_m)))
                            (((unsupported)).apply (((xhasher).xtime_cost)) ((xold_t)))
                            (((unsupported)).apply (((xhasher).xparallelism)) ((xold_p)))
                x_test_argon2_upgrade.write
                  [xself xattr xsummary_key xnew_value]
                    memory > xencoded
                    memory > xsetter
                    memory > xhasher
                    memory > xattr_value
                    memory > xold_value
                    memory > xstate
                    seq > @
                      seq
                        xhasher.write (((xget_hasher)).apply ("argon2"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("argon2") (((xhasher).xalgorithm)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xgetattr)).apply ((xhasher)) ((xattr)))) ((xnew_value)))
                        xold_value.write (((xgetattr)).apply ((xhasher)) ((xattr)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write (((xsetattr)).apply ((xhasher)) ((xattr)) ((xnew_value)))
                            xencoded.write (((unsupported)).apply ((xmake_password)) ("letmein") ("argon2"))
                            xattr_value.write (((unsupported)).apply (((((xhasher).xsafe_summary)).apply ((xencoded)))) ((xsummary_key)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xattr_value)) ((xnew_value)))
                            xstate.write (((unsupported)).apply ("upgraded") (FALSE))
                            xsetter.write
                              [xpassword]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("letmein") ((xencoded)) ((xsetter)) ("argon2"))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                            bogusForceDataize.write (((xsetattr)).apply ((xhasher)) ((xattr)) ((xold_value)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcheck_password)).apply ("letmein") ((xencoded)) ((xsetter)) ("argon2"))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))))
                          bogusForceDataize.write (((xsetattr)).apply ((xhasher)) ((xattr)) ((xold_value)))
            (((unsupported)).apply ((xSimpleTestCase)) ((((unsupported)).apply ((xoverride_settings)) ((xPASSWORD_HASHERS)))))
              seq
                xtest_scrypt.write
                  [xself]
                    memory > xencoded
                    memory > xblank_encoded
                    seq > @
                      seq
                        xencoded.write (((xmake_password)).apply ("lètmein") ("seasalt") ("scrypt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("scrypt$16384$seasalt$8$1$Qj3+9PPyRjSJIebHnG81TMjsqtaIGxNQG/aEB/NYafTJ7tibgfYz71m0ldQESkXFRkdVCBhhY8mx7rQwite/Pw=="))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xis_password_usable)).apply ((xencoded)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_password)).apply ("lètmeinz") ((xencoded)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xidentify_hasher)).apply ((xencoded))).xalgorithm)) ("scrypt"))
                        xblank_encoded.write (((xmake_password)).apply ("") ("seasalt") ("scrypt"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xblank_encoded).xstartswith)).apply ("scrypt$"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xis_password_usable)).apply ((xblank_encoded)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_password)).apply ("") ((xblank_encoded)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_password)).apply (" ") ((xblank_encoded)))) (FALSE))
                xtest_scrypt_decode.write
                  [xself]
                    memory > xencoded
                    memory > xhasher
                    memory > xtests
                    memory > xdecoded
                    seq > @
                      seq
                        xencoded.write (((xmake_password)).apply ("lètmein") ("seasalt") ("scrypt"))
                        xhasher.write (((xget_hasher)).apply ("scrypt"))
                        xdecoded.write ((((xhasher).xdecode)).apply ((xencoded)))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("block_size") (((xhasher).xblock_size)))) ((((unsupported)).apply ("parallelism") (((xhasher).xparallelism)))) ((((unsupported)).apply ("salt") ("seasalt"))) ((((unsupported)).apply ("work_factor") (((xhasher).xwork_factor)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xexcepted)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xkey)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdecoded)) ((xkey)))) ((xexcepted)))
                x_test_scrypt_upgrade.write
                  [xself xattr xsummary_key xnew_value]
                    memory > xencoded
                    memory > xsetter
                    memory > xhasher
                    memory > xattr_value
                    memory > xold_value
                    memory > xstate
                    seq > @
                      seq
                        xhasher.write (((xget_hasher)).apply ("scrypt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhasher).xalgorithm)) ("scrypt"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xgetattr)).apply ((xhasher)) ((xattr)))) ((xnew_value)))
                        xold_value.write (((xgetattr)).apply ((xhasher)) ((xattr)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write (((xsetattr)).apply ((xhasher)) ((xattr)) ((xnew_value)))
                            xencoded.write (((xmake_password)).apply ("lètmein") ("seasalt") ("scrypt"))
                            xattr_value.write (((unsupported)).apply (((((xhasher).xsafe_summary)).apply ((xencoded)))) ((xsummary_key)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xattr_value)) ((xnew_value)))
                            xstate.write (((unsupported)).apply ("upgraded") (FALSE))
                            xsetter.write
                              [xpassword]
                                seq > @
                                  (((unsupported)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)) ((xsetter)) ("scrypt"))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (FALSE))
                            bogusForceDataize.write (((xsetattr)).apply ((xhasher)) ((xattr)) ((xold_value)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((xcheck_password)).apply ("lètmein") ((xencoded)) ((xsetter)) ("scrypt"))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xstate)) ("upgraded"))) (TRUE))
                          bogusForceDataize.write (((xsetattr)).apply ((xhasher)) ((xattr)) ((xold_value)))
                xtest_scrypt_upgrade.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("work_factor") ("work factor") ((((unsupported)).apply (2) (11))))) ((((unsupported)).apply ("block_size") ("block size") (10))) ((((unsupported)).apply ("parallelism") ("parallelism") (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xattr)) ((xsummary_key)) ((xnew_value)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xattr)))))
                            bogusForceDataize.write ((((xself).x_test_scrypt_upgrade)).apply ((xattr)) ((xsummary_key)) ((xnew_value)))