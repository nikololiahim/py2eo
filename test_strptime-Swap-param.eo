memory > xposition
memory > xValueError
memory > xfrac
memory > xrange
memory > xtup
memory > x_
memory > xerr
memory > xbad_format
memory > xi
memory > xsupport
memory > xbounds
memory > xe
memory > xunittest
memory > xoffset
memory > xlen
memory > x__name__
memory > xyear_week_format
memory > xdatetime
memory > xexpected
memory > xfrozenset
memory > xstr
memory > xbound
memory > xweekday_format
memory > xKeyError
memory > x_strptime
memory > xdirective
memory > xw
memory > xint
memory > xre
memory > xException
memory > xtime
memory > xlocale
memory > xcentury
memory > xoffset_fraction
memory > xos
[] > test_strptime
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_defaults
        memory > xtest_TimeRE_recreation_locale
        memory > xtest_unconverteddata
        memory > xtest_percent
        memory > xtest_feb29_on_leap_year_without_year
        memory > xtest_date_time
        memory > xsetUp
        memory > xtest_matching_with_escapes
        memory > xtest_fraction
        memory > xtest_week_of_year_and_day_of_week_calculation
        memory > xtest_timezone
        memory > xtest_caseinsensitive
        memory > xtest_week_0
        memory > xtest_month
        memory > xtest_ValueError
        memory > x_ymd_excluded
        memory > xtest_julian_calculation
        memory > xtest_time_re_recreation
        memory > xtest_all_julian_days
        memory > xtest_escaping
        memory > xtest_strptime_exception_context
        memory > xtest_hour
        memory > xtest_second
        memory > xtest_mar1_comes_after_feb29_even_when_omitting_the_year
        memory > xtest_weekday
        memory > xtest_bad_offset
        memory > xhelper
        memory > xtest_pattern_escaping
        memory > xtest_pattern
        memory > xtest_blankpattern
        memory > xtest_date
        memory > xtest_compile
        memory > xtest_TimeRE_recreation_timezone
        memory > xtest_am_pm
        memory > xtest_basic
        memory > xtest_locale_data_w_regex_metacharacters
        memory > xdatetime_date
        memory > xtest_regex_cleanup
        memory > xtest_new_localetime
        memory > xtest_whitespace_substitution
        memory > x_formats_excluded
        memory > xtest_gregorian_calculation
        memory > xtest_year
        memory > xtest_lang
        memory > xtest_offset
        memory > xcompare_against_time
        memory > xtest_day
        memory > xtest_bad_timezone
        memory > xtest_day_of_week_calculation
        memory > xtest_minute
        memory > xtest_time
        memory > xtest_julian
        memory > xtest_twelve_noon_midnight
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_basic.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((x_strptime).x_getlang)).apply)) (((((xlocale).xgetlocale)).apply (((xlocale).xLC_TIME)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xtime_tuple)) (((((xtime).xlocaltime)).apply)))
                        (((unsupported)).apply (((xself).xLT_ins)) (((((x_strptime).xLocaleTime)).apply)))
                xcompare_against_time.write
                  [xself xtesting xdirective xtuple_position xerror_msg]
                    memory > xstrftime_output
                    memory > xcomparison
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xstrftime_output.write (((((((xtime).xstrftime)).apply ((xdirective)) (((xself).xtime_tuple))).xlower)).apply)
                        xcomparison.write (((unsupported)).apply ((xtesting)) ((((unsupported)).apply (((xself).xtime_tuple)) ((xtuple_position)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xstrftime_output)) ((xtesting)) (("%s: not found in tuple".mod (xerror_msg))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcomparison)) ((xstrftime_output)) (("%s: position within tuple incorrect; %s != %s".mod (((unsupported)).apply ((xerror_msg)) ((xcomparison)) ((xstrftime_output))))))
                xtest_weekday.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcompare_against_time)).apply ((((xself).xLT_ins).xf_weekday)) ("%A") (6) ("Testing of full weekday name failed"))
                        bogusForceDataize.write ((((xself).xcompare_against_time)).apply ((((xself).xLT_ins).xa_weekday)) ("%a") (6) ("Testing of abbreviated weekday name failed"))
                xtest_month.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xcompare_against_time)).apply ((((xself).xLT_ins).xf_month)) ("%B") (1) ("Testing against full month name failed"))
                        bogusForceDataize.write ((((xself).xcompare_against_time)).apply ((((xself).xLT_ins).xa_month)) ("%b") (1) ("Testing against abbreviated month name failed"))
                xtest_am_pm.write
                  [xself]
                    memory > xposition
                    memory > xstrftime_output
                    seq > @
                      seq
                        xstrftime_output.write (((((((xtime).xstrftime)).apply ("%p") (((xself).xtime_tuple))).xlower)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xstrftime_output)) ((((xself).xLT_ins).xam_pm)) ("AM/PM representation not in tuple"))
                        ((((unsupported)).apply (((xself).xtime_tuple)) (3)).less 12).if
                          xposition.write 0
                          xposition.write 1
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xLT_ins).xam_pm)) ((xposition)))) ((xstrftime_output)) ("AM/PM representation in the wrong position within the tuple"))
                xtest_timezone.write
                  [xself]
                    memory > xtimezone
                    seq > @
                      seq
                        xtimezone.write (((((((xtime).xstrftime)).apply ("%Z") (((xself).xtime_tuple))).xlower)).apply)
                        (xtimezone).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xtimezone)) ((((unsupported)).apply ((((xself).xLT_ins).xtimezone)) (0)))).or (((unsupported)).apply ((xtimezone)) ((((unsupported)).apply ((((xself).xLT_ins).xtimezone)) (1)))))) (("timezone %s not found in %s".mod (((unsupported)).apply ((xtimezone)) ((((xself).xLT_ins).xtimezone))))))
                xtest_date_time.write
                  [xself]
                    memory > xLT
                    memory > xmagic_date
                    memory > xstrftime_output
                    seq > @
                      seq
                        xmagic_date.write (((unsupported)).apply (1999) (3) (17) (22) (44) (55) (2) (76) (0))
                        xstrftime_output.write ((((xtime).xstrftime)).apply ("%c") ((xmagic_date)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xstrftime)).apply ((((xself).xLT_ins).xLC_date_time)) ((xmagic_date)))) ((xstrftime_output)) ("LC_date_time incorrect"))
                        xstrftime_output.write ((((xtime).xstrftime)).apply ("%x") ((xmagic_date)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xstrftime)).apply ((((xself).xLT_ins).xLC_date)) ((xmagic_date)))) ((xstrftime_output)) ("LC_date incorrect"))
                        xstrftime_output.write ((((xtime).xstrftime)).apply ("%X") ((xmagic_date)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xstrftime)).apply ((((xself).xLT_ins).xLC_time)) ((xmagic_date)))) ((xstrftime_output)) ("LC_time incorrect"))
                        xLT.write ((((x_strptime).xLocaleTime)).apply)
                        (((unsupported)).apply (((xLT).xam_pm)) ((((unsupported)).apply ("") (""))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xLT).xLC_time)) ("LocaleTime's LC directives cannot handle empty strings"))
                xtest_lang.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xLT_ins).xlang)) (((((x_strptime).x_getlang)).apply)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xtime_re)) (((((x_strptime).xTimeRE)).apply)))
                        (((unsupported)).apply (((xself).xlocale_time)) (((((x_strptime).xLocaleTime)).apply)))
                xtest_pattern.write
                  [xself]
                    memory > xpattern_string
                    seq > @
                      seq
                        xpattern_string.write (((((xself).xtime_re).xpattern)).apply ("%a %A %d"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xpattern_string).xfind)).apply ((((unsupported)).apply ((((xself).xlocale_time).xa_weekday)) (2)))).neq (1.neg))) (("did not find abbreviated weekday in pattern string '%s'".mod (xpattern_string))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xpattern_string).xfind)).apply ((((unsupported)).apply ((((xself).xlocale_time).xf_weekday)) (4)))).neq (1.neg))) (("did not find full weekday in pattern string '%s'".mod (xpattern_string))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xpattern_string).xfind)).apply ((((unsupported)).apply (((xself).xtime_re)) ("d")))).neq (1.neg))) (("did not find 'd' directive pattern string '%s'".mod (xpattern_string))))
                xtest_pattern_escaping.write
                  [xself]
                    memory > xpattern_string
                    seq > @
                      seq
                        xpattern_string.write (((((xself).xtime_re).xpattern)).apply ("d+"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply)) ((xpattern_string)) (("%s does not have re characters escaped properly".mod (xpattern_string))))
                xtest_compile.write
                  [xself]
                    memory > xcompiled
                    memory > xfound
                    seq > @
                      (((unsupported)).apply)
                        xfound.write ((((((((xself).xtime_re).xcompile)).apply ("%A")).xmatch)).apply ((((unsupported)).apply ((((xself).xlocale_time).xf_weekday)) (6))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xfound).and (((((xfound).xgroup)).apply ("A")).eq (((unsupported)).apply ((((xself).xlocale_time).xf_weekday)) (6))))) ("re object for '%A' failed"))
                        xcompiled.write (((((xself).xtime_re).xcompile)).apply ("%a %b"))
                        xfound.write ((((xcompiled).xmatch)).apply (("%s %s".mod (((unsupported)).apply ((((unsupported)).apply ((((xself).xlocale_time).xa_weekday)) (4))) ((((unsupported)).apply ((((xself).xlocale_time).xa_month)) (4)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xfound)) (("Match failed with '%s' regex and '%s' string".mod (((unsupported)).apply (((xcompiled).xpattern)) (("%s %s".mod (((unsupported)).apply ((((unsupported)).apply ((((xself).xlocale_time).xa_weekday)) (4))) ((((unsupported)).apply ((((xself).xlocale_time).xa_month)) (4))))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xfound).xgroup)).apply ("a")).eq (((unsupported)).apply ((((xself).xlocale_time).xa_weekday)) (4))).and (((((xfound).xgroup)).apply ("b")).eq (((unsupported)).apply ((((xself).xlocale_time).xa_month)) (4))))) (("re object couldn't find the abbreviated weekday month in '%s' using '%s'; group 'a' = '%s', group 'b' = %s'".mod (((unsupported)).apply (((xfound).xstring)) ((((xfound).xre).xpattern)) (((((xfound).xgroup)).apply ("a"))) (((((xfound).xgroup)).apply ("b")))))))
                        (((unsupported)).apply ((xdirective)) ((((unsupported)).apply ("a") ("A") ("b") ("B") ("c") ("d") ("G") ("H") ("I") ("j") ("m") ("M") ("p") ("S") ("u") ("U") ("V") ("w") ("W") ("x") ("X") ("y") ("Y") ("Z") ("%"))))
                          seq
                            xcompiled.write (((((xself).xtime_re).xcompile)).apply (("%".add (xdirective))))
                            xfound.write ((((xcompiled).xmatch)).apply (((((xtime).xstrftime)).apply (("%".add (xdirective))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xfound)) (("Matching failed on '%s' using '%s' regex".mod (((unsupported)).apply (((((xtime).xstrftime)).apply (("%".add (xdirective))))) (((xcompiled).xpattern))))))
                xtest_blankpattern.write
                  [xself]
                    memory > xtest_locale
                    seq > @
                      seq
                        xtest_locale.write ((((x_strptime).xLocaleTime)).apply)
                        (((unsupported)).apply (((xtest_locale).xtimezone)) ((((unsupported)).apply ((((xfrozenset)).apply)) ((((xfrozenset)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((x_strptime).xTimeRE)).apply ((xtest_locale))).xpattern)).apply ("%Z"))) ("") ("with timezone == ('',''), TimeRE().pattern('%Z') != ''"))
                xtest_matching_with_escapes.write
                  [xself]
                    memory > xcompiled_re
                    memory > xfound
                    seq > @
                      seq
                        xcompiled_re.write (((((xself).xtime_re).xcompile)).apply ("w+ %m"))
                        xfound.write ((((xcompiled_re).xmatch)).apply ("w+ 10"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xfound)) ("Escaping failed of format 'w+ 10'"))
                xtest_locale_data_w_regex_metacharacters.write
                  [xself]
                    memory > xlocale_time
                    memory > xtime_re
                    seq > @
                      seq
                        xlocale_time.write ((((x_strptime).xLocaleTime)).apply)
                        (((unsupported)).apply (((xlocale_time).xtimezone)) ((((unsupported)).apply ((((xfrozenset)).apply ((((unsupported)).apply ("utc") ("gmt") ("Tokyo (standard time)"))))) ((((xfrozenset)).apply ("Tokyo (daylight time)"))))))
                        xtime_re.write ((((x_strptime).xTimeRE)).apply ((xlocale_time)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xtime_re).xcompile)).apply ("%Z")).xmatch)).apply ("Tokyo (standard time)"))) ("locale data that contains regex metacharacters is not properly escaped"))
                xtest_whitespace_substitution.write
                  [xself]
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write (((((xself).xtime_re).xpattern)).apply ("%j %H"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xre).xmatch)).apply ((xpattern)) ("180"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xre).xmatch)).apply ((xpattern)) ("18 0"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xtime_tuple)) (((((xtime).xgmtime)).apply)))
                xtest_ValueError.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((x_strptime).x_strptime_time)) ("%d") ("%A"))
                        (((unsupported)).apply ((xbad_format)) ((((unsupported)).apply ("%") ("% ") ("%e"))))
                          (((unsupported)).apply ((xValueError)) ((xException)))
                            bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("2005") ((xbad_format)))
                            (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xfail)).apply (("'%s' raised %s, not ValueError".mod (((unsupported)).apply ((xbad_format)) ((((xerr).x__class__).x__name__))))))
                            bogusForceDataize.write ((((xself).xfail)).apply (("'%s' did not raise ValueError".mod (xbad_format))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("1999 50") ("%Y %V"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("1999 51") ("%G %V"))
                        (((unsupported)).apply ((xw)) ((((unsupported)).apply ("A") ("a") ("w") ("u"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("1999 51") (((("%G %{}".xformat)).apply ((xw)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("2015") ("%G"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("1999 256") ("%G %j"))
                xtest_strptime_exception_context.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xe)))
                          bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("") ("%D"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xe).xexception).x__suppress_context__)) (TRUE))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xe)))
                          bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("19") ("%Y %"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xe).xexception).x__suppress_context__)) (TRUE))
                xtest_unconverteddata.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((x_strptime).x_strptime_time)) ("10 12") ("%m"))
                xhelper.write
                  [xself xdirective xposition]
                    memory > xstrp_output
                    memory > xstrf_output
                    seq > @
                      seq
                        unsupported
                        xstrf_output.write ((((xtime).xstrftime)).apply (("%".add (xdirective))) (((xself).xtime_tuple)))
                        xstrp_output.write ((((x_strptime).x_strptime_time)).apply ((xstrf_output)) (("%".add (xdirective))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xstrp_output)) ((xposition))).eq (((unsupported)).apply (((xself).xtime_tuple)) ((xposition))))) (("testing of '%s' directive failed; '%s' -> %s != %s".mod (((unsupported)).apply ((xdirective)) ((xstrf_output)) ((((unsupported)).apply ((xstrp_output)) ((xposition)))) ((((unsupported)).apply (((xself).xtime_tuple)) ((xposition))))))))
                xtest_year.write
                  [xself]
                    memory > xstrp_output
                    memory > xexpected_result
                    seq > @
                      seq
                        (((unsupported)).apply ((xdirective)) ((((unsupported)).apply ("y") ("Y"))))
                          bogusForceDataize.write ((((xself).xhelper)).apply ((xdirective)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xcentury)) ((xbounds)))) ((((unsupported)).apply ((((unsupported)).apply (1900) ((((unsupported)).apply ("69") ("99"))))) ((((unsupported)).apply (2000) ((((unsupported)).apply ("00") ("68"))))))))
                          (((unsupported)).apply ((xbound)) ((xbounds)))
                            seq
                              xstrp_output.write ((((x_strptime).x_strptime_time)).apply ((xbound)) ("%y"))
                              xexpected_result.write ((xcentury).add (((xint)).apply ((xbound))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xstrp_output)) (0)).eq (xexpected_result))) (("'y' test failed; passed in '%s' and returned '%s'".mod (((unsupported)).apply ((xbound)) ((((unsupported)).apply ((xstrp_output)) (0)))))))
                xtest_month.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xdirective)) ((((unsupported)).apply ("B") ("b") ("m"))))
                        bogusForceDataize.write ((((xself).xhelper)).apply ((xdirective)) (1))
                xtest_day.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xhelper)).apply ("d") (2))
                xtest_hour.write
                  [xself]
                    memory > xstrp_output
                    memory > xstrf_output
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xhelper)).apply ("H") (3))
                        xstrf_output.write ((((xtime).xstrftime)).apply ("%I %p") (((xself).xtime_tuple)))
                        xstrp_output.write ((((x_strptime).x_strptime_time)).apply ((xstrf_output)) ("%I %p"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xstrp_output)) (3)).eq (((unsupported)).apply (((xself).xtime_tuple)) (3)))) (("testing of '%%I %%p' directive failed; '%s' -> %s != %s".mod (((unsupported)).apply ((xstrf_output)) ((((unsupported)).apply ((xstrp_output)) (3))) ((((unsupported)).apply (((xself).xtime_tuple)) (3)))))))
                xtest_minute.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xhelper)).apply ("M") (4))
                xtest_second.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xhelper)).apply ("S") (5))
                xtest_fraction.write
                  [xself]
                    memory > xd
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xd.write ((((xdatetime).xdatetime)).apply (2012) (12) (20) (12) (34) (56) (78987))
                        (((unsupported)).apply ((((unsupported)).apply ((xtup)) ((xfrac)) ((x_)))) ((((unsupported)).apply (((x_strptime).x_strptime)) ((((xstr)).apply ((xd)))) ("%Y-%m-%d %H:%M:%S.%f"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfrac)) (((xd).xmicrosecond)))
                xtest_weekday.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xdirective)) ((((unsupported)).apply ("A") ("a") ("w") ("u"))))
                        bogusForceDataize.write ((((xself).xhelper)).apply ((xdirective)) (6))
                xtest_julian.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xhelper)).apply ("j") (7))
                xtest_offset.write
                  [xself]
                    memory > xhalf_hour
                    memory > xhalf_minute
                    memory > xone_hour
                    seq > @
                      seq
                        xone_hour.write (60.mul 60)
                        xhalf_hour.write (30.mul 60)
                        xhalf_minute.write 30
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("+0130") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) (((xone_hour).add (xhalf_hour))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("-0100") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) (((xone_hour).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("-013030") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) (((((xone_hour).add (xhalf_hour)).add (xhalf_minute)).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("-013030.000001") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) (((((xone_hour).add (xhalf_hour)).add (xhalf_minute)).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) ((1.neg)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("+01:00") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) ((xone_hour)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("-01:30") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) ((((xone_hour).add (xhalf_hour)).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("-01:30:30") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) (((((xone_hour).add (xhalf_hour)).add (xhalf_minute)).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("-01:30:30.000001") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) (((((xone_hour).add (xhalf_hour)).add (xhalf_minute)).neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) ((1.neg)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("+01:30:30.001") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) ((((xone_hour).add (xhalf_hour)).add (xhalf_minute))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) (1000))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xoffset)))) ((x_)) ((xoffset_fraction)))) (((((x_strptime).x_strptime)).apply ("Z") ("%z"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoffset_fraction)) (0))
                xtest_bad_offset.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("-01:30:30.") ("%z"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("-0130:30") ("%z"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("-01:30:30.1234567") ("%z"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("-01:30:30:123456") ("%z"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xerr)))
                          bogusForceDataize.write ((((x_strptime).x_strptime)).apply ("-01:3030") ("%z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Inconsistent use of : in -01:3030") ((((xstr)).apply (((xerr).xexception)))))
                xtest_timezone.write
                  [xself]
                    memory > xstrp_output
                    memory > xstrf_output
                    memory > xtime_tuple
                    memory > xlocale_time
                    seq > @
                      (((unsupported)).apply)
                        xstrp_output.write ((((x_strptime).x_strptime_time)).apply ("UTC") ("%Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstrp_output).xtm_isdst)) (0))
                        xstrp_output.write ((((x_strptime).x_strptime_time)).apply ("GMT") ("%Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xstrp_output).xtm_isdst)) (0))
                        xtime_tuple.write ((((xtime).xlocaltime)).apply)
                        xstrf_output.write ((((xtime).xstrftime)).apply ("%Z"))
                        xstrp_output.write ((((x_strptime).x_strptime_time)).apply ((xstrf_output)) ("%Z"))
                        xlocale_time.write ((((x_strptime).xLocaleTime)).apply)
                        (((((unsupported)).apply (((xtime).xtzname)) (0)).neq (((unsupported)).apply (((xtime).xtzname)) (1))).or (((xtime).xdaylight).not)).if
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xstrp_output)) (8)).eq (((unsupported)).apply ((xtime_tuple)) (8)))) (("timezone check failed; '%s' -> %s != %s".mod (((unsupported)).apply ((xstrf_output)) ((((unsupported)).apply ((xstrp_output)) (8))) ((((unsupported)).apply ((xtime_tuple)) (8)))))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply ((xstrp_output)) (8)).eq (1.neg))) ("LocaleTime().timezone has duplicate values and time.daylight but timezone value not set to -1"))
                xtest_bad_timezone.write
                  [xself]
                    memory > xtz_name
                    memory > xtz_value
                    seq > @
                      seq
                        xtz_name.write (((unsupported)).apply (((xtime).xtzname)) (0))
                        (((unsupported)).apply (((((xtz_name).xupper)).apply)) ((((unsupported)).apply ("UTC") ("GMT")))).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("need non-UTC/GMT timezone"))
                        (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xtime)) ("tzname") ((((unsupported)).apply ((xtz_name)) ((xtz_name)))))) (((((xsupport).xswap_attr)).apply ((xtime)) ("daylight") (1))) (((((xsupport).xswap_attr)).apply ((xtime)) ("tzset") ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))))
                          seq
                            (((unsupported)).apply (((xtime).xtzname)) ((((unsupported)).apply ((xtz_name)) ((xtz_name)))))
                            (((unsupported)).apply (((xtime).xdaylight)) (1))
                            xtz_value.write (((unsupported)).apply (((((x_strptime).x_strptime_time)).apply ((xtz_name)) ("%Z"))) (8))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xtz_value)) ((1.neg)) (("%s lead to a timezone value of %s instead of -1 when time.daylight set to %s and passing in %s".mod (((unsupported)).apply (((xtime).xtzname)) ((xtz_value)) (((xtime).xdaylight)) ((xtz_name))))))
                xtest_date_time.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xposition)) ((((xrange)).apply (6))))
                        bogusForceDataize.write ((((xself).xhelper)).apply ("c") ((xposition)))
                xtest_date.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xposition)) ((((xrange)).apply (0) (3))))
                        bogusForceDataize.write ((((xself).xhelper)).apply ("x") ((xposition)))
                xtest_time.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xposition)) ((((xrange)).apply (3) (6))))
                        bogusForceDataize.write ((((xself).xhelper)).apply ("X") ((xposition)))
                xtest_percent.write
                  [xself]
                    memory > xstrp_output
                    memory > xstrf_output
                    seq > @
                      seq
                        xstrf_output.write ((((xtime).xstrftime)).apply ("%m %% %Y") (((xself).xtime_tuple)))
                        xstrp_output.write ((((x_strptime).x_strptime_time)).apply ((xstrf_output)) ("%m %% %Y"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((unsupported)).apply ((xstrp_output)) (0)).eq (((unsupported)).apply (((xself).xtime_tuple)) (0))).and ((((unsupported)).apply ((xstrp_output)) (1)).eq (((unsupported)).apply (((xself).xtime_tuple)) (1))))) ("handling of percent sign failed"))
                xtest_caseinsensitive.write
                  [xself]
                    memory > xstrf_output
                    seq > @
                      seq
                        xstrf_output.write ((((xtime).xstrftime)).apply ("%B") (((xself).xtime_tuple)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_strptime).x_strptime_time)).apply (((((xstrf_output).xupper)).apply)) ("%B"))) ("strptime does not handle ALL-CAPS names properly"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_strptime).x_strptime_time)).apply (((((xstrf_output).xlower)).apply)) ("%B"))) ("strptime does not handle lowercase names properly"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_strptime).x_strptime_time)).apply (((((xstrf_output).xcapitalize)).apply)) ("%B"))) ("strptime does not handle capword names properly"))
                xtest_defaults.write
                  [xself]
                    memory > xdefaults
                    memory > xstrp_output
                    seq > @
                      seq
                        xdefaults.write (((unsupported)).apply (1900) (1) (1) (0) (0) (0) (0) (1) ((1.neg)))
                        xstrp_output.write ((((x_strptime).x_strptime_time)).apply ("1") ("%m"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xstrp_output).eq (xdefaults))) (("Default values for strptime() are incorrect; %s != %s".mod (((unsupported)).apply ((xstrp_output)) ((xdefaults))))))
                xtest_escaping.write
                  [xself]
                    memory > xneed_escaping
                    seq > @
                      seq
                        xneed_escaping.write ".^$*+?{}[]|)("
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((x_strptime).x_strptime_time)).apply ((xneed_escaping)) ((xneed_escaping)))))
                xtest_feb29_on_leap_year_without_year.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xtime).xstrptime)).apply ("Feb 29") ("%b %d"))
                xtest_mar1_comes_after_feb29_even_when_omitting_the_year.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertLess)).apply (((((xtime).xstrptime)).apply ("Feb 29") ("%b %d"))) (((((xtime).xstrptime)).apply ("Mar 1") ("%b %d"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_twelve_noon_midnight.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((xtime).xstrptime)).apply ("12 PM") ("%I %p"))) (3))) (12))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((xtime).xstrptime)).apply ("12 AM") ("%I %p"))) (3))) (0))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((x_strptime).x_strptime_time)).apply ("12 PM") ("%I %p"))) (3))) (12))
                        bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((x_strptime).x_strptime_time)).apply ("12 AM") ("%I %p"))) (3))) (0))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_all_julian_days.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write ((xself).xassertEqual)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (367))))
                          bogusForceDataize.write (((xeq)).apply ((((unsupported)).apply (((((x_strptime).x_strptime_time)).apply (("%d 2004".mod (xi))) ("%j %Y"))) (7))) ((xi)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xtime_tuple)) (((((xtime).xgmtime)).apply)))
                xtest_julian_calculation.write
                  [xself]
                    memory > xformat_string
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xformat_string.write "%Y %m %d %H %M %S %w %Z"
                        xresult.write ((((x_strptime).x_strptime_time)).apply (((((xtime).xstrftime)).apply ((xformat_string)) (((xself).xtime_tuple)))) ((xformat_string)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xresult).xtm_yday).eq (((xself).xtime_tuple).xtm_yday))) (("Calculation of tm_yday failed; %s != %s".mod (((unsupported)).apply (((xresult).xtm_yday)) ((((xself).xtime_tuple).xtm_yday))))))
                xtest_gregorian_calculation.write
                  [xself]
                    memory > xformat_string
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xformat_string.write "%Y %H %M %S %w %j %Z"
                        xresult.write ((((x_strptime).x_strptime_time)).apply (((((xtime).xstrftime)).apply ((xformat_string)) (((xself).xtime_tuple)))) ((xformat_string)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xresult).xtm_year).eq (((xself).xtime_tuple).xtm_year)).and (((xresult).xtm_mon).eq (((xself).xtime_tuple).xtm_mon))).and (((xresult).xtm_mday).eq (((xself).xtime_tuple).xtm_mday)))) (("Calculation of Gregorian date failed; %s-%s-%s != %s-%s-%s".mod (((unsupported)).apply (((xresult).xtm_year)) (((xresult).xtm_mon)) (((xresult).xtm_mday)) ((((xself).xtime_tuple).xtm_year)) ((((xself).xtime_tuple).xtm_mon)) ((((xself).xtime_tuple).xtm_mday))))))
                xtest_day_of_week_calculation.write
                  [xself]
                    memory > xformat_string
                    memory > xresult
                    seq > @
                      (((unsupported)).apply)
                        xformat_string.write "%Y %m %d %H %S %j %Z"
                        xresult.write ((((x_strptime).x_strptime_time)).apply (((((xtime).xstrftime)).apply ((xformat_string)) (((xself).xtime_tuple)))) ((xformat_string)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xresult).xtm_wday).eq (((xself).xtime_tuple).xtm_wday))) (("Calculation of day of the week failed; %s != %s".mod (((unsupported)).apply (((xresult).xtm_wday)) ((((xself).xtime_tuple).xtm_wday))))))
                ((xsupport).xis_android).if
                  seq
                    x_ymd_excluded.write (((unsupported)).apply ((((unsupported)).apply (1905) (1) (1))) ((((unsupported)).apply (1906) (12) (31))) ((((unsupported)).apply (2008) (12) (29))) ((((unsupported)).apply (1917) (12) (31))))
                    x_formats_excluded.write (((unsupported)).apply ("%G %V"))
                  seq
                    x_ymd_excluded.write (((unsupported)).apply)
                    x_formats_excluded.write (((unsupported)).apply)
                xtest_week_of_year_and_day_of_week_calculation.write
                  [xself]
                    memory > xtest_helper
                    seq > @
                      (((unsupported)).apply)
                        xtest_helper.write
                          [xymd_tuple xtest_reason]
                            memory > xstrp_output
                            memory > xstrp_input
                            memory > xmsg
                            memory > xformat_string
                            memory > xdt_date
                            seq > @
                              (((unsupported)).apply ((xyear_week_format)) ((((unsupported)).apply ("%Y %W") ("%Y %U") ("%G %V"))))
                                seq
                                  ((((unsupported)).apply ((xyear_week_format)) (((xself).x_formats_excluded))).and (((unsupported)).apply ((xymd_tuple)) (((xself).x_ymd_excluded)))).if
                                    (((unsupported)).apply)
                                  (((unsupported)).apply ((xweekday_format)) ((((unsupported)).apply ("%w") ("%u") ("%a") ("%A"))))
                                    seq
                                      xformat_string.write (((xyear_week_format).add " ").add (xweekday_format))
                                      (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtest_reason)) ((xymd_tuple)) ((xformat_string)))))
                                        seq
                                          xdt_date.write (((xdatetime_date)).apply ((((unsupported)).apply ((xymd_tuple)))))
                                          xstrp_input.write ((((xdt_date).xstrftime)).apply ((xformat_string)))
                                          xstrp_output.write ((((x_strptime).x_strptime_time)).apply ((xstrp_input)) ((xformat_string)))
                                          xmsg.write ("%r: %s != %s".mod (((unsupported)).apply ((xstrp_input)) ((((unsupported)).apply ((xstrp_output)) (7))) ((((unsupported)).apply (((((xdt_date).xtimetuple)).apply)) (7)))))
                                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xstrp_output)) ((((unsupported)).apply (3))))) ((xymd_tuple)) ((xmsg)))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1901) (1) (3))) ("week 0"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1901) (1) (8))) ("common case"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1901) (1) (13))) ("day on Sunday"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1901) (1) (14))) ("day on Monday"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1905) (1) (1))) ("Jan 1 on Sunday"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1906) (1) (1))) ("Jan 1 on Monday"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1906) (1) (7))) ("first Sunday in a year starting on Monday"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1905) (12) (31))) ("Dec 31 on Sunday"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1906) (12) (31))) ("Dec 31 on Monday"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (2008) (12) (29))) ("Monday in the last week of the year"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (2008) (12) (22))) ("Monday in the second-to-last week of the year"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1978) (10) (23))) ("randomly chosen date"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (2004) (12) (18))) ("randomly chosen date"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1978) (10) (23))) ("year starting and ending on Monday while date not on Sunday or Monday"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1917) (12) (17))) ("year starting and ending on Monday with a Monday not at the beginning or end of the year"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (1917) (12) (31))) ("Dec 31 on Monday with year starting and ending on Monday"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (2007) (1) (7))) ("First Sunday of 2007"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (2007) (1) (14))) ("Second Sunday of 2007"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (2006) (12) (31))) ("Last Sunday of 2006"))
                        bogusForceDataize.write (((xtest_helper)).apply ((((unsupported)).apply (2006) (12) (24))) ("Second to last Sunday of 2006"))
                xtest_week_0.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xvalue xformat]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((x_strptime).x_strptime_time)).apply ((xvalue)) ((xformat)))) ((((unsupported)).apply ((1.neg)))))) ((xexpected)))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 0") ("%Y %U %w") (2014) (12) (28) (0) (0) (0) (6) (362))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 0") ("%Y %W %w") (2015) (1) (4) (0) (0) (0) (6) (4))
                        bogusForceDataize.write (((xcheck)).apply ("2015 1 1") ("%G %V %u") (2014) (12) (29) (0) (0) (0) (0) (363))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 1") ("%Y %U %w") (2014) (12) (29) (0) (0) (0) (0) (363))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 1") ("%Y %W %w") (2014) (12) (29) (0) (0) (0) (0) (363))
                        bogusForceDataize.write (((xcheck)).apply ("2015 1 2") ("%G %V %u") (2014) (12) (30) (0) (0) (0) (1) (364))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 2") ("%Y %U %w") (2014) (12) (30) (0) (0) (0) (1) (364))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 2") ("%Y %W %w") (2014) (12) (30) (0) (0) (0) (1) (364))
                        bogusForceDataize.write (((xcheck)).apply ("2015 1 3") ("%G %V %u") (2014) (12) (31) (0) (0) (0) (2) (365))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 3") ("%Y %U %w") (2014) (12) (31) (0) (0) (0) (2) (365))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 3") ("%Y %W %w") (2014) (12) (31) (0) (0) (0) (2) (365))
                        bogusForceDataize.write (((xcheck)).apply ("2015 1 4") ("%G %V %u") (2015) (1) (1) (0) (0) (0) (3) (1))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 4") ("%Y %U %w") (2015) (1) (1) (0) (0) (0) (3) (1))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 4") ("%Y %W %w") (2015) (1) (1) (0) (0) (0) (3) (1))
                        bogusForceDataize.write (((xcheck)).apply ("2015 1 5") ("%G %V %u") (2015) (1) (2) (0) (0) (0) (4) (2))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 5") ("%Y %U %w") (2015) (1) (2) (0) (0) (0) (4) (2))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 5") ("%Y %W %w") (2015) (1) (2) (0) (0) (0) (4) (2))
                        bogusForceDataize.write (((xcheck)).apply ("2015 1 6") ("%G %V %u") (2015) (1) (3) (0) (0) (0) (5) (3))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 6") ("%Y %U %w") (2015) (1) (3) (0) (0) (0) (5) (3))
                        bogusForceDataize.write (((xcheck)).apply ("2015 0 6") ("%Y %W %w") (2015) (1) (3) (0) (0) (0) (5) (3))
                        bogusForceDataize.write (((xcheck)).apply ("2015 1 7") ("%G %V %u") (2015) (1) (4) (0) (0) (0) (6) (4))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 0") ("%Y %U %w") (2008) (12) (28) (0) (0) (0) (6) (363))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 0") ("%Y %W %w") (2009) (1) (4) (0) (0) (0) (6) (4))
                        bogusForceDataize.write (((xcheck)).apply ("2009 1 1") ("%G %V %u") (2008) (12) (29) (0) (0) (0) (0) (364))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 1") ("%Y %U %w") (2008) (12) (29) (0) (0) (0) (0) (364))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 1") ("%Y %W %w") (2008) (12) (29) (0) (0) (0) (0) (364))
                        bogusForceDataize.write (((xcheck)).apply ("2009 1 2") ("%G %V %u") (2008) (12) (30) (0) (0) (0) (1) (365))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 2") ("%Y %U %w") (2008) (12) (30) (0) (0) (0) (1) (365))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 2") ("%Y %W %w") (2008) (12) (30) (0) (0) (0) (1) (365))
                        bogusForceDataize.write (((xcheck)).apply ("2009 1 3") ("%G %V %u") (2008) (12) (31) (0) (0) (0) (2) (366))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 3") ("%Y %U %w") (2008) (12) (31) (0) (0) (0) (2) (366))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 3") ("%Y %W %w") (2008) (12) (31) (0) (0) (0) (2) (366))
                        bogusForceDataize.write (((xcheck)).apply ("2009 1 4") ("%G %V %u") (2009) (1) (1) (0) (0) (0) (3) (1))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 4") ("%Y %U %w") (2009) (1) (1) (0) (0) (0) (3) (1))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 4") ("%Y %W %w") (2009) (1) (1) (0) (0) (0) (3) (1))
                        bogusForceDataize.write (((xcheck)).apply ("2009 1 5") ("%G %V %u") (2009) (1) (2) (0) (0) (0) (4) (2))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 5") ("%Y %U %w") (2009) (1) (2) (0) (0) (0) (4) (2))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 5") ("%Y %W %w") (2009) (1) (2) (0) (0) (0) (4) (2))
                        bogusForceDataize.write (((xcheck)).apply ("2009 1 6") ("%G %V %u") (2009) (1) (3) (0) (0) (0) (5) (3))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 6") ("%Y %U %w") (2009) (1) (3) (0) (0) (0) (5) (3))
                        bogusForceDataize.write (((xcheck)).apply ("2009 0 6") ("%Y %W %w") (2009) (1) (3) (0) (0) (0) (5) (3))
                        bogusForceDataize.write (((xcheck)).apply ("2009 1 7") ("%G %V %u") (2009) (1) (4) (0) (0) (0) (6) (4))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_time_re_recreation.write
                  [xself]
                    memory > xoriginal_time_re
                    seq > @
                      seq
                        bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("10") ("%d"))
                        bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("2005") ("%Y"))
                        (((unsupported)).apply (((((x_strptime).x_TimeRE_cache).xlocale_time).xlang)) ("Ni"))
                        xoriginal_time_re.write ((x_strptime).x_TimeRE_cache)
                        bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("10") ("%d"))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xoriginal_time_re)) (((x_strptime).x_TimeRE_cache)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((x_strptime).x_regex_cache)))) (1))
                xtest_regex_cleanup.write
                  [xself]
                    memory > xbogus_key
                    seq > @
                      seq
                        (((unsupported)).apply ((xKeyError)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((x_strptime).x_regex_cache)) ("%d"))))))))
                        xbogus_key.write 0
                        while.
                          ((((xlen)).apply (((x_strptime).x_regex_cache))).leq ((x_strptime).x_CACHE_MAX_SIZE))
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply (((x_strptime).x_regex_cache)) ((xbogus_key)))) ("None: is there a None literal in the EO language?"))
                                (((unsupported)).apply ((xbogus_key)) (1))
                        bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("10") ("%d"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((x_strptime).x_regex_cache)))) (1))
                xtest_new_localetime.write
                  [xself]
                    memory > xlocale_time_id
                    seq > @
                      seq
                        xlocale_time_id.write (((x_strptime).x_TimeRE_cache).xlocale_time)
                        (((unsupported)).apply (((((x_strptime).x_TimeRE_cache).xlocale_time).xlang)) ("Ni"))
                        bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("10") ("%d"))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xlocale_time_id)) ((((x_strptime).x_TimeRE_cache).xlocale_time)))
                xtest_TimeRE_recreation_locale.write
                  [xself]
                    memory > xfirst_time_re
                    memory > xlocale_info
                    memory > xsecond_time_re
                    seq > @
                      seq
                        xlocale_info.write ((((xlocale).xgetlocale)).apply (((xlocale).xLC_TIME)))
                        (((unsupported)).apply (((xlocale).xError)))
                          bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_TIME)) ((((unsupported)).apply ("en_US") ("UTF8"))))
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("test needs en_US.UTF8 locale"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("10") ("%d"))
                            xfirst_time_re.write ((x_strptime).x_TimeRE_cache)
                            (((unsupported)).apply (((xlocale).xError)))
                              seq
                                bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_TIME)) ((((unsupported)).apply ("de_DE") ("UTF8"))))
                                bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ("10") ("%d"))
                                xsecond_time_re.write ((x_strptime).x_TimeRE_cache)
                                bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xfirst_time_re)) ((xsecond_time_re)))
                              bogusForceDataize.write ((((xself).xskipTest)).apply ("test needs de_DE.UTF8 locale"))
                          bogusForceDataize.write ((((xlocale).xsetlocale)).apply (((xlocale).xLC_TIME)) ((xlocale_info)))
                xtest_TimeRE_recreation_timezone.write
                  [xself]
                    memory > xfirst_time_re
                    memory > xoldtzname
                    memory > xsecond_time_re
                    memory > xtm
                    seq > @
                      (((unsupported)).apply)
                        xoldtzname.write ((xtime).xtzname)
                        xtm.write ((((x_strptime).x_strptime_time)).apply ((((unsupported)).apply (((xtime).xtzname)) (0))) ("%Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtm).xtm_isdst)) (0))
                        xtm.write ((((x_strptime).x_strptime_time)).apply ((((unsupported)).apply (((xtime).xtzname)) (1))) ("%Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtm).xtm_isdst)) (1))
                        xfirst_time_re.write ((x_strptime).x_TimeRE_cache)
                        (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("TZ"))) ("EST+05EDT,M3.2.0,M11.1.0"))
                        bogusForceDataize.write ((((xtime).xtzset)).apply)
                        xtm.write ((((x_strptime).x_strptime_time)).apply ((((unsupported)).apply (((xtime).xtzname)) (0))) ("%Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtm).xtm_isdst)) (0))
                        xtm.write ((((x_strptime).x_strptime_time)).apply ((((unsupported)).apply (((xtime).xtzname)) (1))) ("%Z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtm).xtm_isdst)) (1))
                        xsecond_time_re.write ((x_strptime).x_TimeRE_cache)
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xfirst_time_re)) ((xsecond_time_re)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ((((unsupported)).apply ((xoldtzname)) (0))) ("%Z"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write ((((x_strptime).x_strptime_time)).apply ((((unsupported)).apply ((xoldtzname)) (1))) ("%Z"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)