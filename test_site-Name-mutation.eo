memory > xcopy
memory > xImportError
memory > xdata
memory > xlicense
memory > xrange
memory > xhasattr
memory > xmock_isdir
memory > xPermissionError
memory > xexc
memory > xsite
memory > xpth_file
memory > xabs_dir
memory > xpth_dir
memory > xstr
memory > xerr_out
memory > xvalue
memory > xtest
memory > xmock_addsitedir
memory > xeval
memory > x_
memory > xurllib
memory > xentry
memory > xPthFile
memory > xtempfile
memory > xglob
memory > xopen
memory > xpath
memory > xEnvironmentVarGuard
memory > xprint
memory > xenviron
memory > xf
memory > xset
memory > xrepr
memory > xre
memory > xbuiltins
memory > xsupport
memory > xsys
memory > xstderr
memory > xlocale
memory > xsubprocess
memory > xmock
memory > xos
memory > x_winapi
memory > xe
memory > xnorm_dir
memory > xshutil
memory > xunittest
memory > xobject
memory > xsysconfig
memory > xisinstance
memory > xcaptured_stderr
memory > xline
memory > xlen
memory > xpth_fn
memory > xencodings
memory > x__name__
[] > test_site
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_makepath
        memory > xOLD_SYS_PATH
        memory > xtest_s_option
        memory > xtest_setting_quit
        memory > x_calc_sys_path_for_underpth_nosite
        memory > xtest_startup_interactivehook_isolated_explicit
        memory > xtest_license_exists_at_url
        memory > xtest_addpackage_import_bad_syntax
        memory > xsetUpModule
        memory > xtest_underpth_nosite_file
        memory > xtest_startup_imports
        memory > xtest_no_duplicate_paths
        memory > x_create_underpth_exe
        memory > xtest_setting_help
        memory > xtest_get_path
        memory > xtest_aliasing_mbcs
        memory > xtest_underpth_file
        memory > xtearDownModule
        memory > xsetUp
        memory > xtest_sitecustomize_executed
        memory > xtest_abs_paths_cached_None
        memory > xtest_addpackage
        memory > xtest_getusersitepackages
        memory > xtest_getuserbase
        memory > xtest_init_pathinfo
        memory > xtest_setting_copyright
        memory > xtest_add_build_dir
        memory > xtest_startup_interactivehook
        memory > xtest_addpackage_import_bad_exec
        memory > xtest_addpackage_import_bad_pth_file
        memory > x__init__
        memory > xtest_no_home_directory
        memory > xtest_startup_interactivehook_isolated
        memory > xcleanup
        memory > xtest__getuserbase
        memory > xtest_underpth_dll_file
        memory > xtest_getsitepackages
        memory > xcreate
        memory > xtearDown
        memory > xtest_addsitedir
        memory > xpth_file_tests
        memory > xmake_pth
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((xsys).xflags).xno_site).if
              (((unsupported)).apply (((((xunittest).xSkipTest)).apply ("Python was invoked with -S"))))
            (((unsupported)).apply)
            xOLD_SYS_PATH.write "None: is there a None literal in the EO language?"
            xsetUpModule.write
              []
                memory > xOLD_SYS_PATH2
                seq > @
                  seq
                    (((unsupported)).apply)
                    xOLD_SYS_PATH2.write (((unsupported)).apply (((xsys).xpath)) ((((unsupported)).apply)))
                    (((xsite).xENABLE_USER_SITE).and ((((((xos).xpath).xisdir)).apply (((xsite).xUSER_SITE))).not)).if
                      (((unsupported)).apply ((xPermissionError)))
                        seq
                          bogusForceDataize.write ((((xos).xmakedirs)).apply (((xsite).xUSER_SITE)))
                          bogusForceDataize.write ((((xsite).xaddsitedir)).apply (((xsite).xUSER_SITE)))
                        (((unsupported)).apply (((((xunittest).xSkipTest)).apply (("unable to create user site directory (%r): %s".mod (((unsupported)).apply (((xsite).xUSER_SITE)) ((xexc))))))))
            xtearDownModule.write
              []
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) ((((unsupported)).apply)))) ((xOLD_SYS_PATH)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xsys_path)) ((((unsupported)).apply (((xsys).xpath)) ((((unsupported)).apply)))))
                        (((unsupported)).apply (((xself).xold_base)) (((xsite).xUSER_BASE)))
                        (((unsupported)).apply (((xself).xold_site)) (((xsite).xUSER_SITE)))
                        (((unsupported)).apply (((xself).xold_prefixes)) (((xsite).xPREFIXES)))
                        (((unsupported)).apply (((xself).xoriginal_vars)) (((xsysconfig).x_CONFIG_VARS)))
                        (((unsupported)).apply (((xself).xold_vars)) ((((xcopy)).apply (((xsysconfig).x_CONFIG_VARS)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) ((((unsupported)).apply)))) (((xself).xsys_path)))
                        (((unsupported)).apply (((xsite).xUSER_BASE)) (((xself).xold_base)))
                        (((unsupported)).apply (((xsite).xUSER_SITE)) (((xself).xold_site)))
                        (((unsupported)).apply (((xsite).xPREFIXES)) (((xself).xold_prefixes)))
                        (((unsupported)).apply (((xsysconfig).x_CONFIG_VARS)) (((xself).xoriginal_vars)))
                        bogusForceDataize.write (((((xsysconfig).x_CONFIG_VARS).xclear)).apply)
                        bogusForceDataize.write (((((xsysconfig).x_CONFIG_VARS).xupdate)).apply (((xself).xold_vars)))
                xtest_makepath.write
                  [xself]
                    memory > xoriginal_dir
                    memory > xpath_parts
                    seq > @
                      seq
                        xpath_parts.write (((unsupported)).apply ("Beginning") ("End"))
                        xoriginal_dir.write (((((xos).xpath).xjoin)).apply ((((unsupported)).apply ((xpath_parts)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xabs_dir)) ((xnorm_dir)))) (((((xsite).xmakepath)).apply ((((unsupported)).apply ((xpath_parts)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpath).xabspath)).apply ((xoriginal_dir)))) ((xabs_dir)))
                        ((xoriginal_dir).eq (((((xos).xpath).xnormcase)).apply ((xoriginal_dir)))).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xabs_dir)) ((xnorm_dir)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpath).xnormcase)).apply ((xabs_dir)))) ((xnorm_dir)))
                xtest_init_pathinfo.write
                  [xself]
                    memory > xdir_set
                    seq > @
                      seq
                        xdir_set.write ((((xsite).x_init_pathinfo)).apply)
                        (((unsupported)).apply ((xentry)) ((((unsupported)).apply ((((unsupported)).apply (((((xsite).xmakepath)).apply ((xpath)))) (1))) ((xpath)) (((xsys).xpath)) (((xpath).and (((((xos).xpath).xexists)).apply ((xpath))))))))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ((xentry)) ((xdir_set)) (("%s from sys.path not found in set returned by _init_pathinfo(): %s".mod (((unsupported)).apply ((xentry)) ((xdir_set))))))
                xpth_file_tests.write
                  [xself xpth_file]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xpth_file).ximported)) (((xsys).xmodules)) (("%s not in sys.modules".mod ((xpth_file).ximported))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply (((((xsite).xmakepath)).apply (((xpth_file).xgood_dir_path)))) (0))) (((xsys).xpath)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xos).xpath).xexists)).apply (((xpth_file).xbad_dir_path)))))
                xtest_addpackage.write
                  [xself]
                    memory > xpth_file
                    seq > @
                      seq
                        xpth_file.write (((xPthFile)).apply)
                        (((unsupported)).apply (((xpth_file).xcleanup)) (TRUE))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xpth_file).xcreate)).apply)
                            bogusForceDataize.write ((((xsite).xaddpackage)).apply (((xpth_file).xbase_dir)) (((xpth_file).xfilename)) ((((xset)).apply)))
                            bogusForceDataize.write ((((xself).xpth_file_tests)).apply ((xpth_file)))
                          bogusForceDataize.write ((((xpth_file).xcleanup)).apply)
                xmake_pth.write
                  [xself xcontents xpth_dir xpth_name]
                    memory > xpth_basename
                    memory > xpth_fn
                    seq > @
                      (((unsupported)).apply)
                        xpth_dir.write (((((xos).xpath).xabspath)).apply ((xpth_dir)))
                        xpth_basename.write ((xpth_name).add ".pth")
                        xpth_fn.write (((((xos).xpath).xjoin)).apply ((xpth_dir)) ((xpth_basename)))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xpth_fn)) ("w") ("utf-8"))) ((xpth_file)))
                          seq
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((unsupported)).apply (((((xos).xremove)).apply ((xpth_fn)))))))
                            bogusForceDataize.write ((((xpth_file).xwrite)).apply ((xcontents)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpth_dir)) ((xpth_basename)))))
                xtest_addpackage_import_bad_syntax.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xpth_dir)) ((xpth_fn)))) (((((xself).xmake_pth)).apply ("import bad-syntaxn"))))
                        (((unsupported)).apply ((((xcaptured_stderr)).apply)) ((xerr_out)))
                          bogusForceDataize.write ((((xsite).xaddpackage)).apply ((xpth_dir)) ((xpth_fn)) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xerr_out).xgetvalue)).apply)) ("line 1"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xerr_out).xgetvalue)).apply)) (((((xre).xescape)).apply ((((((xos).xpath).xjoin)).apply ((xpth_dir)) ((xpth_fn)))))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xerr_out).xgetvalue)).apply)) ("Traceback"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xerr_out).xgetvalue)).apply)) ("import bad-syntax"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xerr_out).xgetvalue)).apply)) ("SyntaxError"))
                xtest_addpackage_import_bad_exec.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xpth_dir)) ((xpth_fn)))) (((((xself).xmake_pth)).apply ("randompathnimport nosuchmodulen"))))
                        (((unsupported)).apply ((((xcaptured_stderr)).apply)) ((xerr_out)))
                          bogusForceDataize.write ((((xsite).xaddpackage)).apply ((xpth_dir)) ((xpth_fn)) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xerr_out).xgetvalue)).apply)) ("line 2"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xerr_out).xgetvalue)).apply)) (((((xre).xescape)).apply ((((((xos).xpath).xjoin)).apply ((xpth_dir)) ((xpth_fn)))))))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xerr_out).xgetvalue)).apply)) ("Traceback"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((((xerr_out).xgetvalue)).apply)) ("ModuleNotFoundError"))
                xtest_addpackage_import_bad_pth_file.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xpth_dir)) ((xpth_fn)))) (((((xself).xmake_pth)).apply ("abcx00defn"))))
                        (((unsupported)).apply ((((xcaptured_stderr)).apply)) ((xerr_out)))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xsite).xaddpackage)).apply ((xpth_dir)) ((xpth_fn)) ((((xset)).apply)))))
                        (((unsupported)).apply (((xself).xmaxDiff)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xerr_out).xgetvalue)).apply)) (""))
                        (((unsupported)).apply ((xpath)) (((xsys).xpath)))
                          (((xisinstance)).apply ((xpath)) ((xstr))).if
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("abcx00def") ((xpath)))
                xtest_addsitedir.write
                  [xself]
                    memory > xpth_file
                    seq > @
                      seq
                        xpth_file.write (((xPthFile)).apply)
                        (((unsupported)).apply (((xpth_file).xcleanup)) (TRUE))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xpth_file).xcreate)).apply)
                            bogusForceDataize.write ((((xsite).xaddsitedir)).apply (((xpth_file).xbase_dir)) ((((xset)).apply)))
                            bogusForceDataize.write ((((xself).xpth_file_tests)).apply ((xpth_file)))
                          bogusForceDataize.write ((((xpth_file).xcleanup)).apply)
                xtest__getuserbase.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsite).x_getuserbase)).apply)) (((((xsysconfig).x_getuserbase)).apply)))
                xtest_get_path.write
                  [xself]
                    memory > xscheme
                    seq > @
                      seq
                        ((((xsys).xplatform).eq "darwin").and ((xsys).x_framework)).if
                          xscheme.write "osx_framework_user"
                          xscheme.write (((xos).xname).add "_user")
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsite).x_get_path)).apply (((((xsite).x_getuserbase)).apply)))) (((((xsysconfig).xget_path)).apply ("purelib") ((xscheme)))))
                xtest_s_option.write
                  [xself]
                    memory > xenv
                    memory > xusersite
                    memory > xrc
                    seq > @
                      (((unsupported)).apply)
                        xusersite.write ((xsite).xUSER_SITE)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xusersite)) (((xsys).xpath)))
                        xenv.write (((((xos).xenviron).xcopy)).apply)
                        xrc.write (((unsupported)).apply (((xsubprocess).xcall)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") (("import sys; sys.exit(%r in sys.path)".mod (xusersite))))) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1))
                        xenv.write (((((xos).xenviron).xcopy)).apply)
                        xrc.write (((unsupported)).apply (((xsubprocess).xcall)) ((((unsupported)).apply (((xsys).xexecutable)) ("-s") ("-c") (("import sys; sys.exit(%r in sys.path)".mod (xusersite))))) ((xenv)))
                        ((xusersite).eq (((unsupported)).apply (((((xsite).xgetsitepackages)).apply)) (0))).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (0) ("User site still added to path with -s"))
                        xenv.write (((((xos).xenviron).xcopy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PYTHONNOUSERSITE"))) ("1"))
                        xrc.write (((unsupported)).apply (((xsubprocess).xcall)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") (("import sys; sys.exit(%r in sys.path)".mod (xusersite))))) ((xenv)))
                        ((xusersite).eq (((unsupported)).apply (((((xsite).xgetsitepackages)).apply)) (0))).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (0) ("User site still added to path with PYTHONNOUSERSITE"))
                        xenv.write (((((xos).xenviron).xcopy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PYTHONUSERBASE"))) ("/tmp"))
                        xrc.write (((unsupported)).apply (((xsubprocess).xcall)) ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("import sys, site; sys.exit(site.USER_BASE.startswith(\"/tmp\"))"))) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (1) ("User base not set by PYTHONUSERBASE"))
                xtest_getuserbase.write
                  [xself]
                    memory > xuser_base
                    seq > @
                      seq
                        (((unsupported)).apply (((xsite).xUSER_BASE)) ("None: is there a None literal in the EO language?"))
                        xuser_base.write ((((xsite).xgetuserbase)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsite).xUSER_BASE)) ((xuser_base)))
                        (((unsupported)).apply (((xsite).xUSER_BASE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xsysconfig).x_CONFIG_VARS)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((xEnvironmentVarGuard)).apply)) ((xenviron)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("PYTHONUSERBASE"))) ("xoxo"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xsite).xgetuserbase)).apply).xstartswith)).apply ("xoxo"))) (((((xsite).xgetuserbase)).apply)))
                xtest_getusersitepackages.write
                  [xself]
                    memory > xuser_site
                    seq > @
                      seq
                        (((unsupported)).apply (((xsite).xUSER_SITE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xsite).xUSER_BASE)) ("None: is there a None literal in the EO language?"))
                        xuser_site.write ((((xsite).xgetusersitepackages)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsite).xUSER_SITE)) ((xuser_site)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xuser_site).xstartswith)).apply (((xsite).xUSER_BASE)))) ((xuser_site)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsite).xUSER_BASE)) (((((xsite).xgetuserbase)).apply)))
                xtest_getsitepackages.write
                  [xself]
                    memory > xdirs
                    memory > xwanted
                    seq > @
                      seq
                        (((unsupported)).apply (((xsite).xPREFIXES)) ((((unsupported)).apply ("xoxo"))))
                        xdirs.write ((((xsite).xgetsitepackages)).apply)
                        (((xos).xsep).eq "/").if
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdirs)))) (1))
                            xwanted.write (((((xos).xpath).xjoin)).apply ("xoxo") ("lib") (("python%d.%d".mod (((unsupported)).apply (((xsys).xversion_info)) ((((unsupported)).apply (2)))))) ("site-packages"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdirs)) (0))) ((xwanted)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xdirs)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdirs)) (0))) ("xoxo"))
                            xwanted.write (((((xos).xpath).xjoin)).apply ("xoxo") ("lib") ("site-packages"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xdirs)) (1))) ((xwanted)))
                xtest_no_home_directory.write
                  [xself]
                    memory > xuser_site
                    memory > xuser_base
                    memory > xknown_paths
                    seq > @
                      seq
                        (((unsupported)).apply (((xsite).xUSER_SITE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xsite).xUSER_BASE)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply ((((xEnvironmentVarGuard)).apply)) ((xenviron)) (((((xmock).xpatch)).apply ("os.path.expanduser") ((((unsupported)).apply ((xpath)))))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("PYTHONUSERBASE"))))))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xenviron)) ("APPDATA"))))))))
                            xuser_base.write ((((xsite).xgetuserbase)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xuser_base).xstartswith)).apply (("~".add ((xos).xsep))))) ((xuser_base)))
                            xuser_site.write ((((xsite).xgetusersitepackages)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xuser_site).xstartswith)).apply ((xuser_base)))) ((xuser_site)))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("os.path.isdir") (FALSE))) ((xmock_isdir)) ((((((xmock).xpatch).xobject)).apply ((xsite)) ("addsitedir"))) ((xmock_addsitedir)) (((((xsupport).xswap_attr)).apply ((xsite)) ("ENABLE_USER_SITE") (TRUE))))
                          seq
                            xknown_paths.write (((xset)).apply)
                            bogusForceDataize.write ((((xsite).xaddusersitepackages)).apply ((xknown_paths)))
                            bogusForceDataize.write ((((xmock_isdir).xassert_called_once_with)).apply ((xuser_site)))
                            bogusForceDataize.write ((((xmock_addsitedir).xassert_not_called)).apply)
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((xknown_paths)))
            (((unsupported)).apply ((xobject)))
              seq
                unsupported
                x__init__.write
                  [xself xfilename_base ximported xgood_dirname xbad_dirname]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xfilename)) (((xfilename_base).add ".pth")))
                        (((unsupported)).apply (((xself).xbase_dir)) ((((((xos).xpath).xabspath)).apply (""))))
                        (((unsupported)).apply (((xself).xfile_path)) ((((((xos).xpath).xjoin)).apply (((xself).xbase_dir)) (((xself).xfilename)))))
                        (((unsupported)).apply (((xself).ximported)) ((ximported)))
                        (((unsupported)).apply (((xself).xgood_dirname)) ((xgood_dirname)))
                        (((unsupported)).apply (((xself).xbad_dirname)) ((xbad_dirname)))
                        (((unsupported)).apply (((xself).xgood_dir_path)) ((((((xos).xpath).xjoin)).apply (((xself).xbase_dir)) (((xself).xgood_dirname)))))
                        (((unsupported)).apply (((xself).xbad_dir_path)) ((((((xos).xpath).xjoin)).apply (((xself).xbase_dir)) (((xself).xbad_dirname)))))
                xcreate.write
                  [xself]
                    memory > xFILE
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xFILE.write (((xopen)).apply (((xself).xfile_path)) ("w"))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xprint)) ("#import @bad module name") ((xFILE)))
                            (((unsupported)).apply ((xprint)) ("n") ((xFILE)))
                            (((unsupported)).apply ((xprint)) (("import %s".mod ((xself).ximported))) ((xFILE)))
                            (((unsupported)).apply ((xprint)) (((xself).xgood_dirname)) ((xFILE)))
                            (((unsupported)).apply ((xprint)) (((xself).xbad_dirname)) ((xFILE)))
                          bogusForceDataize.write ((((xFILE).xclose)).apply)
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xself).xgood_dir_path)))
                xcleanup.write
                  [xself xprep]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((((xos).xpath).xexists)).apply (((xself).xfile_path))).if
                          bogusForceDataize.write ((((xos).xremove)).apply (((xself).xfile_path)))
                        (xprep).if
                          seq
                            (((unsupported)).apply (((xself).ximported_module)) ((((((xsys).xmodules).xget)).apply (((xself).ximported)))))
                            ((xself).ximported_module).if
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) (((xself).ximported)))))))))
                          ((xself).ximported_module).if
                            (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) (((xself).ximported)))) (((xself).ximported_module)))
                        (((((xos).xpath).xexists)).apply (((xself).xgood_dir_path))).if
                          bogusForceDataize.write ((((xos).xrmdir)).apply (((xself).xgood_dir_path)))
                        (((((xos).xpath).xexists)).apply (((xself).xbad_dir_path))).if
                          bogusForceDataize.write ((((xos).xrmdir)).apply (((xself).xbad_dir_path)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xsys_path)) ((((unsupported)).apply (((xsys).xpath)) ((((unsupported)).apply)))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xsys).xpath)) ((((unsupported)).apply)))) (((xself).xsys_path)))
                xtest_abs_paths_cached_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((unsupported)).apply (((xsys).xmodules)) ("test")).x__cached__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xsite).xabs_paths)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((((unsupported)).apply (((xsys).xmodules)) ("test")).x__cached__)))
                xtest_no_duplicate_paths.write
                  [xself]
                    memory > xseen_paths
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsite).xremoveduppaths)).apply)
                        xseen_paths.write (((xset)).apply)
                        (((unsupported)).apply ((xpath)) (((xsys).xpath)))
                          seq
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xpath)) ((xseen_paths)))
                            bogusForceDataize.write ((((xseen_paths).xadd)).apply ((xpath)))
                xtest_add_build_dir.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                xtest_setting_quit.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xbuiltins)) ("quit"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xbuiltins)) ("exit"))))
                xtest_setting_copyright.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xbuiltins)) ("copyright"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xbuiltins)) ("credits"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xbuiltins)) ("license"))))
                xtest_setting_help.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xbuiltins)) ("help"))))
                xtest_aliasing_mbcs.write
                  [xself]
                    seq > @
                      (((xsys).xplatform).eq "win32").if
                        seq
                          (((unsupported)).apply)
                          ((((((unsupported)).apply (((((xlocale).xgetdefaultlocale)).apply)) (1)).xstartswith)).apply ("cp")).if
                            (((unsupported)).apply ((xvalue)) (((((((xencodings).xaliases).xaliases).xvalues)).apply)))
                              ((xvalue).eq "mbcs").if
                                (((unsupported)).apply)
                              bogusForceDataize.write ((((xself).xfail)).apply ("did not alias mbcs"))
                xtest_sitecustomize_executed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("sitecustomize") (((xsys).xmodules))).if
                        (((unsupported)).apply ((xImportError)))
                          (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("sitecustomize not imported automatically"))
                xtest_license_exists_at_url.write
                  [xself]
                    memory > xreq
                    memory > xcode
                    memory > xurl
                    seq > @
                      (((unsupported)).apply)
                        xurl.write (((unsupported)).apply ((((((xlicense).x_Printer__data).xsplit)).apply)) (1))
                        xreq.write (((unsupported)).apply ((((xurllib).xrequest).xRequest)) ((xurl)) ("HEAD"))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xurllib).xrequest).xurlcleanup)))
                        (((unsupported)).apply ((((xurllib).xerror).xHTTPError)))
                          (((unsupported)).apply ((((((xtest).xsupport).xtransient_internet)).apply ((xurl)))))
                            (((unsupported)).apply ((((((xurllib).xrequest).xurlopen)).apply ((xreq)))) ((xdata)))
                              xcode.write ((((xdata).xgetcode)).apply)
                          xcode.write ((xe).xcode)
                        (((unsupported)).apply (((xself).xassertEqual)) ((xcode)) (200) (("Can't find ".add (xurl))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_startup_imports.write
                  [xself]
                    memory > xcollection_mods
                    memory > xmodules
                    memory > xisolated_paths
                    memory > xre_mods
                    memory > xpopen
                    memory > xpth_files
                    memory > xstdout
                    seq > @
                      seq
                        xpopen.write (((unsupported)).apply (((xsubprocess).xPopen)) ((((unsupported)).apply (((xsys).xexecutable)) ("-I") ("-c") ("import sys; print(repr(sys.path))"))) (((xsubprocess).xPIPE)) ("utf-8"))
                        xstdout.write (((unsupported)).apply (((((xpopen).xcommunicate)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpopen).xreturncode)) (0) ((((xrepr)).apply ((xstdout)))))
                        xisolated_paths.write (((xeval)).apply ((xstdout)))
                        (((unsupported)).apply ((xpath)) ((xisolated_paths)))
                          seq
                            xpth_files.write ((((xglob).xglob)).apply ((((((xos).xpath).xjoin)).apply (((((xglob).xescape)).apply ((xpath)))) ("*.pth"))))
                            (xpth_files).if
                              bogusForceDataize.write ((((xself).xskipTest)).apply ("found {len(pth_files)} .pth files in: {path}"))
                        xpopen.write (((unsupported)).apply (((xsubprocess).xPopen)) ((((unsupported)).apply (((xsys).xexecutable)) ("-I") ("-v") ("-c") ("import sys; print(set(sys.modules))"))) (((xsubprocess).xPIPE)) (((xsubprocess).xPIPE)) ("utf-8"))
                        (((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xstderr)))) (((((xpopen).xcommunicate)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xpopen).xreturncode)) (0) ((((unsupported)).apply ((xstdout)) ((xstderr)))))
                        xmodules.write (((xeval)).apply ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("site") ((xmodules)))
                        xre_mods.write (((unsupported)).apply ("re") ("_sre") ("sre_compile") ("sre_constants") ("sre_parse"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmodules).xintersection)).apply ((xre_mods)))) ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("locale") ((xmodules)) ((xstderr)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("copyreg") ((xmodules)) ((xstderr)))
                        xcollection_mods.write ((((((unsupported)).apply ("_collections") ("collections") ("functools") ("heapq") ("itertools") ("keyword") ("operator") ("reprlib") ("types") ("weakref")).xdifference)).apply (((xsys).xbuiltin_module_names)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xmodules).xintersection)).apply ((xcollection_mods)))) ((xstderr)))
                xtest_startup_interactivehook.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((((((xsubprocess).xPopen)).apply ((((unsupported)).apply (((xsys).xexecutable)) ("-c") ("import sys; sys.exit(hasattr(sys, \"__interactivehook__\"))")))).xwait)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xr)) ("'__interactivehook__' not added by site"))
                xtest_startup_interactivehook_isolated.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((((((xsubprocess).xPopen)).apply ((((unsupported)).apply (((xsys).xexecutable)) ("-I") ("-c") ("import sys; sys.exit(hasattr(sys, \"__interactivehook__\"))")))).xwait)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xr)) ("'__interactivehook__' added in isolated mode"))
                xtest_startup_interactivehook_isolated_explicit.write
                  [xself]
                    memory > xr
                    seq > @
                      seq
                        xr.write (((((((xsubprocess).xPopen)).apply ((((unsupported)).apply (((xsys).xexecutable)) ("-I") ("-c") ("import site, sys; site.enablerlcompleter(); sys.exit(hasattr(sys, \"__interactivehook__\"))")))).xwait)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xr)) ("'__interactivehook__' not added by enablerlcompleter()"))
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((((xsys).xplatform).eq "win32")) ("only supported on Windows"))))
              seq
                x_create_underpth_exe.write
                  [xself xlines xexe_pth]
                    memory > x_pth_file
                    memory > xexe_file
                    memory > xdll_file
                    memory > xdll_src_file
                    memory > xtemp_dir
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xtemp_dir.write ((((xtempfile).xmkdtemp)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xtest).xsupport).xrmtree)) ((xtemp_dir)))
                        xexe_file.write (((((xos).xpath).xjoin)).apply ((xtemp_dir)) ((((unsupported)).apply ((((((xos).xpath).xsplit)).apply (((xsys).xexecutable)))) (1))))
                        xdll_src_file.write ((((x_winapi).xGetModuleFileName)).apply (((xsys).xdllhandle)))
                        xdll_file.write (((((xos).xpath).xjoin)).apply ((xtemp_dir)) ((((unsupported)).apply ((((((xos).xpath).xsplit)).apply ((xdll_src_file)))) (1))))
                        bogusForceDataize.write ((((xshutil).xcopy)).apply (((xsys).xexecutable)) ((xexe_file)))
                        bogusForceDataize.write ((((xshutil).xcopy)).apply ((xdll_src_file)) ((xdll_file)))
                        (xexe_pth).if
                          x_pth_file.write ((((unsupported)).apply ((((((xos).xpath).xsplitext)).apply ((xexe_file)))) (0)).add "._pth")
                          x_pth_file.write ((((unsupported)).apply ((((((xos).xpath).xsplitext)).apply ((xdll_file)))) (0)).add "._pth")
                        (((unsupported)).apply ((((xopen)).apply ((x_pth_file)) ("w"))) ((xf)))
                          (((unsupported)).apply ((xline)) ((xlines)))
                            (((unsupported)).apply ((xprint)) ((xline)) ((xf)))
                        (((unsupported)).apply ((xexe_file)))
                x_calc_sys_path_for_underpth_nosite.write
                  [xself xsys_prefix xlines]
                    memory > xsys_path
                    memory > xabs_path
                    seq > @
                      seq
                        xsys_path.write (((unsupported)).apply)
                        (((unsupported)).apply ((xline)) ((xlines)))
                          seq
                            (((xline).not).or ((((unsupported)).apply ((xline)) (0)).eq "#")).if
                              (((unsupported)).apply)
                            xabs_path.write (((((xos).xpath).xabspath)).apply ((((((xos).xpath).xjoin)).apply ((xsys_prefix)) ((xline)))))
                            bogusForceDataize.write ((((xsys_path).xappend)).apply ((xabs_path)))
                        (((unsupported)).apply ((xsys_path)))
                xtest_underpth_nosite_file.write
                  [xself]
                    memory > xlibpath
                    memory > xpth_lines
                    memory > xsys_path
                    memory > xenv
                    memory > xactual_sys_path
                    memory > xexe_file
                    memory > xexe_prefix
                    memory > xoutput
                    seq > @
                      seq
                        xlibpath.write (((((xos).xpath).xdirname)).apply ((((((xos).xpath).xdirname)).apply (((xencodings).x__file__)))))
                        xexe_prefix.write (((((xos).xpath).xdirname)).apply (((xsys).xexecutable)))
                        xpth_lines.write (((unsupported)).apply ("fake-path-name") ((((unsupported)).apply ((((unsupported)).apply ((xlibpath)) ((x_)) ((((xrange)).apply (200))))))) ("") ("# comment"))
                        xexe_file.write ((((xself).x_create_underpth_exe)).apply ((xpth_lines)))
                        xsys_path.write ((((xself).x_calc_sys_path_for_underpth_nosite)).apply ((((((xos).xpath).xdirname)).apply ((xexe_file)))) ((xpth_lines)))
                        xenv.write (((((xos).xenviron).xcopy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PYTHONPATH"))) ("from-env"))
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PATH"))) (((("{};{}".xformat)).apply ((xexe_prefix)) (((((xos).xgetenv)).apply ("PATH"))))))
                        xoutput.write (((unsupported)).apply (((xsubprocess).xcheck_output)) ((((unsupported)).apply ((xexe_file)) ("-c") ((((unsupported)).apply)))) ((xenv)) ("ansi"))
                        xactual_sys_path.write (((((((xoutput).xrstrip)).apply).xsplit)).apply ("n"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xactual_sys_path)) ("sys.flags.no_site was False"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual_sys_path)) ((xsys_path)) ("sys.path is incorrect"))
                xtest_underpth_file.write
                  [xself]
                    memory > xrc
                    memory > xlibpath
                    memory > xexe_file
                    memory > xexe_prefix
                    memory > xsys_prefix
                    memory > xenv
                    seq > @
                      seq
                        xlibpath.write (((((xos).xpath).xdirname)).apply ((((((xos).xpath).xdirname)).apply (((xencodings).x__file__)))))
                        xexe_prefix.write (((((xos).xpath).xdirname)).apply (((xsys).xexecutable)))
                        xexe_file.write ((((xself).x_create_underpth_exe)).apply ((((unsupported)).apply ("fake-path-name") ((((unsupported)).apply ((((unsupported)).apply ((xlibpath)) ((x_)) ((((xrange)).apply (200))))))) ("") ("# comment") ("import site"))))
                        xsys_prefix.write (((((xos).xpath).xdirname)).apply ((xexe_file)))
                        xenv.write (((((xos).xenviron).xcopy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PYTHONPATH"))) ("from-env"))
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PATH"))) (((("{};{}".xformat)).apply ((xexe_prefix)) (((((xos).xgetenv)).apply ("PATH"))))))
                        xrc.write (((unsupported)).apply (((xsubprocess).xcall)) ((((unsupported)).apply ((xexe_file)) ("-c") (((((unsupported)).apply).mod (((unsupported)).apply ((((((xos).xpath).xjoin)).apply ((xsys_prefix)) ("fake-path-name"))) ((xlibpath)) ((((((xos).xpath).xjoin)).apply ((xsys_prefix)) ("from-env")))))))) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xrc)) ("sys.path is incorrect"))
                xtest_underpth_dll_file.write
                  [xself]
                    memory > xrc
                    memory > xlibpath
                    memory > xexe_file
                    memory > xexe_prefix
                    memory > xsys_prefix
                    memory > xenv
                    seq > @
                      seq
                        xlibpath.write (((((xos).xpath).xdirname)).apply ((((((xos).xpath).xdirname)).apply (((xencodings).x__file__)))))
                        xexe_prefix.write (((((xos).xpath).xdirname)).apply (((xsys).xexecutable)))
                        xexe_file.write (((unsupported)).apply (((xself).x_create_underpth_exe)) ((((unsupported)).apply ("fake-path-name") ((((unsupported)).apply ((((unsupported)).apply ((xlibpath)) ((x_)) ((((xrange)).apply (200))))))) ("") ("# comment") ("import site"))) (FALSE))
                        xsys_prefix.write (((((xos).xpath).xdirname)).apply ((xexe_file)))
                        xenv.write (((((xos).xenviron).xcopy)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PYTHONPATH"))) ("from-env"))
                        (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("PATH"))) (((("{};{}".xformat)).apply ((xexe_prefix)) (((((xos).xgetenv)).apply ("PATH"))))))
                        xrc.write (((unsupported)).apply (((xsubprocess).xcall)) ((((unsupported)).apply ((xexe_file)) ("-c") (((((unsupported)).apply).mod (((unsupported)).apply ((((((xos).xpath).xjoin)).apply ((xsys_prefix)) ("fake-path-name"))) ((xlibpath)) ((((((xos).xpath).xjoin)).apply ((xsys_prefix)) ("from-env")))))))) ((xenv)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xrc)) ("sys.path is incorrect"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)