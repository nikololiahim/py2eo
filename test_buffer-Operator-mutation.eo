memory > xlist
memory > xlocals
memory > xND_MAX_NDIM
memory > xcm
memory > xdestitems
memory > xk
memory > xarray
memory > xlo
memory > xslices
memory > xImportError
memory > xflags
memory > xPyBUF_RECORDS_RO
memory > xstep
memory > xc
memory > xRuntimeError
memory > xmode
memory > xbits
memory > xindex
memory > xenumerate
memory > xND_GETBUF_FAIL
memory > xPyBUF_FULL
memory > xrequest
memory > xValueError
memory > xND_REDIRECT
memory > xscalar
memory > x_tshape
memory > xPyBUF_WRITABLE
memory > xstr
memory > xio
memory > xwarnings
memory > xPyBUF_INDIRECT
memory > xbyteorder
memory > xND_WRITABLE
memory > xreq
memory > xproduct
memory > xget_sizeof_void_p
memory > xlshape
memory > xsitems
memory > xlslice
memory > xtitems
memory > xto_bytelist
memory > xperm
memory > xlslices
memory > xfmt
memory > xt
memory > xind
memory > xmemlen
memory > xshape
memory > xrange
memory > xpy_buffer_to_contiguous
memory > xINT
memory > xchar
memory > xrshape
memory > xNotImplementedError
memory > xND_PIL
memory > xdivmod
memory > xeval
memory > x_
memory > xchoice
memory > xIndexError
memory > xbytearray
memory > xl
memory > xPyBUF_STRIDED
memory > xPyBUF_ND
memory > xhi
memory > xdfmt
memory > xitemsize
memory > xprint
memory > xany
memory > xf
memory > xrandrange
memory > xFraction
memory > xsfmt
memory > xPyBUF_ANY_CONTIGUOUS
memory > xint
memory > xPyBUF_FORMAT
memory > xException
memory > xr
memory > xitems
memory > xOverflowError
memory > xsample
memory > xsum
memory > xx
memory > xPyBUF_F_CONTIGUOUS
memory > xi
memory > xPyBUF_RECORDS
memory > xchars
memory > xsupport
memory > xsys
memory > xbool
memory > xbytes
memory > xexp
memory > xNotImplemented
memory > xND_GETBUF_UNDEFINED
memory > xslice_indices
memory > xtuple
memory > xBEPoint
memory > xfloat
memory > xis_contiguous
memory > xget_pointer
memory > xchr
memory > xmm
memory > xcontrol
memory > xdestshape
memory > xPyBUF_CONTIG_RO
memory > xos
memory > xsublst
memory > xslice
memory > xitem
memory > xgetattr
memory > xPyBUF_SIMPLE
memory > xv
memory > xget_contiguous
memory > xUnicodeEncodeError
memory > xe
memory > xbytefmt
memory > xPyBUF_STRIDED_RO
memory > xord
memory > xattr
memory > xDecimal
memory > xstrides
memory > xzip
memory > xunittest
memory > x_range
memory > xhash
memory > xcmp_contig
memory > xPyBUF_FULL_RO
memory > xn
memory > xobject
memory > xndim
memory > xorder
memory > xmemoryview
memory > xoffset
memory > xPyBUF_C_CONTIGUOUS
memory > xND_VAREXPORT
memory > xstaticarray
memory > xsingle_item
memory > xND_FORTRAN
memory > xPyBUF_CONTIG
memory > xlen
memory > xm3
memory > xj
memory > xisinstance
memory > xIDX
memory > xPyBUF_WRITE
memory > xBufferError
memory > xPyBUF_STRIDES
memory > xTypeError
memory > x__name__
memory > xPyBUF_READ
memory > xsingleitem
[] > test_buffer
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xMODE
        memory > xtest_memoryview_release
        memory > xBYTEFMT
        memory > xtest_memoryview_get_contiguous
        memory > xindices
        memory > xstruct_items
        memory > xtest_ndarray_tolist_null_strides
        memory > x_ca
        memory > xndarray
        memory > xtest_ndarray_multidim
        memory > xcarray
        memory > xtest_memoryview_serializing
        memory > xflatten
        memory > xmemory_index
        memory > xndarray_print
        memory > xMULT
        memory > xtest_memoryview_tolist
        memory > xtest_memoryview_array
        memory > xtest_ndarray_index_null_strides
        memory > xtest_ndarray_index_setitem_single
        memory > xrandrange_fmt
        memory > xgetindex
        memory > xtest_ndarray_format_scalar
        memory > xtest_memoryview_check_released
        memory > xget_item
        memory > xrand_structure
        memory > xtest_ndarray_slice_zero_shape
        memory > xrslices_ndim
        memory > xcap
        memory > xgenslices_ndim
        memory > xSHORT_TEST
        memory > xtest_memoryview_redirect
        memory > xtest_ndarray_get_pointer
        memory > xtest_memoryview_sizeof
        memory > xtest_memoryview_slice
        memory > xtest_ndarray_index_scalar
        memory > xMEMORYVIEW
        memory > xnative_type_range
        memory > xpermutations
        memory > xstrides_from_shape
        memory > xverify
        memory > xgencastshapes
        memory > xfarray
        memory > xrandslice_from_shape
        memory > xtest_py_buffer_to_contiguous
        memory > xNON_BYTE_FORMAT
        memory > xctypes
        memory > xITERATIONS
        memory > xNATIVE
        memory > xrand_aligned_slices
        memory > xtest_memoryview_compare_not_equal
        memory > xtest_memoryview_compare_random_formats
        memory > xverify_structure
        memory > xtest_ndarray_cmp_contig
        memory > xtest_memoryview_compare_multidim_zero_shape
        memory > xtest_ndarray_index_getitem_multidim
        memory > xtest_ndarray_getbuf
        memory > xtest_memoryview_from_static_exporter
        memory > xtest_memoryview_compare_multidim_c
        memory > xassert_out_of_bounds_error
        memory > xtest_ndarray_slice_redundant_suboffsets
        memory > xnumpy_array_from_structure
        memory > xsetUp
        memory > xverify_getbuf
        memory > xtest_memoryview_repr
        memory > xtest_ndarray_sequence
        memory > xtest_ndarray_index_invalid
        memory > xis_byte_format
        memory > xmultislice_assign
        memory > xtest_memoryview_compare_zero_strides
        memory > xtest_ndarray_linked_list
        memory > xgenslices
        memory > xm_assign
        memory > xtest_memoryview_index
        memory > xtest_memoryview_compare_special_cases
        memory > xtest_memoryview_assign
        memory > xcmp_structure
        memory > xranditems_from_structure
        memory > xis_overlapping
        memory > xtest_memoryview_tobytes
        memory > xslice_shape
        memory > xmultislice
        memory > xlistp
        memory > x_flatten
        memory > x_fa
        memory > xtest_memoryview_compare_multidim_fortran
        memory > xtest_memoryview_sequence
        memory > xtest_ndarray_offset
        memory > xatomp
        memory > xiter_format
        memory > xtest_memoryview_compare_multidim_mixed
        memory > xgen_item
        memory > xranditems
        memory > xnumpy_array
        memory > xgen_items
        memory > xcast_items
        memory > xstruct
        memory > xtest_memoryview_construction
        memory > xtest_memoryview_cast_zero_strides
        memory > xtest_memoryview_cast
        memory > xrslice
        memory > xMAXSHAPE
        memory > xtest_memoryview_compare_multidim_zero_strides
        memory > xtest_issue_7385
        memory > xtest_ndarray_format_strides
        memory > xtest_memoryview_compare_ndim_zero
        memory > xtest_ndarray_zero_strides
        memory > xprod
        memory > xiter_mode
        memory > xtest_memoryview_cast_invalid
        memory > xtest_ndarray_slice_assign_single
        memory > xtest_ndarray_zero_shape
        memory > xtest_memoryview_cast_zero_shape
        memory > xMAXDIM
        memory > xrpermutation
        memory > xtest_memoryview_compare_zero_shape
        memory > xtest_memoryview_struct_module
        memory > xtest_ndarray_random_invalid
        memory > xtest_ndarray_slice_invalid
        memory > xtest_memoryview_getbuffer_undefined
        memory > xtest_memoryview_cast_1D_ND
        memory > xtest_memoryview_compare_ndim_one
        memory > xis_memoryview_format
        memory > xfmtdict
        memory > xtest_ndarray_format_shape
        memory > xSTANDARD
        memory > xtest_memoryview_compare_multidim_suboffsets
        memory > xrslices
        memory > xtest_ndarray_hash
        memory > xcheck_sizeof
        memory > xtest_ndarray_random
        memory > xtest_ndarray_slice_multidim
        memory > xtest_ndarray_fortran
        memory > xtest_ndarray_re_export
        memory > xtest_memoryview_hash
        memory > xtest_ndarray_slice_assign_multidim
        memory > xndarray_from_structure
        memory > xrandslice_from_slicelen
        memory > xtest_ndarray_memoryview_from_buffer
        memory > xtranspose
        memory > xARRAY
        memory > xtest_ndarray_index_getitem_single
        memory > xtest_ndarray_exceptions
        memory > xtest_ndarray_random_slice_assign
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xndarray.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xstruct.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xctypes.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) (((xos).xenviron)) (((((xwarnings).xcatch_warnings)).apply)))
                (((unsupported)).apply)
              xnumpy_array.write "None: is there a None literal in the EO language?"
            xSHORT_TEST.write TRUE
            xNATIVE.write (((unsupported)).apply ("?") (0) ("c") (0) ("b") (0) ("B") (0) ("h") (0) ("H") (0) ("i") (0) ("I") (0) ("l") (0) ("L") (0) ("n") (0) ("N") (0) ("f") (0) ("d") (0) ("P") (0))
            (xnumpy_array).if
              seq
                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xNATIVE)) ("n"))))))
                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xNATIVE)) ("N"))))))
            (xstruct).if
              (((unsupported)).apply (((xstruct).xerror)))
                seq
                  bogusForceDataize.write ((((xstruct).xpack)).apply ("Q") (((((unsupported)).apply (2) (64)).sub 1)))
                  (((unsupported)).apply ((((unsupported)).apply ((xNATIVE)) ("q"))) (0))
                  (((unsupported)).apply ((((unsupported)).apply ((xNATIVE)) ("Q"))) (0))
            xSTANDARD.write (((unsupported)).apply ("?") ((((unsupported)).apply (0) (2))) ("c") ((((unsupported)).apply (0) ((((unsupported)).apply (1) (8))))) ("b") ((((unsupported)).apply (((((unsupported)).apply (1) (7)).neg)) ((((unsupported)).apply (1) (7))))) ("B") ((((unsupported)).apply (0) ((((unsupported)).apply (1) (8))))) ("h") ((((unsupported)).apply (((((unsupported)).apply (1) (15)).neg)) ((((unsupported)).apply (1) (15))))) ("H") ((((unsupported)).apply (0) ((((unsupported)).apply (1) (16))))) ("i") ((((unsupported)).apply (((((unsupported)).apply (1) (31)).neg)) ((((unsupported)).apply (1) (31))))) ("I") ((((unsupported)).apply (0) ((((unsupported)).apply (1) (32))))) ("l") ((((unsupported)).apply (((((unsupported)).apply (1) (31)).neg)) ((((unsupported)).apply (1) (31))))) ("L") ((((unsupported)).apply (0) ((((unsupported)).apply (1) (32))))) ("q") ((((unsupported)).apply (((((unsupported)).apply (1) (63)).neg)) ((((unsupported)).apply (1) (63))))) ("Q") ((((unsupported)).apply (0) ((((unsupported)).apply (1) (64))))) ("f") ((((unsupported)).apply (((((unsupported)).apply (1) (63)).neg)) ((((unsupported)).apply (1) (63))))) ("d") ((((unsupported)).apply (((((unsupported)).apply (1) (1023)).neg)) ((((unsupported)).apply (1) (1023))))))
            xnative_type_range.write
              [xfmt]
                memory > xlh
                seq > @
                  seq
                    unsupported
                    ((xfmt).eq "c").if
                      xlh.write (((unsupported)).apply (0) (256))
                      ((xfmt).eq "?").if
                        xlh.write (((unsupported)).apply (0) (2))
                        ((xfmt).eq "f").if
                          xlh.write (((unsupported)).apply (((((unsupported)).apply (1) (63)).neg)) ((((unsupported)).apply (1) (63))))
                          ((xfmt).eq "d").if
                            xlh.write (((unsupported)).apply (((((unsupported)).apply (1) (1023)).neg)) ((((unsupported)).apply (1) (1023))))
                            seq
                              (((unsupported)).apply ((xexp)) ((((unsupported)).apply (128) (127) (64) (63) (32) (31) (16) (15) (8) (7))))
                                (((unsupported)).apply (((xstruct).xerror)))
                                  seq
                                    bogusForceDataize.write ((((xstruct).xpack)).apply ((xfmt)) (((((unsupported)).apply (1) ((xexp))).sub 1)))
                                    (((unsupported)).apply)
                              xlh.write (((xexp).and 1).if (((unsupported)).apply (((((unsupported)).apply (1) ((xexp))).neg)) ((((unsupported)).apply (1) ((xexp))))) (((unsupported)).apply (0) ((((unsupported)).apply (1) ((xexp))))))
                    (((unsupported)).apply ((xlh)))
            xfmtdict.write (((unsupported)).apply ("") ((xNATIVE)) ("@") ((xNATIVE)) ("<") ((xSTANDARD)) (">") ((xSTANDARD)) ("=") ((xSTANDARD)) ("!") ((xSTANDARD)))
            (xstruct).if
              (((unsupported)).apply ((xfmt)) ((((unsupported)).apply ((xfmtdict)) ("@"))))
                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfmtdict)) ("@"))) ((xfmt)))) ((((xnative_type_range)).apply ((xfmt)))))
            xMEMORYVIEW.write ((((xNATIVE).xcopy)).apply)
            xARRAY.write ((((xNATIVE).xcopy)).apply)
            (((unsupported)).apply ((xk)) ((xNATIVE)))
              ((((unsupported)).apply ((xk)) ("bBhHiIlLfd")).not).if
                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xARRAY)) ((xk)))))))
            xBYTEFMT.write ((((xNATIVE).xcopy)).apply)
            (((unsupported)).apply ((xk)) ((xNATIVE)))
              ((((unsupported)).apply ((xk)) ("Bbc")).not).if
                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xBYTEFMT)) ((xk)))))))
            (((unsupported)).apply ((((unsupported)).apply ((xfmtdict)) ("m"))) ((xMEMORYVIEW)))
            (((unsupported)).apply ((((unsupported)).apply ((xfmtdict)) ("@m"))) ((xMEMORYVIEW)))
            (((unsupported)).apply ((((unsupported)).apply ((xfmtdict)) ("a"))) ((xARRAY)))
            (((unsupported)).apply ((((unsupported)).apply ((xfmtdict)) ("b"))) ((xBYTEFMT)))
            (((unsupported)).apply ((((unsupported)).apply ((xfmtdict)) ("@b"))) ((xBYTEFMT)))
            xMODE.write 0
            xMULT.write 1
            xcap.write (((unsupported)).apply ("ndarray") ((((unsupported)).apply ((((unsupported)).apply ("") ("@") ("<") (">") ("=") ("!"))) ((((unsupported)).apply ("") ("1") ("2") ("3"))))) ("array") ((((unsupported)).apply ((((unsupported)).apply ("a"))) ((((unsupported)).apply (""))))) ("numpy") ((((unsupported)).apply ((((unsupported)).apply (""))) ((((unsupported)).apply (""))))) ("memoryview") ((((unsupported)).apply ((((unsupported)).apply ("@m") ("m"))) ((((unsupported)).apply (""))))) ("bytefmt") ((((unsupported)).apply ((((unsupported)).apply ("@b") ("b"))) ((((unsupported)).apply (""))))))
            xrandrange_fmt.write
              [xmode xchar xobj]
                memory > xx
                seq > @
                  seq
                    (((unsupported)).apply)
                    xx.write (((xrandrange)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfmtdict)) ((xmode)))) ((xchar)))))))
                    ((xchar).eq "c").if
                      seq
                        xx.write (((xbytes)).apply ((((unsupported)).apply ((xx)))))
                        (((xobj).eq "numpy").and ((xx).eq "x00")).if
                          xx.write "x01"
                    ((xchar).eq "?").if
                      xx.write (((xbool)).apply ((xx)))
                    (((xchar).eq "f").or ((xchar).eq "d")).if
                      seq
                        xx.write ((((xstruct).xpack)).apply ((xchar)) ((xx)))
                        xx.write (((unsupported)).apply (((((xstruct).xunpack)).apply ((xchar)) ((xx)))) (0))
                    (((unsupported)).apply ((xx)))
            xgen_item.write
              [xfmt xobj]
                memory > xx
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xmode)) ((xchars)))) (((((xfmt).xsplit)).apply ("#"))))
                    xx.write (((unsupported)).apply)
                    (((unsupported)).apply ((xc)) ((xchars)))
                      bogusForceDataize.write ((((xx).xappend)).apply ((((xrandrange_fmt)).apply ((xmode)) ((xc)) ((xobj)))))
                    (((unsupported)).apply ((((((xlen)).apply ((xx))).eq 1).if (((unsupported)).apply ((xx)) (0)) (((xtuple)).apply ((xx))))))
            xgen_items.write
              [xn xfmt xobj]
                memory > xlst
                seq > @
                  seq
                    unsupported
                    ((xn).eq 0).if
                      (((unsupported)).apply ((((xgen_item)).apply ((xfmt)) ((xobj)))))
                    xlst.write ((((unsupported)).apply (0)).mul (xn))
                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((xn)))))
                      (((unsupported)).apply ((((unsupported)).apply ((xlst)) ((xi)))) ((((xgen_item)).apply ((xfmt)) ((xobj)))))
                    (((unsupported)).apply ((xlst)))
            xstruct_items.write
              [xn xobj]
                memory > xmode
                memory > xxfmt
                memory > xnmemb
                memory > xfmt
                memory > xchar
                memory > xitems
                memory > xitem
                memory > xmultiplier
                seq > @
                  seq
                    xmode.write (((xchoice)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcap)) ((xobj)))) ((xMODE)))))
                    xxfmt.write ((xmode).sub "#")
                    xfmt.write ((((xmode).xstrip)).apply ("amb"))
                    xnmemb.write (((xrandrange)).apply (2) (10))
                    (((unsupported)).apply ((x_)) ((((xrange)).apply ((xnmemb)))))
                      seq
                        xchar.write (((xchoice)).apply ((((xtuple)).apply ((((unsupported)).apply ((xfmtdict)) ((xmode)))))))
                        xmultiplier.write (((xchoice)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcap)) ((xobj)))) ((xMULT)))))
                        (((unsupported)).apply ((xxfmt)) (((xchar).mul (((xint)).apply (((xmultiplier).if (xmultiplier) 1))))))
                        (((unsupported)).apply ((xfmt)) (((xmultiplier).sub (xchar))))
                    xitems.write (((xgen_items)).apply ((xn)) ((xxfmt)) ((xobj)))
                    xitem.write (((xgen_item)).apply ((xxfmt)) ((xobj)))
                    (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((xitem)))))
            xranditems.write
              [xn xobj xmode xchar]
                memory > xmultiplier
                memory > xitem
                memory > xfmt
                memory > xitems
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xmode)) ("None: is there a None literal in the EO language?")).if
                      xmode.write (((xchoice)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcap)) ((xobj)))) ((xMODE)))))
                    (((unsupported)).apply ((xchar)) ("None: is there a None literal in the EO language?")).if
                      xchar.write (((xchoice)).apply ((((xtuple)).apply ((((unsupported)).apply ((xfmtdict)) ((xmode)))))))
                    xmultiplier.write (((xchoice)).apply ((((unsupported)).apply ((((unsupported)).apply ((xcap)) ((xobj)))) ((xMULT)))))
                    xfmt.write (((xmode).sub "#").sub ((xchar).mul (((xint)).apply (((xmultiplier).if (xmultiplier) 1)))))
                    xitems.write (((xgen_items)).apply ((xn)) ((xfmt)) ((xobj)))
                    xitem.write (((xgen_item)).apply ((xfmt)) ((xobj)))
                    xfmt.write ((((((xmode).xstrip)).apply ("amb")).sub (xmultiplier)).sub (xchar))
                    (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((xitem)))))
            xiter_mode.write
              [xn xobj]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((xmode)) ((((unsupported)).apply ((((unsupported)).apply ((xcap)) ((xobj)))) ((xMODE)))))
                      (((unsupported)).apply ((xchar)) ((((unsupported)).apply ((xfmtdict)) ((xmode)))))
                        (((unsupported)).apply ((((xranditems)).apply ((xn)) ((xobj)) ((xmode)) ((xchar)))))
            xiter_format.write
              [xnitems xtestobj]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xt)) ((((xiter_mode)).apply ((xnitems)) ((xtestobj)))))
                      (((unsupported)).apply ((xt)))
                    ((xtestobj).neq "ndarray").if
                      (((unsupported)).apply)
                    (((unsupported)).apply ((((xstruct_items)).apply ((xnitems)) ((xtestobj)))))
            xis_byte_format.write
              [xfmt]
                seq > @
                  (((unsupported)).apply ((((((unsupported)).apply ("c") ((xfmt))).or (((unsupported)).apply ("b") ((xfmt)))).or (((unsupported)).apply ("B") ((xfmt))))))
            xis_memoryview_format.write
              [xfmt]
                memory > xx
                seq > @
                  seq
                    unsupported
                    xx.write (((xlen)).apply ((xfmt)))
                    (((unsupported)).apply (((((xx).eq 1).or (((xx).eq 2).and ((((unsupported)).apply ((xfmt)) (0)).eq "@"))).and (((unsupported)).apply ((((unsupported)).apply ((xfmt)) (((xx).sub 1)))) ((xMEMORYVIEW))))))
            xNON_BYTE_FORMAT.write (((unsupported)).apply ((xc)) ((xc)) ((((unsupported)).apply ((xfmtdict)) ("@"))) (((((xis_byte_format)).apply ((xc))).not)))
            xatomp.write
              [xlst]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply (((((xisinstance)).apply ((xlst)) ((xlist))).not)))
            xlistp.write
              [xlst]
                seq > @
                  (((unsupported)).apply ((((xisinstance)).apply ((xlst)) ((xlist)))))
            xprod.write
              [xlst]
                memory > xx
                seq > @
                  seq
                    unsupported
                    ((((xlen)).apply ((xlst))).eq 0).if
                      (((unsupported)).apply (0))
                    xx.write (((unsupported)).apply ((xlst)) (0))
                    (((unsupported)).apply ((xv)) ((((unsupported)).apply ((xlst)) ((((unsupported)).apply (1))))))
                      (((unsupported)).apply ((xx)) ((xv)))
                    (((unsupported)).apply ((xx)))
            xstrides_from_shape.write
              [xndim xshape xitemsize xlayout]
                memory > xstrides
                seq > @
                  seq
                    (((unsupported)).apply)
                    ((xndim).eq 0).if
                      (((unsupported)).apply ((((unsupported)).apply)))
                    ((xlayout).eq "C").if
                      seq
                        xstrides.write ((((xlist)).apply ((((unsupported)).apply ((xshape)) ((((unsupported)).apply (1)))))).sub (((unsupported)).apply ((xitemsize))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (((xndim).sub 2)) ((1.neg)) ((1.neg)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xstrides)) ((xi)))) ((((unsupported)).apply ((xstrides)) (((xi).sub 1)))))
                      seq
                        xstrides.write ((((unsupported)).apply ((xitemsize))).sub (((xlist)).apply ((((unsupported)).apply ((xshape)) ((((unsupported)).apply ((1.neg))))))))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1) ((xndim)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xstrides)) ((xi)))) ((((unsupported)).apply ((xstrides)) (((xi).sub 1)))))
                    (((unsupported)).apply ((xstrides)))
            x_ca.write
              [xitems xs]
                memory > xstart
                memory > xstride
                memory > xlst
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xatomp)).apply ((xitems))).if
                      (((unsupported)).apply ((xitems)))
                    ((((xlen)).apply ((xs))).eq 0).if
                      (((unsupported)).apply ((((unsupported)).apply ((xitems)) (0))))
                    xlst.write ((((unsupported)).apply (0)).mul (((unsupported)).apply ((xs)) (0)))
                    xstride.write ((((unsupported)).apply ((xs)) (0)).if (((unsupported)).apply ((((xlen)).apply ((xitems)))) ((((unsupported)).apply ((xs)) (0)))) 0)
                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((((unsupported)).apply ((xs)) (0))))))
                      seq
                        xstart.write ((xi).mul (xstride))
                        (((unsupported)).apply ((((unsupported)).apply ((xlst)) ((xi)))) ((((x_ca)).apply ((((unsupported)).apply ((xitems)) ((((unsupported)).apply ((xstart)) (((xstart).sub (xstride))))))) ((((unsupported)).apply ((xs)) ((((unsupported)).apply (1))))))))
                    (((unsupported)).apply ((xlst)))
            x_fa.write
              [xitems xs]
                memory > xstride
                memory > xlst
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xatomp)).apply ((xitems))).if
                      (((unsupported)).apply ((xitems)))
                    ((((xlen)).apply ((xs))).eq 0).if
                      (((unsupported)).apply ((((unsupported)).apply ((xitems)) (0))))
                    xlst.write ((((unsupported)).apply (0)).mul (((unsupported)).apply ((xs)) (0)))
                    xstride.write (((unsupported)).apply ((xs)) (0))
                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((((unsupported)).apply ((xs)) (0))))))
                      (((unsupported)).apply ((((unsupported)).apply ((xlst)) ((xi)))) ((((x_fa)).apply ((((unsupported)).apply ((xitems)) ((((unsupported)).apply ((xi)) ((xstride)))))) ((((unsupported)).apply ((xs)) ((((unsupported)).apply (1))))))))
                    (((unsupported)).apply ((xlst)))
            xcarray.write
              [xitems xshape]
                seq > @
                  seq
                    (((((xlistp)).apply ((xitems))).and ((((unsupported)).apply (0) ((xshape))).not)).and ((((xprod)).apply ((xshape))).neq (((xlen)).apply ((xitems))))).if
                      (((unsupported)).apply ((((xValueError)).apply ("prod(shape) != len(items)"))))
                    (((unsupported)).apply ((((x_ca)).apply ((xitems)) ((xshape)))))
            xfarray.write
              [xitems xshape]
                seq > @
                  seq
                    (((((xlistp)).apply ((xitems))).and ((((unsupported)).apply (0) ((xshape))).not)).and ((((xprod)).apply ((xshape))).neq (((xlen)).apply ((xitems))))).if
                      (((unsupported)).apply ((((xValueError)).apply ("prod(shape) != len(items)"))))
                    (((unsupported)).apply ((((x_fa)).apply ((xitems)) ((xshape)))))
            xindices.write
              [xshape]
                memory > xiterables
                seq > @
                  seq
                    unsupported
                    xiterables.write (((unsupported)).apply ((((xrange)).apply ((xv)))) ((xv)) ((xshape)))
                    (((unsupported)).apply ((((xproduct)).apply ((((unsupported)).apply ((xiterables)))))))
            xgetindex.write
              [xndim xind xstrides]
                memory > xret
                seq > @
                  seq
                    unsupported
                    xret.write 0
                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((xndim)))))
                      (((unsupported)).apply ((xret)) (((((unsupported)).apply ((xstrides)) ((xi))).mul (((unsupported)).apply ((xind)) ((xi))))))
                    (((unsupported)).apply ((xret)))
            xtranspose.write
              [xsrc xshape]
                memory > xto
                memory > xdest
                memory > xfr
                memory > xndim
                memory > xdstrides
                memory > xsstrides
                seq > @
                  seq
                    (((unsupported)).apply)
                    ((xshape).not).if
                      (((unsupported)).apply ((xsrc)))
                    xndim.write (((xlen)).apply ((xshape)))
                    xsstrides.write (((xstrides_from_shape)).apply ((xndim)) ((xshape)) (1) ("C"))
                    xdstrides.write (((xstrides_from_shape)).apply ((xndim)) ((((unsupported)).apply ((xshape)) ((((unsupported)).apply ((1.neg)))))) (1) ("C"))
                    xdest.write ((((unsupported)).apply (0)).mul (((xlen)).apply ((xsrc))))
                    (((unsupported)).apply ((xind)) ((((xindices)).apply ((xshape)))))
                      seq
                        xfr.write (((xgetindex)).apply ((xndim)) ((xind)) ((xsstrides)))
                        xto.write (((xgetindex)).apply ((xndim)) ((((unsupported)).apply ((xind)) ((((unsupported)).apply ((1.neg)))))) ((xdstrides)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdest)) ((xto)))) ((((unsupported)).apply ((xsrc)) ((xfr)))))
                    (((unsupported)).apply ((xdest)))
            x_flatten.write
              [xlst]
                seq > @
                  seq
                    unsupported
                    ((xlst).eq (((unsupported)).apply)).if
                      (((unsupported)).apply ((xlst)))
                    (((xatomp)).apply ((xlst))).if
                      (((unsupported)).apply ((((unsupported)).apply ((xlst)))))
                    (((unsupported)).apply (((((x_flatten)).apply ((((unsupported)).apply ((xlst)) (0)))).sub (((x_flatten)).apply ((((unsupported)).apply ((xlst)) ((((unsupported)).apply (1)))))))))
            xflatten.write
              [xlst]
                seq > @
                  seq
                    unsupported
                    (((xatomp)).apply ((xlst))).if
                      (((unsupported)).apply ((xlst)))
                    (((unsupported)).apply ((((x_flatten)).apply ((xlst)))))
            xslice_shape.write
              [xlst xslices]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xatomp)).apply ((xlst))).if
                      (((unsupported)).apply ((((unsupported)).apply)))
                    (((unsupported)).apply (((((unsupported)).apply ((((xlen)).apply ((((unsupported)).apply ((xlst)) ((((unsupported)).apply ((xslices)) (0)))))))).sub (((xslice_shape)).apply ((((unsupported)).apply ((xlst)) (0))) ((((unsupported)).apply ((xslices)) ((((unsupported)).apply (1)))))))))
            xmultislice.write
              [xlst xslices]
                seq > @
                  seq
                    unsupported
                    (((xatomp)).apply ((xlst))).if
                      (((unsupported)).apply ((xlst)))
                    (((unsupported)).apply ((((unsupported)).apply ((((xmultislice)).apply ((xsublst)) ((((unsupported)).apply ((xslices)) ((((unsupported)).apply (1))))))) ((xsublst)) ((((unsupported)).apply ((xlst)) ((((unsupported)).apply ((xslices)) (0))))))))
            xm_assign.write
              [xllst xrlst xlslices xrslices]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xatomp)).apply ((xrlst))).if
                      (((unsupported)).apply ((xrlst)))
                    xrlst.write (((unsupported)).apply ((((xm_assign)).apply ((xl)) ((xr)) ((((unsupported)).apply ((xlslices)) ((((unsupported)).apply (1))))) ((((unsupported)).apply ((xrslices)) ((((unsupported)).apply (1))))))) ((((unsupported)).apply ((xl)) ((xr)))) ((((xzip)).apply ((((unsupported)).apply ((xllst)) ((((unsupported)).apply ((xlslices)) (0))))) ((((unsupported)).apply ((xrlst)) ((((unsupported)).apply ((xrslices)) (0))))))))
                    (((unsupported)).apply ((((unsupported)).apply ((xllst)) ((((unsupported)).apply ((xlslices)) (0))))) ((xrlst)))
                    (((unsupported)).apply ((xllst)))
            xcmp_structure.write
              [xllst xrlst xlslices xrslices]
                memory > xrshape
                memory > xlshape
                seq > @
                  seq
                    unsupported
                    xlshape.write (((xslice_shape)).apply ((xllst)) ((xlslices)))
                    xrshape.write (((xslice_shape)).apply ((xrlst)) ((xrslices)))
                    ((((xlen)).apply ((xlshape))).neq (((xlen)).apply ((xrshape)))).if
                      (((unsupported)).apply ((1.neg)))
                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((((xlen)).apply ((xlshape)))))))
                      seq
                        ((((unsupported)).apply ((xlshape)) ((xi))).neq (((unsupported)).apply ((xrshape)) ((xi)))).if
                          (((unsupported)).apply ((1.neg)))
                        ((((unsupported)).apply ((xlshape)) ((xi))).eq 0).if
                          (((unsupported)).apply (0))
                    (((unsupported)).apply (0))
            xmultislice_assign.write
              [xllst xrlst xlslices xrslices]
                seq > @
                  seq
                    unsupported
                    ((((xcmp_structure)).apply ((xllst)) ((xrlst)) ((xlslices)) ((xrslices))).less 0).if
                      (((unsupported)).apply ((((xValueError)).apply ("lvalue and rvalue have different structures"))))
                    (((unsupported)).apply ((((xm_assign)).apply ((xllst)) ((xrlst)) ((xlslices)) ((xrslices)))))
            xverify_structure.write
              [xmemlen xitemsize xndim xshape xstrides xoffset]
                memory > ximax
                memory > ximin
                seq > @
                  seq
                    (((unsupported)).apply)
                    ((xoffset).mod (xitemsize)).if
                      (((unsupported)).apply (FALSE))
                    (((xoffset).less 0).or (((xoffset).sub (xitemsize)).greater (xmemlen))).if
                      (((unsupported)).apply (FALSE))
                    (((xany)).apply ((((unsupported)).apply (((xv).mod (xitemsize))) ((xv)) ((xstrides))))).if
                      (((unsupported)).apply (FALSE))
                    ((xndim).leq 0).if
                      (((unsupported)).apply (((((xndim).eq 0).and ((xshape).not)).and ((xstrides).not))))
                    (((unsupported)).apply (0) ((xshape))).if
                      (((unsupported)).apply (TRUE))
                    ximin.write (((xsum)).apply ((((unsupported)).apply (((((unsupported)).apply ((xstrides)) ((xj))).mul ((((unsupported)).apply ((xshape)) ((xj))).sub 1))) ((xj)) ((((xrange)).apply ((xndim)))) (((((unsupported)).apply ((xstrides)) ((xj))).leq 0)))))
                    ximax.write (((xsum)).apply ((((unsupported)).apply (((((unsupported)).apply ((xstrides)) ((xj))).mul ((((unsupported)).apply ((xshape)) ((xj))).sub 1))) ((xj)) ((((xrange)).apply ((xndim)))) (((((unsupported)).apply ((xstrides)) ((xj))).greater 0)))))
                    (((unsupported)).apply (((0.leq ((xoffset).sub (ximin))).and ((((xoffset).sub (ximax)).sub (xitemsize)).leq (xmemlen)))))
            xget_item.write
              [xlst xindices]
                seq > @
                  seq
                    (((unsupported)).apply ((xi)) ((xindices)))
                      xlst.write (((unsupported)).apply ((xlst)) ((xi)))
                    (((unsupported)).apply ((xlst)))
            xmemory_index.write
              [xindices xt]
                memory > xp
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xmemlen)) ((xitemsize)) ((xndim)) ((xshape)) ((xstrides)) ((xoffset)))) ((xt)))
                    xp.write (xoffset)
                    (((unsupported)).apply ((xi)) ((((xrange)).apply ((xndim)))))
                      (((unsupported)).apply ((xp)) (((((unsupported)).apply ((xstrides)) ((xi))).mul (((unsupported)).apply ((xindices)) ((xi))))))
                    (((unsupported)).apply ((xp)))
            xis_overlapping.write
              [xt]
                memory > xvisited
                memory > xbit
                memory > xi
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xmemlen)) ((xitemsize)) ((xndim)) ((xshape)) ((xstrides)) ((xoffset)))) ((xt)))
                    xvisited.write (((unsupported)).apply (1) ((xmemlen)))
                    (((unsupported)).apply ((xind)) ((((xindices)).apply ((xshape)))))
                      seq
                        xi.write (((xmemory_index)).apply ((xind)) ((xt)))
                        xbit.write (((unsupported)).apply (1) ((xi)))
                        ((xvisited).and (xbit)).if
                          (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xvisited)) ((xbit)))
                    (((unsupported)).apply (FALSE))
            xrand_structure.write
              [xitemsize xvalid xmaxdim xmaxshape xshape]
                memory > xminshape
                memory > xmaxstride
                memory > xzero_stride
                memory > ximin
                memory > xstrides
                memory > xnitems
                memory > ximax
                memory > xmemlen
                memory > xn
                memory > xndim
                memory > xoffset
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((xshape).not).if
                      seq
                        xndim.write (((xrandrange)).apply (((xmaxdim).sub 1)))
                        ((xndim).eq 0).if
                          (xvalid).if
                            (((unsupported)).apply ((((unsupported)).apply ((xitemsize)) ((xitemsize)) ((xndim)) ((((unsupported)).apply)) ((((unsupported)).apply)) (0))))
                            seq
                              xnitems.write (((xrandrange)).apply (1) ((16.sub 1)))
                              xmemlen.write ((xnitems).mul (xitemsize))
                              xoffset.write (((((xrandrange)).apply (2)).eq 0).if ((xitemsize).neg) (xmemlen))
                              (((unsupported)).apply ((((unsupported)).apply ((xmemlen)) ((xitemsize)) ((xndim)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((xoffset)))))
                        xminshape.write 2
                        xn.write (((xrandrange)).apply (100))
                        (((xn).geq 95).and (xvalid)).if
                          xminshape.write 0
                          ((xn).geq 90).if
                            xminshape.write 1
                        xshape.write ((((unsupported)).apply (0)).mul (xndim))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((xndim)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xshape)) ((xi)))) ((((xrandrange)).apply ((xminshape)) (((xmaxshape).sub 1)))))
                      xndim.write (((xlen)).apply ((xshape)))
                    xmaxstride.write 5
                    xn.write (((xrandrange)).apply (100))
                    xzero_stride.write ((((xn).geq 95).and ((xn).and 1)).if TRUE FALSE)
                    xstrides.write ((((unsupported)).apply (0)).mul (xndim))
                    (((unsupported)).apply ((((unsupported)).apply ((xstrides)) (((xndim).sub 1)))) (((xitemsize).mul (((xrandrange)).apply (((xmaxstride).neg)) (((xmaxstride).sub 1))))))
                    (((xzero_stride).not).and ((((unsupported)).apply ((xstrides)) (((xndim).sub 1))).eq 0)).if
                      (((unsupported)).apply ((((unsupported)).apply ((xstrides)) (((xndim).sub 1)))) ((xitemsize)))
                    (((unsupported)).apply ((xi)) ((((xrange)).apply (((xndim).sub 2)) ((1.neg)) ((1.neg)))))
                      seq
                        (((unsupported)).apply ((xmaxstride)) (((((unsupported)).apply ((xshape)) (((xi).sub 1))).if (((unsupported)).apply ((xshape)) (((xi).sub 1))) 1)))
                        (xzero_stride).if
                          (((unsupported)).apply ((((unsupported)).apply ((xstrides)) ((xi)))) (((xitemsize).mul (((xrandrange)).apply (((xmaxstride).neg)) (((xmaxstride).sub 1))))))
                          (((unsupported)).apply ((((unsupported)).apply ((xstrides)) ((xi)))) ((((((unsupported)).apply ((((unsupported)).apply (1) ((1.neg)))) ((((xrandrange)).apply (2)))).mul (xitemsize)).mul (((xrandrange)).apply (1) (((xmaxstride).sub 1))))))
                    (((unsupported)).apply ((ximin)) ((ximax)) (0))
                    ((((unsupported)).apply (0) ((xshape))).not).if
                      seq
                        ximin.write (((xsum)).apply ((((unsupported)).apply (((((unsupported)).apply ((xstrides)) ((xj))).mul ((((unsupported)).apply ((xshape)) ((xj))).sub 1))) ((xj)) ((((xrange)).apply ((xndim)))) (((((unsupported)).apply ((xstrides)) ((xj))).leq 0)))))
                        ximax.write (((xsum)).apply ((((unsupported)).apply (((((unsupported)).apply ((xstrides)) ((xj))).mul ((((unsupported)).apply ((xshape)) ((xj))).sub 1))) ((xj)) ((((xrange)).apply ((xndim)))) (((((unsupported)).apply ((xstrides)) ((xj))).greater 0)))))
                    xnitems.write ((ximax).sub (ximin))
                    (xvalid).if
                      seq
                        xoffset.write (((ximin).neg).mul (xitemsize))
                        xmemlen.write ((xoffset).sub (((ximax).sub 1).mul (xitemsize)))
                      seq
                        xmemlen.write ((((ximin).neg).sub (ximax)).mul (xitemsize))
                        xoffset.write (((((xrandrange)).apply (2)).eq 0).if (((ximin).neg).sub (xitemsize)) (xmemlen))
                    (((unsupported)).apply ((((unsupported)).apply ((xmemlen)) ((xitemsize)) ((xndim)) ((xshape)) ((xstrides)) ((xoffset)))))
            xrandslice_from_slicelen.write
              [xslicelen xlistlen]
                memory > xstep
                memory > xmaxstart
                memory > xstop
                memory > xstart
                memory > xs
                memory > xmaxstep
                seq > @
                  seq
                    unsupported
                    xmaxstart.write ((xlistlen).sub (xslicelen))
                    xstart.write (((xrandrange)).apply (((xmaxstart).sub 1)))
                    xmaxstep.write ((xslicelen).if (((unsupported)).apply (((xlistlen).sub (xstart))) ((xslicelen))) 1)
                    xstep.write (((xrandrange)).apply (1) (((xmaxstep).sub 1)))
                    xstop.write ((xstart).sub ((xslicelen).mul (xstep)))
                    xs.write (((xslice)).apply ((xstart)) ((xstop)) ((xstep)))
                    (((unsupported)).apply ((((unsupported)).apply ((x_)) ((x_)) ((x_)) ((xcontrol)))) ((((xslice_indices)).apply ((xs)) ((xlistlen)))))
                    ((xcontrol).neq (xslicelen)).if
                      (((unsupported)).apply ((xRuntimeError)))
                    (((unsupported)).apply ((xs)))
            xrandslice_from_shape.write
              [xndim xshape]
                memory > xlslices
                memory > xslicelen
                memory > xl
                memory > xrslices
                seq > @
                  seq
                    (((unsupported)).apply)
                    xlslices.write ((((unsupported)).apply (0)).mul (xndim))
                    xrslices.write ((((unsupported)).apply (0)).mul (xndim))
                    (((unsupported)).apply ((xn)) ((((xrange)).apply ((xndim)))))
                      seq
                        xl.write (((unsupported)).apply ((xshape)) ((xn)))
                        xslicelen.write (((xl).greater 0).if (((xrandrange)).apply (1) (((xl).sub 1))) 0)
                        (((unsupported)).apply ((((unsupported)).apply ((xlslices)) ((xn)))) ((((xrandslice_from_slicelen)).apply ((xslicelen)) ((xl)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xrslices)) ((xn)))) ((((xrandslice_from_slicelen)).apply ((xslicelen)) ((xl)))))
                    (((unsupported)).apply ((((unsupported)).apply ((((xtuple)).apply ((xlslices)))) ((((xtuple)).apply ((xrslices)))))))
            xrand_aligned_slices.write
              [xmaxdim xmaxshape]
                memory > xstep
                memory > xminshape
                memory > xstop
                memory > xrshape
                memory > xstart
                memory > xs_small
                memory > xbig
                memory > xs_big
                memory > xall_random
                memory > xslicelen
                memory > xsmall
                memory > xlshape
                memory > xlslices
                memory > xn
                memory > xrslices
                memory > xndim
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xndim.write (((xrandrange)).apply (1) (((xmaxdim).sub 1)))
                    xminshape.write 2
                    xn.write (((xrandrange)).apply (100))
                    ((xn).geq 95).if
                      xminshape.write 0
                      ((xn).geq 90).if
                        xminshape.write 1
                    xall_random.write (((((xrandrange)).apply (100)).geq 80).if TRUE FALSE)
                    seq
                      xlshape.write ((((unsupported)).apply (0)).mul (xndim))
                      xrshape.write ((((unsupported)).apply (0)).mul (xndim))
                    seq
                      xlslices.write ((((unsupported)).apply (0)).mul (xndim))
                      xrslices.write ((((unsupported)).apply (0)).mul (xndim))
                    (((unsupported)).apply ((xn)) ((((xrange)).apply ((xndim)))))
                      seq
                        xsmall.write (((xrandrange)).apply ((xminshape)) (((xmaxshape).sub 1)))
                        xbig.write (((xrandrange)).apply ((xminshape)) (((xmaxshape).sub 1)))
                        ((xbig).less (xsmall)).if
                          (((unsupported)).apply ((((unsupported)).apply ((xbig)) ((xsmall)))) ((((unsupported)).apply ((xsmall)) ((xbig)))))
                        (xall_random).if
                          seq
                            xstart.write (((xrandrange)).apply (((xsmall).neg)) (((xsmall).sub 1)))
                            xstop.write (((xrandrange)).apply (((xsmall).neg)) (((xsmall).sub 1)))
                            xstep.write ((((unsupported)).apply ((((unsupported)).apply (1) ((1.neg)))) ((((xrandrange)).apply (2)))).mul (((xrandrange)).apply (1) (((xsmall).sub 2))))
                            xs_small.write (((xslice)).apply ((xstart)) ((xstop)) ((xstep)))
                            (((unsupported)).apply ((((unsupported)).apply ((x_)) ((x_)) ((x_)) ((xslicelen)))) ((((xslice_indices)).apply ((xs_small)) ((xsmall)))))
                          seq
                            xslicelen.write (((xsmall).greater 0).if (((xrandrange)).apply (1) (((xsmall).sub 1))) 0)
                            xs_small.write (((xrandslice_from_slicelen)).apply ((xslicelen)) ((xsmall)))
                        xs_big.write (((xrandslice_from_slicelen)).apply ((xslicelen)) ((xbig)))
                        ((((xrandrange)).apply (2)).eq 0).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrshape)) ((xn)))) ((((unsupported)).apply ((xlshape)) ((xn)))))) ((((unsupported)).apply ((xbig)) ((xsmall)))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrslices)) ((xn)))) ((((unsupported)).apply ((xlslices)) ((xn)))))) ((((unsupported)).apply ((xs_big)) ((xs_small)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrshape)) ((xn)))) ((((unsupported)).apply ((xlshape)) ((xn)))))) ((((unsupported)).apply ((xsmall)) ((xbig)))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrslices)) ((xn)))) ((((unsupported)).apply ((xlslices)) ((xn)))))) ((((unsupported)).apply ((xs_small)) ((xs_big)))))
                    (((unsupported)).apply ((((unsupported)).apply ((xlshape)) ((xrshape)) ((((xtuple)).apply ((xlslices)))) ((((xtuple)).apply ((xrslices)))))))
            xranditems_from_structure.write
              [xfmt xt]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xmemlen)) ((xitemsize)) ((x_)) ((x_)) ((x_)) ((x_)))) ((xt)))
                    (((unsupported)).apply ((((xgen_items)).apply ((((unsupported)).apply ((xmemlen)) ((xitemsize)))) (("#".sub (xfmt))) ("numpy"))))
            xndarray_from_structure.write
              [xitems xfmt xt xflags]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xmemlen)) ((xitemsize)) ((xndim)) ((xshape)) ((xstrides)) ((xoffset)))) ((xt)))
                    (((unsupported)).apply ((((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xstrides)) ((xfmt)) ((xoffset)) (((xND_WRITABLE).or (xflags))))))
            xnumpy_array_from_structure.write
              [xitems xfmt xt]
                memory > xbuf
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xmemlen)) ((xitemsize)) ((xndim)) ((xshape)) ((xstrides)) ((xoffset)))) ((xt)))
                    xbuf.write (((xbytearray)).apply ((xmemlen)))
                    (((unsupported)).apply ((((unsupported)).apply ((xj)) ((xv)))) ((((xenumerate)).apply ((xitems)))))
                      bogusForceDataize.write ((((xstruct).xpack_into)).apply ((xfmt)) ((xbuf)) (((xj).mul (xitemsize))) ((xv)))
                    (((unsupported)).apply ((((unsupported)).apply ((xnumpy_array)) ((xbuf)) ((xshape)) ((xstrides)) ((xfmt)) ((xoffset)))))
            xcast_items.write
              [xexporter xfmt xitemsize xshape]
                memory > xmem
                memory > xbyteitems
                memory > xitems
                memory > xitem
                memory > xbytelen
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xbytelen.write ((xexporter).xnbytes)
                    (xshape).if
                      (((((xprod)).apply ((xshape))).mul (xitemsize)).neq (xbytelen)).if
                        (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xshape)))))
                      ((xshape).eq (((unsupported)).apply)).if
                        ((((xexporter).xndim).eq 0).or ((xitemsize).neq (xbytelen))).if
                          (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xshape)))))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xn)) ((xr)))) ((((xdivmod)).apply ((xbytelen)) ((xitemsize)))))
                          xshape.write (((unsupported)).apply ((xn)))
                          ((xr).neq 0).if
                            (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xshape)))))
                    xmem.write ((((xexporter).xtobytes)).apply)
                    xbyteitems.write (((unsupported)).apply ((((unsupported)).apply ((xmem)) ((((unsupported)).apply ((xi)) (((xi).sub (xitemsize))))))) ((xi)) ((((xrange)).apply (0) ((((xlen)).apply ((xmem)))) ((xitemsize)))))
                    xitems.write (((unsupported)).apply)
                    (((unsupported)).apply ((xv)) ((xbyteitems)))
                      seq
                        xitem.write (((unsupported)).apply (((((xstruct).xunpack)).apply ((xfmt)) ((xv)))) (0))
                        ((xitem).neq (xitem)).if
                          (((unsupported)).apply ((((unsupported)).apply ("nan") ((xshape)))))
                        bogusForceDataize.write ((((xitems).xappend)).apply ((xitem)))
                    (((unsupported)).apply ((((xshape).neq (((unsupported)).apply)).if (((unsupported)).apply ((xitems)) ((xshape))) (((unsupported)).apply ((((unsupported)).apply ((xitems)) (0))) ((xshape))))))
            xgencastshapes.write
              []
                memory > xndim
                memory > xminshape
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((xn)) ((((xrange)).apply (32))))
                      (((unsupported)).apply ((((unsupported)).apply ((xn)))))
                    xndim.write (((xrandrange)).apply (4) (6))
                    xminshape.write (((((xrandrange)).apply (100)).greater 80).if 1 2)
                    (((unsupported)).apply ((((unsupported)).apply ((((xrandrange)).apply ((xminshape)) (5))) ((x_)) ((((xrange)).apply ((xndim)))))))
                    xndim.write (((xrandrange)).apply (2) (4))
                    xminshape.write (((((xrandrange)).apply (100)).greater 80).if 1 2)
                    (((unsupported)).apply ((((unsupported)).apply ((((xrandrange)).apply ((xminshape)) (5))) ((x_)) ((((xrange)).apply ((xndim)))))))
            xgenslices.write
              [xn]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((xproduct)).apply ((((xrange)).apply (((xn).neg)) (((xn).sub 1)))) ((((xrange)).apply (((xn).neg)) (((xn).sub 1)))) ((((xrange)).apply (((xn).neg)) (((xn).sub 1)))))))
            xgenslices_ndim.write
              [xndim xshape]
                memory > xiterables
                seq > @
                  seq
                    unsupported
                    xiterables.write (((unsupported)).apply ((((xgenslices)).apply ((((unsupported)).apply ((xshape)) ((xn)))))) ((xn)) ((((xrange)).apply ((xndim)))))
                    (((unsupported)).apply ((((xproduct)).apply ((((unsupported)).apply ((xiterables)))))))
            xrslice.write
              [xn xallow_empty]
                memory > xslicelen
                memory > xminlen
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xminlen.write (((xallow_empty).or ((xn).eq 0)).if 0 1)
                    xslicelen.write (((xrandrange)).apply ((xminlen)) (((xn).sub 1)))
                    (((unsupported)).apply ((((xrandslice_from_slicelen)).apply ((xslicelen)) ((xn)))))
            xrslices.write
              [xn xallow_empty]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((x_)) ((((xrange)).apply (5))))
                      (((unsupported)).apply ((((xrslice)).apply ((xn)) ((xallow_empty)))))
            xrslices_ndim.write
              [xndim xshape xiterations]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((x_)) ((((xrange)).apply ((xiterations)))))
                      (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((xrslice)).apply ((((unsupported)).apply ((xshape)) ((xn)))))) ((xn)) ((((xrange)).apply ((xndim)))))))))
                    (((unsupported)).apply ((x_)) ((((xrange)).apply ((xiterations)))))
                      (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrslice)) ((((unsupported)).apply ((xshape)) ((xn)))) (TRUE))) ((xn)) ((((xrange)).apply ((xndim)))))))))
                    (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply ((((xslice)).apply (0) (1) (0))) ((x_)) ((((xrange)).apply ((xndim)))))))))
            xrpermutation.write
              [xiterable xr]
                memory > xpool
                seq > @
                  (((unsupported)).apply)
                    xpool.write (((xtuple)).apply ((xiterable)))
                    xr.write ((((unsupported)).apply ((xr)) ("None: is there a None literal in the EO language?")).if (((xlen)).apply ((xpool))) (xr))
                    (((unsupported)).apply ((((xtuple)).apply ((((xsample)).apply ((xpool)) ((xr)))))))
            xndarray_print.write
              [xnd]
                memory > xx
                memory > xflags
                memory > xoffset
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xNotImplementedError)))))
                      xx.write ((((xnd).xtolist)).apply)
                      xx.write ((((xnd).xtobytes)).apply)
                    (((xisinstance)).apply ((xnd)) ((xndarray))).if
                      seq
                        xoffset.write ((xnd).xoffset)
                        xflags.write ((xnd).xflags)
                      seq
                        xoffset.write "unknown"
                        xflags.write "unknown"
                    bogusForceDataize.write (((xprint)).apply (("ndarray(%s, shape=%s, strides=%s, suboffsets=%s, offset=%s, format='%s', itemsize=%s, flags=%s)".mod (((unsupported)).apply ((xx)) (((xnd).xshape)) (((xnd).xstrides)) (((xnd).xsuboffsets)) ((xoffset)) (((xnd).xformat)) (((xnd).xitemsize)) ((xflags))))))
                    bogusForceDataize.write (((((xsys).xstdout).xflush)).apply)
            xITERATIONS.write 100
            xMAXDIM.write 5
            xMAXSHAPE.write 10
            (xSHORT_TEST).if
              seq
                xITERATIONS.write 10
                xMAXDIM.write 3
                xMAXSHAPE.write 4
                xgenslices.write (xrslices)
                xgenslices_ndim.write (xrslices_ndim)
                xpermutations.write (xrpermutation)
            (((unsupported)).apply (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xstruct)) ("struct module required for this test."))) (((((xunittest).xskipUnless)).apply ((xndarray)) ("ndarray object required for this test"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xsizeof_void_p)) ((((xget_sizeof_void_p)).apply)))
                xverify.write
                  [xself xresult xobj xitemsize xfmt xreadonly xndim xshape xstrides xlst xsliced xcast]
                    memory > xcheck_memoryview
                    memory > xnmemb
                    memory > xcontig
                    memory > xexpected_len
                    memory > xsuboffsets
                    memory > xtrans
                    memory > xx
                    memory > xitem1
                    memory > xm
                    memory > xitem2
                    memory > xrep
                    memory > xinitlst
                    memory > xbuf_err
                    memory > xsuboffset0
                    memory > xexpected
                    memory > xh
                    memory > xb
                    memory > xf
                    memory > xff
                    memory > xstride0
                    memory > xcontig_bytes
                    memory > xex
                    memory > xy
                    memory > xflattened
                    memory > xro
                    seq > @
                      (((unsupported)).apply)
                        (xshape).if
                          xexpected_len.write ((((xprod)).apply ((xshape))).mul (xitemsize))
                          ((xfmt).not).if
                            xexpected_len.write (((xlen)).apply ((xlst)))
                            xexpected_len.write (xitemsize)
                        xsuboffsets.write (((unsupported)).apply)
                        ((xresult).xsuboffsets).if
                          seq
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((xndim)) (0))
                            xsuboffset0.write 0
                            (((unsupported)).apply ((xn)) ((((xrange)).apply (1) ((xndim)))))
                              seq
                                ((((unsupported)).apply ((xshape)) ((xn))).eq 0).if
                                  (((unsupported)).apply)
                                ((((unsupported)).apply ((xstrides)) ((xn))).leq 0).if
                                  (((unsupported)).apply ((xsuboffset0)) ((((((unsupported)).apply ((xstrides)) ((xn))).neg).mul ((((unsupported)).apply ((xshape)) ((xn))).sub 1))))
                            xsuboffsets.write ((((unsupported)).apply ((xsuboffset0))).sub (((unsupported)).apply ((1.neg)) ((xv)) ((((xrange)).apply (((xndim).sub 1))))))
                            xstride0.write ((xself).xsizeof_void_p)
                            ((((unsupported)).apply ((xstrides)) (0)).less 0).if
                              xstride0.write ((xstride0).neg)
                            xstrides.write ((((unsupported)).apply ((xstride0))).sub (((xlist)).apply ((((unsupported)).apply ((xstrides)) ((((unsupported)).apply (1)))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xresult).xobj)) ((xobj)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xnbytes)) ((xexpected_len)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xitemsize)) ((xitemsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xformat)) ((xfmt)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xresult).xreadonly)) ((xreadonly)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xndim)) ((xndim)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xshape)) ((((xtuple)).apply ((xshape)))))
                        (((xsliced).and (xsuboffsets)).not).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xstrides)) ((((xtuple)).apply ((xstrides)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xsuboffsets)) ((((xtuple)).apply ((xsuboffsets)))))
                        ((((xisinstance)).apply ((xresult)) ((xndarray))).or (((xis_memoryview_format)).apply ((xfmt)))).if
                          seq
                            xrep.write ((xfmt).if ((((xresult).xtolist)).apply) ((((xresult).xtobytes)).apply))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrep)) ((xlst)))
                        ((xfmt).not).if
                          (((unsupported)).apply)
                        ((xcast).not).if
                          seq
                            xb.write (((xbytearray)).apply)
                            xbuf_err.write "None: is there a None literal in the EO language?"
                            (((unsupported)).apply ((xind)) ((((xindices)).apply ((xshape)))))
                              seq
                                (((unsupported)).apply ((xBufferError)))
                                  seq
                                    xitem1.write (((xget_pointer)).apply ((xresult)) ((xind)))
                                    xitem2.write (((xget_item)).apply ((xlst)) ((xind)))
                                    (((xisinstance)).apply ((xitem2)) ((xtuple))).if
                                      xx.write ((((xstruct).xpack)).apply ((xfmt)) ((((unsupported)).apply ((xitem2)))))
                                      xx.write ((((xstruct).xpack)).apply ((xfmt)) ((xitem2)))
                                    bogusForceDataize.write ((((xb).xextend)).apply ((xx)))
                                  seq
                                    xbuf_err.write TRUE
                                    (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xitem1)) ((xitem2)))
                            ((xbuf_err).not).if
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresult).xtobytes)).apply)) ((xb)))
                                xm.write (((xmemoryview)).apply ((xresult)))
                                xh.write ((("".xjoin)).apply ((((unsupported)).apply (("%02x".mod (xc))) ((xc)) ((xb)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xhex)).apply)) ((xh)))
                                xff.write ((xfmt).if (xfmt) "B")
                                xflattened.write (((xflatten)).apply ((xlst)))
                                (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                                  seq
                                    xexpected.write (xresult)
                                    ((xorder).eq "F").if
                                      (((((xis_contiguous)).apply ((xresult)) ("A")).not).or (((xis_contiguous)).apply ((xresult)) ("C"))).if
                                        seq
                                          xtrans.write (((xtranspose)).apply ((xflattened)) ((xshape)))
                                          xexpected.write (((unsupported)).apply ((xndarray)) ((xtrans)) ((xshape)) ((xff)) ((xND_FORTRAN)))
                                      (((((xis_contiguous)).apply ((xresult)) ("A")).not).or ((((xis_contiguous)).apply ((xresult)) ("F")).and ((xorder).eq "C"))).if
                                        xexpected.write (((unsupported)).apply ((xndarray)) ((xflattened)) ((xshape)) ((xff)))
                                    xcontig.write (((xget_contiguous)).apply ((xresult)) ((xPyBUF_READ)) ((xorder)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcontig).xtobytes)).apply)) ((xb)))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcmp_contig)).apply ((xcontig)) ((xexpected)))))
                                    ((xndim).eq 0).if
                                      (((unsupported)).apply)
                                    xnmemb.write (((xlen)).apply ((xflattened)))
                                    xro.write ((xreadonly).if 0 (xND_WRITABLE))
                                    xcontig.write (((xpy_buffer_to_contiguous)).apply ((xresult)) ("C") ((xPyBUF_FULL_RO)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcontig)))) (((xnmemb).mul (xitemsize))))
                                    xinitlst.write (((unsupported)).apply (((((xstruct).xunpack_from)).apply ((xfmt)) ((xcontig)) (((xn).mul (xitemsize))))) ((xn)) ((((xrange)).apply ((xnmemb)))))
                                    ((((xlen)).apply ((((unsupported)).apply ((xinitlst)) (0)))).eq 1).if
                                      xinitlst.write (((unsupported)).apply ((((unsupported)).apply ((xv)) (0))) ((xv)) ((xinitlst)))
                                    xy.write (((unsupported)).apply ((xndarray)) ((xinitlst)) ((xshape)) ((xro)) ((xfmt)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmemoryview)).apply ((xy)))) ((((xmemoryview)).apply ((xresult)))))
                                    xcontig_bytes.write ((((((xmemoryview)).apply ((xresult))).xtobytes)).apply)
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontig_bytes)) ((xcontig)))
                                    xcontig_bytes.write (((unsupported)).apply (((((xmemoryview)).apply ((xresult))).xtobytes)) ("None: is there a None literal in the EO language?"))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontig_bytes)) ((xcontig)))
                                    xcontig_bytes.write (((unsupported)).apply (((((xmemoryview)).apply ((xresult))).xtobytes)) ("C"))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontig_bytes)) ((xcontig)))
                                    xcontig.write (((xpy_buffer_to_contiguous)).apply ((xresult)) ("F") ((xPyBUF_FULL_RO)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcontig)))) (((xnmemb).mul (xitemsize))))
                                    xinitlst.write (((unsupported)).apply (((((xstruct).xunpack_from)).apply ((xfmt)) ((xcontig)) (((xn).mul (xitemsize))))) ((xn)) ((((xrange)).apply ((xnmemb)))))
                                    ((((xlen)).apply ((((unsupported)).apply ((xinitlst)) (0)))).eq 1).if
                                      xinitlst.write (((unsupported)).apply ((((unsupported)).apply ((xv)) (0))) ((xv)) ((xinitlst)))
                                    xy.write (((unsupported)).apply ((xndarray)) ((xinitlst)) ((xshape)) (((xro).or (xND_FORTRAN))) ((xfmt)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmemoryview)).apply ((xy)))) ((((xmemoryview)).apply ((xresult)))))
                                    xcontig_bytes.write (((unsupported)).apply (((((xmemoryview)).apply ((xresult))).xtobytes)) ("F"))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontig_bytes)) ((xcontig)))
                                    xcontig.write (((xpy_buffer_to_contiguous)).apply ((xresult)) ("A") ((xPyBUF_FULL_RO)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xcontig)))) (((xnmemb).mul (xitemsize))))
                                    xinitlst.write (((unsupported)).apply (((((xstruct).xunpack_from)).apply ((xfmt)) ((xcontig)) (((xn).mul (xitemsize))))) ((xn)) ((((xrange)).apply ((xnmemb)))))
                                    ((((xlen)).apply ((((unsupported)).apply ((xinitlst)) (0)))).eq 1).if
                                      xinitlst.write (((unsupported)).apply ((((unsupported)).apply ((xv)) (0))) ((xv)) ((xinitlst)))
                                    xf.write ((((xis_contiguous)).apply ((xresult)) ("F")).if (xND_FORTRAN) 0)
                                    xy.write (((unsupported)).apply ((xndarray)) ((xinitlst)) ((xshape)) (((xf).or (xro))) ((xfmt)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmemoryview)).apply ((xy)))) ((((xmemoryview)).apply ((xresult)))))
                                    xcontig_bytes.write (((unsupported)).apply (((((xmemoryview)).apply ((xresult))).xtobytes)) ("A"))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontig_bytes)) ((xcontig)))
                        (((xis_memoryview_format)).apply ((xfmt))).if
                          seq
                            (((unsupported)).apply ((xBufferError)))
                              xm.write (((xmemoryview)).apply ((xresult)))
                              (((unsupported)).apply)
                            xex.write ((((xisinstance)).apply ((xresult)) ((xmemoryview))).if ((xresult).xobj) (xresult))
                            xcheck_memoryview.write
                              [xm xexpected_readonly]
                                memory > xn
                                memory > xrep
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((xself).xassertIs)).apply (((xm).xobj)) ((xex)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xnbytes)) ((xexpected_len)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xitemsize)) ((xitemsize)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xformat)) ((xfmt)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xreadonly)) ((xexpected_readonly)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xndim)) ((xndim)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xshape)) ((((xtuple)).apply ((xshape)))))
                                    (((xsliced).and (xsuboffsets)).not).if
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xstrides)) ((((xtuple)).apply ((xstrides)))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm).xsuboffsets)) ((((xtuple)).apply ((xsuboffsets)))))
                                    xn.write (((xndim).eq 0).if 1 (((xlen)).apply ((xlst))))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xm)))) ((xn)))
                                    xrep.write ((xfmt).if ((((xresult).xtolist)).apply) ((((xresult).xtobytes)).apply))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrep)) ((xlst)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xresult)))
                            bogusForceDataize.write (((xcheck_memoryview)).apply ((xm)))
                            (((unsupported)).apply (((((xm).xtoreadonly)).apply)) ((xmm)))
                              (((unsupported)).apply ((xcheck_memoryview)) ((xmm)) (TRUE))
                            bogusForceDataize.write ((((xm).xtobytes)).apply)
                xverify_getbuf.write
                  [xself xorig_ex xex xreq xsliced]
                    memory > xfmt
                    memory > xshape
                    memory > xitemsize
                    memory > xsimple_fmt
                    memory > xlst
                    memory > xstrides
                    memory > xnd
                    memory > xndim
                    memory > xmatch
                    memory > xro
                    seq > @
                      (((unsupported)).apply)
                        xsimple_fmt.write
                          [xex]
                            seq > @
                              (((unsupported)).apply (((((xex).xformat).eq "").or (((xex).xformat).eq "B"))))
                        xmatch.write
                          [xreq xflag]
                            seq > @
                              (((unsupported)).apply ((((xreq).and (xflag)).eq (xflag))))
                        (((((((((xex).xreadonly).and (((xmatch)).apply ((xreq)) ((xPyBUF_WRITABLE)))).or ((((xmatch)).apply ((xreq)) ((xPyBUF_C_CONTIGUOUS))).and (((xex).xc_contiguous).not))).or ((((xmatch)).apply ((xreq)) ((xPyBUF_F_CONTIGUOUS))).and (((xex).xf_contiguous).not))).or ((((xmatch)).apply ((xreq)) ((xPyBUF_ANY_CONTIGUOUS))).and (((xex).xcontiguous).not))).or (((((xmatch)).apply ((xreq)) ((xPyBUF_INDIRECT))).not).and ((xex).xsuboffsets))).or (((((xmatch)).apply ((xreq)) ((xPyBUF_STRIDES))).not).and (((xex).xc_contiguous).not))).or (((((xmatch)).apply ((xreq)) ((xPyBUF_ND))).not).and (((xmatch)).apply ((xreq)) ((xPyBUF_FORMAT))))).if
                          seq
                            (((unsupported)).apply (((xself).xassertRaises)) ((xBufferError)) ((xndarray)) ((xex)) ((xreq)))
                            (((unsupported)).apply)
                        ((((xisinstance)).apply ((xex)) ((xndarray))).or (((xis_memoryview_format)).apply (((xex).xformat)))).if
                          xlst.write ((((xex).xtolist)).apply)
                          seq
                            xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_FULL_RO)))
                            xlst.write ((((xnd).xtolist)).apply)
                        xro.write ((((xmatch)).apply ((xreq)) ((xPyBUF_WRITABLE))).if FALSE ((xex).xreadonly))
                        xfmt.write ((xex).xformat)
                        xitemsize.write ((xex).xitemsize)
                        xndim.write ((xex).xndim)
                        ((((xmatch)).apply ((xreq)) ((xPyBUF_FORMAT))).not).if
                          seq
                            xfmt.write ""
                            xlst.write ((((xorig_ex).xtobytes)).apply)
                        ((((xmatch)).apply ((xreq)) ((xPyBUF_ND))).not).if
                          xndim.write 1
                        xshape.write ((((xmatch)).apply ((xreq)) ((xPyBUF_ND))).if ((xorig_ex).xshape) (((unsupported)).apply))
                        xstrides.write ((((xmatch)).apply ((xreq)) ((xPyBUF_STRIDES))).if ((xorig_ex).xstrides) (((unsupported)).apply))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xreq)))
                        (((unsupported)).apply (((xself).xverify)) ((xnd)) ((xex)) ((xitemsize)) ((xfmt)) ((xro)) ((xndim)) ((xshape)) ((xstrides)) ((xlst)) ((xsliced)))
                xtest_ndarray_getbuf.write
                  [xself]
                    memory > x_items
                    memory > xex2
                    memory > xrequests
                    memory > xndflags
                    memory > xbase
                    memory > xitemsize
                    memory > xitems
                    memory > xm1
                    memory > xreal_flags
                    memory > xstrides
                    memory > xitems_fmt
                    memory > xstructure
                    memory > xex
                    memory > xnd
                    memory > xex1
                    memory > xm2
                    seq > @
                      seq
                        xrequests.write (((unsupported)).apply ((xPyBUF_INDIRECT)) ((xPyBUF_STRIDES)) ((xPyBUF_ND)) ((xPyBUF_SIMPLE)) ((xPyBUF_C_CONTIGUOUS)) ((xPyBUF_F_CONTIGUOUS)) ((xPyBUF_ANY_CONTIGUOUS)) ((xPyBUF_FULL)) ((xPyBUF_FULL_RO)) ((xPyBUF_RECORDS)) ((xPyBUF_RECORDS_RO)) ((xPyBUF_STRIDED)) ((xPyBUF_STRIDED_RO)) ((xPyBUF_CONTIG)) ((xPyBUF_CONTIG_RO)))
                        xitems_fmt.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xx).mod 2).if TRUE FALSE)) ((xx)) ((((xrange)).apply (12))))) ("?"))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12))) ("b"))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12))) ("B"))) ((((unsupported)).apply ((((unsupported)).apply ((((xx).mod 2).if ((((unsupported)).apply (2) (31)).sub (xx)) (((((unsupported)).apply (2) (31)).neg).sub (xx)))) ((xx)) ((((xrange)).apply (12))))) ("l"))))
                        xstructure.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) (0))) ((((unsupported)).apply ((((unsupported)).apply (1) (3) (1))) ((((unsupported)).apply)) (0))) ((((unsupported)).apply ((((unsupported)).apply (12))) ((((unsupported)).apply)) (0))) ((((unsupported)).apply ((((unsupported)).apply (12))) ((((unsupported)).apply ((1.neg)))) (11))) ((((unsupported)).apply ((((unsupported)).apply (6))) ((((unsupported)).apply (2))) (0))) ((((unsupported)).apply ((((unsupported)).apply (6))) ((((unsupported)).apply ((2.neg)))) (11))) ((((unsupported)).apply ((((unsupported)).apply (3) (4))) ((((unsupported)).apply)) (0))) ((((unsupported)).apply ((((unsupported)).apply (3) (4))) ((((unsupported)).apply ((4.neg)) ((1.neg)))) (11))) ((((unsupported)).apply ((((unsupported)).apply (2) (2))) ((((unsupported)).apply (4) (1))) (4))) ((((unsupported)).apply ((((unsupported)).apply (2) (2))) ((((unsupported)).apply ((4.neg)) ((1.neg)))) (8))))
                        xndflags.write (((unsupported)).apply (0) ((xND_WRITABLE)) ((xND_FORTRAN)) (((xND_FORTRAN).or (xND_WRITABLE))) ((xND_PIL)) (((xND_PIL).or (xND_WRITABLE))))
                        xreal_flags.write (((unsupported)).apply (0) ((xPyBUF_WRITABLE)) ((xPyBUF_FORMAT)) (((xPyBUF_WRITABLE).or (xPyBUF_FORMAT))))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems)) ((xfmt)))) ((xitems_fmt)))
                          seq
                            xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                            (((unsupported)).apply ((((unsupported)).apply ((xshape)) ((xstrides)) ((xoffset)))) ((xstructure)))
                              seq
                                xstrides.write (((unsupported)).apply (((xv).mul (xitemsize))) ((xv)) ((xstrides)))
                                (((unsupported)).apply ((xoffset)) ((xitemsize)))
                                (((unsupported)).apply ((xflags)) ((xndflags)))
                                  seq
                                    ((xstrides).and ((xflags).and (xND_FORTRAN))).if
                                      (((unsupported)).apply)
                                    (((xshape).not).and ((xflags).and (xND_PIL))).if
                                      (((unsupported)).apply)
                                    x_items.write ((xshape).if (xitems) (((unsupported)).apply ((xitems)) (0)))
                                    xex1.write (((unsupported)).apply ((xndarray)) ((x_items)) ((xfmt)) ((xflags)) ((xshape)) ((xstrides)) ((xoffset)))
                                    xex2.write ((xshape).if (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((2.neg))))) "None: is there a None literal in the EO language?")
                                    xm1.write (((xmemoryview)).apply ((xex1)))
                                    (xex2).if
                                      xm2.write (((xmemoryview)).apply ((xex2)))
                                    ((((xex1).xndim).eq 0).or (((((xex1).xndim).eq 1).and (xshape)).and (xstrides))).if
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm1)) ((xex1)))
                                    ((((xex2).and (((xex2).xndim).eq 1)).and (xshape)).and (xstrides)).if
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm2)) ((xex2)))
                                    (((unsupported)).apply ((xreq)) ((xrequests)))
                                      (((unsupported)).apply ((xbits)) ((xreal_flags)))
                                        seq
                                          bogusForceDataize.write ((((xself).xverify_getbuf)).apply ((xex1)) ((xex1)) (((xreq).or (xbits))))
                                          bogusForceDataize.write ((((xself).xverify_getbuf)).apply ((xex1)) ((xm1)) (((xreq).or (xbits))))
                                          (xex2).if
                                            seq
                                              (((unsupported)).apply (((xself).xverify_getbuf)) ((xex2)) ((xex2)) (((xreq).or (xbits))) (TRUE))
                                              (((unsupported)).apply (((xself).xverify_getbuf)) ((xex2)) ((xm2)) (((xreq).or (xbits))) (TRUE))
                        xitems.write (((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12))
                        xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (12))) ((xND_GETBUF_FAIL)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xndarray)) ((xex)))
                        xbase.write (((xndarray)).apply ((((unsupported)).apply (9))) ((((unsupported)).apply (1))))
                        xex.write (((unsupported)).apply ((xndarray)) ((xbase)) ((xPyBUF_SIMPLE)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xBufferError)) ((xndarray)) ((xex)) ((xPyBUF_WRITABLE)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xBufferError)) ((xndarray)) ((xex)) ((xPyBUF_ND)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xBufferError)) ((xndarray)) ((xex)) ((xPyBUF_STRIDES)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xBufferError)) ((xndarray)) ((xex)) ((xPyBUF_C_CONTIGUOUS)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xBufferError)) ((xndarray)) ((xex)) ((xPyBUF_F_CONTIGUOUS)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xBufferError)) ((xndarray)) ((xex)) ((xPyBUF_ANY_CONTIGUOUS)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_SIMPLE)))
                        (((unsupported)).apply ((xshape)) ((((unsupported)).apply ((((unsupported)).apply (1) (12) (1))) ((((unsupported)).apply (7) (0) (7))))))
                          (((unsupported)).apply ((xorder)) ((((unsupported)).apply (0) ((xND_FORTRAN)))))
                            seq
                              xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) (((xorder).or (xND_WRITABLE))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_contiguous)).apply ((xex)) ("F"))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_contiguous)).apply ((xex)) ("C"))))
                              (((unsupported)).apply ((xflags)) ((xrequests)))
                                seq
                                  xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xflags)))
                                  bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_contiguous)).apply ((xnd)) ("F"))))
                                  bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xis_contiguous)).apply ((xnd)) ("C"))))
                xtest_ndarray_exceptions.write
                  [xself]
                    memory > xex2
                    memory > xndm
                    memory > xitems
                    memory > xm
                    memory > xn
                    memory > xex1
                    memory > xex
                    memory > xnd
                    seq > @
                      seq
                        xnd.write (((xndarray)).apply ((((unsupported)).apply (9))) ((((unsupported)).apply (1))))
                        xndm.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (9))) ((((unsupported)).apply (1))) ((xND_VAREXPORT)))
                        (((unsupported)).apply ((xc)) ((((unsupported)).apply ((xndarray)) (((xnd).xpush)) (((xndm).xpush)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xc)) ((((unsupported)).apply (1) (2) (3))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xc)) ((((unsupported)).apply (1) (2) ("3"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xc)) ((((unsupported)).apply (1) (2) ((((unsupported)).apply (3) (4))))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ((((unsupported)).apply (1))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ((((unsupported)).apply)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((((unsupported)).apply)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((((unsupported)).apply)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((((unsupported)).apply)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((xND_FORTRAN)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((unsupported)).apply (1))) ((((unsupported)).apply)) ((xND_PIL)))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply)) ((((unsupported)).apply (1))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply ("XXX"))) ((((unsupported)).apply (1))) ("L"))
                            (((unsupported)).apply (((xself).xassertRaises)) (((xstruct).xerror)) ((xc)) ((((unsupported)).apply (1000))) ((((unsupported)).apply (1))) ("B"))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) ((((unsupported)).apply (2) (3))))) ((((unsupported)).apply (2))) ("B"))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ("QL"))
                            xn.write ((xND_MAX_NDIM).sub 1)
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) (((((unsupported)).apply (1)).mul (xn))) (((((unsupported)).apply (1)).mul (xn))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1))) ((((unsupported)).apply ((1.neg)))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply ("3"))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) ((xc)) ((((unsupported)).apply (1))) ((((unsupported)).apply ((((unsupported)).apply (2) (128))))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) (2) (3) (4) (5))) ((((unsupported)).apply (2) (2))) (3))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ((((unsupported)).apply ("1"))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) ((xc)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((((unsupported)).apply ((((unsupported)).apply (2) (128))))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (2) (1))) ((((unsupported)).apply (1))))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) (2) (3) (4))) ((((unsupported)).apply (2))) ((((unsupported)).apply (3))) ("L"))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) (4))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (1))) (3) ("L"))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) (""))
                            (((unsupported)).apply (((xself).xassertRaises)) (((xstruct).xerror)) ((xc)) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))))) ((((unsupported)).apply (1))) ("@#$"))
                            xitems.write (((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (10))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) ((xc)) ((xitems)) ((((unsupported)).apply (2) (3))) ((((unsupported)).apply ((3.neg)) ((2.neg)))) (5))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((xbytearray)).apply)) ("Q"))
                            (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xc)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((xPyBUF_FULL)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xc)) ((((unsupported)).apply (1))))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xBufferError)) ((xndarray)) ("123") ((xPyBUF_WRITABLE)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (9))) ((((unsupported)).apply (1))) ((xND_VAREXPORT)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xnd).xpush)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((xND_VAREXPORT)))
                        xnd.write (((xndarray)).apply ("123"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xnd).xpush)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xnd).xpop)))
                        xnd.write (((xndarray)).apply ((((unsupported)).apply (9))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xnd).xpush)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply (1))))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xnd).xpush)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xnd).xpop)))
                        bogusForceDataize.write ((((xm).xrelease)).apply)
                        bogusForceDataize.write ((((xnd).xpop)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xnd).xpop)))
                        (((unsupported)).apply ((((unsupported)).apply ((xnd)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xget_pointer)) ((((unsupported)).apply)) ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xget_pointer)) ("123") ((((unsupported)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (100))))) (((((unsupported)).apply (1)).mul 100)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_pointer)) ((xnd)) ((((unsupported)).apply (5))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_pointer)) ((xnd)) ((((unsupported)).apply (2) (3) (4))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_pointer)) ((xnd)) ((((unsupported)).apply (3) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_pointer)) ((xnd)) ((((unsupported)).apply ((3.neg)) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xget_pointer)) ((xnd)) ((((unsupported)).apply ((((unsupported)).apply (1) (64))) (3))))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ("L"))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_SIMPLE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xnd).xtolist)))
                        xex1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ("L"))
                        xex2.write (((xndarray)).apply ((xex1)))
                        xnd.write (((xndarray)).apply ((xex2)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xnd).xmemoryview_from_buffer)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (((((unsupported)).apply (1)).mul 200)))) ((((unsupported)).apply (1))) (("L".mul 200)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xnd).xmemoryview_from_buffer)))
                        xn.write (xND_MAX_NDIM)
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((xn)))))) (((((unsupported)).apply (1)).mul (xn))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xnd).xmemoryview_from_buffer)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xget_contiguous)) (1) (2) (3) (4) (5))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xget_contiguous)) ((xnd)) ("xyz") ("C"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) ((xget_contiguous)) ((xnd)) ((((unsupported)).apply (2) (64))) ("C"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xget_contiguous)) ((xnd)) ((xPyBUF_READ)) (961))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeEncodeError)) ((xget_contiguous)) ((xnd)) ((xPyBUF_READ)) ("u2007"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_contiguous)) ((xnd)) ((xPyBUF_READ)) ("Z"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_contiguous)) ((xnd)) (255) ("A"))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcmp_contig)) (1) (2) (3) (4) (5))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcmp_contig)) ((((unsupported)).apply)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xcmp_contig)) ((xnd)) ((((unsupported)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xis_contiguous)) (1) (2) (3) (4) (5))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xis_contiguous)) ((((unsupported)).apply)) ("A"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xis_contiguous)) ((xnd)) (201))
                xtest_ndarray_linked_list.write
                  [xself]
                    memory > xnd
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xperm)) ((((xpermutations)).apply ((((xrange)).apply (5))))))
                        seq
                          xm.write ((((unsupported)).apply (0)).mul 5)
                          xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ((xND_VAREXPORT)))
                          (((unsupported)).apply ((((unsupported)).apply ((xm)) (0))) ((((xmemoryview)).apply ((xnd)))))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (1) (5))))
                            seq
                              (((unsupported)).apply (((xnd).xpush)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))))
                              (((unsupported)).apply ((((unsupported)).apply ((xm)) ((xi)))) ((((xmemoryview)).apply ((xnd)))))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                            bogusForceDataize.write ((((((unsupported)).apply ((xm)) ((((unsupported)).apply ((xperm)) ((xi))))).xrelease)).apply)
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xnd).xpop)))
                          (((unsupported)).apply ((((unsupported)).apply ((xnd)))))
                xtest_ndarray_format_scalar.write
                  [xself]
                    memory > xnd
                    memory > xitemsize
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xscalar)) ((x_)))) ((((xiter_format)).apply (0))))
                        seq
                          xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                          xnd.write (((unsupported)).apply ((xndarray)) ((xscalar)) ((((unsupported)).apply)) ((xfmt)))
                          (((unsupported)).apply (((xself).xverify)) ((xnd)) ("None: is there a None literal in the EO language?") ((xitemsize)) ((xfmt)) (TRUE) (0) ((((unsupported)).apply)) ((((unsupported)).apply)) ((xscalar)))
                xtest_ndarray_format_shape.write
                  [xself]
                    memory > xnitems
                    memory > xnd
                    memory > xitemsize
                    seq > @
                      seq
                        xnitems.write (((xrandrange)).apply (1) (10))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xiter_format)).apply ((xnitems)))))
                          seq
                            xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                            (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                              seq
                                xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply ((xnitems)))) ((xfmt)) ((xflags)))
                                (((unsupported)).apply (((xself).xverify)) ((xnd)) ("None: is there a None literal in the EO language?") ((xitemsize)) ((xfmt)) (TRUE) (1) ((((unsupported)).apply ((xnitems)))) ((((unsupported)).apply ((xitemsize)))) ((xitems)))
                xtest_ndarray_format_strides.write
                  [xself]
                    memory > xshape
                    memory > xitemsize
                    memory > xstrides
                    memory > xoffset
                    memory > xnd
                    memory > xnitems
                    seq > @
                      seq
                        xnitems.write (((xrandrange)).apply (1) (30))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xiter_format)).apply ((xnitems)))))
                          seq
                            xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                            (((unsupported)).apply ((xstep)) ((((xrange)).apply ((5.neg)) (5))))
                              seq
                                ((xstep).eq 0).if
                                  (((unsupported)).apply)
                                xshape.write (((unsupported)).apply ((((xlen)).apply ((((unsupported)).apply ((xitems)) ((((unsupported)).apply ((xstep)))))))))
                                xstrides.write (((unsupported)).apply (((xstep).mul (xitemsize))))
                                xoffset.write (((xstep).less 0).if ((xitemsize).mul ((xnitems).sub 1)) 0)
                                (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                                  seq
                                    xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xstrides)) ((xfmt)) ((xoffset)) ((xflags)))
                                    (((unsupported)).apply (((xself).xverify)) ((xnd)) ("None: is there a None literal in the EO language?") ((xitemsize)) ((xfmt)) (TRUE) (1) ((xshape)) ((xstrides)) ((((unsupported)).apply ((xitems)) ((((unsupported)).apply ((xstep)))))))
                xtest_ndarray_fortran.write
                  [xself]
                    memory > xnd
                    memory > xex
                    memory > xitems
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12))
                        xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (3) (4))) ((((unsupported)).apply (1) (3))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) (((xPyBUF_F_CONTIGUOUS).or (xPyBUF_FORMAT))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((((xfarray)).apply ((xitems)) ((((unsupported)).apply (3) (4))))))
                xtest_ndarray_multidim.write
                  [xself]
                    memory > xitemsize
                    memory > xlst
                    memory > xshape_t
                    memory > xstrides
                    memory > xex
                    memory > xmv
                    memory > xnd
                    memory > xnitems
                    seq > @
                      (((unsupported)).apply ((xndim)) ((((xrange)).apply (5))))
                        seq
                          xshape_t.write (((unsupported)).apply ((((xrandrange)).apply (2) (10))) ((x_)) ((((xrange)).apply ((xndim)))))
                          xnitems.write (((xprod)).apply ((xshape_t)))
                          (((unsupported)).apply ((xshape)) ((((xpermutations)).apply ((xshape_t)))))
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xranditems)).apply ((xnitems)))))
                              xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                              (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                                seq
                                  (((xndim).eq 0).and ((xflags).eq (xND_PIL))).if
                                    (((unsupported)).apply)
                                  xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)) ((xflags)))
                                  xstrides.write (((xstrides_from_shape)).apply ((xndim)) ((xshape)) ((xitemsize)) ("C"))
                                  xlst.write (((xcarray)).apply ((xitems)) ((xshape)))
                                  (((unsupported)).apply (((xself).xverify)) ((xnd)) ("None: is there a None literal in the EO language?") ((xitemsize)) ((xfmt)) (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)))
                                  (((xis_memoryview_format)).apply ((xfmt))).if
                                    seq
                                      xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)))
                                      xnd.write (((unsupported)).apply ((xndarray)) ((xex)) (((xPyBUF_CONTIG_RO).or (xPyBUF_FORMAT))))
                                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xnd).xstrides).eq (((unsupported)).apply))))
                                      xmv.write ((((xnd).xmemoryview_from_buffer)).apply)
                                      (((unsupported)).apply (((xself).xverify)) ((xmv)) ("None: is there a None literal in the EO language?") ((xitemsize)) ((xfmt)) (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)))
                                  xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)) (((xflags).or (xND_FORTRAN))))
                                  xstrides.write (((xstrides_from_shape)).apply ((xndim)) ((xshape)) ((xitemsize)) ("F"))
                                  xlst.write (((xfarray)).apply ((xitems)) ((xshape)))
                                  (((unsupported)).apply (((xself).xverify)) ((xnd)) ("None: is there a None literal in the EO language?") ((xitemsize)) ((xfmt)) (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)))
                xtest_ndarray_index_invalid.write
                  [xself]
                    memory > xnd
                    memory > xitems
                    memory > xmv
                    seq > @
                      seq
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xnd).x__setitem__)) (1) (8))
                        xmv.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmv).x__setitem__)) (1) (8))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((xND_WRITABLE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xnd).x__delitem__)) (1))
                        xmv.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmv).x__delitem__)) (1))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ((xND_WRITABLE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xnd).x__getitem__)) ((((unsupported)).apply (1) (64))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xnd).x__setitem__)) ((((unsupported)).apply (1) (64))) (8))
                        xmv.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xmv).x__getitem__)) ((((unsupported)).apply (1) (64))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xmv).x__setitem__)) ((((unsupported)).apply (1) (64))) (8))
                        xitems.write (((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply ((((xlen)).apply ((xitems)))))) ("B") ((xND_WRITABLE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xnd).x__setitem__)) (2) (300))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xnd).x__setitem__)) (1) ((((unsupported)).apply (100) (200))))
                        xmv.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmv).x__setitem__)) (2) (300))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmv).x__setitem__)) (1) ((((unsupported)).apply (100) (200))))
                        xitems.write (((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))) ((((unsupported)).apply (5) (6))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply ((((xlen)).apply ((xitems)))))) ("LQ") ((xND_WRITABLE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xnd).x__setitem__)) (2) (300))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xstruct).xerror)) (((xnd).x__setitem__)) (1) ((((unsupported)).apply ("x001") (200))))
                xtest_ndarray_index_scalar.write
                  [xself]
                    memory > xx
                    memory > xnd
                    memory > xmv
                    seq > @
                      seq
                        xnd.write (((unsupported)).apply ((xndarray)) (1) ((((unsupported)).apply)) ((xND_WRITABLE)))
                        xmv.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                        seq
                          xx.write (((unsupported)).apply ((xnd)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (1))
                        seq
                          xx.write (((unsupported)).apply ((xnd)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        seq
                          xx.write (((unsupported)).apply ((xmv)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xx)) (1))
                        seq
                          xx.write (((unsupported)).apply ((xmv)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xnd).x__getitem__)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmv).x__getitem__)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xnd).x__setitem__)) (0) (8))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmv).x__setitem__)) (0) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmv).xtolist)).apply)) (1))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xnd)) ((((unsupported)).apply)))) (9))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) (9))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xmv)) ((((unsupported)).apply)))) (9))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmv).xtolist)).apply)) (9))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xnd)) ((((unsupported)).apply)))) (5))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) (5))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xmv)) ((((unsupported)).apply)))) (5))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmv).xtolist)).apply)) (5))
                xtest_ndarray_index_null_strides.write
                  [xself]
                    memory > xnd
                    memory > xex
                    seq > @
                      seq
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((2.mul 4)))))) ((((unsupported)).apply (2) (4))) ((xND_WRITABLE)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_CONTIG)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xnd).x__getitem__)) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xnd).x__getitem__)) ((((xslice)).apply (3) (5) (1))))
                xtest_ndarray_index_getitem_single.write
                  [xself]
                    memory > xnd
                    memory > xex
                    memory > xitems
                    memory > xmv
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xiter_format)).apply (5))))
                          seq
                            xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))) ((xfmt)))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((5.neg)) (5))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((((unsupported)).apply ((xitems)) ((xi)))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xnd).x__getitem__)) ((6.neg)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xnd).x__getitem__)) (5))
                            (((xis_memoryview_format)).apply ((xfmt))).if
                              seq
                                xmv.write (((xmemoryview)).apply ((xnd)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                                (((unsupported)).apply ((xi)) ((((xrange)).apply ((5.neg)) (5))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmv)) ((xi)))) ((((unsupported)).apply ((xitems)) ((xi)))))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xmv).x__getitem__)) ((6.neg)))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xmv).x__getitem__)) (5))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xiter_format)).apply (5))))
                          seq
                            xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))) ((xND_WRITABLE)) ((xfmt)))
                            xnd.write (((unsupported)).apply ((xndarray)) ((xex)) (((xPyBUF_CONTIG).or (xPyBUF_FORMAT))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((5.neg)) (5))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((((unsupported)).apply ((xitems)) ((xi)))))
                            (((xis_memoryview_format)).apply ((xfmt))).if
                              seq
                                xmv.write ((((xnd).xmemoryview_from_buffer)).apply)
                                bogusForceDataize.write ((((xself).xassertIs)).apply (((((xmv).x__eq__)).apply ((xnd)))) ((xNotImplemented)))
                                (((unsupported)).apply ((xi)) ((((xrange)).apply ((5.neg)) (5))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmv)) ((xi)))) ((((unsupported)).apply ((xitems)) ((xi)))))
                        xitems.write (((unsupported)).apply (1) (2) (3) (4) (5))
                        xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_CONTIG_RO)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((5.neg)) (5))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((((unsupported)).apply ((xitems)) ((xi)))))
                        xitems.write (((unsupported)).apply (1) (2) (3) (4) (5))
                        xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_SIMPLE)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply ((5.neg)) (5))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((((unsupported)).apply ((xitems)) ((xi)))))
                xtest_ndarray_index_setitem_single.write
                  [xself]
                    memory > xnd
                    memory > xmv
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((xsingle_item)))) ((((xiter_format)).apply (5))))
                          seq
                            xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))) ((xfmt)) ((xND_WRITABLE)))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xitems)) ((xi)))) ((xsingle_item)))
                                (((unsupported)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((xsingle_item)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((xitems)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xnd).x__setitem__)) ((6.neg)) ((xsingle_item)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xnd).x__setitem__)) (5) ((xsingle_item)))
                            ((((xis_memoryview_format)).apply ((xfmt))).not).if
                              (((unsupported)).apply)
                            xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))) ((xfmt)) ((xND_WRITABLE)))
                            xmv.write (((xmemoryview)).apply ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xitems)) ((xi)))) ((xsingle_item)))
                                (((unsupported)).apply ((((unsupported)).apply ((xmv)) ((xi)))) ((xsingle_item)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmv).xtolist)).apply)) ((xitems)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xmv).x__setitem__)) ((6.neg)) ((xsingle_item)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xmv).x__setitem__)) (5) ((xsingle_item)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((xsingle_item)))) ((((xiter_format)).apply (5))))
                          seq
                            xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))) ((xfmt)) ((xND_WRITABLE)))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((5.neg)) (4))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xitems)) ((xi)))) ((((unsupported)).apply ((xitems)) (((xi).sub 1)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((((unsupported)).apply ((xnd)) (((xi).sub 1)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((xitems)))
                            ((((xis_memoryview_format)).apply ((xfmt))).not).if
                              (((unsupported)).apply)
                            xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))) ((xfmt)) ((xND_WRITABLE)))
                            xmv.write (((xmemoryview)).apply ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply ((5.neg)) (4))))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xitems)) ((xi)))) ((((unsupported)).apply ((xitems)) (((xi).sub 1)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xmv)) ((xi)))) ((((unsupported)).apply ((xmv)) (((xi).sub 1)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmv).xtolist)).apply)) ((xitems)))
                xtest_ndarray_index_getitem_multidim.write
                  [xself]
                    memory > xnitems
                    memory > xnd
                    memory > xlst
                    memory > xshape_t
                    seq > @
                      seq
                        xshape_t.write (((unsupported)).apply (2) (3) (5))
                        xnitems.write (((xprod)).apply ((xshape_t)))
                        (((unsupported)).apply ((xshape)) ((((xpermutations)).apply ((xshape_t)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xranditems)).apply ((xnitems)))))
                            (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                              seq
                                xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)) ((xflags)))
                                xlst.write (((xcarray)).apply ((xitems)) ((xshape)))
                                (((unsupported)).apply ((xi)) ((((xrange)).apply (((((unsupported)).apply ((xshape)) (0)).neg)) ((((unsupported)).apply ((xshape)) (0))))))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlst)) ((xi)))) (((((((unsupported)).apply ((xnd)) ((xi))).xtolist)).apply)))
                                    (((unsupported)).apply ((xj)) ((((xrange)).apply (((((unsupported)).apply ((xshape)) (1)).neg)) ((((unsupported)).apply ((xshape)) (1))))))
                                      seq
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlst)) ((xi)))) ((xj)))) (((((((unsupported)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((xj))).xtolist)).apply)))
                                        (((unsupported)).apply ((xk)) ((((xrange)).apply (((((unsupported)).apply ((xshape)) (2)).neg)) ((((unsupported)).apply ((xshape)) (2))))))
                                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlst)) ((xi)))) ((xj)))) ((xk)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((xj)))) ((xk)))))
                                xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)) (((xflags).or (xND_FORTRAN))))
                                xlst.write (((xfarray)).apply ((xitems)) ((xshape)))
                                (((unsupported)).apply ((xi)) ((((xrange)).apply (((((unsupported)).apply ((xshape)) (0)).neg)) ((((unsupported)).apply ((xshape)) (0))))))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlst)) ((xi)))) (((((((unsupported)).apply ((xnd)) ((xi))).xtolist)).apply)))
                                    (((unsupported)).apply ((xj)) ((((xrange)).apply (((((unsupported)).apply ((xshape)) (1)).neg)) ((((unsupported)).apply ((xshape)) (1))))))
                                      seq
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlst)) ((xi)))) ((xj)))) (((((((unsupported)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((xj))).xtolist)).apply)))
                                        (((unsupported)).apply ((xk)) ((((xrange)).apply ((((unsupported)).apply ((xshape)) (2))) ((((unsupported)).apply ((xshape)) (2))))))
                                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlst)) ((xi)))) ((xj)))) ((xk)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((xj)))) ((xk)))))
                xtest_ndarray_sequence.write
                  [xself]
                    memory > xnd
                    memory > xmv
                    seq > @
                      seq
                        xnd.write (((unsupported)).apply ((xndarray)) (1) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xeval)) ("1 in nd") ((((xlocals)).apply)))
                        xmv.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xeval)) ("1 in mv") ((((xlocals)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xiter_format)).apply (5))))
                          seq
                            xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))) ((xfmt)))
                            (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xv)))) ((((xenumerate)).apply ((xnd)))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xitems)) ((xi)))))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xv)) ((xnd)))))
                            (((xis_memoryview_format)).apply ((xfmt))).if
                              seq
                                xmv.write (((xmemoryview)).apply ((xnd)))
                                (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xv)))) ((((xenumerate)).apply ((xmv)))))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xitems)) ((xi)))))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xv)) ((xmv)))))
                xtest_ndarray_slice_invalid.write
                  [xself]
                    memory > xitems
                    memory > xx
                    memory > xxr
                    memory > xxl
                    memory > xyr
                    memory > xml
                    memory > xmr
                    memory > xex
                    memory > xmv
                    memory > xnd
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8))
                        xxl.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ((xND_WRITABLE)))
                        xml.write (((xmemoryview)).apply ((xxl)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xxl).x__setitem__)) ((((xslice)).apply (0) (8) (1))) ((xitems)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xml).x__setitem__)) ((((xslice)).apply (0) (8) (1))) ((xitems)))
                        xxl.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ((xND_WRITABLE)))
                        xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ((xND_WRITABLE)))
                        xxr.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_ND)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xxl).x__setitem__)) ((((xslice)).apply (0) (8) (1))) ((xxr)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("L") ((xND_WRITABLE)))
                        xmv.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xnd).x__getitem__)) ((((xslice)).apply (0) (1) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmv).x__getitem__)) ((((xslice)).apply (0) (1) (0))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (2) (4))) ("L") ((xND_WRITABLE)))
                        xmv.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xnd).x__getitem__)) ((((unsupported)).apply ((((xslice)).apply (0) (1) (1))) ((((xslice)).apply (0) (1) (0))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xnd).x__getitem__)) ((((unsupported)).apply ((((xslice)).apply (0) (1) (0))) ((((xslice)).apply (0) (1) (1))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xnd).x__getitem__)) ("@%$"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xnd).x__getitem__)) ((((unsupported)).apply ("@%$") ((((xslice)).apply (0) (1) (1))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xnd).x__getitem__)) ((((unsupported)).apply ((((xslice)).apply (0) (1) (1))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xmv).x__getitem__)) ((((unsupported)).apply ((((xslice)).apply (0) (1) (1))) ((((xslice)).apply (0) (1) (0))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmv).x__getitem__)) ("@%$"))
                        xxl.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("B") ((xND_WRITABLE)))
                        xxr.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("b"))
                        xml.write (((xmemoryview)).apply ((xxl)))
                        xmr.write (((xmemoryview)).apply ((xxr)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xxl).x__setitem__)) ((((xslice)).apply (0) (1) (1))) ((((unsupported)).apply ((xxr)) ((((unsupported)).apply (7) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xxl).xtolist)).apply)) ((xitems)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xml).x__setitem__)) ((((xslice)).apply (0) (1) (1))) ((((unsupported)).apply ((xmr)) ((((unsupported)).apply (7) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xml).xtolist)).apply)) ((xitems)))
                        xxl.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("B") ((xND_WRITABLE)))
                        xyr.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("L"))
                        xml.write (((xmemoryview)).apply ((xxl)))
                        xmr.write (((xmemoryview)).apply ((xxr)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xxl).x__setitem__)) ((((xslice)).apply (0) (1) (1))) ((((unsupported)).apply ((xxr)) ((((unsupported)).apply (7) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xxl).xtolist)).apply)) ((xitems)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xml).x__setitem__)) ((((xslice)).apply (0) (1) (1))) ((((unsupported)).apply ((xmr)) ((((unsupported)).apply (7) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xml).xtolist)).apply)) ((xitems)))
                        xxl.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (2) (4))) ("b") ((xND_WRITABLE)))
                        xxr.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("b"))
                        xml.write (((xmemoryview)).apply ((xxl)))
                        xmr.write (((xmemoryview)).apply ((xxr)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xxl).x__setitem__)) ((((xslice)).apply (0) (1) (1))) ((((unsupported)).apply ((xxr)) ((((unsupported)).apply (7) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xxl).xtolist)).apply)) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4))) ((((unsupported)).apply (5) (6) (7) (8))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xml).x__setitem__)) ((((xslice)).apply (0) (1) (1))) ((((unsupported)).apply ((xmr)) ((((unsupported)).apply (7) (8))))))
                        xxl.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("b") ((xND_WRITABLE)))
                        xxr.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("b"))
                        xml.write (((xmemoryview)).apply ((xxl)))
                        xmr.write (((xmemoryview)).apply ((xxr)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xxl).x__setitem__)) ((((xslice)).apply (0) (2) (1))) ((((unsupported)).apply ((xxr)) ((((unsupported)).apply (7) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xxl).xtolist)).apply)) ((xitems)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xml).x__setitem__)) ((((xslice)).apply (0) (2) (1))) ((((unsupported)).apply ((xmr)) ((((unsupported)).apply (7) (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xml).xtolist)).apply)) ((xitems)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xslice_indices)) ((((xslice)).apply (0) (1) (2))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xslice_indices)) ("###########") (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xslice_indices)) ((((xslice)).apply (0) (1) (0))) (4))
                        xx.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("b") ((xND_PIL)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xx).xadd_suboffsets)))
                        xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (8))) ("B"))
                        xx.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_SIMPLE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xx).xadd_suboffsets)))
                xtest_ndarray_slice_zero_shape.write
                  [xself]
                    memory > xitems
                    memory > xx
                    memory > xy
                    memory > xml
                    memory > xmr
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12))
                        xx.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (12))) ("L") ((xND_WRITABLE)))
                        xy.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (12))) ("L"))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply (4) (4))))) ((((unsupported)).apply ((xy)) ((((unsupported)).apply (9) (9))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xtolist)).apply)) ((xitems)))
                        xml.write (((xmemoryview)).apply ((xx)))
                        xmr.write (((xmemoryview)).apply ((xy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xml)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xml)) ((xy)))
                        (((unsupported)).apply ((((unsupported)).apply ((xml)) ((((unsupported)).apply (4) (4))))) ((((unsupported)).apply ((xmr)) ((((unsupported)).apply (9) (9))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xml).xtolist)).apply)) ((xitems)))
                        xx.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (3) (4))) ("L") ((xND_WRITABLE)))
                        xy.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (4) (3))) ("L"))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (2) (2))))))) ((((unsupported)).apply ((xy)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (3))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xtolist)).apply)) ((((xcarray)).apply ((xitems)) ((((unsupported)).apply (3) (4))))))
                xtest_ndarray_slice_multidim.write
                  [xself]
                    memory > xsliced
                    memory > xitemsize
                    memory > xlisterr
                    memory > xlst
                    memory > xshape_t
                    memory > xnderr
                    memory > xnd
                    memory > xnitems
                    memory > xndsliced
                    memory > xndim
                    seq > @
                      seq
                        xshape_t.write (((unsupported)).apply (2) (3) (5))
                        xndim.write (((xlen)).apply ((xshape_t)))
                        xnitems.write (((xprod)).apply ((xshape_t)))
                        (((unsupported)).apply ((xshape)) ((((xpermutations)).apply ((xshape_t)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xranditems)).apply ((xnitems)))))
                            xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                            (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                              seq
                                xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)) ((xflags)))
                                xlst.write (((xcarray)).apply ((xitems)) ((xshape)))
                                (((unsupported)).apply ((xslices)) ((((xrslices_ndim)).apply ((xndim)) ((xshape)))))
                                  seq
                                    xlisterr.write "None: is there a None literal in the EO language?"
                                    (((unsupported)).apply ((xException)))
                                      xsliced.write (((xmultislice)).apply ((xlst)) ((xslices)))
                                      xlisterr.write ((xe).x__class__)
                                    xnderr.write "None: is there a None literal in the EO language?"
                                    (((unsupported)).apply ((xException)))
                                      xndsliced.write (((unsupported)).apply ((xnd)) ((xslices)))
                                      xnderr.write ((xe).x__class__)
                                    ((xnderr).or (xlisterr)).if
                                      bogusForceDataize.write ((((xself).xassertIs)).apply ((xnderr)) ((xlisterr)))
                                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xndsliced).xtolist)).apply)) ((xsliced)))
                xtest_ndarray_slice_redundant_suboffsets.write
                  [xself]
                    memory > xsliced
                    memory > xitemsize
                    memory > xlisterr
                    memory > xlst
                    memory > xshape_t
                    memory > xnderr
                    memory > xex
                    memory > xmv
                    memory > xnd
                    memory > xnitems
                    memory > xndsliced
                    memory > xndim
                    seq > @
                      seq
                        xshape_t.write (((unsupported)).apply (2) (3) (5) (2))
                        xndim.write (((xlen)).apply ((xshape_t)))
                        xnitems.write (((xprod)).apply ((xshape_t)))
                        (((unsupported)).apply ((xshape)) ((((xpermutations)).apply ((xshape_t)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xranditems)).apply ((xnitems)))))
                            xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                            xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)))
                            bogusForceDataize.write ((((xnd).xadd_suboffsets)).apply)
                            xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)))
                            bogusForceDataize.write ((((xex).xadd_suboffsets)).apply)
                            xmv.write (((xmemoryview)).apply ((xex)))
                            xlst.write (((xcarray)).apply ((xitems)) ((xshape)))
                            (((unsupported)).apply ((xslices)) ((((xrslices_ndim)).apply ((xndim)) ((xshape)))))
                              seq
                                xlisterr.write "None: is there a None literal in the EO language?"
                                (((unsupported)).apply ((xException)))
                                  xsliced.write (((xmultislice)).apply ((xlst)) ((xslices)))
                                  xlisterr.write ((xe).x__class__)
                                xnderr.write "None: is there a None literal in the EO language?"
                                (((unsupported)).apply ((xException)))
                                  xndsliced.write (((unsupported)).apply ((xnd)) ((xslices)))
                                  xnderr.write ((xe).x__class__)
                                ((xnderr).or (xlisterr)).if
                                  bogusForceDataize.write ((((xself).xassertIs)).apply ((xnderr)) ((xlisterr)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xndsliced).xtolist)).apply)) ((xsliced)))
                xtest_ndarray_slice_assign_single.write
                  [xself]
                    memory > xrval
                    memory > xlsterr
                    memory > xf
                    memory > xlval
                    memory > xnderr
                    memory > xmverr
                    memory > xlst
                    memory > xex
                    memory > xmv
                    memory > xnd
                    memory > xdiff_structure
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xiter_format)).apply (5))))
                        (((unsupported)).apply ((xlslice)) ((((xgenslices)).apply (5))))
                          (((unsupported)).apply ((xrslice)) ((((xgenslices)).apply (5))))
                            (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                              seq
                                xf.write ((xflags).or (xND_WRITABLE))
                                xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))) ((xfmt)) ((xf)))
                                xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (5))) ((xfmt)) ((xf)))
                                xmv.write (((xmemoryview)).apply ((xex)))
                                xlsterr.write "None: is there a None literal in the EO language?"
                                xdiff_structure.write "None: is there a None literal in the EO language?"
                                xlst.write (((unsupported)).apply ((xitems)) ((((unsupported)).apply)))
                                (((unsupported)).apply ((xException)))
                                  seq
                                    xlval.write (((unsupported)).apply ((xlst)) ((xlslice)))
                                    xrval.write (((unsupported)).apply ((xlst)) ((xrslice)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xlst)) ((xlslice)))) ((((unsupported)).apply ((xlst)) ((xrslice)))))
                                    xdiff_structure.write ((((xlen)).apply ((xlval))).neq (((xlen)).apply ((xrval))))
                                  xlsterr.write ((xe).x__class__)
                                xnderr.write "None: is there a None literal in the EO language?"
                                (((unsupported)).apply ((xException)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xnd)) ((xlslice)))) ((((unsupported)).apply ((xnd)) ((xrslice)))))
                                  xnderr.write ((xe).x__class__)
                                (xdiff_structure).if
                                  bogusForceDataize.write ((((xself).xassertIs)).apply ((xnderr)) ((xValueError)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((xlst)))
                                    bogusForceDataize.write ((((xself).xassertIs)).apply ((xnderr)) ((xlsterr)))
                                ((((xis_memoryview_format)).apply ((xfmt))).not).if
                                  (((unsupported)).apply)
                                xmverr.write "None: is there a None literal in the EO language?"
                                (((unsupported)).apply ((xException)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xmv)) ((xlslice)))) ((((unsupported)).apply ((xmv)) ((xrslice)))))
                                  xmverr.write ((xe).x__class__)
                                (xdiff_structure).if
                                  bogusForceDataize.write ((((xself).xassertIs)).apply ((xmverr)) ((xValueError)))
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmv).xtolist)).apply)) ((xlst)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                                    bogusForceDataize.write ((((xself).xassertIs)).apply ((xmverr)) ((xlsterr)))
                                    (((unsupported)).apply (((xself).xverify)) ((xmv)) ((xex)) (((xnd).xitemsize)) ((xfmt)) (FALSE) (((xnd).xndim)) (((xnd).xshape)) (((xnd).xstrides)) (((((xnd).xtolist)).apply)))
                xtest_ndarray_slice_assign_multidim.write
                  [xself]
                    memory > xlisterr
                    memory > xlst
                    memory > xshape_t
                    memory > xndim
                    memory > xnderr
                    memory > xresult
                    memory > xnd
                    memory > xnitems
                    seq > @
                      seq
                        xshape_t.write (((unsupported)).apply (2) (3) (5))
                        xndim.write (((xlen)).apply ((xshape_t)))
                        xnitems.write (((xprod)).apply ((xshape_t)))
                        (((unsupported)).apply ((xshape)) ((((xpermutations)).apply ((xshape_t)))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xranditems)).apply ((xnitems)))))
                            (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                              (((unsupported)).apply ((x_)) ((((xrange)).apply ((xITERATIONS)))))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((xlslices)) ((xrslices)))) ((((xrandslice_from_shape)).apply ((xndim)) ((xshape)))))
                                  xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)) (((xflags).or (xND_WRITABLE))))
                                  xlst.write (((xcarray)).apply ((xitems)) ((xshape)))
                                  xlisterr.write "None: is there a None literal in the EO language?"
                                  (((unsupported)).apply ((xException)))
                                    xresult.write (((xmultislice_assign)).apply ((xlst)) ((xlst)) ((xlslices)) ((xrslices)))
                                    xlisterr.write ((xe).x__class__)
                                  xnderr.write "None: is there a None literal in the EO language?"
                                  (((unsupported)).apply ((xException)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xnd)) ((xlslices)))) ((((unsupported)).apply ((xnd)) ((xrslices)))))
                                    xnderr.write ((xe).x__class__)
                                  ((xnderr).or (xlisterr)).if
                                    bogusForceDataize.write ((((xself).xassertIs)).apply ((xnderr)) ((xlisterr)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((xresult)))
                xtest_ndarray_random.write
                  [xself]
                    memory > xxlist
                    memory > xz
                    memory > xt
                    memory > xshape
                    memory > xmvlist
                    memory > xitemsize
                    memory > xitems
                    memory > xx
                    memory > xylist
                    memory > xmv
                    memory > xy
                    seq > @
                      (((unsupported)).apply ((x_)) ((((xrange)).apply ((xITERATIONS)))))
                        (((unsupported)).apply ((xfmt)) ((((unsupported)).apply ((xfmtdict)) ("@"))))
                          seq
                            xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                            xt.write (((unsupported)).apply ((xrand_structure)) ((xitemsize)) (TRUE) ((xMAXDIM)) ((xMAXSHAPE)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xverify_structure)).apply ((((unsupported)).apply ((xt)))))))
                            xitems.write (((xranditems_from_structure)).apply ((xfmt)) ((xt)))
                            xx.write (((xndarray_from_structure)).apply ((xitems)) ((xfmt)) ((xt)))
                            xxlist.write ((((xx).xtolist)).apply)
                            xmv.write (((xmemoryview)).apply ((xx)))
                            (((xis_memoryview_format)).apply ((xfmt))).if
                              seq
                                xmvlist.write ((((xmv).xtolist)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmvlist)) ((xxlist)))
                            ((((unsupported)).apply ((xt)) (2)).greater 0).if
                              seq
                                xy.write (((unsupported)).apply ((xndarray_from_structure)) ((xitems)) ((xfmt)) ((xt)) ((xND_PIL)))
                                xylist.write ((((xy).xtolist)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xxlist)) ((xylist)))
                                xmv.write (((xmemoryview)).apply ((xy)))
                                (((xis_memoryview_format)).apply ((xfmt))).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xy)))
                                    xmvlist.write ((((xmv).xtolist)).apply)
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmvlist)) ((xylist)))
                            (xnumpy_array).if
                              seq
                                xshape.write (((unsupported)).apply ((xt)) (3))
                                (((unsupported)).apply (0) ((xshape))).if
                                  (((unsupported)).apply)
                                xz.write (((xnumpy_array_from_structure)).apply ((xitems)) ((xfmt)) ((xt)))
                                (((unsupported)).apply (((xself).xverify)) ((xx)) ("None: is there a None literal in the EO language?") (((xz).xitemsize)) ((xfmt)) (FALSE) (((xz).xndim)) (((xz).xshape)) (((xz).xstrides)) (((((xz).xtolist)).apply)))
                xtest_ndarray_random_invalid.write
                  [xself]
                    memory > xitemsize
                    memory > xitems
                    memory > xx
                    memory > xy
                    memory > xnderr
                    memory > xt
                    memory > xnumpy_err
                    seq > @
                      (((unsupported)).apply ((x_)) ((((xrange)).apply ((xITERATIONS)))))
                        (((unsupported)).apply ((xfmt)) ((((unsupported)).apply ((xfmtdict)) ("@"))))
                          seq
                            xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                            xt.write (((unsupported)).apply ((xrand_structure)) ((xitemsize)) (FALSE) ((xMAXDIM)) ((xMAXSHAPE)))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xverify_structure)).apply ((((unsupported)).apply ((xt)))))))
                            xitems.write (((xranditems_from_structure)).apply ((xfmt)) ((xt)))
                            xnderr.write FALSE
                            (((unsupported)).apply ((xException)))
                              xx.write (((xndarray_from_structure)).apply ((xitems)) ((xfmt)) ((xt)))
                              xnderr.write ((xe).x__class__)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((xnderr)))
                            (xnumpy_array).if
                              seq
                                xnumpy_err.write FALSE
                                (((unsupported)).apply ((xException)))
                                  xy.write (((xnumpy_array_from_structure)).apply ((xitems)) ((xfmt)) ((xt)))
                                  xnumpy_err.write ((xe).x__class__)
                                0.if
                                  bogusForceDataize.write ((((xself).xassertTrue)).apply ((xnumpy_err)))
                xtest_ndarray_random_slice_assign.write
                  [xself]
                    memory > xlitems
                    memory > xxrlist
                    memory > xzl
                    memory > xitemsize
                    memory > xxr
                    memory > xritems
                    memory > xxl
                    memory > xxllist
                    memory > xzr
                    memory > xyllist
                    memory > xyr
                    memory > xml
                    memory > xmr
                    memory > xtr
                    memory > xyl
                    memory > xyrlist
                    memory > xtl
                    seq > @
                      (((unsupported)).apply ((x_)) ((((xrange)).apply ((xITERATIONS)))))
                        (((unsupported)).apply ((xfmt)) ((((unsupported)).apply ((xfmtdict)) ("@"))))
                          seq
                            xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                            (((unsupported)).apply ((((unsupported)).apply ((xlshape)) ((xrshape)) ((xlslices)) ((xrslices)))) ((((unsupported)).apply ((xrand_aligned_slices)) ((xMAXDIM)) ((xMAXSHAPE)))))
                            xtl.write (((unsupported)).apply ((xrand_structure)) ((xitemsize)) (TRUE) ((xlshape)))
                            xtr.write (((unsupported)).apply ((xrand_structure)) ((xitemsize)) (TRUE) ((xrshape)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xverify_structure)).apply ((((unsupported)).apply ((xtl)))))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xverify_structure)).apply ((((unsupported)).apply ((xtr)))))))
                            xlitems.write (((xranditems_from_structure)).apply ((xfmt)) ((xtl)))
                            xritems.write (((xranditems_from_structure)).apply ((xfmt)) ((xtr)))
                            xxl.write (((xndarray_from_structure)).apply ((xlitems)) ((xfmt)) ((xtl)))
                            xxr.write (((xndarray_from_structure)).apply ((xritems)) ((xfmt)) ((xtr)))
                            (((unsupported)).apply ((((unsupported)).apply ((xxl)) ((xlslices)))) ((((unsupported)).apply ((xxr)) ((xrslices)))))
                            xxllist.write ((((xxl).xtolist)).apply)
                            xxrlist.write ((((xxr).xtolist)).apply)
                            xml.write (((xmemoryview)).apply ((xxl)))
                            xmr.write (((xmemoryview)).apply ((xxr)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xml).xtolist)).apply)) ((xxllist)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmr).xtolist)).apply)) ((xxrlist)))
                            (((((unsupported)).apply ((xtl)) (2)).greater 0).and ((((unsupported)).apply ((xtr)) (2)).greater 0)).if
                              seq
                                xyl.write (((unsupported)).apply ((xndarray_from_structure)) ((xlitems)) ((xfmt)) ((xtl)) ((xND_PIL)))
                                xyr.write (((unsupported)).apply ((xndarray_from_structure)) ((xritems)) ((xfmt)) ((xtr)) ((xND_PIL)))
                                (((unsupported)).apply ((((unsupported)).apply ((xyl)) ((xlslices)))) ((((unsupported)).apply ((xyr)) ((xrslices)))))
                                xyllist.write ((((xyl).xtolist)).apply)
                                xyrlist.write ((((xyr).xtolist)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xxllist)) ((xyllist)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xxrlist)) ((xyrlist)))
                                xml.write (((xmemoryview)).apply ((xyl)))
                                xmr.write (((xmemoryview)).apply ((xyr)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xml).xtolist)).apply)) ((xyllist)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmr).xtolist)).apply)) ((xyrlist)))
                            (xnumpy_array).if
                              seq
                                ((((unsupported)).apply (0) ((xlshape))).or (((unsupported)).apply (0) ((xrshape)))).if
                                  (((unsupported)).apply)
                                xzl.write (((xnumpy_array_from_structure)).apply ((xlitems)) ((xfmt)) ((xtl)))
                                xzr.write (((xnumpy_array_from_structure)).apply ((xritems)) ((xfmt)) ((xtr)))
                                (((unsupported)).apply ((((unsupported)).apply ((xzl)) ((xlslices)))) ((((unsupported)).apply ((xzr)) ((xrslices)))))
                                (((((xis_overlapping)).apply ((xtl))).not).and ((((xis_overlapping)).apply ((xtr))).not)).if
                                  (((unsupported)).apply (((xself).xverify)) ((xxl)) ("None: is there a None literal in the EO language?") (((xzl).xitemsize)) ((xfmt)) (FALSE) (((xzl).xndim)) (((xzl).xshape)) (((xzl).xstrides)) (((((xzl).xtolist)).apply)))
                                (((unsupported)).apply (((xself).xverify)) ((xxr)) ("None: is there a None literal in the EO language?") (((xzr).xitemsize)) ((xfmt)) (FALSE) (((xzr).xndim)) (((xzr).xshape)) (((xzr).xstrides)) (((((xzr).xtolist)).apply)))
                xtest_ndarray_re_export.write
                  [xself]
                    memory > xnd
                    memory > xex
                    memory > xitems
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (3) (4))) ((xND_PIL)))
                        xex.write (((xndarray)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xex).xflags).and (xND_PIL))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xex).xobj)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xex).xsuboffsets)) ((((unsupported)).apply (0) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xex).xc_contiguous)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xex).xf_contiguous)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xex).xcontiguous)))
                xtest_ndarray_zero_shape.write
                  [xself]
                    memory > xnd
                    memory > xmv
                    seq > @
                      (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                        seq
                          xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (0))) ((xflags)))
                          xmv.write (((xmemoryview)).apply ((xnd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmv).xtolist)).apply)) ((((unsupported)).apply)))
                          xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (0) (3) (3))) ((xflags)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((((unsupported)).apply)))
                          xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3) (0) (3))) ((xflags)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                          xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3) (3) (0))) ((xflags)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))))
                xtest_ndarray_zero_strides.write
                  [xself]
                    memory > xnd
                    memory > xmv
                    seq > @
                      (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                        seq
                          xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (5))) ((((unsupported)).apply (0))) ((xflags)))
                          xmv.write (((xmemoryview)).apply ((xnd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmv)) ((xnd)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((((unsupported)).apply (1) (1) (1) (1) (1))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmv).xtolist)).apply)) ((((unsupported)).apply (1) (1) (1) (1) (1))))
                xtest_ndarray_offset.write
                  [xself]
                    memory > xnd
                    seq > @
                      seq
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (20))))) ((((unsupported)).apply (3))) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnd).xoffset)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) ((((unsupported)).apply (7) (8) (9))))
                xtest_ndarray_memoryview_from_buffer.write
                  [xself]
                    memory > xnd
                    memory > xm
                    seq > @
                      (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                        seq
                          xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (3))))) ((((unsupported)).apply (3))) ((xflags)))
                          xm.write ((((xnd).xmemoryview_from_buffer)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                xtest_ndarray_get_pointer.write
                  [xself]
                    memory > xnd
                    seq > @
                      (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                        seq
                          xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (3))))) ((((unsupported)).apply (3))) ((xflags)))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (3))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnd)) ((xi)))) ((((xget_pointer)).apply ((xnd)) ((((unsupported)).apply ((xi)))))))
                xtest_ndarray_tolist_null_strides.write
                  [xself]
                    memory > xnd
                    memory > xex
                    memory > xm
                    seq > @
                      seq
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (20))))) ((((unsupported)).apply (2) (2) (5))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) (((xPyBUF_ND).or (xPyBUF_FORMAT))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xnd).xtolist)).apply)) (((((xex).xtolist)).apply)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xex).xtolist)).apply)))
                xtest_ndarray_cmp_contig.write
                  [xself]
                    memory > xx
                    memory > xy
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcmp_contig)).apply ("123") ("456"))))
                        xx.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))))
                        xy.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (4) (3))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xcmp_contig)).apply ((xx)) ((xy)))))
                        xx.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ("B"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcmp_contig)).apply ((xx)) ("x01"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcmp_contig)).apply ("x01") ((xx)))))
                xtest_ndarray_hash.write
                  [xself]
                    memory > xnd
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply ("L") ((((unsupported)).apply (1) (2) (3))))
                        xnd.write (((xndarray)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xhash)) ((xnd)))
                        xb.write (((xbytes)).apply ((((xlist)).apply ((((xrange)).apply (12))))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (12))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xnd)))) ((((xhash)).apply ((xb)))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xnd)))) ((((xhash)).apply ((xb)))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (2) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xnd)))) ((((xhash)).apply ((xb)))))
                        xb.write (((xbytes)).apply ((((unsupported)).apply ((xtranspose)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (4) (3))))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))) ((xND_FORTRAN)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xnd)))) ((((xhash)).apply ((xb)))))
                        xb.write (((xbytes)).apply ((((unsupported)).apply ((xtranspose)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (2) (3) (2))))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (2) (3) (2))) ((xND_FORTRAN)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xnd)))) ((((xhash)).apply ((xb)))))
                        xb.write (((xbytes)).apply ((((xlist)).apply ((((xrange)).apply (12))))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (2) (2) (3))) ((xND_PIL)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xnd)))) ((((xhash)).apply ((xb)))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (2) (2) (3))) ("L"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xnd)))) ((((xhash)).apply (((((xnd).xtobytes)).apply)))))
                xtest_py_buffer_to_contiguous.write
                  [xself]
                    memory > xexpected
                    memory > xrequests
                    memory > xb
                    memory > xx
                    memory > xna
                    memory > xlst
                    memory > xndbytes
                    memory > xnd
                    memory > xy
                    seq > @
                      seq
                        xrequests.write (((unsupported)).apply ((xPyBUF_INDIRECT)) ((xPyBUF_STRIDES)) ((xPyBUF_ND)) ((xPyBUF_SIMPLE)) ((xPyBUF_FULL)) ((xPyBUF_FULL_RO)) ((xPyBUF_RECORDS)) ((xPyBUF_RECORDS_RO)) ((xPyBUF_STRIDED)) ((xPyBUF_STRIDED_RO)) ((xPyBUF_CONTIG)) ((xPyBUF_CONTIG_RO)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xpy_buffer_to_contiguous)) ((((unsupported)).apply)) ("F") ((xPyBUF_FULL_RO)))
                        xnd.write (((unsupported)).apply ((xndarray)) (9) ((((unsupported)).apply)) ("L") ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          (((unsupported)).apply ((xrequest)) ((xrequests)))
                            seq
                              xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ((xorder)) ((xrequest)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xnd).xtobytes)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (0))) ("L") ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          (((unsupported)).apply ((xrequest)) ((xrequests)))
                            seq
                              xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ((xorder)) ((xrequest)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (""))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (8))))) ((((unsupported)).apply (2) (0) (7))) ("L") ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          (((unsupported)).apply ((xrequest)) ((xrequests)))
                            seq
                              xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ((xorder)) ((xrequest)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (""))
                        (((unsupported)).apply ((xf)) ((((unsupported)).apply (0) ((xND_FORTRAN)))))
                          seq
                            xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ("h") (((xf).or (xND_WRITABLE))))
                            xndbytes.write ((((xnd).xtobytes)).apply)
                            (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                              (((unsupported)).apply ((xrequest)) ((xrequests)))
                                seq
                                  xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ((xorder)) ((xrequest)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xndbytes)))
                            xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ("b") (((xf).or (xND_WRITABLE))))
                            xndbytes.write ((((xnd).xtobytes)).apply)
                            (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                              (((unsupported)).apply ((xrequest)) ((xrequests)))
                                seq
                                  xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ((xorder)) ((xrequest)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xndbytes)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (2))) ((((unsupported)).apply (2))) ((xND_WRITABLE)))
                        xndbytes.write ((((xnd).xtobytes)).apply)
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          (((unsupported)).apply ((xrequest)) ((((unsupported)).apply ((xPyBUF_STRIDES)) ((xPyBUF_FULL)))))
                            seq
                              xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ((xorder)) ((xrequest)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xndbytes)))
                        xnd.write (((unsupported)).apply ((xnd)) ((((unsupported)).apply ((1.neg)))))
                        xndbytes.write ((((xnd).xtobytes)).apply)
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          (((unsupported)).apply ((xrequest)) ((xrequests)))
                            seq
                              (((unsupported)).apply ((xBufferError)))
                                xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ((xorder)) ((xrequest)))
                                (((unsupported)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xndbytes)))
                        xlst.write (((xlist)).apply ((((xrange)).apply (12))))
                        (((unsupported)).apply ((xf)) ((((unsupported)).apply (0) ((xND_FORTRAN)))))
                          seq
                            xnd.write (((unsupported)).apply ((xndarray)) ((xlst)) ((((unsupported)).apply (3) (4))) (((xf).or (xND_WRITABLE))))
                            (xnumpy_array).if
                              xna.write (((unsupported)).apply ((xnumpy_array)) ((((xbytearray)).apply ((xlst)))) ((((unsupported)).apply (3) (4))) ("B") ((((xf).eq 0).if "C" "F")))
                            ((xf).eq (xND_FORTRAN)).if
                              seq
                                xx.write (((unsupported)).apply ((xndarray)) ((((xtranspose)).apply ((xlst)) ((((unsupported)).apply (4) (3))))) ((((unsupported)).apply (3) (4))) ((xND_WRITABLE)))
                                xexpected.write ((((xx).xtobytes)).apply)
                              xexpected.write ((((xnd).xtobytes)).apply)
                            (((unsupported)).apply ((xrequest)) ((xrequests)))
                              seq
                                (((unsupported)).apply ((xBufferError)))
                                  xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ("C") ((xrequest)))
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xexpected)))
                                xy.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((xv)) ((xv)) ((xb)))) ((((unsupported)).apply (3) (4))) ((xND_WRITABLE)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmemoryview)).apply ((xy)))) ((((xmemoryview)).apply ((xnd)))))
                                (xnumpy_array).if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((unsupported)).apply (((xna).xtostring)) ("C"))))
                            ((xf).eq 0).if
                              xx.write (((unsupported)).apply ((xndarray)) ((((xtranspose)).apply ((xlst)) ((((unsupported)).apply (3) (4))))) ((((unsupported)).apply (4) (3))) ((xND_WRITABLE)))
                              xx.write (((unsupported)).apply ((xndarray)) ((xlst)) ((((unsupported)).apply (3) (4))) ((xND_WRITABLE)))
                            xexpected.write ((((xx).xtobytes)).apply)
                            (((unsupported)).apply ((xrequest)) ((((unsupported)).apply ((xPyBUF_FULL)) ((xPyBUF_FULL_RO)) ((xPyBUF_INDIRECT)) ((xPyBUF_STRIDES)) ((xPyBUF_ND)))))
                              seq
                                (((unsupported)).apply ((xBufferError)))
                                  xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ("F") ((xrequest)))
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xexpected)))
                                xy.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((xv)) ((xv)) ((xb)))) ((((unsupported)).apply (3) (4))) (((xND_FORTRAN).or (xND_WRITABLE))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmemoryview)).apply ((xy)))) ((((xmemoryview)).apply ((xnd)))))
                                (xnumpy_array).if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((unsupported)).apply (((xna).xtostring)) ("F"))))
                            ((xf).eq (xND_FORTRAN)).if
                              seq
                                xx.write (((unsupported)).apply ((xndarray)) ((xlst)) ((((unsupported)).apply (3) (4))) ((xND_WRITABLE)))
                                xexpected.write ((((xx).xtobytes)).apply)
                              xexpected.write ((((xnd).xtobytes)).apply)
                            (((unsupported)).apply ((xrequest)) ((((unsupported)).apply ((xPyBUF_FULL)) ((xPyBUF_FULL_RO)) ((xPyBUF_INDIRECT)) ((xPyBUF_STRIDES)) ((xPyBUF_ND)))))
                              seq
                                (((unsupported)).apply ((xBufferError)))
                                  xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ("A") ((xrequest)))
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xexpected)))
                                xy.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((xv)) ((xv)) ((xb)))) ((((unsupported)).apply (3) (4))) (((xf).or (xND_WRITABLE))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmemoryview)).apply ((xy)))) ((((xmemoryview)).apply ((xnd)))))
                                (xnumpy_array).if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((((unsupported)).apply (((xna).xtostring)) ("A"))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))) (((xND_WRITABLE).or (xND_PIL))))
                        xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ("C") ((xPyBUF_FULL_RO)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xnd).xtobytes)).apply)))
                        xy.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((xv)) ((xv)) ((xb)))) ((((unsupported)).apply (3) (4))) ((xND_WRITABLE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmemoryview)).apply ((xy)))) ((((xmemoryview)).apply ((xnd)))))
                        xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ("F") ((xPyBUF_FULL_RO)))
                        xx.write (((unsupported)).apply ((xndarray)) ((((xtranspose)).apply ((xlst)) ((((unsupported)).apply (3) (4))))) ((((unsupported)).apply (4) (3))) ((xND_WRITABLE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xx).xtobytes)).apply)))
                        xy.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((xv)) ((xv)) ((xb)))) ((((unsupported)).apply (3) (4))) (((xND_FORTRAN).or (xND_WRITABLE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmemoryview)).apply ((xy)))) ((((xmemoryview)).apply ((xnd)))))
                        xb.write (((xpy_buffer_to_contiguous)).apply ((xnd)) ("A") ((xPyBUF_FULL_RO)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xnd).xtobytes)).apply)))
                        xy.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((xv)) ((xv)) ((xb)))) ((((unsupported)).apply (3) (4))) ((xND_WRITABLE)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmemoryview)).apply ((xy)))) ((((xmemoryview)).apply ((xnd)))))
                xtest_memoryview_construction.write
                  [xself]
                    memory > xitems_shape
                    memory > xm
                    memory > xlst
                    memory > xstrides
                    memory > xndim
                    memory > xm2
                    memory > xex
                    memory > xnd
                    seq > @
                      seq
                        xitems_shape.write (((unsupported)).apply ((((unsupported)).apply (9) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))))) ((((unsupported)).apply ((((xlist)).apply ((((xrange)).apply (((2.mul 3).mul 5)))))) ((((unsupported)).apply (2) (3) (5))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems)) ((xshape)))) ((xitems_shape)))
                          seq
                            xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)))
                            xm.write (((xmemoryview)).apply ((xex)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).xc_contiguous)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).xcontiguous)))
                            xndim.write (((xlen)).apply ((xshape)))
                            xstrides.write (((xstrides_from_shape)).apply ((xndim)) ((xshape)) (1) ("C"))
                            xlst.write (((xcarray)).apply ((xitems)) ((xshape)))
                            (((unsupported)).apply (((xself).xverify)) ((xm)) ((xex)) (1) ("B") (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)))
                            xm2.write (((xmemoryview)).apply ((xm)))
                            (((unsupported)).apply (((xself).xverify)) ((xm2)) ((xex)) (1) ("B") (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)))
                            xnd.write (((unsupported)).apply ((xndarray)) ((xex)) (((xPyBUF_CONTIG_RO).or (xPyBUF_FORMAT))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnd).xstrides)) ((((unsupported)).apply)))
                            xm.write ((((xnd).xmemoryview_from_buffer)).apply)
                            (((unsupported)).apply (((xself).xverify)) ((xm)) ("None: is there a None literal in the EO language?") (1) ("B") (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)))
                            xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_SIMPLE)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnd).xformat)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnd).xshape)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnd).xstrides)) ((((unsupported)).apply)))
                            xm.write ((((xnd).xmemoryview_from_buffer)).apply)
                            xlst.write (((xndim).eq 0).if (((unsupported)).apply ((xitems))) (xitems))
                            (((unsupported)).apply (((xself).xverify)) ((xm)) ("None: is there a None literal in the EO language?") (1) ("B") (TRUE) (1) ((((unsupported)).apply (((xex).xnbytes)))) ((((unsupported)).apply (1))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems)) ((xshape)))) ((xitems_shape)))
                          seq
                            xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xND_FORTRAN)))
                            xm.write (((xmemoryview)).apply ((xex)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).xf_contiguous)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).xcontiguous)))
                            xndim.write (((xlen)).apply ((xshape)))
                            xstrides.write (((xstrides_from_shape)).apply ((xndim)) ((xshape)) (1) ("F"))
                            xlst.write (((xfarray)).apply ((xitems)) ((xshape)))
                            (((unsupported)).apply (((xself).xverify)) ((xm)) ((xex)) (1) ("B") (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)))
                            xm2.write (((xmemoryview)).apply ((xm)))
                            (((unsupported)).apply (((xself).xverify)) ((xm2)) ((xex)) (1) ("B") (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xitems)) ((xshape)))) ((((unsupported)).apply ((xitems_shape)) ((((unsupported)).apply (1))))))
                          seq
                            xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xND_PIL)))
                            xm.write (((xmemoryview)).apply ((xex)))
                            xndim.write (((xlen)).apply ((xshape)))
                            xlst.write (((xcarray)).apply ((xitems)) ((xshape)))
                            (((unsupported)).apply (((xself).xverify)) ((xm)) ((xex)) (1) ("B") (TRUE) ((xndim)) ((xshape)) (((xex).xstrides)) ((xlst)))
                            xm2.write (((xmemoryview)).apply ((xm)))
                            (((unsupported)).apply (((xself).xverify)) ((xm2)) ((xex)) (1) ("B") (TRUE) ((xndim)) ((xshape)) (((xex).xstrides)) ((xlst)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xmemoryview)) ("9") ("x"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xmemoryview)) ((((unsupported)).apply)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) ((xPyBUF_SIMPLE)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xmemoryview)) ((xnd)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xex)) (((xPyBUF_CONTIG_RO).or (xPyBUF_FORMAT))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xmemoryview)) ((xnd)))
                        xnd.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply (1)).mul 128)) (((((unsupported)).apply (1)).mul 128)) ("L"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xmemoryview)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xnd).xmemoryview_from_buffer)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_contiguous)) ((xnd)) ((xPyBUF_READ)) ("C"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_contiguous)) ((xnd)) ((xPyBUF_READ)) ("F"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xget_contiguous)) ((((unsupported)).apply ((xnd)) ((((unsupported)).apply ((1.neg)))))) ((xPyBUF_READ)) ("C"))
                xtest_memoryview_cast_zero_shape.write
                  [xself]
                    memory > xmsrc
                    memory > xex
                    memory > xitems
                    memory > xm
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply (1) (2) (3))
                        (((unsupported)).apply ((xshape)) ((((unsupported)).apply ((((unsupported)).apply (0) (3) (3))) ((((unsupported)).apply (3) (0) (3))) ((((unsupported)).apply (0) (3) (3))))))
                          seq
                            xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((xex).xc_contiguous)))
                            xmsrc.write (((xmemoryview)).apply ((xex)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmsrc).xcast)) ("c"))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((x_)) ((x_)))) ((((xiter_format)).apply (1) ("memoryview"))))
                          seq
                            xmsrc.write (((xmemoryview)).apply (""))
                            xm.write ((((xmsrc).xcast)).apply ((xfmt)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) ((((unsupported)).apply)))
                xcheck_sizeof.write ((xsupport).xcheck_sizeof)
                xtest_memoryview_sizeof.write
                  [xself]
                    memory > xcheck
                    memory > xitems
                    memory > xper_dim
                    memory > xbase_struct
                    memory > xvsize
                    memory > xa
                    seq > @
                      seq
                        xcheck.write ((xself).xcheck_sizeof)
                        xvsize.write ((xsupport).xcalcvobjsize)
                        xbase_struct.write "Pnin 2P2n2i5P P"
                        xper_dim.write "3n"
                        xitems.write (((xlist)).apply ((((xrange)).apply (8))))
                        bogusForceDataize.write (((xcheck)).apply ((((xmemoryview)).apply (""))) ((((xvsize)).apply (((xbase_struct).sub (1.mul (xper_dim)))))))
                        xa.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (2) (4))) ("b"))
                        bogusForceDataize.write (((xcheck)).apply ((((xmemoryview)).apply ((xa)))) ((((xvsize)).apply (((xbase_struct).sub (2.mul (xper_dim)))))))
                        xa.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (2) (2) (2))) ("b"))
                        bogusForceDataize.write (((xcheck)).apply ((((xmemoryview)).apply ((xa)))) ((((xvsize)).apply (((xbase_struct).sub (3.mul (xper_dim)))))))
                xtest_memoryview_struct_module.write
                  [xself]
                    memory > xvalues
                    memory > x__index__
                    memory > xstruct_err
                    memory > xitemsize
                    memory > xf
                    memory > xm
                    memory > x__init__
                    memory > xmv_err
                    memory > x__int__
                    memory > xex
                    memory > xnd
                    seq > @
                      seq
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself xval]
                                seq > @
                                  (((unsupported)).apply (((xself).xval)) ((xval)))
                            x__int__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xval)))
                        (((unsupported)).apply ((xobject)))
                          seq
                            x__init__.write
                              [xself xval]
                                seq > @
                                  (((unsupported)).apply (((xself).xval)) ((xval)))
                            x__index__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xval)))
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply (7))
                        xvalues.write (((unsupported)).apply ((((xINT)).apply (9))) ((((xIDX)).apply (9))) ((2.2.sub (((unsupported)).apply))) ((((xDecimal)).apply ("-21.1"))) (12.2) ((((xFraction)).apply (5) (2))) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (4) (5) (6))) ((((unsupported)).apply (7) (8))) ((((unsupported)).apply)) ((((unsupported)).apply (9))) (TRUE) (FALSE) ("None: is there a None literal in the EO language?") ((xNotImplemented)) ("a") ("abc") ((((xbytearray)).apply ("a"))) ((((xbytearray)).apply ("abc"))) ("a") ("abc") ("a") ("abc") ((xf)) ((((unsupported)).apply ((xx)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((xitem)))) ((((xiter_format)).apply (10) ("memoryview"))))
                          seq
                            xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (10))) ((xfmt)) ((xND_WRITABLE)))
                            xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (10))) ((xfmt)) ((xND_WRITABLE)))
                            xm.write (((xmemoryview)).apply ((xex)))
                            bogusForceDataize.write ((((xstruct).xpack_into)).apply ((xfmt)) ((xnd)) (0) ((xitem)))
                            (((unsupported)).apply ((((unsupported)).apply ((xm)) (0))) ((xitem)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (0))) ((((unsupported)).apply ((xnd)) (0))))
                            xitemsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                            (((unsupported)).apply ("P") ((xfmt))).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xv)) ((xvalues)))
                              seq
                                xstruct_err.write "None: is there a None literal in the EO language?"
                                (((unsupported)).apply (((xstruct).xerror)))
                                  bogusForceDataize.write ((((xstruct).xpack_into)).apply ((xfmt)) ((xnd)) ((xitemsize)) ((xv)))
                                  xstruct_err.write ((xstruct).xerror)
                                xmv_err.write "None: is there a None literal in the EO language?"
                                (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))
                                  (((unsupported)).apply ((((unsupported)).apply ((xm)) (1))) ((xv)))
                                  xmv_err.write ((xe).x__class__)
                                ((xstruct_err).or (xmv_err)).if
                                  seq
                                    bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xstruct_err)) ("None: is there a None literal in the EO language?"))
                                    bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmv_err)) ("None: is there a None literal in the EO language?"))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (1))) ((((unsupported)).apply ((xnd)) (1))))
                xtest_memoryview_cast_zero_strides.write
                  [xself]
                    memory > xmsrc
                    memory > xex
                    seq > @
                      seq
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ((((unsupported)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xex).xc_contiguous)))
                        xmsrc.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmsrc).xcast)) ("c"))
                xtest_memoryview_cast_invalid.write
                  [xself]
                    memory > xssize
                    memory > xdsize
                    memory > xsize_d
                    memory > xdformat
                    memory > xsformat
                    memory > xm2
                    memory > xmsrc
                    memory > xsize_h
                    memory > xm1
                    memory > xm
                    memory > xex
                    memory > xnd
                    seq > @
                      seq
                        (((unsupported)).apply ((xsfmt)) ((xNON_BYTE_FORMAT)))
                          seq
                            xsformat.write ((((xrandrange)).apply (2)).if ("@".sub (xsfmt)) (xsfmt))
                            xssize.write ((((xstruct).xcalcsize)).apply ((xsformat)))
                            (((unsupported)).apply ((xdfmt)) ((xNON_BYTE_FORMAT)))
                              seq
                                xdformat.write ((((xrandrange)).apply (2)).if ("@".sub (xdfmt)) (xdfmt))
                                xdsize.write ((((xstruct).xcalcsize)).apply ((xdformat)))
                                xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (32))))) ((((unsupported)).apply ((((unsupported)).apply (32) ((xssize)))))) ((xsformat)))
                                xmsrc.write (((xmemoryview)).apply ((xex)))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmsrc).xcast)) ((xdfmt)) ((((unsupported)).apply ((((unsupported)).apply (32) ((xdsize)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsfmt)) ((xsitems)) ((x_)))) ((((xiter_format)).apply (1))))
                          seq
                            xex.write (((unsupported)).apply ((xndarray)) ((xsitems)) ((((unsupported)).apply (1))) ((xsfmt)))
                            xmsrc.write (((xmemoryview)).apply ((xex)))
                            (((unsupported)).apply ((((unsupported)).apply ((xdfmt)) ((x_)) ((x_)))) ((((xiter_format)).apply (1))))
                              ((((xis_memoryview_format)).apply ((xdfmt))).not).if
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xmsrc).xcast)) ((xdfmt)) ((((unsupported)).apply ((((unsupported)).apply (32) ((xdsize)))))))
                                (((((xis_byte_format)).apply ((xsfmt))).not).and ((((xis_byte_format)).apply ((xdfmt))).not)).if
                                  bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmsrc).xcast)) ((xdfmt)) ((((unsupported)).apply ((((unsupported)).apply (32) ((xdsize)))))))
                        xsize_h.write ((((xstruct).xcalcsize)).apply ("h"))
                        xsize_d.write ((((xstruct).xcalcsize)).apply ("d"))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (((2.mul 2).mul (xsize_d))))))) ((((unsupported)).apply (2) (2) ((xsize_d)))) ("h"))
                        xmsrc.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xmsrc).xcast)) ((((unsupported)).apply (2) (2) ((xsize_h)))) ("d"))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (120))))) ((((unsupported)).apply (1) (2) (3) (4) (5))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).xcast)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).xcast)) (1) (2) (3))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).xcast)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("X"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("@X"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("@XY"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("=B"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("!L"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("<P"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) (">l"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("BI"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("xBI"))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply (3) (4))))) ((((unsupported)).apply (2))) ("II"))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__getitem__)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__setitem__)) (0) (8))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).xtolist)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (120))))) ((((unsupported)).apply (1) (2) (3) (4) (5))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xm).xcast)) ("B") ((((unsupported)).apply)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (120))))) ((((unsupported)).apply ((((2.mul 3).mul 4).mul 5)))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xOverflowError)) (((xm).xcast)) ("B") ((((unsupported)).apply ((((unsupported)).apply (2) (64))))))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xm).xcast)) ("B") ((((unsupported)).apply ((1.neg)))))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xm).xcast)) ("B") ((((unsupported)).apply (2) (3) (4) (5) (6) (7) ((1.neg)))))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xValueError)) (((xm).xcast)) ("B") ((((unsupported)).apply (2) (3) (4) (5) (6) (7) (0))))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xm).xcast)) ("B") ((((unsupported)).apply (2) (3) (4) (5) (6) (7) ("x"))))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((unsupported)).apply (9) ((x_)) ((((xrange)).apply ((((3.mul 5).mul 7).mul 11)))))))) ((((unsupported)).apply (3) (5) (7) (11))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xm).xcast)) ("I") ((((unsupported)).apply (2) (3) (4) (5))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (128))))) ((((unsupported)).apply (128))) ("I"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("I") (((((unsupported)).apply (1)).mul 128)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((unsupported)).apply (9) ((x_)) ((((xrange)).apply ((((3.mul 5).mul 7).mul 11)))))))) ((((unsupported)).apply ((((3.mul 5).mul 7).mul 11)))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xm).xcast)) ("I") ((((unsupported)).apply (2) (3) (4) (5))))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((unsupported)).apply (9) ((x_)) ((((xrange)).apply ((((3.mul 5).mul 7).mul 11)))))))) ((((unsupported)).apply ((((3.mul 5).mul 7).mul 11)))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xm).xcast)) ("B") ((((unsupported)).apply (2) (3) (4) (5))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (128))))) ((((unsupported)).apply (128))) ("I"))
                        xm1.write (((xmemoryview)).apply ((xnd)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (128))))) ((((unsupported)).apply (128))) ("B"))
                        xm2.write (((xmemoryview)).apply ((xnd)))
                        (((xsys).xmaxsize).eq ((((unsupported)).apply (2) (63)).sub 1)).if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm1).xcast)) ("B") ((((unsupported)).apply (7) (7) (73) (127) (337) (92737) (649657))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm1).xcast)) ("B") ((((unsupported)).apply ((((unsupported)).apply (2) (20))) ((((unsupported)).apply (2) (20))) ((((unsupported)).apply (2) (10))) ((((unsupported)).apply (2) (10))) ((((unsupported)).apply (2) (3))))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm2).xcast)) ("I") ((((unsupported)).apply ((((unsupported)).apply (2) (20))) ((((unsupported)).apply (2) (20))) ((((unsupported)).apply (2) (10))) ((((unsupported)).apply (2) (10))) ((((unsupported)).apply (2) (1))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm1).xcast)) ("B") ((((unsupported)).apply (1) (2147483647))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm1).xcast)) ("B") ((((unsupported)).apply ((((unsupported)).apply (2) (10))) ((((unsupported)).apply (2) (10))) ((((unsupported)).apply (2) (5))) ((((unsupported)).apply (2) (5))) ((((unsupported)).apply (2) (1))))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm2).xcast)) ("I") ((((unsupported)).apply ((((unsupported)).apply (2) (10))) ((((unsupported)).apply (2) (10))) ((((unsupported)).apply (2) (5))) ((((unsupported)).apply (2) (3))) ((((unsupported)).apply (2) (1))))))
                xtest_memoryview_cast.write
                  [xself]
                    memory > xdestsize
                    memory > xsrcsize
                    memory > xiter_roundtrip
                    memory > xm
                    memory > xex
                    memory > xm2
                    memory > xbytespec
                    seq > @
                      seq
                        xbytespec.write (((unsupported)).apply ((((unsupported)).apply ("B") ((((unsupported)).apply ((((xlist)).apply (((((xex).xtobytes)).apply)))))))) ((((unsupported)).apply ("b") ((((unsupported)).apply ((((unsupported)).apply ((((xx).greater 127).if ((xx).sub 256) (xx))) ((xx)) ((((xlist)).apply (((((xex).xtobytes)).apply)))))))))) ((((unsupported)).apply ("c") ((((unsupported)).apply ((((unsupported)).apply ((((xbytes)).apply ((((xchr)).apply ((xx)))) ("latin-1"))) ((xx)) ((((xlist)).apply (((((xex).xtobytes)).apply)))))))))))
                        xiter_roundtrip.write
                          [xex xm xitems xfmt]
                            memory > xm3
                            memory > xsrcsize
                            memory > xlst
                            memory > xm2
                            seq > @
                              seq
                                xsrcsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                                (((unsupported)).apply ((((unsupported)).apply ((xbytefmt)) ((xto_bytelist)))) ((xbytespec)))
                                  seq
                                    xm2.write ((((xm).xcast)).apply ((xbytefmt)))
                                    xlst.write (((xto_bytelist)).apply ((xex)))
                                    (((unsupported)).apply (((xself).xverify)) ((xm2)) ((xex)) (1) ((xbytefmt)) (FALSE) (1) ((((unsupported)).apply ((31.mul (xsrcsize))))) ((((unsupported)).apply (1))) ((xlst)) (TRUE))
                                    xm3.write ((((xm2).xcast)).apply ((xfmt)))
                                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm3)) ((xex)))
                                    xlst.write ((((xex).xtolist)).apply)
                                    (((unsupported)).apply (((xself).xverify)) ((xm3)) ((xex)) ((xsrcsize)) ((xfmt)) (FALSE) (1) ((((unsupported)).apply (31))) ((((unsupported)).apply ((xsrcsize)))) ((xlst)) (TRUE))
                        xsrcsize.write ((((xstruct).xcalcsize)).apply ("I"))
                        xex.write (((unsupported)).apply ((xndarray)) (9) ((((unsupported)).apply)) ("I"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdestitems)) ((xdestshape)))) ((((xcast_items)).apply ((xex)) ("B") (1))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        xm2.write ((((xm).xcast)).apply ("B"))
                        (((unsupported)).apply (((xself).xverify)) ((xm2)) ((xex)) (1) ("B") (TRUE) (1) ((xdestshape)) ((((unsupported)).apply (1))) ((xdestitems)) (TRUE))
                        xdestsize.write ((((xstruct).xcalcsize)).apply ("I"))
                        xex.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply (9)).mul (xdestsize))) ((((unsupported)).apply ((xdestsize)))) ("B"))
                        (((unsupported)).apply ((((unsupported)).apply ((xdestitems)) ((xdestshape)))) ((((unsupported)).apply ((xcast_items)) ((xex)) ("I") ((xdestsize)) ((((unsupported)).apply)))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        xm2.write (((unsupported)).apply (((xm).xcast)) ("I") ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xverify)) ((xm2)) ((xex)) ((xdestsize)) ("I") (TRUE) (0) ((((unsupported)).apply)) ((((unsupported)).apply)) ((xdestitems)) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xiter_format)).apply (31) ("array"))))
                          seq
                            xex.write ((((xarray).xarray)).apply ((xfmt)) ((xitems)))
                            xm.write (((xmemoryview)).apply ((xex)))
                            bogusForceDataize.write (((xiter_roundtrip)).apply ((xex)) ((xm)) ((xitems)) ((xfmt)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xiter_format)).apply (31) ("memoryview"))))
                          seq
                            xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply (31))) ((xfmt)) ((xND_WRITABLE)))
                            xm.write (((xmemoryview)).apply ((xex)))
                            bogusForceDataize.write (((xiter_roundtrip)).apply ((xex)) ((xm)) ((xitems)) ((xfmt)))
                xtest_memoryview_cast_1D_ND.write
                  [xself]
                    memory > xpoint
                    memory > xtsize
                    memory > xx
                    memory > xobj
                    memory > xlst
                    memory > xstrides
                    memory > xm2
                    memory > xm4
                    memory > xtshape
                    memory > xshape
                    memory > xsize
                    memory > xm1
                    memory > xm
                    memory > xex
                    memory > xnd
                    memory > xndim
                    memory > xn
                    memory > xtfmt
                    memory > x_fields_
                    memory > xm3
                    seq > @
                      seq
                        (((unsupported)).apply ((x_tshape)) ((((xgencastshapes)).apply)))
                          (((unsupported)).apply ((xchar)) ((((unsupported)).apply ((xfmtdict)) ("@"))))
                            seq
                              ((xchar).eq "?").if
                                (((unsupported)).apply)
                              xtfmt.write ((((unsupported)).apply ((((unsupported)).apply ("") ("@"))) ((((xrandrange)).apply (2)))).sub (xchar))
                              xtsize.write ((((xstruct).xcalcsize)).apply ((xtfmt)))
                              xn.write ((((xprod)).apply ((x_tshape))).mul (xtsize))
                              xobj.write ((((xis_byte_format)).apply ((xtfmt))).if "memoryview" "bytefmt")
                              (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((x_)))) ((((xiter_format)).apply ((xn)) ((xobj)))))
                                seq
                                  xsize.write ((((xstruct).xcalcsize)).apply ((xfmt)))
                                  xshape.write (((xn).greater 0).if (((unsupported)).apply ((xn))) (((unsupported)).apply))
                                  xtshape.write ((x_tshape).sub (((unsupported)).apply ((xsize))))
                                  xex.write (((unsupported)).apply ((xndarray)) ((xitems)) ((xshape)) ((xfmt)))
                                  xm.write (((xmemoryview)).apply ((xex)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xtitems)) ((xtshape)))) ((((unsupported)).apply ((xcast_items)) ((xex)) ((xtfmt)) ((xtsize)) ((xtshape)))))
                                  (((unsupported)).apply ((xtitems)) ("None: is there a None literal in the EO language?")).if
                                    seq
                                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).xcast)) ((xtfmt)) ((xtshape)))
                                      (((unsupported)).apply)
                                  ((xtitems).eq "nan").if
                                    (((unsupported)).apply)
                                  xnd.write (((unsupported)).apply ((xndarray)) ((xtitems)) ((xtshape)) ((xtfmt)))
                                  xm2.write (((unsupported)).apply (((xm).xcast)) ((xtfmt)) ((xtshape)))
                                  xndim.write (((xlen)).apply ((xtshape)))
                                  xstrides.write ((xnd).xstrides)
                                  xlst.write ((((xnd).xtolist)).apply)
                                  (((unsupported)).apply (((xself).xverify)) ((xm2)) ((xex)) ((xtsize)) ((xtfmt)) (TRUE) ((xndim)) ((xtshape)) ((xstrides)) ((xlst)) (TRUE))
                                  xm3.write ((((xm2).xcast)).apply ((xfmt)))
                                  xm4.write (((unsupported)).apply (((xm2).xcast)) ((xfmt)) ((xshape)))
                                  xndim.write (((xlen)).apply ((xshape)))
                                  xstrides.write ((xex).xstrides)
                                  xlst.write ((((xex).xtolist)).apply)
                                  (((unsupported)).apply (((xself).xverify)) ((xm3)) ((xex)) ((xsize)) ((xfmt)) (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)) (TRUE))
                                  (((unsupported)).apply (((xself).xverify)) ((xm4)) ((xex)) ((xsize)) ((xfmt)) (TRUE) ((xndim)) ((xshape)) ((xstrides)) ((xlst)) (TRUE))
                        (xctypes).if
                          seq
                            (((unsupported)).apply (((xctypes).xBigEndianStructure)))
                              x_fields_.write (((unsupported)).apply ((((unsupported)).apply ("x") (((xctypes).xc_long)))) ((((unsupported)).apply ("y") (((xctypes).xc_double)))))
                            xpoint.write (((xBEPoint)).apply (100) (200.1))
                            xm1.write (((xmemoryview)).apply ((xpoint)))
                            xm2.write ((((xm1).xcast)).apply ("B"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xobj)) ((xpoint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xitemsize)) (1))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xm2).xreadonly)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xndim)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xshape)) ((((unsupported)).apply (((xm2).xnbytes)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xstrides)) ((((unsupported)).apply (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xsuboffsets)) ((((unsupported)).apply)))
                            xx.write ((((xctypes).xc_double)).apply (1.2))
                            xm1.write (((xmemoryview)).apply ((xx)))
                            xm2.write ((((xm1).xcast)).apply ("c"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xobj)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xitemsize)) (1))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xm2).xreadonly)) (FALSE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xndim)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xshape)) ((((unsupported)).apply (((xm2).xnbytes)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xstrides)) ((((unsupported)).apply (1))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xm2).xsuboffsets)) ((((unsupported)).apply)))
                xtest_memoryview_tolist.write
                  [xself]
                    memory > xex
                    memory > xm
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply ("h") ((((xlist)).apply ((((xrange)).apply ((6.neg)) (6))))))
                        xm.write (((xmemoryview)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xa).xtolist)).apply)))
                        xa.write (((unsupported)).apply ((xa)) ((((unsupported)).apply (2) (3))))
                        xm.write (((unsupported)).apply ((xm)) ((((unsupported)).apply (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xa).xtolist)).apply)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (((((2.mul 3).mul 5).mul 7).mul 11)))))) ((((unsupported)).apply (11) (2) (7) (3) (5))) ("L"))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xex).xtolist)).apply)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((((unsupported)).apply (2) (5))) ((((unsupported)).apply (7) (11))))) ((((unsupported)).apply (2))) ("lh"))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).xtolist)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ("12345"))) ((((unsupported)).apply (1))) ("s"))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).xtolist)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ("a") ("b") ("c") ("d") ("e") ("f"))) ((((unsupported)).apply (2) (3))) ("s"))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).xtolist)))
                xtest_memoryview_repr.write
                  [xself]
                    memory > xr
                    memory > xm
                    seq > @
                      seq
                        xm.write (((xmemoryview)).apply ((((xbytearray)).apply (9))))
                        xr.write ((((xm).x__repr__)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xr).xstartswith)).apply ("<memory"))))
                        bogusForceDataize.write ((((xm).xrelease)).apply)
                        xr.write ((((xm).x__repr__)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xr).xstartswith)).apply ("<released"))))
                xtest_memoryview_sequence.write
                  [xself]
                    memory > xex
                    memory > xinf
                    memory > xm
                    seq > @
                      seq
                        (((unsupported)).apply ((xfmt)) ((((unsupported)).apply ("d") ("f"))))
                          seq
                            xinf.write (((xfloat)).apply ((((unsupported)).apply)))
                            xex.write ((((xarray).xarray)).apply ((xfmt)) ((((unsupported)).apply (1.0) ((xinf)) (3.0))))
                            xm.write (((xmemoryview)).apply ((xex)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (1.0) ((xm)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply)) ((xm)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (3.0) ((xm)))
                        xex.write (((unsupported)).apply ((xndarray)) (9.0) ((((unsupported)).apply)) ("f"))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xeval)) ("9.0 in m") ((((xlocals)).apply)))
                xassert_out_of_bounds_error.write
                  [xself xdim]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))) ((xcm)))
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xexception)))) (("index out of bounds on dimension %d".mod (((unsupported)).apply ((xdim))))))
                xtest_memoryview_index.write
                  [xself]
                    memory > xex
                    memory > xm
                    seq > @
                      seq
                        xex.write (((unsupported)).apply ((xndarray)) (12.5) ((((unsupported)).apply)) ("d"))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (12.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__getitem__)) (0))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply)) ("iii"))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__getitem__)) ((((unsupported)).apply)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (7))))) ((((unsupported)).apply (7))) ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__getitem__)) ((((unsupported)).apply (2) (64))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__getitem__)) (2.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__getitem__)) (0.0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__getitem__)) ((8.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__getitem__)) (8))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))) ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (0))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (2) (0))))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (2) (3))))) (11))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply ((1.neg)) ((1.neg)))))) (11))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply ((3.neg)) ((4.neg)))))) (0))
                        (((unsupported)).apply ((xindex)) ((((unsupported)).apply (3) ((4.neg)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xassert_out_of_bounds_error)) (1))))
                            (((unsupported)).apply ((xm)) ((((unsupported)).apply ((xindex)) (0))))
                        (((unsupported)).apply ((xindex)) ((((unsupported)).apply (4) ((5.neg)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xassert_out_of_bounds_error)) (2))))
                            (((unsupported)).apply ((xm)) ((((unsupported)).apply (0) ((xindex)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__getitem__)) ((((unsupported)).apply ((((unsupported)).apply (2) (64))) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__getitem__)) ((((unsupported)).apply (0) ((((unsupported)).apply (2) (64))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__getitem__)) ((((unsupported)).apply (0) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__getitem__)) ((((unsupported)).apply (0.0) (0.0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__getitem__)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__getitem__)) (0))
                xtest_memoryview_assign.write
                  [xself]
                    memory > xi
                    memory > xm2
                    memory > xm1
                    memory > xm
                    memory > xex
                    memory > xnd
                    seq > @
                      seq
                        xex.write (((unsupported)).apply ((xndarray)) (12.5) ((((unsupported)).apply)) ("f") ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (22.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (22.5))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (23.5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (23.5))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) (0) (24.7))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (7))))) ((((unsupported)).apply (7))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) (2) (10))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (7))))) ((((unsupported)).apply (7))) ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__setitem__)) ((((unsupported)).apply (2) (64))) (9))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) (2.0) (10))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) (0.0) (11))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__setitem__)) ((8.neg)) (20))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__setitem__)) (8) (25))
                        (((unsupported)).apply ((xfmt)) ((((unsupported)).apply ((xfmtdict)) ("@"))))
                          seq
                            (((xfmt).eq "c").or ((xfmt).eq "?")).if
                              (((unsupported)).apply)
                            xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ((xfmt)) ((xND_WRITABLE)))
                            xm.write (((xmemoryview)).apply ((xex)))
                            xi.write (((xrandrange)).apply ((3.neg)) (3))
                            (((unsupported)).apply ((((unsupported)).apply ((xm)) ((xi)))) (8))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((xi)))) (8))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((xi)))) ((((unsupported)).apply ((xex)) ((xi)))))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ("1") ("2") ("3"))) ((((unsupported)).apply (3))) ("c") ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) (2))) ("9"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (2))) ("9"))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (TRUE) (FALSE) (TRUE))) ((((unsupported)).apply (3))) ("?") ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) (1))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xm)) (1))) (TRUE))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ("x"))) ((((unsupported)).apply (1))) ("c") ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) (0) (100))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (120))))) ((((unsupported)).apply (1) (2) (3) (4) (5))) ((xND_WRITABLE)))
                        xm1.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((x_range)))) (((((((unsupported)).apply ((xfmtdict)) ("@")).xitems)).apply)))
                          seq
                            ((xfmt).eq "?").if
                              (((unsupported)).apply)
                            ((xfmt).eq "c").if
                              (((unsupported)).apply)
                            xm2.write ((((xm1).xcast)).apply ((xfmt)))
                            (((unsupported)).apply ((((unsupported)).apply ((xlo)) ((xhi)))) ((x_range)))
                            (((xfmt).eq "d").or ((xfmt).eq "f")).if
                              (((unsupported)).apply ((((unsupported)).apply ((xlo)) ((xhi)))) ((((unsupported)).apply (((((unsupported)).apply (2) (1024)).neg)) ((((unsupported)).apply (2) (1024))))))
                            ((xfmt).neq "P").if
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm2).x__setitem__)) (0) (((xlo).sub 1)))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm2).x__setitem__)) (0) ("xyz"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm2).x__setitem__)) (0) ((xhi)))
                        xm2.write ((((xm1).xcast)).apply ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm2).x__setitem__)) (0) ("xffxff"))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (1))))) ((((unsupported)).apply (1))) ("xL") ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__setitem__)) (0) (1))
                        xex.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ("12345"))) ((((unsupported)).apply (1))) ("s") ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__setitem__)) (0) (1))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))) ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (1))))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xex)) (0))) (1))) (42))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply ((1.neg)) ((1.neg)))))) (43))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xex)) (2))) (3))) (43))
                        (((unsupported)).apply ((xindex)) ((((unsupported)).apply (3) ((4.neg)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xassert_out_of_bounds_error)) (1))))
                            (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply ((xindex)) (0))))) (0))
                        (((unsupported)).apply ((xindex)) ((((unsupported)).apply (4) ((5.neg)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xassert_out_of_bounds_error)) (2))))
                            (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) ((xindex)))))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__setitem__)) ((((unsupported)).apply ((((unsupported)).apply (2) (64))) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__setitem__)) ((((unsupported)).apply (0) ((((unsupported)).apply (2) (64))))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) ((((unsupported)).apply (0) (0) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) ((((unsupported)).apply (0.0) (0.0))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__setitem__)) (0) ((((unsupported)).apply (2) (3))))
                xtest_memoryview_slice.write
                  [xself]
                    memory > xex2
                    memory > xex
                    memory > xm1
                    memory > xm
                    memory > xex1
                    memory > xm2
                    seq > @
                      seq
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (12))) ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).x__getitem__)) ((((xslice)).apply (0) (2) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).x__setitem__)) ((((xslice)).apply (0) (2) (0))) ((((xbytearray)).apply ((((unsupported)).apply (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__getitem__)) ((((unsupported)).apply)))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (12))) ((xND_WRITABLE)))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__getitem__)) ((((unsupported)).apply ((((xslice)).apply (0) (2) (1))) ((((xslice)).apply (0) (2) (1))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xm).x__setitem__)) ((((unsupported)).apply ((((xslice)).apply (0) (2) (1))) ((((xslice)).apply (0) (2) (1))))) ((((xbytearray)).apply ((((unsupported)).apply (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__getitem__)) ((((unsupported)).apply ((((xslice)).apply (0) (2) (1))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) ((((unsupported)).apply ((((xslice)).apply (0) (2) (1))) ((((unsupported)).apply)))) ((((xbytearray)).apply ((((unsupported)).apply (1) (2))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) ((((xslice)).apply (0) (1) (1))) ((((unsupported)).apply (1))))
                        (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                          seq
                            xex1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (12))) ((((unsupported)).apply ((1.neg)))) (11) (((xND_WRITABLE).or (xflags))))
                            xex2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (24))))) ((((unsupported)).apply (12))) ((((unsupported)).apply (2))) ((xflags)))
                            xm1.write (((xmemoryview)).apply ((xex1)))
                            xm2.write (((xmemoryview)).apply ((xex2)))
                            (((unsupported)).apply ((((unsupported)).apply ((xex1)) ((((unsupported)).apply (2) (5))))) ((((unsupported)).apply ((xex1)) ((((unsupported)).apply (2) (5))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xm1)) ((((unsupported)).apply (2) (5))))) ((((unsupported)).apply ((xm2)) ((((unsupported)).apply (2) (5))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm1)) ((xex1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm2)) ((xex2)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xex1)) ((((unsupported)).apply (1) (3))))) ((((unsupported)).apply ((1.neg)))))) ((((unsupported)).apply ((((unsupported)).apply ((xex2)) ((((unsupported)).apply (0) (2))))) ((((unsupported)).apply (1))))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm1)) ((((unsupported)).apply (1) (3))))) ((((unsupported)).apply ((1.neg)))))) ((((unsupported)).apply ((((unsupported)).apply ((xm2)) ((((unsupported)).apply (0) (2))))) ((((unsupported)).apply (1))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm1)) ((xex1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm2)) ((xex2)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xex1)) ((((unsupported)).apply (4) (1) ((2.neg)))))) ((((unsupported)).apply ((1.neg)))))) ((((unsupported)).apply ((((unsupported)).apply ((xex1)) ((((unsupported)).apply (1) (4) (2))))) ((((unsupported)).apply (1))))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xm1)) ((((unsupported)).apply (4) (1) ((2.neg)))))) ((((unsupported)).apply ((1.neg)))))) ((((unsupported)).apply ((((unsupported)).apply ((xm1)) ((((unsupported)).apply (1) (4) (2))))) ((((unsupported)).apply (1))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm1)) ((xex1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm2)) ((xex2)))
                xtest_memoryview_array.write
                  [xself]
                    memory > xhave_resize
                    memory > xb
                    memory > xcmptest
                    memory > xarray_err
                    memory > xm
                    memory > xar
                    memory > xa
                    memory > xm_err
                    memory > xal
                    seq > @
                      seq
                        xcmptest.write
                          [xtestcase xa xb xm xsingleitem]
                            memory > xai
                            memory > xmi
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xi)) ((x_)))) ((((xenumerate)).apply ((xa)))))
                                seq
                                  xai.write (((unsupported)).apply ((xa)) ((xi)))
                                  xmi.write (((unsupported)).apply ((xm)) ((xi)))
                                  bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xai)) ((xmi)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xi)))) ((xsingleitem)))
                                  ((xsingleitem).neq (xai)).if
                                    seq
                                      bogusForceDataize.write ((((xtestcase).xassertNotEqual)).apply ((xa)) ((xm)))
                                      bogusForceDataize.write ((((xtestcase).xassertNotEqual)).apply ((xa)) ((xb)))
                                    seq
                                      bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xa)) ((xm)))
                                      bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xa)) ((xb)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xm)) ((xi)))) ((xsingleitem)))
                                  bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xa)) ((xm)))
                                  bogusForceDataize.write ((((xtestcase).xassertEqual)).apply ((xb)) ((xm)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xi)))) ((xai)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xm)) ((xi)))) ((xmi)))
                        (((unsupported)).apply ((xn)) ((((xrange)).apply (1) (5))))
                          (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((xsingleitem)))) ((((xiter_format)).apply ((xn)) ("array"))))
                            (((unsupported)).apply ((xlslice)) ((((xgenslices)).apply ((xn)))))
                              (((unsupported)).apply ((xrslice)) ((((xgenslices)).apply ((xn)))))
                                seq
                                  xa.write ((((xarray).xarray)).apply ((xfmt)) ((xitems)))
                                  xb.write ((((xarray).xarray)).apply ((xfmt)) ((xitems)))
                                  xm.write (((xmemoryview)).apply ((xb)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xa)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xa).xtolist)).apply)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) (((((xa).xtobytes)).apply)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xm)))) ((((xlen)).apply ((xa)))))
                                  bogusForceDataize.write (((xcmptest)).apply ((xself)) ((xa)) ((xb)) ((xm)) ((xsingleitem)))
                                  xarray_err.write "None: is there a None literal in the EO language?"
                                  xhave_resize.write "None: is there a None literal in the EO language?"
                                  (((unsupported)).apply ((xException)))
                                    seq
                                      xal.write (((unsupported)).apply ((xa)) ((xlslice)))
                                      xar.write (((unsupported)).apply ((xa)) ((xrslice)))
                                      (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xlslice)))) ((((unsupported)).apply ((xa)) ((xrslice)))))
                                      xhave_resize.write ((((xlen)).apply ((xal))).neq (((xlen)).apply ((xar))))
                                    xarray_err.write ((xe).x__class__)
                                  xm_err.write "None: is there a None literal in the EO language?"
                                  (((unsupported)).apply ((xException)))
                                    (((unsupported)).apply ((((unsupported)).apply ((xm)) ((xlslice)))) ((((unsupported)).apply ((xm)) ((xrslice)))))
                                    xm_err.write ((xe).x__class__)
                                  (xhave_resize).if
                                    bogusForceDataize.write ((((xself).xassertIs)).apply ((xm_err)) ((xValueError)))
                                    ((xm_err).or (xarray_err)).if
                                      bogusForceDataize.write ((((xself).xassertIs)).apply ((xm_err)) ((xarray_err)))
                                      seq
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xa)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xa).xtolist)).apply)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) (((((xa).xtobytes)).apply)))
                                        bogusForceDataize.write (((xcmptest)).apply ((xself)) ((xa)) ((xb)) ((xm)) ((xsingleitem)))
                xtest_memoryview_compare_special_cases.write
                  [xself]
                    memory > xpoint
                    memory > xb
                    memory > xw
                    memory > xv
                    memory > xnd
                    memory > x_fields_
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply ("L") ((((unsupported)).apply (1) (2) (3))))
                        xb.write ((((xarray).xarray)).apply ("L") ((((unsupported)).apply (1) (2) (7))))
                        xv.write (((xmemoryview)).apply ((xa)))
                        xw.write (((xmemoryview)).apply ((xb)))
                        (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("__lt__") ("__le__") ("__gt__") ("__ge__"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xgetattr)).apply ((xv)) ((xattr)))).apply ((xw)))) ((xNotImplemented)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xgetattr)).apply ((xa)) ((xattr)))).apply ((xv)))) ((xNotImplemented)))
                        xv.write (((xmemoryview)).apply ((xa)))
                        bogusForceDataize.write ((((xv).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xv)))
                        xv.write (((xmemoryview)).apply ((xa)))
                        xw.write (((xmemoryview)).apply ((xa)))
                        bogusForceDataize.write ((((xw).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xv)))
                        xv.write (((xmemoryview)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((((unsupported)).apply (1) (2) (3))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((((unsupported)).apply (0) (0))))) ((((unsupported)).apply (1))) ("l x d x") ((xND_WRITABLE)))
                        (((unsupported)).apply ((((unsupported)).apply ((xnd)) (0))) ((((unsupported)).apply ((1.neg)) ((((xfloat)).apply ("nan"))))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xmemoryview)).apply ((xnd)))) ((xnd)))
                        xa.write ((((xarray).xarray)).apply ("u") ("xyz"))
                        xv.write (((xmemoryview)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xa)))
                        (xctypes).if
                          seq
                            (((unsupported)).apply (((xctypes).xBigEndianStructure)))
                              x_fields_.write (((unsupported)).apply ((((unsupported)).apply ("x") (((xctypes).xc_long)))) ((((unsupported)).apply ("y") (((xctypes).xc_long)))))
                            xpoint.write (((xBEPoint)).apply (100) (200))
                            xa.write (((xmemoryview)).apply ((xpoint)))
                            xb.write (((xmemoryview)).apply ((xpoint)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xpoint)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xpoint)) ((xa)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xNotImplementedError)) (((xa).xtolist)))
                xtest_memoryview_compare_ndim_zero.write
                  [xself]
                    memory > xnd2
                    memory > xw
                    memory > xm
                    memory > xv
                    memory > xnd1
                    memory > xex
                    memory > xnd
                    seq > @
                      seq
                        xnd1.write (((unsupported)).apply ((xndarray)) (1729) ((((unsupported)).apply)) ("@L"))
                        xnd2.write (((unsupported)).apply ((xndarray)) (1729) ((((unsupported)).apply)) ("L") ((xND_WRITABLE)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnd2)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnd1)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xv).x__ne__)).apply ((xw)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xw).x__ne__)).apply ((xv)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xw)) ((((unsupported)).apply)))) (1728))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xnd2)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xnd1)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xv).x__eq__)).apply ((xw)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xw).x__eq__)).apply ((xv)))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (12))) (((xND_WRITABLE).or (xND_PIL))))
                        xex.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (12))) (((xND_WRITABLE).or (xND_PIL))))
                        xm.write (((xmemoryview)).apply ((xex)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                        (((unsupported)).apply ((((unsupported)).apply ((xm)) (9))) (100))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xm)) ((xnd)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1729) (1.2) ("12345"))) ((((unsupported)).apply)) ("Lf5s"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1729) (1.2) ("12345"))) ((((unsupported)).apply)) ("hf5s") ((xND_WRITABLE)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnd2)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnd1)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1729) (1.2) ("12345"))) ((((unsupported)).apply)) ("Lf5s"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((1729.neg)) (1.2) ("12345"))) ((((unsupported)).apply)) ("hf5s") ((xND_WRITABLE)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xnd2)) ((xv)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xnd1)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                xtest_memoryview_compare_ndim_one.write
                  [xself]
                    memory > xw
                    memory > xnd2
                    memory > xv
                    memory > xnd1
                    seq > @
                      seq
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) (576) ((625.neg)) (676) ((729.neg)))) ((((unsupported)).apply (5))) ("@h"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) (576) ((625.neg)) (676) (729))) ((((unsupported)).apply (5))) ("@h"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) (576) ((625.neg)) (676) ((729.neg)))) ((((unsupported)).apply (5))) ("<i"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) (576) ((625.neg)) (676) (729))) ((((unsupported)).apply (5))) (">h"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) ((625.neg)) ((729.neg)))) ((((unsupported)).apply (3))) ("@h"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) (576) ((625.neg)) (676) ((729.neg)))) ((((unsupported)).apply (5))) ("@h"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xnd2)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xw)) ((((unsupported)).apply (2))))) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xw)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xv)) ((((unsupported)).apply ((1.neg)))))) ((((unsupported)).apply ((xw)) ((((unsupported)).apply ((2.neg)))))))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) ((625.neg)) ((729.neg)))) ((((unsupported)).apply (3))) ("!h"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) (576) ((625.neg)) (676) ((729.neg)))) ((((unsupported)).apply (5))) ("<l"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xnd2)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xw)) ((((unsupported)).apply (2))))) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xw)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xv)) ((((unsupported)).apply ((1.neg)))))) ((((unsupported)).apply ((xw)) ((((unsupported)).apply ((2.neg)))))))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) ((625.neg)) ((729.neg)))) ((((unsupported)).apply (3))) ("@h"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) (576) ((625.neg)) (676) ((729.neg)))) ((((unsupported)).apply (5))) ("@h") ((xND_PIL)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xnd2)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xw)) ((((unsupported)).apply (2))))) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xw)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xv)) ((((unsupported)).apply ((1.neg)))))) ((((unsupported)).apply ((xw)) ((((unsupported)).apply ((2.neg)))))))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) ((625.neg)) ((729.neg)))) ((((unsupported)).apply (3))) ("h  0c"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((529.neg)) (576) ((625.neg)) (676) ((729.neg)))) ((((unsupported)).apply (5))) (">  h") ((xND_PIL)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xnd2)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xw)) ((((unsupported)).apply (2))))) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((((unsupported)).apply ((xw)) ((((unsupported)).apply (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xv)) ((((unsupported)).apply ((1.neg)))))) ((((unsupported)).apply ((xw)) ((((unsupported)).apply ((2.neg)))))))
                xtest_memoryview_compare_zero_shape.write
                  [xself]
                    memory > xw
                    memory > xnd2
                    memory > xv
                    memory > xnd1
                    seq > @
                      seq
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (900) (961))) ((((unsupported)).apply (0))) ("@h"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((900.neg)) ((961.neg)))) ((((unsupported)).apply (0))) ("@h"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (900) (961))) ((((unsupported)).apply (0))) ("= h0c"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((900.neg)) ((961.neg)))) ((((unsupported)).apply (0))) ("@   i"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                xtest_memoryview_compare_zero_strides.write
                  [xself]
                    memory > xw
                    memory > xnd2
                    memory > xv
                    memory > xnd1
                    seq > @
                      seq
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (900) (900) (900) (900))) ((((unsupported)).apply (4))) ("@L"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (900))) ((((unsupported)).apply (4))) ((((unsupported)).apply (0))) ("L"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (900) (900)))).mul 4)) ((((unsupported)).apply (4))) ("@ Li"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((((unsupported)).apply (900) (900))))) ((((unsupported)).apply (4))) ((((unsupported)).apply (0))) ("!L  h"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                xtest_memoryview_compare_random_formats.write
                  [xself]
                    memory > xn
                    memory > xnd
                    memory > xm
                    seq > @
                      seq
                        xn.write 10
                        (((unsupported)).apply ((xchar)) ((((unsupported)).apply ((xfmtdict)) ("@m"))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((xsingleitem)))) ((((xranditems)).apply ((xn)) ("memoryview") ("@") ((xchar)))))
                            (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                              seq
                                xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply ((xn)))) ((xfmt)) ((xflags)))
                                xm.write (((xmemoryview)).apply ((xnd)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                                xnd.write (((unsupported)).apply ((xnd)) ((((unsupported)).apply ((3.neg)))))
                                xm.write (((xmemoryview)).apply ((xnd)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                        xn.write 10
                        (((unsupported)).apply ((x_)) ((((xrange)).apply (100))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xfmt)) ((xitems)) ((xsingleitem)))) ((((xranditems)).apply ((xn)))))
                            (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_PIL)))))
                              seq
                                xnd.write (((unsupported)).apply ((xndarray)) ((xitems)) ((((unsupported)).apply ((xn)))) ((xfmt)) ((xflags)))
                                xm.write (((xmemoryview)).apply ((xnd)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                                xnd.write (((unsupported)).apply ((xnd)) ((((unsupported)).apply ((3.neg)))))
                                xm.write (((xmemoryview)).apply ((xnd)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                xtest_memoryview_compare_multidim_c.write
                  [xself]
                    memory > xw
                    memory > xnd2
                    memory > xv
                    memory > xnd1
                    seq > @
                      seq
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((15.neg)) (15))))) ((((unsupported)).apply (3) (2) (5))) ("@h"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (0) (30))))) ((((unsupported)).apply (3) (2) (5))) ("@h"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (0) (1) (2)))).mul 30)) ((((unsupported)).apply (3) (2) (5))) ("=f q xxL"))
                        xnd2.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply ((1.2.neg)) (1) (2)))).mul 30)) ((((unsupported)).apply (3) (2) (5))) ("< f 2Q"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (2) (3) (5))) ("L"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (3) (2) (5))) ("L"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (0) (1) (2)))).mul 21)) ((((unsupported)).apply (3) (7))) ("! b B xL"))
                        xnd2.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (0) (1) (2)))).mul 21)) ((((unsupported)).apply (7) (3))) ("= Qx l xxL"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (2) (3) (5))) ("L"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (2) (3) (5))) ("l"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                xtest_memoryview_compare_multidim_fortran.write
                  [xself]
                    memory > xw
                    memory > xnd2
                    memory > xv
                    memory > xnd1
                    seq > @
                      seq
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((15.neg)) (15))))) ((((unsupported)).apply (5) (2) (3))) ("@h") ((xND_FORTRAN)))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (0) (30))))) ((((unsupported)).apply (5) (2) (3))) ("@h") ((xND_FORTRAN)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (2) (64)).sub 1)) ((1.neg))))).mul 6)) ((((unsupported)).apply (2) (3))) ("=Qq") ((xND_FORTRAN)))
                        xnd2.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply ((1.neg)) (((((unsupported)).apply (2) (64)).sub 1))))).mul 6)) ((((unsupported)).apply (2) (3))) ("=qQ") ((xND_FORTRAN)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((15.neg)) (15))))) ((((unsupported)).apply (2) (3) (5))) ("l") ((xND_FORTRAN)))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((15.neg)) (15))))) ((((unsupported)).apply (3) (2) (5))) ("l") ((xND_FORTRAN)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((15.neg)) (15))))) ((((unsupported)).apply (2) (3) (5))) ("0ll") ((xND_FORTRAN)))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((15.neg)) (15))))) ((((unsupported)).apply (3) (2) (5))) ("l") ((xND_FORTRAN)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (5) (2) (3))) ("@h") ((xND_FORTRAN)))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (5) (2) (3))) ("@b") ((xND_FORTRAN)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                xtest_memoryview_compare_multidim_mixed.write
                  [xself]
                    memory > xnd2
                    memory > xex2
                    memory > xw
                    memory > xlst1
                    memory > xv
                    memory > xnd1
                    memory > xlst2
                    memory > xex1
                    seq > @
                      seq
                        xlst1.write (((xlist)).apply ((((xrange)).apply ((15.neg)) (15))))
                        xlst2.write (((xtranspose)).apply ((xlst1)) ((((unsupported)).apply (3) (2) (5))))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((xlst1)) ((((unsupported)).apply (3) (2) (5))) ("@l"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((xlst2)) ((((unsupported)).apply (3) (2) (5))) ("l") ((xND_FORTRAN)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        xlst1.write ((((unsupported)).apply ((((unsupported)).apply ((3.3.neg)) ((22.neg)) ("x")))).mul 30)
                        (((unsupported)).apply ((((unsupported)).apply ((xlst1)) (5))) ((((unsupported)).apply ((2.2.neg)) ((22.neg)) ("x"))))
                        xlst2.write (((xtranspose)).apply ((xlst1)) ((((unsupported)).apply (3) (2) (5))))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((xlst1)) ((((unsupported)).apply (3) (2) (5))) ("d b c"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((xlst2)) ((((unsupported)).apply (3) (2) (5))) ("d h c") ((xND_FORTRAN)))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (40))))) ((((unsupported)).apply (5) (8))) ("@I"))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (3) (1) ((1.neg)))) ((((unsupported)).apply ((2.neg)))))))
                        xex2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (40))))) ((((unsupported)).apply (5) (8))) ("I"))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3) (1))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (2) (31)).sub 1)) (((((unsupported)).apply (2) (31)).neg))))).mul 22)) ((((unsupported)).apply (11) (2))) ("=ii"))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (3) (1) ((1.neg)))) ((((unsupported)).apply ((2.neg)))))))
                        xex2.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (2) (31)).sub 1)) (((((unsupported)).apply (2) (31)).neg))))).mul 22)) ((((unsupported)).apply (11) (2))) (">ii"))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3) (1))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (2) (3) (5))) ("b"))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (3) (2) (5))) ("b"))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (2) (3) (5))) ("B"))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (3) (2) (5))) ("b"))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (2) ("123")))).mul 30)) ((((unsupported)).apply (5) (3) (2))) ("b3s"))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xnd2.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (2) ("123")))).mul 30)) ((((unsupported)).apply (5) (3) (2))) ("i3s"))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                xtest_memoryview_compare_multidim_zero_shape.write
                  [xself]
                    memory > xw
                    memory > xnd2
                    memory > xv
                    memory > xnd1
                    seq > @
                      seq
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (0) (3) (2))) ("i"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (5) (0) (2))) ("@i"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (0) (3) (2))) ("i"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (5) (0) (2))) ("@i"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                xtest_memoryview_compare_multidim_zero_strides.write
                  [xself]
                    memory > xw
                    memory > xnd2
                    memory > xv
                    memory > xnd1
                    seq > @
                      seq
                        xnd1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply (900)).mul 80)) ((((unsupported)).apply (4) (5) (4))) ("@L"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (900))) ((((unsupported)).apply (4) (5) (4))) ((((unsupported)).apply (0) (0) (0))) ("L"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xv).xtolist)).apply)) (((((xw).xtolist)).apply)))
                        xnd1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (1) (2)))).mul 10)) ((((unsupported)).apply (2) (5))) ("=lQ"))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply (2) (5))) ((((unsupported)).apply (0) (0))) ("<lQ"))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                xtest_memoryview_compare_multidim_suboffsets.write
                  [xself]
                    memory > xnd2
                    memory > xex2
                    memory > xw
                    memory > xlst1
                    memory > xv
                    memory > xnd1
                    memory > xlst2
                    memory > xex1
                    seq > @
                      seq
                        xex1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (40))))) ((((unsupported)).apply (5) (8))) ("@I"))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (3) (1) ((1.neg)))) ((((unsupported)).apply ((2.neg)))))))
                        xex2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (40))))) ((((unsupported)).apply (5) (8))) ("I") ((xND_PIL)))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3) (1))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (2) (64)).sub 1)) ((1.neg))))).mul 40)) ((((unsupported)).apply (5) (8))) ("=Qq") ((xND_WRITABLE)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xex1)) (2))) (7))) ((((unsupported)).apply (1) ((2.neg)))))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (3) (1) ((1.neg)))) ((((unsupported)).apply ((2.neg)))))))
                        xex2.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (2) (64)).sub 1)) ((1.neg))))).mul 40)) ((((unsupported)).apply (5) (8))) (">Qq") (((xND_PIL).or (xND_WRITABLE))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xex2)) (2))) (7))) ((((unsupported)).apply (1) ((2.neg)))))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3) (1))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (2) (3) (5))) ("b") ((xND_PIL)))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (3) (2) (5))) ("b"))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (2) (8)).sub 1)) ((1.neg))))).mul 40)) ((((unsupported)).apply (2) (3) (5))) ("Bb") (((xND_PIL).or (xND_WRITABLE))))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ((2.neg)))))))
                        xex2.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (2) (8)).sub 1)) ((1.neg))))).mul 40)) ((((unsupported)).apply (3) (2) (5))) ("Bb"))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (5) (3) (2))) ("i") ((xND_PIL)))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xex2.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (5) (3) (2))) ("@I") ((xND_PIL)))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        xex1.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply ("hello") ("") (1)))).mul 27)) ((((unsupported)).apply (3) (3) (3))) ("5s0sP") (((xND_PIL).or (xND_WRITABLE))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xex1)) (1))) (2))) (2))) ((((unsupported)).apply ("sushi") ("") (1))))
                        xnd1.write (((unsupported)).apply ((xex1)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xex2.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply ("hello") ("") (1)))).mul 27)) ((((unsupported)).apply (3) (3) (3))) ("5s0sP") (((xND_PIL).or (xND_WRITABLE))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xex1)) (1))) (2))) (2))) ((((unsupported)).apply ("sushi") ("") (1))))
                        xnd2.write (((unsupported)).apply ((xex2)) ((((unsupported)).apply ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((2.neg)))))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xw)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xv)) ((xw)))
                        xlst1.write (((xlist)).apply ((((xrange)).apply ((15.neg)) (15))))
                        xlst2.write (((xtranspose)).apply ((xlst1)) ((((unsupported)).apply (3) (2) (5))))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((xlst1)) ((((unsupported)).apply (3) (2) (5))) ("@l") ((xND_PIL)))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((xlst2)) ((((unsupported)).apply (3) (2) (5))) ("l") (((xND_FORTRAN).or (xND_PIL))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                        xlst1.write ((((unsupported)).apply ((((unsupported)).apply ("sashimi") ("sliced") (20.05)))).mul 30)
                        (((unsupported)).apply ((((unsupported)).apply ((xlst1)) (11))) ((((unsupported)).apply ("ramen") ("spicy") (9.45))))
                        xlst2.write (((xtranspose)).apply ((xlst1)) ((((unsupported)).apply (3) (2) (5))))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((xlst1)) ((((unsupported)).apply (3) (2) (5))) ("< 10p 9p d") ((xND_PIL)))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((xlst2)) ((((unsupported)).apply (3) (2) (5))) ("> 10p 9p d") (((xND_FORTRAN).or (xND_PIL))))
                        xv.write (((xmemoryview)).apply ((xnd1)))
                        xw.write (((xmemoryview)).apply ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xnd1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xw)) ((xnd2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xv)) ((xw)))
                xtest_memoryview_compare_not_equal.write
                  [xself]
                    memory > xx
                    memory > xy
                    memory > xb
                    memory > xa
                    seq > @
                      (((unsupported)).apply ((xbyteorder)) ((((unsupported)).apply ("=") ("<") (">") ("!"))))
                        seq
                          xx.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (2) (63)))).mul 120)) ((((unsupported)).apply (3) (5) (2) (2) (2))) (((xbyteorder).sub "Q")))
                          xy.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply (2) (63)))).mul 120)) ((((unsupported)).apply (3) (5) (2) (2) (2))) (((xbyteorder).sub "Q")) (((xND_WRITABLE).or (xND_FORTRAN))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xy)) (2))) (3))) (1))) (1))) (1))) (1))
                          xa.write (((xmemoryview)).apply ((xx)))
                          xb.write (((xmemoryview)).apply ((xy)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xx)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xy)))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xb)))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xy)))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xb)) ((xx)))
                          xx.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (2) (63))) ((((unsupported)).apply (2) (31))) ((((unsupported)).apply (2) (15)))))).mul 120)) ((((unsupported)).apply (3) (5) (2) (2) (2))) (((xbyteorder).sub "QLH")))
                          xy.write (((unsupported)).apply ((xndarray)) (((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (2) (63))) ((((unsupported)).apply (2) (31))) ((((unsupported)).apply (2) (15)))))).mul 120)) ((((unsupported)).apply (3) (5) (2) (2) (2))) (((xbyteorder).sub "QLH")) (((xND_WRITABLE).or (xND_FORTRAN))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xy)) (2))) (3))) (1))) (1))) (1))) ((((unsupported)).apply (1) (1) (1))))
                          xa.write (((xmemoryview)).apply ((xx)))
                          xb.write (((xmemoryview)).apply ((xy)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xx)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) ((xy)))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xb)))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xy)))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xb)) ((xx)))
                xtest_memoryview_check_released.write
                  [xself]
                    memory > xb
                    memory > xm2
                    memory > xa
                    memory > xm1
                    memory > xm
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply ("d") ((((unsupported)).apply (1.1) (2.2) (3.3))))
                        xm.write (((xmemoryview)).apply ((xa)))
                        bogusForceDataize.write ((((xm).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xmemoryview)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xcast)) ("c"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xndarray)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xtolist)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).xtobytes)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xeval)) ("1.0 in m") ((((xlocals)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).x__getitem__)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).x__setitem__)) (0) (1))
                        (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("obj") ("nbytes") ("readonly") ("itemsize") ("format") ("ndim") ("shape") ("strides") ("suboffsets") ("c_contiguous") ("f_contiguous") ("contiguous"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).x__getattribute__)) ((xattr)))
                        xb.write ((((xarray).xarray)).apply ("d") ((((unsupported)).apply (1.1) (2.2) (3.3))))
                        xm1.write (((xmemoryview)).apply ((xa)))
                        xm2.write (((xmemoryview)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm1)) ((xm2)))
                        bogusForceDataize.write ((((xm1).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xm1)) ((xm2)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xm1)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm1)) ((xm1)))
                xtest_memoryview_tobytes.write
                  [xself]
                    memory > xpoint
                    memory > xt
                    memory > xm
                    memory > xnd
                    memory > x_fields_
                    memory > xa
                    seq > @
                      seq
                        xt.write (((unsupported)).apply ((529.neg)) (576) ((625.neg)) (676) ((729.neg)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((xt)) ((((unsupported)).apply (5))) ("@h"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) (((((xnd).xtobytes)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((xt)))) ((((unsupported)).apply (1))) (">hQiLl"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) (((((xnd).xtobytes)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((xt)) ((x_)) ((((xrange)).apply (12))))) ((((unsupported)).apply (2) (2) (3))) ("=hQiLl"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) (((((xnd).xtobytes)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((xt)) ((x_)) ((((xrange)).apply (120))))) ((((unsupported)).apply (5) (2) (2) (3) (2))) ("<hQiLl"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) (((((xnd).xtobytes)).apply)))
                        (xctypes).if
                          seq
                            (((unsupported)).apply (((xctypes).xBigEndianStructure)))
                              x_fields_.write (((unsupported)).apply ((((unsupported)).apply ("x") (((xctypes).xc_long)))) ((((unsupported)).apply ("y") (((xctypes).xc_long)))))
                            xpoint.write (((xBEPoint)).apply (100) (200))
                            xa.write (((xmemoryview)).apply ((xpoint)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xtobytes)).apply)) ((((xbytes)).apply ((xpoint)))))
                xtest_memoryview_get_contiguous.write
                  [xself]
                    memory > xnd
                    memory > xm
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xget_contiguous)) ((((unsupported)).apply)) ((xPyBUF_READ)) ("F"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xget_contiguous)) ("x") ((xPyBUF_WRITE)) ("C"))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (2))) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xget_contiguous)) ((xnd)) ((xPyBUF_WRITE)) ("A"))
                        xnd.write (((unsupported)).apply ((xndarray)) (9) ((((unsupported)).apply)) ("L"))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (9))
                        xnd.write (((unsupported)).apply ((xndarray)) (9) ((((unsupported)).apply)) ("L") ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (9))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xnd)) ((((unsupported)).apply)))) (9))
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_WRITE)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (9))
                            (((unsupported)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (10))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply)))) (10))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnd)) ((((unsupported)).apply)))) (10))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (0))) ("L") ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xm).x__getitem__)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) ((((unsupported)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (8))))) ((((unsupported)).apply (2) (0) (7))) ("L") ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xndarray)).apply ((xm))).xtolist)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1))) ((((unsupported)).apply (1))) ("h") ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_WRITE)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ("b") ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_WRITE)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (2))) ((((unsupported)).apply (2))) ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) (1) (20))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (1))) (3))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnd)) (1))) (3))
                        xnd.write (((unsupported)).apply ((xnd)) ((((unsupported)).apply ((1.neg)))))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xnd)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xm).x__setitem__)) (1) (20))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) (1))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xnd)) (1))) (1))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))) ((xND_WRITABLE)))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_WRITE)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xndarray)).apply ((xm))).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xget_contiguous)) ((xnd)) ((xPyBUF_WRITE)) ("F"))
                        xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ((xorder)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xndarray)).apply ((xm))).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))) (((xND_WRITABLE).or (xND_FORTRAN))))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("F") ("A"))))
                          seq
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_WRITE)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xndarray)).apply ((xm))).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xget_contiguous)) ((xnd)) ((xPyBUF_WRITE)) ("C"))
                        xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ((xorder)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xndarray)).apply ((xm))).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (3) (4))) (((xND_WRITABLE).or (xND_PIL))))
                        (((unsupported)).apply ((xorder)) ((((unsupported)).apply ("C") ("F") ("A"))))
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xget_contiguous)) ((xnd)) ((xPyBUF_WRITE)) ((xorder)))
                            xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ((xorder)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((xndarray)).apply ((xm))).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3) (4) (5))) ((((unsupported)).apply (3))) ((((unsupported)).apply (2))))
                        xm.write (((xget_contiguous)).apply ((xnd)) ((xPyBUF_READ)) ("C"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xm).xc_contiguous)))
                xtest_memoryview_serializing.write
                  [xself]
                    memory > xsize
                    memory > xb
                    memory > xbuf
                    memory > xm
                    memory > xnd
                    memory > xa
                    seq > @
                      seq
                        xsize.write ((((xstruct).xcalcsize)).apply ("i"))
                        xa.write ((((xarray).xarray)).apply ("i") ((((unsupported)).apply (1) (2) (3) (4) (5))))
                        xm.write (((xmemoryview)).apply ((xa)))
                        xbuf.write ((((xio).xBytesIO)).apply ((xm)))
                        xb.write (((xbytearray)).apply ((5.mul (xsize))))
                        bogusForceDataize.write ((((xbuf).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xb)))
                        xsize.write ((((xstruct).xcalcsize)).apply ("L"))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (2) (3) (2))) ("L"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        xbuf.write ((((xio).xBytesIO)).apply ((xm)))
                        xb.write (((xbytearray)).apply ((((2.mul 3).mul 2).mul (xsize))))
                        bogusForceDataize.write ((((xbuf).xreadinto)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xb)))
                xtest_memoryview_hash.write
                  [xself]
                    memory > xb
                    memory > xm
                    memory > xmc
                    memory > xa
                    memory > xx
                    memory > xmx
                    memory > xnd
                    memory > xy
                    seq > @
                      seq
                        xb.write (((xbytes)).apply ((((xlist)).apply ((((xrange)).apply (12))))))
                        xm.write (((xmemoryview)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xb)))) ((((xhash)).apply ((xm)))))
                        xmc.write (((unsupported)).apply (((xm).xcast)) ("c") ((((unsupported)).apply (3) (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xmc)))) ((((xhash)).apply ((xb)))))
                        xmx.write (((unsupported)).apply ((xm)) ((((unsupported)).apply ((2.neg)))))
                        xb.write (((xbytes)).apply ((((unsupported)).apply ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply ((2.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xmx)))) ((((xhash)).apply ((xb)))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (3) (2) (5))) ((xND_FORTRAN)))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xm)))) ((((xhash)).apply ((xnd)))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (3) (2) (5))))
                        xx.write (((unsupported)).apply ((xnd)) ((((unsupported)).apply ((((unsupported)).apply (2))) ((((unsupported)).apply)) ((((unsupported)).apply ((1.neg)))))))
                        xm.write (((xmemoryview)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xm)))) ((((xhash)).apply ((xx)))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (30))))) ((((unsupported)).apply (2) (5) (3))) ((xND_PIL)))
                        xx.write (((unsupported)).apply ((xnd)) ((((unsupported)).apply ((((unsupported)).apply (2))) ((((unsupported)).apply)) ((((unsupported)).apply ((1.neg)))))))
                        xm.write (((xmemoryview)).apply ((xx)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xm)))) ((((xhash)).apply ((xx)))))
                        xx.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (12))) ("B"))
                        xa.write (((xmemoryview)).apply ((xx)))
                        xy.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (12))) ("b"))
                        xb.write (((xmemoryview)).apply ((xy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xhash)).apply ((xa)))) ((((xhash)).apply ((xb)))))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (2) (2) (3))) ("L"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).x__hash__)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((6.neg)) (6))))) ((((unsupported)).apply (2) (2) (3))) ("h"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).x__hash__)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (2) (2) (3))) ("= L"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).x__hash__)))
                        xnd.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply ((6.neg)) (6))))) ((((unsupported)).apply (2) (2) (3))) ("< h"))
                        xm.write (((xmemoryview)).apply ((xnd)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xm).x__hash__)))
                xtest_memoryview_release.write
                  [xself]
                    memory > xz
                    memory > xx
                    memory > xnd1
                    memory > xm2
                    memory > xa
                    memory > xcatch22
                    memory > xnd2
                    memory > xm1
                    memory > xm
                    memory > xex
                    memory > xnd
                    memory > xy
                    seq > @
                      seq
                        xa.write (((xbytearray)).apply ((((unsupported)).apply (1) (2) (3))))
                        xm.write (((xmemoryview)).apply ((xa)))
                        xnd.write (((xndarray)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xm).xrelease)))
                        (((unsupported)).apply ((((unsupported)).apply ((xnd)))))
                        bogusForceDataize.write ((((xm).xrelease)).apply)
                        xa.write (((xbytearray)).apply ((((unsupported)).apply (1) (2) (3))))
                        xm.write (((xmemoryview)).apply ((xa)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((xm)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((xnd1)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xnd2).xobj)) ((xm)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xm).xrelease)))
                        (((unsupported)).apply ((((unsupported)).apply ((xnd1)) ((xnd2)))))
                        bogusForceDataize.write ((((xm).xrelease)).apply)
                        xa.write (((xbytearray)).apply ((((unsupported)).apply (1) (2) (3))))
                        xm1.write (((xmemoryview)).apply ((xa)))
                        xm2.write (((xmemoryview)).apply ((xm1)))
                        xnd.write (((xndarray)).apply ((xm2)))
                        bogusForceDataize.write ((((xm1).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xm2).xrelease)))
                        (((unsupported)).apply ((((unsupported)).apply ((xnd)))))
                        bogusForceDataize.write ((((xm2).xrelease)).apply)
                        xa.write (((xbytearray)).apply ((((unsupported)).apply (1) (2) (3))))
                        xm1.write (((xmemoryview)).apply ((xa)))
                        xm2.write (((xmemoryview)).apply ((xm1)))
                        xnd1.write (((unsupported)).apply ((xndarray)) ((xm2)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        xnd2.write (((unsupported)).apply ((xndarray)) ((xnd1)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xnd2).xobj)) ((xm2)))
                        bogusForceDataize.write ((((xm1).xrelease)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xm2).xrelease)))
                        (((unsupported)).apply ((((unsupported)).apply ((xnd1)) ((xnd2)))))
                        bogusForceDataize.write ((((xm2).xrelease)).apply)
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ((xND_VAREXPORT)))
                        xm1.write (((xmemoryview)).apply ((xnd)))
                        (((unsupported)).apply (((xnd).xpush)) ((((unsupported)).apply (4) (5) (6) (7) (8))) ((((unsupported)).apply (5))))
                        xm2.write (((xmemoryview)).apply ((xnd)))
                        xx.write (((xmemoryview)).apply ((xm1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xtolist)).apply)) (((((xm1).xtolist)).apply)))
                        xy.write (((xmemoryview)).apply ((xm2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xy).xtolist)).apply)) (((((xm2).xtolist)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xy).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        bogusForceDataize.write ((((xm2).xrelease)).apply)
                        bogusForceDataize.write ((((xy).xrelease)).apply)
                        bogusForceDataize.write ((((xnd).xpop)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xtolist)).apply)) (((((xnd).xtolist)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xnd)))))
                        bogusForceDataize.write ((((xm1).xrelease)).apply)
                        bogusForceDataize.write ((((xx).xrelease)).apply)
                        xcatch22.write
                          [xb]
                            seq > @
                              (((unsupported)).apply ((((xmemoryview)).apply ((xb)))) ((xm2)))
                        xx.write (((xbytearray)).apply ("123"))
                        (((unsupported)).apply ((((xmemoryview)).apply ((xx)))) ((xm1)))
                          seq
                            bogusForceDataize.write (((xcatch22)).apply ((xm1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm1)) (0))) ((((xord)).apply ("1"))))
                        xx.write (((unsupported)).apply ((xndarray)) ((((xlist)).apply ((((xrange)).apply (12))))) ((((unsupported)).apply (2) (2) (3))) ("l"))
                        xy.write (((unsupported)).apply ((xndarray)) ((xx)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        xz.write (((unsupported)).apply ((xndarray)) ((xy)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xz).xobj)) ((xx)))
                        (((unsupported)).apply ((((xmemoryview)).apply ((xz)))) ((xm)))
                          seq
                            bogusForceDataize.write (((xcatch22)).apply ((xm)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((xm)) ((((unsupported)).apply (0) (1)))).xtolist)).apply)) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (0) (1) (2))) ((((unsupported)).apply (3) (4) (5))))))))
                        (((unsupported)).apply ((xflags)) ((((unsupported)).apply (0) ((xND_REDIRECT)))))
                          seq
                            xx.write (((xbytearray)).apply ("123"))
                            (((unsupported)).apply ((((xmemoryview)).apply ((xx)))) ((xm1)))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                                xy.write (((unsupported)).apply ((xndarray)) ((xm1)) ((xPyBUF_FULL_RO)) ((xflags)))
                                (((unsupported)).apply ((((xmemoryview)).apply ((xy)))) ((xm2)))
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xy)))))
                                    xz.write (((unsupported)).apply ((xndarray)) ((xm2)) ((xPyBUF_FULL_RO)) ((xflags)))
                                    (((unsupported)).apply ((((xmemoryview)).apply ((xz)))) ((xm3)))
                                      seq
                                        (((unsupported)).apply ((((unsupported)).apply ((xz)))))
                                        bogusForceDataize.write (((xcatch22)).apply ((xm3)))
                                        bogusForceDataize.write (((xcatch22)).apply ((xm2)))
                                        bogusForceDataize.write (((xcatch22)).apply ((xm1)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm1)) (0))) ((((xord)).apply ("1"))))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm2)) (1))) ((((xord)).apply ("2"))))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm3)) (2))) ((((xord)).apply ("3"))))
                                        (((unsupported)).apply ((((unsupported)).apply ((xm3)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xm2)))))
                                (((unsupported)).apply ((((unsupported)).apply ((xm1)))))
                            xx.write (((xbytearray)).apply ("123"))
                            (((unsupported)).apply ((((xmemoryview)).apply ((xx)))) ((xm1)))
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                                xy.write (((unsupported)).apply ((xndarray)) ((xm1)) ((xPyBUF_FULL_RO)) ((xflags)))
                                (((unsupported)).apply ((((xmemoryview)).apply ((xy)))) ((xm2)))
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xy)))))
                                    xz.write (((unsupported)).apply ((xndarray)) ((xm2)) ((xPyBUF_FULL_RO)) ((xflags)))
                                    (((unsupported)).apply ((((xmemoryview)).apply ((xz)))) ((xm3)))
                                      seq
                                        (((unsupported)).apply ((((unsupported)).apply ((xz)))))
                                        bogusForceDataize.write (((xcatch22)).apply ((xm1)))
                                        bogusForceDataize.write (((xcatch22)).apply ((xm2)))
                                        bogusForceDataize.write (((xcatch22)).apply ((xm3)))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm1)) (0))) ((((xord)).apply ("1"))))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm2)) (1))) ((((xord)).apply ("2"))))
                                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm3)) (2))) ((((xord)).apply ("3"))))
                                        (((unsupported)).apply ((((unsupported)).apply ((xm1)) ((xm2)) ((xm3)))))
                        xx.write (((xbytearray)).apply ("123"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xBufferError)))))
                          (((unsupported)).apply ((((xmemoryview)).apply ((xx)))) ((xm)))
                            seq
                              xex.write (((xndarray)).apply ((xm)))
                              unsupported
                xtest_memoryview_redirect.write
                  [xself]
                    memory > xz
                    memory > xm
                    memory > xa
                    memory > xnd
                    memory > xy
                    seq > @
                      seq
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply ((1.0.mul (xx))) ((xx)) ((((xrange)).apply (12))))) ((((unsupported)).apply (12))) ("d"))
                        xa.write ((((xarray).xarray)).apply ("d") ((((unsupported)).apply ((1.0.mul (xx))) ((xx)) ((((xrange)).apply (12))))))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ((xnd)) ((xa)))))
                          seq
                            xy.write (((unsupported)).apply ((xndarray)) ((xx)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                            xz.write (((unsupported)).apply ((xndarray)) ((xy)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                            xm.write (((xmemoryview)).apply ((xz)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xy).xobj)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xz).xobj)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xm).xobj)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xy)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((xz)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (3))))) ((((unsupported)).apply ((xx)) ((((unsupported)).apply (1) (3))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (3))))) ((((unsupported)).apply ((xy)) ((((unsupported)).apply (1) (3))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (3))))) ((((unsupported)).apply ((xz)) ((((unsupported)).apply (1) (3))))))
                            (((unsupported)).apply ((((unsupported)).apply ((xy)) ((xz)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply (1) (3))))) ((((unsupported)).apply ((xx)) ((((unsupported)).apply (1) (3))))))
                xtest_memoryview_from_static_exporter.write
                  [xself]
                    memory > xz
                    memory > xfmt
                    memory > xx
                    memory > xm
                    memory > xlst
                    memory > xy
                    seq > @
                      seq
                        xfmt.write "B"
                        xlst.write (((unsupported)).apply (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xstaticarray)) (1) (2) (3))
                        xx.write (((xstaticarray)).apply)
                        xy.write (((xmemoryview)).apply ((xx)))
                        (((unsupported)).apply (((xself).xverify)) ((xy)) ((xx)) (1) ((xfmt)) (TRUE) (1) ((((unsupported)).apply (12))) ((((unsupported)).apply (1))) ((xlst)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (12))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xy)) ((xi)))) ((xi)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xy)))))
                        xx.write (((xstaticarray)).apply)
                        xy.write (((xmemoryview)).apply ((xx)))
                        (((unsupported)).apply ((((unsupported)).apply ((xy)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                        xx.write (((xstaticarray)).apply)
                        xy.write (((unsupported)).apply ((xndarray)) ((xx)) ((xPyBUF_FULL_RO)))
                        xz.write (((unsupported)).apply ((xndarray)) ((xy)) ((xPyBUF_FULL_RO)))
                        xm.write (((xmemoryview)).apply ((xz)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xy).xobj)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xm).xobj)) ((xz)))
                        (((unsupported)).apply (((xself).xverify)) ((xm)) ((xz)) (1) ((xfmt)) (TRUE) (1) ((((unsupported)).apply (12))) ((((unsupported)).apply (1))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)) ((xm)))))
                        xx.write (((xstaticarray)).apply)
                        xy.write (((unsupported)).apply ((xndarray)) ((xx)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        xz.write (((unsupported)).apply ((xndarray)) ((xy)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        xm.write (((xmemoryview)).apply ((xz)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xy).xobj)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xz).xobj)) ((xx)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xm).xobj)) ((xx)))
                        (((unsupported)).apply (((xself).xverify)) ((xm)) ((xx)) (1) ((xfmt)) (TRUE) (1) ((((unsupported)).apply (12))) ((((unsupported)).apply (1))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)) ((xm)))))
                        xx.write (((unsupported)).apply ((xstaticarray)) (TRUE))
                        xy.write (((xmemoryview)).apply ((xx)))
                        (((unsupported)).apply (((xself).xverify)) ((xy)) ("None: is there a None literal in the EO language?") (1) ((xfmt)) (TRUE) (1) ((((unsupported)).apply (12))) ((((unsupported)).apply (1))) ((xlst)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (12))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xy)) ((xi)))) ((xi)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xy)))))
                        xx.write (((unsupported)).apply ((xstaticarray)) (TRUE))
                        xy.write (((xmemoryview)).apply ((xx)))
                        (((unsupported)).apply ((((unsupported)).apply ((xy)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)))))
                        xx.write (((unsupported)).apply ((xstaticarray)) (TRUE))
                        xy.write (((unsupported)).apply ((xndarray)) ((xx)) ((xPyBUF_FULL_RO)))
                        xz.write (((unsupported)).apply ((xndarray)) ((xy)) ((xPyBUF_FULL_RO)))
                        xm.write (((xmemoryview)).apply ((xz)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xy).xobj)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xm).xobj)) ((xz)))
                        (((unsupported)).apply (((xself).xverify)) ((xm)) ((xz)) (1) ((xfmt)) (TRUE) (1) ((((unsupported)).apply (12))) ((((unsupported)).apply (1))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)) ((xm)))))
                        xx.write (((unsupported)).apply ((xstaticarray)) (TRUE))
                        xy.write (((unsupported)).apply ((xndarray)) ((xx)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        xz.write (((unsupported)).apply ((xndarray)) ((xy)) ((xPyBUF_FULL_RO)) ((xND_REDIRECT)))
                        xm.write (((xmemoryview)).apply ((xz)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xy).xobj)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xz).xobj)) ((xy)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xm).xobj)) ((xy)))
                        (((unsupported)).apply (((xself).xverify)) ((xm)) ((xy)) (1) ((xfmt)) (TRUE) (1) ((((unsupported)).apply (12))) ((((unsupported)).apply (1))) ((xlst)))
                        (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)) ((xz)) ((xm)))))
                xtest_memoryview_getbuffer_undefined.write
                  [xself]
                    memory > xnd
                    seq > @
                      seq
                        xnd.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) (((xND_GETBUF_FAIL).or (xND_GETBUF_UNDEFINED))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xmemoryview)) ((xnd)))
                xtest_issue_7385.write
                  [xself]
                    memory > xx
                    seq > @
                      seq
                        xx.write (((unsupported)).apply ((xndarray)) ((((unsupported)).apply (1) (2) (3))) ((((unsupported)).apply (3))) ((xND_GETBUF_FAIL)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xmemoryview)) ((xx)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)