memory > xBaseHTTPRequestHandler
memory > xsocket
memory > xemail
memory > xBaseTestCase
memory > xCGIHTTPServerTestCase
memory > xthreading
memory > xAuditableBytesIO
memory > xntpath
memory > xhttp
memory > xdatetime
memory > xexpected
memory > xss
memory > xBytesIO
memory > xCGIHTTPRequestHandler
memory > xtemp
memory > xz
memory > xScriptTestCase
memory > xfile4
memory > xMiscTestCase
memory > xstr
memory > xh
memory > xSimpleHTTPRequestHandlerTestCase
memory > xIndexError
memory > xStopIteration
memory > xurllib
memory > xbind
memory > xtempfile
memory > xRejectingSocketlessRequestHandler
memory > xerr
memory > xwd
memory > xfile1
memory > xopen
memory > xpath
memory > xtype
memory > xf
memory > xfile3
memory > xint
memory > xre
memory > xException
memory > xr
memory > xbase64
memory > xhasattr
memory > xcode
memory > xtime
memory > xsum
memory > xfile2
memory > xNoLogRequestHandler
memory > xRequestHandlerLoggingTestCase
memory > xmonth
memory > xsuper
memory > xsupport
memory > xsys
memory > xissubclass
memory > xBaseHTTPRequestHandlerTestCase
memory > xTestServerThread
memory > xhh
memory > xSimpleHTTPServerTestCase
memory > xmm
memory > xOSError
memory > xmock
memory > xos
memory > xdir
memory > xfieldName
memory > xgetattr
memory > xSocketlessRequestHandler
memory > xUnicodeEncodeError
memory > xiter
memory > xhtml
memory > xday
memory > xHTTPStatus
memory > xname
memory > xshutil
memory > xunittest
memory > xSimpleHTTPRequestHandler
memory > xy
memory > xnext
memory > xHTTPServer
memory > xBaseHTTPServerTestCase
memory > xserver
memory > xisinstance
memory > xlen
memory > xfp
memory > x__name__
memory > xyear
[] > test_httpservers
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_browser_cache_file_changed
        memory > xtest_return_custom_status
        memory > xtest_server_test_ipv6
        memory > x__init__
        memory > xdo_ERROR
        memory > xtest_post
        memory > xtest_query_with_continuous_slashes
        memory > xtest_invaliduri
        memory > xdo_TEST
        memory > xtest_start_with_double_slash
        memory > xHTTPResponseMatch
        memory > xcheck_status_and_reason
        memory > xtest_head
        memory > xtest_request_line_trimming
        memory > xgetData
        memory > xmock_server_class
        memory > xtest_header_buffering_of_send_response_only
        memory > xtest_issue19435
        memory > xtest_http_1_1
        memory > xtest_latin1_header
        memory > xdo_EXPLAINERROR
        memory > xtest_http_1_0
        memory > xsend_typical_request
        memory > xtest_authorization
        memory > xtest_with_continue_1_1
        memory > xrequest
        memory > xcgi_file1
        memory > xtest_browser_cache
        memory > xdo_NOTFOUND
        memory > xtest_close_connection
        memory > xtest_all
        memory > xverify_get_called
        memory > xtest_header_buffering_of_send_header
        memory > xcgi_file2
        memory > xtest_send_error
        memory > xdo_CUSTOM
        memory > xdo_KEYERROR
        memory > xtest_server_test_ipv4
        memory > xlinesep
        memory > xtest_html_escape_filename
        memory > xtest_date_time_string
        memory > xtest_html_escape_on_error
        memory > xtest_send_blank
        memory > xipv6_addrs
        memory > xtest_main
        memory > xtest_no_leading_slash
        memory > xlog_message
        memory > xtest_os_environ_is_not_altered
        memory > xstop
        memory > xtest_http_0_9
        memory > xtest_server_test_unspec
        memory > xtest_header_buffering_of_send_error
        memory > xtest_extra_space
        memory > xtest_path_without_leading_slash
        memory > xtest_get
        memory > xtest_url_collapse_path
        memory > xtest_nested_cgi_path_issue21323
        memory > xsetUp
        memory > xtest_with_continue_1_0
        memory > xtest_return_header_keep_alive
        memory > xtest_command
        memory > xtest_headers_and_content
        memory > xtest_version_none_get
        memory > xipv4_addrs
        memory > xtest_urlquote_decoding_in_cgi_check
        memory > xtest_version_invalid
        memory > xdo_SEND_ERROR
        memory > xtest_internal_key_error
        memory > xtest_return_explain_error
        memory > xtest_header_close
        memory > xtest_query_with_multiple_question_mark
        memory > xcgi_file4
        memory > xverify_expected_headers
        memory > xtest_handler
        memory > xtest_header_length
        memory > xrun
        memory > xnumWrites
        memory > xtest_version_bogus
        memory > xtest_header_keep_alive
        memory > xtest_windows_colon
        memory > xtest_server_test_localhost
        memory > xtest_version_none
        memory > xdo_KEEP
        memory > xtest_error_content_length
        memory > xdo_HEAD
        memory > xtest_query_arguments
        memory > xhandle_expect_100
        memory > xtest_invalid_requests
        memory > xdefault_request_version
        memory > xread
        memory > xtest_err
        memory > xtest_too_many_headers
        memory > xprotocol_version
        memory > xtest_last_modified
        memory > xwrite
        memory > xtest_with_continue_rejected
        memory > xdo_GET
        memory > xtest_header_unbuffered_when_continue
        memory > xtest_request_length
        memory > xtearDown
        memory > xtest_version_digits
        memory > xtest_undecodable_filename
        memory > xverify_http_server_response
        memory > xtest_browser_cache_with_If_None_Match_header
        memory > xdo_LATINONEHEADER
        memory > xtest_head_via_send_error
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xlog_message.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                xread.write
                  [xself xn]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (""))
            (((unsupported)).apply (((xthreading).xThread)))
              seq
                x__init__.write
                  [xself xtest_object xrequest_handler]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xthreading).xThread).x__init__)).apply ((xself)))
                        (((unsupported)).apply (((xself).xrequest_handler)) ((xrequest_handler)))
                        (((unsupported)).apply (((xself).xtest_object)) ((xtest_object)))
                xrun.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xserver)) ((((xHTTPServer)).apply ((((unsupported)).apply ("localhost") (0))) (((xself).xrequest_handler)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((xself).xtest_object).xHOST)) ((((xself).xtest_object).xPORT)))) (((((((xself).xserver).xsocket).xgetsockname)).apply)))
                        bogusForceDataize.write ((((((xself).xtest_object).xserver_started).xset)).apply)
                        (((unsupported)).apply (((xself).xtest_object)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          bogusForceDataize.write (((((xself).xserver).xserve_forever)).apply (0.05))
                          bogusForceDataize.write (((((xself).xserver).xserver_close)).apply)
                xstop.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xserver).xshutdown)).apply)
                        bogusForceDataize.write ((((xself).xjoin)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_threads)) (((((xsupport).xthreading_setup)).apply)))
                        (((unsupported)).apply (((xos).xenviron)) (((((xsupport).xEnvironmentVarGuard)).apply)))
                        (((unsupported)).apply (((xself).xserver_started)) (((((xthreading).xEvent)).apply)))
                        (((unsupported)).apply (((xself).xthread)) ((((xTestServerThread)).apply ((xself)) (((xself).xrequest_handler)))))
                        bogusForceDataize.write (((((xself).xthread).xstart)).apply)
                        bogusForceDataize.write (((((xself).xserver_started).xwait)).apply)
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xthread).xstop)).apply)
                        (((unsupported)).apply (((xself).xthread)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write (((((xos).xenviron).x__exit__)).apply)
                        bogusForceDataize.write ((((xsupport).xthreading_cleanup)).apply ((((unsupported)).apply (((xself).x_threads)))))
                xrequest.write
                  [xself xuri xmethod xbody xheaders]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xconnection)) ((((((xhttp).xclient).xHTTPConnection)).apply (((xself).xHOST)) (((xself).xPORT)))))
                        bogusForceDataize.write (((((xself).xconnection).xrequest)).apply ((xmethod)) ((xuri)) ((xbody)) ((xheaders)))
                        (((unsupported)).apply ((((((xself).xconnection).xgetresponse)).apply)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                (((unsupported)).apply ((xNoLogRequestHandler)) ((xBaseHTTPRequestHandler)))
                  seq
                    xprotocol_version.write "HTTP/1.1"
                    xdefault_request_version.write "HTTP/1.1"
                    xdo_TEST.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write ((((xself).xsend_response)).apply (((xHTTPStatus).xNO_CONTENT)))
                            bogusForceDataize.write ((((xself).xsend_header)).apply ("Content-Type") ("text/html"))
                            bogusForceDataize.write ((((xself).xsend_header)).apply ("Connection") ("close"))
                            bogusForceDataize.write ((((xself).xend_headers)).apply)
                    xdo_KEEP.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write ((((xself).xsend_response)).apply (((xHTTPStatus).xNO_CONTENT)))
                            bogusForceDataize.write ((((xself).xsend_header)).apply ("Content-Type") ("text/html"))
                            bogusForceDataize.write ((((xself).xsend_header)).apply ("Connection") ("keep-alive"))
                            bogusForceDataize.write ((((xself).xend_headers)).apply)
                    xdo_KEYERROR.write
                      [xself]
                        seq > @
                          bogusForceDataize.write ((((xself).xsend_error)).apply (999))
                    xdo_NOTFOUND.write
                      [xself]
                        seq > @
                          bogusForceDataize.write ((((xself).xsend_error)).apply (((xHTTPStatus).xNOT_FOUND)))
                    xdo_EXPLAINERROR.write
                      [xself]
                        seq > @
                          bogusForceDataize.write ((((xself).xsend_error)).apply (999) ("Short Message") ("This is a long n explanation"))
                    xdo_CUSTOM.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write ((((xself).xsend_response)).apply (999))
                            bogusForceDataize.write ((((xself).xsend_header)).apply ("Content-Type") ("text/html"))
                            bogusForceDataize.write ((((xself).xsend_header)).apply ("Connection") ("close"))
                            bogusForceDataize.write ((((xself).xend_headers)).apply)
                    xdo_LATINONEHEADER.write
                      [xself]
                        memory > xbody
                        seq > @
                          seq
                            bogusForceDataize.write ((((xself).xsend_response)).apply (999))
                            bogusForceDataize.write ((((xself).xsend_header)).apply ("X-Special") ("Dängerous Mind"))
                            bogusForceDataize.write ((((xself).xsend_header)).apply ("Connection") ("close"))
                            bogusForceDataize.write ((((xself).xend_headers)).apply)
                            xbody.write ((((((unsupported)).apply (((xself).xheaders)) ("x-special-incoming")).xencode)).apply ("utf-8"))
                            bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ((xbody)))
                    xdo_SEND_ERROR.write
                      [xself]
                        seq > @
                          bogusForceDataize.write ((((xself).xsend_error)).apply ((((xint)).apply ((((unsupported)).apply (((xself).xpath)) ((((unsupported)).apply (1))))))))
                    xdo_HEAD.write
                      [xself]
                        seq > @
                          bogusForceDataize.write ((((xself).xsend_error)).apply ((((xint)).apply ((((unsupported)).apply (((xself).xpath)) ((((unsupported)).apply (1))))))))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseTestCase).xsetUp)).apply ((xself)))
                        (((unsupported)).apply (((xself).xcon)) ((((((xhttp).xclient).xHTTPConnection)).apply (((xself).xHOST)) (((xself).xPORT)))))
                        bogusForceDataize.write (((((xself).xcon).xconnect)).apply)
                xtest_command.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("GET") ("/"))
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xNOT_IMPLEMENTED)))
                xtest_request_line_trimming.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xcon).x_http_vsn_str)) ("HTTP/1.1n"))
                        bogusForceDataize.write (((((xself).xcon).xputrequest)).apply ("XYZBOGUS") ("/"))
                        bogusForceDataize.write (((((xself).xcon).xendheaders)).apply)
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xNOT_IMPLEMENTED)))
                xtest_version_bogus.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xcon).x_http_vsn_str)) ("FUBAR"))
                        bogusForceDataize.write (((((xself).xcon).xputrequest)).apply ("GET") ("/"))
                        bogusForceDataize.write (((((xself).xcon).xendheaders)).apply)
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xBAD_REQUEST)))
                xtest_version_digits.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xcon).x_http_vsn_str)) ("HTTP/9.9.9"))
                        bogusForceDataize.write (((((xself).xcon).xputrequest)).apply ("GET") ("/"))
                        bogusForceDataize.write (((((xself).xcon).xendheaders)).apply)
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xBAD_REQUEST)))
                xtest_version_none_get.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xcon).x_http_vsn_str)) (""))
                        bogusForceDataize.write (((((xself).xcon).xputrequest)).apply ("GET") ("/"))
                        bogusForceDataize.write (((((xself).xcon).xendheaders)).apply)
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xNOT_IMPLEMENTED)))
                xtest_version_none.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xcon).x_http_vsn_str)) (""))
                        bogusForceDataize.write (((((xself).xcon).xputrequest)).apply ("CUSTOM") ("/"))
                        bogusForceDataize.write (((((xself).xcon).xendheaders)).apply)
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xBAD_REQUEST)))
                xtest_version_invalid.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xcon).x_http_vsn)) (99))
                        (((unsupported)).apply ((((xself).xcon).x_http_vsn_str)) ("HTTP/9.9"))
                        bogusForceDataize.write (((((xself).xcon).xputrequest)).apply ("GET") ("/"))
                        bogusForceDataize.write (((((xself).xcon).xendheaders)).apply)
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xHTTP_VERSION_NOT_SUPPORTED)))
                xtest_send_blank.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xcon).x_http_vsn_str)) (""))
                        bogusForceDataize.write (((((xself).xcon).xputrequest)).apply ("") (""))
                        bogusForceDataize.write (((((xself).xcon).xendheaders)).apply)
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xBAD_REQUEST)))
                xtest_header_close.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcon).xputrequest)).apply ("GET") ("/"))
                        bogusForceDataize.write (((((xself).xcon).xputheader)).apply ("Connection") ("close"))
                        bogusForceDataize.write (((((xself).xcon).xendheaders)).apply)
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xNOT_IMPLEMENTED)))
                xtest_header_keep_alive.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xcon).x_http_vsn_str)) ("HTTP/1.1"))
                        bogusForceDataize.write (((((xself).xcon).xputrequest)).apply ("GET") ("/"))
                        bogusForceDataize.write (((((xself).xcon).xputheader)).apply ("Connection") ("keep-alive"))
                        bogusForceDataize.write (((((xself).xcon).xendheaders)).apply)
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xNOT_IMPLEMENTED)))
                xtest_handler.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("TEST") ("/"))
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xNO_CONTENT)))
                xtest_return_header_keep_alive.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("KEEP") ("/"))
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xres).xgetheader)).apply ("Connection"))) ("keep-alive"))
                        bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("TEST") ("/"))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((((xself).xcon).xclose)))
                xtest_internal_key_error.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("KEYERROR") ("/"))
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (999))
                xtest_return_custom_status.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("CUSTOM") ("/"))
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (999))
                xtest_return_explain_error.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("EXPLAINERROR") ("/"))
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (999))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xint)).apply (((((xres).xgetheader)).apply ("Content-Length"))))))
                xtest_latin1_header.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        (((unsupported)).apply ((((xself).xcon).xrequest)) ("LATINONEHEADER") ("/") ((((unsupported)).apply ("X-Special-Incoming") ("Ärger mit Unicode"))))
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xres).xgetheader)).apply ("X-Special"))) ("Dängerous Mind"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xres).xread)).apply)) (((("Ärger mit Unicode".xencode)).apply ("utf-8"))))
                xtest_error_content_length.write
                  [xself]
                    memory > xres
                    memory > xdata
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("NOTFOUND") ("/"))
                        xres.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xNOT_FOUND)))
                        xdata.write ((((xres).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((((xres).xgetheader)).apply ("Content-Length"))))) ((((xlen)).apply ((xdata)))))
                xtest_send_error.write
                  [xself]
                    memory > xallow_transfer_encoding_codes
                    memory > xres
                    memory > xdata
                    seq > @
                      seq
                        xallow_transfer_encoding_codes.write (((unsupported)).apply (((xHTTPStatus).xNOT_MODIFIED)) (((xHTTPStatus).xRESET_CONTENT)))
                        (((unsupported)).apply ((xcode)) ((((unsupported)).apply (((xHTTPStatus).xNO_CONTENT)) (((xHTTPStatus).xNOT_MODIFIED)) (((xHTTPStatus).xPROCESSING)) (((xHTTPStatus).xRESET_CONTENT)) (((xHTTPStatus).xSWITCHING_PROTOCOLS)))))
                          seq
                            bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("SEND_ERROR") (((("/{}".xformat)).apply ((xcode)))))
                            xres.write (((((xself).xcon).xgetresponse)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) (((xres).xstatus)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("None: is there a None literal in the EO language?") (((((xres).xgetheader)).apply ("Content-Length"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("None: is there a None literal in the EO language?") (((((xres).xgetheader)).apply ("Content-Type"))))
                            (((unsupported)).apply ((xcode)) ((xallow_transfer_encoding_codes))).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ("None: is there a None literal in the EO language?") (((((xres).xgetheader)).apply ("Transfer-Encoding"))))
                            xdata.write ((((xres).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("") ((xdata)))
                xtest_head_via_send_error.write
                  [xself]
                    memory > xallow_transfer_encoding_codes
                    memory > xres
                    memory > xdata
                    seq > @
                      seq
                        xallow_transfer_encoding_codes.write (((unsupported)).apply (((xHTTPStatus).xNOT_MODIFIED)) (((xHTTPStatus).xRESET_CONTENT)))
                        (((unsupported)).apply ((xcode)) ((((unsupported)).apply (((xHTTPStatus).xOK)) (((xHTTPStatus).xNO_CONTENT)) (((xHTTPStatus).xNOT_MODIFIED)) (((xHTTPStatus).xRESET_CONTENT)) (((xHTTPStatus).xSWITCHING_PROTOCOLS)))))
                          seq
                            bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("HEAD") (((("/{}".xformat)).apply ((xcode)))))
                            xres.write (((((xself).xcon).xgetresponse)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcode)) (((xres).xstatus)))
                            ((xcode).eq ((xHTTPStatus).xOK)).if
                              seq
                                bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xint)).apply (((((xres).xgetheader)).apply ("Content-Length")))).greater 0)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("text/html") (((((xres).xgetheader)).apply ("Content-Type"))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("None: is there a None literal in the EO language?") (((((xres).xgetheader)).apply ("Content-Length"))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ("None: is there a None literal in the EO language?") (((((xres).xgetheader)).apply ("Content-Type"))))
                            (((unsupported)).apply ((xcode)) ((xallow_transfer_encoding_codes))).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ("None: is there a None literal in the EO language?") (((((xres).xgetheader)).apply ("Transfer-Encoding"))))
                            xdata.write ((((xres).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("") ((xdata)))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                (((unsupported)).apply ((xBaseHTTPRequestHandler)))
                  seq
                    xprotocol_version.write "HTTP/1.1"
                    xdefault_request_version.write "HTTP/1.1"
                    xdo_GET.write
                      [xself]
                        seq > @
                          seq
                            bogusForceDataize.write ((((xself).xsend_response)).apply (((xHTTPStatus).xOK)))
                            bogusForceDataize.write ((((xself).xend_headers)).apply)
                    xdo_ERROR.write
                      [xself]
                        seq > @
                          bogusForceDataize.write ((((xself).xsend_error)).apply (((xHTTPStatus).xNOT_FOUND)) ("File not found"))
                xtest_get.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcon)) ((((((xhttp).xclient).xHTTPConnection)).apply (((xself).xHOST)) (((xself).xPORT)))))
                        bogusForceDataize.write (((((xself).xcon).xconnect)).apply)
                        (((unsupported)).apply (((((xsupport).xcaptured_stderr)).apply)) ((xerr)))
                          seq
                            bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("GET") ("/"))
                            bogusForceDataize.write (((((xself).xcon).xgetresponse)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xerr).xgetvalue)).apply).xendswith)).apply ("\"GET / HTTP/1.1\" 200 -n"))))
                xtest_err.write
                  [xself]
                    memory > xlines
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcon)) ((((((xhttp).xclient).xHTTPConnection)).apply (((xself).xHOST)) (((xself).xPORT)))))
                        bogusForceDataize.write (((((xself).xcon).xconnect)).apply)
                        (((unsupported)).apply (((((xsupport).xcaptured_stderr)).apply)) ((xerr)))
                          seq
                            bogusForceDataize.write (((((xself).xcon).xrequest)).apply ("ERROR") ("/"))
                            bogusForceDataize.write (((((xself).xcon).xgetresponse)).apply)
                        xlines.write (((((((xerr).xgetvalue)).apply).xsplit)).apply ("n"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((xlines)) (0)).xendswith)).apply ("code 404, message File not found"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((xlines)) (1)).xendswith)).apply ("\"ERROR / HTTP/1.1\" 404 -"))))
            (((unsupported)).apply ((xBaseTestCase)))
              seq
                (((unsupported)).apply ((xNoLogRequestHandler)) ((xSimpleHTTPRequestHandler)))
                xsetUp.write
                  [xself]
                    memory > xlast_modif
                    memory > xbasetempdir
                    memory > xtempname
                    memory > xmtime
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseTestCase).xsetUp)).apply ((xself)))
                        (((unsupported)).apply (((xself).xcwd)) (((((xos).xgetcwd)).apply)))
                        xbasetempdir.write ((((xtempfile).xgettempdir)).apply)
                        bogusForceDataize.write ((((xos).xchdir)).apply ((xbasetempdir)))
                        (((unsupported)).apply (((xself).xdata)) ("We are the knights who say Ni!"))
                        (((unsupported)).apply (((xself).xtempdir)) ((((unsupported)).apply (((xtempfile).xmkdtemp)) ((xbasetempdir)))))
                        (((unsupported)).apply (((xself).xtempdir_name)) ((((((xos).xpath).xbasename)).apply (((xself).xtempdir)))))
                        (((unsupported)).apply (((xself).xbase_url)) (("/".add ((xself).xtempdir_name))))
                        xtempname.write (((((xos).xpath).xjoin)).apply (((xself).xtempdir)) ("test"))
                        (((unsupported)).apply ((((xopen)).apply ((xtempname)) ("wb"))) ((xtemp)))
                          seq
                            bogusForceDataize.write ((((xtemp).xwrite)).apply (((xself).xdata)))
                            bogusForceDataize.write ((((xtemp).xflush)).apply)
                        xmtime.write (((((xos).xstat)).apply ((xtempname))).xst_mtime)
                        xlast_modif.write (((((xdatetime).xdatetime).xfromtimestamp)).apply ((xmtime)) ((((xdatetime).xtimezone).xutc)))
                        (((unsupported)).apply (((xself).xlast_modif_datetime)) ((((unsupported)).apply (((xlast_modif).xreplace)) (0))))
                        (((unsupported)).apply (((xself).xlast_modif_header)) ((((unsupported)).apply ((((xemail).xutils).xformatdate)) (((((xlast_modif).xtimestamp)).apply)) (TRUE))))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        seq
                          bogusForceDataize.write ((((xos).xchdir)).apply (((xself).xcwd)))
                          (((unsupported)).apply)
                            bogusForceDataize.write ((((xshutil).xrmtree)).apply (((xself).xtempdir)))
                        bogusForceDataize.write ((((xBaseTestCase).xtearDown)).apply ((xself)))
                xcheck_status_and_reason.write
                  [xself xresponse xstatus xdata]
                    memory > xreader
                    memory > xclose_conn
                    memory > xbody
                    seq > @
                      (((unsupported)).apply)
                        xclose_conn.write
                          []
                            memory > xreader
                            seq > @
                              seq
                                (((unsupported)).apply)
                                (((unsupported)).apply)
                                xreader.write ((xresponse).xfp)
                                (((unsupported)).apply (((xresponse).xfp)) ("None: is there a None literal in the EO language?"))
                        xreader.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply (((xresponse).x_close_conn)) ((xclose_conn)))
                        xbody.write ((((xresponse).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((xresponse)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus)) ((xstatus)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply (((xresponse).xreason)))
                        (xdata).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ((xbody)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xversion)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xresponse).xmsg).xget)).apply ("Connection") ("close"))) ("close"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xreader).xread)).apply (30))) ("") ("Connection should be closed"))
                        bogusForceDataize.write ((((xreader).xclose)).apply)
                        (((unsupported)).apply ((xbody)))
                xtest_undecodable_filename.write
                  [xself]
                    memory > xfilename
                    memory > xbody
                    memory > xresponse
                    memory > xenc
                    memory > xquotedname
                    seq > @
                      (((unsupported)).apply)
                        xenc.write ((((xsys).xgetfilesystemencoding)).apply)
                        xfilename.write (((((xos).xfsdecode)).apply (((xsupport).xTESTFN_UNDECODABLE))).add ".txt")
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply (((xself).xtempdir)) ((xfilename)))) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((xsupport).xTESTFN_UNDECODABLE)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "/")))
                        (((xsys).xplatform).eq "darwin").if
                          (((unsupported)).apply ((xname)) (((((xos).xlistdir)).apply (((xself).xtempdir)))))
                            ((xname).neq "test").if
                              seq
                                xfilename.write (xname)
                                (((unsupported)).apply)
                        xbody.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)))
                        xquotedname.write (((unsupported)).apply ((((xurllib).xparse).xquote)) ((xfilename)) ("surrogatepass"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((("href=\"%s\"".mod (xquotedname)).xencode)).apply ((xenc)) ("surrogateescape"))) ((xbody)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((">%s<".mod (((unsupported)).apply (((xhtml).xescape)) ((xfilename)) (FALSE))).xencode)).apply ((xenc)) ("surrogateescape"))) ((xbody)))
                        xresponse.write ((((xself).xrequest)).apply (((((xself).xbase_url).add "/").add (xquotedname))))
                        (((unsupported)).apply (((xself).xcheck_status_and_reason)) ((xresponse)) (((xHTTPStatus).xOK)) (((xsupport).xTESTFN_UNDECODABLE)))
                xtest_get.write
                  [xself]
                    memory > xresponse
                    memory > xdata
                    seq > @
                      seq
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "/test")))
                        (((unsupported)).apply (((xself).xcheck_status_and_reason)) ((xresponse)) (((xHTTPStatus).xOK)) (((xself).xdata)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "/test/")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_FOUND)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "/")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)))
                        xresponse.write ((((xself).xrequest)).apply (((xself).xbase_url)))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xMOVED_PERMANENTLY)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "/?hi=2")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "?hi=1")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xMOVED_PERMANENTLY)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresponse).xgetheader)).apply ("Location"))) ((((xself).xbase_url).add "/?hi=1")))
                        xresponse.write ((((xself).xrequest)).apply ("/ThisDoesNotExist"))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_FOUND)))
                        xresponse.write ((((xself).xrequest)).apply ((("/".add "ThisDoesNotExist").add "/")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_FOUND)))
                        xdata.write "Dummy index filern"
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply (((xself).xtempdir_name)) ("index.html"))) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ((xdata)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "/")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)) ((xdata)))
                        ((((xos).xname).eq "posix").and (((((xos).xgeteuid)).apply).neq 0)).if
                          seq
                            bogusForceDataize.write ((((xos).xchmod)).apply (((xself).xtempdir)) (0))
                            (((unsupported)).apply)
                              seq
                                xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "/")))
                                bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_FOUND)))
                              bogusForceDataize.write ((((xos).xchmod)).apply (((xself).xtempdir)) (493))
                xtest_head.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply (((xself).xrequest)) ((((xself).xbase_url).add "/test")) ("HEAD"))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresponse).xgetheader)).apply ("content-length"))) ((((xstr)).apply ((((xlen)).apply (((xself).xdata)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresponse).xgetheader)).apply ("content-type"))) ("application/octet-stream"))
                xtest_browser_cache.write
                  [xself]
                    memory > xnew_dt
                    memory > xheaders
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xheaders.write (((((xemail).xmessage).xMessage)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xheaders)) ("If-Modified-Since"))) (((xself).xlast_modif_header)))
                        xresponse.write (((unsupported)).apply (((xself).xrequest)) ((((xself).xbase_url).add "/test")) ((xheaders)))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_MODIFIED)))
                        xnew_dt.write (((xself).xlast_modif_datetime).add (((unsupported)).apply (((xdatetime).xtimedelta)) (1)))
                        xheaders.write (((((xemail).xmessage).xMessage)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xheaders)) ("If-Modified-Since"))) ((((unsupported)).apply ((((xemail).xutils).xformat_datetime)) ((xnew_dt)) (TRUE))))
                        xresponse.write (((unsupported)).apply (((xself).xrequest)) ((((xself).xbase_url).add "/test")) ((xheaders)))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_MODIFIED)))
                xtest_browser_cache_file_changed.write
                  [xself]
                    memory > xheaders
                    memory > xold_dt
                    memory > xresponse
                    memory > xdt
                    seq > @
                      seq
                        xdt.write ((xself).xlast_modif_datetime)
                        xold_dt.write ((xdt).sub (((unsupported)).apply (((xdatetime).xtimedelta)) (365)))
                        xheaders.write (((((xemail).xmessage).xMessage)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xheaders)) ("If-Modified-Since"))) ((((unsupported)).apply ((((xemail).xutils).xformat_datetime)) ((xold_dt)) (TRUE))))
                        xresponse.write (((unsupported)).apply (((xself).xrequest)) ((((xself).xbase_url).add "/test")) ((xheaders)))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)))
                xtest_browser_cache_with_If_None_Match_header.write
                  [xself]
                    memory > xheaders
                    memory > xresponse
                    seq > @
                      seq
                        xheaders.write (((((xemail).xmessage).xMessage)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xheaders)) ("If-Modified-Since"))) (((xself).xlast_modif_header)))
                        (((unsupported)).apply ((((unsupported)).apply ((xheaders)) ("If-None-Match"))) ("*"))
                        xresponse.write (((unsupported)).apply (((xself).xrequest)) ((((xself).xbase_url).add "/test")) ((xheaders)))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)))
                xtest_invalid_requests.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write (((unsupported)).apply (((xself).xrequest)) ("/") ("FOO"))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_IMPLEMENTED)))
                        xresponse.write (((unsupported)).apply (((xself).xrequest)) ("/") ("custom"))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_IMPLEMENTED)))
                        xresponse.write (((unsupported)).apply (((xself).xrequest)) ("/") ("GETs"))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_IMPLEMENTED)))
                xtest_last_modified.write
                  [xself]
                    memory > xlast_modif_header
                    memory > xresponse
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "/test")))
                        (((unsupported)).apply (((xself).xcheck_status_and_reason)) ((xresponse)) (((xHTTPStatus).xOK)) (((xself).xdata)))
                        xlast_modif_header.write (((unsupported)).apply (((xresponse).xheaders)) ("Last-modified"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlast_modif_header)) (((xself).xlast_modif_header)))
                xtest_path_without_leading_slash.write
                  [xself]
                    memory > xresponse
                    seq > @
                      seq
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xtempdir_name).add "/test")))
                        (((unsupported)).apply (((xself).xcheck_status_and_reason)) ((xresponse)) (((xHTTPStatus).xOK)) (((xself).xdata)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xtempdir_name).add "/test/")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xNOT_FOUND)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xtempdir_name).add "/")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)))
                        xresponse.write ((((xself).xrequest)).apply (((xself).xtempdir_name)))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xMOVED_PERMANENTLY)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xtempdir_name).add "/?hi=2")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)))
                        xresponse.write ((((xself).xrequest)).apply ((((xself).xtempdir_name).add "?hi=1")))
                        bogusForceDataize.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xMOVED_PERMANENTLY)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xresponse).xgetheader)).apply ("Location"))) ((((xself).xtempdir_name).add "/?hi=1")))
                xtest_html_escape_filename.write
                  [xself]
                    memory > xfilename
                    memory > xhtml_text
                    memory > xfullpath
                    memory > xbody
                    memory > xresponse
                    memory > xenc
                    seq > @
                      seq
                        xfilename.write "<test&>.txt"
                        xfullpath.write (((((xos).xpath).xjoin)).apply (((xself).xtempdir)) ((xfilename)))
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write ((((((xopen)).apply ((xfullpath)) ("w")).xclose)).apply)
                          (((unsupported)).apply (((((xunittest).xSkipTest)).apply (("Can not create file %s on current file system".mod (xfilename))))))
                        (((unsupported)).apply)
                          seq
                            xresponse.write ((((xself).xrequest)).apply ((((xself).xbase_url).add "/")))
                            xbody.write ((((xself).xcheck_status_and_reason)).apply ((xresponse)) (((xHTTPStatus).xOK)))
                            xenc.write (((((xresponse).xheaders).xget_content_charset)).apply)
                          bogusForceDataize.write ((((xos).xunlink)).apply ((xfullpath)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xenc)))
                        xhtml_text.write (">%s<".mod (((unsupported)).apply (((xhtml).xescape)) ((xfilename)) (FALSE)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((xhtml_text).xencode)).apply ((xenc)))) ((xbody)))
            xcgi_file1.write (((unsupported)).apply)
            xcgi_file2.write (((unsupported)).apply)
            xcgi_file4.write (((unsupported)).apply)
            (((unsupported)).apply ((xBaseTestCase)) (((((xunittest).xskipIf)).apply (((((xhasattr)).apply ((xos)) ("geteuid")).and (((((xos).xgeteuid)).apply).eq 0))) ("This test can't be run reliably as root (issue #13308)."))))
              seq
                (((unsupported)).apply ((xNoLogRequestHandler)) ((xCGIHTTPRequestHandler)))
                xlinesep.write (((((xos).xlinesep).xencode)).apply ("ascii"))
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xBaseTestCase).xsetUp)).apply ((xself)))
                        (((unsupported)).apply (((xself).xcwd)) (((((xos).xgetcwd)).apply)))
                        (((unsupported)).apply (((xself).xparent_dir)) (((((xtempfile).xmkdtemp)).apply)))
                        (((unsupported)).apply (((xself).xcgi_dir)) ((((((xos).xpath).xjoin)).apply (((xself).xparent_dir)) ("cgi-bin"))))
                        (((unsupported)).apply (((xself).xcgi_child_dir)) ((((((xos).xpath).xjoin)).apply (((xself).xcgi_dir)) ("child-dir"))))
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xself).xcgi_dir)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply (((xself).xcgi_child_dir)))
                        (((unsupported)).apply (((xself).xnocgi_path)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xfile1_path)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xfile2_path)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xfile3_path)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xfile4_path)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).x_pythonexe_symlink)) ("None: is there a None literal in the EO language?"))
                        ((((xsupport).xcan_symlink)).apply).if
                          seq
                            (((unsupported)).apply (((xself).xpythonexe)) ((((((xos).xpath).xjoin)).apply (((xself).xparent_dir)) ("python"))))
                            (((unsupported)).apply (((xself).x_pythonexe_symlink)) ((((((((xsupport).xPythonSymlink)).apply (((xself).xpythonexe))).x__enter__)).apply)))
                          (((unsupported)).apply (((xself).xpythonexe)) (((xsys).xexecutable)))
                        (((unsupported)).apply ((xUnicodeEncodeError)))
                          bogusForceDataize.write (((((xself).xpythonexe).xencode)).apply ("utf-8"))
                          seq
                            bogusForceDataize.write ((((xself).xtearDown)).apply)
                            bogusForceDataize.write ((((xself).xskipTest)).apply ("Python executable path is not encodable to utf-8"))
                        (((unsupported)).apply (((xself).xnocgi_path)) ((((((xos).xpath).xjoin)).apply (((xself).xparent_dir)) ("nocgi.py"))))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xnocgi_path)) ("w"))) ((xfp)))
                          bogusForceDataize.write ((((xfp).xwrite)).apply (((xcgi_file1).mod ((xself).xpythonexe))))
                        bogusForceDataize.write ((((xos).xchmod)).apply (((xself).xnocgi_path)) (511))
                        (((unsupported)).apply (((xself).xfile1_path)) ((((((xos).xpath).xjoin)).apply (((xself).xcgi_dir)) ("file1.py"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xfile1_path)) ("w") ("utf-8"))) ((xfile1)))
                          bogusForceDataize.write ((((xfile1).xwrite)).apply (((xcgi_file1).mod ((xself).xpythonexe))))
                        bogusForceDataize.write ((((xos).xchmod)).apply (((xself).xfile1_path)) (511))
                        (((unsupported)).apply (((xself).xfile2_path)) ((((((xos).xpath).xjoin)).apply (((xself).xcgi_dir)) ("file2.py"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xfile2_path)) ("w") ("utf-8"))) ((xfile2)))
                          bogusForceDataize.write ((((xfile2).xwrite)).apply (((xcgi_file2).mod ((xself).xpythonexe))))
                        bogusForceDataize.write ((((xos).xchmod)).apply (((xself).xfile2_path)) (511))
                        (((unsupported)).apply (((xself).xfile3_path)) ((((((xos).xpath).xjoin)).apply (((xself).xcgi_child_dir)) ("file3.py"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xfile3_path)) ("w") ("utf-8"))) ((xfile3)))
                          bogusForceDataize.write ((((xfile3).xwrite)).apply (((xcgi_file1).mod ((xself).xpythonexe))))
                        bogusForceDataize.write ((((xos).xchmod)).apply (((xself).xfile3_path)) (511))
                        (((unsupported)).apply (((xself).xfile4_path)) ((((((xos).xpath).xjoin)).apply (((xself).xcgi_dir)) ("file4.py"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xopen)) (((xself).xfile4_path)) ("w") ("utf-8"))) ((xfile4)))
                          bogusForceDataize.write ((((xfile4).xwrite)).apply (((xcgi_file4).mod (((unsupported)).apply (((xself).xpythonexe)) ("QUERY_STRING")))))
                        bogusForceDataize.write ((((xos).xchmod)).apply (((xself).xfile4_path)) (511))
                        bogusForceDataize.write ((((xos).xchdir)).apply (((xself).xparent_dir)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        seq
                          bogusForceDataize.write ((((xos).xchdir)).apply (((xself).xcwd)))
                          ((xself).x_pythonexe_symlink).if
                            bogusForceDataize.write (((((xself).x_pythonexe_symlink).x__exit__)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                          ((xself).xnocgi_path).if
                            bogusForceDataize.write ((((xos).xremove)).apply (((xself).xnocgi_path)))
                          ((xself).xfile1_path).if
                            bogusForceDataize.write ((((xos).xremove)).apply (((xself).xfile1_path)))
                          ((xself).xfile2_path).if
                            bogusForceDataize.write ((((xos).xremove)).apply (((xself).xfile2_path)))
                          ((xself).xfile3_path).if
                            bogusForceDataize.write ((((xos).xremove)).apply (((xself).xfile3_path)))
                          ((xself).xfile4_path).if
                            bogusForceDataize.write ((((xos).xremove)).apply (((xself).xfile4_path)))
                          bogusForceDataize.write ((((xos).xrmdir)).apply (((xself).xcgi_child_dir)))
                          bogusForceDataize.write ((((xos).xrmdir)).apply (((xself).xcgi_dir)))
                          bogusForceDataize.write ((((xos).xrmdir)).apply (((xself).xparent_dir)))
                        bogusForceDataize.write ((((xBaseTestCase).xtearDown)).apply ((xself)))
                xtest_url_collapse_path.write
                  [xself]
                    memory > xactual
                    memory > xtest_vectors
                    seq > @
                      seq
                        xtest_vectors.write (((unsupported)).apply ("") ("//") ("..") ((xIndexError)) ("/.//..") ((xIndexError)) ("/") ("//") ("//") ("//") ("/\\") ("//\\") ("/.//") ("//") ("cgi-bin/file1.py") ("/cgi-bin/file1.py") ("/cgi-bin/file1.py") ("/cgi-bin/file1.py") ("a") ("//a") ("/a") ("//a") ("//a") ("//a") ("./a") ("//a") ("./C:/") ("/C:/") ("/a/b") ("/a/b") ("/a/b/") ("/a/b/") ("/a/b/.") ("/a/b/") ("/a/b/c/..") ("/a/b/") ("/a/b/c/../d") ("/a/b/d") ("/a/b/c/../d/e/../f") ("/a/b/d/f") ("/a/b/c/../d/e/../../f") ("/a/b/f") ("/a/b/c/../d/e/.././././..//f") ("/a/b/f") ("../a/b/c/../d/e/.././././..//f") ((xIndexError)) ("/a/b/c/../d/e/../../../f") ("/a/f") ("/a/b/c/../d/e/../../../../f") ("//f") ("/a/b/c/../d/e/../../../../../f") ((xIndexError)) ("/a/b/c/../d/e/../../../../f/..") ("//") ("/a/b/c/../d/e/../../../../f/../.") ("//"))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xexpected)))) (((((xtest_vectors).xitems)).apply)))
                          ((((xisinstance)).apply ((xexpected)) ((xtype))).and (((xissubclass)).apply ((xexpected)) ((xException)))).if
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexpected)) (((xserver).x_url_collapse_path)) ((xpath)))
                            seq
                              xactual.write ((((xserver).x_url_collapse_path)).apply ((xpath)))
                              (((unsupported)).apply (((xself).xassertEqual)) ((xexpected)) ((xactual)) (("path = %rnGot:    %rnWanted: %r".mod (((unsupported)).apply ((xpath)) ((xactual)) ((xexpected))))))
                xtest_headers_and_content.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xself).xrequest)).apply ("/cgi-bin/file1.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xres).xread)).apply)) (((((xres).xgetheader)).apply ("Content-type"))) (((xres).xstatus)))) ((((unsupported)).apply (("Hello World".add ((xself).xlinesep))) ("text/html") (((xHTTPStatus).xOK)))))
                xtest_issue19435.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xself).xrequest)).apply ("///////////nocgi.py/../cgi-bin/nothere.sh"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xNOT_FOUND)))
                xtest_post.write
                  [xself]
                    memory > xheaders
                    memory > xres
                    memory > xparams
                    seq > @
                      seq
                        xparams.write (((((xurllib).xparse).xurlencode)).apply ((((unsupported)).apply ("spam") (1) ("eggs") ("python") ("bacon") (123456))))
                        xheaders.write (((unsupported)).apply ("Content-type") ("application/x-www-form-urlencoded"))
                        xres.write ((((xself).xrequest)).apply ("/cgi-bin/file2.py") ("POST") ((xparams)) ((xheaders)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xres).xread)).apply)) (("1, python, 123456".add ((xself).xlinesep))))
                xtest_invaliduri.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xself).xrequest)).apply ("/cgi-bin/invalid"))
                        bogusForceDataize.write ((((xres).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xres).xstatus)) (((xHTTPStatus).xNOT_FOUND)))
                xtest_authorization.write
                  [xself]
                    memory > xheaders
                    memory > xres
                    seq > @
                      seq
                        xheaders.write (((unsupported)).apply ("Authorization") (("Basic ".add ((((xbase64).xb64encode)).apply ("username:pass")))))
                        xres.write (((unsupported)).apply (((xself).xrequest)) ("/cgi-bin/file1.py") ("GET") ((xheaders)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (("Hello World".add ((xself).xlinesep))) ("text/html") (((xHTTPStatus).xOK)))) ((((unsupported)).apply (((((xres).xread)).apply)) (((((xres).xgetheader)).apply ("Content-type"))) (((xres).xstatus)))))
                xtest_no_leading_slash.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xself).xrequest)).apply ("cgi-bin/file1.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (("Hello World".add ((xself).xlinesep))) ("text/html") (((xHTTPStatus).xOK)))) ((((unsupported)).apply (((((xres).xread)).apply)) (((((xres).xgetheader)).apply ("Content-type"))) (((xres).xstatus)))))
                xtest_os_environ_is_not_altered.write
                  [xself]
                    memory > xsignature
                    memory > xres
                    seq > @
                      seq
                        xsignature.write "Test CGI Server"
                        (((unsupported)).apply ((((unsupported)).apply (((xos).xenviron)) ("SERVER_SOFTWARE"))) ((xsignature)))
                        xres.write ((((xself).xrequest)).apply ("/cgi-bin/file1.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (("Hello World".add ((xself).xlinesep))) ("text/html") (((xHTTPStatus).xOK)))) ((((unsupported)).apply (((((xres).xread)).apply)) (((((xres).xgetheader)).apply ("Content-type"))) (((xres).xstatus)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xos).xenviron)) ("SERVER_SOFTWARE"))) ((xsignature)))
                xtest_urlquote_decoding_in_cgi_check.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xself).xrequest)).apply ("/cgi-bin%2ffile1.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (("Hello World".add ((xself).xlinesep))) ("text/html") (((xHTTPStatus).xOK)))) ((((unsupported)).apply (((((xres).xread)).apply)) (((((xres).xgetheader)).apply ("Content-type"))) (((xres).xstatus)))))
                xtest_nested_cgi_path_issue21323.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xself).xrequest)).apply ("/cgi-bin/child-dir/file3.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (("Hello World".add ((xself).xlinesep))) ("text/html") (((xHTTPStatus).xOK)))) ((((unsupported)).apply (((((xres).xread)).apply)) (((((xres).xgetheader)).apply ("Content-type"))) (((xres).xstatus)))))
                xtest_query_with_multiple_question_mark.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xself).xrequest)).apply ("/cgi-bin/file4.py?a=b?c=d"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (("a=b?c=d".add ((xself).xlinesep))) ("text/html") (((xHTTPStatus).xOK)))) ((((unsupported)).apply (((((xres).xread)).apply)) (((((xres).xgetheader)).apply ("Content-type"))) (((xres).xstatus)))))
                xtest_query_with_continuous_slashes.write
                  [xself]
                    memory > xres
                    seq > @
                      seq
                        xres.write ((((xself).xrequest)).apply ("/cgi-bin/file4.py?k=aa%2F%2Fbb&//q//p//=//a//b//"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (("k=aa%2F%2Fbb&//q//p//=//a//b//".add ((xself).xlinesep))) ("text/html") (((xHTTPStatus).xOK)))) ((((unsupported)).apply (((((xres).xread)).apply)) (((((xres).xgetheader)).apply ("Content-type"))) (((xres).xstatus)))))
            (((unsupported)).apply ((xSimpleHTTPRequestHandler)))
              seq
                x__init__.write
                  [xself]
                    memory > xrequest
                    seq > @
                      (((unsupported)).apply)
                        xrequest.write ((((xmock).xMock)).apply)
                        (((unsupported)).apply ((((xrequest).xmakefile).xreturn_value)) ((((xBytesIO)).apply)))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xrequest)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xget_called)) (FALSE))
                        (((unsupported)).apply (((xself).xprotocol_version)) ("HTTP/1.1"))
                xdo_GET.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xget_called)) (TRUE))
                        bogusForceDataize.write ((((xself).xsend_response)).apply (((xHTTPStatus).xOK)))
                        bogusForceDataize.write ((((xself).xsend_header)).apply ("Content-Type") ("text/html"))
                        bogusForceDataize.write ((((xself).xend_headers)).apply)
                        bogusForceDataize.write (((((xself).xwfile).xwrite)).apply ("<html><body>Data</body></html>rn"))
                xlog_message.write
                  [xself xformat]
                    seq > @
                      (((unsupported)).apply)
            (((unsupported)).apply ((xSocketlessRequestHandler)))
              xhandle_expect_100.write
                [xself]
                  seq > @
                    seq
                      bogusForceDataize.write ((((xself).xsend_error)).apply (((xHTTPStatus).xEXPECTATION_FAILED)))
                      (((unsupported)).apply (FALSE))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xdatas)) ((((unsupported)).apply)))
                xwrite.write
                  [xself xdata]
                    seq > @
                      bogusForceDataize.write (((((xself).xdatas).xappend)).apply ((xdata)))
                xgetData.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("".xjoin)).apply (((xself).xdatas)))))
                xnumWrites.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xlen)).apply (((xself).xdatas)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xHTTPResponseMatch.write ((((xre).xcompile)).apply ("HTTP/1.[0-9]+ 200 OK"))
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xhandler)) ((((xSocketlessRequestHandler)).apply)))
                xsend_typical_request.write
                  [xself xmessage]
                    memory > xinput
                    memory > xoutput
                    seq > @
                      seq
                        xinput.write (((xBytesIO)).apply ((xmessage)))
                        xoutput.write (((xBytesIO)).apply)
                        (((unsupported)).apply ((((xself).xhandler).xrfile)) ((xinput)))
                        (((unsupported)).apply ((((xself).xhandler).xwfile)) ((xoutput)))
                        bogusForceDataize.write (((((xself).xhandler).xhandle_one_request)).apply)
                        bogusForceDataize.write ((((xoutput).xseek)).apply (0))
                        (((unsupported)).apply (((((xoutput).xreadlines)).apply)))
                xverify_get_called.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xhandler).xget_called)))
                xverify_expected_headers.write
                  [xself xheaders]
                    seq > @
                      (((unsupported)).apply ((xfieldName)) ((((unsupported)).apply ("Server: ") ("Date: ") ("Content-Type: "))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((((unsupported)).apply (((((xh).xstartswith)).apply ((xfieldName)))) ((xh)) ((xheaders)))))) (1))
                xverify_http_server_response.write
                  [xself xresponse]
                    memory > xmatch
                    seq > @
                      seq
                        xmatch.write (((((xself).xHTTPResponseMatch).xsearch)).apply ((xresponse)))
                        bogusForceDataize.write ((((xself).xassertIsNotNone)).apply ((xmatch)))
                xtest_http_1_1.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply ("GET / HTTP/1.1rnrn"))
                        bogusForceDataize.write ((((xself).xverify_http_server_response)).apply ((((unsupported)).apply ((xresult)) (0))))
                        bogusForceDataize.write ((((xself).xverify_expected_headers)).apply ((((unsupported)).apply ((xresult)) ((((unsupported)).apply (1) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xverify_get_called)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) ((1.neg)))) ("<html><body>Data</body></html>rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequestline)) ("GET / HTTP/1.1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xcommand)) ("GET"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xpath)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequest_version)) ("HTTP/1.1"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((((((xself).xhandler).xheaders).xitems)).apply)) ((((unsupported)).apply)))
                xtest_http_1_0.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply ("GET / HTTP/1.0rnrn"))
                        bogusForceDataize.write ((((xself).xverify_http_server_response)).apply ((((unsupported)).apply ((xresult)) (0))))
                        bogusForceDataize.write ((((xself).xverify_expected_headers)).apply ((((unsupported)).apply ((xresult)) ((((unsupported)).apply (1) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xverify_get_called)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) ((1.neg)))) ("<html><body>Data</body></html>rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequestline)) ("GET / HTTP/1.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xcommand)) ("GET"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xpath)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequest_version)) ("HTTP/1.0"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((((((xself).xhandler).xheaders).xitems)).apply)) ((((unsupported)).apply)))
                xtest_http_0_9.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply ("GET / HTTP/0.9rnrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xresult)))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (0))) ("<html><body>Data</body></html>rn"))
                        bogusForceDataize.write ((((xself).xverify_get_called)).apply)
                xtest_extra_space.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply ("GET /spaced out HTTP/1.1rnHost: dummyrnrn"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((unsupported)).apply ((xresult)) (0)).xstartswith)).apply ("HTTP/1.1 400 "))))
                        bogusForceDataize.write ((((xself).xverify_expected_headers)).apply ((((unsupported)).apply ((xresult)) ((((unsupported)).apply (1) (((((xresult).xindex)).apply ("rn"))))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xhandler).xget_called)))
                xtest_with_continue_1_0.write
                  [xself]
                    memory > xheaders
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply ("GET / HTTP/1.0rnExpect: 100-continuernrn"))
                        bogusForceDataize.write ((((xself).xverify_http_server_response)).apply ((((unsupported)).apply ((xresult)) (0))))
                        bogusForceDataize.write ((((xself).xverify_expected_headers)).apply ((((unsupported)).apply ((xresult)) ((((unsupported)).apply (1) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xverify_get_called)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) ((1.neg)))) ("<html><body>Data</body></html>rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequestline)) ("GET / HTTP/1.0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xcommand)) ("GET"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xpath)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequest_version)) ("HTTP/1.0"))
                        xheaders.write (((unsupported)).apply ((((unsupported)).apply ("Expect") ("100-continue"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((((((xself).xhandler).xheaders).xitems)).apply)) ((xheaders)))
                xtest_with_continue_1_1.write
                  [xself]
                    memory > xheaders
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply ("GET / HTTP/1.1rnExpect: 100-continuernrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (0))) ("HTTP/1.1 100 Continuern"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (1))) ("rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (2))) ("HTTP/1.1 200 OKrn"))
                        bogusForceDataize.write ((((xself).xverify_expected_headers)).apply ((((unsupported)).apply ((xresult)) ((((unsupported)).apply (2) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xverify_get_called)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) ((1.neg)))) ("<html><body>Data</body></html>rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequestline)) ("GET / HTTP/1.1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xcommand)) ("GET"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xpath)) ("/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequest_version)) ("HTTP/1.1"))
                        xheaders.write (((unsupported)).apply ((((unsupported)).apply ("Expect") ("100-continue"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((((((xself).xhandler).xheaders).xitems)).apply)) ((xheaders)))
                xtest_header_buffering_of_send_error.write
                  [xself]
                    memory > xinput
                    memory > xhandler
                    memory > xoutput
                    seq > @
                      seq
                        xinput.write (((xBytesIO)).apply ("GET / HTTP/1.1rnrn"))
                        xoutput.write (((xAuditableBytesIO)).apply)
                        xhandler.write (((xSocketlessRequestHandler)).apply)
                        (((unsupported)).apply (((xhandler).xrfile)) ((xinput)))
                        (((unsupported)).apply (((xhandler).xwfile)) ((xoutput)))
                        (((unsupported)).apply (((xhandler).xrequest_version)) ("HTTP/1.1"))
                        (((unsupported)).apply (((xhandler).xrequestline)) (""))
                        (((unsupported)).apply (((xhandler).xcommand)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xhandler).xsend_error)).apply (418))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoutput).xnumWrites)) (2))
                xtest_header_buffering_of_send_response_only.write
                  [xself]
                    memory > xinput
                    memory > xhandler
                    memory > xoutput
                    seq > @
                      seq
                        xinput.write (((xBytesIO)).apply ("GET / HTTP/1.1rnrn"))
                        xoutput.write (((xAuditableBytesIO)).apply)
                        xhandler.write (((xSocketlessRequestHandler)).apply)
                        (((unsupported)).apply (((xhandler).xrfile)) ((xinput)))
                        (((unsupported)).apply (((xhandler).xwfile)) ((xoutput)))
                        (((unsupported)).apply (((xhandler).xrequest_version)) ("HTTP/1.1"))
                        bogusForceDataize.write ((((xhandler).xsend_response_only)).apply (418))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoutput).xnumWrites)) (0))
                        bogusForceDataize.write ((((xhandler).xend_headers)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoutput).xnumWrites)) (1))
                xtest_header_buffering_of_send_header.write
                  [xself]
                    memory > xinput
                    memory > xhandler
                    memory > xoutput
                    seq > @
                      seq
                        xinput.write (((xBytesIO)).apply ("GET / HTTP/1.1rnrn"))
                        xoutput.write (((xAuditableBytesIO)).apply)
                        xhandler.write (((xSocketlessRequestHandler)).apply)
                        (((unsupported)).apply (((xhandler).xrfile)) ((xinput)))
                        (((unsupported)).apply (((xhandler).xwfile)) ((xoutput)))
                        (((unsupported)).apply (((xhandler).xrequest_version)) ("HTTP/1.1"))
                        bogusForceDataize.write ((((xhandler).xsend_header)).apply ("Foo") ("foo"))
                        bogusForceDataize.write ((((xhandler).xsend_header)).apply ("bar") ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoutput).xnumWrites)) (0))
                        bogusForceDataize.write ((((xhandler).xend_headers)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xoutput).xgetData)).apply)) ("Foo: foornbar: barrnrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xoutput).xnumWrites)) (1))
                xtest_header_unbuffered_when_continue.write
                  [xself]
                    memory > xinput
                    memory > xresult
                    memory > x_readAndReseek
                    memory > xoutput
                    seq > @
                      seq
                        x_readAndReseek.write
                          [xf]
                            memory > xpos
                            memory > xdata
                            seq > @
                              seq
                                xpos.write ((((xf).xtell)).apply)
                                bogusForceDataize.write ((((xf).xseek)).apply (0))
                                xdata.write ((((xf).xread)).apply)
                                bogusForceDataize.write ((((xf).xseek)).apply ((xpos)))
                                (((unsupported)).apply ((xdata)))
                        xinput.write (((xBytesIO)).apply ("GET / HTTP/1.1rnExpect: 100-continuernrn"))
                        xoutput.write (((xBytesIO)).apply)
                        (((unsupported)).apply ((((xself).xhandler).xrfile)) ((xinput)))
                        (((unsupported)).apply ((((xself).xhandler).xwfile)) ((xoutput)))
                        (((unsupported)).apply ((((xself).xhandler).xrequest_version)) ("HTTP/1.1"))
                        bogusForceDataize.write (((((xself).xhandler).xhandle_one_request)).apply)
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((x_readAndReseek)).apply ((xoutput)))) (""))
                        xresult.write ((((((x_readAndReseek)).apply ((xoutput))).xsplit)).apply ("rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (0))) ("HTTP/1.1 100 Continue"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (1))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (2))) ("HTTP/1.1 200 OK"))
                xtest_with_continue_rejected.write
                  [xself]
                    memory > xusual_handler
                    memory > xresult
                    seq > @
                      seq
                        xusual_handler.write ((xself).xhandler)
                        (((unsupported)).apply (((xself).xhandler)) ((((xRejectingSocketlessRequestHandler)).apply)))
                        xresult.write ((((xself).xsend_typical_request)).apply ("GET / HTTP/1.1rnExpect: 100-continuernrn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (0))) ("HTTP/1.1 417 Expectation Failedrn"))
                        bogusForceDataize.write ((((xself).xverify_expected_headers)).apply ((((unsupported)).apply ((xresult)) ((((unsupported)).apply (1) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xhandler).xget_called)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsum)).apply ((((unsupported)).apply (((xr).eq "Connection: closern")) ((xr)) ((((unsupported)).apply ((xresult)) ((((unsupported)).apply (1) ((1.neg)))))))))) (1))
                        (((unsupported)).apply (((xself).xhandler)) ((xusual_handler)))
                xtest_request_length.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply (("GET ".add ("x".mul 65537))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (0))) ("HTTP/1.1 414 Request-URI Too Longrn"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xhandler).xget_called)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xself).xhandler).xrequestline)) ((xstr)))
                xtest_header_length.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply ((("GET / HTTP/1.1rnX-Foo: bar".add ("r".mul 65537)).add "rnrn")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (0))) ("HTTP/1.1 431 Line too longrn"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xhandler).xget_called)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequestline)) ("GET / HTTP/1.1"))
                xtest_too_many_headers.write
                  [xself]
                    memory > xresult
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply ((("GET / HTTP/1.1rn".add ("X-Foo: barrn".mul 101)).add "rn")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xresult)) (0))) ("HTTP/1.1 431 Too many headersrn"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xself).xhandler).xget_called)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xhandler).xrequestline)) ("GET / HTTP/1.1"))
                xtest_html_escape_on_error.write
                  [xself]
                    memory > xresult
                    memory > xtext
                    seq > @
                      seq
                        xresult.write ((((xself).xsend_typical_request)).apply ("<script>alert(\"hello\")</script> / HTTP/1.1"))
                        xresult.write ((("".xjoin)).apply ((xresult)))
                        xtext.write "<script>alert(\"hello\")</script>"
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((((((unsupported)).apply (((xhtml).xescape)) ((xtext)) (FALSE)).xencode)).apply ("ascii"))) ((xresult)))
                xtest_close_connection.write
                  [xself]
                    memory > xhandle_one_request
                    memory > xclose_values
                    seq > @
                      seq
                        xhandle_one_request.write
                          []
                            seq > @
                              (((unsupported)).apply ((((xself).xhandler).xclose_connection)) ((((xnext)).apply ((xclose_values)))))
                        (((unsupported)).apply ((((xself).xhandler).xhandle_one_request)) ((xhandle_one_request)))
                        xclose_values.write (((xiter)).apply ((((unsupported)).apply (TRUE))))
                        bogusForceDataize.write (((((xself).xhandler).xhandle)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xclose_values)))
                        xclose_values.write (((xiter)).apply ((((unsupported)).apply (FALSE) (FALSE) (TRUE))))
                        bogusForceDataize.write (((((xself).xhandler).xhandle)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xclose_values)))
                xtest_date_time_string.write
                  [xself]
                    memory > xexpected
                    memory > xnow
                    seq > @
                      seq
                        xnow.write ((((xtime).xtime)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xyear)) ((xmonth)) ((xday)) ((xhh)) ((xmm)) ((xss)) ((xwd)) ((xy)) ((xz)))) (((((xtime).xgmtime)).apply ((xnow)))))
                        xexpected.write ("%s, %02d %3s %4d %02d:%02d:%02d GMT".mod (((unsupported)).apply ((((unsupported)).apply ((((xself).xhandler).xweekdayname)) ((xwd)))) ((xday)) ((((unsupported)).apply ((((xself).xhandler).xmonthname)) ((xmonth)))) ((xyear)) ((xhh)) ((xmm)) ((xss))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xhandler).xdate_time_string)) ((xnow)))) ((xexpected)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xtranslated)) (((((xos).xgetcwd)).apply)))
                        (((unsupported)).apply (((xself).xtranslated)) ((((((xos).xpath).xjoin)).apply (((xself).xtranslated)) ("filename"))))
                        (((unsupported)).apply (((xself).xhandler)) ((((xSocketlessRequestHandler)).apply)))
                xtest_query_arguments.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((((xself).xhandler).xtranslate_path)).apply ("/filename"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (((xself).xtranslated)))
                        xpath.write (((((xself).xhandler).xtranslate_path)).apply ("/filename?foo=bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (((xself).xtranslated)))
                        xpath.write (((((xself).xhandler).xtranslate_path)).apply ("/filename?a=b&spam=eggs#zot"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (((xself).xtranslated)))
                xtest_start_with_double_slash.write
                  [xself]
                    memory > xpath
                    seq > @
                      seq
                        xpath.write (((((xself).xhandler).xtranslate_path)).apply ("//filename"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (((xself).xtranslated)))
                        xpath.write (((((xself).xhandler).xtranslate_path)).apply ("//filename?foo=bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (((xself).xtranslated)))
                xtest_windows_colon.write
                  [xself]
                    memory > xpath
                    seq > @
                      (((unsupported)).apply (((((xsupport).xswap_attr)).apply (((xserver).xos)) ("path") ((xntpath)))))
                        seq
                          xpath.write (((((xself).xhandler).xtranslate_path)).apply ("c:c:c:foo/filename"))
                          xpath.write ((((xpath).xreplace)).apply (((xntpath).xsep)) (((xos).xsep)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (((xself).xtranslated)))
                          xpath.write (((((xself).xhandler).xtranslate_path)).apply ((((unsupported)).apply)))
                          xpath.write ((((xpath).xreplace)).apply (((xntpath).xsep)) (((xos).xsep)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (((xself).xtranslated)))
                          xpath.write (((((xself).xhandler).xtranslate_path)).apply ((((unsupported)).apply)))
                          xpath.write ((((xpath).xreplace)).apply (((xntpath).xsep)) (((xos).xsep)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (((xself).xtranslated)))
                          xpath.write (((((xself).xhandler).xtranslate_path)).apply ((((unsupported)).apply)))
                          xpath.write ((((xpath).xreplace)).apply (((xntpath).xsep)) (((xos).xsep)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (((xself).xtranslated)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_all.write
                [xself]
                  memory > xexpected
                  memory > xmodule_object
                  memory > xblacklist
                  seq > @
                    seq
                      xexpected.write (((unsupported)).apply)
                      xblacklist.write (((unsupported)).apply ("executable") ("nobody_uid") ("test"))
                      (((unsupported)).apply ((xname)) ((((xdir)).apply ((xserver)))))
                        seq
                          (((((xname).xstartswith)).apply ("_")).or (((unsupported)).apply ((xname)) ((xblacklist)))).if
                            (((unsupported)).apply)
                          xmodule_object.write (((xgetattr)).apply ((xserver)) ((xname)))
                          ((((xgetattr)).apply ((xmodule_object)) ("__module__") ("None: is there a None literal in the EO language?")).eq "http.server").if
                            bogusForceDataize.write ((((xexpected).xappend)).apply ((xname)))
                      bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((xserver).x__all__)) ((xexpected)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xmock_server_class.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xmock).xMagicMock)) ((((unsupported)).apply (((xmock).xMagicMock)) ((((unsupported)).apply (((xmock).xMagicMock)) ((((unsupported)).apply (((xmock).xMagicMock)) ((((unsupported)).apply (((xmock).xMagicMock)) ((((unsupported)).apply ((((unsupported)).apply ("") (0))))))))))))))))
                xtest_server_test_unspec.write
                  [xself x_]
                    memory > xmock_server
                    seq > @
                      (((unsupported)).apply)
                        xmock_server.write ((((xself).xmock_server_class)).apply)
                        (((unsupported)).apply (((xserver).xtest)) ((xmock_server)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xmock_server).xaddress_family)) ((((unsupported)).apply (((xsocket).xAF_INET6)) (((xsocket).xAF_INET)))))
                xtest_server_test_localhost.write
                  [xself x_]
                    memory > xmock_server
                    seq > @
                      (((unsupported)).apply)
                        xmock_server.write ((((xself).xmock_server_class)).apply)
                        (((unsupported)).apply (((xserver).xtest)) ((xmock_server)) ("localhost"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xmock_server).xaddress_family)) ((((unsupported)).apply (((xsocket).xAF_INET6)) (((xsocket).xAF_INET)))))
                xipv6_addrs.write (((unsupported)).apply ("::") ("2001:0db8:85a3:0000:0000:8a2e:0370:7334") ("::1"))
                xipv4_addrs.write (((unsupported)).apply ("0.0.0.0") ("8.8.8.8") ("127.0.0.1"))
                xtest_server_test_ipv6.write
                  [xself x_]
                    memory > xmock_server
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xbind)) (((xself).xipv6_addrs)))
                          seq
                            xmock_server.write ((((xself).xmock_server_class)).apply)
                            (((unsupported)).apply (((xserver).xtest)) ((xmock_server)) ((xbind)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmock_server).xaddress_family)) (((xsocket).xAF_INET6)))
                xtest_server_test_ipv4.write
                  [xself x_]
                    memory > xmock_server
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xbind)) (((xself).xipv4_addrs)))
                          seq
                            xmock_server.write ((((xself).xmock_server_class)).apply)
                            (((unsupported)).apply (((xserver).xtest)) ((xmock_server)) ((xbind)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmock_server).xaddress_family)) (((xsocket).xAF_INET)))
            xtest_main.write
              [xverbose]
                memory > xcwd
                seq > @
                  (((unsupported)).apply)
                    xcwd.write ((((xos).xgetcwd)).apply)
                    (((unsupported)).apply)
                      bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((xRequestHandlerLoggingTestCase)) ((xBaseHTTPRequestHandlerTestCase)) ((xBaseHTTPServerTestCase)) ((xSimpleHTTPServerTestCase)) ((xCGIHTTPServerTestCase)) ((xSimpleHTTPRequestHandlerTestCase)) ((xMiscTestCase)) ((xScriptTestCase)))
                      bogusForceDataize.write ((((xos).xchdir)).apply ((xcwd)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)