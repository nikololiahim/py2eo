memory > xValueError
memory > xrange
memory > xcalendar
memory > xjava
memory > xprint
memory > xtime
memory > xi
memory > xs2
memory > xLC_TIME
memory > xunittest
memory > xj
memory > x__name__
memory > xImportError
memory > xAttributeError
memory > xstr
memory > xerror
memory > xint
memory > xre
memory > xsupport
memory > xsys
memory > xsetlocale
memory > xe
[] > test_strftime
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_strftime
        memory > xtest_y_after_1900
        memory > xsetUp
        memory > xtest_y_before_1900
        memory > xtest_y_1900
        memory > xstrftest1
        memory > x_update_variables
        memory > xescapestr
        memory > xfixasctime
        memory > xstrftest2
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xfixasctime.write
              [xs]
                seq > @
                  seq
                    ((((unsupported)).apply ((xs)) (8)).eq " ").if
                      xs.write (((((unsupported)).apply ((xs)) ((((unsupported)).apply (8)))).add "0").add (((unsupported)).apply ((xs)) ((((unsupported)).apply (9)))))
                    (((unsupported)).apply ((xs2)))
            xescapestr.write
              [xtext xampm]
                memory > xnew_text
                seq > @
                  seq
                    (((unsupported)).apply)
                    xnew_text.write ((((xre).xescape)).apply ((xtext)))
                    xnew_text.write ((((xnew_text).xreplace)).apply (((((xre).xescape)).apply ((xampm)))) ((xampm)))
                    xnew_text.write ((((xnew_text).xreplace)).apply ("%") ("%"))
                    xnew_text.write ((((xnew_text).xreplace)).apply (":") (":"))
                    xnew_text.write ((((xnew_text).xreplace)).apply ("?") ("?"))
                    (((unsupported)).apply ((xnew_text)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                x_update_variables.write
                  [xself xnow]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xgmt)) (((((xtime).xgmtime)).apply ((xnow)))))
                        xnow.write ((((xtime).xlocaltime)).apply ((xnow)))
                        ((((unsupported)).apply ((xnow)) (3)).less 12).if
                          (((unsupported)).apply (((xself).xampm)) ("(AM|am)"))
                          (((unsupported)).apply (((xself).xampm)) ("(PM|pm)"))
                        (((unsupported)).apply (((xself).xjan1)) (((((xtime).xlocaltime)).apply (((((xtime).xmktime)).apply ((((unsupported)).apply ((((unsupported)).apply ((xnow)) (0))) (1) (1) (0) (0) (0) (0) (1) (0))))))))
                        (((unsupported)).apply ((xAttributeError)))
                          (((unsupported)).apply ((xnow)) (8)).if
                            (((unsupported)).apply (((xself).xtz)) ((((unsupported)).apply (((xtime).xtzname)) (1))))
                            (((unsupported)).apply (((xself).xtz)) ((((unsupported)).apply (((xtime).xtzname)) (0))))
                          (((unsupported)).apply (((xself).xtz)) (""))
                        ((((unsupported)).apply ((xnow)) (3)).greater 12).if
                          (((unsupported)).apply (((xself).xclock12)) (((((unsupported)).apply ((xnow)) (3)).sub 12)))
                          ((((unsupported)).apply ((xnow)) (3)).greater 0).if
                            (((unsupported)).apply (((xself).xclock12)) ((((unsupported)).apply ((xnow)) (3))))
                            (((unsupported)).apply (((xself).xclock12)) (12))
                        (((unsupported)).apply (((xself).xnow)) ((xnow)))
                xsetUp.write
                  [xself]
                    memory > xsaved_locale
                    seq > @
                      (((unsupported)).apply ((xImportError)))
                        seq
                          (((unsupported)).apply)
                          bogusForceDataize.write ((((((xjava).xutil).xLocale).xsetDefault)).apply (((((xjava).xutil).xLocale).xUS)))
                        seq
                          (((unsupported)).apply)
                          (((unsupported)).apply)
                          xsaved_locale.write (((xsetlocale)).apply ((xLC_TIME)))
                          bogusForceDataize.write (((xsetlocale)).apply ((xLC_TIME)) ("C"))
                          bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xsetlocale)) ((xLC_TIME)) ((xsaved_locale)))
                xtest_strftime.write
                  [xself]
                    memory > xarg
                    memory > xnow
                    seq > @
                      seq
                        xnow.write ((((xtime).xtime)).apply)
                        bogusForceDataize.write ((((xself).x_update_variables)).apply ((xnow)))
                        bogusForceDataize.write ((((xself).xstrftest1)).apply ((xnow)))
                        bogusForceDataize.write ((((xself).xstrftest2)).apply ((xnow)))
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((xprint)).apply (("Strftime test, platform: %s, Python version: %s".mod (((unsupported)).apply (((xsys).xplatform)) ((((unsupported)).apply ((((((xsys).xversion).xsplit)).apply)) (0)))))))
                        (((unsupported)).apply ((xj)) ((((xrange)).apply ((5.neg)) (5))))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply (25))))
                            seq
                              xarg.write ((xnow).add ((((xi).add ((xj).mul 100)).mul 23).mul 3603))
                              bogusForceDataize.write ((((xself).x_update_variables)).apply ((xarg)))
                              bogusForceDataize.write ((((xself).xstrftest1)).apply ((xarg)))
                              bogusForceDataize.write ((((xself).xstrftest2)).apply ((xarg)))
                xstrftest1.write
                  [xself xnow]
                    memory > xexpectations
                    memory > xresult
                    seq > @
                      seq
                        ((xsupport).xverbose).if
                          bogusForceDataize.write (((xprint)).apply ("strftime test for") (((((xtime).xctime)).apply ((xnow)))))
                        xnow.write ((xself).xnow)
                        xexpectations.write (((unsupported)).apply ((((unsupported)).apply ("%a") ((((unsupported)).apply (((xcalendar).xday_abbr)) ((((unsupported)).apply ((xnow)) (6))))) ("abbreviated weekday name"))) ((((unsupported)).apply ("%A") ((((unsupported)).apply (((xcalendar).xday_name)) ((((unsupported)).apply ((xnow)) (6))))) ("full weekday name"))) ((((unsupported)).apply ("%b") ((((unsupported)).apply (((xcalendar).xmonth_abbr)) ((((unsupported)).apply ((xnow)) (1))))) ("abbreviated month name"))) ((((unsupported)).apply ("%B") ((((unsupported)).apply (((xcalendar).xmonth_name)) ((((unsupported)).apply ((xnow)) (1))))) ("full month name"))) ((((unsupported)).apply ("%d") (("%02d".mod (((unsupported)).apply ((xnow)) (2)))) ("day of month as number (00-31)"))) ((((unsupported)).apply ("%H") (("%02d".mod (((unsupported)).apply ((xnow)) (3)))) ("hour (00-23)"))) ((((unsupported)).apply ("%I") (("%02d".mod ((xself).xclock12))) ("hour (01-12)"))) ((((unsupported)).apply ("%j") (("%03d".mod (((unsupported)).apply ((xnow)) (7)))) ("julian day (001-366)"))) ((((unsupported)).apply ("%m") (("%02d".mod (((unsupported)).apply ((xnow)) (1)))) ("month as number (01-12)"))) ((((unsupported)).apply ("%M") (("%02d".mod (((unsupported)).apply ((xnow)) (4)))) ("minute, (00-59)"))) ((((unsupported)).apply ("%p") (((xself).xampm)) ("AM or PM as appropriate"))) ((((unsupported)).apply ("%S") (("%02d".mod (((unsupported)).apply ((xnow)) (5)))) ("seconds of current time (00-60)"))) ((((unsupported)).apply ("%U") (("%02d".mod (((unsupported)).apply (((((unsupported)).apply ((xnow)) (7)).add (((unsupported)).apply (((xself).xjan1)) (6)))) (7)))) ("week number of the year (Sun 1st)"))) ((((unsupported)).apply ("%w") (("0?%d".mod ((1.add (((unsupported)).apply ((xnow)) (6))).mod 7))) ("weekday as a number (Sun 1st)"))) ((((unsupported)).apply ("%W") (("%02d".mod (((unsupported)).apply (((((unsupported)).apply ((xnow)) (7)).add (((((unsupported)).apply (((xself).xjan1)) (6)).sub 1).mod 7))) (7)))) ("week number of the year (Mon 1st)"))) ((((unsupported)).apply ("%X") (("%02d:%02d:%02d".mod (((unsupported)).apply ((((unsupported)).apply ((xnow)) (3))) ((((unsupported)).apply ((xnow)) (4))) ((((unsupported)).apply ((xnow)) (5)))))) ("%H:%M:%S"))) ((((unsupported)).apply ("%y") (("%02d".mod ((((unsupported)).apply ((xnow)) (0)).mod 100))) ("year without century"))) ((((unsupported)).apply ("%Y") (("%d".mod (((unsupported)).apply ((xnow)) (0)))) ("year with century"))) ((((unsupported)).apply ("%%") ("%") ("single percent sign"))))
                        (((unsupported)).apply ((xe)) ((xexpectations)))
                          seq
                            (((unsupported)).apply ((xValueError)))
                              xresult.write ((((xtime).xstrftime)).apply ((((unsupported)).apply ((xe)) (0))) ((xnow)))
                              bogusForceDataize.write ((((xself).xfail)).apply (("strftime '%s' format gave error: %s".mod (((unsupported)).apply ((((unsupported)).apply ((xe)) (0))) ((xerror))))))
                            ((((xre).xmatch)).apply ((((xescapestr)).apply ((((unsupported)).apply ((xe)) (1))) (((xself).xampm)))) ((xresult))).if
                              (((unsupported)).apply)
                            (((xresult).not).or ((((unsupported)).apply ((xresult)) (0)).eq "%")).if
                              bogusForceDataize.write ((((xself).xfail)).apply (("strftime does not support standard '%s' format (%s)".mod (((unsupported)).apply ((((unsupported)).apply ((xe)) (0))) ((((unsupported)).apply ((xe)) (2)))))))
                              bogusForceDataize.write ((((xself).xfail)).apply (("Conflict for %s (%s): expected %s, but got %s".mod (((unsupported)).apply ((((unsupported)).apply ((xe)) (0))) ((((unsupported)).apply ((xe)) (2))) ((((unsupported)).apply ((xe)) (1))) ((xresult))))))
                xstrftest2.write
                  [xself xnow]
                    memory > xnowsecs
                    memory > xnonstandard_expectations
                    memory > xresult
                    memory > xmsg
                    seq > @
                      seq
                        xnowsecs.write (((unsupported)).apply ((((xstr)).apply ((((xint)).apply ((xnow)))))) ((((unsupported)).apply ((1.neg)))))
                        xnow.write ((xself).xnow)
                        xnonstandard_expectations.write (((unsupported)).apply ((((unsupported)).apply ("%c") ((((xfixasctime)).apply (((((xtime).xasctime)).apply ((xnow)))))) ("near-asctime() format"))) ((((unsupported)).apply ("%x") (("%02d/%02d/%02d".mod (((unsupported)).apply ((((unsupported)).apply ((xnow)) (1))) ((((unsupported)).apply ((xnow)) (2))) (((((unsupported)).apply ((xnow)) (0)).mod 100))))) ("%m/%d/%y %H:%M:%S"))) ((((unsupported)).apply ("%Z") (("%s".mod ((xself).xtz))) ("time zone name"))) ((((unsupported)).apply ("%D") (("%02d/%02d/%02d".mod (((unsupported)).apply ((((unsupported)).apply ((xnow)) (1))) ((((unsupported)).apply ((xnow)) (2))) (((((unsupported)).apply ((xnow)) (0)).mod 100))))) ("mm/dd/yy"))) ((((unsupported)).apply ("%e") (("%2d".mod (((unsupported)).apply ((xnow)) (2)))) ("day of month as number, blank padded ( 0-31)"))) ((((unsupported)).apply ("%h") ((((unsupported)).apply (((xcalendar).xmonth_abbr)) ((((unsupported)).apply ((xnow)) (1))))) ("abbreviated month name"))) ((((unsupported)).apply ("%k") (("%2d".mod (((unsupported)).apply ((xnow)) (3)))) ("hour, blank padded ( 0-23)"))) ((((unsupported)).apply ("%n") ("n") ("newline character"))) ((((unsupported)).apply ("%r") (("%02d:%02d:%02d %s".mod (((unsupported)).apply (((xself).xclock12)) ((((unsupported)).apply ((xnow)) (4))) ((((unsupported)).apply ((xnow)) (5))) (((xself).xampm))))) ("%I:%M:%S %p"))) ((((unsupported)).apply ("%R") (("%02d:%02d".mod (((unsupported)).apply ((((unsupported)).apply ((xnow)) (3))) ((((unsupported)).apply ((xnow)) (4)))))) ("%H:%M"))) ((((unsupported)).apply ("%s") ((xnowsecs)) ("seconds since the Epoch in UCT"))) ((((unsupported)).apply ("%t") ("t") ("tab character"))) ((((unsupported)).apply ("%T") (("%02d:%02d:%02d".mod (((unsupported)).apply ((((unsupported)).apply ((xnow)) (3))) ((((unsupported)).apply ((xnow)) (4))) ((((unsupported)).apply ((xnow)) (5)))))) ("%H:%M:%S"))) ((((unsupported)).apply ("%3y") (("%03d".mod ((((unsupported)).apply ((xnow)) (0)).mod 100))) ("year without century rendered using fieldwidth"))))
                        (((unsupported)).apply ((xe)) ((xnonstandard_expectations)))
                          seq
                            (((unsupported)).apply ((xValueError)))
                              xresult.write ((((xtime).xstrftime)).apply ((((unsupported)).apply ((xe)) (0))) ((xnow)))
                              seq
                                xmsg.write ("Error for nonstandard '%s' format (%s): %s".mod (((unsupported)).apply ((((unsupported)).apply ((xe)) (0))) ((((unsupported)).apply ((xe)) (2))) ((((xstr)).apply ((xresult))))))
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((xprint)).apply ((xmsg)))
                                (((unsupported)).apply)
                            ((((xre).xmatch)).apply ((((xescapestr)).apply ((((unsupported)).apply ((xe)) (1))) (((xself).xampm)))) ((xresult))).if
                              ((xsupport).xverbose).if
                                bogusForceDataize.write (((xprint)).apply (("Supports nonstandard '%s' format (%s)".mod (((unsupported)).apply ((((unsupported)).apply ((xe)) (0))) ((((unsupported)).apply ((xe)) (2)))))))
                              (((xresult).not).or ((((unsupported)).apply ((xresult)) (0)).eq "%")).if
                                ((xsupport).xverbose).if
                                  bogusForceDataize.write (((xprint)).apply (("Does not appear to support '%s' format (%s)".mod (((unsupported)).apply ((((unsupported)).apply ((xe)) (0))) ((((unsupported)).apply ((xe)) (2)))))))
                                ((xsupport).xverbose).if
                                  seq
                                    bogusForceDataize.write (((xprint)).apply (("Conflict for nonstandard '%s' format (%s):".mod (((unsupported)).apply ((((unsupported)).apply ((xe)) (0))) ((((unsupported)).apply ((xe)) (2)))))))
                                    bogusForceDataize.write (((xprint)).apply (("  Expected %s, but got %s".mod (((unsupported)).apply ((((unsupported)).apply ((xe)) (1))) ((xresult))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xtest_y_before_1900.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write (((unsupported)).apply (1899) (1) (1) (0) (0) (0) (0) (0) (0))
                        ((((xsys).xplatform).eq "win32").or (((((xsys).xplatform).xstartswith)).apply ((((unsupported)).apply ("aix") ("sunos") ("solaris"))))).if
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                            bogusForceDataize.write ((((xtime).xstrftime)).apply ("%y") ((xt)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xstrftime)).apply ("%y") ((xt)))) ("99"))
                xtest_y_1900.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xstrftime)).apply ("%y") ((((unsupported)).apply (1900) (1) (1) (0) (0) (0) (0) (0) (0))))) ("00"))
                xtest_y_after_1900.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtime).xstrftime)).apply ("%y") ((((unsupported)).apply (2013) (1) (1) (0) (0) (0) (0) (0) (0))))) ("13"))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)