memory > xhours
memory > xceil
memory > xVarPop
memory > xsha512
memory > xacos
memory > xtypecast_time
memory > xstatistics
memory > xtimedelta
memory > xfloor
memory > xsin
memory > xatan2
memory > xTypeError
memory > xStdDevPop
memory > xtimezone
memory > xtimezone_constructor
memory > xsha384
memory > xlist
memory > xpi
memory > xsqrt
memory > xValueError
memory > xsplit_tzname_delta
memory > xmd5
memory > xsign
memory > xatan
memory > xstr
memory > xrandom
memory > xasin
memory > xStdDevSamp
memory > xdegrees
memory > xint
memory > xsha256
memory > xbool
memory > xexp
memory > xlog
memory > xsha1
memory > xtypecast_timestamp
memory > xradians
memory > xgetattr
memory > xcos
memory > xListAggregate
memory > xsql
memory > xsha224
memory > xtan
memory > xminutes
memory > xoffset
memory > xVarSamp
memory > xduration_microseconds
memory > xisinstance
memory > xfunctools
memory > xlen
memory > xfmod
[] > _functions
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_sqlite_acos
        memory > xstep
        memory > x_sqlite_power
        memory > x_sqlite_exp
        memory > x_sqlite_datetime_trunc
        memory > x_sqlite_timestamp_diff
        memory > x_sqlite_sha224
        memory > x_sqlite_cos
        memory > x_sqlite_sha512
        memory > x_sqlite_sin
        memory > x_sqlite_sha256
        memory > x_sqlite_bitxor
        memory > x_sqlite_ln
        memory > x_sqlite_sign
        memory > x_sqlite_degrees
        memory > x_sqlite_prepare_dtdelta_param
        memory > x_sqlite_pi
        memory > x_sqlite_datetime_cast_date
        memory > x_sqlite_atan
        memory > x_sqlite_rpad
        memory > x_sqlite_log
        memory > x_sqlite_atan2
        memory > x_sqlite_sha384
        memory > x_sqlite_reverse
        memory > x_sqlite_date_trunc
        memory > x_sqlite_time_extract
        memory > xfinalize
        memory > x_sqlite_time_diff
        memory > x_sqlite_tan
        memory > x_sqlite_regexp
        memory > x_sqlite_asin
        memory > x_sqlite_lpad
        memory > xregister
        memory > x_sqlite_datetime_extract
        memory > x_sqlite_repeat
        memory > x_sqlite_sha1
        memory > x_sqlite_sqrt
        memory > x_sqlite_datetime_cast_time
        memory > x_sqlite_floor
        memory > x_sqlite_time_trunc
        memory > x_sqlite_mod
        memory > x_sqlite_md5
        memory > x_sqlite_radians
        memory > x_sqlite_cot
        memory > x_sqlite_format_dtdelta
        memory > x_sqlite_ceiling
        memory > xre_search
        memory > x_sqlite_datetime_parse
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xregister.write
              [xconnection]
                memory > xsql2
                memory > xcreate_deterministic_function
                seq > @
                  seq
                    xcreate_deterministic_function.write (((unsupported)).apply (((xfunctools).xpartial)) (((xconnection).xcreate_function)) (TRUE))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_date_extract") (2) ((x_sqlite_datetime_extract)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_date_trunc") (4) ((x_sqlite_date_trunc)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_datetime_cast_date") (3) ((x_sqlite_datetime_cast_date)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_datetime_cast_time") (3) ((x_sqlite_datetime_cast_time)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_datetime_extract") (4) ((x_sqlite_datetime_extract)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_datetime_trunc") (4) ((x_sqlite_datetime_trunc)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_time_extract") (2) ((x_sqlite_time_extract)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_time_trunc") (4) ((x_sqlite_time_trunc)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_time_diff") (2) ((x_sqlite_time_diff)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_timestamp_diff") (2) ((x_sqlite_timestamp_diff)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("django_format_dtdelta") (3) ((x_sqlite_format_dtdelta)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("regexp") (2) ((x_sqlite_regexp)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("BITXOR") (2) ((x_sqlite_bitxor)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("COT") (1) ((x_sqlite_cot)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("LPAD") (3) ((x_sqlite_lpad)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("MD5") (1) ((x_sqlite_md5)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("REPEAT") (2) ((x_sqlite_repeat)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("REVERSE") (1) ((x_sqlite_reverse)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("RPAD") (3) ((x_sqlite_rpad)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("SHA1") (1) ((x_sqlite_sha1)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("SHA224") (1) ((x_sqlite_sha224)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("SHA256") (1) ((x_sqlite_sha256)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("SHA384") (1) ((x_sqlite_sha384)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("SHA512") (1) ((x_sqlite_sha512)))
                    bogusForceDataize.write (((xcreate_deterministic_function)).apply ("SIGN") (1) ((x_sqlite_sign)))
                    bogusForceDataize.write ((((xconnection).xcreate_function)).apply ("RAND") (0) (((xrandom).xrandom)))
                    bogusForceDataize.write ((((xconnection).xcreate_aggregate)).apply ("STDDEV_POP") (1) ((xStdDevPop)))
                    bogusForceDataize.write ((((xconnection).xcreate_aggregate)).apply ("STDDEV_SAMP") (1) ((xStdDevSamp)))
                    bogusForceDataize.write ((((xconnection).xcreate_aggregate)).apply ("VAR_POP") (1) ((xVarPop)))
                    bogusForceDataize.write ((((xconnection).xcreate_aggregate)).apply ("VAR_SAMP") (1) ((xVarSamp)))
                    xsql2.write "select sqlite_compileoption_used('ENABLE_MATH_FUNCTIONS')"
                    ((((unsupported)).apply ((((((((xconnection).xexecute)).apply ((xsql))).xfetchone)).apply)) (0)).not).if
                      seq
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("ACOS") (1) ((x_sqlite_acos)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("ASIN") (1) ((x_sqlite_asin)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("ATAN") (1) ((x_sqlite_atan)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("ATAN2") (2) ((x_sqlite_atan2)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("CEILING") (1) ((x_sqlite_ceiling)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("COS") (1) ((x_sqlite_cos)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("DEGREES") (1) ((x_sqlite_degrees)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("EXP") (1) ((x_sqlite_exp)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("FLOOR") (1) ((x_sqlite_floor)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("LN") (1) ((x_sqlite_ln)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("LOG") (2) ((x_sqlite_log)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("MOD") (2) ((x_sqlite_mod)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("PI") (0) ((x_sqlite_pi)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("POWER") (2) ((x_sqlite_power)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("RADIANS") (1) ((x_sqlite_radians)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("SIN") (1) ((x_sqlite_sin)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("SQRT") (1) ((x_sqlite_sqrt)))
                        bogusForceDataize.write (((xcreate_deterministic_function)).apply ("TAN") (1) ((x_sqlite_tan)))
            x_sqlite_datetime_parse.write
              [xdt xtzname xconn_tzname]
                memory > xoffset_delta
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((xdt)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((unsupported)).apply ((xTypeError)) ((xValueError)))))
                      xdt.write (((xtypecast_timestamp)).apply ((xdt)))
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (xconn_tzname).if
                      xdt.write (((unsupported)).apply (((xdt).xreplace)) ((((xtimezone_constructor)).apply ((xconn_tzname)))))
                    ((((unsupported)).apply ((xtzname)) ("None: is there a None literal in the EO language?")).and ((xtzname).neq (xconn_tzname))).if
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xtzname)) ((xsign)) ((xoffset)))) ((((xsplit_tzname_delta)).apply ((xtzname)))))
                        (xoffset).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xhours)) ((xminutes)))) (((((xoffset).xsplit)).apply (":"))))
                            xoffset_delta.write (((unsupported)).apply ((xtimedelta)) ((((xint)).apply ((xhours)))) ((((xint)).apply ((xminutes)))))
                            (((unsupported)).apply ((xdt)) ((((xsign).eq "+").if (xoffset_delta) ((xoffset_delta).neg))))
                        xdt.write ((((xtimezone).xlocaltime)).apply ((xdt)) ((((xtimezone_constructor)).apply ((xtzname)))))
                    (((unsupported)).apply ((xdt)))
            x_sqlite_date_trunc.write
              [xlookup_type xdt xtzname xconn_tzname]
                memory > xmonth_in_quarter
                seq > @
                  seq
                    xdt.write (((x_sqlite_datetime_parse)).apply ((xdt)) ((xtzname)) ((xconn_tzname)))
                    (((unsupported)).apply ((xdt)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    ((xlookup_type).eq "year").if
                      (((unsupported)).apply ("{dt.year:04d}-01-01"))
                      ((xlookup_type).eq "quarter").if
                        seq
                          xmonth_in_quarter.write (((xdt).xmonth).sub ((((xdt).xmonth).sub 1).mod 3))
                          (((unsupported)).apply ("{dt.year:04d}-{month_in_quarter:02d}-01"))
                        ((xlookup_type).eq "month").if
                          (((unsupported)).apply ("{dt.year:04d}-{dt.month:02d}-01"))
                          ((xlookup_type).eq "week").if
                            seq
                              xdt.write ((xdt).sub (((unsupported)).apply ((xtimedelta)) (((((xdt).xweekday)).apply))))
                              (((unsupported)).apply ("{dt.year:04d}-{dt.month:02d}-{dt.day:02d}"))
                            ((xlookup_type).eq "day").if
                              (((unsupported)).apply ("{dt.year:04d}-{dt.month:02d}-{dt.day:02d}"))
                    (((unsupported)).apply ((((xValueError)).apply ("Unsupported lookup type: {lookup_type!r}"))))
            x_sqlite_time_trunc.write
              [xlookup_type xdt xtzname xconn_tzname]
                memory > xdt_parsed
                seq > @
                  seq
                    (((unsupported)).apply ((xdt)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    xdt_parsed.write (((x_sqlite_datetime_parse)).apply ((xdt)) ((xtzname)) ((xconn_tzname)))
                    (((unsupported)).apply ((xdt_parsed)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                        xdt.write (((xtypecast_time)).apply ((xdt)))
                        (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                      xdt.write (xdt_parsed)
                    ((xlookup_type).eq "hour").if
                      (((unsupported)).apply ("{dt.hour:02d}:00:00"))
                      ((xlookup_type).eq "minute").if
                        (((unsupported)).apply ("{dt.hour:02d}:{dt.minute:02d}:00"))
                        ((xlookup_type).eq "second").if
                          (((unsupported)).apply ("{dt.hour:02d}:{dt.minute:02d}:{dt.second:02d}"))
                    (((unsupported)).apply ((((xValueError)).apply ("Unsupported lookup type: {lookup_type!r}"))))
            x_sqlite_datetime_cast_date.write
              [xdt xtzname xconn_tzname]
                seq > @
                  seq
                    xdt.write (((x_sqlite_datetime_parse)).apply ((xdt)) ((xtzname)) ((xconn_tzname)))
                    (((unsupported)).apply ((xdt)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((((((xdt).xdate)).apply).xisoformat)).apply)))
            x_sqlite_datetime_cast_time.write
              [xdt xtzname xconn_tzname]
                seq > @
                  seq
                    xdt.write (((x_sqlite_datetime_parse)).apply ((xdt)) ((xtzname)) ((xconn_tzname)))
                    (((unsupported)).apply ((xdt)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((((((xdt).xtime)).apply).xisoformat)).apply)))
            x_sqlite_datetime_extract.write
              [xlookup_type xdt xtzname xconn_tzname]
                seq > @
                  (((unsupported)).apply)
                    xdt.write (((x_sqlite_datetime_parse)).apply ((xdt)) ((xtzname)) ((xconn_tzname)))
                    (((unsupported)).apply ((xdt)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    ((xlookup_type).eq "week_day").if
                      (((unsupported)).apply (((((((xdt).xisoweekday)).apply).mod 7).add 1)))
                      ((xlookup_type).eq "iso_week_day").if
                        (((unsupported)).apply (((((xdt).xisoweekday)).apply)))
                        ((xlookup_type).eq "week").if
                          (((unsupported)).apply ((((unsupported)).apply (((((xdt).xisocalendar)).apply)) (1))))
                          ((xlookup_type).eq "quarter").if
                            (((unsupported)).apply ((((xceil)).apply ((((xdt).xmonth).div 3)))))
                            ((xlookup_type).eq "iso_year").if
                              (((unsupported)).apply ((((unsupported)).apply (((((xdt).xisocalendar)).apply)) (0))))
                              (((unsupported)).apply ((((xgetattr)).apply ((xdt)) ((xlookup_type)))))
            x_sqlite_datetime_trunc.write
              [xlookup_type xdt xtzname xconn_tzname]
                memory > xmonth_in_quarter
                seq > @
                  seq
                    xdt.write (((x_sqlite_datetime_parse)).apply ((xdt)) ((xtzname)) ((xconn_tzname)))
                    (((unsupported)).apply ((xdt)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    ((xlookup_type).eq "year").if
                      (((unsupported)).apply ("{dt.year:04d}-01-01 00:00:00"))
                      ((xlookup_type).eq "quarter").if
                        seq
                          xmonth_in_quarter.write (((xdt).xmonth).sub ((((xdt).xmonth).sub 1).mod 3))
                          (((unsupported)).apply ("{dt.year:04d}-{month_in_quarter:02d}-01 00:00:00"))
                        ((xlookup_type).eq "month").if
                          (((unsupported)).apply ("{dt.year:04d}-{dt.month:02d}-01 00:00:00"))
                          ((xlookup_type).eq "week").if
                            seq
                              xdt.write ((xdt).sub (((unsupported)).apply ((xtimedelta)) (((((xdt).xweekday)).apply))))
                              (((unsupported)).apply ("{dt.year:04d}-{dt.month:02d}-{dt.day:02d} 00:00:00"))
                            ((xlookup_type).eq "day").if
                              (((unsupported)).apply ("{dt.year:04d}-{dt.month:02d}-{dt.day:02d} 00:00:00"))
                              ((xlookup_type).eq "hour").if
                                (((unsupported)).apply ("{dt.year:04d}-{dt.month:02d}-{dt.day:02d} {dt.hour:02d}:00:00"))
                                ((xlookup_type).eq "minute").if
                                  (((unsupported)).apply ("{dt.year:04d}-{dt.month:02d}-{dt.day:02d} {dt.hour:02d}:{dt.minute:02d}:00"))
                                  ((xlookup_type).eq "second").if
                                    (((unsupported)).apply ("{dt.year:04d}-{dt.month:02d}-{dt.day:02d} {dt.hour:02d}:{dt.minute:02d}:{dt.second:02d}"))
                    (((unsupported)).apply ((((xValueError)).apply ("Unsupported lookup type: {lookup_type!r}"))))
            x_sqlite_time_extract.write
              [xlookup_type xdt]
                seq > @
                  seq
                    (((unsupported)).apply ((xdt)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                      xdt.write (((xtypecast_time)).apply ((xdt)))
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xgetattr)).apply ((xdt)) ((xlookup_type)))))
            x_sqlite_prepare_dtdelta_param.write
              [xconn xparam]
                seq > @
                  seq
                    (((unsupported)).apply ((xconn)) ((((unsupported)).apply ("+") ("-")))).if
                      (((xisinstance)).apply ((xparam)) ((xint))).if
                        (((unsupported)).apply ((((xtimedelta)).apply (0) (0) ((xparam)))))
                        (((unsupported)).apply ((((xtypecast_timestamp)).apply ((xparam)))))
                    (((unsupported)).apply ((xparam)))
            x_sqlite_format_dtdelta.write
              [xconnector xlhs xrhs]
                memory > xout
                memory > xreal_rhs
                memory > xreal_lhs
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((((unsupported)).apply ((xconnector)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xlhs)) ("None: is there a None literal in the EO language?"))).or (((unsupported)).apply ((xrhs)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    xconnector.write ((((xconnector).xstrip)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xValueError)) ((xTypeError)))))
                      seq
                        xreal_lhs.write (((x_sqlite_prepare_dtdelta_param)).apply ((xconnector)) ((xlhs)))
                        xreal_rhs.write (((x_sqlite_prepare_dtdelta_param)).apply ((xconnector)) ((xrhs)))
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    ((xconnector).eq "+").if
                      xout.write (((xstr)).apply (((xreal_lhs).add (xreal_rhs))))
                      ((xconnector).eq "-").if
                        xout.write (((xstr)).apply (((xreal_lhs).sub (xreal_rhs))))
                        ((xconnector).eq "*").if
                          xout.write ((xreal_lhs).mul (xreal_rhs))
                          xout.write ((xreal_lhs).div (xreal_rhs))
                    (((unsupported)).apply ((xout)))
            x_sqlite_time_diff.write
              [xlhs xrhs]
                memory > xleft
                memory > xright
                seq > @
                  seq
                    ((((unsupported)).apply ((xlhs)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xrhs)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    xleft.write (((xtypecast_time)).apply ((xlhs)))
                    xright.write (((xtypecast_time)).apply ((xrhs)))
                    (((unsupported)).apply (((((((((((((xleft).xhour).mul 60).mul 60).mul 1000000).add ((((xleft).xminute).mul 60).mul 1000000)).add (((xleft).xsecond).mul 1000000)).add ((xleft).xmicrosecond)).sub (((((xright).xhour).mul 60).mul 60).mul 1000000)).sub ((((xright).xminute).mul 60).mul 1000000)).sub (((xright).xsecond).mul 1000000)).sub ((xright).xmicrosecond))))
            x_sqlite_timestamp_diff.write
              [xlhs xrhs]
                memory > xleft
                memory > xright
                seq > @
                  seq
                    ((((unsupported)).apply ((xlhs)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xrhs)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    xleft.write (((xtypecast_timestamp)).apply ((xlhs)))
                    xright.write (((xtypecast_timestamp)).apply ((xrhs)))
                    (((unsupported)).apply ((((xduration_microseconds)).apply (((xleft).sub (xright))))))
            x_sqlite_regexp.write
              [xpattern xstring]
                seq > @
                  seq
                    ((((unsupported)).apply ((xpattern)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xstring)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    ((((xisinstance)).apply ((xstring)) ((xstr))).not).if
                      xstring.write (((xstr)).apply ((xstring)))
                    (((unsupported)).apply ((((xbool)).apply ((((xre_search)).apply ((xpattern)) ((xstring)))))))
            x_sqlite_acos.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xacos)).apply ((xx)))))
            x_sqlite_asin.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xasin)).apply ((xx)))))
            x_sqlite_atan.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xatan)).apply ((xx)))))
            x_sqlite_atan2.write
              [xy xx]
                seq > @
                  seq
                    ((((unsupported)).apply ((xy)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xatan2)).apply ((xy)) ((xx)))))
            x_sqlite_bitxor.write
              [xx xy]
                seq > @
                  seq
                    ((((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xy)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))))
            x_sqlite_ceiling.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xceil)).apply ((xx)))))
            x_sqlite_cos.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xcos)).apply ((xx)))))
            x_sqlite_cot.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((1.div (((xtan)).apply ((xx))))))
            x_sqlite_degrees.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xdegrees)).apply ((xx)))))
            x_sqlite_exp.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xexp)).apply ((xx)))))
            x_sqlite_floor.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xfloor)).apply ((xx)))))
            x_sqlite_ln.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xlog)).apply ((xx)))))
            x_sqlite_log.write
              [xbase xx]
                seq > @
                  seq
                    ((((unsupported)).apply ((xbase)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xlog)).apply ((xx)) ((xbase)))))
            x_sqlite_lpad.write
              [xtext xlength xfill_text]
                memory > xdelta
                seq > @
                  seq
                    (((((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xlength)) ("None: is there a None literal in the EO language?"))).or (((unsupported)).apply ((xfill_text)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    xdelta.write ((xlength).sub (((xlen)).apply ((xtext))))
                    ((xdelta).leq 0).if
                      (((unsupported)).apply ((((unsupported)).apply ((xtext)) ((((unsupported)).apply ((xlength)))))))
                    (((unsupported)).apply (((((unsupported)).apply (((xfill_text).mul (xlength))) ((((unsupported)).apply ((xdelta))))).add (xtext))))
            x_sqlite_md5.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply (((((((xmd5)).apply (((((xtext).xencode)).apply))).xhexdigest)).apply)))
            x_sqlite_mod.write
              [xx xy]
                seq > @
                  seq
                    ((((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xy)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xfmod)).apply ((xx)) ((xy)))))
            x_sqlite_pi.write
              []
                seq > @
                  (((unsupported)).apply ((xpi)))
            x_sqlite_power.write
              [xx xy]
                seq > @
                  seq
                    ((((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xy)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))))
            x_sqlite_radians.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xradians)).apply ((xx)))))
            x_sqlite_repeat.write
              [xtext xcount]
                seq > @
                  seq
                    ((((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xcount)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply (((xtext).mul (xcount))))
            x_sqlite_reverse.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((unsupported)).apply ((xtext)) ((((unsupported)).apply ((1.neg)))))))
            x_sqlite_rpad.write
              [xtext xlength xfill_text]
                seq > @
                  seq
                    (((((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).or (((unsupported)).apply ((xlength)) ("None: is there a None literal in the EO language?"))).or (((unsupported)).apply ((xfill_text)) ("None: is there a None literal in the EO language?"))).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((unsupported)).apply (((xtext).add ((xfill_text).mul (xlength)))) ((((unsupported)).apply ((xlength)))))))
            x_sqlite_sha1.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply (((((((xsha1)).apply (((((xtext).xencode)).apply))).xhexdigest)).apply)))
            x_sqlite_sha224.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply (((((((xsha224)).apply (((((xtext).xencode)).apply))).xhexdigest)).apply)))
            x_sqlite_sha256.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply (((((((xsha256)).apply (((((xtext).xencode)).apply))).xhexdigest)).apply)))
            x_sqlite_sha384.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply (((((((xsha384)).apply (((((xtext).xencode)).apply))).xhexdigest)).apply)))
            x_sqlite_sha512.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply ((xtext)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply (((((((xsha512)).apply (((((xtext).xencode)).apply))).xhexdigest)).apply)))
            x_sqlite_sign.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xx).greater 0).sub ((xx).less 0))))
            x_sqlite_sin.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xsin)).apply ((xx)))))
            x_sqlite_sqrt.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xsqrt)).apply ((xx)))))
            x_sqlite_tan.write
              [xx]
                seq > @
                  seq
                    (((unsupported)).apply ((xx)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((xtan)).apply ((xx)))))
            (((unsupported)).apply ((xlist)))
              xstep.write ((xlist).xappend)
            (((unsupported)).apply ((xListAggregate)))
              xfinalize.write ((xstatistics).xpstdev)
            (((unsupported)).apply ((xListAggregate)))
              xfinalize.write ((xstatistics).xstdev)
            (((unsupported)).apply ((xListAggregate)))
              xfinalize.write ((xstatistics).xpvariance)
            (((unsupported)).apply ((xListAggregate)))
              xfinalize.write ((xstatistics).xvariance)