memory > xstdout
memory > xFileCompareTestCase
memory > xDirCompareTestCase
memory > xtempfile
memory > xsupport
memory > xfilecmp
memory > xlen
memory > xoutput
memory > xopen
memory > xleft_dir
memory > xos
memory > xdir
memory > xname
memory > xshutil
memory > xunittest
memory > xright_dir
memory > x__name__
[] > test_filecmp
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_report_full_closure
        memory > xtest_matching
        memory > xtest_different
        memory > xtest_cmpfiles
        memory > xtest_main
        memory > xtest_report_partial_closure
        memory > xtest_cache_clear
        memory > xsetUp
        memory > xtest_dircmp
        memory > x_assert_report
        memory > xtearDown
        memory > xtest_default_ignores
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xdata
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xname)) (((xsupport).xTESTFN)))
                        (((unsupported)).apply (((xself).xname_same)) ((((xsupport).xTESTFN).sub "-same")))
                        (((unsupported)).apply (((xself).xname_diff)) ((((xsupport).xTESTFN).sub "-diff")))
                        xdata.write "Contents of file go here.n"
                        (((unsupported)).apply ((xname)) ((((unsupported)).apply (((xself).xname)) (((xself).xname_same)) (((xself).xname_diff)))))
                          (((unsupported)).apply ((((xopen)).apply ((xname)) ("w"))) ((xoutput)))
                            bogusForceDataize.write ((((xoutput).xwrite)).apply ((xdata)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xname_diff)) ("a-"))) ((xoutput)))
                          bogusForceDataize.write ((((xoutput).xwrite)).apply ("An extra line.n"))
                        (((unsupported)).apply (((xself).xdir)) (((((xtempfile).xgettempdir)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xself).xname)))
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xself).xname_same)))
                        bogusForceDataize.write ((((xos).xunlink)).apply (((xself).xname_diff)))
                xtest_matching.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfilecmp).xcmp)).apply (((xself).xname)) (((xself).xname)))) ("Comparing file to itself fails"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xfilecmp).xcmp)) (((xself).xname)) (((xself).xname)) (FALSE))) ("Comparing file to itself fails"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xfilecmp).xcmp)).apply (((xself).xname)) (((xself).xname_same)))) ("Comparing file to identical file fails"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xfilecmp).xcmp)) (((xself).xname)) (((xself).xname_same)) (FALSE))) ("Comparing file to identical file fails"))
                xtest_different.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xfilecmp).xcmp)).apply (((xself).xname)) (((xself).xname_diff)))) ("Mismatched files compare as equal"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xfilecmp).xcmp)).apply (((xself).xname)) (((xself).xdir)))) ("File and directory compare as equal"))
                xtest_cache_clear.write
                  [xself]
                    memory > xsecond_compare
                    memory > xfirst_compare
                    seq > @
                      seq
                        xfirst_compare.write (((unsupported)).apply (((xfilecmp).xcmp)) (((xself).xname)) (((xself).xname_same)) (FALSE))
                        xsecond_compare.write (((unsupported)).apply (((xfilecmp).xcmp)) (((xself).xname)) (((xself).xname_diff)) (FALSE))
                        bogusForceDataize.write ((((xfilecmp).xclear_cache)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xlen)).apply (((xfilecmp).x_cache))).eq 0)) ("Cache not cleared after calling clear_cache"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    memory > xfn
                    memory > xdata
                    memory > xtmpdir
                    seq > @
                      seq
                        xtmpdir.write ((((xtempfile).xgettempdir)).apply)
                        (((unsupported)).apply (((xself).xdir)) ((((((xos).xpath).xjoin)).apply ((xtmpdir)) ("dir"))))
                        (((unsupported)).apply (((xself).xdir_same)) ((((((xos).xpath).xjoin)).apply ((xtmpdir)) ("dir-same"))))
                        (((unsupported)).apply (((xself).xdir_diff)) ((((((xos).xpath).xjoin)).apply ((xtmpdir)) ("dir-diff"))))
                        (((unsupported)).apply (((xself).xdir_ignored)) ((((((xos).xpath).xjoin)).apply (((xself).xdir_same)) (".hg"))))
                        (((unsupported)).apply (((xself).xcaseinsensitive)) (((((((xos).xpath).xnormcase)).apply ("A")).eq (((((xos).xpath).xnormcase)).apply ("a")))))
                        xdata.write "Contents of file go here.n"
                        (((unsupported)).apply ((xdir)) ((((unsupported)).apply (((xself).xdir)) (((xself).xdir_same)) (((xself).xdir_diff)) (((xself).xdir_ignored)))))
                          seq
                            bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xdir)) (TRUE))
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xdir)))
                            (((xself).xcaseinsensitive).and (((unsupported)).apply ((xdir)) (((xself).xdir_same)))).if
                              xfn.write "FiLe"
                              xfn.write "file"
                            (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply ((xdir)) ((xfn)))) ("w"))) ((xoutput)))
                              bogusForceDataize.write ((((xoutput).xwrite)).apply ((xdata)))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply (((xself).xdir_diff)) ("file2"))) ("w"))) ((xoutput)))
                          bogusForceDataize.write ((((xoutput).xwrite)).apply ("An extra file.n"))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xdir)) ((((unsupported)).apply (((xself).xdir)) (((xself).xdir_same)) (((xself).xdir_diff)))))
                        bogusForceDataize.write ((((xshutil).xrmtree)).apply ((xdir)))
                xtest_default_ignores.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply (".hg") (((xfilecmp).xDEFAULT_IGNORES)))
                xtest_cmpfiles.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xfilecmp).xcmpfiles)).apply (((xself).xdir)) (((xself).xdir)) ((((unsupported)).apply ("file")))).eq (((unsupported)).apply ((((unsupported)).apply ("file"))) ((((unsupported)).apply)) ((((unsupported)).apply))))) ("Comparing directory to itself fails"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xfilecmp).xcmpfiles)).apply (((xself).xdir)) (((xself).xdir_same)) ((((unsupported)).apply ("file")))).eq (((unsupported)).apply ((((unsupported)).apply ("file"))) ((((unsupported)).apply)) ((((unsupported)).apply))))) ("Comparing directory to same fails"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((unsupported)).apply (((xfilecmp).xcmpfiles)) (((xself).xdir)) (((xself).xdir)) ((((unsupported)).apply ("file"))) (FALSE)).eq (((unsupported)).apply ((((unsupported)).apply ("file"))) ((((unsupported)).apply)) ((((unsupported)).apply))))) ("Comparing directory to itself fails"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (((xfilecmp).xcmpfiles)) (((xself).xdir)) (((xself).xdir_same)) ((((unsupported)).apply ("file"))) (FALSE))) ("Comparing directory to same fails"))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply (((xself).xdir)) ("file2"))) ("w"))) ((xoutput)))
                          bogusForceDataize.write ((((xoutput).xwrite)).apply ("Different contents.n"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xfilecmp).xcmpfiles)).apply (((xself).xdir)) (((xself).xdir_same)) ((((unsupported)).apply ("file") ("file2")))).eq (((unsupported)).apply ((((unsupported)).apply ("file"))) ((((unsupported)).apply ("file2"))) ((((unsupported)).apply))))) ("Comparing mismatched directories fails"))
                xtest_dircmp.write
                  [xself]
                    memory > xd
                    memory > xexpected_report
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xleft_dir)) ((xright_dir)))) ((((unsupported)).apply (((xself).xdir)) (((xself).xdir_same)))))
                        xd.write ((((xfilecmp).xdircmp)).apply ((xleft_dir)) ((xright_dir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xleft)) ((xleft_dir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xright)) ((xright_dir)))
                        ((xself).xcaseinsensitive).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xd).xleft_list)) (((xd).xright_list)))) ((((unsupported)).apply ((((unsupported)).apply ("file"))) ((((unsupported)).apply ("FiLe"))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xd).xleft_list)) (((xd).xright_list)))) ((((unsupported)).apply ((((unsupported)).apply ("file"))) ((((unsupported)).apply ("file"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xcommon)) ((((unsupported)).apply ("file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xleft_only)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xright_only)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xsame_files)) ((((unsupported)).apply ("file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xdiff_files)) ((((unsupported)).apply)))
                        xexpected_report.write (((unsupported)).apply (((("diff {} {}".xformat)).apply (((xself).xdir)) (((xself).xdir_same)))) ("Identical files : ['file']"))
                        bogusForceDataize.write ((((xself).x_assert_report)).apply (((xd).xreport)) ((xexpected_report)))
                        (((unsupported)).apply ((((unsupported)).apply ((xleft_dir)) ((xright_dir)))) ((((unsupported)).apply (((xself).xdir)) (((xself).xdir_diff)))))
                        xd.write ((((xfilecmp).xdircmp)).apply ((xleft_dir)) ((xright_dir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xleft)) ((xleft_dir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xright)) ((xright_dir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xleft_list)) ((((unsupported)).apply ("file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xright_list)) ((((unsupported)).apply ("file") ("file2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xcommon)) ((((unsupported)).apply ("file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xleft_only)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xright_only)) ((((unsupported)).apply ("file2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xsame_files)) ((((unsupported)).apply ("file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xdiff_files)) ((((unsupported)).apply)))
                        xexpected_report.write (((unsupported)).apply (((("diff {} {}".xformat)).apply (((xself).xdir)) (((xself).xdir_diff)))) (((("Only in {} : ['file2']".xformat)).apply (((xself).xdir_diff)))) ("Identical files : ['file']"))
                        bogusForceDataize.write ((((xself).x_assert_report)).apply (((xd).xreport)) ((xexpected_report)))
                        (((unsupported)).apply ((((unsupported)).apply ((xleft_dir)) ((xright_dir)))) ((((unsupported)).apply (((xself).xdir)) (((xself).xdir_diff)))))
                        bogusForceDataize.write ((((xshutil).xmove)).apply ((((((xos).xpath).xjoin)).apply (((xself).xdir_diff)) ("file2"))) ((((((xos).xpath).xjoin)).apply (((xself).xdir)) ("file2"))))
                        xd.write ((((xfilecmp).xdircmp)).apply ((xleft_dir)) ((xright_dir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xleft)) ((xleft_dir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xright)) ((xright_dir)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xleft_list)) ((((unsupported)).apply ("file") ("file2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xright_list)) ((((unsupported)).apply ("file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xcommon)) ((((unsupported)).apply ("file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xleft_only)) ((((unsupported)).apply ("file2"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xright_only)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xsame_files)) ((((unsupported)).apply ("file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xdiff_files)) ((((unsupported)).apply)))
                        xexpected_report.write (((unsupported)).apply (((("diff {} {}".xformat)).apply (((xself).xdir)) (((xself).xdir_diff)))) (((("Only in {} : ['file2']".xformat)).apply (((xself).xdir)))) ("Identical files : ['file']"))
                        bogusForceDataize.write ((((xself).x_assert_report)).apply (((xd).xreport)) ((xexpected_report)))
                        (((unsupported)).apply ((((xopen)).apply ((((((xos).xpath).xjoin)).apply (((xself).xdir_diff)) ("file2"))) ("w"))) ((xoutput)))
                          bogusForceDataize.write ((((xoutput).xwrite)).apply ("Different contents.n"))
                        xd.write ((((xfilecmp).xdircmp)).apply (((xself).xdir)) (((xself).xdir_diff)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xsame_files)) ((((unsupported)).apply ("file"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xd).xdiff_files)) ((((unsupported)).apply ("file2"))))
                        xexpected_report.write (((unsupported)).apply (((("diff {} {}".xformat)).apply (((xself).xdir)) (((xself).xdir_diff)))) ("Identical files : ['file']") ("Differing files : ['file2']"))
                        bogusForceDataize.write ((((xself).x_assert_report)).apply (((xd).xreport)) ((xexpected_report)))
                xtest_report_partial_closure.write
                  [xself]
                    memory > xd
                    memory > xexpected_report
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xleft_dir)) ((xright_dir)))) ((((unsupported)).apply (((xself).xdir)) (((xself).xdir_same)))))
                        xd.write ((((xfilecmp).xdircmp)).apply ((xleft_dir)) ((xright_dir)))
                        xexpected_report.write (((unsupported)).apply (((("diff {} {}".xformat)).apply (((xself).xdir)) (((xself).xdir_same)))) ("Identical files : ['file']"))
                        bogusForceDataize.write ((((xself).x_assert_report)).apply (((xd).xreport_partial_closure)) ((xexpected_report)))
                xtest_report_full_closure.write
                  [xself]
                    memory > xd
                    memory > xexpected_report
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xleft_dir)) ((xright_dir)))) ((((unsupported)).apply (((xself).xdir)) (((xself).xdir_same)))))
                        xd.write ((((xfilecmp).xdircmp)).apply ((xleft_dir)) ((xright_dir)))
                        xexpected_report.write (((unsupported)).apply (((("diff {} {}".xformat)).apply (((xself).xdir)) (((xself).xdir_same)))) ("Identical files : ['file']"))
                        bogusForceDataize.write ((((xself).x_assert_report)).apply (((xd).xreport_full_closure)) ((xexpected_report)))
                x_assert_report.write
                  [xself xdircmp_report xexpected_report_lines]
                    memory > xreport_lines
                    seq > @
                      (((unsupported)).apply (((((xsupport).xcaptured_stdout)).apply)) ((xstdout)))
                        seq
                          bogusForceDataize.write (((xdircmp_report)).apply)
                          xreport_lines.write ((((((((((xstdout).xgetvalue)).apply).xstrip)).apply).xsplit)).apply ("n"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xreport_lines)) ((xexpected_report_lines)))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((xFileCompareTestCase)) ((xDirCompareTestCase)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)