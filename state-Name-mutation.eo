memory > xto_field_name
memory > xsuper
memory > xsorted
memory > xto_fields
memory > xk
memory > xcopy
memory > xreference
memory > xrelated_models
memory > xfield
memory > xFieldDoesNotExist
memory > xproxies
memory > xAppConfig
memory > xall
memory > xlist
memory > xconcretes
memory > xindex
memory > xconcrete_models_mapping
memory > xqs_path
memory > xresolve_relation
memory > xmodel_relations
memory > xValueError
memory > ximport_string
memory > xstr
memory > xmanager
memory > xlabel
memory > xerror
memory > xk1
memory > xAppConfigStub
memory > xrel_mod
memory > x_check_lazy_references
memory > xget_references
memory > xas_manager
memory > xoption
memory > xmake_model_tuple
memory > xApps
memory > xapp_label
memory > xremote_field
memory > xInvalidBasesError
memory > xNOT_PROVIDED
memory > x_
memory > xKeyError
memory > xf2
memory > xbase
memory > xProjectState
memory > xk2
memory > xmanager_path
memory > xany
memory > xtype
memory > xf
memory > xset
memory > xsettings
memory > xnormalize_together
memory > xhasattr
memory > xDEFAULT_NAMES
memory > xx
memory > xModelState
memory > xissubclass
memory > xtuple
memory > xf1
memory > xargs
memory > xobj
memory > xrelated_model_key
memory > xmgr_name
memory > xrel_model_name
memory > xsubclass
memory > xLookupError
memory > xmodel_name
memory > xgetattr
memory > xv
memory > xStateApps
memory > xfield_is_referenced
memory > xdefaultdict
memory > xconstraint
memory > xpartial
memory > xe
memory > xto_model
memory > xapp_config
memory > xname
memory > xzip
memory > xRECURSIVE_RELATIONSHIP_CONSTANT
memory > xidx
memory > xmodels
memory > xn
memory > xmodel_key
memory > xrel_app_label
memory > xmodel_state
memory > xkwargs
memory > xget_docs_version
memory > xmodel
memory > xisinstance
memory > xfield_name
memory > xlen
memory > xdict
memory > xTypeError
memory > xcon
memory > xkey
memory > xfrom_field_name
memory > xtogether
[] > state
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_concrete_model_key
        memory > ximport_models
        memory > xremove_model
        memory > xregister_model
        memory > x_get_app_label_and_model_name
        memory > xfrom_model
        memory > x_find_concrete_model_from_proxy
        memory > xadd_field
        memory > xbulk_update
        memory > xget_field
        memory > x__eq__
        memory > x_get_related_models
        memory > x__repr__
        memory > xconstruct_managers
        memory > xadd_index
        memory > x_remove_option
        memory > xremove_index
        memory > xremove_field
        memory > xget_index_by_name
        memory > xalter_field
        memory > xclone
        memory > xapps
        memory > x_reload
        memory > x_find_reload_model
        memory > xrender_multiple
        memory > xalter_model_options
        memory > xalter_model_managers
        memory > xreload_models
        memory > xresolve_fields_and_relations
        memory > xrelations
        memory > xremove_constraint
        memory > xget_related_models_recursive
        memory > xget_constraint_by_name
        memory > xrename_field
        memory > xname_lower
        memory > xresolve_model_relations
        memory > xclear_delayed_apps_cache
        memory > xrender
        memory > xfrom_apps
        memory > xunregister_model
        memory > xresolve_model_field_relations
        memory > xget_related_models_tuples
        memory > xreload_model
        memory > x_get_concrete_models_mapping_and_proxy_models
        memory > x__init__
        memory > xadd_constraint
        memory > xglobal_apps
        memory > xupdate_model_field_relation
        memory > x_append_option
        memory > xrename_model
        memory > xadd_model
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            x_get_app_label_and_model_name.write
              [xmodel xapp_label]
                memory > xsplit
                seq > @
                  (((unsupported)).apply)
                    (((xisinstance)).apply ((xmodel)) ((xstr))).if
                      seq
                        xsplit.write ((((xmodel).xsplit)).apply (".") (1))
                        (((unsupported)).apply ((((((xlen)).apply ((xsplit))).eq 2).if (((xtuple)).apply ((xsplit))) (((unsupported)).apply ((xapp_label)) ((((unsupported)).apply ((xsplit)) (0)))))))
                      (((unsupported)).apply ((((unsupported)).apply ((((xmodel).x_meta).xapp_label)) ((((xmodel).x_meta).xmodel_name)))))
            x_get_related_models.write
              [xm]
                memory > xrelated_fields_models
                memory > xopts
                memory > xrelated_models2
                seq > @
                  seq
                    unsupported
                    xrelated_models2.write (((unsupported)).apply ((xsubclass)) ((xsubclass)) (((((xm).x__subclasses__)).apply)) ((((xissubclass)).apply ((xsubclass)) (((xmodels).xModel)))))
                    xrelated_fields_models.write (((xset)).apply)
                    (((unsupported)).apply ((xf)) ((((unsupported)).apply ((((xm).x_meta).xget_fields)) (TRUE) (TRUE))))
                      ((((xf).xis_relation).and (((unsupported)).apply (((xf).xrelated_model)) ("None: is there a None literal in the EO language?"))).and ((((xisinstance)).apply (((xf).xrelated_model)) ((xstr))).not)).if
                        seq
                          bogusForceDataize.write ((((xrelated_fields_models).xadd)).apply (((xf).xmodel)))
                          bogusForceDataize.write ((((xrelated_models).xappend)).apply (((xf).xrelated_model)))
                    xopts.write ((xm).x_meta)
                    (((xopts).xproxy).and (((unsupported)).apply ((xm)) ((xrelated_fields_models)))).if
                      bogusForceDataize.write ((((xrelated_models).xappend)).apply (((xopts).xconcrete_model)))
                    (((unsupported)).apply ((xrelated_models)))
            xget_related_models_tuples.write
              [xmodel]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xrel_mod).x_meta).xapp_label)) ((((xrel_mod).x_meta).xmodel_name)))) ((xrel_mod)) ((((x_get_related_models)).apply ((xmodel)))))))
            xget_related_models_recursive.write
              [xmodel]
                memory > xqueue
                memory > xseen
                seq > @
                  seq
                    (((unsupported)).apply)
                    xseen.write (((xset)).apply)
                    xqueue.write (((x_get_related_models)).apply ((xmodel)))
                    (((unsupported)).apply ((xrel_mod)) ((xqueue)))
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xrel_app_label)) ((xrel_model_name)))) ((((unsupported)).apply ((((xrel_mod).x_meta).xapp_label)) ((((xrel_mod).x_meta).xmodel_name)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xrel_app_label)) ((xrel_model_name)))) ((xseen))).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xseen).xadd)).apply ((((unsupported)).apply ((xrel_app_label)) ((xrel_model_name)))))
                        bogusForceDataize.write ((((xqueue).xextend)).apply ((((x_get_related_models)).apply ((xrel_mod)))))
                    (((unsupported)).apply (((xseen).sub (((unsupported)).apply ((((unsupported)).apply ((((xmodel).x_meta).xapp_label)) ((((xmodel).x_meta).xmodel_name))))))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xmodels xreal_apps]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmodels)) (((xmodels).or (((unsupported)).apply))))
                        (((unsupported)).apply ((xreal_apps)) ("None: is there a None literal in the EO language?")).if
                          xreal_apps.write (((xset)).apply)
                          (((unsupported)).apply ((((xisinstance)).apply ((xreal_apps)) ((xset)))))
                        (((unsupported)).apply (((xself).xreal_apps)) ((xreal_apps)))
                        (((unsupported)).apply (((xself).xis_delayed)) (FALSE))
                        (((unsupported)).apply (((xself).x_relations)) ("None: is there a None literal in the EO language?"))
                xrelations.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_relations)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xresolve_fields_and_relations)).apply)
                        (((unsupported)).apply (((xself).x_relations)))
                xadd_model.write
                  [xself xmodel_state]
                    memory > xmodel_key
                    seq > @
                      seq
                        xmodel_key.write (((unsupported)).apply (((xmodel_state).xapp_label)) (((xmodel_state).xname_lower)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmodels)) ((xmodel_key)))) ((xmodel_state)))
                        (((unsupported)).apply (((xself).x_relations)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xresolve_model_relations)).apply ((xmodel_key)))
                        (((unsupported)).apply ("apps") (((xself).x__dict__))).if
                          bogusForceDataize.write ((((xself).xreload_model)).apply ((((unsupported)).apply ((xmodel_key)))))
                xremove_model.write
                  [xself xapp_label xmodel_name]
                    memory > xmodel_key
                    seq > @
                      seq
                        xmodel_key.write (((unsupported)).apply ((xapp_label)) ((xmodel_name)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xmodels)) ((xmodel_key)))))))))
                        (((unsupported)).apply (((xself).x_relations)) ("None: is there a None literal in the EO language?")).if
                          seq
                            bogusForceDataize.write (((((xself).x_relations).xpop)).apply ((xmodel_key)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((((unsupported)).apply ((xrelated_model_key)) ((xmodel_relations)))) ((((xlist)).apply ((((((xself).x_relations).xitems)).apply)))))
                              seq
                                bogusForceDataize.write ((((xmodel_relations).xpop)).apply ((xmodel_key)) ("None: is there a None literal in the EO language?"))
                                ((xmodel_relations).not).if
                                  (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).x_relations)) ((xrelated_model_key)))))))))
                        (((unsupported)).apply ("apps") (((xself).x__dict__))).if
                          seq
                            bogusForceDataize.write (((((xself).xapps).xunregister_model)).apply ((((unsupported)).apply ((xmodel_key)))))
                            bogusForceDataize.write (((((xself).xapps).xclear_cache)).apply)
                xrename_model.write
                  [xself xapp_label xold_name xnew_name]
                    memory > xto_reload
                    memory > xold_name_lower
                    memory > xrenamed_model
                    memory > xnew_name_key
                    memory > xnew_remote_model
                    memory > xchanged_field
                    memory > xold_name_key
                    memory > xold_model_tuple
                    memory > xnew_name_lower
                    seq > @
                      seq
                        xold_name_lower.write ((((xold_name).xlower)).apply)
                        xnew_name_lower.write ((((xnew_name).xlower)).apply)
                        xrenamed_model.write ((((((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xold_name_lower))))).xclone)).apply)
                        (((unsupported)).apply (((xrenamed_model).xname)) ((xnew_name)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xnew_name_lower)))))) ((xrenamed_model)))
                        xold_model_tuple.write (((unsupported)).apply ((xapp_label)) ((xold_name_lower)))
                        xnew_remote_model.write "{app_label}.{new_name}"
                        xto_reload.write (((xset)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmodel_state)) ((xname)) ((xfield)) ((xreference)))) ((((xget_references)).apply ((xself)) ((xold_model_tuple)))))
                          seq
                            xchanged_field.write "None: is there a None literal in the EO language?"
                            ((xreference).xto).if
                              seq
                                xchanged_field.write ((((xfield).xclone)).apply)
                                (((unsupported)).apply ((((xchanged_field).xremote_field).xmodel)) ((xnew_remote_model)))
                            ((xreference).xthrough).if
                              seq
                                (((unsupported)).apply ((xchanged_field)) ("None: is there a None literal in the EO language?")).if
                                  xchanged_field.write ((((xfield).xclone)).apply)
                                (((unsupported)).apply ((((xchanged_field).xremote_field).xthrough)) ((xnew_remote_model)))
                            (xchanged_field).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply (((xmodel_state).xfields)) ((xname)))) ((xchanged_field)))
                                bogusForceDataize.write ((((xto_reload).xadd)).apply ((((unsupported)).apply (((xmodel_state).xapp_label)) (((xmodel_state).xname_lower)))))
                        (((unsupported)).apply (((xself).x_relations)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xold_name_key.write (((unsupported)).apply ((xapp_label)) ((xold_name_lower)))
                            xnew_name_key.write (((unsupported)).apply ((xapp_label)) ((xnew_name_lower)))
                            (((unsupported)).apply ((xold_name_key)) (((xself).x_relations))).if
                              (((unsupported)).apply ((((unsupported)).apply (((xself).x_relations)) ((xnew_name_key)))) ((((((xself).x_relations).xpop)).apply ((xold_name_key)))))
                            (((unsupported)).apply ((xmodel_relations)) ((((((xself).x_relations).xvalues)).apply)))
                              (((unsupported)).apply ((xold_name_key)) ((xmodel_relations))).if
                                (((unsupported)).apply ((((unsupported)).apply ((xmodel_relations)) ((xnew_name_key)))) (((((xmodel_relations).xpop)).apply ((xold_name_key)))))
                        (((unsupported)).apply (((xself).xreload_models)) ((xto_reload)) (TRUE))
                        bogusForceDataize.write ((((xself).xremove_model)).apply ((xapp_label)) ((xold_name_lower)))
                        (((unsupported)).apply (((xself).xreload_model)) ((xapp_label)) ((xnew_name_lower)) (TRUE))
                xalter_model_options.write
                  [xself xapp_label xmodel_name xoptions xoption_keys]
                    memory > xmodel_state
                    seq > @
                      (((unsupported)).apply)
                        xmodel_state.write (((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                        (((unsupported)).apply (((xmodel_state).xoptions)) ((((unsupported)).apply (((xmodel_state).xoptions)) ((xoptions)))))
                        (xoption_keys).if
                          (((unsupported)).apply ((xkey)) ((xoption_keys)))
                            (((unsupported)).apply ((xkey)) ((xoptions))).if
                              bogusForceDataize.write (((((xmodel_state).xoptions).xpop)).apply ((xkey)) (FALSE))
                        (((unsupported)).apply (((xself).xreload_model)) ((xapp_label)) ((xmodel_name)) (TRUE))
                xalter_model_managers.write
                  [xself xapp_label xmodel_name xmanagers]
                    memory > xmodel_state
                    seq > @
                      seq
                        xmodel_state.write (((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                        (((unsupported)).apply (((xmodel_state).xmanagers)) ((((xlist)).apply ((xmanagers)))))
                        (((unsupported)).apply (((xself).xreload_model)) ((xapp_label)) ((xmodel_name)) (TRUE))
                x_append_option.write
                  [xself xapp_label xmodel_name xoption_name xobj]
                    memory > xmodel_state
                    seq > @
                      seq
                        xmodel_state.write (((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xmodel_state).xoptions)) ((xoption_name)))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xmodel_state).xoptions)) ((xoption_name)))))) ((xobj)))))
                        (((unsupported)).apply (((xself).xreload_model)) ((xapp_label)) ((xmodel_name)) (TRUE))
                x_remove_option.write
                  [xself xapp_label xmodel_name xoption_name xobj_name]
                    memory > xobjs
                    memory > xmodel_state
                    seq > @
                      seq
                        xmodel_state.write (((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                        xobjs.write (((unsupported)).apply (((xmodel_state).xoptions)) ((xoption_name)))
                        (((unsupported)).apply ((((unsupported)).apply (((xmodel_state).xoptions)) ((xoption_name)))) ((((unsupported)).apply ((xobj)) ((xobj)) ((xobjs)) ((((xobj).xname).neq (xobj_name))))))
                        (((unsupported)).apply (((xself).xreload_model)) ((xapp_label)) ((xmodel_name)) (TRUE))
                xadd_index.write
                  [xself xapp_label xmodel_name xindex]
                    seq > @
                      bogusForceDataize.write ((((xself).x_append_option)).apply ((xapp_label)) ((xmodel_name)) ("indexes") ((xindex)))
                xremove_index.write
                  [xself xapp_label xmodel_name xindex_name]
                    seq > @
                      bogusForceDataize.write ((((xself).x_remove_option)).apply ((xapp_label)) ((xmodel_name)) ("indexes") ((xindex_name)))
                xadd_constraint.write
                  [xself xapp_label xmodel_name xconstraint]
                    seq > @
                      bogusForceDataize.write ((((xself).x_append_option)).apply ((xapp_label)) ((xmodel_name)) ("constraints") ((xconstraint)))
                xremove_constraint.write
                  [xself xapp_label xmodel_name xconstraint_name]
                    seq > @
                      bogusForceDataize.write ((((xself).x_remove_option)).apply ((xapp_label)) ((xmodel_name)) ("constraints") ((xconstraint_name)))
                xadd_field.write
                  [xself xapp_label xmodel_name xname xfield xpreserve_default]
                    memory > xdelay
                    memory > xmodel_key
                    seq > @
                      seq
                        ((xpreserve_default).not).if
                          seq
                            xfield.write ((((xfield).xclone)).apply)
                            (((unsupported)).apply (((xfield).xdefault)) ((xNOT_PROVIDED)))
                          xfield.write (xfield)
                        xmodel_key.write (((unsupported)).apply ((xapp_label)) ((xmodel_name)))
                        (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((xself).xmodels)) ((xmodel_key))).xfields)) ((xname)))) ((xfield)))
                        (((unsupported)).apply (((xself).x_relations)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xresolve_model_field_relations)).apply ((xmodel_key)) ((xname)) ((xfield)))
                        xdelay.write (((xfield).xis_relation).not)
                        (((unsupported)).apply (((xself).xreload_model)) ((((unsupported)).apply ((xmodel_key)))) ((xdelay)))
                xremove_field.write
                  [xself xapp_label xmodel_name xname]
                    memory > xold_field
                    memory > xdelay
                    memory > xmodel_state
                    memory > xmodel_key
                    seq > @
                      seq
                        xmodel_key.write (((unsupported)).apply ((xapp_label)) ((xmodel_name)))
                        xmodel_state.write (((unsupported)).apply (((xself).xmodels)) ((xmodel_key)))
                        xold_field.write (((((xmodel_state).xfields).xpop)).apply ((xname)))
                        (((unsupported)).apply (((xself).x_relations)) ("None: is there a None literal in the EO language?")).if
                          bogusForceDataize.write ((((xself).xresolve_model_field_relations)).apply ((xmodel_key)) ((xname)) ((xold_field)))
                        xdelay.write (((xold_field).xis_relation).not)
                        (((unsupported)).apply (((xself).xreload_model)) ((((unsupported)).apply ((xmodel_key)))) ((xdelay)))
                xalter_field.write
                  [xself xapp_label xmodel_name xname xfield xpreserve_default]
                    memory > xold_field
                    memory > xdelay
                    memory > xfields
                    memory > xmodel_key
                    seq > @
                      seq
                        ((xpreserve_default).not).if
                          seq
                            xfield.write ((((xfield).xclone)).apply)
                            (((unsupported)).apply (((xfield).xdefault)) ((xNOT_PROVIDED)))
                          xfield.write (xfield)
                        xmodel_key.write (((unsupported)).apply ((xapp_label)) ((xmodel_name)))
                        xfields.write ((((unsupported)).apply (((xself).xmodels)) ((xmodel_key))).xfields)
                        (((unsupported)).apply (((xself).x_relations)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xold_field.write ((((xfields).xpop)).apply ((xname)))
                            ((xold_field).xis_relation).if
                              bogusForceDataize.write ((((xself).xresolve_model_field_relations)).apply ((xmodel_key)) ((xname)) ((xold_field)))
                            (((unsupported)).apply ((((unsupported)).apply ((xfields)) ((xname)))) ((xfield)))
                            ((xfield).xis_relation).if
                              bogusForceDataize.write ((((xself).xresolve_model_field_relations)).apply ((xmodel_key)) ((xname)) ((xfield)))
                          (((unsupported)).apply ((((unsupported)).apply ((xfields)) ((xname)))) ((xfield)))
                        xdelay.write ((((xfield).xis_relation).not).and ((((xfield_is_referenced)).apply ((xself)) ((xmodel_key)) ((((unsupported)).apply ((xname)) ((xfield))))).not))
                        (((unsupported)).apply (((xself).xreload_model)) ((((unsupported)).apply ((xmodel_key)))) ((xdelay)))
                xrename_field.write
                  [xself xapp_label xmodel_name xold_name xnew_name]
                    memory > xfield
                    memory > xold_name_lower
                    memory > xfields
                    memory > xreferences
                    memory > xfrom_fields
                    memory > xfound
                    memory > xdelay
                    memory > xmodel_key
                    memory > xnew_name_lower
                    memory > xmodel_state
                    memory > xoptions
                    seq > @
                      seq
                        xmodel_key.write (((unsupported)).apply ((xapp_label)) ((xmodel_name)))
                        xmodel_state.write (((unsupported)).apply (((xself).xmodels)) ((xmodel_key)))
                        xfields.write ((xmodel_state).xfields)
                        (((unsupported)).apply ((xKeyError)))
                          xfound.write ((((xfields).xpop)).apply ((xold_name)))
                          (((unsupported)).apply ((((xFieldDoesNotExist)).apply ("{app_label}.{model_name} has no field named '{old_name}'"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfields)) ((xnew_name)))) ((xfound)))
                        (((unsupported)).apply ((xfield)) (((((xfields).xvalues)).apply)))
                          seq
                            xfrom_fields.write (((xgetattr)).apply ((xfield)) ("from_fields") ("None: is there a None literal in the EO language?"))
                            (xfrom_fields).if
                              (((unsupported)).apply (((xfield).xfrom_fields)) ((((xtuple)).apply ((((unsupported)).apply ((((xfrom_field_name).eq (xold_name)).if (xnew_name) (xfrom_field_name))) ((xfrom_field_name)) ((xfrom_fields)))))))
                        xoptions.write ((xmodel_state).xoptions)
                        (((unsupported)).apply ((xoption)) ((((unsupported)).apply ("index_together") ("unique_together"))))
                          (((unsupported)).apply ((xoption)) ((xoptions))).if
                            (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xoption)))) ((((unsupported)).apply ((((unsupported)).apply ((((xn).eq (xold_name)).if (xnew_name) (xn))) ((xn)) ((xtogether)))) ((xtogether)) ((((unsupported)).apply ((xoptions)) ((xoption)))))))
                        xdelay.write TRUE
                        xreferences.write (((xget_references)).apply ((xself)) ((xmodel_key)) ((((unsupported)).apply ((xold_name)) ((xfound)))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((x_)))) ((xfield)) ((xreference)))) ((xreferences)))
                          seq
                            xdelay.write FALSE
                            ((xreference).xto).if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xremote_field)) ((xto_fields)))) (((xreference).xto)))
                                ((((xgetattr)).apply ((xremote_field)) ("field_name") ("None: is there a None literal in the EO language?")).eq (xold_name)).if
                                  (((unsupported)).apply (((xremote_field).xfield_name)) ((xnew_name)))
                                (xto_fields).if
                                  (((unsupported)).apply (((xfield).xto_fields)) ((((xtuple)).apply ((((unsupported)).apply ((((xto_field_name).eq (xold_name)).if (xnew_name) (xto_field_name))) ((xto_field_name)) ((xto_fields)))))))
                        (((unsupported)).apply (((xself).x_relations)) ("None: is there a None literal in the EO language?")).if
                          seq
                            xold_name_lower.write ((((xold_name).xlower)).apply)
                            xnew_name_lower.write ((((xnew_name).xlower)).apply)
                            (((unsupported)).apply ((xto_model)) ((((((xself).x_relations).xvalues)).apply)))
                              (((unsupported)).apply ((xold_name_lower)) ((((unsupported)).apply ((xto_model)) ((xmodel_key))))).if
                                seq
                                  xfield.write ((((((unsupported)).apply ((xto_model)) ((xmodel_key))).xpop)).apply ((xold_name_lower)))
                                  (((unsupported)).apply (((xfield).xname)) ((xnew_name_lower)))
                                  (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xto_model)) ((xmodel_key)))) ((xnew_name_lower)))) ((xfield)))
                        (((unsupported)).apply (((xself).xreload_model)) ((((unsupported)).apply ((xmodel_key)))) ((xdelay)))
                x_find_reload_model.write
                  [xself xapp_label xmodel_name xdelay]
                    memory > xrelated_models
                    memory > xdirect_related_models
                    memory > xrel_model
                    memory > xold_model
                    memory > xmodel_state
                    seq > @
                      (((unsupported)).apply)
                        (xdelay).if
                          (((unsupported)).apply (((xself).xis_delayed)) (TRUE))
                        xrelated_models.write (((xset)).apply)
                        (((unsupported)).apply ((xLookupError)))
                          xold_model.write (((((xself).xapps).xget_model)).apply ((xapp_label)) ((xmodel_name)))
                          (xdelay).if
                            xrelated_models.write (((xget_related_models_tuples)).apply ((xold_model)))
                            xrelated_models.write (((xget_related_models_recursive)).apply ((xold_model)))
                        xmodel_state.write (((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                        xdirect_related_models.write (((xset)).apply)
                        (((unsupported)).apply ((xfield)) ((((((xmodel_state).xfields).xvalues)).apply)))
                          ((xfield).xis_relation).if
                            seq
                              ((((xfield).xremote_field).xmodel).eq (xRECURSIVE_RELATIONSHIP_CONSTANT)).if
                                (((unsupported)).apply)
                              (((unsupported)).apply ((((unsupported)).apply ((xrel_app_label)) ((xrel_model_name)))) ((((x_get_app_label_and_model_name)).apply (((xfield).xrelated_model)) ((xapp_label)))))
                              bogusForceDataize.write ((((xdirect_related_models).xadd)).apply ((((unsupported)).apply ((xrel_app_label)) (((((xrel_model_name).xlower)).apply)))))
                        bogusForceDataize.write ((((xrelated_models).xupdate)).apply ((xdirect_related_models)))
                        (((unsupported)).apply ((((unsupported)).apply ((xrel_app_label)) ((xrel_model_name)))) ((xdirect_related_models)))
                          (((unsupported)).apply ((xLookupError)))
                            xrel_model.write (((((xself).xapps).xget_model)).apply ((xrel_app_label)) ((xrel_model_name)))
                            (xdelay).if
                              bogusForceDataize.write ((((xrelated_models).xupdate)).apply ((((xget_related_models_tuples)).apply ((xrel_model)))))
                              bogusForceDataize.write ((((xrelated_models).xupdate)).apply ((((xget_related_models_recursive)).apply ((xrel_model)))))
                        bogusForceDataize.write ((((xrelated_models).xadd)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))))
                        (((unsupported)).apply ((xrelated_models)))
                xreload_model.write
                  [xself xapp_label xmodel_name xdelay]
                    memory > xrelated_models
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ("apps") (((xself).x__dict__))).if
                          seq
                            xrelated_models.write ((((xself).x_find_reload_model)).apply ((xapp_label)) ((xmodel_name)) ((xdelay)))
                            bogusForceDataize.write ((((xself).x_reload)).apply ((xrelated_models)))
                xreload_models.write
                  [xself xmodels xdelay]
                    memory > xrelated_models
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ("apps") (((xself).x__dict__))).if
                          seq
                            xrelated_models.write (((xset)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xapp_label)) ((xmodel_name)))) ((xmodels)))
                              bogusForceDataize.write ((((xrelated_models).xupdate)).apply (((((xself).x_find_reload_model)).apply ((xapp_label)) ((xmodel_name)) ((xdelay)))))
                            bogusForceDataize.write ((((xself).x_reload)).apply ((xrelated_models)))
                x_reload.write
                  [xself xrelated_models]
                    memory > xstates_to_be_rendered
                    memory > xmodel_state
                    seq > @
                      seq
                        (((unsupported)).apply ((((((xself).xapps).xbulk_update)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((xrel_app_label)) ((xrel_model_name)))) ((xrelated_models)))
                            bogusForceDataize.write (((((xself).xapps).xunregister_model)).apply ((xrel_app_label)) ((xrel_model_name)))
                        xstates_to_be_rendered.write (((unsupported)).apply)
                        (((unsupported)).apply ((xmodel_state)) ((((xself).xapps).xreal_models)))
                          (((unsupported)).apply ((((unsupported)).apply (((xmodel_state).xapp_label)) (((xmodel_state).xname_lower)))) ((xrelated_models))).if
                            bogusForceDataize.write ((((xstates_to_be_rendered).xappend)).apply ((xmodel_state)))
                        (((unsupported)).apply ((((unsupported)).apply ((xrel_app_label)) ((xrel_model_name)))) ((xrelated_models)))
                          (((unsupported)).apply ((xKeyError)))
                            xmodel_state.write (((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply ((xrel_app_label)) ((xrel_model_name)))))
                            bogusForceDataize.write ((((xstates_to_be_rendered).xappend)).apply ((xmodel_state)))
                        bogusForceDataize.write (((((xself).xapps).xrender_multiple)).apply ((xstates_to_be_rendered)))
                xupdate_model_field_relation.write
                  [xself xmodel xmodel_key xfield_name xfield xconcretes]
                    memory > xrelations_to_remote_model
                    memory > xremote_model_key
                    seq > @
                      seq
                        xremote_model_key.write (((xresolve_relation)).apply ((xmodel)) ((((unsupported)).apply ((xmodel_key)))))
                        ((((unsupported)).apply ((((unsupported)).apply ((xremote_model_key)) (0))) (((xself).xreal_apps))).and (((unsupported)).apply ((xremote_model_key)) ((xconcretes)))).if
                          xremote_model_key.write (((unsupported)).apply ((xconcretes)) ((xremote_model_key)))
                        xrelations_to_remote_model.write (((unsupported)).apply (((xself).x_relations)) ((xremote_model_key)))
                        (((unsupported)).apply ((xfield_name)) (((((unsupported)).apply (((xself).xmodels)) ((xmodel_key))).xfields))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((((unsupported)).apply ((xrelations_to_remote_model)) ((xmodel_key)))))))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrelations_to_remote_model)) ((xmodel_key)))) ((xfield_name)))) ((xfield)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrelations_to_remote_model)) ((xmodel_key)))) ((xfield_name)))))))))
                            ((((unsupported)).apply ((xrelations_to_remote_model)) ((xmodel_key))).not).if
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xrelations_to_remote_model)) ((xmodel_key)))))))))
                xresolve_model_field_relations.write
                  [xself xmodel_key xfield_name xfield xconcretes]
                    memory > xremote_field
                    memory > xthrough
                    seq > @
                      (((unsupported)).apply)
                        xremote_field.write ((xfield).xremote_field)
                        ((xremote_field).not).if
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xconcretes)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xconcretes)) ((x_)))) (((((xself).x_get_concrete_models_mapping_and_proxy_models)).apply)))
                        bogusForceDataize.write ((((xself).xupdate_model_field_relation)).apply (((xremote_field).xmodel)) ((xmodel_key)) ((xfield_name)) ((xfield)) ((xconcretes)))
                        xthrough.write (((xgetattr)).apply ((xremote_field)) ("through") ("None: is there a None literal in the EO language?"))
                        ((xthrough).not).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xupdate_model_field_relation)).apply ((xthrough)) ((xmodel_key)) ((xfield_name)) ((xfield)) ((xconcretes)))
                xresolve_model_relations.write
                  [xself xmodel_key xconcretes]
                    memory > xmodel_state
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xconcretes)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((unsupported)).apply ((xconcretes)) ((x_)))) (((((xself).x_get_concrete_models_mapping_and_proxy_models)).apply)))
                        xmodel_state.write (((unsupported)).apply (((xself).xmodels)) ((xmodel_key)))
                        (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xfield)))) ((((((xmodel_state).xfields).xitems)).apply)))
                          bogusForceDataize.write ((((xself).xresolve_model_field_relations)).apply ((xmodel_key)) ((xfield_name)) ((xfield)) ((xconcretes)))
                xresolve_fields_and_relations.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xmodel_state)) ((((((xself).xmodels).xvalues)).apply)))
                          (((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xfield)))) ((((((xmodel_state).xfields).xitems)).apply)))
                            (((unsupported)).apply (((xfield).xname)) ((xfield_name)))
                        (((unsupported)).apply (((xself).x_relations)) ((((xdefaultdict)).apply ((((xpartial)).apply ((xdefaultdict)) ((xdict)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xconcretes)) ((xproxies)))) (((((xself).x_get_concrete_models_mapping_and_proxy_models)).apply)))
                        (((unsupported)).apply ((xmodel_key)) ((xconcretes)))
                          bogusForceDataize.write ((((xself).xresolve_model_relations)).apply ((xmodel_key)) ((xconcretes)))
                        (((unsupported)).apply ((xmodel_key)) ((xproxies)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x_relations)) ((xmodel_key)))) ((((unsupported)).apply (((xself).x_relations)) ((((unsupported)).apply ((xconcretes)) ((xmodel_key)))))))
                xget_concrete_model_key.write
                  [xself xmodel]
                    memory > xmodel_key
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xconcrete_models_mapping)) ((x_)))) (((((xself).x_get_concrete_models_mapping_and_proxy_models)).apply)))
                        xmodel_key.write (((xmake_model_tuple)).apply ((xmodel)))
                        (((unsupported)).apply ((((unsupported)).apply ((xconcrete_models_mapping)) ((xmodel_key)))))
                x_get_concrete_models_mapping_and_proxy_models.write
                  [xself]
                    memory > xproxy_models
                    memory > xconcrete_models_mapping
                    seq > @
                      seq
                        xconcrete_models_mapping.write (((unsupported)).apply)
                        xproxy_models.write (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmodel_key)) ((xmodel_state)))) ((((((xself).xmodels).xitems)).apply)))
                          (((((xmodel_state).xoptions).xget)).apply ("proxy")).if
                            seq
                              (((unsupported)).apply ((((unsupported)).apply ((xproxy_models)) ((xmodel_key)))) ((xmodel_state)))
                              (((unsupported)).apply ((((unsupported)).apply ((xconcrete_models_mapping)) ((xmodel_key)))) (((((xself).x_find_concrete_model_from_proxy)).apply ((xproxy_models)) ((xmodel_state)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xconcrete_models_mapping)) ((xmodel_key)))) ((xmodel_key)))
                        (((unsupported)).apply ((((unsupported)).apply ((xconcrete_models_mapping)) ((xproxy_models)))))
                x_find_concrete_model_from_proxy.write
                  [xself xproxy_models xmodel_state]
                    memory > xbase_key
                    memory > xbase_state
                    seq > @
                      (((unsupported)).apply ((xbase)) (((xmodel_state).xbases)))
                        seq
                          (((((xisinstance)).apply ((xbase)) ((xstr))).or (((xissubclass)).apply ((xbase)) (((xmodels).xModel)))).not).if
                            (((unsupported)).apply)
                          xbase_key.write (((xmake_model_tuple)).apply ((xbase)))
                          xbase_state.write ((((xproxy_models).xget)).apply ((xbase_key)))
                          ((xbase_state).not).if
                            (((unsupported)).apply ((xbase_key)))
                          (((unsupported)).apply (((((xself).x_find_concrete_model_from_proxy)).apply ((xproxy_models)) ((xbase_state)))))
                xclone.write
                  [xself]
                    memory > xnew_state
                    seq > @
                      seq
                        unsupported
                        xnew_state.write (((unsupported)).apply ((xProjectState)) ((((unsupported)).apply ((xk)) (((((xv).xclone)).apply)) ((((unsupported)).apply ((xk)) ((xv)))) ((((((xself).xmodels).xitems)).apply)))) (((xself).xreal_apps)))
                        (((unsupported)).apply ("apps") (((xself).x__dict__))).if
                          (((unsupported)).apply (((xnew_state).xapps)) ((((((xself).xapps).xclone)).apply)))
                        (((unsupported)).apply (((xnew_state).xis_delayed)) (((xself).xis_delayed)))
                        (((unsupported)).apply ((xnew_state)))
                xclear_delayed_apps_cache.write
                  [xself]
                    seq > @
                      (((xself).xis_delayed).and (((unsupported)).apply ("apps") (((xself).x__dict__)))).if
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).x__dict__)) ("apps"))))))))
                xapps.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xStateApps)).apply (((xself).xreal_apps)) (((xself).xmodels)))))
                xfrom_apps.write
                  [xcls xapps]
                    memory > xapp_models
                    memory > xmodel_state
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xapp_models.write (((unsupported)).apply)
                        (((unsupported)).apply ((xmodel)) ((((unsupported)).apply (((xapps).xget_models)) (TRUE))))
                          seq
                            xmodel_state.write ((((xModelState).xfrom_model)).apply ((xmodel)))
                            (((unsupported)).apply ((((unsupported)).apply ((xapp_models)) ((((unsupported)).apply (((xmodel_state).xapp_label)) (((xmodel_state).xname_lower)))))) ((xmodel_state)))
                        (((unsupported)).apply ((((xcls)).apply ((xapp_models)))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply (((((xself).xmodels).eq ((xother).xmodels)).and (((xself).xreal_apps).eq ((xother).xreal_apps)))))
            (((unsupported)).apply ((xAppConfig)))
              seq
                unsupported
                x__init__.write
                  [xself xlabel]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xapps)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xlabel)) ((xlabel)))
                        (((unsupported)).apply (((xself).xname)) ((xlabel)))
                ximport_models.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xmodels)) ((((unsupported)).apply ((((xself).xapps).xall_models)) (((xself).xlabel)))))
            (((unsupported)).apply ((xApps)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xreal_apps xmodels xignore_swappable]
                    memory > xapp
                    memory > xapp_labels
                    memory > xignore
                    memory > xapp_configs
                    memory > xerrors
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xreal_models)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xapp_label)) ((xreal_apps)))
                          seq
                            xapp.write ((((xglobal_apps).xget_app_config)).apply ((xapp_label)))
                            (((unsupported)).apply ((xmodel)) (((((xapp).xget_models)).apply)))
                              bogusForceDataize.write (((((xself).xreal_models).xappend)).apply ((((unsupported)).apply (((xModelState).xfrom_model)) ((xmodel)) (TRUE))))
                        xapp_labels.write (((unsupported)).apply (((xmodel_state).xapp_label)) ((xmodel_state)) (((((xmodels).xvalues)).apply)))
                        xapp_configs.write (((unsupported)).apply ((((xAppConfigStub)).apply ((xlabel)))) ((xlabel)) ((((xsorted)).apply ((((unsupported)).apply ((((unsupported)).apply ((xreal_apps)))) ((((unsupported)).apply ((xapp_labels)))))))))
                        bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((xapp_configs)))
                        (((unsupported)).apply (((xself).x_lock)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xready_event)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xrender_multiple)).apply ((((unsupported)).apply ((((unsupported)).apply (((((xmodels).xvalues)).apply)))) ((((unsupported)).apply (((xself).xreal_models)))))))
                        (((unsupported)).apply)
                        xignore.write ((xignore_swappable).if (((unsupported)).apply ((((xmake_model_tuple)).apply (((xsettings).xAUTH_USER_MODEL))))) (((xset)).apply))
                        xerrors.write (((unsupported)).apply ((x_check_lazy_references)) ((xself)) ((xignore)))
                        (xerrors).if
                          (((unsupported)).apply ((((xValueError)).apply (((("n".xjoin)).apply ((((unsupported)).apply (((xerror).xmsg)) ((xerror)) ((xerrors)))))))))
                xbulk_update.write
                  [xself]
                    memory > xready
                    seq > @
                      (((unsupported)).apply)
                        xready.write ((xself).xready)
                        (((unsupported)).apply (((xself).xready)) (FALSE))
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xself).xready)) ((xready)))
                            bogusForceDataize.write ((((xself).xclear_cache)).apply)
                xrender_multiple.write
                  [xself xmodel_states]
                    memory > xnew_unrendered_models
                    memory > xunrendered_models
                    seq > @
                      seq
                        ((xmodel_states).not).if
                          (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbulk_update)).apply)))
                          seq
                            xunrendered_models.write (xmodel_states)
                            while.
                              (xunrendered_models)
                              [unused]
                                seq > @
                                  seq
                                    xnew_unrendered_models.write (((unsupported)).apply)
                                    (((unsupported)).apply ((xmodel)) ((xunrendered_models)))
                                      (((unsupported)).apply ((xInvalidBasesError)))
                                        bogusForceDataize.write ((((xmodel).xrender)).apply ((xself)))
                                        bogusForceDataize.write ((((xnew_unrendered_models).xappend)).apply ((xmodel)))
                                    ((((xlen)).apply ((xnew_unrendered_models))).eq (((xlen)).apply ((xunrendered_models)))).if
                                      (((unsupported)).apply ((((xInvalidBasesError)).apply (("Cannot resolve bases for %rnThis can happen if you are inheriting models from an app with migrations (e.g. contrib.auth)n in an app with no migrations; see https://docs.djangoproject.com/en/%s/topics/migrations/#dependencies for more".mod (((unsupported)).apply ((xnew_unrendered_models)) ((((xget_docs_version)).apply))))))))
                                    xunrendered_models.write (xnew_unrendered_models)
                xclone.write
                  [xself]
                    memory > xclone
                    seq > @
                      seq
                        unsupported
                        xclone.write (((xStateApps)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xclone).xall_models)) (((((xcopy).xdeepcopy)).apply (((xself).xall_models)))))
                        (((unsupported)).apply (((xclone).xapp_configs)) (((((xcopy).xdeepcopy)).apply (((xself).xapp_configs)))))
                        (((unsupported)).apply ((xapp_config)) ((((((xclone).xapp_configs).xvalues)).apply)))
                          (((unsupported)).apply (((xapp_config).xapps)) ((xclone)))
                        (((unsupported)).apply (((xclone).xreal_models)) (((xself).xreal_models)))
                        (((unsupported)).apply ((xclone)))
                xregister_model.write
                  [xself xapp_label xmodel]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xall_models)) ((xapp_label)))) ((((xmodel).x_meta).xmodel_name)))) ((xmodel)))
                        (((unsupported)).apply ((xapp_label)) (((xself).xapp_configs))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xapp_configs)) ((xapp_label)))) ((((xAppConfigStub)).apply ((xapp_label)))))
                            (((unsupported)).apply (((((unsupported)).apply (((xself).xapp_configs)) ((xapp_label))).xapps)) ((xself)))
                        (((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((xself).xapp_configs)) ((xapp_label))).xmodels)) ((((xmodel).x_meta).xmodel_name)))) ((xmodel)))
                        bogusForceDataize.write ((((xself).xdo_pending_operations)).apply ((xmodel)))
                        bogusForceDataize.write ((((xself).xclear_cache)).apply)
                xunregister_model.write
                  [xself xapp_label xmodel_name]
                    seq > @
                      (((unsupported)).apply ((xKeyError)))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xall_models)) ((xapp_label)))) ((xmodel_name)))))))))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((((unsupported)).apply (((xself).xapp_configs)) ((xapp_label))).xmodels)) ((xmodel_name)))))))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xapp_label xname xfields xoptions xbases xmanagers]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xapp_label)) ((xapp_label)))
                        (((unsupported)).apply (((xself).xname)) ((xname)))
                        (((unsupported)).apply (((xself).xfields)) ((((xdict)).apply ((xfields)))))
                        (((unsupported)).apply (((xself).xoptions)) (((xoptions).or (((unsupported)).apply))))
                        bogusForceDataize.write (((((xself).xoptions).xsetdefault)).apply ("indexes") ((((unsupported)).apply)))
                        bogusForceDataize.write (((((xself).xoptions).xsetdefault)).apply ("constraints") ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xbases)) (((xbases).or (((unsupported)).apply (((xmodels).xModel))))))
                        (((unsupported)).apply (((xself).xmanagers)) (((xmanagers).or (((unsupported)).apply))))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xfield)))) ((((((xself).xfields).xitems)).apply)))
                          seq
                            (((xhasattr)).apply ((xfield)) ("model")).if
                              (((unsupported)).apply ((((xValueError)).apply (("ModelState.fields cannot be bound to a model - \"%s\" is.".mod (xname))))))
                            (((xfield).xis_relation).and (((xhasattr)).apply (((xfield).xrelated_model)) ("_meta"))).if
                              (((unsupported)).apply ((((xValueError)).apply (("ModelState.fields cannot refer to a model class - \"%s.to\" does. Use a string reference instead.".mod (xname))))))
                            (((xfield).xmany_to_many).and (((xhasattr)).apply ((((xfield).xremote_field).xthrough)) ("_meta"))).if
                              (((unsupported)).apply ((((xValueError)).apply (("ModelState.fields cannot refer to a model class - \"%s.through\" does. Use a string reference instead.".mod (xname))))))
                        (((unsupported)).apply ((xindex)) ((((unsupported)).apply (((xself).xoptions)) ("indexes"))))
                          (((xindex).xname).not).if
                            (((unsupported)).apply ((((xValueError)).apply (("Indexes passed to ModelState require a name attribute. %r doesn't have one.".mod (xindex))))))
                xname_lower.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((((xself).xname).xlower)).apply)))
                xget_field.write
                  [xself xfield_name]
                    seq > @
                      seq
                        ((xfield_name).eq "_order").if
                          xfield_name.write (((((xself).xoptions).xget)).apply ("order_with_respect_to") ((xfield_name)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xfields)) ((xfield_name)))))
                xfrom_model.write
                  [xcls xmodel xexclude_rels]
                    memory > xdefault_manager_shim
                    memory > xut
                    memory > xnew_manager
                    memory > xfields
                    memory > xflattened_bases
                    memory > xbases
                    memory > xmanagers
                    memory > xflatten_bases
                    memory > xname
                    memory > xmanager_names
                    memory > xoptions
                    memory > xindexes
                    memory > xit
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xfields.write (((unsupported)).apply)
                        (((unsupported)).apply ((xfield)) ((((xmodel).x_meta).xlocal_fields)))
                          seq
                            ((((xgetattr)).apply ((xfield)) ("remote_field") ("None: is there a None literal in the EO language?")).and (xexclude_rels)).if
                              (((unsupported)).apply)
                            (((xisinstance)).apply ((xfield)) (((xmodels).xOrderWrt))).if
                              (((unsupported)).apply)
                            xname.write ((xfield).xname)
                            (((unsupported)).apply ((xTypeError)))
                              bogusForceDataize.write ((((xfields).xappend)).apply ((((unsupported)).apply ((xname)) (((((xfield).xclone)).apply)))))
                              (((unsupported)).apply ((((xTypeError)).apply (("Couldn't reconstruct field %s on %s: %s".mod (((unsupported)).apply ((xname)) ((((xmodel).x_meta).xlabel)) ((xe))))))))
                        ((xexclude_rels).not).if
                          (((unsupported)).apply ((xfield)) ((((xmodel).x_meta).xlocal_many_to_many)))
                            seq
                              xname.write ((xfield).xname)
                              (((unsupported)).apply ((xTypeError)))
                                bogusForceDataize.write ((((xfields).xappend)).apply ((((unsupported)).apply ((xname)) (((((xfield).xclone)).apply)))))
                                (((unsupported)).apply ((((xTypeError)).apply (("Couldn't reconstruct m2m field %s on %s: %s".mod (((unsupported)).apply ((xname)) ((((xmodel).x_meta).xobject_name)) ((xe))))))))
                        xoptions.write (((unsupported)).apply)
                        (((unsupported)).apply ((xname)) ((xDEFAULT_NAMES)))
                          (((unsupported)).apply ((xname)) ((((unsupported)).apply ("apps") ("app_label")))).if
                            (((unsupported)).apply)
                            (((unsupported)).apply ((xname)) ((((xmodel).x_meta).xoriginal_attrs))).if
                              ((xname).eq "unique_together").if
                                seq
                                  xut.write (((unsupported)).apply ((((xmodel).x_meta).xoriginal_attrs)) ("unique_together"))
                                  (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xname)))) ((((xset)).apply ((((xnormalize_together)).apply ((xut)))))))
                                ((xname).eq "index_together").if
                                  seq
                                    xit.write (((unsupported)).apply ((((xmodel).x_meta).xoriginal_attrs)) ("index_together"))
                                    (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xname)))) ((((xset)).apply ((((xnormalize_together)).apply ((xit)))))))
                                  ((xname).eq "indexes").if
                                    seq
                                      xindexes.write (((unsupported)).apply (((((xidx).xclone)).apply)) ((xidx)) ((((xmodel).x_meta).xindexes)))
                                      (((unsupported)).apply ((xindex)) ((xindexes)))
                                        (((xindex).xname).not).if
                                          bogusForceDataize.write ((((xindex).xset_name_with_model)).apply ((xmodel)))
                                      (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ("indexes"))) ((xindexes)))
                                    ((xname).eq "constraints").if
                                      (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ("constraints"))) ((((unsupported)).apply (((((xcon).xclone)).apply)) ((xcon)) ((((xmodel).x_meta).xconstraints)))))
                                      (((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xname)))) ((((unsupported)).apply ((((xmodel).x_meta).xoriginal_attrs)) ((xname)))))
                        (xexclude_rels).if
                          (((unsupported)).apply ((xkey)) ((((unsupported)).apply ("unique_together") ("index_together") ("order_with_respect_to"))))
                            (((unsupported)).apply ((xkey)) ((xoptions))).if
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) ((xkey)))))))))
                          (((unsupported)).apply (((((xoptions).xget)).apply ("order_with_respect_to"))) ((((unsupported)).apply (((xfield).xname)) ((xfield)) ((((xmodel).x_meta).xprivate_fields))))).if
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xoptions)) ("order_with_respect_to"))))))))
                        xflatten_bases.write
                          [xmodel]
                            memory > xbases
                            seq > @
                              seq
                                xbases.write (((unsupported)).apply)
                                (((unsupported)).apply ((xbase)) (((xmodel).x__bases__)))
                                  ((((xhasattr)).apply ((xbase)) ("_meta")).and (((xbase).x_meta).xabstract)).if
                                    bogusForceDataize.write ((((xbases).xextend)).apply ((((xflatten_bases)).apply ((xbase)))))
                                    bogusForceDataize.write ((((xbases).xappend)).apply ((xbase)))
                                (((unsupported)).apply ((xbases)))
                        xflattened_bases.write (((unsupported)).apply ((xsorted)) ((((xset)).apply ((((xflatten_bases)).apply ((xmodel)))))) ((((unsupported)).apply ((((((xmodel).x__mro__).xindex)).apply ((xx)))))))
                        xbases.write (((xtuple)).apply ((((unsupported)).apply (((((xhasattr)).apply ((xbase)) ("_meta")).if (((xbase).x_meta).xlabel_lower) (xbase))) ((xbase)) ((xflattened_bases)))))
                        ((((xany)).apply ((((unsupported)).apply (((((xisinstance)).apply ((xbase)) ((xstr))).or (((xissubclass)).apply ((xbase)) (((xmodels).xModel))))) ((xbase)) ((xbases))))).not).if
                          xbases.write (((unsupported)).apply (((xmodels).xModel)))
                        xmanagers.write (((unsupported)).apply)
                        xmanager_names.write (((xset)).apply)
                        xdefault_manager_shim.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((xmanager)) ((((xmodel).x_meta).xmanagers)))
                          seq
                            (((unsupported)).apply (((xmanager).xname)) ((xmanager_names))).if
                              (((unsupported)).apply)
                              ((xmanager).xuse_in_migrations).if
                                seq
                                  xnew_manager.write ((((xcopy).xcopy)).apply ((xmanager)))
                                  bogusForceDataize.write ((((xnew_manager).x_set_creation_counter)).apply)
                                ((((unsupported)).apply ((xmanager)) (((xmodel).x_base_manager))).or (((unsupported)).apply ((xmanager)) (((xmodel).x_default_manager)))).if
                                  seq
                                    xnew_manager.write ((((xmodels).xManager)).apply)
                                    (((unsupported)).apply (((xnew_manager).xmodel)) (((xmanager).xmodel)))
                                    (((unsupported)).apply (((xnew_manager).xname)) (((xmanager).xname)))
                                    (((unsupported)).apply ((xmanager)) (((xmodel).x_default_manager))).if
                                      xdefault_manager_shim.write (xnew_manager)
                                  (((unsupported)).apply)
                            bogusForceDataize.write ((((xmanager_names).xadd)).apply (((xmanager).xname)))
                            bogusForceDataize.write ((((xmanagers).xappend)).apply ((((unsupported)).apply (((xmanager).xname)) ((xnew_manager)))))
                        ((xmanagers).eq (((unsupported)).apply ((((unsupported)).apply ("objects") ((xdefault_manager_shim)))))).if
                          xmanagers.write (((unsupported)).apply)
                        (((unsupported)).apply ((((xcls)).apply ((((xmodel).x_meta).xapp_label)) ((((xmodel).x_meta).xobject_name)) ((xfields)) ((xoptions)) ((xbases)) ((xmanagers)))))
                xconstruct_managers.write
                  [xself]
                    memory > xmanager_class
                    memory > xqs_class
                    memory > xsorted_managers
                    seq > @
                      seq
                        unsupported
                        xsorted_managers.write (((unsupported)).apply ((xsorted)) (((xself).xmanagers)) ((((unsupported)).apply (((((unsupported)).apply ((xv)) (1)).xcreation_counter)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmgr_name)) ((xmanager)))) ((xsorted_managers)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xas_manager)) ((xmanager_path)) ((xqs_path)) ((xargs)) ((xkwargs)))) (((((xmanager).xdeconstruct)).apply)))
                            (xas_manager).if
                              seq
                                xqs_class.write (((ximport_string)).apply ((xqs_path)))
                                (((unsupported)).apply ((((unsupported)).apply ((xmgr_name)) (((((xqs_class).xas_manager)).apply)))))
                              seq
                                xmanager_class.write (((ximport_string)).apply ((xmanager_path)))
                                (((unsupported)).apply ((((unsupported)).apply ((xmgr_name)) ((((xmanager_class)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))))
                xclone.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x__class__)) (((xself).xapp_label)) (((xself).xname)) ((((xdict)).apply (((xself).xfields)))) ((((xdict)).apply (((xself).xoptions)))) (((xself).xbases)) ((((xlist)).apply (((xself).xmanagers)))))))
                xrender.write
                  [xself xapps]
                    memory > xbases
                    memory > xmeta_contents
                    memory > xmeta
                    memory > xbody
                    seq > @
                      seq
                        unsupported
                        xmeta_contents.write (((unsupported)).apply ("app_label") (((xself).xapp_label)) ("apps") ((xapps)) (((xself).xoptions)))
                        xmeta.write (((xtype)).apply ("Meta") ((((unsupported)).apply)) ((xmeta_contents)))
                        (((unsupported)).apply ((xLookupError)))
                          xbases.write (((xtuple)).apply ((((unsupported)).apply (((((xisinstance)).apply ((xbase)) ((xstr))).if ((((xapps).xget_model)).apply ((xbase))) (xbase))) ((xbase)) (((xself).xbases)))))
                          (((unsupported)).apply ((((xInvalidBasesError)).apply (("Cannot resolve one or more bases from %r".mod (((unsupported)).apply (((xself).xbases))))))))
                        xbody.write (((unsupported)).apply ((xname)) (((((xfield).xclone)).apply)) ((((unsupported)).apply ((xname)) ((xfield)))) ((((((xself).xfields).xitems)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xbody)) ("Meta"))) ((xmeta)))
                        (((unsupported)).apply ((((unsupported)).apply ((xbody)) ("__module__"))) ("__fake__"))
                        bogusForceDataize.write ((((xbody).xupdate)).apply (((((xself).xconstruct_managers)).apply)))
                        (((unsupported)).apply ((((xtype)).apply (((xself).xname)) ((xbases)) ((xbody)))))
                xget_index_by_name.write
                  [xself xname]
                    seq > @
                      seq
                        (((unsupported)).apply ((xindex)) ((((unsupported)).apply (((xself).xoptions)) ("indexes"))))
                          (((xindex).xname).eq (xname)).if
                            (((unsupported)).apply ((xindex)))
                        (((unsupported)).apply ((((xValueError)).apply (("No index named %s on model %s".mod (((unsupported)).apply ((xname)) (((xself).xname))))))))
                xget_constraint_by_name.write
                  [xself xname]
                    seq > @
                      seq
                        (((unsupported)).apply ((xconstraint)) ((((unsupported)).apply (((xself).xoptions)) ("constraints"))))
                          (((xconstraint).xname).eq (xname)).if
                            (((unsupported)).apply ((xconstraint)))
                        (((unsupported)).apply ((((xValueError)).apply (("No constraint named %s on model %s".mod (((unsupported)).apply ((xname)) (((xself).xname))))))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (("<%s: '%s.%s'>".mod (((unsupported)).apply ((((xself).x__class__).x__name__)) (((xself).xapp_label)) (((xself).xname))))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((((((((xself).xapp_label).eq ((xother).xapp_label)).and (((xself).xname).eq ((xother).xname))).and ((((xlen)).apply (((xself).xfields))).eq (((xlen)).apply (((xother).xfields))))).and (((xall)).apply ((((unsupported)).apply ((((xk1).eq (xk2)).and ((((unsupported)).apply (((((xf1).xdeconstruct)).apply)) ((((unsupported)).apply (1)))).eq (((unsupported)).apply (((((xf2).xdeconstruct)).apply)) ((((unsupported)).apply (1))))))) ((((unsupported)).apply ((((unsupported)).apply ((xk1)) ((xf1)))) ((((unsupported)).apply ((xk2)) ((xf2)))))) ((((xzip)).apply ((((xsorted)).apply ((((((xself).xfields).xitems)).apply)))) ((((xsorted)).apply ((((((xother).xfields).xitems)).apply)))))))))).and (((xself).xoptions).eq ((xother).xoptions))).and (((xself).xbases).eq ((xother).xbases))).and (((xself).xmanagers).eq ((xother).xmanagers)))))