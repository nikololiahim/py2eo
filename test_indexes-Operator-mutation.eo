memory > xGistIndex
memory > xIndexTestMixin
memory > xSearchVectorField
memory > xCharFieldModel
memory > xCast
memory > xSearchVector
memory > xLower
memory > xBTreeIndex
memory > xPostgreSQLSimpleTestCase
memory > xScene
memory > xPostgreSQLTestCase
memory > xregister_lookup
memory > xCollate
memory > xBrinIndex
memory > xlength
memory > xGinIndex
memory > xmodify_settings
memory > xBloomIndex
memory > xLength
memory > xValueError
memory > xstr
memory > xQ
memory > xIntegerArrayModel
memory > xCharField
memory > xHashIndex
memory > xTextFieldModel
memory > xconnection
memory > xIndex
memory > xOpClass
memory > xpath
memory > xcursor
memory > xNotSupportedError
memory > xF
memory > xargs
memory > xmock
memory > xeditor
memory > xSpGistIndex
memory > xkwargs
[] > test_indexes
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xindex_class
        memory > xtest_gin_index
        memory > xtest_invalid_columns_value
        memory > xtest_deconstruction_no_customization
        memory > xtest_name_auto_generation
        memory > xtest_op_class_descending_collation
        memory > xtest_deconstruction
        memory > xtest_gist_include
        memory > xtest_invalid_fields
        memory > xtest_invalid_columns
        memory > xtest_spgist_include
        memory > xtest_op_class_descending_partial
        memory > xtest_gin_parameters
        memory > xtest_gist_include_not_supported
        memory > xtest_bloom_parameters
        memory > xtest_partial_gin_index
        memory > xtest_bloom_index
        memory > xtest_hash_index
        memory > xtest_partial_gin_index_with_tablespace
        memory > xget_opclass_query
        memory > xtest_invalid_pages_per_range
        memory > xtest_trigram_op_class_gin_index
        memory > xtest_gist_parameters
        memory > xtest_gin_fastupdate
        memory > xtest_btree_index
        memory > xtest_op_class_descending_partial_tablespace
        memory > xtest_spgist_parameters
        memory > xtest_gist_index
        memory > xtest_deconstruction_with_expressions_no_customization
        memory > xtest_cast_search_vector_gin_index
        memory > xtest_suffix
        memory > xtest_spgist_index
        memory > xtest_hash_parameters
        memory > xtest_brin_parameters
        memory > xtest_spgist_include_not_supported
        memory > xtest_invalid_length
        memory > xtest_tsvector_op_class_gist_index
        memory > xtest_btree_parameters
        memory > xget_constraints
        memory > xtest_brin_index
        memory > xtest_op_class
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xtest_name_auto_generation.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply (((xself).xindex_class)) ((((unsupported)).apply ("field"))))
                        bogusForceDataize.write ((((xindex).xset_name_with_model)).apply ((xCharFieldModel)))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply (((xindex).xname)) (("postgres_te_field_[0-9a-f]{6}_%s".mod (((xself).xindex_class).xsuffix))))
                xtest_deconstruction_no_customization.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply (((xself).xindex_class)) ((((unsupported)).apply ("title"))) (("test_title_%s".mod (((xself).xindex_class).xsuffix))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xindex).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) (("django.contrib.postgres.indexes.%s".mod (((xself).xindex_class).x__name__))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("fields") ((((unsupported)).apply ("title"))) ("name") (("test_title_%s".mod (((xself).xindex_class).xsuffix))))))
                xtest_deconstruction_with_expressions_no_customization.write
                  [xself]
                    memory > xname
                    memory > xindex
                    seq > @
                      seq
                        xname.write "test_title_{self.index_class.suffix}"
                        xindex.write (((unsupported)).apply (((xself).xindex_class)) ((((xLower)).apply ("title"))) ((xname)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xindex).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.indexes.{self.index_class.__name__}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((xLower)).apply ("title"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("name") ((xname)))))
            (((unsupported)).apply ((xIndexTestMixin)) ((xPostgreSQLSimpleTestCase)))
              seq
                xindex_class.write (xBloomIndex)
                xtest_suffix.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xBloomIndex).xsuffix)) ("bloom"))
                xtest_deconstruction.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply ((xBloomIndex)) ((((unsupported)).apply ("title"))) ("test_bloom") (80) ((((unsupported)).apply (4))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xindex).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.indexes.BloomIndex"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("fields") ((((unsupported)).apply ("title"))) ("name") ("test_bloom") ("length") (80) ("columns") ((((unsupported)).apply (4))))))
                xtest_invalid_fields.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Bloom indexes support a maximum of 32 fields."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xBloomIndex)) (((((unsupported)).apply ("title")).mul 33)) ("test_bloom"))
                xtest_invalid_columns.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "BloomIndex.columns must be a list or tuple."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xBloomIndex)) ((((unsupported)).apply ("title"))) ("test_bloom") ("x"))
                        xmsg.write "BloomIndex.columns cannot have more values than fields."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xBloomIndex)) ((((unsupported)).apply ("title"))) ("test_bloom") ((((unsupported)).apply (4) (3))))
                xtest_invalid_columns_value.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "BloomIndex.columns must contain integers from 1 to 4095."
                        (((unsupported)).apply ((xlength)) ((((unsupported)).apply (0) (4096))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xlength)))) (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                            (((unsupported)).apply ((xBloomIndex)) ((((unsupported)).apply ("title"))) ("test_bloom") ((((unsupported)).apply ((xlength)))))
                xtest_invalid_length.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "BloomIndex.length must be None or an integer from 1 to 4096."
                        (((unsupported)).apply ((xlength)) ((((unsupported)).apply (0) (4097))))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xlength)))) (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                            (((unsupported)).apply ((xBloomIndex)) ((((unsupported)).apply ("title"))) ("test_bloom") ((xlength)))
            (((unsupported)).apply ((xIndexTestMixin)) ((xPostgreSQLSimpleTestCase)))
              seq
                xindex_class.write (xBrinIndex)
                xtest_suffix.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xBrinIndex).xsuffix)) ("brin"))
                xtest_deconstruction.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply ((xBrinIndex)) ((((unsupported)).apply ("title"))) ("test_title_brin") (TRUE) (16))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xindex).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.indexes.BrinIndex"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("fields") ((((unsupported)).apply ("title"))) ("name") ("test_title_brin") ("autosummarize") (TRUE) ("pages_per_range") (16))))
                xtest_invalid_pages_per_range.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("pages_per_range must be None or a positive integer"))))
                        (((unsupported)).apply ((xBrinIndex)) ((((unsupported)).apply ("title"))) ("test_title_brin") (0))
            (((unsupported)).apply ((xIndexTestMixin)) ((xPostgreSQLSimpleTestCase)))
              seq
                xindex_class.write (xBTreeIndex)
                xtest_suffix.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xBTreeIndex).xsuffix)) ("btree"))
                xtest_deconstruction.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply ((xBTreeIndex)) ((((unsupported)).apply ("title"))) ("test_title_btree") (80))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xindex).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.indexes.BTreeIndex"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("fields") ((((unsupported)).apply ("title"))) ("name") ("test_title_btree") ("fillfactor") (80))))
            (((unsupported)).apply ((xIndexTestMixin)) ((xPostgreSQLSimpleTestCase)))
              seq
                xindex_class.write (xGinIndex)
                xtest_suffix.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xGinIndex).xsuffix)) ("gin"))
                xtest_deconstruction.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply ((xGinIndex)) ((((unsupported)).apply ("title"))) ("test_title_gin") (TRUE) (128))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xindex).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.indexes.GinIndex"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("fields") ((((unsupported)).apply ("title"))) ("name") ("test_title_gin") ("fastupdate") (TRUE) ("gin_pending_list_limit") (128))))
            (((unsupported)).apply ((xIndexTestMixin)) ((xPostgreSQLSimpleTestCase)))
              seq
                xindex_class.write (xGistIndex)
                xtest_suffix.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xGistIndex).xsuffix)) ("gist"))
                xtest_deconstruction.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply ((xGistIndex)) ((((unsupported)).apply ("title"))) ("test_title_gist") (FALSE) (80))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xindex).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.indexes.GistIndex"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("fields") ((((unsupported)).apply ("title"))) ("name") ("test_title_gist") ("buffering") (FALSE) ("fillfactor") (80))))
            (((unsupported)).apply ((xIndexTestMixin)) ((xPostgreSQLSimpleTestCase)))
              seq
                xindex_class.write (xHashIndex)
                xtest_suffix.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xHashIndex).xsuffix)) ("hash"))
                xtest_deconstruction.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply ((xHashIndex)) ((((unsupported)).apply ("title"))) ("test_title_hash") (80))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xindex).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.indexes.HashIndex"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("fields") ((((unsupported)).apply ("title"))) ("name") ("test_title_hash") ("fillfactor") (80))))
            (((unsupported)).apply ((xIndexTestMixin)) ((xPostgreSQLSimpleTestCase)))
              seq
                xindex_class.write (xSpGistIndex)
                xtest_suffix.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((xSpGistIndex).xsuffix)) ("spgist"))
                xtest_deconstruction.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply ((xSpGistIndex)) ((((unsupported)).apply ("title"))) ("test_title_spgist") (80))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xindex).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.contrib.postgres.indexes.SpGistIndex"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("fields") ((((unsupported)).apply ("title"))) ("name") ("test_title_spgist") ("fillfactor") (80))))
            (((unsupported)).apply ((xPostgreSQLTestCase)) ((((unsupported)).apply ((xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.postgres"))))))
              seq
                xget_opclass_query.write (((unsupported)).apply)
                xget_constraints.write
                  [xself xtable]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xconnection).xcursor)).apply)) ((xcursor)))
                          (((unsupported)).apply ((((((xconnection).xintrospection).xget_constraints)).apply ((xcursor)) ((xtable)))))
                xtest_gin_index.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("field") (((((xself).xget_constraints)).apply ((((xIntegerArrayModel).x_meta).xdb_table)))))
                        xindex_name.write "integer_array_model_field_gin"
                        xindex.write (((unsupported)).apply ((xGinIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xIntegerArrayModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xIntegerArrayModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xGinIndex).xsuffix)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xIntegerArrayModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xIntegerArrayModel).x_meta).xdb_table)))))
                xtest_gin_fastupdate.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "integer_array_gin_fastupdate"
                        xindex.write (((unsupported)).apply ((xGinIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) (FALSE))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xIntegerArrayModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xIntegerArrayModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) ("gin"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("options"))) ((((unsupported)).apply ("fastupdate=off"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xIntegerArrayModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xIntegerArrayModel).x_meta).xdb_table)))))
                xtest_partial_gin_index.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      (((unsupported)).apply ((((xregister_lookup)).apply ((xCharField)) ((xLength)))))
                        seq
                          xindex_name.write "char_field_gin_partial_idx"
                          xindex.write (((unsupported)).apply ((xGinIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) ((((unsupported)).apply ((xQ)) (40))))
                          (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                            bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                          xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) ("gin"))
                          (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                            bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_partial_gin_index_with_tablespace.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      (((unsupported)).apply ((((xregister_lookup)).apply ((xCharField)) ((xLength)))))
                        seq
                          xindex_name.write "char_field_gin_partial_idx"
                          xindex.write (((unsupported)).apply ((xGinIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) ((((unsupported)).apply ((xQ)) (40))) ("pg_default"))
                          (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                            seq
                              bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("TABLESPACE \"pg_default\" ") ((((xstr)).apply (((((xindex).xcreate_sql)).apply ((xCharFieldModel)) ((xeditor)))))))
                          xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) ("gin"))
                          (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                            bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_gin_parameters.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "integer_array_gin_params"
                        xindex.write (((unsupported)).apply ((xGinIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) (TRUE) (64) ("pg_default"))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          seq
                            bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xIntegerArrayModel)) ((xindex)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (") WITH (gin_pending_list_limit = 64, fastupdate = on) TABLESPACE") ((((xstr)).apply (((((xindex).xcreate_sql)).apply ((xIntegerArrayModel)) ((xeditor)))))))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xIntegerArrayModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) ("gin"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("options"))) ((((unsupported)).apply ("gin_pending_list_limit=64") ("fastupdate=on"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xIntegerArrayModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xIntegerArrayModel).x_meta).xdb_table)))))
                xtest_trigram_op_class_gin_index.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "trigram_op_class_gin"
                        xindex.write (((unsupported)).apply ((xGinIndex)) ((((unsupported)).apply ((xOpClass)) ((((xF)).apply ("scene"))) ("gin_trgm_ops"))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xScene)) ((xindex)))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply ((xindex_name)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("gin_trgm_ops") ((xindex_name)))))))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xindex_name)) ((xconstraints)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xGinIndex).xsuffix)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xScene)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                xtest_cast_search_vector_gin_index.write
                  [xself]
                    memory > xindex
                    memory > xindex_name
                    memory > xsql
                    memory > xtable
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "cast_search_vector_gin"
                        xindex.write (((unsupported)).apply ((xGinIndex)) ((((xCast)).apply ("field") ((((xSearchVectorField)).apply)))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          seq
                            bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xTextFieldModel)) ((xindex)))
                            xsql.write ((((xindex).xcreate_sql)).apply ((xTextFieldModel)) ((xeditor)))
                        xtable.write (((xTextFieldModel).x_meta).xdb_table)
                        xconstraints.write ((((xself).xget_constraints)).apply ((xtable)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xindex_name)) ((xconstraints)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xGinIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xsql).xreferences_column)).apply ((xtable)) ("field"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("::tsvector") ((((xstr)).apply ((xsql)))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xTextFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((xtable)))))
                xtest_bloom_index.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "char_field_model_field_bloom"
                        xindex.write (((unsupported)).apply ((xBloomIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xBloomIndex).xsuffix)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_bloom_parameters.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "char_field_model_field_bloom_params"
                        xindex.write (((unsupported)).apply ((xBloomIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) (512) ((((unsupported)).apply (3))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xBloomIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("options"))) ((((unsupported)).apply ("length=512") ("col1=3"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_brin_index.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "char_field_model_field_brin"
                        xindex.write (((unsupported)).apply ((xBrinIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) (4))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xBrinIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("options"))) ((((unsupported)).apply ("pages_per_range=4"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_brin_parameters.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "char_field_brin_params"
                        xindex.write (((unsupported)).apply ((xBrinIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) (TRUE))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xBrinIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("options"))) ((((unsupported)).apply ("autosummarize=on"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_btree_index.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("field") (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                        xindex_name.write "char_field_model_field_btree"
                        xindex.write (((unsupported)).apply ((xBTreeIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xBTreeIndex).xsuffix)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_btree_parameters.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "integer_array_btree_fillfactor"
                        xindex.write (((unsupported)).apply ((xBTreeIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) (80))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xBTreeIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("options"))) ((((unsupported)).apply ("fillfactor=80"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_gist_index.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("field") (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                        xindex_name.write "char_field_model_field_gist"
                        xindex.write (((unsupported)).apply ((xGistIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xGistIndex).xsuffix)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_gist_parameters.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "integer_array_gist_buffering"
                        xindex.write (((unsupported)).apply ((xGistIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) (TRUE) (80))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xGistIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("options"))) ((((unsupported)).apply ("buffering=on") ("fillfactor=80"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_gist_include.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      (((unsupported)).apply)
                        xindex_name.write "scene_gist_include_setting"
                        xindex.write (((unsupported)).apply ((xGistIndex)) ((xindex_name)) ((((unsupported)).apply ("scene"))) ((((unsupported)).apply ("setting"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xScene)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xindex_name)) ((xconstraints)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xGistIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("columns"))) ((((unsupported)).apply ("scene") ("setting"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xScene)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                xtest_gist_include_not_supported.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xmsg
                    seq > @
                      seq
                        xindex_name.write "gist_include_exception"
                        xindex.write (((unsupported)).apply ((xGistIndex)) ((((unsupported)).apply ("scene"))) ((xindex_name)) ((((unsupported)).apply ("setting"))))
                        xmsg.write "Covering GiST indexes require PostgreSQL 12-."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) ((xmsg)))))
                          (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.backends.postgresql.features.DatabaseFeatures.supports_covering_gist_indexes") (FALSE))))
                            (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                              bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xScene)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                xtest_tsvector_op_class_gist_index.write
                  [xself]
                    memory > xindex
                    memory > xindex_name
                    memory > xsql
                    memory > xtable
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "tsvector_op_class_gist"
                        xindex.write (((unsupported)).apply ((xGistIndex)) ((((unsupported)).apply ((xOpClass)) ((((unsupported)).apply ((xSearchVector)) ("scene") ("setting") ("english"))) ("tsvector_ops"))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          seq
                            bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xScene)) ((xindex)))
                            xsql.write ((((xindex).xcreate_sql)).apply ((xScene)) ((xeditor)))
                        xtable.write (((xScene).x_meta).xdb_table)
                        xconstraints.write ((((xself).xget_constraints)).apply ((xtable)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xindex_name)) ((xconstraints)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xGistIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xsql).xreferences_column)).apply ((xtable)) ("scene"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xsql).xreferences_column)).apply ((xtable)) ("setting"))) (TRUE))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xScene)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((xtable)))))
                xtest_hash_index.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("field") (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                        xindex_name.write "char_field_model_field_hash"
                        xindex.write (((unsupported)).apply ((xHashIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xHashIndex).xsuffix)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_hash_parameters.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "integer_array_hash_fillfactor"
                        xindex.write (((unsupported)).apply ((xHashIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) (80))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xCharFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xHashIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("options"))) ((((unsupported)).apply ("fillfactor=80"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xCharFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xCharFieldModel).x_meta).xdb_table)))))
                xtest_spgist_index.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("field") (((((xself).xget_constraints)).apply ((((xTextFieldModel).x_meta).xdb_table)))))
                        xindex_name.write "text_field_model_field_spgist"
                        xindex.write (((unsupported)).apply ((xSpGistIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xTextFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xTextFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xSpGistIndex).xsuffix)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xTextFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xTextFieldModel).x_meta).xdb_table)))))
                xtest_spgist_parameters.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "text_field_model_spgist_fillfactor"
                        xindex.write (((unsupported)).apply ((xSpGistIndex)) ((((unsupported)).apply ("field"))) ((xindex_name)) (80))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xTextFieldModel)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xTextFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xSpGistIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("options"))) ((((unsupported)).apply ("fillfactor=80"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xTextFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xTextFieldModel).x_meta).xdb_table)))))
                xtest_spgist_include.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      (((unsupported)).apply)
                        xindex_name.write "scene_spgist_include_setting"
                        xindex.write (((unsupported)).apply ((xSpGistIndex)) ((xindex_name)) ((((unsupported)).apply ("scene"))) ((((unsupported)).apply ("setting"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xScene)) ((xindex)))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xindex_name)) ((xconstraints)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("type"))) (((xSpGistIndex).xsuffix)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("columns"))) ((((unsupported)).apply ("scene") ("setting"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xScene)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                xtest_spgist_include_not_supported.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xmsg
                    seq > @
                      seq
                        xindex_name.write "spgist_include_exception"
                        xindex.write (((unsupported)).apply ((xSpGistIndex)) ((((unsupported)).apply ("scene"))) ((xindex_name)) ((((unsupported)).apply ("setting"))))
                        xmsg.write "Covering SP-GiST indexes require PostgreSQL 14-."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) ((xmsg)))))
                          (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.backends.postgresql.features.DatabaseFeatures.supports_covering_spgist_indexes") (FALSE))))
                            (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                              bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xScene)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((((xScene).x_meta).xdb_table)))))
                xtest_op_class.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    seq > @
                      seq
                        xindex_name.write "test_op_class"
                        xindex.write (((unsupported)).apply ((xIndex)) ((((unsupported)).apply ((xOpClass)) ((((xLower)).apply ("field"))) ("text_pattern_ops"))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xTextFieldModel)) ((xindex)))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply ((xindex_name)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("text_pattern_ops") ((xindex_name)))))))
                xtest_op_class_descending_collation.write
                  [xself]
                    memory > xindex
                    memory > xcollation
                    memory > xindex_name
                    memory > xtable
                    memory > xconstraints
                    seq > @
                      seq
                        xcollation.write ((((((xconnection).xfeatures).xtest_collations).xget)).apply ("non_default"))
                        ((xcollation).not).if
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("This backend does not support case-insensitive collations."))
                        xindex_name.write "test_op_class_descending_collation"
                        xindex.write (((unsupported)).apply ((xIndex)) ((((unsupported)).apply ((xCollate)) ((((unsupported)).apply (((((unsupported)).apply ((xOpClass)) ((((xLower)).apply ("field"))) ("text_pattern_ops")).xdesc)) (TRUE))) ((xcollation)))) ((xindex_name)))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          seq
                            bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xTextFieldModel)) ((xindex)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (("COLLATE %s".mod ((((xeditor).xquote_name)).apply ((xcollation))))) ((((xstr)).apply (((((xindex).xcreate_sql)).apply ((xTextFieldModel)) ((xeditor)))))))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply ((xindex_name)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("text_pattern_ops") ((xindex_name)))))))
                        xtable.write (((xTextFieldModel).x_meta).xdb_table)
                        xconstraints.write ((((xself).xget_constraints)).apply ((xtable)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xindex_name)) ((xconstraints)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("orders"))) ((((unsupported)).apply ("DESC"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xremove_index)).apply ((xTextFieldModel)) ((xindex)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xindex_name)) (((((xself).xget_constraints)).apply ((xtable)))))
                xtest_op_class_descending_partial.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "test_op_class_descending_partial"
                        xindex.write (((unsupported)).apply ((xIndex)) (((((((unsupported)).apply ((xOpClass)) ((((xLower)).apply ("field"))) ("text_pattern_ops")).xdesc)).apply)) ((xindex_name)) ((((unsupported)).apply ((xQ)) ("China"))))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xTextFieldModel)) ((xindex)))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply ((xindex_name)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("text_pattern_ops") ((xindex_name)))))))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xTextFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xindex_name)) ((xconstraints)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("orders"))) ((((unsupported)).apply ("DESC"))))
                xtest_op_class_descending_partial_tablespace.write
                  [xself]
                    memory > xindex_name
                    memory > xindex
                    memory > xconstraints
                    seq > @
                      seq
                        xindex_name.write "test_op_class_descending_partial_tablespace"
                        xindex.write (((unsupported)).apply ((xIndex)) ((((unsupported)).apply ((xOpClass)) (((((((xLower)).apply ("field")).xdesc)).apply)) ("text_pattern_ops"))) ((xindex_name)) ((((unsupported)).apply ((xQ)) ("China"))) ("pg_default"))
                        (((unsupported)).apply (((((xconnection).xschema_editor)).apply)) ((xeditor)))
                          seq
                            bogusForceDataize.write ((((xeditor).xadd_index)).apply ((xTextFieldModel)) ((xindex)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("TABLESPACE \"pg_default\" ") ((((xstr)).apply (((((xindex).xcreate_sql)).apply ((xTextFieldModel)) ((xeditor)))))))
                        (((unsupported)).apply ((((((xeditor).xconnection).xcursor)).apply)) ((xcursor)))
                          seq
                            bogusForceDataize.write ((((xcursor).xexecute)).apply (((xself).xget_opclass_query)) ((((unsupported)).apply ((xindex_name)))))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply (((((xcursor).xfetchall)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("text_pattern_ops") ((xindex_name)))))))
                        xconstraints.write ((((xself).xget_constraints)).apply ((((xTextFieldModel).x_meta).xdb_table)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xindex_name)) ((xconstraints)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xconstraints)) ((xindex_name)))) ("orders"))) ((((unsupported)).apply ("DESC"))))