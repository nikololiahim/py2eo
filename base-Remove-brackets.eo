memory > xthreading
memory > xRuntimeError
memory > xstr
memory > xwarnings
memory > xNotImplementedError
memory > xNotSupportedError
memory > x_thread
memory > xpytz
memory > xzoneinfo
memory > xsids
memory > xmap
memory > xBaseDatabaseValidation
memory > xlen
memory > xTypeError
memory > xImportError
memory > xDatabaseErrorWrapper
memory > xdatetime
memory > xlist
memory > xfunc
memory > xdeque
memory > xcallable
memory > xtype
memory > xset
memory > xsettings
memory > xDatabaseError
memory > xhasattr
memory > xtime
memory > xutils
memory > xconnection_created
memory > xargs
memory > xTransactionManagementError
memory > xImproperlyConfigured
memory > xkwargs
[] > base
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xensure_connection
        memory > xcreation_class
        memory > xwrap_database_errors
        memory > xtimezone_name
        memory > xsavepoint_commit
        memory > xclient_class
        memory > xops_class
        memory > xallow_thread_sharing
        memory > xschema_editor
        memory > xvalidation_class
        memory > xcopy
        memory > x_rollback
        memory > xinc_thread_sharing
        memory > xmake_debug_cursor
        memory > xtimezone
        memory > xtimezone_constructor
        memory > x__repr__
        memory > xclean_savepoints
        memory > x_cursor
        memory > xget_database_version
        memory > xcheck_database_version_supported
        memory > xclose_if_health_check_failed
        memory > x_savepoint_allowed
        memory > xinit_connection_state
        memory > xtemporary_connection
        memory > xsavepoint
        memory > xexecute_wrapper
        memory > x_set_autocommit
        memory > xdata_type_check_constraints
        memory > xcreate_cursor
        memory > xrun_and_clear_commit_hooks
        memory > xclose
        memory > xmake_cursor
        memory > xis_usable
        memory > xcheck_settings
        memory > xconnect
        memory > xvalidate_no_atomic_block
        memory > xdisplay_name
        memory > xops
        memory > xcheck_constraints
        memory > xvalidate_thread_sharing
        memory > xintrospection_class
        memory > xprepare_database
        memory > xdata_types
        memory > x_close
        memory > xSchemaEditorClass
        memory > xRAN_DB_VERSION_CHECK
        memory > xconstraint_checks_disabled
        memory > xsavepoint_rollback
        memory > xdisable_constraint_checking
        memory > x_savepoint_commit
        memory > xcursor
        memory > xset_rollback
        memory > xvendor
        memory > xget_autocommit
        memory > xget_rollback
        memory > xensure_timezone
        memory > xqueries_limit
        memory > x_nodb_cursor
        memory > xon_commit
        memory > x_savepoint_rollback
        memory > xenable_constraint_checking
        memory > xset_autocommit
        memory > x_commit
        memory > x__init__
        memory > xget_new_connection
        memory > xfeatures_class
        memory > xchunked_cursor
        memory > xget_connection_params
        memory > x_prepare_cursor
        memory > xcommit
        memory > xqueries
        memory > xdec_thread_sharing
        memory > xvalidate_no_broken_transaction
        memory > xNO_DB_ALIAS
        memory > xqueries_logged
        memory > xclose_if_unusable_or_obsolete
        memory > xdata_types_suffix
        memory > xrollback
        memory > x_savepoint
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xNO_DB_ALIAS.write "__no_db__"
            xRAN_DB_VERSION_CHECK.write (xset)
            xtimezone_constructor.write
              [xtzname]
                seq > @
                  seq
                    ((xsettings).xUSE_DEPRECATED_PYTZ).if
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xpytz).xtimezone)).apply ((xtzname)))))
                    (((unsupported)).apply (((((xzoneinfo).xZoneInfo)).apply ((xtzname)))))
            (((unsupported)).apply)
              seq
                unsupported
                xdata_types.write (((unsupported)).apply)
                xdata_types_suffix.write (((unsupported)).apply)
                xdata_type_check_constraints.write (((unsupported)).apply)
                xops.write "None: is there a None literal in the EO language?"
                xvendor.write "unknown"
                xdisplay_name.write "unknown"
                xSchemaEditorClass.write "None: is there a None literal in the EO language?"
                xclient_class.write "None: is there a None literal in the EO language?"
                xcreation_class.write "None: is there a None literal in the EO language?"
                xfeatures_class.write "None: is there a None literal in the EO language?"
                xintrospection_class.write "None: is there a None literal in the EO language?"
                xops_class.write "None: is there a None literal in the EO language?"
                xvalidation_class.write (xBaseDatabaseValidation)
                xqueries_limit.write 9000
                x__init__.write
                  [xself xsettings_dict xalias]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xsettings_dict)) ((xsettings_dict)))
                        (((unsupported)).apply (((xself).xalias)) ((xalias)))
                        (((unsupported)).apply (((xself).xqueries_log)) ((((unsupported)).apply ((xdeque)) (((xself).xqueries_limit)))))
                        (((unsupported)).apply (((xself).xforce_debug_cursor)) (FALSE))
                        (((unsupported)).apply (((xself).xautocommit)) (FALSE))
                        (((unsupported)).apply (((xself).xin_atomic_block)) (FALSE))
                        (((unsupported)).apply (((xself).xsavepoint_state)) (0))
                        (((unsupported)).apply (((xself).xsavepoint_ids)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xatomic_blocks)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xcommit_on_exit)) (TRUE))
                        (((unsupported)).apply (((xself).xneeds_rollback)) (FALSE))
                        (((unsupported)).apply (((xself).xclose_at)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xclosed_in_transaction)) (FALSE))
                        (((unsupported)).apply (((xself).xerrors_occurred)) (FALSE))
                        (((unsupported)).apply (((xself).xhealth_check_enabled)) (FALSE))
                        (((unsupported)).apply (((xself).xhealth_check_done)) (FALSE))
                        (((unsupported)).apply (((xself).x_thread_sharing_lock)) (((xthreading).xLock)))
                        (((unsupported)).apply (((xself).x_thread_sharing_count)) (0))
                        (((unsupported)).apply (((xself).x_thread_ident)) (((x_thread).xget_ident)))
                        (((unsupported)).apply (((xself).xrun_on_commit)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xrun_commit_hooks_on_set_autocommit_on)) (FALSE))
                        (((unsupported)).apply (((xself).xexecute_wrappers)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xclient)) (((((xself).xclient_class)).apply ((xself)))))
                        (((unsupported)).apply (((xself).xcreation)) (((((xself).xcreation_class)).apply ((xself)))))
                        (((unsupported)).apply (((xself).xfeatures)) (((((xself).xfeatures_class)).apply ((xself)))))
                        (((unsupported)).apply (((xself).xintrospection)) (((((xself).xintrospection_class)).apply ((xself)))))
                        (((unsupported)).apply (((xself).xops)) (((((xself).xops_class)).apply ((xself)))))
                        (((unsupported)).apply (((xself).xvalidation)) (((((xself).xvalidation_class)).apply ((xself)))))
                x__repr__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("<{self.__class__.__qualname__} vendor={self.vendor!r} alias={self.alias!r}>"))
                xensure_timezone.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (FALSE))
                xtimezone.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((xsettings).xUSE_TZ).not).if
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings_dict)) ("TIME_ZONE"))) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply ((((xdatetime).xtimezone).xutc)))
                            (((unsupported)).apply ((((xtimezone_constructor)).apply ((((unsupported)).apply (((xself).xsettings_dict)) ("TIME_ZONE"))))))
                xtimezone_name.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((xsettings).xUSE_TZ).not).if
                          (((unsupported)).apply (((xsettings).xTIME_ZONE)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings_dict)) ("TIME_ZONE"))) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply ("UTC"))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings_dict)) ("TIME_ZONE"))))
                xqueries_logged.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xself).xforce_debug_cursor).or ((xsettings).xDEBUG))))
                xqueries.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        ((((xlen)).apply (((xself).xqueries_log))).eq (((xself).xqueries_log).xmaxlen)).if
                          bogusForceDataize.write ((((xwarnings).xwarn)).apply (((("Limit for query logging exceeded, only the last {} queries will be returned.".xformat)).apply ((((xself).xqueries_log).xmaxlen)))))
                        (((unsupported)).apply ((((xlist)).apply (((xself).xqueries_log)))))
                xget_database_version.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BaseDatabaseWrapper may require a get_database_version method."))))
                xcheck_database_version_supported.write
                  [xself]
                    memory > xdb_version
                    memory > xmin_db_version
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((unsupported)).apply ((((xself).xfeatures).xminimum_database_version)) ("None: is there a None literal in the EO language?")).and (((xself).xget_database_version).less (((xself).xfeatures).xminimum_database_version))).if
                          seq
                            xdb_version.write (((".".xjoin)).apply ((((xmap)).apply ((xstr)) (((xself).xget_database_version)))))
                            xmin_db_version.write (((".".xjoin)).apply ((((xmap)).apply ((xstr)) ((((xself).xfeatures).xminimum_database_version)))))
                            (((unsupported)).apply ((((xNotSupportedError)).apply ("{self.display_name} {min_db_version} or later is required (found {db_version})."))))
                xget_connection_params.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BaseDatabaseWrapper may require a get_connection_params method"))))
                xget_new_connection.write
                  [xself xconn_params]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BaseDatabaseWrapper may require a get_new_connection method"))))
                xinit_connection_state.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xalias)) ((xRAN_DB_VERSION_CHECK))).if
                          seq
                            unsupported
                            bogusForceDataize.write ((((xRAN_DB_VERSION_CHECK).xadd)).apply (((xself).xalias)))
                xcreate_cursor.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BaseDatabaseWrapper may require a create_cursor method"))))
                xconnect.write
                  [xself]
                    memory > xconn_params
                    memory > xmax_age
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        unsupported
                        (((unsupported)).apply (((xself).xin_atomic_block)) (FALSE))
                        (((unsupported)).apply (((xself).xsavepoint_ids)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xatomic_blocks)) ((((unsupported)).apply)))
                        (((unsupported)).apply (((xself).xneeds_rollback)) (FALSE))
                        (((unsupported)).apply (((xself).xhealth_check_enabled)) ((((unsupported)).apply (((xself).xsettings_dict)) ("CONN_HEALTH_CHECKS"))))
                        xmax_age.write (((unsupported)).apply (((xself).xsettings_dict)) ("CONN_MAX_AGE"))
                        (((unsupported)).apply (((xself).xclose_at)) (((((unsupported)).apply ((xmax_age)) ("None: is there a None literal in the EO language?")).if "None: is there a None literal in the EO language?" (((xtime).xmonotonic).add (xmax_age)))))
                        (((unsupported)).apply (((xself).xclosed_in_transaction)) (FALSE))
                        (((unsupported)).apply (((xself).xerrors_occurred)) (FALSE))
                        (((unsupported)).apply (((xself).xhealth_check_done)) (TRUE))
                        xconn_params.write ((xself).xget_connection_params)
                        (((unsupported)).apply (((xself).xconnection)) (((((xself).xget_new_connection)).apply ((xconn_params)))))
                        bogusForceDataize.write ((((xself).xset_autocommit)).apply ((((unsupported)).apply (((xself).xsettings_dict)) ("AUTOCOMMIT"))))
                        unsupported
                        (((unsupported)).apply (((xconnection_created).xsend)) (((xself).x__class__)) ((xself)))
                        (((unsupported)).apply (((xself).xrun_on_commit)) ((((unsupported)).apply)))
                xcheck_settings.write
                  [xself]
                    seq > @
                      ((((unsupported)).apply ((((unsupported)).apply (((xself).xsettings_dict)) ("TIME_ZONE"))) ("None: is there a None literal in the EO language?")).and (((xsettings).xUSE_TZ).not)).if
                        (((unsupported)).apply ((((xImproperlyConfigured)).apply (("Connection '%s' cannot set TIME_ZONE because USE_TZ is False.".mod ((xself).xalias))))))
                xensure_connection.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply (((xself).xwrap_database_errors)))
                            unsupported
                x_prepare_cursor.write
                  [xself xcursor]
                    memory > xwrapped_cursor
                    seq > @
                      seq
                        (((unsupported)).apply)
                        unsupported
                        ((xself).xqueries_logged).if
                          xwrapped_cursor.write ((((xself).xmake_debug_cursor)).apply ((xcursor)))
                          xwrapped_cursor.write ((((xself).xmake_cursor)).apply ((xcursor)))
                        (((unsupported)).apply ((xwrapped_cursor)))
                x_cursor.write
                  [xself xname]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        unsupported
                        (((unsupported)).apply (((xself).xwrap_database_errors)))
                          (((unsupported)).apply (((((xself).x_prepare_cursor)).apply (((((xself).xcreate_cursor)).apply ((xname)))))))
                x_commit.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?")).if
                        (((unsupported)).apply (((xself).xwrap_database_errors)))
                          (((unsupported)).apply ((((xself).xconnection).xcommit)))
                x_rollback.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?")).if
                        (((unsupported)).apply (((xself).xwrap_database_errors)))
                          (((unsupported)).apply ((((xself).xconnection).xrollback)))
                x_close.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?")).if
                        (((unsupported)).apply (((xself).xwrap_database_errors)))
                          (((unsupported)).apply ((((xself).xconnection).xclose)))
                xcursor.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).x_cursor)))
                xcommit.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        (((unsupported)).apply (((xself).xerrors_occurred)) (FALSE))
                        (((unsupported)).apply (((xself).xrun_commit_hooks_on_set_autocommit_on)) (TRUE))
                xrollback.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        unsupported
                        unsupported
                        unsupported
                        (((unsupported)).apply (((xself).xerrors_occurred)) (FALSE))
                        (((unsupported)).apply (((xself).xneeds_rollback)) (FALSE))
                        (((unsupported)).apply (((xself).xrun_on_commit)) ((((unsupported)).apply)))
                xclose.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        unsupported
                        (((unsupported)).apply (((xself).xrun_on_commit)) ((((unsupported)).apply)))
                        (((xself).xclosed_in_transaction).or (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?"))).if
                          (((unsupported)).apply)
                        (((unsupported)).apply)
                          unsupported
                          ((xself).xin_atomic_block).if
                            seq
                              (((unsupported)).apply (((xself).xclosed_in_transaction)) (TRUE))
                              (((unsupported)).apply (((xself).xneeds_rollback)) (TRUE))
                            (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?"))
                x_savepoint.write
                  [xself xsid]
                    seq > @
                      (((unsupported)).apply (((xself).xcursor)) ((xcursor)))
                        bogusForceDataize.write ((((xcursor).xexecute)).apply ((((((xself).xops).xsavepoint_create_sql)).apply ((xsid)))))
                x_savepoint_rollback.write
                  [xself xsid]
                    seq > @
                      (((unsupported)).apply (((xself).xcursor)) ((xcursor)))
                        bogusForceDataize.write ((((xcursor).xexecute)).apply ((((((xself).xops).xsavepoint_rollback_sql)).apply ((xsid)))))
                x_savepoint_commit.write
                  [xself xsid]
                    seq > @
                      (((unsupported)).apply (((xself).xcursor)) ((xcursor)))
                        bogusForceDataize.write ((((xcursor).xexecute)).apply ((((((xself).xops).xsavepoint_commit_sql)).apply ((xsid)))))
                x_savepoint_allowed.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xfeatures).xuses_savepoints).and (((xself).xget_autocommit).not))))
                xsavepoint.write
                  [xself]
                    memory > xtid
                    memory > xsid
                    memory > xthread_ident
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((xself).x_savepoint_allowed).not).if
                          (((unsupported)).apply)
                        xthread_ident.write ((x_thread).xget_ident)
                        xtid.write ((((((xstr)).apply ((xthread_ident))).xreplace)).apply ("-") (""))
                        (((unsupported)).apply (((xself).xsavepoint_state)) (1))
                        xsid.write ("s%s_x%d".mod (((unsupported)).apply ((xtid)) (((xself).xsavepoint_state))))
                        unsupported
                        bogusForceDataize.write ((((xself).x_savepoint)).apply ((xsid)))
                        (((unsupported)).apply ((xsid)))
                xsavepoint_rollback.write
                  [xself xsid]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((xself).x_savepoint_allowed).not).if
                          (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).x_savepoint_rollback)).apply ((xsid)))
                        (((unsupported)).apply (((xself).xrun_on_commit)) ((((unsupported)).apply ((((unsupported)).apply ((xsids)) ((xfunc)))) ((((unsupported)).apply ((xsids)) ((xfunc)))) (((xself).xrun_on_commit)) ((((unsupported)).apply ((xsid)) ((xsids)))))))
                xsavepoint_commit.write
                  [xself xsid]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((xself).x_savepoint_allowed).not).if
                          (((unsupported)).apply)
                        unsupported
                        bogusForceDataize.write ((((xself).x_savepoint_commit)).apply ((xsid)))
                xclean_savepoints.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xsavepoint_state)) (0))
                x_set_autocommit.write
                  [xself xautocommit]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BaseDatabaseWrapper may require a _set_autocommit method"))))
                xget_autocommit.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        unsupported
                        (((unsupported)).apply (((xself).xautocommit)))
                xset_autocommit.write
                  [xself xautocommit xforce_begin_transaction_with_broken_autocommit]
                    memory > xstart_transaction_under_autocommit
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        unsupported
                        unsupported
                        unsupported
                        xstart_transaction_under_autocommit.write (((xforce_begin_transaction_with_broken_autocommit).and ((xautocommit).not)).and (((xhasattr)).apply ((xself)) ("_start_transaction_under_autocommit")))
                        (xstart_transaction_under_autocommit).if
                          unsupported
                          bogusForceDataize.write ((((xself).x_set_autocommit)).apply ((xautocommit)))
                        (((unsupported)).apply (((xself).xautocommit)) ((xautocommit)))
                        ((xautocommit).and ((xself).xrun_commit_hooks_on_set_autocommit_on)).if
                          seq
                            unsupported
                            (((unsupported)).apply (((xself).xrun_commit_hooks_on_set_autocommit_on)) (FALSE))
                xget_rollback.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((xself).xin_atomic_block).not).if
                          (((unsupported)).apply ((((xTransactionManagementError)).apply ("The rollback flag doesn't work outside of an 'atomic' block."))))
                        (((unsupported)).apply (((xself).xneeds_rollback)))
                xset_rollback.write
                  [xself xrollback]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xself).xin_atomic_block).not).if
                          (((unsupported)).apply ((((xTransactionManagementError)).apply ("The rollback flag doesn't work outside of an 'atomic' block."))))
                        (((unsupported)).apply (((xself).xneeds_rollback)) ((xrollback)))
                xvalidate_no_atomic_block.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        ((xself).xin_atomic_block).if
                          (((unsupported)).apply ((((xTransactionManagementError)).apply ("This is forbidden when an 'atomic' block is active."))))
                xvalidate_no_broken_transaction.write
                  [xself]
                    seq > @
                      ((xself).xneeds_rollback).if
                        (((unsupported)).apply ((((xTransactionManagementError)).apply ("An error occurred in the current transaction. You can't execute queries until the end of the 'atomic' block."))))
                xconstraint_checks_disabled.write
                  [xself]
                    memory > xdisabled
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdisabled.write ((xself).xdisable_constraint_checking)
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                          (xdisabled).if
                            unsupported
                xdisable_constraint_checking.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (FALSE))
                xenable_constraint_checking.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                xcheck_constraints.write
                  [xself xtable_names]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                xis_usable.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("subclasses of BaseDatabaseWrapper may require an is_usable method"))))
                xclose_if_health_check_failed.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?")).or (((xself).xhealth_check_enabled).not)).or ((xself).xhealth_check_done)).if
                          (((unsupported)).apply)
                        (((xself).xis_usable).not).if
                          unsupported
                        (((unsupported)).apply (((xself).xhealth_check_done)) (TRUE))
                xclose_if_unusable_or_obsolete.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?")).if
                          seq
                            (((unsupported)).apply (((xself).xhealth_check_done)) (FALSE))
                            (((xself).xget_autocommit).neq (((unsupported)).apply (((xself).xsettings_dict)) ("AUTOCOMMIT"))).if
                              seq
                                unsupported
                                (((unsupported)).apply)
                            ((xself).xerrors_occurred).if
                              ((xself).xis_usable).if
                                seq
                                  (((unsupported)).apply (((xself).xerrors_occurred)) (FALSE))
                                  (((unsupported)).apply (((xself).xhealth_check_done)) (TRUE))
                                seq
                                  unsupported
                                  (((unsupported)).apply)
                            ((((unsupported)).apply (((xself).xclose_at)) ("None: is there a None literal in the EO language?")).and (((xtime).xmonotonic).geq ((xself).xclose_at))).if
                              seq
                                unsupported
                                (((unsupported)).apply)
                xallow_thread_sharing.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).x_thread_sharing_lock)))
                          (((unsupported)).apply ((((xself).x_thread_sharing_count).greater 0)))
                xinc_thread_sharing.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_thread_sharing_lock)))
                        (((unsupported)).apply (((xself).x_thread_sharing_count)) (1))
                xdec_thread_sharing.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_thread_sharing_lock)))
                        seq
                          (((xself).x_thread_sharing_count).leq 0).if
                            (((unsupported)).apply ((((xRuntimeError)).apply ("Cannot decrement the thread sharing count below zero."))))
                          (((unsupported)).apply (((xself).x_thread_sharing_count)) (1))
                xvalidate_thread_sharing.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((((xself).xallow_thread_sharing).or (((xself).x_thread_ident).eq ((x_thread).xget_ident))).not).if
                          (((unsupported)).apply ((((xDatabaseError)).apply (("DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias '%s' was created in thread id %s and this is thread id %s.".mod (((unsupported)).apply (((xself).xalias)) (((xself).x_thread_ident)) (((x_thread).xget_ident))))))))
                xprepare_database.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                xwrap_database_errors.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xDatabaseErrorWrapper)).apply ((xself)))))
                xchunked_cursor.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xcursor)))
                xmake_debug_cursor.write
                  [xself xcursor]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xutils).xCursorDebugWrapper)).apply ((xcursor)) ((xself)))))
                xmake_cursor.write
                  [xself xcursor]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xutils).xCursorWrapper)).apply ((xcursor)) ((xself)))))
                xtemporary_connection.write
                  [xself]
                    memory > xmust_close
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmust_close.write (((unsupported)).apply (((xself).xconnection)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((xself).xcursor)) ((xcursor)))
                            (((unsupported)).apply ((xcursor)))
                          (xmust_close).if
                            unsupported
                x_nodb_cursor.write
                  [xself]
                    memory > xconn
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xconn.write (((unsupported)).apply (((xself).x__class__)) ((((unsupported)).apply (((xself).xsettings_dict)) ("NAME") ("None: is there a None literal in the EO language?"))) ((xNO_DB_ALIAS)))
                        (((unsupported)).apply)
                          (((unsupported)).apply (((xconn).xcursor)) ((xcursor)))
                            (((unsupported)).apply ((xcursor)))
                          unsupported
                xschema_editor.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xSchemaEditorClass)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xNotImplementedError)).apply ("The SchemaEditorClass attribute of this database wrapper is still None"))))
                        (((unsupported)).apply (((((xself).xSchemaEditorClass)).apply ((xself)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
                xon_commit.write
                  [xself xfunc]
                    seq > @
                      seq
                        ((((xcallable)).apply ((xfunc))).not).if
                          (((unsupported)).apply ((((xTypeError)).apply ("on_commit's callback must be a callable."))))
                        ((xself).xin_atomic_block).if
                          bogusForceDataize.write (((((xself).xrun_on_commit).xappend)).apply ((((unsupported)).apply ((((xset)).apply (((xself).xsavepoint_ids)))) ((xfunc)))))
                          (((xself).xget_autocommit).not).if
                            (((unsupported)).apply ((((xTransactionManagementError)).apply ("on_commit cannot be used in manual transaction management"))))
                            unsupported
                xrun_and_clear_commit_hooks.write
                  [xself]
                    memory > xcurrent_run_on_commit
                    seq > @
                      seq
                        unsupported
                        xcurrent_run_on_commit.write ((xself).xrun_on_commit)
                        (((unsupported)).apply (((xself).xrun_on_commit)) ((((unsupported)).apply)))
                        while.
                          (xcurrent_run_on_commit)
                          [unused]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xsids)) ((xfunc)))) (((((xcurrent_run_on_commit).xpop)).apply (0))))
                                unsupported
                xexecute_wrapper.write
                  [xself xwrapper]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xexecute_wrappers).xappend)).apply ((xwrapper)))
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                          unsupported
                xcopy.write
                  [xself xalias]
                    memory > xsettings_dict
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xsettings_dict.write ((((xcopy).xdeepcopy)).apply (((xself).xsettings_dict)))
                        (((unsupported)).apply ((xalias)) ("None: is there a None literal in the EO language?")).if
                          xalias.write ((xself).xalias)
                        (((unsupported)).apply ((((((xtype)).apply ((xself)))).apply ((xsettings_dict)) ((xalias)))))