memory > xdatetime
memory > xdecimal
memory > xt
memory > x_
memory > xparse_time
memory > xreversed
memory > xtime
memory > xNotSupportedError
memory > xhour
memory > xargs
memory > xgetattr
memory > xCursorWrapper
memory > xname
memory > xd
memory > xnamespace
memory > xValueError
memory > xmd5
memory > xfrozenset
memory > xsign
memory > xseconds
memory > xint
memory > xarg
memory > xsuper
memory > xmap
memory > xwrapper
memory > xminutes
memory > xoffset
memory > xfunctools
memory > xlen
memory > xTypeError
memory > xlogging
[] > utils
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtypecast_date
        memory > xlogger
        memory > x__iter__
        memory > xtypecast_time
        memory > xWRAP_ERROR_ATTRS
        memory > x_execute
        memory > xexecute
        memory > xformat_number
        memory > xcallproc
        memory > x__enter__
        memory > xsplit_identifier
        memory > xtypecast_timestamp
        memory > x_execute_with_wrappers
        memory > x__init__
        memory > x_executemany
        memory > xsplit_tzname_delta
        memory > x__getattr__
        memory > xstrip_quotes
        memory > x__exit__
        memory > xexecutemany
        memory > xtruncate_name
        memory > xnames_digest
        memory > xdebug_sql
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xlogger.write ((((xlogging).xgetLogger)).apply ("django.db.backends"))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xcursor xdb]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xcursor)) ((xcursor)))
                        (((unsupported)).apply (((xself).xdb)) ((xdb)))
                xWRAP_ERROR_ATTRS.write (((xfrozenset)).apply ((((unsupported)).apply ("fetchone") ("fetchmany") ("fetchall") ("nextset"))))
                x__getattr__.write
                  [xself xattr]
                    memory > xcursor_attr
                    seq > @
                      seq
                        xcursor_attr.write (((xgetattr)).apply (((xself).xcursor)) ((xattr)))
                        (((unsupported)).apply ((xattr)) (((xCursorWrapper).xWRAP_ERROR_ATTRS))).if
                          (((unsupported)).apply ((((((xself).xdb).xwrap_database_errors)).apply ((xcursor_attr)))))
                          (((unsupported)).apply ((xcursor_attr)))
                x__iter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xself).xdb).xwrap_database_errors)))
                        (((unsupported)).apply (((xself).xcursor)))
                x__enter__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xself)))
                x__exit__.write
                  [xself xtype xvalue xtraceback]
                    seq > @
                      (((unsupported)).apply (((((xself).xdb).xDatabase).xError)))
                        bogusForceDataize.write ((((xself).xclose)).apply)
                xcallproc.write
                  [xself xprocname xparams xkparams]
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply ((xkparams)) ("None: is there a None literal in the EO language?")).and (((((xself).xdb).xfeatures).xsupports_callproc_kwargs).not)).if
                          (((unsupported)).apply ((((xNotSupportedError)).apply ("Keyword parameters for callproc are not supported on this database backend."))))
                        bogusForceDataize.write (((((xself).xdb).xvalidate_no_broken_transaction)).apply)
                        (((unsupported)).apply ((((xself).xdb).xwrap_database_errors)))
                          ((((unsupported)).apply ((xparams)) ("None: is there a None literal in the EO language?")).and (((unsupported)).apply ((xkparams)) ("None: is there a None literal in the EO language?"))).if
                            (((unsupported)).apply ((((((xself).xcursor).xcallproc)).apply ((xprocname)))))
                            (((unsupported)).apply ((xkparams)) ("None: is there a None literal in the EO language?")).if
                              (((unsupported)).apply ((((((xself).xcursor).xcallproc)).apply ((xprocname)) ((xparams)))))
                              seq
                                xparams.write ((xparams).or (((unsupported)).apply))
                                (((unsupported)).apply ((((((xself).xcursor).xcallproc)).apply ((xprocname)) ((xparams)) ((xkparams)))))
                xexecute.write
                  [xself xsql xparams]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).x_execute_with_wrappers)) ((xsql)) ((xparams)) (FALSE) (((xself).x_execute)))))
                xexecutemany.write
                  [xself xsql xparam_list]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).x_execute_with_wrappers)) ((xsql)) ((xparam_list)) (TRUE) (((xself).x_executemany)))))
                x_execute_with_wrappers.write
                  [xself xsql xparams xmany xexecutor]
                    memory > xcontext
                    seq > @
                      seq
                        xcontext.write (((unsupported)).apply ("connection") (((xself).xdb)) ("cursor") ((xself)))
                        (((unsupported)).apply ((xwrapper)) ((((xreversed)).apply ((((xself).xdb).xexecute_wrappers)))))
                          xexecutor.write ((((xfunctools).xpartial)).apply ((xwrapper)) ((xexecutor)))
                        (((unsupported)).apply ((((xexecutor)).apply ((xsql)) ((xparams)) ((xmany)) ((xcontext)))))
                x_execute.write
                  [xself xsql xparams]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xdb).xvalidate_no_broken_transaction)).apply)
                        (((unsupported)).apply ((((xself).xdb).xwrap_database_errors)))
                          (((unsupported)).apply ((xparams)) ("None: is there a None literal in the EO language?")).if
                            (((unsupported)).apply ((((((xself).xcursor).xexecute)).apply ((xsql)))))
                            (((unsupported)).apply ((((((xself).xcursor).xexecute)).apply ((xsql)) ((xparams)))))
                x_executemany.write
                  [xself xsql xparam_list]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xdb).xvalidate_no_broken_transaction)).apply)
                        (((unsupported)).apply ((((xself).xdb).xwrap_database_errors)))
                          (((unsupported)).apply ((((((xself).xcursor).xexecutemany)).apply ((xsql)) ((xparam_list)))))
            (((unsupported)).apply ((xCursorWrapper)))
              seq
                xexecute.write
                  [xself xsql xparams]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xdebug_sql)) ((xsql)) ((xparams)) (TRUE))))
                          (((unsupported)).apply (((((((xsuper)).apply).xexecute)).apply ((xsql)) ((xparams)))))
                xexecutemany.write
                  [xself xsql xparam_list]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xdebug_sql)) ((xsql)) ((xparam_list)) (TRUE))))
                        (((unsupported)).apply (((((((xsuper)).apply).xexecutemany)).apply ((xsql)) ((xparam_list)))))
                xdebug_sql.write
                  [xself xsql xparams xuse_last_executed_query xmany]
                    memory > xduration
                    memory > xstop
                    memory > xtimes
                    memory > xstart
                    seq > @
                      (((unsupported)).apply)
                        xstart.write ((((xtime).xmonotonic)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply)
                          seq
                            xstop.write ((((xtime).xmonotonic)).apply)
                            xduration.write ((xstop).sub (xstart))
                            (xuse_last_executed_query).if
                              xsql.write ((((((xself).xdb).xops).xlast_executed_query)).apply (((xself).xcursor)) ((xsql)) ((xparams)))
                            (((unsupported)).apply ((xTypeError)))
                              xtimes.write ((xmany).if (((xlen)).apply ((xparams))) "")
                              xtimes.write "?"
                            bogusForceDataize.write ((((((xself).xdb).xqueries_log).xappend)).apply ((((unsupported)).apply ("sql") (((xmany).if ("%s times: %s".mod (((unsupported)).apply ((xtimes)) ((xsql)))) (xsql))) ("time") (("%.3f".mod (xduration))))))
                            (((unsupported)).apply (((xlogger).xdebug)) ("(%.3f) %s; args=%s; alias=%s") ((xduration)) ((xsql)) ((xparams)) ((((xself).xdb).xalias)) ((((unsupported)).apply ("duration") ((xduration)) ("sql") ((xsql)) ("params") ((xparams)) ("alias") ((((xself).xdb).xalias)))))
            xsplit_tzname_delta.write
              [xtzname]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xsign)) ((((unsupported)).apply ("-") ("-"))))
                      (((unsupported)).apply ((xsign)) ((xtzname))).if
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xoffset)))) (((((xtzname).xrsplit)).apply ((xsign)) (1))))
                          ((xoffset).and (((xparse_time)).apply ((xoffset)))).if
                            (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xsign)) ((xoffset)))))
                    (((unsupported)).apply ((((unsupported)).apply ((xtzname)) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
            xtypecast_date.write
              [xs]
                seq > @
                  (((unsupported)).apply (((xs).if ((((xdatetime).xdate)).apply ((((unsupported)).apply ((((xmap)).apply ((xint)) (((((xs).xsplit)).apply ("-")))))))) "None: is there a None literal in the EO language?")))
            xtypecast_time.write
              [xs]
                memory > xmicroseconds
                seq > @
                  seq
                    ((xs).not).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply ((((unsupported)).apply ((xhour)) ((xminutes)) ((xseconds)))) (((((xs).xsplit)).apply (":"))))
                    (((unsupported)).apply (".") ((xseconds))).if
                      (((unsupported)).apply ((((unsupported)).apply ((xseconds)) ((xmicroseconds)))) (((((xseconds).xsplit)).apply ("."))))
                      xmicroseconds.write "0"
                    (((unsupported)).apply (((((xdatetime).xtime)).apply ((((xint)).apply ((xhour)))) ((((xint)).apply ((xminutes)))) ((((xint)).apply ((xseconds)))) ((((xint)).apply ((((unsupported)).apply (((xmicroseconds).sub "000000")) ((((unsupported)).apply (6))))))))))
            xtypecast_timestamp.write
              [xs]
                memory > xdates
                memory > xtimes
                memory > xmicroseconds
                memory > xseconds
                seq > @
                  seq
                    ((xs).not).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    (((unsupported)).apply (" ") ((xs))).if
                      (((unsupported)).apply ((((xtypecast_date)).apply ((xs)))))
                    (((unsupported)).apply ((((unsupported)).apply ((xd)) ((xt)))) (((((xs).xsplit)).apply)))
                    (((unsupported)).apply ("-") ((xt))).if
                      (((unsupported)).apply ((((unsupported)).apply ((xt)) ((x_)))) (((((xt).xsplit)).apply ("-") (1))))
                      (((unsupported)).apply ("-") ((xt))).if
                        (((unsupported)).apply ((((unsupported)).apply ((xt)) ((x_)))) (((((xt).xsplit)).apply ("-") (1))))
                    xdates.write ((((xd).xsplit)).apply ("-"))
                    xtimes.write ((((xt).xsplit)).apply (":"))
                    xseconds.write (((unsupported)).apply ((xtimes)) (2))
                    (((unsupported)).apply (".") ((xseconds))).if
                      (((unsupported)).apply ((((unsupported)).apply ((xseconds)) ((xmicroseconds)))) (((((xseconds).xsplit)).apply ("."))))
                      xmicroseconds.write "0"
                    (((unsupported)).apply (((((xdatetime).xdatetime)).apply ((((xint)).apply ((((unsupported)).apply ((xdates)) (0))))) ((((xint)).apply ((((unsupported)).apply ((xdates)) (1))))) ((((xint)).apply ((((unsupported)).apply ((xdates)) (2))))) ((((xint)).apply ((((unsupported)).apply ((xtimes)) (0))))) ((((xint)).apply ((((unsupported)).apply ((xtimes)) (1))))) ((((xint)).apply ((xseconds)))) ((((xint)).apply ((((unsupported)).apply (((xmicroseconds).sub "000000")) ((((unsupported)).apply (6))))))))))
            xsplit_identifier.write
              [xidentifier]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xValueError)))
                      (((unsupported)).apply ((((unsupported)).apply ((xnamespace)) ((xname)))) (((((xidentifier).xsplit)).apply ("\".\""))))
                      (((unsupported)).apply ((((unsupported)).apply ((xnamespace)) ((xname)))) ((((unsupported)).apply ("") ((xidentifier)))))
                    (((unsupported)).apply ((((unsupported)).apply (((((xnamespace).xstrip)).apply ("\""))) (((((xname).xstrip)).apply ("\""))))))
            xtruncate_name.write
              [xidentifier xlength xhash_len]
                memory > xdigest
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xnamespace)) ((xname)))) ((((xsplit_identifier)).apply ((xidentifier)))))
                    ((((unsupported)).apply ((xlength)) ("None: is there a None literal in the EO language?")).or ((((xlen)).apply ((xname))).leq (xlength))).if
                      (((unsupported)).apply ((xidentifier)))
                    xdigest.write (((unsupported)).apply ((xnames_digest)) ((xname)) ((xhash_len)))
                    (((unsupported)).apply (("%s%s%s".mod (((unsupported)).apply (((xnamespace).if ("%s\".\"".mod (xnamespace)) "")) ((((unsupported)).apply ((xname)) ((((unsupported)).apply (((xlength).sub (xhash_len))))))) ((xdigest))))))
            xnames_digest.write
              [xlength]
                memory > xh
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xh.write (((unsupported)).apply ((xmd5)) (FALSE))
                    (((unsupported)).apply ((xarg)) ((xargs)))
                      bogusForceDataize.write ((((xh).xupdate)).apply (((((xarg).xencode)).apply)))
                    (((unsupported)).apply ((((unsupported)).apply (((((xh).xhexdigest)).apply)) ((((unsupported)).apply ((xlength)))))))
            xformat_number.write
              [xvalue xmax_digits xdecimal_places]
                memory > xcontext
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xvalue)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                    xcontext.write (((((((xdecimal).xgetcontext)).apply).xcopy)).apply)
                    (((unsupported)).apply ((xmax_digits)) ("None: is there a None literal in the EO language?")).if
                      (((unsupported)).apply (((xcontext).xprec)) ((xmax_digits)))
                    (((unsupported)).apply ((xdecimal_places)) ("None: is there a None literal in the EO language?")).if
                      xvalue.write (((unsupported)).apply (((xvalue).xquantize)) ((((((((xdecimal).xDecimal)).apply (1)).xscaleb)).apply (((xdecimal_places).neg)))) ((xcontext)))
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xcontext).xtraps)) (((xdecimal).xRounded)))) (1))
                        xvalue.write ((((xcontext).xcreate_decimal)).apply ((xvalue)))
                    (((unsupported)).apply (((("{:f}".xformat)).apply ((xvalue)))))
            xstrip_quotes.write
              [xtable_name]
                memory > xhas_quotes
                seq > @
                  seq
                    (((unsupported)).apply)
                    xhas_quotes.write (((((xtable_name).xstartswith)).apply ("\"")).and ((((xtable_name).xendswith)).apply ("\"")))
                    (((unsupported)).apply (((xhas_quotes).if (((unsupported)).apply ((xtable_name)) ((((unsupported)).apply (1) ((1.neg))))) (xtable_name))))