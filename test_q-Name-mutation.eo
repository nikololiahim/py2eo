memory > xTag
memory > x_
memory > xpath
memory > xargs
memory > xobject
memory > xkwargs
memory > xSimpleTestCase
memory > xTypeError
memory > xRawSQL
memory > xenumerate
memory > xBooleanField
memory > xOuterRef
memory > xstr
memory > xQ
memory > xq
memory > xF
memory > xExists
memory > xi
[] > test_q
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_reconstruct_and
        memory > xtest_combine_and_empty
        memory > xtest_deconstruct_xor
        memory > xtest_reconstruct_or
        memory > xtest_deconstruct_multiple_kwargs
        memory > xtest_combine_negated_boolean_expression
        memory > xtest_deconstruct
        memory > xtest_combine_empty_copy
        memory > xtest_deconstruct_negated
        memory > xtest_reconstruct_xor
        memory > xtest_combine_or_both_empty
        memory > xtest_deconstruct_or
        memory > xtest_combine_xor_both_empty
        memory > xtest_reconstruct
        memory > xtest_deconstruct_and
        memory > xtest_combine_not_q_object
        memory > xtest_combine_xor_empty
        memory > xtest_combine_and_both_empty
        memory > xtest_reconstruct_negated
        memory > xtest_combine_or_empty
        memory > xtest_deconstruct_boolean_expression
        memory > xtest_deconstruct_nested
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_combine_and_empty.write
                  [xself]
                    memory > xq2
                    memory > xq
                    seq > @
                      seq
                        xq2.write (((unsupported)).apply ((xQ)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xq).and (((xQ)).apply))) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xQ)).apply).and (xq))) ((xq)))
                        xq.write (((unsupported)).apply ((xQ)) (((((((unsupported)).apply).xkeys)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xq).and (((xQ)).apply))) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xQ)).apply).and (xq))) ((xq)))
                xtest_combine_and_both_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xQ)).apply).and (((xQ)).apply))) ((((xQ)).apply)))
                xtest_combine_or_empty.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write (((unsupported)).apply ((xQ)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xq).or (((xQ)).apply))) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xQ)).apply).or (xq))) ((xq)))
                        xq.write (((unsupported)).apply ((xQ)) (((((((unsupported)).apply).xkeys)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xq).or (((xQ)).apply))) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xQ)).apply).or (xq))) ((xq)))
                xtest_combine_xor_empty.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write (((unsupported)).apply ((xQ)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xq)) ((((xQ)).apply)))) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xQ)).apply)) ((xq)))) ((xq)))
                        xq.write (((unsupported)).apply ((xQ)) (((((((unsupported)).apply).xkeys)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xq)) ((((xQ)).apply)))) ((xq)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xQ)).apply)) ((xq)))) ((xq)))
                xtest_combine_empty_copy.write
                  [xself]
                    memory > xbase_q
                    memory > xtests
                    seq > @
                      seq
                        xbase_q.write (((unsupported)).apply ((xQ)) (1))
                        xtests.write (((unsupported)).apply (((xbase_q).or (((xQ)).apply))) (((((xQ)).apply).or (xbase_q))) (((xbase_q).and (((xQ)).apply))) (((((xQ)).apply).and (xbase_q))) ((((unsupported)).apply ((xbase_q)) ((((xQ)).apply)))) ((((unsupported)).apply ((((xQ)).apply)) ((xbase_q)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xq)))) ((((xenumerate)).apply ((xtests)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xi)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xq)) ((xbase_q)))
                              bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xq)) ((xbase_q)))
                xtest_combine_or_both_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xQ)).apply).or (((xQ)).apply))) ((((xQ)).apply)))
                xtest_combine_xor_both_empty.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xQ)).apply)) ((((xQ)).apply)))) ((((xQ)).apply)))
                xtest_combine_not_q_object.write
                  [xself]
                    memory > xq
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((xobject)).apply)
                        xq.write (((unsupported)).apply ((xQ)) (1))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((((xstr)).apply ((xobj)))))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((((xstr)).apply ((xobj)))))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((((xstr)).apply ((xobj)))))))
                          (((unsupported)).apply ((xq)) ((xobj)))
                xtest_combine_negated_boolean_expression.write
                  [xself]
                    memory > xtests
                    memory > xtagged
                    seq > @
                      seq
                        xtagged.write (((unsupported)).apply ((((xTag).xobjects).xfilter)) ((((xOuterRef)).apply ("pk"))))
                        xtests.write (((unsupported)).apply (((((xQ)).apply).and ((((xExists)).apply ((xtagged))).neg))) (((((xQ)).apply).or ((((xExists)).apply ((xtagged))).neg))) ((((unsupported)).apply ((((xQ)).apply)) (((((xExists)).apply ((xtagged))).neg)))))
                        (((unsupported)).apply ((xq)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xq)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((xq).xnegated)) (TRUE))
                xtest_deconstruct.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.db.models.Q"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ("price__gt") ((((xF)).apply ("discounted_price"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply)))
                xtest_deconstruct_negated.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price")))).neg)
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ("price__gt") ((((xF)).apply ("discounted_price"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("_negated") (TRUE))))
                xtest_deconstruct_or.write
                  [xself]
                    memory > xq2
                    memory > xq
                    memory > xq1
                    seq > @
                      seq
                        xq1.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq2.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq.write ((xq1).or (xq2))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ("price__gt") ((((xF)).apply ("discounted_price"))))) ((((unsupported)).apply ("price") ((((xF)).apply ("discounted_price"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("_connector") ("OR"))))
                xtest_deconstruct_xor.write
                  [xself]
                    memory > xq2
                    memory > xq
                    memory > xq1
                    seq > @
                      seq
                        xq1.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq2.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq.write (((unsupported)).apply ((xq1)) ((xq2)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ("price__gt") ((((xF)).apply ("discounted_price"))))) ((((unsupported)).apply ("price") ((((xF)).apply ("discounted_price"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply ("_connector") ("XOR"))))
                xtest_deconstruct_and.write
                  [xself]
                    memory > xq2
                    memory > xq
                    memory > xq1
                    seq > @
                      seq
                        xq1.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq2.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq.write ((xq1).and (xq2))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ("price__gt") ((((xF)).apply ("discounted_price"))))) ((((unsupported)).apply ("price") ((((xF)).apply ("discounted_price"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply)))
                xtest_deconstruct_multiple_kwargs.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))) ((((xF)).apply ("discounted_price"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ("price") ((((xF)).apply ("discounted_price"))))) ((((unsupported)).apply ("price__gt") ((((xF)).apply ("discounted_price"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply)))
                xtest_deconstruct_nested.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write (((xQ)).apply ((((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply)))
                xtest_deconstruct_boolean_expression.write
                  [xself]
                    memory > xexpr
                    memory > xq
                    seq > @
                      seq
                        xexpr.write (((xRawSQL)).apply ("1 = 1") ((((xBooleanField)).apply)))
                        xq.write (((xQ)).apply ((xexpr)))
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply ((xexpr)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply)))
                xtest_reconstruct.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xQ)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) ((xq)))
                xtest_reconstruct_negated.write
                  [xself]
                    memory > xq
                    seq > @
                      seq
                        xq.write ((((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price")))).neg)
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xQ)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) ((xq)))
                xtest_reconstruct_or.write
                  [xself]
                    memory > xq2
                    memory > xq
                    memory > xq1
                    seq > @
                      seq
                        xq1.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq2.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq.write ((xq1).or (xq2))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xQ)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) ((xq)))
                xtest_reconstruct_xor.write
                  [xself]
                    memory > xq2
                    memory > xq
                    memory > xq1
                    seq > @
                      seq
                        xq1.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq2.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq.write (((unsupported)).apply ((xq1)) ((xq2)))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xQ)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) ((xq)))
                xtest_reconstruct_and.write
                  [xself]
                    memory > xq2
                    memory > xq
                    memory > xq1
                    seq > @
                      seq
                        xq1.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq2.write (((unsupported)).apply ((xQ)) ((((xF)).apply ("discounted_price"))))
                        xq.write ((xq1).and (xq2))
                        (((unsupported)).apply ((((unsupported)).apply ((xpath)) ((xargs)) ((xkwargs)))) (((((xq).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xQ)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))) ((xq)))