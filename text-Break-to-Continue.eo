memory > xclosing_tag
memory > xValueError
memory > xchar
memory > xself_closing
memory > xunicodedata
memory > xi
memory > xsuper
memory > xargs
memory > xSimpleLazyObject
memory > xStreamingBuffer
memory > xkwargs
memory > xmin
memory > xbit
memory > xc
memory > x_lazy_re_compile
memory > xGzipFile
memory > xBytesIO
memory > xenumerate
memory > xzfile
memory > xstr
memory > xint
memory > xre
memory > xpgettext
memory > xSuspiciousFileOperation
memory > xitem
memory > xlazy
memory > xisinstance
memory > xlen
[] > text
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xcamel_case_to_spaces
        memory > xadd_truncation_text
        memory > xcompress_sequence
        memory > xre_tag
        memory > x_
        memory > xchars
        memory > xcapfirst
        memory > xsmart_split_re
        memory > xread
        memory > xslugify
        memory > xwrap
        memory > xphone2numeric
        memory > xformat_lazy
        memory > xget_text_list
        memory > x_format_lazy
        memory > x_text_chars
        memory > xre_chars
        memory > xwords
        memory > x_text_words
        memory > xre_words
        memory > xre_newlines
        memory > xsmart_split
        memory > x_truncate_html
        memory > xget_valid_filename
        memory > xnormalize_newlines
        memory > xcompress_string
        memory > x__init__
        memory > xgzip_compress
        memory > xunescape_string_literal
        memory > xre_camel_case
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            xcapfirst.write
              [xx]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    ((xx).not).if
                      (((unsupported)).apply ((xx)))
                    ((((xisinstance)).apply ((xx)) ((xstr))).not).if
                      xx.write (((xstr)).apply ((xx)))
                    (((unsupported)).apply ((((((((unsupported)).apply ((xx)) (0)).xupper)).apply).add (((unsupported)).apply ((xx)) ((((unsupported)).apply (1)))))))
            xre_words.write (((x_lazy_re_compile)).apply ("<[^>]+?>|([^<>s]+)") (((xre).xS)))
            xre_chars.write (((x_lazy_re_compile)).apply ("<[^>]+?>|(.)") (((xre).xS)))
            xre_tag.write (((x_lazy_re_compile)).apply ("<(/)?(S+?)(?:(s*/)|s.*?)?>") (((xre).xS)))
            xre_newlines.write (((x_lazy_re_compile)).apply ("rn|r"))
            xre_camel_case.write (((x_lazy_re_compile)).apply ("(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))"))
            xwrap.write
              [xtext xwidth]
                memory > x_generator
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    x_generator.write
                      []
                        memory > xmax_width
                        memory > xspace
                        memory > xline
                        seq > @
                          (((unsupported)).apply ((xline)) (((((xtext).xsplitlines)).apply (TRUE))))
                            seq
                              xmax_width.write (((xmin)).apply (((((((xline).xendswith)).apply ("n")).and ((xwidth).add 1)).or (xwidth))) ((xwidth)))
                              while.
                                ((((xlen)).apply ((xline))).greater (xmax_width))
                                [unused]
                                  seq > @
                                    seq
                                      xspace.write (((((((unsupported)).apply ((xline)) ((((unsupported)).apply (((xmax_width).add 1))))).xrfind)).apply (" ")).add 1)
                                      ((xspace).eq 0).if
                                        seq
                                          xspace.write (((((xline).xfind)).apply (" ")).add 1)
                                          ((xspace).eq 0).if
                                            seq
                                              (((unsupported)).apply ((xline)))
                                              xline.write ""
                                              (((unsupported)).apply)
                                      (((unsupported)).apply (("%sn".mod (((unsupported)).apply ((xline)) ((((unsupported)).apply (((xspace).sub 1))))))))
                                      xline.write (((unsupported)).apply ((xline)) ((((unsupported)).apply ((xspace)))))
                                      xmax_width.write (((xmin)).apply (((((((xline).xendswith)).apply ("n")).and ((xwidth).add 1)).or (xwidth))) ((xwidth)))
                              (xline).if
                                (((unsupported)).apply ((xline)))
                    (((unsupported)).apply (((("".xjoin)).apply ((((x_generator)).apply)))))
            (((unsupported)).apply ((xSimpleLazyObject)))
              seq
                (((unsupported)).apply)
                x__init__.write
                  [xself xtext]
                    seq > @
                      bogusForceDataize.write ((((((xsuper)).apply).x__init__)).apply ((((unsupported)).apply ((((xstr)).apply ((xtext)))))))
                xadd_truncation_text.write
                  [xself xtext xtruncate]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xtruncate)) ("None: is there a None literal in the EO language?")).if
                          xtruncate.write (((xpgettext)).apply ("String to return when truncating text") ("%(truncated_text)sâ€¦"))
                        (((unsupported)).apply ("%(truncated_text)s") ((xtruncate))).if
                          (((unsupported)).apply (((xtruncate).mod (((unsupported)).apply ("truncated_text") ((xtext))))))
                        ((((xtext).xendswith)).apply ((xtruncate))).if
                          (((unsupported)).apply ((xtext)))
                        (((unsupported)).apply (("%s%s".mod (((unsupported)).apply ((xtext)) ((xtruncate))))))
                xchars.write
                  [xself xnum xtruncate xhtml]
                    memory > xtruncate_len
                    memory > xlength
                    memory > xtext
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_setup)).apply)
                        xlength.write (((xint)).apply ((xnum)))
                        xtext.write ((((xunicodedata).xnormalize)).apply ("NFC") (((xself).x_wrapped)))
                        xtruncate_len.write (xlength)
                        (((unsupported)).apply ((xchar)) (((((xself).xadd_truncation_text)).apply ("") ((xtruncate)))))
                          (((((xunicodedata).xcombining)).apply ((xchar))).not).if
                            seq
                              (((unsupported)).apply ((xtruncate_len)) (1))
                              ((xtruncate_len).eq 0).if
                                (((unsupported)).apply)
                        (xhtml).if
                          (((unsupported)).apply (((((xself).x_truncate_html)).apply ((xlength)) ((xtruncate)) ((xtext)) ((xtruncate_len)) (FALSE))))
                        (((unsupported)).apply (((((xself).x_text_chars)).apply ((xlength)) ((xtruncate)) ((xtext)) ((xtruncate_len)))))
                x_text_chars.write
                  [xself xlength xtruncate xtext xtruncate_len]
                    memory > xend_index
                    memory > xs_len
                    seq > @
                      seq
                        unsupported
                        xs_len.write 0
                        xend_index.write "None: is there a None literal in the EO language?"
                        (((unsupported)).apply ((((unsupported)).apply ((xi)) ((xchar)))) ((((xenumerate)).apply ((xtext)))))
                          seq
                            ((((xunicodedata).xcombining)).apply ((xchar))).if
                              (((unsupported)).apply)
                            (((unsupported)).apply ((xs_len)) (1))
                            ((((unsupported)).apply ((xend_index)) ("None: is there a None literal in the EO language?")).and ((xs_len).greater (xtruncate_len))).if
                              xend_index.write (xi)
                            ((xs_len).greater (xlength)).if
                              (((unsupported)).apply (((((xself).xadd_truncation_text)).apply ((((unsupported)).apply ((xtext)) ((((unsupported)).apply (((xend_index).or 0)))))) ((xtruncate)))))
                        (((unsupported)).apply ((xtext)))
                xwords.write
                  [xself xnum xtruncate xhtml]
                    memory > xlength
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_setup)).apply)
                        xlength.write (((xint)).apply ((xnum)))
                        (xhtml).if
                          (((unsupported)).apply (((((xself).x_truncate_html)).apply ((xlength)) ((xtruncate)) (((xself).x_wrapped)) ((xlength)) (TRUE))))
                        (((unsupported)).apply (((((xself).x_text_words)).apply ((xlength)) ((xtruncate)))))
                x_text_words.write
                  [xself xlength xtruncate]
                    memory > xwords
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xwords.write (((((xself).x_wrapped).xsplit)).apply)
                        ((((xlen)).apply ((xwords))).greater (xlength)).if
                          seq
                            xwords.write (((unsupported)).apply ((xwords)) ((((unsupported)).apply ((xlength)))))
                            (((unsupported)).apply (((((xself).xadd_truncation_text)).apply ((((" ".xjoin)).apply ((xwords)))) ((xtruncate)))))
                        (((unsupported)).apply ((((" ".xjoin)).apply ((xwords)))))
                x_truncate_html.write
                  [xself xlength xtruncate xtext xtruncate_len xwords]
                    memory > xtruncate_text
                    memory > xopen_tags
                    memory > xout
                    memory > xpos
                    memory > xcurrent_len
                    memory > xend_text_pos
                    memory > xhtml4_singlets
                    memory > xm
                    memory > xtagname
                    memory > xregex
                    memory > xtag
                    memory > xi
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xwords).and ((xlength).leq 0)).if
                          (((unsupported)).apply (""))
                        xhtml4_singlets.write (((unsupported)).apply ("br") ("col") ("link") ("base") ("img") ("param") ("area") ("hr") ("input"))
                        xpos.write 0
                        xend_text_pos.write 0
                        xcurrent_len.write 0
                        xopen_tags.write (((unsupported)).apply)
                        xregex.write ((xwords).if (xre_words) (xre_chars))
                        while.
                          ((xcurrent_len).leq (xlength))
                          [unused]
                            seq > @
                              seq
                                xm.write ((((xregex).xsearch)).apply ((xtext)) ((xpos)))
                                ((xm).not).if
                                  (((unsupported)).apply)
                                xpos.write ((((xm).xend)).apply (0))
                                (((unsupported)).apply ((xm)) (1)).if
                                  seq
                                    (((unsupported)).apply ((xcurrent_len)) (1))
                                    ((xcurrent_len).eq (xtruncate_len)).if
                                      xend_text_pos.write (xpos)
                                    (((unsupported)).apply)
                                xtag.write ((((xre_tag).xmatch)).apply ((((unsupported)).apply ((xm)) (0))))
                                (((xtag).not).or ((xcurrent_len).geq (xtruncate_len))).if
                                  (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xclosing_tag)) ((xtagname)) ((xself_closing)))) (((((xtag).xgroups)).apply)))
                                xtagname.write ((((xtagname).xlower)).apply)
                                ((xself_closing).or (((unsupported)).apply ((xtagname)) ((xhtml4_singlets)))).if
                                  (xclosing_tag).if
                                    (((unsupported)).apply ((xValueError)))
                                      xi.write ((((xopen_tags).xindex)).apply ((xtagname)))
                                      xopen_tags.write (((unsupported)).apply ((xopen_tags)) ((((unsupported)).apply (((xi).add 1)))))
                                    bogusForceDataize.write ((((xopen_tags).xinsert)).apply (0) ((xtagname)))
                        ((xcurrent_len).leq (xlength)).if
                          (((unsupported)).apply ((xtext)))
                        xout.write (((unsupported)).apply ((xtext)) ((((unsupported)).apply ((xend_text_pos)))))
                        xtruncate_text.write ((((xself).xadd_truncation_text)).apply ("") ((xtruncate)))
                        (xtruncate_text).if
                          (((unsupported)).apply ((xout)) ((xtruncate_text)))
                        (((unsupported)).apply ((xtag)) ((xopen_tags)))
                          (((unsupported)).apply ((xout)) (("</%s>".mod (xtag))))
                        (((unsupported)).apply ((xout)))
            xget_valid_filename.write
              [xname]
                memory > xs
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xs.write (((((((((xstr)).apply ((xname))).xstrip)).apply).xreplace)).apply (" ") ("_"))
                    xs.write ((((xre).xsub)).apply ("(?u)[^-w.]") ("") ((xs)))
                    (((unsupported)).apply ((xs)) ((((unsupported)).apply ("") (".") ("..")))).if
                      (((unsupported)).apply ((((xSuspiciousFileOperation)).apply (("Could not derive file name from '%s'".mod (xname))))))
                    (((unsupported)).apply ((xs)))
            xget_text_list.write
              [xlist_ xlast_word]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((xlist_).not).if
                      (((unsupported)).apply (""))
                    ((((xlen)).apply ((xlist_))).eq 1).if
                      (((unsupported)).apply ((((xstr)).apply ((((unsupported)).apply ((xlist_)) (0))))))
                    (((unsupported)).apply (("%s %s %s".mod (((unsupported)).apply (((((((x_)).apply (", ")).xjoin)).apply ((((unsupported)).apply ((((xstr)).apply ((xi)))) ((xi)) ((((unsupported)).apply ((xlist_)) ((((unsupported)).apply ((1.neg)))))))))) ((((xstr)).apply ((xlast_word)))) ((((xstr)).apply ((((unsupported)).apply ((xlist_)) ((1.neg))))))))))
            xnormalize_newlines.write
              [xtext]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((((xre_newlines).xsub)).apply ("n") ((((xstr)).apply ((xtext)))))))
            xphone2numeric.write
              [xphone]
                memory > xchar2number
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xchar2number.write (((unsupported)).apply ("a") ("2") ("b") ("2") ("c") ("2") ("d") ("3") ("e") ("3") ("f") ("3") ("g") ("4") ("h") ("4") ("i") ("4") ("j") ("5") ("k") ("5") ("l") ("5") ("m") ("6") ("n") ("6") ("o") ("6") ("p") ("7") ("q") ("7") ("r") ("7") ("s") ("7") ("t") ("8") ("u") ("8") ("v") ("8") ("w") ("9") ("x") ("9") ("y") ("9") ("z") ("9"))
                    (((unsupported)).apply (((("".xjoin)).apply ((((unsupported)).apply (((((xchar2number).xget)).apply ((xc)) ((xc)))) ((xc)) (((((xphone).xlower)).apply)))))))
            xcompress_string.write
              [xs]
                seq > @
                  (((unsupported)).apply ((((unsupported)).apply ((xgzip_compress)) ((xs)) (6) (0))))
            (((unsupported)).apply ((xBytesIO)))
              xread.write
                [xself]
                  memory > xret
                  seq > @
                    seq
                      xret.write ((((xself).xgetvalue)).apply)
                      bogusForceDataize.write ((((xself).xseek)).apply (0))
                      bogusForceDataize.write ((((xself).xtruncate)).apply)
                      (((unsupported)).apply ((xret)))
            xcompress_sequence.write
              [xsequence]
                memory > xbuf
                memory > xdata
                seq > @
                  seq
                    xbuf.write (((xStreamingBuffer)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xGzipFile)) ("wb") (6) ((xbuf)) (0))) ((xzfile)))
                      seq
                        (((unsupported)).apply (((((xbuf).xread)).apply)))
                        (((unsupported)).apply ((xitem)) ((xsequence)))
                          seq
                            bogusForceDataize.write ((((xzfile).xwrite)).apply ((xitem)))
                            xdata.write ((((xbuf).xread)).apply)
                            (xdata).if
                              (((unsupported)).apply ((xdata)))
                    (((unsupported)).apply (((((xbuf).xread)).apply)))
            xsmart_split_re.write (((x_lazy_re_compile)).apply ((((unsupported)).apply)) (((xre).xVERBOSE)))
            xsmart_split.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((xbit)) (((((xsmart_split_re).xfinditer)).apply ((((xstr)).apply ((xtext)))))))
                      (((unsupported)).apply ((((unsupported)).apply ((xbit)) (0))))
            xunescape_string_literal.write
              [xs]
                memory > xquote
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    ((((xs).not).or (((unsupported)).apply ((((unsupported)).apply ((xs)) (0))) ("\"'"))).or ((((unsupported)).apply ((xs)) ((1.neg))).neq (((unsupported)).apply ((xs)) (0)))).if
                      (((unsupported)).apply ((((xValueError)).apply (("Not a string literal: %r".mod (xs))))))
                    xquote.write (((unsupported)).apply ((xs)) (0))
                    (((unsupported)).apply ((((((((((unsupported)).apply ((xs)) ((((unsupported)).apply (1) ((1.neg))))).xreplace)).apply (("%s".mod (xquote))) ((xquote))).xreplace)).apply ("\\") ("\\"))))
            xslugify.write
              [xvalue xallow_unicode]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xvalue.write (((xstr)).apply ((xvalue)))
                    (xallow_unicode).if
                      xvalue.write ((((xunicodedata).xnormalize)).apply ("NFKC") ((xvalue)))
                      xvalue.write ((((((((((xunicodedata).xnormalize)).apply ("NFKD") ((xvalue))).xencode)).apply ("ascii") ("ignore")).xdecode)).apply ("ascii"))
                    xvalue.write ((((xre).xsub)).apply ("[^ws-]") ("") (((((xvalue).xlower)).apply)))
                    (((unsupported)).apply ((((((((xre).xsub)).apply ("[-s]+") ("-") ((xvalue))).xstrip)).apply ("-_"))))
            xcamel_case_to_spaces.write
              [xvalue]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((((((((xre_camel_case).xsub)).apply (" 1") ((xvalue))).xstrip)).apply).xlower)).apply)))
            x_format_lazy.write
              [xformat_string]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((xformat_string).xformat)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))))
            xformat_lazy.write (((xlazy)).apply ((x_format_lazy)) ((xstr)))