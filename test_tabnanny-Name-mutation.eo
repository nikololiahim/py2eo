memory > xscript_helper
memory > xstdout
memory > xexpected
memory > xfile_path
memory > x_std
memory > xcaptured_stdout
memory > xsource_code2
memory > x_
memory > xf
memory > xfile2_path
memory > xtokenize
memory > xc_file
memory > xe_file
memory > xsetattr
memory > xTestCase
memory > xtmp_dir
memory > xwords
memory > xfindfile
memory > xtempfile
memory > xTemporaryPyFile
memory > xstd
memory > xoutput
memory > xopen
memory > xtextwrap
memory > xpath
memory > xnanny
memory > xstderr
memory > xunlink
memory > xargs
memory > xfile1_path
memory > xcaptured_stderr
memory > xline
memory > xtabnanny
memory > xkey
[] > test_tabnanny
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_when_nannynag_error_verbose
        memory > xSOURCE_CODES
        memory > xtest_when_wrong_indented
        memory > xtest_correct_file
        memory > xtest_when_no_file
        memory > xsetUp
        memory > x__exit__
        memory > x__enter__
        memory > xverify_tabnanny_check
        memory > xtest_double_verbose_mode
        memory > xtest_with_errored_file
        memory > x__init__
        memory > xtest_errored_directory
        memory > xtest_format_witnesses
        memory > xtest_command_usage
        memory > xtest_with_error_free_file
        memory > xtest_errprint
        memory > xtest_verbose_mode
        memory > xtest_when_nannynag_error
        memory > xvalidate_cmd
        memory > xtest_correct_directory_verbose
        memory > xtest_when_tokenize_tokenerror
        memory > xtest_quiet_flag
        memory > xtest_all_methods
        memory > xtest_correct_directory
        memory > xtest_with_correct_code
        memory > xtest_with_errored_codes_samples
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xSOURCE_CODES.write (((unsupported)).apply ("incomplete_expression") ("fruits = [n    \"Apple\",n    \"Orange\",n    \"Banana\",nnprint(fruits)n") ("wrong_indented") ("if True:n    print(\"hello\")n  print(\"world\")nelse:n    print(\"else called\")n") ("nannynag_errored") ("if True:n tprint(\"hello\")ntprint(\"world\")nelse:n    print(\"else called\")n") ("error_free") ("if True:n    print(\"hello\")n    print(\"world\")nelse:n    print(\"else called\")n") ("tab_space_errored_1") ("def my_func():nt  print(\"hello world\")nt  if True:nttprint(\"If called\")") ("tab_space_errored_2") ("def my_func():nttprint(\"Hello world\")nttif True:nt        print(\"If called\")"))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xsource_code xdirectory]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xsource_code)) ((xsource_code2)))
                        (((unsupported)).apply (((xself).xdir)) ((xdirectory)))
                x__enter__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xtempfile).xNamedTemporaryFile)) ("w") (((xself).xdir)) (".py") (FALSE))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply (((xself).xsource_code)))
                        (((unsupported)).apply (((xself).xfile_path)) (((xf).xname)))
                        (((unsupported)).apply (((xself).xfile_path)))
                x__exit__.write
                  [xself xexc_type xexc_value xexc_traceback]
                    seq > @
                      bogusForceDataize.write (((xunlink)).apply (((xself).xfile_path)))
            (((unsupported)).apply ((xTestCase)))
              seq
                unsupported
                xtest_format_witnesses.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        unsupported
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("Test") ("at tab sizes T, e, s, t"))) ((((unsupported)).apply ("") ("at tab size "))) ((((unsupported)).apply ("t") ("at tab size t"))) ((((unsupported)).apply ("  t  ") ("at tab sizes  ,  , t,  ,  "))))
                        (((unsupported)).apply ((((unsupported)).apply ((xwords)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xwords)) ((xexpected)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtabnanny).xformat_witnesses)).apply ((xwords)))) ((xexpected)))
            (((unsupported)).apply ((xTestCase)))
              seq
                unsupported
                xtest_errprint.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        unsupported
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("first") ("second"))) ("first secondn"))) ((((unsupported)).apply ((((unsupported)).apply ("first"))) ("firstn"))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3))) ("1 2 3n"))) ((((unsupported)).apply ((((unsupported)).apply)) ("n"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xargs)) ((xexpected)))))
                            seq
                              (((unsupported)).apply ((((xcaptured_stderr)).apply)) ((xstderr)))
                                bogusForceDataize.write ((((xtabnanny).xerrprint)).apply ((((unsupported)).apply ((xargs)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstderr).xgetvalue)).apply)) ((xexpected)))
            (((unsupported)).apply ((xTestCase)))
              xtest_all_methods.write
                [xself]
                  memory > xtests
                  memory > xmsg
                  memory > xline_number
                  memory > xline
                  seq > @
                    seq
                      unsupported
                      xtests.write (((unsupported)).apply ((((unsupported)).apply (((((xtabnanny).xNannyNag)).apply (0) ("foo") ("bar"))) ((((unsupported)).apply ("lineno") (0) ("msg") ("foo") ("line") ("bar"))))) ((((unsupported)).apply (((((xtabnanny).xNannyNag)).apply (5) ("testmsg") ("testline"))) ((((unsupported)).apply ("lineno") (5) ("msg") ("testmsg") ("line") ("testline"))))))
                      (((unsupported)).apply ((((unsupported)).apply ((xnanny)) ((xexpected)))) ((xtests)))
                        seq
                          xline_number.write ((((xnanny).xget_lineno)).apply)
                          xmsg.write ((((xnanny).xget_msg)).apply)
                          xline.write ((((xnanny).xget_line)).apply)
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xline_number)) ((((unsupported)).apply ((xexpected)) ("lineno"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexpected)) ("lineno"))) ((xline_number)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xmsg)) ((((unsupported)).apply ((xexpected)) ("msg"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexpected)) ("msg"))) ((xmsg)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xline)) ((((unsupported)).apply ((xexpected)) ("line"))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexpected)) ("line"))) ((xline)))
            (((unsupported)).apply ((xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xsetattr)) ((xtabnanny)) ("verbose") (((xtabnanny).xverbose)))
                        (((unsupported)).apply (((xtabnanny).xverbose)) (0))
                xverify_tabnanny_check.write
                  [xself xdir_or_file xout xerr]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)) ((((xcaptured_stderr)).apply)) ((xstderr)))
                          bogusForceDataize.write ((((xtabnanny).xcheck)).apply ((xdir_or_file)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstdout).xgetvalue)).apply)) ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstderr).xgetvalue)).apply)) ((xerr)))
                xtest_correct_file.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("error_free"))))) ((xfile_path)))
                          bogusForceDataize.write ((((xself).xverify_tabnanny_check)).apply ((xfile_path)))
                xtest_correct_directory_verbose.write
                  [xself]
                    memory > xfile1
                    memory > xfile2
                    memory > xstdout
                    memory > xlines
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtmp_dir)))
                          seq
                            xlines.write (((unsupported)).apply ("{tmp_dir!r}: listing directoryn"))
                            xfile1.write (((unsupported)).apply ((xTemporaryPyFile)) ((((unsupported)).apply ((xSOURCE_CODES)) ("error_free"))) ((xtmp_dir)))
                            xfile2.write (((unsupported)).apply ((xTemporaryPyFile)) ((((unsupported)).apply ((xSOURCE_CODES)) ("error_free"))) ((xtmp_dir)))
                            (((unsupported)).apply ((xfile1)) ((xfile1_path)) ((xfile2)) ((xfile2_path)))
                              seq
                                (((unsupported)).apply ((xfile_path)) ((((unsupported)).apply ((xfile1_path)) ((xfile2_path)))))
                                  bogusForceDataize.write ((((xlines).xappend)).apply ("{file_path!r}: Clean bill of health.n"))
                                (((unsupported)).apply (((xtabnanny).xverbose)) (1))
                                (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xstdout)) ((((xcaptured_stderr)).apply)) ((xstderr)))
                                  bogusForceDataize.write ((((xtabnanny).xcheck)).apply ((xtmp_dir)))
                                xstdout.write ((((xstdout).xgetvalue)).apply)
                                (((unsupported)).apply ((xline)) ((xlines)))
                                  (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xline)))))
                                    bogusForceDataize.write ((((xself).xassertIn)).apply ((xline)) ((xstdout)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xstderr).xgetvalue)).apply)) (""))
                xtest_correct_directory.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtmp_dir)))
                          (((unsupported)).apply ((((unsupported)).apply ((xTemporaryPyFile)) ((((unsupported)).apply ((xSOURCE_CODES)) ("error_free"))) ((xtmp_dir)))))
                            bogusForceDataize.write ((((xself).xverify_tabnanny_check)).apply ((xtmp_dir)))
                xtest_when_wrong_indented.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("wrong_indented"))))) ((xfile_path)))
                          seq
                            xerr.write "unindent does not match any outer indentation level (<tokenize>, line 3)n"
                            xerr.write "{file_path!r}: Indentation Error: {err}"
                            (((unsupported)).apply (((xself).xverify_tabnanny_check)) ((xfile_path)) ((xerr)))
                xtest_when_tokenize_tokenerror.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("incomplete_expression"))))) ((xfile_path)))
                          seq
                            xerr.write "('EOF in multi-line statement', (7, 0))n"
                            xerr.write "{file_path!r}: Token Error: {err}"
                            (((unsupported)).apply (((xself).xverify_tabnanny_check)) ((xfile_path)) ((xerr)))
                xtest_when_nannynag_error_verbose.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("nannynag_errored"))))) ((xfile_path)))
                          seq
                            xout.write "{file_path!r}: *** Line 3: trouble in tab city! ***n"
                            (((unsupported)).apply ((xout)) ((((unsupported)).apply)))
                            (((unsupported)).apply ((xout)) ("indent not equal e.g. at tab size 1n"))
                            (((unsupported)).apply (((xtabnanny).xverbose)) (1))
                            (((unsupported)).apply (((xself).xverify_tabnanny_check)) ((xfile_path)) ((xout)))
                xtest_when_nannynag_error.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("nannynag_errored"))))) ((xfile_path)))
                          seq
                            xout.write (((unsupported)).apply)
                            (((unsupported)).apply (((xself).xverify_tabnanny_check)) ((xfile_path)) ((xout)))
                xtest_when_no_file.write
                  [xself]
                    memory > xerr
                    memory > xpath
                    seq > @
                      seq
                        unsupported
                        xpath.write "no_file.py"
                        xerr.write "{path!r}: I/O Error: [Errno {errno.ENOENT}] {os.strerror(errno.ENOENT)}: {path!r}n"
                        (((unsupported)).apply (((xself).xverify_tabnanny_check)) ((xpath)) ((xerr)))
                xtest_errored_directory.write
                  [xself]
                    memory > xcode_file
                    memory > xerr
                    memory > xerror_file
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xtempfile).xTemporaryDirectory)).apply)) ((xtmp_dir)))
                          seq
                            xerror_file.write (((unsupported)).apply ((xTemporaryPyFile)) ((((unsupported)).apply ((xSOURCE_CODES)) ("wrong_indented"))) ((xtmp_dir)))
                            xcode_file.write (((unsupported)).apply ((xTemporaryPyFile)) ((((unsupported)).apply ((xSOURCE_CODES)) ("error_free"))) ((xtmp_dir)))
                            (((unsupported)).apply ((xerror_file)) ((xe_file)) ((xcode_file)) ((xc_file)))
                              seq
                                xerr.write "unindent does not match any outer indentation level (<tokenize>, line 3)n"
                                xerr.write "{e_file!r}: Indentation Error: {err}"
                                (((unsupported)).apply (((xself).xverify_tabnanny_check)) ((xtmp_dir)) ((xerr)))
            (((unsupported)).apply ((xTestCase)))
              seq
                unsupported
                xtest_with_correct_code.write
                  [xself xMockNannyNag]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("error_free"))))) ((xfile_path)))
                          seq
                            (((unsupported)).apply ((((xopen)).apply ((xfile_path)))) ((xf)))
                              bogusForceDataize.write ((((xtabnanny).xprocess_tokens)).apply (((((xtokenize).xgenerate_tokens)).apply (((xf).xreadline)))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply (((xMockNannyNag).xcalled)))
                xtest_with_errored_codes_samples.write
                  [xself]
                    memory > xtokens
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xkey)) ((((unsupported)).apply ("tab_space_errored_1") ("tab_space_errored_2"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xkey)))))
                            (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ((xkey)))))) ((xfile_path)))
                              (((unsupported)).apply ((((xopen)).apply ((xfile_path)))) ((xf)))
                                seq
                                  xtokens.write ((((xtokenize).xgenerate_tokens)).apply (((xf).xreadline)))
                                  (((unsupported)).apply (((((xself).xassertRaises)).apply (((xtabnanny).xNannyNag)))))
                                    bogusForceDataize.write ((((xtabnanny).xprocess_tokens)).apply ((xtokens)))
            (((unsupported)).apply ((xTestCase)))
              seq
                unsupported
                xvalidate_cmd.write
                  [xself xstdout xstderr xpartial]
                    memory > x_output
                    memory > xout
                    memory > xerr
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xout)) ((xerr)))) (((((xscript_helper).xassert_python_ok)).apply ("-m") ("tabnanny") ((((unsupported)).apply ((xargs)))))))
                        xout.write ((((xout).xdecode)).apply ("ascii"))
                        xerr.write ((((xerr).xdecode)).apply ("ascii"))
                        (xpartial).if
                          (((unsupported)).apply ((((unsupported)).apply ((xstd)) ((xoutput)))) ((((unsupported)).apply ((((unsupported)).apply ((xstdout)) ((xout)))) ((((unsupported)).apply ((xstderr)) ((xerr)))))))
                            seq
                              x_output.write ((((xoutput).xsplitlines)).apply)
                              (((unsupported)).apply ((x_std)) (((((xstd).xsplitlines)).apply)))
                                (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((x_std)) ((x_output)))))
                                  bogusForceDataize.write ((((xself).xassertIn)).apply ((x_std)) ((x_output)))
                          seq
                            bogusForceDataize.write ((((xself).xassertListEqual)).apply (((((xout).xsplitlines)).apply)) (((((xstdout).xsplitlines)).apply)))
                            bogusForceDataize.write ((((xself).xassertListEqual)).apply (((((xerr).xsplitlines)).apply)) (((((xstderr).xsplitlines)).apply)))
                xtest_with_errored_file.write
                  [xself]
                    memory > xstderr
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("wrong_indented"))))) ((xfile_path)))
                          seq
                            xstderr.write "{file_path!r}: Indentation Error: "
                            (((unsupported)).apply ((xstderr)) ("unindent does not match any outer indentation level (<tokenize>, line 3)"))
                            (((unsupported)).apply (((xself).xvalidate_cmd)) ((xfile_path)) ((xstderr)))
                xtest_with_error_free_file.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("error_free"))))) ((xfile_path)))
                          bogusForceDataize.write ((((xself).xvalidate_cmd)).apply ((xfile_path)))
                xtest_command_usage.write
                  [xself]
                    memory > xstderr
                    memory > xpath
                    seq > @
                      seq
                        unsupported
                        xpath.write (((xfindfile)).apply ("tabnanny.py"))
                        xstderr.write "Usage: {path} [-v] file_or_directory ..."
                        (((unsupported)).apply (((xself).xvalidate_cmd)) ((xstderr)))
                xtest_quiet_flag.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("nannynag_errored"))))) ((xfile_path)))
                          seq
                            xstdout.write "{file_path}n"
                            (((unsupported)).apply (((xself).xvalidate_cmd)) ("-q") ((xfile_path)) ((xstdout)))
                xtest_verbose_mode.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("nannynag_errored"))))) ((xpath)))
                          seq
                            xstdout.write (((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                            (((unsupported)).apply (((xself).xvalidate_cmd)) ("-v") ((xpath)) ((xstdout)) (TRUE))
                xtest_double_verbose_mode.write
                  [xself]
                    memory > xstdout
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xTemporaryPyFile)).apply ((((unsupported)).apply ((xSOURCE_CODES)) ("nannynag_errored"))))) ((xpath)))
                          seq
                            xstdout.write (((((((xtextwrap).xdedent)).apply ((((unsupported)).apply))).xstrip)).apply)
                            (((unsupported)).apply (((xself).xvalidate_cmd)) ("-vv") ((xpath)) ((xstdout)) (TRUE))