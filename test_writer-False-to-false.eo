memory > xValueError
memory > xbuff
memory > xget_default_timezone
memory > xException
memory > xx
memory > xfloat
memory > xe
memory > xentries
memory > xget_fixed_timezone
memory > xapp
memory > xfalse
memory > xImportError
memory > xcomplex
memory > xMoney
memory > xTextEnum
memory > xTestModel1
memory > xdatetime
memory > xTextTranslatedEnum
memory > xlist
memory > xdecimal
memory > xuuid
memory > xget_version
memory > xRegexValidator
memory > xfrozenset
memory > xstr
memory > xOperationWriter
memory > xEmailValidator
memory > xMigrationWriter
memory > xexec
memory > xTestModel2
memory > xBaseSerializer
memory > xrange
memory > xmath
memory > xdeconstructible
memory > xDeconstructibleInstances
memory > ximports
memory > xcustom_migration_operations
memory > xnested_cls
memory > xmigrations
memory > xFoodManager
memory > xtype
memory > xutc
memory > xpathlib
memory > xstring
memory > xignore_warnings
memory > xset
memory > xre
memory > xIntegerChoices
memory > xrepr
memory > xsettings
memory > xFoodQuerySet
memory > xRemovedInDjango50Warning
memory > xsys
memory > xglobals
memory > xm
memory > xtuple
memory > xmock
memory > xos
memory > xenum
memory > xSettingsReference
memory > xDateChoices
memory > xzoneinfo
memory > x__file__
memory > xTextChoices
memory > xSimpleLazyObject
memory > xComplexSerializer
memory > xmodels
memory > xBinaryEnum
memory > xinclude_header
memory > xtzinfo
memory > xfunctools
memory > xIntEnum
memory > xdict
memory > xSimpleTestCase
[] > test_writer
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_simple_migration
        memory > xtest_multiline_args_signature
        memory > xtest_nested_operation_expand_args_signature
        memory > xtest_serialize_empty_nonempty_tuple
        memory > xtest_serialize_collections
        memory > xtest_serialize_strings
        memory > xA
        memory > xtest_register_non_serializer
        memory > xtest_serialize_local_function_reference
        memory > xtest_serialize_type_none
        memory > xtest_serialize_lazy_objects
        memory > xtest_serialize_fields
        memory > xtest_serialize_builtin_types
        memory > xtest_deconstruct_class_arguments
        memory > xtest_serialize_range
        memory > xtest_sorted_imports
        memory > xserialize_round_trip
        memory > xtest_serialize_uuid
        memory > xtest_serialize_iterators
        memory > xtest_serialize_set
        memory > xsafe_exec
        memory > xtest_serialize_datetime
        memory > xtest_serialize_functools_partial
        memory > xB
        memory > xtest_serialize_multiline_strings
        memory > xtest_serialize_pathlib
        memory > xtest_serialize_nested_class
        memory > xtest_serialize_numbers
        memory > x_
        memory > xtest_serialize_builtins
        memory > xtest_expand_args_signature
        memory > xtest_serialize_choices
        memory > xtest_serialize_unbound_method_reference
        memory > xtest_args_signature
        memory > xtest_custom_operation
        memory > xtest_serialize_frozensets
        memory > xtest_empty_signature
        memory > xthing
        memory > xX
        memory > xtest_serialize_timedelta
        memory > xtest_register_serializer
        memory > xtest_serialize_complex_func_index
        memory > xtest_serialize_class_based_validators
        memory > xtest_serialize_type_model
        memory > xassertSerializedEqual
        memory > xpytz
        memory > xdeconstruct
        memory > xtest_args_kwargs_signature
        memory > xtest_nested_args_signature
        memory > xtest_serialize_constants
        memory > xupload_to
        memory > xtest_models_import_omitted
        memory > xtest_serialize_settings
        memory > xtest_serialize_path_like
        memory > xtest_serialize_managers
        memory > xassertSerializedFieldEqual
        memory > xY
        memory > xtest_serialize_compiled_regex
        memory > xtest_serialize_enums
        memory > xtest_migration_file_header_comments
        memory > xtest_kwargs_signature
        memory > xassertSerializedResultEqual
        memory > xtest_serialize_functions
        memory > xtest_migration_path
        memory > xtest_serialize_functools_partialmethod
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xpytz.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
              xdeconstruct.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((unsupported)).apply ("DeconstructibleInstances") ((((unsupported)).apply)) ((((unsupported)).apply)))))
            (((unsupported)).apply (((xdecimal).xDecimal)))
              xdeconstruct.write
                [xself]
                  seq > @
                    (((unsupported)).apply ((((unsupported)).apply (("%s.%s".mod (((unsupported)).apply ((((xself).x__class__).x__module__)) ((((xself).x__class__).x__name__))))) ((((unsupported)).apply ((((xstr)).apply ((xself)))))) ((((unsupported)).apply)))))
            (((unsupported)).apply)
              seq
                xupload_to.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ("/somewhere/dynamic/"))
                xthing.write (((unsupported)).apply (((xmodels).xFileField)) ((xupload_to)))
            (((unsupported)).apply (((xenum).xEnum)))
              seq
                xA.write "a-value"
                xB.write "value-b"
            (((unsupported)).apply (((xenum).xEnum)))
              seq
                xA.write (((x_)).apply ("a-value"))
                xB.write (((x_)).apply ("value-b"))
            (((unsupported)).apply (((xenum).xEnum)))
              seq
                xA.write "a-value"
                xB.write "value-b"
            (((unsupported)).apply (((xenum).xIntEnum)))
              seq
                xA.write 1
                xB.write 2
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_empty_signature.write
                  [xself]
                    memory > xoperation
                    seq > @
                      seq
                        xoperation.write (((((xcustom_migration_operations).xoperations).xTestOperation)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xbuff)) ((ximports)))) (((((((unsupported)).apply ((xOperationWriter)) ((xoperation)) (0)).xserialize)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((unsupported)).apply ("import custom_migration_operations.operations"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuff)) ("custom_migration_operations.operations.TestOperation(n),"))
                xtest_args_signature.write
                  [xself]
                    memory > xoperation
                    seq > @
                      seq
                        xoperation.write (((((xcustom_migration_operations).xoperations).xArgsOperation)).apply (1) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xbuff)) ((ximports)))) (((((((unsupported)).apply ((xOperationWriter)) ((xoperation)) (0)).xserialize)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((unsupported)).apply ("import custom_migration_operations.operations"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuff)) ("custom_migration_operations.operations.ArgsOperation(n    arg1=1,n    arg2=2,n),"))
                xtest_kwargs_signature.write
                  [xself]
                    memory > xoperation
                    seq > @
                      seq
                        xoperation.write (((unsupported)).apply ((((xcustom_migration_operations).xoperations).xKwargsOperation)) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xbuff)) ((ximports)))) (((((((unsupported)).apply ((xOperationWriter)) ((xoperation)) (0)).xserialize)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((unsupported)).apply ("import custom_migration_operations.operations"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuff)) ("custom_migration_operations.operations.KwargsOperation(n    kwarg1=1,n),"))
                xtest_args_kwargs_signature.write
                  [xself]
                    memory > xoperation
                    seq > @
                      seq
                        xoperation.write (((unsupported)).apply ((((xcustom_migration_operations).xoperations).xArgsKwargsOperation)) (1) (2) (4))
                        (((unsupported)).apply ((((unsupported)).apply ((xbuff)) ((ximports)))) (((((((unsupported)).apply ((xOperationWriter)) ((xoperation)) (0)).xserialize)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((unsupported)).apply ("import custom_migration_operations.operations"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuff)) ("custom_migration_operations.operations.ArgsKwargsOperation(n    arg1=1,n    arg2=2,n    kwarg2=4,n),"))
                xtest_nested_args_signature.write
                  [xself]
                    memory > xoperation
                    seq > @
                      seq
                        xoperation.write (((((xcustom_migration_operations).xoperations).xArgsOperation)).apply ((((((xcustom_migration_operations).xoperations).xArgsOperation)).apply (1) (2))) ((((unsupported)).apply ((((xcustom_migration_operations).xoperations).xKwargsOperation)) (3) (4))))
                        (((unsupported)).apply ((((unsupported)).apply ((xbuff)) ((ximports)))) (((((((unsupported)).apply ((xOperationWriter)) ((xoperation)) (0)).xserialize)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((unsupported)).apply ("import custom_migration_operations.operations"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuff)) ("custom_migration_operations.operations.ArgsOperation(n    arg1=custom_migration_operations.operations.ArgsOperation(n        arg1=1,n        arg2=2,n    ),n    arg2=custom_migration_operations.operations.KwargsOperation(n        kwarg1=3,n        kwarg2=4,n    ),n),"))
                xtest_multiline_args_signature.write
                  [xself]
                    memory > xoperation
                    seq > @
                      seq
                        xoperation.write (((((xcustom_migration_operations).xoperations).xArgsOperation)).apply ("testn    arg1") ("testnarg2"))
                        (((unsupported)).apply ((((unsupported)).apply ((xbuff)) ((ximports)))) (((((((unsupported)).apply ((xOperationWriter)) ((xoperation)) (0)).xserialize)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((unsupported)).apply ("import custom_migration_operations.operations"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuff)) ((((unsupported)).apply)))
                xtest_expand_args_signature.write
                  [xself]
                    memory > xoperation
                    seq > @
                      seq
                        xoperation.write (((((xcustom_migration_operations).xoperations).xExpandArgsOperation)).apply ((((unsupported)).apply (1) (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xbuff)) ((ximports)))) (((((((unsupported)).apply ((xOperationWriter)) ((xoperation)) (0)).xserialize)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((unsupported)).apply ("import custom_migration_operations.operations"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuff)) ("custom_migration_operations.operations.ExpandArgsOperation(n    arg=[n        1,n        2,n    ],n),"))
                xtest_nested_operation_expand_args_signature.write
                  [xself]
                    memory > xoperation
                    seq > @
                      seq
                        xoperation.write (((unsupported)).apply ((((xcustom_migration_operations).xoperations).xExpandArgsOperation)) ((((unsupported)).apply ((((unsupported)).apply ((((xcustom_migration_operations).xoperations).xKwargsOperation)) (1) (2))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xbuff)) ((ximports)))) (((((((unsupported)).apply ((xOperationWriter)) ((xoperation)) (0)).xserialize)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((unsupported)).apply ("import custom_migration_operations.operations"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuff)) ("custom_migration_operations.operations.ExpandArgsOperation(n    arg=[n        custom_migration_operations.operations.KwargsOperation(n            kwarg1=1,n            kwarg2=2,n        ),n    ],n),"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                (((unsupported)).apply)
                (((unsupported)).apply (((xenum).xIntEnum)))
                  seq
                    xA.write 1
                    xB.write 2
                (((unsupported)).apply (((xmodels).xTextChoices)))
                  seq
                    xX.write (((unsupported)).apply ("X") ("X value"))
                    xY.write (((unsupported)).apply ("Y") ("Y value"))
                xsafe_exec.write
                  [xself xstring xvalue]
                    memory > xd
                    seq > @
                      (((unsupported)).apply)
                        xd.write (((unsupported)).apply)
                        (((unsupported)).apply ((xException)))
                          bogusForceDataize.write (((xexec)).apply ((xstring)) ((((xglobals)).apply)) ((xd)))
                          (xvalue).if
                            bogusForceDataize.write ((((xself).xfail)).apply (("Could not exec %r (from value %r): %s".mod (((unsupported)).apply (((((xstring).xstrip)).apply)) ((xvalue)) ((xe))))))
                            bogusForceDataize.write ((((xself).xfail)).apply (("Could not exec %r: %s".mod (((unsupported)).apply (((((xstring).xstrip)).apply)) ((xe))))))
                        (((unsupported)).apply ((xd)))
                xserialize_round_trip.write
                  [xself xvalue]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply ((xvalue)))))
                        (((unsupported)).apply ((((unsupported)).apply (((((xself).xsafe_exec)).apply (("%sntest_value_result = %s".mod (((unsupported)).apply (((("n".xjoin)).apply ((ximports)))) ((xstring))))) ((xvalue)))) ("test_value_result"))))
                xassertSerializedEqual.write
                  [xself xvalue]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xserialize_round_trip)).apply ((xvalue)))) ((xvalue)))
                xassertSerializedResultEqual.write
                  [xself xvalue xtarget]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xMigrationWriter).xserialize)).apply ((xvalue)))) ((xtarget)))
                xassertSerializedFieldEqual.write
                  [xself xvalue]
                    memory > xnew_value
                    seq > @
                      seq
                        xnew_value.write ((((xself).xserialize_round_trip)).apply ((xvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xvalue).x__class__)) (((xnew_value).x__class__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xvalue).xmax_length)) (((xnew_value).xmax_length)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xvalue).xnull)) (((xnew_value).xnull)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xvalue).xunique)) (((xnew_value).xunique)))
                xtest_serialize_numbers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (1))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (1.2))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisinf)).apply (((((xself).xserialize_round_trip)).apply ((((xfloat)).apply ("inf"))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisinf)).apply (((((xself).xserialize_round_trip)).apply ((((xfloat)).apply ("-inf"))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xmath).xisnan)).apply (((((xself).xserialize_round_trip)).apply ((((xfloat)).apply ("nan"))))))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((((xdecimal).xDecimal)).apply ("1.3"))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((((xdecimal).xDecimal)).apply ("1.3"))) ((((unsupported)).apply ("Decimal('1.3')") ((((unsupported)).apply ("from decimal import Decimal"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xMoney)).apply ("1.3"))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((xMoney)).apply ("1.3"))) ((((unsupported)).apply ("migrations.test_writer.Money('1.3')") ((((unsupported)).apply ("import migrations.test_writer"))))))
                xtest_serialize_constants.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (TRUE))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((xfalse)))
                xtest_serialize_strings.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ("foobar"))
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply ("foobar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("b'foobar'"))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ("föobár"))
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply ("foobar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("'foobar'"))
                xtest_serialize_multiline_strings.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ("foonbar"))
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply ("foonbar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ("föonbár"))
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply ("foonbar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ((((unsupported)).apply)))
                xtest_serialize_collections.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply ("a") (2) (TRUE) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply (2) (3) ("eighty"))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply ("lalalala") ((((unsupported)).apply ("yeah") ("no") ("maybe"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((x_)).apply ("Hello"))))
                xtest_serialize_builtin_types.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply ((xlist)) ((xtuple)) ((xdict)) ((xset)) ((xfrozenset)))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((unsupported)).apply ((xlist)) ((xtuple)) ((xdict)) ((xset)) ((xfrozenset)))) ((((unsupported)).apply ("[list, tuple, dict, set, frozenset]") ((((xset)).apply)))))
                xtest_serialize_lazy_objects.write
                  [xself]
                    memory > xlazy_pattern
                    memory > xpattern
                    seq > @
                      seq
                        xpattern.write ((((xre).xcompile)).apply ("^foo$"))
                        xlazy_pattern.write (((xSimpleLazyObject)).apply ((((unsupported)).apply ((xpattern)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xserialize_round_trip)).apply ((xlazy_pattern)))) ((xpattern)))
                xtest_serialize_enums.write
                  [xself]
                    memory > xfield
                    memory > xstring
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((xTextEnum).xA)) ((((unsupported)).apply ("migrations.test_writer.TextEnum['A']") ((((unsupported)).apply ("import migrations.test_writer"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((xTextTranslatedEnum).xA)) ((((unsupported)).apply ("migrations.test_writer.TextTranslatedEnum['A']") ((((unsupported)).apply ("import migrations.test_writer"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((xBinaryEnum).xA)) ((((unsupported)).apply ("migrations.test_writer.BinaryEnum['A']") ((((unsupported)).apply ("import migrations.test_writer"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((xIntEnum).xB)) ((((unsupported)).apply ("migrations.test_writer.IntEnum['B']") ((((unsupported)).apply ("import migrations.test_writer"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((xself).xNestedEnum).xA)) ((((unsupported)).apply ("migrations.test_writer.WriterTests.NestedEnum['A']") ((((unsupported)).apply ("import migrations.test_writer"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xself).xNestedEnum).xA)))
                        xfield.write (((unsupported)).apply (((xmodels).xCharField)) (((xTextEnum).xB)) ((((unsupported)).apply ((((unsupported)).apply (((xm).xvalue)) ((xm)))) ((xm)) ((xTextEnum)))))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xfield)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.CharField(choices=[('a-value', migrations.test_writer.TextEnum['A']), ('value-b', migrations.test_writer.TextEnum['B'])], default=migrations.test_writer.TextEnum['B'])"))
                        xfield.write (((unsupported)).apply (((xmodels).xCharField)) (((xTextTranslatedEnum).xA)) ((((unsupported)).apply ((((unsupported)).apply (((xm).xvalue)) ((xm)))) ((xm)) ((xTextTranslatedEnum)))))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xfield)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.CharField(choices=[('a-value', migrations.test_writer.TextTranslatedEnum['A']), ('value-b', migrations.test_writer.TextTranslatedEnum['B'])], default=migrations.test_writer.TextTranslatedEnum['A'])"))
                        xfield.write (((unsupported)).apply (((xmodels).xCharField)) (((xBinaryEnum).xB)) ((((unsupported)).apply ((((unsupported)).apply (((xm).xvalue)) ((xm)))) ((xm)) ((xBinaryEnum)))))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xfield)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.CharField(choices=[(b'a-value', migrations.test_writer.BinaryEnum['A']), (b'value-b', migrations.test_writer.BinaryEnum['B'])], default=migrations.test_writer.BinaryEnum['B'])"))
                        xfield.write (((unsupported)).apply (((xmodels).xIntegerField)) (((xIntEnum).xA)) ((((unsupported)).apply ((((unsupported)).apply (((xm).xvalue)) ((xm)))) ((xm)) ((xIntEnum)))))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xfield)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.IntegerField(choices=[(1, migrations.test_writer.IntEnum['A']), (2, migrations.test_writer.IntEnum['B'])], default=migrations.test_writer.IntEnum['A'])"))
                xtest_serialize_choices.write
                  [xself]
                    memory > xfield
                    memory > xDATE_2
                    memory > xB
                    memory > xDATE_1
                    memory > xstring
                    memory > xA
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xTextChoices)))
                          seq
                            xA.write (((unsupported)).apply ("A") ("A value"))
                            xB.write (((unsupported)).apply ("B") ("B value"))
                        (((unsupported)).apply (((xmodels).xIntegerChoices)))
                          seq
                            xA.write (((unsupported)).apply (1) ("One"))
                            xB.write (((unsupported)).apply (2) ("Two"))
                        (((unsupported)).apply (((xdatetime).xdate)) (((xmodels).xChoices)))
                          seq
                            xDATE_1.write (((unsupported)).apply (1969) (7) (20) ("First date"))
                            xDATE_2.write (((unsupported)).apply (1969) (11) (19) ("Second date"))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((xTextChoices).xA)) ((((unsupported)).apply ("'A'") ((((xset)).apply)))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((xIntegerChoices).xA)) ((((unsupported)).apply ("1") ((((xset)).apply)))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((xDateChoices).xDATE_1)) ((((unsupported)).apply ("datetime.date(1969, 7, 20)") ((((unsupported)).apply ("import datetime"))))))
                        xfield.write (((unsupported)).apply (((xmodels).xCharField)) (((xTextChoices).xB)) (((xTextChoices).xchoices)))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xfield)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.CharField(choices=[('A', 'A value'), ('B', 'B value')], default='B')"))
                        xfield.write (((unsupported)).apply (((xmodels).xIntegerField)) (((xIntegerChoices).xB)) (((xIntegerChoices).xchoices)))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xfield)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)"))
                        xfield.write (((unsupported)).apply (((xmodels).xDateField)) (((xDateChoices).xDATE_2)) (((xDateChoices).xchoices)))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xfield)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.DateField(choices=[(datetime.date(1969, 7, 20), 'First date'), (datetime.date(1969, 11, 19), 'Second date')], default=datetime.date(1969, 11, 19))"))
                xtest_serialize_nested_class.write
                  [xself]
                    memory > xcls_name
                    seq > @
                      (((unsupported)).apply ((xnested_cls)) ((((unsupported)).apply (((xself).xNestedEnum)) (((xself).xNestedChoices)))))
                        seq
                          xcls_name.write ((xnested_cls).x__name__)
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xcls_name)))))
                            bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((xnested_cls)) ((((unsupported)).apply (("migrations.test_writer.WriterTests.%s".mod (xcls_name))) ((((unsupported)).apply ("import migrations.test_writer"))))))
                xtest_serialize_uuid.write
                  [xself]
                    memory > xfield
                    memory > xuuid_a
                    memory > xuuid_b
                    memory > xstring
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((((xuuid).xuuid1)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((((xuuid).xuuid4)).apply)))
                        xuuid_a.write ((((xuuid).xUUID)).apply ("5c859437-d061-4847-b3f7-e6b78852f8c8"))
                        xuuid_b.write ((((xuuid).xUUID)).apply ("c7853ec1-2ea3-4359-b02d-b54e8f1bcee2"))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((xuuid_a)) ((((unsupported)).apply ("uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')") ((((unsupported)).apply ("import uuid"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((xuuid_b)) ((((unsupported)).apply ("uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')") ((((unsupported)).apply ("import uuid"))))))
                        xfield.write (((unsupported)).apply (((xmodels).xUUIDField)) ((((unsupported)).apply ((((unsupported)).apply ((xuuid_a)) ("UUID A"))) ((((unsupported)).apply ((xuuid_b)) ("UUID B"))))) ((xuuid_a)))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xfield)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.UUIDField(choices=[(uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'), 'UUID A'), (uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2'), 'UUID B')], default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))"))
                xtest_serialize_pathlib.write
                  [xself]
                    memory > xfield
                    memory > xexpected
                    memory > xpath
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((((xpathlib).xPurePosixPath)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((((xpathlib).xPureWindowsPath)).apply)))
                        xpath.write ((((xpathlib).xPurePosixPath)).apply ("/path/file.txt"))
                        xexpected.write (((unsupported)).apply ("pathlib.PurePosixPath('/path/file.txt')") ((((unsupported)).apply ("import pathlib"))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((xpath)) ((xexpected)))
                        xpath.write ((((xpathlib).xPureWindowsPath)).apply ((((unsupported)).apply)))
                        xexpected.write (((unsupported)).apply ("pathlib.PureWindowsPath('A:/File.txt')") ((((unsupported)).apply ("import pathlib"))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((xpath)) ((xexpected)))
                        (((xsys).xplatform).eq "win32").if
                          seq
                            bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((((xpathlib).xWindowsPath).xcwd)).apply)))
                            xpath.write ((((xpathlib).xWindowsPath)).apply ((((unsupported)).apply)))
                            xexpected.write (((unsupported)).apply ("pathlib.PureWindowsPath('A:/File.txt')") ((((unsupported)).apply ("import pathlib"))))
                            bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((xpath)) ((xexpected)))
                          seq
                            bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((((xpathlib).xPosixPath).xcwd)).apply)))
                            xpath.write ((((xpathlib).xPosixPath)).apply ("/path/file.txt"))
                            xexpected.write (((unsupported)).apply ("pathlib.PurePosixPath('/path/file.txt')") ((((unsupported)).apply ("import pathlib"))))
                            bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((xpath)) ((xexpected)))
                        xfield.write (((unsupported)).apply (((xmodels).xFilePathField)) (((((xpathlib).xPurePosixPath)).apply ("/home/user"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply ((xfield)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.FilePathField(path=pathlib.PurePosixPath('/home/user'))"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("import pathlib") ((ximports)))
                xtest_serialize_path_like.write
                  [xself]
                    memory > xfield
                    memory > xpath_like
                    memory > xexpected
                    memory > xstring
                    seq > @
                      seq
                        (((unsupported)).apply (((((xos).xscandir)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))))) ((xentries)))
                          xpath_like.write (((unsupported)).apply ((((xlist)).apply ((xentries)))) (0))
                        xexpected.write (((unsupported)).apply ((((xrepr)).apply (((xpath_like).xpath)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((xpath_like)) ((xexpected)))
                        xfield.write (((unsupported)).apply (((xmodels).xFilePathField)) ((xpath_like)))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xfield)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) (("models.FilePathField(path=%r)".mod ((xpath_like).xpath))))
                xtest_serialize_functions.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot serialize function: lambda"))))
                          bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply (42))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((xmodels).xSET_NULL)))
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply (((((xmodels).xSET)).apply (42))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.SET(42)"))
                        bogusForceDataize.write ((((xself).xserialize_round_trip)).apply (((((xmodels).xSET)).apply (42))))
                xtest_serialize_datetime.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((((xdatetime).xdatetime).xnow)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xdatetime).xdatetime).xnow)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((((xdatetime).xdatetime).xtoday)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xdatetime).xdatetime).xtoday)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((((xdatetime).xdate).xtoday)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xdatetime).xdate).xtoday)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((((((((xdatetime).xdatetime).xnow)).apply).xtime)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2014) (1) (1) (1) (1) ((((xget_default_timezone)).apply)))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2013) (12) (31) (22) (1) ((((xget_fixed_timezone)).apply (180))))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((((xdatetime).xdatetime)).apply (2014) (1) (1) (1) (1))) ((((unsupported)).apply ("datetime.datetime(2014, 1, 1, 1, 1)") ((((unsupported)).apply ("import datetime"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xignore_warnings)) ((xRemovedInDjango50Warning)))))
                          (((unsupported)).apply)
                        (((unsupported)).apply ((xtzinfo)) ((((unsupported)).apply ((xutc)) ((((xdatetime).xtimezone).xutc)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtzinfo)))))
                            bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2012) (1) (1) (1) (1) ((xtzinfo)))) ((((unsupported)).apply ("datetime.datetime(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc)") ((((unsupported)).apply ("import datetime"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((unsupported)).apply (((xdatetime).xdatetime)) (2012) (1) (1) (2) (1) (((((xzoneinfo).xZoneInfo)).apply ("Europe/Paris"))))) ((((unsupported)).apply ("datetime.datetime(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc)") ((((unsupported)).apply ("import datetime"))))))
                        (xpytz).if
                          bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((((((xpytz).xtimezone)).apply ("Europe/Paris")).xlocalize)).apply (((((xdatetime).xdatetime)).apply (2012) (1) (1) (2) (1))))) ((((unsupported)).apply ("datetime.datetime(2012, 1, 1, 1, 1, tzinfo=datetime.timezone.utc)") ((((unsupported)).apply ("import datetime"))))))
                xtest_serialize_fields.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedFieldEqual)).apply ((((unsupported)).apply (((xmodels).xCharField)) (255))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((unsupported)).apply (((xmodels).xCharField)) (255))) ((((unsupported)).apply ("models.CharField(max_length=255)") ((((unsupported)).apply ("from django.db import models"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedFieldEqual)).apply ((((unsupported)).apply (((xmodels).xTextField)) (TRUE) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((unsupported)).apply (((xmodels).xTextField)) (TRUE) (TRUE))) ((((unsupported)).apply ("models.TextField(blank=True, null=True)") ((((unsupported)).apply ("from django.db import models"))))))
                xtest_serialize_settings.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xSettingsReference)).apply (((xsettings).xAUTH_USER_MODEL)) ("AUTH_USER_MODEL"))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((xSettingsReference)).apply ("someapp.model") ("AUTH_USER_MODEL"))) ((((unsupported)).apply ("settings.AUTH_USER_MODEL") ((((unsupported)).apply ("from django.conf import settings"))))))
                xtest_serialize_iterators.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) (((xx).mul (xx))))) ((xx)) ((((xrange)).apply (3))))) ((((unsupported)).apply ("((0, 0), (1, 1), (2, 4))") ((((xset)).apply)))))
                xtest_serialize_compiled_regex.write
                  [xself]
                    memory > xregex
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xregex.write ((((xre).xcompile)).apply ("^w+$"))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((xregex)))
                xtest_serialize_class_based_validators.write
                  [xself]
                    memory > xvalidator
                    memory > xstring
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xvalidator.write (((unsupported)).apply ((xRegexValidator)) ("hello"))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xvalidator)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("django.core.validators.RegexValidator(message='hello')"))
                        bogusForceDataize.write ((((xself).xserialize_round_trip)).apply ((xvalidator)))
                        xvalidator.write (((unsupported)).apply ((xRegexValidator)) (((((xre).xcompile)).apply ("^w+$"))))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xvalidator)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xserialize_round_trip)).apply ((xvalidator)))
                        xvalidator.write (((unsupported)).apply ((xRegexValidator)) ("^[0-9]+$") (((xre).xS)))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xvalidator)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("django.core.validators.RegexValidator('^[0-9]+$', flags=re.RegexFlag['DOTALL'])"))
                        bogusForceDataize.write ((((xself).xserialize_round_trip)).apply ((xvalidator)))
                        xvalidator.write (((xRegexValidator)).apply ("^[-a-zA-Z0-9_]+$") ("Invalid") ("invalid"))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xvalidator)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("django.core.validators.RegexValidator('^[-a-zA-Z0-9_]+$', 'Invalid', 'invalid')"))
                        bogusForceDataize.write ((((xself).xserialize_round_trip)).apply ((xvalidator)))
                        xvalidator.write (((unsupported)).apply ((xEmailValidator)) ("hello"))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xvalidator)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("django.core.validators.EmailValidator(message='hello')"))
                        bogusForceDataize.write ((((xself).xserialize_round_trip)).apply ((xvalidator)))
                        xvalidator.write (((unsupported)).apply ((((((unsupported)).apply ((xdeconstructible)) ("migrations.test_writer.EmailValidator"))).apply ((xEmailValidator)))) ("hello"))
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((xvalidator)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("migrations.test_writer.EmailValidator(message='hello')"))
                        xvalidator.write (((unsupported)).apply ((((((unsupported)).apply ((xdeconstructible)) ("custom.EmailValidator"))).apply ((xEmailValidator)))) ("hello"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImportError)) ("No module named 'custom'"))))
                          bogusForceDataize.write ((((xMigrationWriter).xserialize)).apply ((xvalidator)))
                        xvalidator.write (((unsupported)).apply ((((((unsupported)).apply ((xdeconstructible)) ("django.core.validators.EmailValidator2"))).apply ((xEmailValidator)))) ("hello"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Could not find object EmailValidator2 in django.core.validators."))))
                          bogusForceDataize.write ((((xMigrationWriter).xserialize)).apply ((xvalidator)))
                xtest_serialize_complex_func_index.write
                  [xself]
                    memory > xindex
                    seq > @
                      seq
                        xindex.write (((unsupported)).apply (((xmodels).xIndex)) ((((unsupported)).apply (((xmodels).xFunc)) ("rating") ("ABS"))) ((((unsupported)).apply (((xmodels).xCase)) ((((unsupported)).apply (((xmodels).xWhen)) ("special") (((((xmodels).xValue)).apply ("X"))))) (((((xmodels).xValue)).apply ("other"))))) ((((unsupported)).apply (((xmodels).xExpressionWrapper)) (((((xmodels).xF)).apply ("pages"))) (((((xmodels).xIntegerField)).apply)))) (((((xmodels).xOrderBy)).apply ((((((((xmodels).xF)).apply ("name")).xdesc)).apply)))) ("complex_func_index"))
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply ((xindex)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.Index(models.Func('rating', function='ABS'), models.Case(models.When(name='special', then=models.Value('X')), default=models.Value('other')), models.ExpressionWrapper(models.F('pages'), output_field=models.IntegerField()), models.OrderBy(models.OrderBy(models.F('name'), descending=True)), name='complex_func_index')"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((unsupported)).apply ("from django.db import models"))))
                xtest_serialize_empty_nonempty_tuple.write
                  [xself]
                    memory > xone_item_tuple
                    memory > xmany_items_tuple
                    memory > xempty_tuple
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xempty_tuple.write (((unsupported)).apply)
                        xone_item_tuple.write (((unsupported)).apply ("a"))
                        xmany_items_tuple.write (((unsupported)).apply ("a") ("b") ("c"))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((xempty_tuple)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((xone_item_tuple)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((xmany_items_tuple)))
                xtest_serialize_range.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply ((((xrange)).apply (1) (5))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("range(1, 5)"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((xset)).apply)))
                xtest_serialize_builtins.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xstring)) ((ximports)))) (((((xMigrationWriter).xserialize)).apply ((xrange)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("range"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((ximports)) ((((xset)).apply)))
                xtest_serialize_unbound_method_reference.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xserialize_round_trip)).apply (((xTestModel1).xthing)))
                xtest_serialize_local_function_reference.write
                  [xself]
                    memory > xthing
                    memory > xupload_to
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply)
                          seq
                            xupload_to.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ("somewhere dynamic"))
                            xthing.write (((unsupported)).apply (((xmodels).xFileField)) ((xupload_to)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Could not find function upload_to in migrations.test_writer"))))
                          bogusForceDataize.write ((((xself).xserialize_round_trip)).apply (((xTestModel2).xthing)))
                xtest_serialize_managers.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((((xmodels).xManager)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((((xFoodQuerySet).xas_manager)).apply)) ((((unsupported)).apply ("migrations.models.FoodQuerySet.as_manager()") ((((unsupported)).apply ("import migrations.models"))))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xFoodManager)).apply ("a") ("b"))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply ((xFoodManager)) ("x") ("y") (3) (4))))
                xtest_serialize_frozensets.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xfrozenset)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xfrozenset)).apply ("let it go"))))
                xtest_serialize_set.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((xset)).apply)) ((((unsupported)).apply ("set()") ((((xset)).apply)))))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply ((((unsupported)).apply ("a"))) ((((unsupported)).apply ("{'a'}") ((((xset)).apply)))))
                xtest_serialize_timedelta.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((((xdatetime).xtimedelta)).apply)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((unsupported)).apply (((xdatetime).xtimedelta)) (42))))
                xtest_serialize_functools_partial.write
                  [xself]
                    memory > xvalue
                    memory > xresult
                    seq > @
                      seq
                        xvalue.write (((unsupported)).apply (((xfunctools).xpartial)) (((xdatetime).xtimedelta)) (1) (2))
                        xresult.write ((((xself).xserialize_round_trip)).apply ((xvalue)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xfunc)) (((xvalue).xfunc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xargs)) (((xvalue).xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xkeywords)) (((xvalue).xkeywords)))
                xtest_serialize_functools_partialmethod.write
                  [xself]
                    memory > xvalue
                    memory > xresult
                    seq > @
                      seq
                        xvalue.write (((unsupported)).apply (((xfunctools).xpartialmethod)) (((xdatetime).xtimedelta)) (1) (2))
                        xresult.write ((((xself).xserialize_round_trip)).apply ((xvalue)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xresult)) (((xfunctools).xpartialmethod)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xfunc)) (((xvalue).xfunc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xargs)) (((xvalue).xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresult).xkeywords)) (((xvalue).xkeywords)))
                xtest_serialize_type_none.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xtype)).apply ("None: is there a None literal in the EO language?"))))
                xtest_serialize_type_model.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply (((xmodels).xModel)))
                        bogusForceDataize.write ((((xself).xassertSerializedResultEqual)).apply (((((xMigrationWriter).xserialize)).apply (((xmodels).xModel)))) ((((unsupported)).apply ("('models.Model', {'from django.db import models'})") ((((xset)).apply)))))
                xtest_simple_migration.write
                  [xself]
                    memory > xfields
                    memory > xoutput
                    memory > xmigration
                    memory > xresult
                    memory > xoptions
                    memory > xwriter
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfields.write (((unsupported)).apply ("charfield") ((((unsupported)).apply (((xmodels).xDateTimeField)) ((((xdatetime).xdatetime).xnow)))) ("datetimefield") ((((unsupported)).apply (((xmodels).xDateTimeField)) ((((xdatetime).xdatetime).xnow)))))
                        xoptions.write (((unsupported)).apply ("verbose_name") ("My model") ("verbose_name_plural") ("My models"))
                        xmigration.write (((xtype)).apply ("Migration") ((((unsupported)).apply (((xmigrations).xMigration)))) ((((unsupported)).apply ("operations") ((((unsupported)).apply (((((xmigrations).xCreateModel)).apply ("MyModel") ((((xtuple)).apply (((((xfields).xitems)).apply)))) ((xoptions)) ((((unsupported)).apply (((xmodels).xModel)))))) ((((unsupported)).apply (((xmigrations).xCreateModel)) ("MyModel2") ((((xtuple)).apply (((((xfields).xitems)).apply)))) ((((unsupported)).apply (((xmodels).xModel)))))) ((((unsupported)).apply (((xmigrations).xCreateModel)) ("MyModel3") ((((xtuple)).apply (((((xfields).xitems)).apply)))) ((xoptions)) ((((unsupported)).apply (((xmodels).xModel)))))) (((((xmigrations).xDeleteModel)).apply ("MyModel"))) (((((xmigrations).xAddField)).apply ("OtherModel") ("datetimefield") ((((unsupported)).apply ((xfields)) ("datetimefield"))))))) ("dependencies") ((((unsupported)).apply ((((unsupported)).apply ("testapp") ("some_other_one"))))))))
                        xwriter.write (((xMigrationWriter)).apply ((xmigration)))
                        xoutput.write ((((xwriter).xas_string)).apply)
                        xresult.write ((((xself).xsafe_exec)).apply ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Migration") ((xresult)))
                xtest_migration_path.write
                  [xself]
                    memory > xmigration
                    memory > xexpected_path
                    memory > xwriter
                    memory > xbase_dir
                    memory > xtest_apps
                    seq > @
                      seq
                        xtest_apps.write (((unsupported)).apply ("migrations.migrations_test_apps.normal") ("migrations.migrations_test_apps.with_package_model") ("migrations.migrations_test_apps.without_init_file"))
                        xbase_dir.write (((((xos).xpath).xdirname)).apply ((((((xos).xpath).xdirname)).apply ((x__file__)))))
                        (((unsupported)).apply ((xapp)) ((xtest_apps)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xmodify_settings)) ((((unsupported)).apply ("append") ((xapp)))))))
                            seq
                              xmigration.write ((((xmigrations).xMigration)).apply ("0001_initial") ((((unsupported)).apply (((((xapp).xsplit)).apply ("."))) ((1.neg)))))
                              xexpected_path.write (((((xos).xpath).xjoin)).apply ((xbase_dir)) ((((unsupported)).apply ((((((xapp).xsplit)).apply (".")).add (((unsupported)).apply ("migrations") ("0001_initial.py")))))))
                              xwriter.write (((xMigrationWriter)).apply ((xmigration)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwriter).xpath)) ((xexpected_path)))
                xtest_custom_operation.write
                  [xself]
                    memory > xmigration
                    memory > xresult
                    memory > xwriter
                    memory > xoutput
                    seq > @
                      seq
                        xmigration.write (((xtype)).apply ("Migration") ((((unsupported)).apply (((xmigrations).xMigration)))) ((((unsupported)).apply ("operations") ((((unsupported)).apply ((((((xcustom_migration_operations).xoperations).xTestOperation)).apply)) ((((((xcustom_migration_operations).xoperations).xCreateModel)).apply)) (((((xmigrations).xCreateModel)).apply ("MyModel") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply (((xmodels).xModel)))))) ((((((xcustom_migration_operations).xmore_operations).xTestOperation)).apply)))) ("dependencies") ((((unsupported)).apply)))))
                        xwriter.write (((xMigrationWriter)).apply ((xmigration)))
                        xoutput.write ((((xwriter).xas_string)).apply)
                        xresult.write ((((xself).xsafe_exec)).apply ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("custom_migration_operations") ((xresult)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((((unsupported)).apply ((xresult)) ("custom_migration_operations")).xoperations).xTestOperation)) ((((((unsupported)).apply ((xresult)) ("custom_migration_operations")).xmore_operations).xTestOperation)))
                xtest_sorted_imports.write
                  [xself]
                    memory > xmigration
                    memory > xwriter
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmigration.write (((xtype)).apply ("Migration") ((((unsupported)).apply (((xmigrations).xMigration)))) ((((unsupported)).apply ("operations") ((((unsupported)).apply (((((xmigrations).xAddField)).apply ("mymodel") ("myfield") ((((unsupported)).apply (((xmodels).xDateTimeField)) ((((unsupported)).apply (((xdatetime).xdatetime)) (2012) (1) (1) (1) (1) ((((xdatetime).xtimezone).xutc)))))))))))))
                        xwriter.write (((xMigrationWriter)).apply ((xmigration)))
                        xoutput.write ((((xwriter).xas_string)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("import datetimenfrom django.db import migrations, modelsn") ((xoutput)))
                xtest_migration_file_header_comments.write
                  [xself]
                    memory > xmigration
                    memory > xdt
                    memory > xwriter
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmigration.write (((xtype)).apply ("Migration") ((((unsupported)).apply (((xmigrations).xMigration)))) ((((unsupported)).apply ("operations") ((((unsupported)).apply)))))
                        xdt.write (((unsupported)).apply (((xdatetime).xdatetime)) (2015) (7) (31) (4) (40) (0) (0) ((((xdatetime).xtimezone).xutc)))
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.db.migrations.writer.now") ((((unsupported)).apply ((xdt)))))))
                          (((unsupported)).apply ((xinclude_header)) ((((unsupported)).apply (TRUE) ((xfalse)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xinclude_header)))))
                              seq
                                xwriter.write (((xMigrationWriter)).apply ((xmigration)) ((xinclude_header)))
                                xoutput.write ((((xwriter).xas_string)).apply)
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xinclude_header)) (((((xoutput).xstartswith)).apply (("# Generated by Django %s on 2015-07-31 04:40nn".mod (((xget_version)).apply))))))
                                ((xinclude_header).not).if
                                  bogusForceDataize.write ((((xself).xassertRegex)).apply ((((unsupported)).apply ((((unsupported)).apply (((xoutput).xsplitlines)) (TRUE))) (0))) ("^[^#s]+"))
                xtest_models_import_omitted.write
                  [xself]
                    memory > xmigration
                    memory > xwriter
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmigration.write (((xtype)).apply ("Migration") ((((unsupported)).apply (((xmigrations).xMigration)))) ((((unsupported)).apply ("operations") ((((unsupported)).apply ((((unsupported)).apply (((xmigrations).xAlterModelOptions)) ("model") ((((unsupported)).apply ("verbose_name") ("model") ("verbose_name_plural") ("models"))))))))))
                        xwriter.write (((xMigrationWriter)).apply ((xmigration)))
                        xoutput.write ((((xwriter).xas_string)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("from django.db import migrationsn") ((xoutput)))
                xtest_deconstruct_class_arguments.write
                  [xself]
                    memory > xstring
                    seq > @
                      seq
                        xstring.write (((unsupported)).apply (((((xMigrationWriter).xserialize)).apply ((((unsupported)).apply (((xmodels).xCharField)) ((xDeconstructibleInstances)))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xstring)) ("models.CharField(default=migrations.test_writer.DeconstructibleInstances)"))
                xtest_register_serializer.write
                  [xself]
                    memory > xserialize
                    seq > @
                      seq
                        (((unsupported)).apply ((xBaseSerializer)))
                          xserialize.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((((unsupported)).apply (("complex(%r)".mod ((xself).xvalue))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xMigrationWriter).xregister_serializer)).apply ((xcomplex)) ((xComplexSerializer)))
                        bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xcomplex)).apply (1) (2))))
                        bogusForceDataize.write ((((xMigrationWriter).xunregister_serializer)).apply ((xcomplex)))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot serialize: (1+2j)"))))
                          bogusForceDataize.write ((((xself).xassertSerializedEqual)).apply ((((xcomplex)).apply (1) (2))))
                xtest_register_non_serializer.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("'TestModel1' must inherit from 'BaseSerializer'."))))
                        bogusForceDataize.write ((((xMigrationWriter).xregister_serializer)).apply ((xcomplex)) ((xTestModel1)))