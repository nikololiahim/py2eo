memory > xd
memory > xstr
memory > xwarnings
memory > xfree
memory > xctypes
memory > xcwd_dir
memory > xx
memory > xDeprecationWarning
memory > xtest_genericpath
memory > xb_free
memory > xunittest
memory > xenv
memory > xFakePath
memory > xImportError
memory > xAttributeError
memory > xntpath
memory > xb_cap
memory > xcap
memory > xValueError
memory > xfile
memory > xdrive
memory > xeval
memory > x_
memory > xtf2
memory > xtf1
memory > xp
memory > xopen
memory > xf
memory > xrepr
memory > xr
memory > xhasattr
memory > xsupport
memory > xsys
memory > xTestFailed
memory > xbytes
memory > xtuple
memory > xOSError
memory > xos
memory > xy
memory > xTemporaryFile
memory > xNtpathTestCase
memory > xisinstance
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_ntpath
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_path_dirname
        memory > xtest_realpath_broken_symlinks
        memory > x_getshortpathname
        memory > xtest_path_isabs
        memory > xtest_realpath_symlink_prefix
        memory > xtest_path_relpath
        memory > xpath
        memory > xtest_splitdrive
        memory > x_check_function
        memory > xtest_path_normcase
        memory > xHAVE_GETFINALPATHNAME
        memory > xtest_path_basename
        memory > xtest_normpath
        memory > xtest_realpath_relative
        memory > xtest_path_commonpath
        memory > xtest_sameopenfile
        memory > xtester
        memory > xtest_ismount
        memory > xtest_path_join
        memory > xtest_path_lexists
        memory > xtest_path_abspath
        memory > xtest_path_splitext
        memory > xtest_split
        memory > xtest_nt_helpers
        memory > xtest_realpath_basic
        memory > xtest_realpath_pardir
        memory > xassertEqualCI
        memory > xtest_relpath
        memory > xassertPathIn
        memory > xtest_splitext
        memory > xtest_realpath_curdir
        memory > xtest_path_split
        memory > xtest_path_splitdrive
        memory > xsetUp
        memory > xassertPathEqual
        memory > xtest_commonpath
        memory > xtest_realpath_cwd
        memory > xattributes
        memory > xtest_isabs
        memory > xtest_path_isdir
        memory > xtest_path_ismount
        memory > xnt
        memory > xtest_join
        memory > xtest_commonprefix
        memory > xpathmodule
        memory > xtest_path_expandvars
        memory > xtest_path_islink
        memory > xtest_expandvars
        memory > xtest_expandvars_nonascii
        memory > xtest_realpath_nul
        memory > xtest_path_realpath
        memory > xtest_abspath
        memory > xtest_path_normpath
        memory > xtest_path_expanduser
        memory > x_norm
        memory > xHAVE_GETSHORTPATHNAME
        memory > xtest_expanduser
        memory > xtest_realpath_symlink_loops
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xnt.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xAttributeError)))
              unsupported
              xHAVE_GETFINALPATHNAME.write FALSE
              xHAVE_GETFINALPATHNAME.write TRUE
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xHAVE_GETSHORTPATHNAME.write FALSE
              seq
                xHAVE_GETSHORTPATHNAME.write TRUE
                x_getshortpathname.write
                  [xpath]
                    memory > xresult
                    memory > xresult_len
                    memory > xGSPN
                    seq > @
                      seq
                        xGSPN.write ((((unsupported)).apply (((xctypes).xWinDLL)) ("kernel32") (TRUE)).xGetShortPathNameW)
                        (((unsupported)).apply (((xGSPN).xargtypes)) ((((unsupported)).apply (((xctypes).xc_wchar_p)) (((xctypes).xc_wchar_p)) (((xctypes).xc_uint32)))))
                        (((unsupported)).apply (((xGSPN).xrestype)) (((xctypes).xc_uint32)))
                        xresult_len.write (((xGSPN)).apply ((xpath)) ("None: is there a None literal in the EO language?") (0))
                        ((xresult_len).not).if
                          (((unsupported)).apply ((((xOSError)).apply (((("failed to get short path name 0x{:08X}".xformat)).apply (((((xctypes).xget_last_error)).apply)))))))
                        xresult.write ((((xctypes).xcreate_unicode_buffer)).apply ((xresult_len)))
                        xresult_len.write (((xGSPN)).apply ((xpath)) ((xresult)) ((xresult_len)))
                        (((unsupported)).apply ((((unsupported)).apply ((xresult)) ((((unsupported)).apply ((xresult_len)))))))
            x_norm.write
              [xpath]
                seq > @
                  seq
                    (((xisinstance)).apply ((xpath)) ((((unsupported)).apply ((xbytes)) ((xstr)) (((xos).xPathLike))))).if
                      (((unsupported)).apply (((((xntpath).xnormcase)).apply (((((xos).xfsdecode)).apply ((xpath)))))))
                      (((xhasattr)).apply ((xpath)) ("__iter__")).if
                        (((unsupported)).apply ((((xtuple)).apply ((((unsupported)).apply (((((xntpath).xnormcase)).apply (((((xos).xfsdecode)).apply ((xp)))))) ((xp)) ((xpath)))))))
                    (((unsupported)).apply ((xpath)))
            xtester.write
              [xfn xwantResult]
                memory > xgotResult
                seq > @
                  seq
                    xfn.write ((((xfn).xreplace)).apply ("\\") ("\\\\"))
                    xgotResult.write (((xeval)).apply ((xfn)))
                    (((xwantResult).neq (xgotResult)).and ((((x_norm)).apply ((xwantResult))).neq (((x_norm)).apply ((xgotResult))))).if
                      (((unsupported)).apply ((((xTestFailed)).apply (("%s should return: %s but returned: %s".mod (((unsupported)).apply ((((xstr)).apply ((xfn)))) ((((xstr)).apply ((xwantResult)))) ((((xstr)).apply ((xgotResult))))))))))
                    xfn.write ((((xfn).xreplace)).apply ("('") ("(b'"))
                    xfn.write ((((xfn).xreplace)).apply ("(\"") ("(b\""))
                    xfn.write ((((xfn).xreplace)).apply ("['") ("[b'"))
                    xfn.write ((((xfn).xreplace)).apply ("[\"") ("[b\""))
                    xfn.write ((((xfn).xreplace)).apply (", '") (", b'"))
                    xfn.write ((((xfn).xreplace)).apply (", \"") (", b\""))
                    xfn.write (((((((xos).xfsencode)).apply ((xfn))).xdecode)).apply ("latin1"))
                    xfn.write (((((((xfn).xencode)).apply ("ascii") ("backslashreplace")).xdecode)).apply ("ascii"))
                    (((unsupported)).apply (((((xwarnings).xcatch_warnings)).apply)))
                      seq
                        bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("ignore") ((xDeprecationWarning)))
                        xgotResult.write (((xeval)).apply ((xfn)))
                    ((((x_norm)).apply ((xwantResult))).neq (((x_norm)).apply ((xgotResult)))).if
                      (((unsupported)).apply ((((xTestFailed)).apply (("%s should return: %s but returned: %s".mod (((unsupported)).apply ((((xstr)).apply ((xfn)))) ((((xstr)).apply ((xwantResult)))) ((((xrepr)).apply ((xgotResult))))))))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xassertPathEqual.write
                  [xself xpath1 xpath2]
                    seq > @
                      seq
                        (((xpath1).eq (xpath2)).or ((((x_norm)).apply ((xpath1))).eq (((x_norm)).apply ((xpath2))))).if
                          (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath1)) ((xpath2)))
                xassertPathIn.write
                  [xself xpath xpathset]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIn)).apply ((((x_norm)).apply ((xpath)))) ((((x_norm)).apply ((xpathset)))))
            (((unsupported)).apply ((xNtpathTestCase)))
              seq
                xtest_splitext.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitext(\"foo.ext\")") ((((unsupported)).apply ("foo") (".ext"))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitext(\"/foo/foo.ext\")") ((((unsupported)).apply ("/foo/foo") (".ext"))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitext(\".ext\")") ((((unsupported)).apply (".ext") (""))))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) (""))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitext(\"foo.ext\\\")") ((((unsupported)).apply ("foo.ext\\") (""))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitext(\"\")") ((((unsupported)).apply ("") (""))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitext(\"foo.bar.ext\")") ((((unsupported)).apply ("foo.bar") (".ext"))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitext(\"xx/foo.bar.ext\")") ((((unsupported)).apply ("xx/foo.bar") (".ext"))))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) (".ext"))))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) (".d"))))
                xtest_splitdrive.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("c:") ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitdrive(\"c:/foo/bar\")") ((((unsupported)).apply ("c:") ("/foo/bar"))))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitdrive(\"//conky/mountpoint/foo/bar\")") ((((unsupported)).apply ("//conky/mountpoint") ("/foo/bar"))))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("") ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitdrive(\"///conky/mountpoint/foo/bar\")") ((((unsupported)).apply ("") ("///conky/mountpoint/foo/bar"))))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("") ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.splitdrive(\"//conky//mountpoint/foo/bar\")") ((((unsupported)).apply ("") ("//conky//mountpoint/foo/bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xntpath).xsplitdrive)).apply ("//conky/MOUNTPOİNT/foo/bar"))) ((((unsupported)).apply ("//conky/MOUNTPOİNT") ("/foo/bar"))))
                xtest_split.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ("bar"))))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ("bar"))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.split(\"c:\\\")") ((((unsupported)).apply ("c:\\") (""))))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) (""))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.split(\"c:/\")") ((((unsupported)).apply ("c:/") (""))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.split(\"//conky/mountpoint/\")") ((((unsupported)).apply ("//conky/mountpoint/") (""))))
                xtest_isabs.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xtester)).apply ("ntpath.isabs(\"c:\\\")") (1))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) (1))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) (1))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) (1))
                xtest_commonprefix.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xtester)).apply ("ntpath.commonprefix([\"/home/swenson/spam\", \"/home/swen/spam\"])") ("/home/swen"))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.commonprefix([\"/home/swen/spam\", \"/home/swen/spam\"])") ("/home/swen/spam"))
                xtest_join.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join(\"\")") (""))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join(\"\", \"\", \"\")") (""))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join(\"a\")") ("a"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join(\"/a\")") ("/a"))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join(\"a:\")") ("a:"))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join(\"a\", \"b\", \"c\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join(\"a\\\", \"b\", \"c\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join(\"a\", \"b\\\", \"c\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join(\"d:\\\", \"a\", \"b\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('', 'a')") ("a"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('', '', '', '', 'a')") ("a"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('a', '')") ("a\\"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('a', '', '', '', '')") ("a\\"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('a\\', '')") ("a\\"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('a\\', '', '', '', '')") ("a\\"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('a/', '')") ("a/"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('a/b', 'x/y')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('/a/b', 'x/y')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('/a/b/', 'x/y')") ("/a/b/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:', 'x/y')") ("c:x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:a/b', 'x/y')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:a/b/', 'x/y')") ("c:a/b/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:/', 'x/y')") ("c:/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:/a/b', 'x/y')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:/a/b/', 'x/y')") ("c:/a/b/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('//computer/share', 'x/y')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('//computer/share/', 'x/y')") ("//computer/share/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('//computer/share/a/b', 'x/y')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('a/b', '/x/y')") ("/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('/a/b', '/x/y')") ("/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:', '/x/y')") ("c:/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:a/b', '/x/y')") ("c:/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:/', '/x/y')") ("c:/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:/a/b', '/x/y')") ("c:/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('//computer/share', '/x/y')") ("//computer/share/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('//computer/share/', '/x/y')") ("//computer/share/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('//computer/share/a', '/x/y')") ("//computer/share/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:', 'C:x/y')") ("C:x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:a/b', 'C:x/y')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:/', 'C:x/y')") ("C:/x/y"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('c:/a/b', 'C:x/y')") ((((unsupported)).apply)))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply ("") ("a/b") ("/a/b") ("c:") ("c:a/b") ("c:/") ("c:/a/b") ("//computer/share") ("//computer/share/") ("//computer/share/a/b"))))
                          (((unsupported)).apply ((xy)) ((((unsupported)).apply ("d:") ("d:x/y") ("d:/") ("d:/x/y") ("//machine/common") ("//machine/common/") ("//machine/common/x/y"))))
                            bogusForceDataize.write (((xtester)).apply (("ntpath.join(%r, %r)".mod (((unsupported)).apply ((xx)) ((xy))))) ((xy)))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('//computer/share/', 'a', 'b')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('//computer/share', 'a', 'b')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.join('//computer/share', 'a/b')") ((((unsupported)).apply)))
                xtest_normpath.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('A//////././//.//B')") ("AB"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('A/./B')") ("AB"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('A/foo/../B')") ("AB"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('C:A//B')") ("C:AB"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('D:A/./B')") ("D:AB"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('e:A/foo/../B')") ("e:AB"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('C:///A//B')") ("C:AB"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('D:///A/./B')") ("D:AB"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('e:///A/foo/../B')") ("e:AB"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('..')") (".."))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('.')") ("."))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('')") ("."))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('/')") ("\\"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('c:/')") ("c:\\"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('/../.././..')") ("\\"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('c:/../../..')") ("c:\\"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('../.././..')") ("......"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('K:../.././..')") ("K:......"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('C:////a/b')") ("C:ab"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.normpath('//machine/share//a/b')") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                xtest_realpath_curdir.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write ((((xntpath).xnormpath)).apply (((((xos).xgetcwd)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.realpath('.')") ((xexpected)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.realpath('./.')") ((xexpected)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.realpath('/'.join(['.'] * 100))") ((xexpected)))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((xexpected)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.realpath('\\'.join(['.'] * 100))") ((xexpected)))
                xtest_realpath_pardir.write
                  [xself]
                    memory > xexpected
                    seq > @
                      seq
                        xexpected.write ((((xntpath).xnormpath)).apply (((((xos).xgetcwd)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.realpath('..')") (((((xntpath).xdirname)).apply ((xexpected)))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.realpath('../..')") (((((xntpath).xdirname)).apply (((((xntpath).xdirname)).apply ((xexpected)))))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.realpath('/'.join(['..'] * 50))") (((((unsupported)).apply (((((xntpath).xsplitdrive)).apply ((xexpected)))) (0)).add "\\")))
                        bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) (((((xntpath).xdirname)).apply (((((xntpath).xdirname)).apply ((xexpected)))))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.realpath('\\'.join(['..'] * 50))") (((((unsupported)).apply (((((xntpath).xsplitdrive)).apply ((xexpected)))) (0)).add "\\")))
                xtest_realpath_basic.write
                  [xself]
                    memory > xABSTFN
                    seq > @
                      (((unsupported)).apply)
                        xABSTFN.write ((((xntpath).xabspath)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((((xopen)).apply ((xABSTFN)) ("wb")).xclose)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xABSTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "1")))
                        bogusForceDataize.write ((((xos).xsymlink)).apply ((xABSTFN)) (((xABSTFN).add "1")))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "1")))) ((xABSTFN)))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((((xos).xfsencode)).apply (((xABSTFN).add "1")))))) (((((xos).xfsencode)).apply ((xABSTFN)))))
                xtest_realpath_relative.write
                  [xself]
                    memory > xABSTFN
                    seq > @
                      (((unsupported)).apply)
                        xABSTFN.write ((((xntpath).xabspath)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((((xopen)).apply ((xABSTFN)) ("wb")).xclose)).apply)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xABSTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "1")))
                        bogusForceDataize.write ((((xos).xsymlink)).apply ((xABSTFN)) (((((xntpath).xrelpath)).apply (((xABSTFN).add "1")))))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "1")))) ((xABSTFN)))
                xtest_realpath_broken_symlinks.write
                  [xself]
                    memory > xABSTFN
                    seq > @
                      (((unsupported)).apply)
                        xABSTFN.write ((((xntpath).xabspath)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xABSTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xrmtree)) ((xABSTFN)))
                        (((unsupported)).apply (((((xsupport).xchange_cwd)).apply ((xABSTFN)))))
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ("subdir"))
                            bogusForceDataize.write ((((xos).xchdir)).apply ("subdir"))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (".") ("recursive"))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ("..") ("parent"))
                            bogusForceDataize.write ((((xos).xchdir)).apply (".."))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (".") ("self"))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ("missing") ("broken"))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ("brokenbar") ("broken1"))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ("selfselfbroken") ("broken2"))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ("subdirparentsubdirparentbroken") ("broken3"))
                            bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "broken")) ("broken4"))
                            bogusForceDataize.write ((((xos).xsymlink)).apply ("recursive..broken") ("broken5"))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken"))) (((xABSTFN).add "missing")))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("brokenfoo"))) (((xABSTFN).add "missingfoo")))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken1"))) (((xABSTFN).add "brokenbar")))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken1baz"))) (((xABSTFN).add "brokenbarbaz")))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken2"))) (((xABSTFN).add "selfselfmissing")))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken3"))) (((xABSTFN).add "subdirparentsubdirparentmissing")))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken4"))) (((xABSTFN).add "missing")))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken5"))) (((xABSTFN).add "missing")))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken"))) (((((xos).xfsencode)).apply (((xABSTFN).add "missing")))))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("brokenfoo"))) (((((xos).xfsencode)).apply (((xABSTFN).add "missingfoo")))))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken1"))) (((((xos).xfsencode)).apply (((xABSTFN).add "brokenbar")))))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken1baz"))) (((((xos).xfsencode)).apply (((xABSTFN).add "brokenbarbaz")))))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken2"))) (((((xos).xfsencode)).apply (((xABSTFN).add "selfselfmissing")))))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken3"))) (((((xos).xfsencode)).apply (((xABSTFN).add "subdirparentsubdirparentmissing")))))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken4"))) (((((xos).xfsencode)).apply (((xABSTFN).add "missing")))))
                            bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ("broken5"))) (((((xos).xfsencode)).apply (((xABSTFN).add "missing")))))
                xtest_realpath_symlink_loops.write
                  [xself]
                    memory > xABSTFN
                    memory > xexpected
                    seq > @
                      (((unsupported)).apply)
                        xABSTFN.write ((((xntpath).xabspath)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xABSTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "1")))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "2")))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "y")))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "c")))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "a")))
                        bogusForceDataize.write ((((xos).xsymlink)).apply ((xABSTFN)) ((xABSTFN)))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ((xABSTFN)))) ((xABSTFN)))
                        bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "1")) (((xABSTFN).add "2")))
                        bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "2")) (((xABSTFN).add "1")))
                        xexpected.write (((unsupported)).apply (((xABSTFN).add "1")) (((xABSTFN).add "2")))
                        bogusForceDataize.write ((((xself).xassertPathIn)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "1")))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertPathIn)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "2")))) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertPathIn)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add (((unsupported)).apply))))) ((((unsupported)).apply (((((xntpath).xjoin)).apply ((xr)) ("x"))) ((xr)) ((xexpected)))))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add (((unsupported)).apply))))) (((((xntpath).xdirname)).apply ((xABSTFN)))))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add (((unsupported)).apply))))) ((((((xntpath).xdirname)).apply ((xABSTFN))).add (((unsupported)).apply))))
                        bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "x")) (((xABSTFN).add "y")))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((((xABSTFN).add (((unsupported)).apply)).add ((((xntpath).xbasename)).apply ((xABSTFN)))).add "y")))) (((xABSTFN).add "x")))
                        bogusForceDataize.write ((((xself).xassertPathIn)).apply (((((xntpath).xrealpath)).apply (((((xABSTFN).add (((unsupported)).apply)).add ((((xntpath).xbasename)).apply ((xABSTFN)))).add "1")))) ((xexpected)))
                        bogusForceDataize.write ((((xos).xsymlink)).apply ((((((xntpath).xbasename)).apply ((xABSTFN))).add (((unsupported)).apply))) (((xABSTFN).add "a")))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "a")))) (((xABSTFN).add "a")))
                        bogusForceDataize.write ((((xos).xsymlink)).apply ((((("..\\".add ((((xntpath).xbasename)).apply (((((xntpath).xdirname)).apply ((xABSTFN)))))).add "\\").add ((((xntpath).xbasename)).apply ((xABSTFN)))).add "c")) (((xABSTFN).add "c")))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "c")))) (((xABSTFN).add "c")))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((((xntpath).xbasename)).apply ((xABSTFN)))))) ((xABSTFN)))
                xtest_realpath_symlink_prefix.write
                  [xself]
                    memory > xABSTFN
                    seq > @
                      (((unsupported)).apply)
                        xABSTFN.write ((((xntpath).xabspath)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "3")))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((((((unsupported)).apply).add (xABSTFN)).add "3.")))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "3link")))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xABSTFN).add "3.link")))
                        (((unsupported)).apply ((((xopen)).apply (((xABSTFN).add "3")) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("0"))
                        bogusForceDataize.write ((((xos).xsymlink)).apply (((xABSTFN).add "3")) (((xABSTFN).add "3link")))
                        (((unsupported)).apply ((((xopen)).apply ((((((unsupported)).apply).add (xABSTFN)).add "3.")) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("1"))
                        bogusForceDataize.write ((((xos).xsymlink)).apply ((((((unsupported)).apply).add (xABSTFN)).add "3.")) (((xABSTFN).add "3.link")))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "3link")))) (((xABSTFN).add "3")))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "3.link")))) ((((((unsupported)).apply).add (xABSTFN)).add "3.")))
                        (((unsupported)).apply ((((xopen)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "3link")))) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("0"))
                        (((unsupported)).apply ((((xopen)).apply (((((xntpath).xrealpath)).apply (((xABSTFN).add "3.link")))) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("1"))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ((((((unsupported)).apply).add (xABSTFN)).add "3link")))) ((((((unsupported)).apply).add (xABSTFN)).add "3")))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply (((((xntpath).xrealpath)).apply ((((((unsupported)).apply).add (xABSTFN)).add "3.link")))) ((((((unsupported)).apply).add (xABSTFN)).add "3.")))
                xtest_realpath_nul.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((xtester)).apply ("ntpath.realpath('NUL')") ((((unsupported)).apply)))
                xtest_realpath_cwd.write
                  [xself]
                    memory > xtest_file_long
                    memory > xtest_file_short
                    memory > xtest_dir_short
                    memory > xABSTFN
                    memory > xtest_dir_long
                    seq > @
                      (((unsupported)).apply)
                        xABSTFN.write ((((xntpath).xabspath)).apply (((xsupport).xTESTFN)))
                        bogusForceDataize.write ((((xsupport).xunlink)).apply ((xABSTFN)))
                        bogusForceDataize.write ((((xsupport).xrmtree)).apply ((xABSTFN)))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xABSTFN)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xrmtree)) ((xABSTFN)))
                        xtest_dir_long.write ((((xntpath).xjoin)).apply ((xABSTFN)) ("MyVeryLongDirectoryName"))
                        bogusForceDataize.write ((((xos).xmkdir)).apply ((xtest_dir_long)))
                        xtest_dir_short.write (((x_getshortpathname)).apply ((xtest_dir_long)))
                        xtest_file_long.write ((((xntpath).xjoin)).apply ((xtest_dir_long)) ("file.txt"))
                        xtest_file_short.write ((((xntpath).xjoin)).apply ((xtest_dir_short)) ("file.txt"))
                        (((unsupported)).apply ((((xopen)).apply ((xtest_file_long)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("content"))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((xtest_file_long)) (((((xntpath).xrealpath)).apply ((xtest_file_short)))))
                        (((unsupported)).apply (((((xsupport).xchange_cwd)).apply ((xtest_dir_long)))))
                          bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((xtest_file_long)) (((((xntpath).xrealpath)).apply ("file.txt"))))
                        (((unsupported)).apply (((((xsupport).xchange_cwd)).apply (((((xtest_dir_long).xlower)).apply)))))
                          bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((xtest_file_long)) (((((xntpath).xrealpath)).apply ("file.txt"))))
                        (((unsupported)).apply (((((xsupport).xchange_cwd)).apply ((xtest_dir_short)))))
                          bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((xtest_file_long)) (((((xntpath).xrealpath)).apply ("file.txt"))))
                xtest_expandvars.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                        seq
                          bogusForceDataize.write ((((xenv).xclear)).apply)
                          (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("foo"))) ("bar"))
                          (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("{foo"))) ("baz1"))
                          (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("{foo}"))) ("baz2"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"foo\")") ("foo"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"$foo bar\")") ("bar bar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"${foo}bar\")") ("barbar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"$[foo]bar\")") ("$[foo]bar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"$bar bar\")") ("$bar bar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"$?bar\")") ("$?bar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"$foo}bar\")") ("bar}bar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"${foo\")") ("${foo"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"${{foo}}\")") ("baz1}"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"$foo$foo\")") ("barbar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"$bar$bar\")") ("$bar$bar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"%foo% bar\")") ("bar bar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"%foo%bar\")") ("barbar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"%foo%%foo%\")") ("barbar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"%%foo%%foo%foo%\")") ("%foo%foobar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"%?bar%\")") ("%?bar%"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"%foo%%bar\")") ("bar%bar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"'%foo%'%bar\")") ("'%foo%'%bar"))
                          bogusForceDataize.write (((xtester)).apply ("ntpath.expandvars(\"bar'%foo%\")") ("bar'%foo%"))
                xtest_expandvars_nonascii.write
                  [xself]
                    memory > xnonascii
                    memory > xcheck
                    seq > @
                      (((unsupported)).apply)
                        xcheck.write
                          [xvalue xexpected]
                            seq > @
                              bogusForceDataize.write (((xtester)).apply (("ntpath.expandvars(%r)".mod (xvalue))) ((xexpected)))
                        (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                          seq
                            bogusForceDataize.write ((((xenv).xclear)).apply)
                            xnonascii.write ((xsupport).xFS_NONASCII)
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("spam"))) ((xnonascii)))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ((xnonascii)))) (("ham".add (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply ("$spam bar") (("%s bar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply (("$%s bar".mod (xnonascii))) (("$%s bar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply ("${spam}bar") (("%sbar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply (("${%s}bar".mod (xnonascii))) (("ham%sbar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply ("$spam}bar") (("%s}bar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply (("$%s}bar".mod (xnonascii))) (("$%s}bar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply ("%spam% bar") (("%s bar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply (((("%{}% bar".xformat)).apply ((xnonascii)))) (("ham%s bar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply ("%spam%bar") (("%sbar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply (((("%{}%bar".xformat)).apply ((xnonascii)))) (("ham%sbar".mod (xnonascii))))
                xtest_expanduser.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"test\")") ("test"))
                        (((unsupported)).apply (((((xsupport).xEnvironmentVarGuard)).apply)) ((xenv)))
                          seq
                            bogusForceDataize.write ((((xenv).xclear)).apply)
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~test\")") ("~test"))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("HOMEPATH"))) ((((unsupported)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("HOMEDRIVE"))) ("C:\\"))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~test\")") ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~\")") ((((unsupported)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xenv)) ("HOMEDRIVE"))))))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~test\")") ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~\")") ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xenv).xclear)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("USERPROFILE"))) ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~test\")") ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~\")") ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~test/foo/bar\")") ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~/foo/bar\")") ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xenv).xclear)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("HOME"))) ("F:\\"))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("USERPROFILE"))) ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~test\")") ((((unsupported)).apply)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.expanduser(\"~\")") ((((unsupported)).apply)))
                xtest_abspath.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((xtester)).apply ("ntpath.abspath(\"C:\\\")") ("C:\\"))
                        (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply (((xsupport).xTESTFN)))) ((xcwd_dir)))
                          seq
                            bogusForceDataize.write (((xtester)).apply ("ntpath.abspath(\"\")") ((xcwd_dir)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.abspath(\" \")") (((xcwd_dir).add (((unsupported)).apply))))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.abspath(\"?\")") (((xcwd_dir).add (((unsupported)).apply))))
                            (((unsupported)).apply ((((unsupported)).apply ((xdrive)) ((x_)))) (((((xntpath).xsplitdrive)).apply ((xcwd_dir)))))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.abspath(\"/abc/\")") (((xdrive).add (((unsupported)).apply))))
                xtest_relpath.write
                  [xself]
                    memory > xcurrentdir
                    seq > @
                      seq
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"a\")") ("a"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(ntpath.abspath(\"a\"))") ("a"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"a/b\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"../a/b\")") ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply (((xsupport).xTESTFN)))) ((xcwd_dir)))
                          seq
                            xcurrentdir.write ((((xntpath).xbasename)).apply ((xcwd_dir)))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"a\", \"../b\")") ((("..\\".add (xcurrentdir)).add (((unsupported)).apply))))
                            bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"a/b\", \"../c\")") ((("..\\".add (xcurrentdir)).add (((unsupported)).apply))))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"a\", \"b/c\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"c:/foo/bar/bat\", \"c:/x/y\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"//conky/mountpoint/a\", \"//conky/mountpoint/b/c\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"a\", \"a\")") ("."))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"/foo/bar/bat\", \"/x/y/z\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"/foo/bar/bat\", \"/foo/bar\")") ("bat"))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"/foo/bar/bat\", \"/\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"/\", \"/foo/bar/bat\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"/foo/bar/bat\", \"/x\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"/x\", \"/foo/bar/bat\")") ((((unsupported)).apply)))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"/\", \"/\")") ("."))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"/a\", \"/a\")") ("."))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"/a/b\", \"/a/b\")") ("."))
                        bogusForceDataize.write (((xtester)).apply ("ntpath.relpath(\"c:/foo\", \"C:/FOO\")") ("."))
                xtest_commonpath.write
                  [xself]
                    memory > xcheck_error
                    memory > xcheck
                    seq > @
                      seq
                        xcheck.write
                          [xpaths xexpected]
                            seq > @
                              bogusForceDataize.write (((xtester)).apply ((((("ntpath.commonpath(%r)".mod (xpaths)).xreplace)).apply ("\\\\") ("\\"))) ((xexpected)))
                        xcheck_error.write
                          [xexc xpaths]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexc)) (((xntpath).xcommonpath)) ((xpaths)))
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xexc)) (((xntpath).xcommonpath)) ((((unsupported)).apply (((((xos).xfsencode)).apply ((xp)))) ((xp)) ((xpaths)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xntpath).xcommonpath)) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck_error)).apply ((xValueError)) ((((unsupported)).apply ((((unsupported)).apply)) ("Program Files"))))
                        bogusForceDataize.write (((xcheck_error)).apply ((xValueError)) ((((unsupported)).apply ((((unsupported)).apply)) ("C:Program Files"))))
                        bogusForceDataize.write (((xcheck_error)).apply ((xValueError)) ((((unsupported)).apply ((((unsupported)).apply)) ("Program Files"))))
                        bogusForceDataize.write (((xcheck_error)).apply ((xValueError)) ((((unsupported)).apply ("Program Files") ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("C:\\") ((((unsupported)).apply)))) ("C:\\"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ("C:\\"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ("C:\\"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ("C:\\"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ("C:/Program Files/Bar"))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ("c:/program files/bar"))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("c:/program files/bar") ((((unsupported)).apply)))) ((((unsupported)).apply)))
                        bogusForceDataize.write (((xcheck_error)).apply ((xValueError)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("spam"))) ("spam"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("spam") ("spam"))) ("spam"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("spam") ("alot"))) (""))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ("and"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ("and"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ("and"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ("alot"))) (""))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)) ("and"))) ("and"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))) ("C:and"))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply (""))) (""))
                        bogusForceDataize.write (((xcheck)).apply ((((unsupported)).apply ("") ((((unsupported)).apply)))) (""))
                        bogusForceDataize.write (((xcheck_error)).apply ((xValueError)) ((((unsupported)).apply ("") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xntpath).xcommonpath)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xntpath).xcommonpath)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xntpath).xcommonpath)) ((((unsupported)).apply ("Program Files") ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xntpath).xcommonpath)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xntpath).xcommonpath)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xntpath).xcommonpath)) ((((unsupported)).apply ("Program Files") ((((unsupported)).apply)))))
                xtest_sameopenfile.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xTemporaryFile)).apply)) ((xtf1)) ((((xTemporaryFile)).apply)) ((xtf2)))
                        seq
                          bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xsameopenfile)).apply (((((xtf1).xfileno)).apply)) (((((xtf1).xfileno)).apply)))))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xntpath).xsameopenfile)).apply (((((xtf1).xfileno)).apply)) (((((xtf2).xfileno)).apply)))))
                          (((xsys).xplatform).eq "win32").if
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))))
                              bogusForceDataize.write ((((xntpath).xsameopenfile)).apply ((1.neg)) ((1.neg)))
                xtest_ismount.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ("c:\\"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ("C:\\"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ("c:/"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ("C:/"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ("c:\\"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ("C:\\"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ("c:/"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ("C:/"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ((((unsupported)).apply)))))
                        (((unsupported)).apply (((((xsupport).xtemp_dir)).apply)) ((xd)))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xntpath).xismount)).apply ((xd)))))
                        (((xsys).xplatform).eq "win32").if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xdrive)) ((xpath)))) (((((xntpath).xsplitdrive)).apply (((xsys).xexecutable)))))
                            (((unsupported)).apply (((((xsupport).xchange_cwd)).apply (((((xntpath).xdirname)).apply (((xsys).xexecutable)))))))
                              seq
                                bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xntpath).xismount)).apply (((((xdrive).xlower)).apply)))))
                                bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xntpath).xismount)).apply (((((xdrive).xupper)).apply)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xntpath).xismount)).apply ((((unsupported)).apply)))))
                xassertEqualCI.write
                  [xself xs1 xs2]
                    seq > @
                      seq
                        unsupported
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs1).xlower)).apply)) (((((xs2).xlower)).apply)))
                xtest_nt_helpers.write
                  [xself]
                    memory > xvolume_path
                    memory > xb_final_path
                    memory > xpath_drive
                    memory > xvolume_path_drive
                    memory > xexecutable
                    memory > xfinal_path
                    seq > @
                      (((unsupported)).apply)
                        xexecutable.write ((((xnt).x_getfinalpathname)).apply (((xsys).xexecutable)))
                        (((unsupported)).apply ((xpath)) ((((unsupported)).apply ((xexecutable)) (((((xos).xfsencode)).apply ((xexecutable)))))))
                          seq
                            xvolume_path.write ((((xnt).x_getvolumepathname)).apply ((xpath)))
                            xpath_drive.write (((unsupported)).apply (((((xntpath).xsplitdrive)).apply ((xpath)))) (0))
                            xvolume_path_drive.write (((unsupported)).apply (((((xntpath).xsplitdrive)).apply ((xvolume_path)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqualCI)).apply ((xpath_drive)) ((xvolume_path_drive)))
                        (((unsupported)).apply ((((unsupported)).apply ((xcap)) ((xfree)))) (((((xnt).x_getdiskusage)).apply (((xsys).xexec_prefix)))))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xcap)) (0))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xfree)) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xb_cap)) ((xb_free)))) (((((xnt).x_getdiskusage)).apply ((((((xsys).xexec_prefix).xencode)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb_cap)) ((xcap)))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xb_free)) (0))
                        (((unsupported)).apply ((xpath)) ((((unsupported)).apply (((xsys).xprefix)) (((xsys).xexecutable)))))
                          seq
                            xfinal_path.write ((((xnt).x_getfinalpathname)).apply ((xpath)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xfinal_path)) ((xstr)))
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply ((xfinal_path)))) (0))
                            xb_final_path.write ((((xnt).x_getfinalpathname)).apply (((((xpath).xencode)).apply)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xb_final_path)) ((xbytes)))
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply ((xb_final_path)))) (0))
            (((unsupported)).apply (((xtest_genericpath).xCommonTest)) (((xunittest).xTestCase)))
              seq
                xpathmodule.write (xntpath)
                xattributes.write (((unsupported)).apply ("relpath"))
            (((unsupported)).apply ((xNtpathTestCase)))
              seq
                xpath.write (xntpath)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfile_name)) ((((((xsupport).xTESTFN).xlower)).apply)))
                        (((unsupported)).apply (((xself).xfile_path)) ((((xFakePath)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xself).xfile_name)))
                        (((unsupported)).apply ((((xopen)).apply (((xself).xfile_name)) ("xb") (0))) ((xfile)))
                          bogusForceDataize.write ((((xfile).xwrite)).apply ("test_ntpath.PathLikeTests"))
                x_check_function.write
                  [xself xfunc]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xfunc)).apply (((xself).xfile_path)))) ((((xfunc)).apply (((xself).xfile_name)))))
                xtest_path_normcase.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xnormcase)))
                xtest_path_isabs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xisabs)))
                xtest_path_join.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xpath).xjoin)).apply ("a") ((((xFakePath)).apply ("b"))) ("c"))) ((((((xself).xpath).xjoin)).apply ("a") ("b") ("c"))))
                xtest_path_split.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xsplit)))
                xtest_path_splitext.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xsplitext)))
                xtest_path_splitdrive.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xsplitdrive)))
                xtest_path_basename.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xbasename)))
                xtest_path_dirname.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xdirname)))
                xtest_path_islink.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xislink)))
                xtest_path_lexists.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xlexists)))
                xtest_path_ismount.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xismount)))
                xtest_path_expanduser.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xexpanduser)))
                xtest_path_expandvars.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xexpandvars)))
                xtest_path_normpath.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xnormpath)))
                xtest_path_abspath.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xabspath)))
                xtest_path_realpath.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xrealpath)))
                xtest_path_relpath.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xrelpath)))
                xtest_path_commonpath.write
                  [xself]
                    memory > xcommon_path
                    seq > @
                      seq
                        xcommon_path.write (((((xself).xpath).xcommonpath)).apply ((((unsupported)).apply (((xself).xfile_path)) (((xself).xfile_name)))))
                        bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((xcommon_path)) (((xself).xfile_name)))
                xtest_path_isdir.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).x_check_function)).apply ((((xself).xpath).xisdir)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)