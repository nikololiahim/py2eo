memory > xgettext_lazy
memory > xcopy
memory > xstr
memory > xValidationError
memory > xErrorList
memory > xVeryBadError
memory > xErrorDict
memory > xhasattr
memory > xmark_safe
memory > xsorted
memory > xjson
memory > xdict
memory > xSimpleTestCase
memory > xflatatt
[] > test_utils
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_error_dict_is_dict
        memory > xtest_error_list_html_safe
        memory > xtest_flatatt_no_side_effects
        memory > xtest_error_dict_is_json_serializable
        memory > xtest_error_dict_copy
        memory > xtest_flatatt
        memory > xtest_error_dict_html_safe
        memory > xtest_validation_error
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_flatatt.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xflatatt)).apply ((((unsupported)).apply ("id") ("header"))))) (" id=\"header\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xflatatt)).apply ((((unsupported)).apply ("class") ("news") ("title") ("Read this"))))) (" class=\"news\" title=\"Read this\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xflatatt)).apply ((((unsupported)).apply ("class") ("news") ("title") ("Read this") ("required") ("required"))))) (" class=\"news\" required=\"required\" title=\"Read this\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xflatatt)).apply ((((unsupported)).apply ("class") ("news") ("title") ("Read this") ("required") (TRUE))))) (" class=\"news\" title=\"Read this\" required"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xflatatt)).apply ((((unsupported)).apply ("class") ("news") ("title") ("Read this") ("required") (FALSE))))) (" class=\"news\" title=\"Read this\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xflatatt)).apply ((((unsupported)).apply ("class") ("None: is there a None literal in the EO language?"))))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xflatatt)).apply ((((unsupported)).apply)))) (""))
                xtest_flatatt_no_side_effects.write
                  [xself]
                    memory > xattrs_copy
                    memory > xattrs
                    memory > xfirst_run
                    memory > xsecond_run
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xattrs.write (((unsupported)).apply ("foo") ("bar") ("false") (TRUE) ("false") (FALSE))
                        xattrs_copy.write ((((xcopy).xcopy)).apply ((xattrs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xattrs)) ((xattrs_copy)))
                        xfirst_run.write (((xflatatt)).apply ((xattrs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xattrs)) ((xattrs_copy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfirst_run)) (" foo=\"bar\" false"))
                        xsecond_run.write (((xflatatt)).apply ((xattrs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xattrs)) ((xattrs_copy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xfirst_run)) ((xsecond_run)))
                xtest_validation_error.write
                  [xself]
                    memory > x__str__
                    memory > xexample
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorList)).apply (((((xValidationError)).apply ("There was an error.")).xmessages)))))) ("<ul class=\"errorlist\"><li>There was an error.</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorList)).apply (((((xValidationError)).apply ("Not u03C0.")).xmessages)))))) ("<ul class=\"errorlist\"><li>Not π.</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorList)).apply (((((xValidationError)).apply ((((xgettext_lazy)).apply ("Error.")))).xmessages)))))) ("<ul class=\"errorlist\"><li>Error.</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorList)).apply (((((xValidationError)).apply ((((unsupported)).apply ("Error one.") ("Error two.")))).xmessages)))))) ("<ul class=\"errorlist\"><li>Error one.</li><li>Error two.</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorList)).apply ((((xsorted)).apply (((((xValidationError)).apply ((((unsupported)).apply ("error_1") ("1. Error one.") ("error_2") ("2. Error two.")))).xmessages)))))))) ("<ul class=\"errorlist\"><li>1. Error one.</li><li>2. Error two.</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorList)).apply ((((xsorted)).apply (((((xValidationError)).apply ((((unsupported)).apply ("1. First error.") ("2. Not u03C0.") ((((xgettext_lazy)).apply ("3. Error."))) ((((unsupported)).apply ("error_1") ("4. First dict error.") ("error_2") ("5. Second dict error.")))))).xmessages)))))))) ("<ul class=\"errorlist\"><li>1. First error.</li><li>2. Not π.</li><li>3. Error.</li><li>4. First dict error.</li><li>5. Second dict error.</li></ul>"))
                        (((unsupported)).apply)
                          x__str__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ("A very bad error."))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorList)).apply (((((xValidationError)).apply ((((xVeryBadError)).apply))).xmessages)))))) ("<ul class=\"errorlist\"><li>A very bad error.</li></ul>"))
                        xexample.write "Example of link: <a href=\"http://www.example.com/\">example</a>"
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorList)).apply ((((unsupported)).apply ((xexample)))))))) ("<ul class=\"errorlist\"><li>Example of link: &lt;a href=&quot;http://www.example.com/&quot;&gt;example&lt;/a&gt;</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorList)).apply ((((unsupported)).apply ((((xmark_safe)).apply ((xexample)))))))))) ("<ul class=\"errorlist\"><li>Example of link: <a href=\"http://www.example.com/\">example</a></li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorDict)).apply ((((unsupported)).apply ("name") ((xexample)))))))) ("<ul class=\"errorlist\"><li>nameExample of link: &lt;a href=&quot;http://www.example.com/&quot;&gt;example&lt;/a&gt;</li></ul>"))
                        bogusForceDataize.write ((((xself).xassertHTMLEqual)).apply ((((xstr)).apply ((((xErrorDict)).apply ((((unsupported)).apply ("name") ((((xmark_safe)).apply ((xexample)))))))))) ("<ul class=\"errorlist\"><li>nameExample of link: <a href=\"http://www.example.com/\">example</a></li></ul>"))
                xtest_error_dict_copy.write
                  [xself]
                    memory > xe
                    memory > xe_deepcopy
                    memory > xe_copy
                    seq > @
                      seq
                        xe.write (((xErrorDict)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xe)) ("__all__"))) ((((xErrorList)).apply ((((unsupported)).apply ((((unsupported)).apply ((xValidationError)) ("message %(i)s") ((((unsupported)).apply ("i") (1))))) ((((unsupported)).apply ((xValidationError)) ("message %(i)s") ((((unsupported)).apply ("i") (2))))))))))
                        xe_copy.write ((((xcopy).xcopy)).apply ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xe_copy)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xe).xas_data)).apply)) (((((xe_copy).xas_data)).apply)))
                        xe_deepcopy.write ((((xcopy).xdeepcopy)).apply ((xe)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xe)) ((xe_deepcopy)))
                xtest_error_dict_html_safe.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xErrorDict)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xe)) ("username"))) ("Invalid username."))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xErrorDict)) ("__html__"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) (((((xe).x__html__)).apply)))
                xtest_error_list_html_safe.write
                  [xself]
                    memory > xe
                    seq > @
                      seq
                        xe.write (((xErrorList)).apply ((((unsupported)).apply ("Invalid username."))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((xErrorList)) ("__html__"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) (((((xe).x__html__)).apply)))
                xtest_error_dict_is_dict.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xErrorDict)).apply)) ((xdict)))
                xtest_error_dict_is_json_serializable.write
                  [xself]
                    memory > xe
                    memory > xmin_value_error_list
                    memory > xinit_errors
                    seq > @
                      seq
                        xinit_errors.write (((xErrorDict)).apply ((((unsupported)).apply ((((unsupported)).apply ("__all__") ((((xErrorList)).apply ((((unsupported)).apply ((((xValidationError)).apply ("Sorry this form only works on leap days."))))))))) ((((unsupported)).apply ("name") ((((xErrorList)).apply ((((unsupported)).apply ((((xValidationError)).apply ("This field is required."))))))))))))
                        xmin_value_error_list.write (((xErrorList)).apply ((((unsupported)).apply ((((xValidationError)).apply ("Ensure this value is greater than or equal to 0."))))))
                        xe.write (((unsupported)).apply ((xErrorDict)) ((xinit_errors)) ((((xErrorList)).apply ((((unsupported)).apply ((((xErrorDict)).apply ((((unsupported)).apply ("day") ((xmin_value_error_list)) ("month") ((xmin_value_error_list)) ("year") ((xmin_value_error_list)))))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xe)) ("renderer"))) ((((xErrorList)).apply ((((unsupported)).apply ((((xValidationError)).apply ("Select a valid choice. That choice is not one of the available choices."))))))))
                        bogusForceDataize.write ((((xself).xassertJSONEqual)).apply (((((xjson).xdumps)).apply ((xe)))) ((((unsupported)).apply ("__all__") ((((unsupported)).apply ("Sorry this form only works on leap days."))) ("name") ((((unsupported)).apply ("This field is required."))) ("date") ((((unsupported)).apply ((((unsupported)).apply ("day") ((((unsupported)).apply ("Ensure this value is greater than or equal to 0."))) ("month") ((((unsupported)).apply ("Ensure this value is greater than or equal to 0."))) ("year") ((((unsupported)).apply ("Ensure this value is greater than or equal to 0."))))))) ("renderer") ((((unsupported)).apply ("Select a valid choice. That choice is not one of the available choices."))))))