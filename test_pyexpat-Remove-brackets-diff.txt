211c211
<                             xdata.write ((((xdata).xstrip)).apply)
---
>                             xdata.write ((xdata).xstrip)
324c324
<                         xexpected_operations.write (((unsupported)).apply ((((unsupported)).apply ("XML declaration") ((((unsupported)).apply ("1.0") ("iso-8859-1") (0))))) ("PI: 'xml-stylesheet' 'href=\"stylesheet.css\"'") ("Comment: ' comment data '") ("Not standalone") ((((unsupported)).apply ("Start doctype") ((((unsupported)).apply ("quotations") ("quotations.dtd") ("None: is there a None literal in the EO language?") (1))))) ((((unsupported)).apply ("Element declaration") ((((unsupported)).apply ("root") ((((unsupported)).apply (2) (0) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)))))))) ((((unsupported)).apply ("Attribute list declaration") ((((unsupported)).apply ("root") ("attr1") ("CDATA") ("None: is there a None literal in the EO language?") (1))))) ((((unsupported)).apply ("Attribute list declaration") ((((unsupported)).apply ("root") ("attr2") ("CDATA") ("None: is there a None literal in the EO language?") (0))))) ("Notation declared: ('notation', None, 'notation.jpeg', None)") ((((unsupported)).apply ("Entity declaration") ((((unsupported)).apply ("acirc") (0) ("xe2") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Entity declaration") ((((unsupported)).apply ("external_entity") (0) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("entity.file") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("Unparsed entity decl: ('unparsed_entity', None, 'entity.file', None, 'notation')") ("Not standalone") ("End doctype") ("Start element: 'root' {'attr1': 'value1', 'attr2': 'value2u1f40'}") ("NS decl: 'myns' 'http://www.python.org/namespace'") ("Start element: 'http://www.python.org/namespace!subelement' {}") ("Character data: 'Contents of subelements'") ("End element: 'http://www.python.org/namespace!subelement'") ("End of NS decl: 'myns'") ("Start element: 'sub2' {}") ("Start of CDATA section") ("Character data: 'contents of CDATA section'") ("End of CDATA section") ("End element: 'sub2'") ("External entity ref: (None, 'entity.file', None)") ((((unsupported)).apply ("Skipped entity") ((((unsupported)).apply ("skipped_entity") (0))))) ("Character data: 'xb5'") ("End element: 'root'"))
---
>                         xexpected_operations.write (((unsupported)).apply ((((unsupported)).apply ("XML declaration") ((((unsupported)).apply ("1.0") ("iso-8859-1") (0))))) ("PI: 'xml-stylesheet' 'href=\"stylesheet.css\"'") ("Comment: ' comment data '") ("Not standalone") ((((unsupported)).apply ("Start doctype") ((((unsupported)).apply ("quotations") ("quotations.dtd") ("None: is there a None literal in the EO language?") (1))))) ((((unsupported)).apply ("Element declaration") ((((unsupported)).apply ("root") ((((unsupported)).apply (2) (0) ("None: is there a None literal in the EO language?"))))))) ((((unsupported)).apply ("Attribute list declaration") ((((unsupported)).apply ("root") ("attr1") ("CDATA") ("None: is there a None literal in the EO language?") (1))))) ((((unsupported)).apply ("Attribute list declaration") ((((unsupported)).apply ("root") ("attr2") ("CDATA") ("None: is there a None literal in the EO language?") (0))))) ("Notation declared: ('notation', None, 'notation.jpeg', None)") ((((unsupported)).apply ("Entity declaration") ((((unsupported)).apply ("acirc") (0) ("xe2") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ((((unsupported)).apply ("Entity declaration") ((((unsupported)).apply ("external_entity") (0) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") ("entity.file") ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))) ("Unparsed entity decl: ('unparsed_entity', None, 'entity.file', None, 'notation')") ("Not standalone") ("End doctype") ("Start element: 'root' {'attr1': 'value1', 'attr2': 'value2u1f40'}") ("NS decl: 'myns' 'http://www.python.org/namespace'") ("Start element: 'http://www.python.org/namespace!subelement' {}") ("Character data: 'Contents of subelements'") ("End element: 'http://www.python.org/namespace!subelement'") ("End of NS decl: 'myns'") ("Start element: 'sub2' {}") ("Start of CDATA section") ("Character data: 'contents of CDATA section'") ("End of CDATA section") ("End element: 'sub2'") ("External entity ref: (None, 'entity.file', None)") ((((unsupported)).apply ("Skipped entity") ((((unsupported)).apply ("skipped_entity") (0))))) ("Character data: 'xb5'") ("End element: 'root'"))
334c334
<                         xout.write ((((xself).xOutputter)).apply)
---
>                         xout.write ((xself).xOutputter)
348c348
<                         xout.write ((((xself).xOutputter)).apply)
---
>                         xout.write ((xself).xOutputter)
362c362
<                         xout.write ((((xself).xOutputter)).apply)
---
>                         xout.write ((xself).xOutputter)
375c375
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
387c387
<                         bogusForceDataize.write ((((xexpat).xParserCreate)).apply)
---
>                         unsupported
397,398c397,398
<                             bogusForceDataize.write ((((xself).xfail)).apply)
<                           bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("ParserCreate() argument 'namespace_separator' must be str or None, not int"))
---
>                             unsupported
>                           bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xe)))) ("ParserCreate argument 'namespace_separator' must be str or None, not int"))
402c402
<                             bogusForceDataize.write ((((xself).xfail)).apply)
---
>                             unsupported
418c418
<                         xp.write ((((xexpat).xParserCreate)).apply)
---
>                         xp.write ((xexpat).xParserCreate)
469c469
<                         (((unsupported)).apply (((xself).xparser)) (((((xexpat).xParserCreate)).apply)))
---
>                         (((unsupported)).apply (((xself).xparser)) (((xexpat).xParserCreate)))
510c510
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
586c586
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
591c591
<                             bogusForceDataize.write ((((xself).xfail)).apply)
---
>                             unsupported
599c599
<                             ((((xsysconfig).xis_python_build)).apply).if
---
>                             ((xsysconfig).xis_python_build).if
627c627
<                         (((unsupported)).apply (((xself).xparser)) (((((xexpat).xParserCreate)).apply)))
---
>                         (((unsupported)).apply (((xself).xparser)) (((xexpat).xParserCreate)))
648c648
<                       xparser.write ((((xexpat).xParserCreate)).apply)
---
>                       xparser.write ((xexpat).xParserCreate)
667c667
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
686c686
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
708c708
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
739c739
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
755c755
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
775c775
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
795c795
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
799c799
<                             bogusForceDataize.write ((((xself).xfail)).apply)
---
>                             unsupported
809c809
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
826c826
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
830c830
<                             bogusForceDataize.write ((((xself).xfail)).apply)
---
>                             unsupported
850c850
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
857,858c857,858
<                         xparser.write ((((xexpat).xParserCreate)).apply)
<                         bogusForceDataize.write ((((xparser).xUseForeignDTD)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
>                         unsupported
878c878
<                         xparser.write ((((xexpat).xParserCreate)).apply)
---
>                         xparser.write ((xexpat).xParserCreate)
885c885
<               bogusForceDataize.write ((((xunittest).xmain)).apply)
\ No newline at end of file
---
>               unsupported
\ No newline at end of file