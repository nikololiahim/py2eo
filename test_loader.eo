memory > xImportError
memory > xlist
memory > xAmbiguityError
memory > xTestCase
memory > xNodeNotFoundError
memory > xset
memory > xx
memory > xos
memory > xname
memory > xy
memory > xrecorder
memory > xa
memory > xapp
memory > xMigrationRecorder
memory > ximport_module
memory > xInconsistentMigrationHistory
memory > xmigration_dir
memory > xcompileall
memory > xKeyError
memory > xconnection
memory > xconnections
memory > xMigrationTestBase
memory > xoverride_settings
memory > xm
memory > xMigrationLoader
memory > xlen
[] > test_loader
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_check_consistent_history
        memory > xdatabases
        memory > xtest_loading_package_without__file__
        memory > xtest_loading_namespace_package
        memory > xtest_load_empty_dir
        memory > xtest_loading_squashed_ref_squashed
        memory > xtest_load
        memory > xtest_first
        memory > xtest_loading_squashed_complex_multi_apps_partially_applied
        memory > xtest_loading_squashed_complex
        memory > xtest_valid
        memory > xtest_run_before
        memory > xtest_load_import_error
        memory > xtest_loading_squashed_erroneous
        memory > xtest_load_unmigrated_dependency
        memory > xsetUp
        memory > xtest_marked_as_unmigrated
        memory > xtest_apply
        memory > xtest_explicit_missing_module
        memory > xtest_check_consistent_history_squashed
        memory > xtest_load_module_file
        memory > xtest_ignore_files
        memory > xtest_name_match
        memory > xtest_invalid
        memory > xrecord_applied
        memory > xtest_plan_handles_repeated_migrations
        memory > xtearDown
        memory > xtest_marked_as_migrated
        memory > xtest_loading_squashed_complex_multi_apps
        memory > xtest_loading_squashed
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xdatabases.write (((unsupported)).apply ("default") ("other"))
                xtest_apply.write
                  [xself]
                    memory > xrecorder
                    memory > xrecorder_other
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) (((((xrecorder).xapplied_migrations)).apply)) (((xx).eq "myapp")))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("myapp") ("0432_ponies"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) (((((xrecorder).xapplied_migrations)).apply)) (((xx).eq "myapp")))) ((((unsupported)).apply ((((unsupported)).apply ("myapp") ("0432_ponies"))))))
                        xrecorder_other.write (((xMigrationRecorder)).apply ((((unsupported)).apply ((xconnections)) ("other"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) (((((xrecorder_other).xapplied_migrations)).apply)) (((xx).eq "myapp")))) ((((xset)).apply)))
                        bogusForceDataize.write ((((xrecorder).xrecord_unapplied)).apply ("myapp") ("0432_ponies"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((xx)) ((xy)))) (((((xrecorder).xapplied_migrations)).apply)) (((xx).eq "myapp")))) ((((xset)).apply)))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xapplied_records)) ((((unsupported)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      ((((xconnection).xfeatures).xsupports_transactions).not).if
                        (((unsupported)).apply ((((unsupported)).apply ((xrecorder)) ((xapp)) ((xname)))) (((xself).xapplied_records)))
                          bogusForceDataize.write ((((xrecorder).xrecord_unapplied)).apply ((xapp)) ((xname)))
                xrecord_applied.write
                  [xself xrecorder xapp xname]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ((xapp)) ((xname)))
                        bogusForceDataize.write (((((xself).xapplied_records).xappend)).apply ((((unsupported)).apply ((xrecorder)) ((xapp)) ((xname)))))
                xtest_load.write
                  [xself]
                    memory > xbook_state
                    memory > xmigration_loader
                    memory > xauthor_state
                    memory > xproject_state
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xmigration_loader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("migrations") ("0002_second"))))) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))) ((((unsupported)).apply ("migrations") ("0002_second"))))))
                        xproject_state.write ((((xmigration_loader).xproject_state)).apply ((((unsupported)).apply ("migrations") ("0002_second"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xproject_state).xmodels)))) (2))
                        xauthor_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("author"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xauthor_state).xfields)))) ((((unsupported)).apply ("id") ("name") ("slug") ("age") ("rating"))))
                        xbook_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("book"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xbook_state).xfields)))) ((((unsupported)).apply ("id") ("author"))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("basic") (((xproject_state).xreal_apps)))
                xtest_plan_handles_repeated_migrations.write
                  [xself]
                    memory > xmigration_loader
                    memory > xnodes
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        xnodes.write (((unsupported)).apply ((((unsupported)).apply ("migrations") ("0002_second"))) ((((unsupported)).apply ("migrations2") ("0001_initial"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xmigration_loader).xgraph).x_generate_plan)) ((xnodes)) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))) ((((unsupported)).apply ("migrations") ("0002_second"))) ((((unsupported)).apply ("migrations2") ("0001_initial"))))))
                xtest_load_unmigrated_dependency.write
                  [xself]
                    memory > xbook_state
                    memory > xmigration_loader
                    memory > xproject_state
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xmigration_loader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))) ((((unsupported)).apply ((((unsupported)).apply ("contenttypes") ("0001_initial"))) ((((unsupported)).apply ("auth") ("0001_initial"))) ((((unsupported)).apply ("migrations") ("0001_initial"))))))
                        xproject_state.write ((((xmigration_loader).xproject_state)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xm)) ((((unsupported)).apply ((xa)) ((xm)))) (((xproject_state).xmodels)) (((xa).eq "migrations")))))) (1))
                        xbook_state.write (((unsupported)).apply (((xproject_state).xmodels)) ((((unsupported)).apply ("migrations") ("book"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((xbook_state).xfields)))) ((((unsupported)).apply ("id") ("user"))))
                xtest_run_before.write
                  [xself]
                    memory > xmigration_loader
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xmigration_loader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("migrations") ("0002_second"))))) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))) ((((unsupported)).apply ("migrations") ("0003_third"))) ((((unsupported)).apply ("migrations") ("0002_second"))))))
                xtest_first.write
                  [xself]
                    memory > xmigration_loader
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xmigration_loader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("migrations") ("second"))))) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("thefirst"))) ((((unsupported)).apply ("migrations2") ("0001_initial"))) ((((unsupported)).apply ("migrations2") ("0002_second"))) ((((unsupported)).apply ("migrations") ("second"))))))
                xtest_name_match.write
                  [xself]
                    memory > xmigration_loader
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xmigration_loader).xget_migration_by_prefix)).apply ("migrations") ("0001")).xname)) ("0001_initial"))
                        xmsg.write "There is more than one migration for 'migrations' with the prefix '0'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xAmbiguityError)) ((xmsg)))))
                          bogusForceDataize.write ((((xmigration_loader).xget_migration_by_prefix)).apply ("migrations") ("0"))
                        xmsg.write "There is no migration for 'migrations' with the prefix 'blarg'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xKeyError)) ((xmsg)))))
                          bogusForceDataize.write ((((xmigration_loader).xget_migration_by_prefix)).apply ("migrations") ("blarg"))
                xtest_load_import_error.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("migrations") ("import_error_package"))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xImportError)))))
                          bogusForceDataize.write (((xMigrationLoader)).apply ((xconnection)))
                xtest_load_module_file.write
                  [xself]
                    memory > xloader
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("migrations") ("migrations.faulty_migrations.file"))))))
                        seq
                          xloader.write (((xMigrationLoader)).apply ((xconnection)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("migrations") (((xloader).xunmigrated_apps)) ("App with migrations module file not in unmigrated apps."))
                xtest_load_empty_dir.write
                  [xself]
                    memory > xloader
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("migrations") ("migrations.faulty_migrations.namespace"))))))
                        seq
                          xloader.write (((xMigrationLoader)).apply ((xconnection)))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("migrations") (((xloader).xunmigrated_apps)) ("App missing __init__.py in migrations module not in unmigrated apps."))
                xtest_marked_as_migrated.write
                  [xself]
                    memory > xmigration_loader
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration_loader).xmigrated_apps)) ((((unsupported)).apply ("migrated_app"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration_loader).xunmigrated_apps)) ((((xset)).apply)))
                xtest_marked_as_unmigrated.write
                  [xself]
                    memory > xmigration_loader
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration_loader).xmigrated_apps)) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration_loader).xunmigrated_apps)) ((((unsupported)).apply ("migrated_app"))))
                xtest_explicit_missing_module.write
                  [xself]
                    memory > xmigration_loader
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xImportError)) ("missing-module"))))
                          xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        xmigration_loader.write (((unsupported)).apply ((xMigrationLoader)) ((xconnection)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration_loader).xmigrated_apps)) ((((xset)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xmigration_loader).xunmigrated_apps)) ((((unsupported)).apply ("migrated_app"))))
                xtest_loading_squashed.write
                  [xself]
                    memory > xmigration_loader
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xmigration_loader.write (((xMigrationLoader)).apply ((xconnection)))
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xrecorder).xflush)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xmigration_loader).xgraph).xnodes)) (((((unsupported)).apply ((xx)) (0)).eq "migrations")))))) (1))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("0001_initial"))
                        bogusForceDataize.write ((((xmigration_loader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xx)) ((xx)) ((((xmigration_loader).xgraph).xnodes)) (((((unsupported)).apply ((xx)) (0)).eq "migrations")))))) (2))
                xtest_loading_squashed_complex.write
                  [xself]
                    memory > xnum_nodes
                    memory > xloader
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xrecorder).xflush)))
                        xnum_nodes.write
                          []
                            memory > xplan
                            seq > @
                              seq
                                xplan.write (((xset)).apply ((((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("migrations") ("7_auto"))))))
                                (((unsupported)).apply ((((xlen)).apply (((xplan).sub (((((xloader).xapplied_migrations).xkeys)).apply))))))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (5))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("1_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (4))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("2_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (3))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("3_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (4))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("4_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (3))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("5_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (2))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("6_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (1))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("7_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (0))
                xtest_loading_squashed_complex_multi_apps.write
                  [xself]
                    memory > xloader
                    memory > xplan
                    memory > xexpected_plan
                    seq > @
                      (((unsupported)).apply)
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        xplan.write (((xset)).apply ((((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app1") ("4_auto"))))))
                        xexpected_plan.write (((unsupported)).apply ((((unsupported)).apply ("app1") ("1_auto"))) ((((unsupported)).apply ("app2") ("1_squashed_2"))) ((((unsupported)).apply ("app1") ("2_squashed_3"))) ((((unsupported)).apply ("app1") ("4_auto"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((xexpected_plan)))
                xtest_loading_squashed_complex_multi_apps_partially_applied.write
                  [xself]
                    memory > xplan
                    memory > xexpected_plan
                    memory > xloader
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("app1") ("1_auto"))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("app1") ("2_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        xplan.write (((xset)).apply ((((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app1") ("4_auto"))))))
                        xplan.write ((xplan).sub (((((xloader).xapplied_migrations).xkeys)).apply))
                        xexpected_plan.write (((unsupported)).apply ((((unsupported)).apply ("app2") ("1_squashed_2"))) ((((unsupported)).apply ("app1") ("3_auto"))) ((((unsupported)).apply ("app1") ("4_auto"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((xexpected_plan)))
                xtest_loading_squashed_erroneous.write
                  [xself]
                    memory > xnum_nodes
                    memory > xmsg
                    memory > xloader
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xrecorder).xflush)))
                        xnum_nodes.write
                          []
                            memory > xplan
                            seq > @
                              seq
                                xplan.write (((xset)).apply ((((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("migrations") ("7_auto"))))))
                                (((unsupported)).apply ((((xlen)).apply (((xplan).sub (((((xloader).xapplied_migrations).xkeys)).apply))))))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (5))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("1_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (4))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("2_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (3))
                        xmsg.write "Migration migrations.6_auto depends on nonexistent node ('migrations', '5_auto'). Django tried to replace migration migrations.5_auto with any of [migrations.3_squashed_5] but wasn't able to because some of the replaced migrations are already applied."
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("3_auto"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("4_auto"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("5_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (2))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("6_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (1))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("7_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnum_nodes)).apply)) (0))
                xtest_check_consistent_history.write
                  [xself]
                    memory > xmsg
                    memory > xloader
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        xloader.write (((unsupported)).apply ((xMigrationLoader)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xloader).xcheck_consistent_history)).apply ((xconnection)))
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("0002_second"))
                        xmsg.write "Migration migrations.0002_second is applied before its dependency migrations.0001_initial on database 'default'."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xInconsistentMigrationHistory)) ((xmsg)))))
                          bogusForceDataize.write ((((xloader).xcheck_consistent_history)).apply ((xconnection)))
                xtest_check_consistent_history_squashed.write
                  [xself]
                    memory > xloader
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xloader.write (((unsupported)).apply ((xMigrationLoader)) ("None: is there a None literal in the EO language?"))
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("0001_initial"))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("0002_second"))
                        bogusForceDataize.write ((((xloader).xcheck_consistent_history)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("migrations") ("0003_third"))
                        bogusForceDataize.write ((((xloader).xcheck_consistent_history)).apply ((xconnection)))
                xtest_loading_squashed_ref_squashed.write
                  [xself]
                    memory > xloader
                    memory > xplan
                    memory > xmsg
                    memory > xexpected_plan
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply)
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xrecorder).xflush)))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        xplan.write (((xset)).apply ((((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app1") ("4_auto"))))))
                        xplan.write ((xplan).sub (((((xloader).xapplied_migrations).xkeys)).apply))
                        xexpected_plan.write (((unsupported)).apply ((((unsupported)).apply ("app1") ("1_auto"))) ((((unsupported)).apply ("app2") ("1_squashed_2"))) ((((unsupported)).apply ("app1") ("2_squashed_3"))) ((((unsupported)).apply ("app1") ("4_auto"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((xexpected_plan)))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        xmsg.write "Node ('app1', '3_auto') not a valid node"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNodeNotFoundError)) ((xmsg)))))
                          bogusForceDataize.write (((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app1") ("3_auto"))))
                        (((unsupported)).apply (((xloader).xreplace_migrations)) (FALSE))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        xplan.write (((xset)).apply ((((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app1") ("3_auto"))))))
                        xplan.write ((xplan).sub (((((xloader).xapplied_migrations).xkeys)).apply))
                        xexpected_plan.write (((unsupported)).apply ((((unsupported)).apply ("app1") ("1_auto"))) ((((unsupported)).apply ("app2") ("1_auto"))) ((((unsupported)).apply ("app2") ("2_auto"))) ((((unsupported)).apply ("app1") ("2_auto"))) ((((unsupported)).apply ("app1") ("3_auto"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((xexpected_plan)))
                        (((unsupported)).apply (((xloader).xreplace_migrations)) (TRUE))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("app1") ("1_auto"))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("app1") ("2_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        xplan.write (((xset)).apply ((((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app1") ("4_auto"))))))
                        xplan.write ((xplan).sub (((((xloader).xapplied_migrations).xkeys)).apply))
                        xexpected_plan.write (((unsupported)).apply ((((unsupported)).apply ("app2") ("1_squashed_2"))) ((((unsupported)).apply ("app1") ("3_auto"))) ((((unsupported)).apply ("app1") ("4_auto"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((xexpected_plan)))
                        bogusForceDataize.write ((((xself).xrecord_applied)).apply ((xrecorder)) ("app2") ("1_auto"))
                        bogusForceDataize.write ((((xloader).xbuild_graph)).apply)
                        xplan.write (((xset)).apply ((((((xloader).xgraph).xforwards_plan)).apply ((((unsupported)).apply ("app1") ("4_auto"))))))
                        xplan.write ((xplan).sub (((((xloader).xapplied_migrations).xkeys)).apply))
                        xexpected_plan.write (((unsupported)).apply ((((unsupported)).apply ("app2") ("2_auto"))) ((((unsupported)).apply ("app1") ("3_auto"))) ((((unsupported)).apply ("app1") ("4_auto"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xplan)) ((xexpected_plan)))
                xtest_ignore_files.write
                  [xself]
                    memory > xloader
                    memory > xmigrations
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xloader).xload_disk)).apply)
                        xmigrations.write (((unsupported)).apply ((xname)) ((((unsupported)).apply ((xapp)) ((xname)))) (((xloader).xdisk_migrations)) (((xapp).eq "migrations")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmigrations)) ((((unsupported)).apply ("0001_initial"))))
                xtest_loading_namespace_package.write
                  [xself]
                    memory > xloader
                    memory > xmigrations
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        bogusForceDataize.write ((((xloader).xload_disk)).apply)
                        xmigrations.write (((unsupported)).apply ((xname)) ((((unsupported)).apply ((xapp)) ((xname)))) (((xloader).xdisk_migrations)) (((xapp).eq "migrations")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmigrations)) ((((unsupported)).apply)))
                xtest_loading_package_without__file__.write
                  [xself]
                    memory > xloader
                    memory > xmodule_has_location
                    memory > xmigrations
                    memory > xtest_module
                    memory > xmodule_file
                    memory > xmodule_origin
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xtest_module.write (((ximport_module)).apply ("migrations.test_migrations"))
                        xloader.write (((xMigrationLoader)).apply ((xconnection)))
                        xmodule_file.write ((xtest_module).x__file__)
                        xmodule_origin.write (((xtest_module).x__spec__).xorigin)
                        xmodule_has_location.write (((xtest_module).x__spec__).xhas_location)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xtest_module).x__file__)))))
                            (((unsupported)).apply ((((xtest_module).x__spec__).xorigin)) ("None: is there a None literal in the EO language?"))
                            (((unsupported)).apply ((((xtest_module).x__spec__).xhas_location)) (FALSE))
                            bogusForceDataize.write ((((xloader).xload_disk)).apply)
                            xmigrations.write (((unsupported)).apply ((xname)) ((((unsupported)).apply ((xapp)) ((xname)))) (((xloader).xdisk_migrations)) (((xapp).eq "migrations")))
                            bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((xmigrations)) ((((unsupported)).apply ("0001_initial") ("0002_second"))))
                          seq
                            (((unsupported)).apply (((xtest_module).x__file__)) ((xmodule_file)))
                            (((unsupported)).apply ((((xtest_module).x__spec__).xorigin)) ((xmodule_origin)))
                            (((unsupported)).apply ((((xtest_module).x__spec__).xhas_location)) ((xmodule_has_location)))
            (((unsupported)).apply ((xMigrationTestBase)))
              seq
                xtest_valid.write
                  [xself]
                    memory > xloader
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply (((xcompileall).xcompile_dir)) ((xmigration_dir)) (TRUE) (1) (TRUE))
                            (((unsupported)).apply ((xname)) (((((xos).xlistdir)).apply ((xmigration_dir)))))
                              ((((xname).xendswith)).apply (".py")).if
                                bogusForceDataize.write ((((xos).xremove)).apply ((((((xos).xpath).xjoin)).apply ((xmigration_dir)) ((xname)))))
                            xloader.write (((xMigrationLoader)).apply ((xconnection)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))) (((xloader).xdisk_migrations)))
                xtest_invalid.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_bad_pyc"))) ((xmigration_dir)))
                          seq
                            bogusForceDataize.write ((((xos).xrename)).apply ((((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.pyc-tpl"))) ((((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.pyc"))))
                            xmsg.write "Couldn't import 'w+.migrations.0001_initial' as it appears to be a stale .pyc file."
                            (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xImportError)) ((xmsg)))))
                              bogusForceDataize.write (((xMigrationLoader)).apply ((xconnection)))