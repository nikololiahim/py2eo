memory > xstruct_fmt
memory > xValueError
memory > xstr
memory > xBaseTest
memory > xopen
memory > xReferenceError
memory > xlen
memory > xarray
memory > xcm
memory > xUnicodeError
memory > xcopy
memory > xtestcase
memory > xImportError
memory > xvalues
memory > xAttributeError
memory > xstep
memory > xpickle
memory > xlist
memory > xwarnings
memory > xtypecodes
memory > xmformat_code
memory > xrange
memory > xExaggeratingArray
memory > xUnsignedNumberTest
memory > xstop
memory > xeval
memory > xStopIteration
memory > xIndexError
memory > xbytearray
memory > xFPTest
memory > xNumberTest
memory > xMemoryError
memory > xstart
memory > xproto
memory > xreversed
memory > xtype
memory > xrepr
memory > xint
memory > xgetbuffer_with_null_view
memory > xmaxsize
memory > xit
memory > xr
memory > xSignedNumberTest
memory > xOverflowError
memory > xx
memory > xoperator
memory > xi
memory > xStringTest
memory > xstruct
memory > xsuper
memory > xsupport
memory > xsys
memory > xArraySubclassWithKwargs
memory > xbytes
memory > xtuple
memory > xDeprecationWarning
memory > xfloat
memory > xgc
memory > xOSError
memory > xencoding
memory > xslice
memory > xweakref
memory > xpow
memory > xprotocol
memory > xid
memory > xArraySubclass
memory > xiter
memory > xsetattr
memory > xunittest
memory > xIntegerNumberTest
memory > xEOFError
memory > xIntable
memory > xnext
memory > xvalid_typecodes
memory > xA
memory > xmemoryview
memory > xBufferError
memory > xTypeError
memory > x__name__
memory > xa
[] > test_array
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_create_from_bytes
        memory > xtest_unicode
        memory > xtest_count
        memory > xUNSIGNED_INT16_BE
        memory > xtest_slice
        memory > xtest_coveritertraverse
        memory > xSIGNED_INT32_BE
        memory > xSIGNED_INT16_BE
        memory > xtest_imul
        memory > xtest_reduce_ex
        memory > xsmallerexample
        memory > xSIGNED_INT16_LE
        memory > xtest_bytes_extend
        memory > xtest_insert
        memory > xbadtypecode
        memory > xtest_weakref
        memory > xtest_pickle_for_empty_array
        memory > xtest_getslice
        memory > x__sub__
        memory > xassertEntryEqual
        memory > xtest_pickle
        memory > xtest_append
        memory > xexample
        memory > xtest_subclassing
        memory > x__index__
        memory > xtest_buffer_info
        memory > xSIGNED_INT32_LE
        memory > xtest_tolist
        memory > xUNSIGNED_INT32_LE
        memory > xtest_access
        memory > xtest_subclass_with_kwargs
        memory > xUNKNOWN_FORMAT
        memory > xtest_frombytes
        memory > xtest_constructor_with_iterable_argument
        memory > xtest_obsolete_write_lock
        memory > xtest_constructor
        memory > xtest_delslice
        memory > xtest_numbers
        memory > xtest_overflow
        memory > xtest_fromfile_ioerror
        memory > xUNSIGNED_INT8
        memory > xtest_initialize_with_unicode
        memory > xtest_bad_constructor
        memory > xUNSIGNED_INT32_BE
        memory > xtest_repr
        memory > xoutside
        memory > xUNSIGNED_INT64_LE
        memory > xUTF32_BE
        memory > xtest_add
        memory > xtest_iterationcontains
        memory > xUTF16_BE
        memory > xtypecode
        memory > xtest_index
        memory > xSIGNED_INT64_LE
        memory > xtest_fromlist
        memory > xtest_error
        memory > xtest_pop
        memory > xtest_issue17223
        memory > xtest_extend
        memory > xtest_bug_782369
        memory > xUNSIGNED_INT16_LE
        memory > xtest_remove
        memory > xtest_sizeof_with_buffer
        memory > xtest_fromarray
        memory > xtest_buffer
        memory > xtest_deepcopy
        memory > xtest_extended_set_del_slice
        memory > xbiggerexample
        memory > xtest_tofromstring
        memory > xUTF32_LE
        memory > xUTF16_LE
        memory > xtest_setslice
        memory > xtypecodes2
        memory > xtest_tofromfile
        memory > xtest_getitem
        memory > xtest_copy
        memory > xtest_exhausted_iterator
        memory > xtest_str
        memory > xSIGNED_INT8
        memory > xtest_frombytearray
        memory > xIEEE_754_DOUBLE_LE
        memory > xtest_iterator_pickle
        memory > xtest_extended_getslice
        memory > xtest_nan
        memory > xcheck_overflow
        memory > xtest_assignment
        memory > xsizeof_wchar
        memory > xarray_reconstructor
        memory > xtest_sizeof_without_buffer
        memory > xtest_mul
        memory > xtest_extslice
        memory > xtest_alloc_overflow
        memory > x__add__
        memory > xIEEE_754_FLOAT_BE
        memory > xSIGNED_INT64_BE
        memory > x__init__
        memory > xtest_example_data
        memory > xUNSIGNED_INT64_BE
        memory > xtest_filewrite
        memory > xtest_tofromlist
        memory > xtest_byteswap
        memory > xtest_setitem
        memory > xtest_free_after_iterating
        memory > xtest_reverse
        memory > xtest_iadd
        memory > xminitemsize
        memory > xtest_tofrombytes
        memory > xIEEE_754_FLOAT_LE
        memory > xtest_empty
        memory > xIEEE_754_DOUBLE_BE
        memory > xtest_len
        memory > xtest_type_error
        memory > xtest_delitem
        memory > x__int__
        memory > xtest_cmp
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xsizeof_wchar.write (((((xarray).xarray)).apply ("u")).xitemsize)
            (((unsupported)).apply (((xarray).xarray)))
            (((unsupported)).apply (((xarray).xarray)))
              x__init__.write
                [xself xtypecode xnewarg]
                  seq > @
                    (((unsupported)).apply)
                      bogusForceDataize.write (((((xarray).xarray).x__init__)).apply ((xself)))
            xtypecodes2.write "ubBhHiIlLfdqQ"
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_bad_constructor.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xarray).xarray)))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) (((xarray).xarray)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xarray).xarray)) ("xx"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xarray).xarray)) ("x"))
                xtest_empty.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply ("B"))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply)))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xa)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xa).add (xa))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((xa).mul 3)))) (0))
                        (((unsupported)).apply ((xa)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xa)))) (0))
            xUNKNOWN_FORMAT.write (1.neg)
            xUNSIGNED_INT8.write 0
            xSIGNED_INT8.write 1
            xUNSIGNED_INT16_LE.write 2
            xUNSIGNED_INT16_BE.write 3
            xSIGNED_INT16_LE.write 4
            xSIGNED_INT16_BE.write 5
            xUNSIGNED_INT32_LE.write 6
            xUNSIGNED_INT32_BE.write 7
            xSIGNED_INT32_LE.write 8
            xSIGNED_INT32_BE.write 9
            xUNSIGNED_INT64_LE.write 10
            xUNSIGNED_INT64_BE.write 11
            xSIGNED_INT64_LE.write 12
            xSIGNED_INT64_BE.write 13
            xIEEE_754_FLOAT_LE.write 14
            xIEEE_754_FLOAT_BE.write 15
            xIEEE_754_DOUBLE_LE.write 16
            xIEEE_754_DOUBLE_BE.write 17
            xUTF16_LE.write 18
            xUTF16_BE.write 19
            xUTF32_LE.write 20
            xUTF32_BE.write 21
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_error.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xarray_reconstructor)) ("") ("b") (0) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xarray_reconstructor)) ((xstr)) ("b") (0) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xarray_reconstructor)) (((xarray).xarray)) ("b") ("") (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xarray_reconstructor)) (((xarray).xarray)) ("b") (0) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xarray_reconstructor)) (((xarray).xarray)) ("?") (0) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xarray_reconstructor)) (((xarray).xarray)) ("b") ((xUNKNOWN_FORMAT)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xarray_reconstructor)) (((xarray).xarray)) ("b") (22) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xarray_reconstructor)) (((xarray).xarray)) ("d") (16) ("a"))
                xtest_numbers.write
                  [xself]
                    memory > xarraystr
                    memory > xtestcases
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xtestcases.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("B") ("H") ("I") ("L"))) ((xUNSIGNED_INT8)) ("=BBBB") ((((unsupported)).apply (128) (127) (0) (255))))) ((((unsupported)).apply ((((unsupported)).apply ("b") ("h") ("i") ("l"))) ((xSIGNED_INT8)) ("=bbb") ((((unsupported)).apply ((128.neg)) (127) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("H") ("I") ("L"))) ((xUNSIGNED_INT16_LE)) ("<HHHH") ((((unsupported)).apply (32768) (32767) (0) (65535))))) ((((unsupported)).apply ((((unsupported)).apply ("H") ("I") ("L"))) ((xUNSIGNED_INT16_BE)) (">HHHH") ((((unsupported)).apply (32768) (32767) (0) (65535))))) ((((unsupported)).apply ((((unsupported)).apply ("h") ("i") ("l"))) ((xSIGNED_INT16_LE)) ("<hhh") ((((unsupported)).apply ((32768.neg)) (32767) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("h") ("i") ("l"))) ((xSIGNED_INT16_BE)) (">hhh") ((((unsupported)).apply ((32768.neg)) (32767) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("I") ("L"))) ((xUNSIGNED_INT32_LE)) ("<IIII") ((((unsupported)).apply ((((unsupported)).apply (1) (31))) (((((unsupported)).apply (1) (31)).sub 1)) (0) (((((unsupported)).apply (1) (32)).sub 1)))))) ((((unsupported)).apply ((((unsupported)).apply ("I") ("L"))) ((xUNSIGNED_INT32_BE)) (">IIII") ((((unsupported)).apply ((((unsupported)).apply (1) (31))) (((((unsupported)).apply (1) (31)).sub 1)) (0) (((((unsupported)).apply (1) (32)).sub 1)))))) ((((unsupported)).apply ((((unsupported)).apply ("i") ("l"))) ((xSIGNED_INT32_LE)) ("<iii") ((((unsupported)).apply ((((unsupported)).apply ((1.neg)) (31))) (((((unsupported)).apply (1) (31)).sub 1)) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("i") ("l"))) ((xSIGNED_INT32_BE)) (">iii") ((((unsupported)).apply ((((unsupported)).apply ((1.neg)) (31))) (((((unsupported)).apply (1) (31)).sub 1)) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("L"))) ((xUNSIGNED_INT64_LE)) ("<QQQQ") ((((unsupported)).apply ((((unsupported)).apply (1) (31))) (((((unsupported)).apply (1) (31)).sub 1)) (0) (((((unsupported)).apply (1) (32)).sub 1)))))) ((((unsupported)).apply ((((unsupported)).apply ("L"))) ((xUNSIGNED_INT64_BE)) (">QQQQ") ((((unsupported)).apply ((((unsupported)).apply (1) (31))) (((((unsupported)).apply (1) (31)).sub 1)) (0) (((((unsupported)).apply (1) (32)).sub 1)))))) ((((unsupported)).apply ((((unsupported)).apply ("l"))) ((xSIGNED_INT64_LE)) ("<qqq") ((((unsupported)).apply ((((unsupported)).apply ((1.neg)) (31))) (((((unsupported)).apply (1) (31)).sub 1)) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("l"))) ((xSIGNED_INT64_BE)) (">qqq") ((((unsupported)).apply ((((unsupported)).apply ((1.neg)) (31))) (((((unsupported)).apply (1) (31)).sub 1)) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("L"))) ((xUNSIGNED_INT64_LE)) ("<QQQQ") ((((unsupported)).apply ((((unsupported)).apply (1) (63))) (((((unsupported)).apply (1) (63)).sub 1)) (0) (((((unsupported)).apply (1) (64)).sub 1)))))) ((((unsupported)).apply ((((unsupported)).apply ("L"))) ((xUNSIGNED_INT64_BE)) (">QQQQ") ((((unsupported)).apply ((((unsupported)).apply (1) (63))) (((((unsupported)).apply (1) (63)).sub 1)) (0) (((((unsupported)).apply (1) (64)).sub 1)))))) ((((unsupported)).apply ((((unsupported)).apply ("l"))) ((xSIGNED_INT64_LE)) ("<qqq") ((((unsupported)).apply ((((unsupported)).apply ((1.neg)) (63))) (((((unsupported)).apply (1) (63)).sub 1)) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("l"))) ((xSIGNED_INT64_BE)) (">qqq") ((((unsupported)).apply ((((unsupported)).apply ((1.neg)) (63))) (((((unsupported)).apply (1) (63)).sub 1)) (0))))) ((((unsupported)).apply ((((unsupported)).apply ("f"))) ((xIEEE_754_FLOAT_LE)) ("<ffff") ((((unsupported)).apply (16711938.0) ((((xfloat)).apply ("inf"))) ((((xfloat)).apply ("-inf"))) ((0.0.neg)))))) ((((unsupported)).apply ((((unsupported)).apply ("f"))) ((xIEEE_754_FLOAT_BE)) (">ffff") ((((unsupported)).apply (16711938.0) ((((xfloat)).apply ("inf"))) ((((xfloat)).apply ("-inf"))) ((0.0.neg)))))) ((((unsupported)).apply ((((unsupported)).apply ("d"))) ((xIEEE_754_DOUBLE_LE)) ("<dddd") ((((unsupported)).apply (9006104071832581.0) ((((xfloat)).apply ("inf"))) ((((xfloat)).apply ("-inf"))) ((0.0.neg)))))) ((((unsupported)).apply ((((unsupported)).apply ("d"))) ((xIEEE_754_DOUBLE_BE)) (">dddd") ((((unsupported)).apply (9006104071832581.0) ((((xfloat)).apply ("inf"))) ((((xfloat)).apply ("-inf"))) ((0.0.neg)))))))
                        (((unsupported)).apply ((xtestcase)) ((xtestcases)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xvalid_typecodes)) ((xmformat_code)) ((xstruct_fmt)) ((xvalues)))) ((xtestcase)))
                            xarraystr.write ((((xstruct).xpack)).apply ((xstruct_fmt)) ((((unsupported)).apply ((xvalues)))))
                            (((unsupported)).apply ((xtypecode)) ((xvalid_typecodes)))
                              seq
                                (((unsupported)).apply ((xOverflowError)))
                                  xa.write ((((xarray).xarray)).apply ((xtypecode)) ((xvalues)))
                                  (((unsupported)).apply)
                                xb.write (((xarray_reconstructor)).apply (((xarray).xarray)) ((xtypecode)) ((xmformat_code)) ((xarraystr)))
                                (((unsupported)).apply (((xself).xassertEqual)) ((xa)) ((xb)) (((("{0!r} != {1!r}; testcase={2!r}".xformat)).apply ((xa)) ((xb)) ((xtestcase)))))
                xtest_unicode.write
                  [xself]
                    memory > xtestcases
                    memory > xteststr
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xteststr.write "Bonne Journxe9e U0002030aU00020347"
                        xtestcases.write (((unsupported)).apply ((((unsupported)).apply ((xUTF16_LE)) ("UTF-16-LE"))) ((((unsupported)).apply ((xUTF16_BE)) ("UTF-16-BE"))) ((((unsupported)).apply ((xUTF32_LE)) ("UTF-32-LE"))) ((((unsupported)).apply ((xUTF32_BE)) ("UTF-32-BE"))))
                        (((unsupported)).apply ((xtestcase)) ((xtestcases)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xmformat_code)) ((xencoding)))) ((xtestcase)))
                            xa.write ((((xarray).xarray)).apply ("u") ((xteststr)))
                            xb.write (((xarray_reconstructor)).apply (((xarray).xarray)) ("u") ((xmformat_code)) (((((xteststr).xencode)).apply ((xencoding)))))
                            (((unsupported)).apply (((xself).xassertEqual)) ((xa)) ((xb)) (((("{0!r} != {1!r}; testcase={2!r}".xformat)).apply ((xa)) ((xb)) ((xtestcase)))))
            (((unsupported)).apply)
              seq
                xassertEntryEqual.write
                  [xself xentry1 xentry2]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((xentry1)) ((xentry2)))
                xbadtypecode.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xtypecodes)) (((((((xtypecodes).xindex)).apply (((xself).xtypecode))).add 1).mod (((xlen)).apply ((xtypecodes))))))))
                xtest_constructor.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xtypecode)) (((xself).xtypecode)))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply (((xa).xitemsize)) (((xself).xminitemsize)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xarray).xarray)) (((xself).xtypecode)) ("None: is there a None literal in the EO language?"))
                xtest_len.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        bogusForceDataize.write ((((xa).xappend)).apply ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xa)))) (1))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xa)))) ((((xlen)).apply (((xself).xexample)))))
                xtest_buffer_info.write
                  [xself]
                    memory > xbi
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xbuffer_info)) (42))
                        xbi.write ((((xa).xbuffer_info)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xbi)) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xbi)))) (2))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((xbi)) (0))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((unsupported)).apply ((xbi)) (1))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xbi)) (1))) ((((xlen)).apply ((xa)))))
                xtest_byteswap.write
                  [xself]
                    memory > xb
                    memory > xexample
                    memory > xa
                    seq > @
                      seq
                        (((xself).xtypecode).eq "u").if
                          xexample.write "U00100100"
                          xexample.write ((xself).xexample)
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((xexample)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xbyteswap)) (42))
                        (((unsupported)).apply (((xa).xitemsize)) ((((unsupported)).apply (1) (2) (4) (8)))).if
                          seq
                            xb.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((xexample)))
                            bogusForceDataize.write ((((xb).xbyteswap)).apply)
                            (((xa).xitemsize).eq 1).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xb).xbyteswap)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                xtest_copy.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        xb.write ((((xcopy).xcopy)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xa)))) ((((xid)).apply ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                xtest_deepcopy.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        xb.write ((((xcopy).xdeepcopy)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xa)))) ((((xid)).apply ((xb)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                xtest_reduce_ex.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((xprotocol)) ((((xrange)).apply (3))))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xa).x__reduce_ex__)).apply ((xprotocol)))) (0))) (((xarray).xarray)))
                        (((unsupported)).apply ((xprotocol)) ((((xrange)).apply (3) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((((xa).x__reduce_ex__)).apply ((xprotocol)))) (0))) ((xarray_reconstructor)))
                xtest_pickle.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      (((unsupported)).apply ((xprotocol)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                          xb.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xa)) ((xprotocol)))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xa)))) ((((xid)).apply ((xb)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                          xa.write (((xArraySubclass)).apply (((xself).xtypecode)) (((xself).xexample)))
                          (((unsupported)).apply (((xa).xx)) (10))
                          xb.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xa)) ((xprotocol)))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xa)))) ((((xid)).apply ((xb)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xx)) (((xb).xx)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xa)))) ((((xtype)).apply ((xb)))))
                xtest_pickle_for_empty_array.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      (((unsupported)).apply ((xprotocol)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        seq
                          xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                          xb.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xa)) ((xprotocol)))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xa)))) ((((xid)).apply ((xb)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                          xa.write (((xArraySubclass)).apply (((xself).xtypecode)))
                          (((unsupported)).apply (((xa).xx)) (10))
                          xb.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xa)) ((xprotocol)))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xid)).apply ((xa)))) ((((xid)).apply ((xb)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xx)) (((xb).xx)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xa)))) ((((xtype)).apply ((xb)))))
                xtest_iterator_pickle.write
                  [xself]
                    memory > xd
                    memory > xdata
                    memory > xorig
                    memory > xdata2
                    memory > xitorig
                    seq > @
                      seq
                        xorig.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        xdata.write (((xlist)).apply ((xorig)))
                        xdata2.write (((unsupported)).apply ((xdata)) ((((unsupported)).apply ((1.neg)))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                          seq
                            xitorig.write (((xiter)).apply ((xorig)))
                            xd.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorig)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xa)))) (((((xpickle).xloads)).apply ((xd)))))
                            bogusForceDataize.write ((((xa).xfromlist)).apply ((xdata2)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorig)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) (((xdata).add (xdata2))))
                            bogusForceDataize.write (((xnext)).apply ((xitorig)))
                            xd.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorig)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xa)))) (((((xpickle).xloads)).apply ((xd)))))
                            bogusForceDataize.write ((((xa).xfromlist)).apply ((xdata2)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorig)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) (((((unsupported)).apply ((xdata)) ((((unsupported)).apply (1)))).add (xdata2))))
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (1) ((((xlen)).apply ((xdata)))))))
                              bogusForceDataize.write (((xnext)).apply ((xitorig)))
                            xd.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorig)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xa)))) (((((xpickle).xloads)).apply ((xd)))))
                            bogusForceDataize.write ((((xa).xfromlist)).apply ((xdata2)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((xit)))) ((((xtype)).apply ((xitorig)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((xdata2)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xitorig)))
                            xd.write ((((xpickle).xdumps)).apply ((((unsupported)).apply ((xitorig)) ((xorig)))) ((xproto)))
                            (((unsupported)).apply ((((unsupported)).apply ((xit)) ((xa)))) (((((xpickle).xloads)).apply ((xd)))))
                            bogusForceDataize.write ((((xa).xfromlist)).apply ((xdata2)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xit)))) ((((unsupported)).apply)))
                xtest_exhausted_iterator.write
                  [xself]
                    memory > xexhit
                    memory > xempit
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((xlist)).apply (((xself).xexample)))))
                        xexhit.write (((xiter)).apply ((xa)))
                        xempit.write (((xiter)).apply ((xa)))
                        (((unsupported)).apply ((xx)) ((xexhit)))
                          bogusForceDataize.write (((xnext)).apply ((xempit)))
                        bogusForceDataize.write ((((xa).xappend)).apply (((xself).xoutside)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xexhit)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xempit)))) ((((unsupported)).apply (((xself).xoutside)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) (((((xlist)).apply (((xself).xexample))).add (((unsupported)).apply (((xself).xoutside))))))
                xtest_insert.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xa).xinsert)).apply (0) ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xa)))) ((1.add (((xlen)).apply (((xself).xexample))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply ((xa)) (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xinsert)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xinsert)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xinsert)) (0) ("None: is there a None literal in the EO language?"))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xa).xinsert)).apply ((1.neg)) ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1))))).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xa).xinsert)).apply ((1000.neg)) ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1)))).add ((xself).xexample))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xa).xinsert)).apply (1000) ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1)))))))))
                xtest_tofromfile.write
                  [xself]
                    memory > xb
                    memory > xf
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xtofile)))
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        xf.write (((xopen)).apply (((xsupport).xTESTFN)) ("wb"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xa).xtofile)).apply ((xf)))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            xb.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                            xf.write (((xopen)).apply (((xsupport).xTESTFN)) ("rb"))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xfromfile)))
                            bogusForceDataize.write ((((xb).xfromfile)).apply ((xf)) ((((xlen)).apply (((xself).xexample)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xEOFError)) (((xb).xfromfile)) ((xf)) (((((xlen)).apply (((xself).xexample))).add 1)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                          seq
                            (((xf).xclosed).not).if
                              bogusForceDataize.write ((((xf).xclose)).apply)
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                xtest_fromfile_ioerror.write
                  [xself]
                    memory > xf
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        xf.write (((xopen)).apply (((xsupport).xTESTFN)) ("wb"))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xa).xfromfile)) ((xf)) ((((xlen)).apply (((xself).xexample)))))
                          seq
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                xtest_filewrite.write
                  [xself]
                    memory > xb
                    memory > xf
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))
                        xf.write (((xopen)).apply (((xsupport).xTESTFN)) ("wb"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply ((xa)))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            xb.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                            xf.write (((xopen)).apply (((xsupport).xTESTFN)) ("rb"))
                            bogusForceDataize.write ((((xb).xfromfile)).apply ((xf)) ((((xlen)).apply (((xself).xexample)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xb)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xb).xfromfile)).apply ((xf)) ((((xlen)).apply (((xself).xexample)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                          seq
                            (((xf).xclosed).not).if
                              bogusForceDataize.write ((((xf).xclose)).apply)
                            bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                xtest_tofromlist.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))
                        xb.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xtolist)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xfromlist)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xfromlist)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xfromlist)) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xb).xfromlist)).apply (((((xa).xtolist)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                xtest_tofromstring.write
                  [xself]
                    memory > xnb_warnings
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xnb_warnings.write 2
                        (((unsupported)).apply ((((unsupported)).apply (((xwarnings).xcatch_warnings)) (TRUE))) ((xr)))
                          seq
                            (((unsupported)).apply (((xwarnings).xfilterwarnings)) ("always") ("(to|from)string() is deprecated") ((xDeprecationWarning)))
                            xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))
                            xb.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xtostring)) (42))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xfromstring)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xfromstring)) (42))
                            bogusForceDataize.write ((((xb).xfromstring)).apply (((((xa).xtostring)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                            (((xa).xitemsize).greater 1).if
                              seq
                                bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xfromstring)) ("x"))
                                (((unsupported)).apply ((xnb_warnings)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xr)))) ((xnb_warnings)))
                xtest_tofrombytes.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))
                        xb.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xtobytes)) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xfrombytes)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xb).xfrombytes)) (42))
                        bogusForceDataize.write ((((xb).xfrombytes)).apply (((((xa).xtobytes)).apply)))
                        xc.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xbytearray)).apply (((((xa).xtobytes)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xc)))
                        (((xa).xitemsize).greater 1).if
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xb).xfrombytes)) ("x"))
                xtest_fromarray.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        xb.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                xtest_repr.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((((xeval)).apply ((((xrepr)).apply ((xa)))) ((((unsupported)).apply ("array") (((xarray).xarray)))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xa)))) (("array('%s')".mod ((xself).xtypecode))))
                xtest_str.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))
                        bogusForceDataize.write (((xstr)).apply ((xa)))
                xtest_cmp.write
                  [xself]
                    memory > xab
                    memory > xal
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).eq 42)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).neq 42)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).eq (xa))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).neq (xa))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).less (xa))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).leq (xa))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).greater (xa))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).geq (xa))) (TRUE))
                        xal.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xsmallerexample)))
                        xab.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xbiggerexample)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).eq (2.mul (xa)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).neq (2.mul (xa)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).less (2.mul (xa)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).leq (2.mul (xa)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).greater (2.mul (xa)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).geq (2.mul (xa)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).eq (xal))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).neq (xal))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).less (xal))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).leq (xal))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).greater (xal))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).geq (xal))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).eq (xab))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).neq (xab))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).less (xab))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).leq (xab))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).greater (xab))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).geq (xab))) (FALSE))
                xtest_add.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write (((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample))).add ((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))))))))
                        xb.write ((((xarray).xarray)).apply (((((xself).xbadtypecode)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__add__)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__add__)) ("bad"))
                xtest_iadd.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg)))))))
                        xb.write (xa)
                        (((unsupported)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))).add (2.mul ((xself).xexample)))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((xa)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add ((xself).xexample))))))
                        xb.write ((((xarray).xarray)).apply (((((xself).xbadtypecode)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__add__)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__iadd__)) ("bad"))
                xtest_mul.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write (5.mul ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((5.mul ((xself).xexample))))))
                        xa.write (((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample))).mul 5)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).mul 5)))))
                        xa.write (0.mul ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        xa.write ((1.neg).mul ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        xa.write (5.mul ((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((((unsupported)).apply ((((unsupported)).apply ((xa)) (0)))).mul 5)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__mul__)) ("bad"))
                xtest_imul.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        xb.write (xa)
                        (((unsupported)).apply ((xa)) (5))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((5.mul ((xself).xexample))))))
                        (((unsupported)).apply ((xa)) (0))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        (((unsupported)).apply ((xa)) (1000))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        (((unsupported)).apply ((xa)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((xa)) ((1.neg)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__imul__)) ("bad"))
                xtest_getitem.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) ((1.neg)))) ((((unsupported)).apply (((xself).xexample)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) ((1.neg)))) ((((unsupported)).apply (((xself).xexample)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (((((xlen)).apply (((xself).xexample))).sub 1)))) ((((unsupported)).apply (((xself).xexample)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (((((xlen)).apply (((xself).xexample))).neg)))) ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__getitem__)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xa).x__getitem__)) ((((xlen)).apply (((xself).xexample)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xa).x__getitem__)) ((((((xlen)).apply (((xself).xexample))).neg).sub 1)))
                xtest_setitem.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply ((xa)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply ((xa)) ((1.neg)))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply ((xa)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply ((xa)) ((1.neg)))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((1.neg)))) ((((unsupported)).apply ((xa)) (0))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply ((xa)) ((1.neg)))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((1.neg)))) ((((unsupported)).apply ((xa)) (0))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply ((xa)) ((1.neg)))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) (((((xlen)).apply (((xself).xexample))).sub 1)))) ((((unsupported)).apply ((xa)) (0))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply ((xa)) ((1.neg)))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) (((((xlen)).apply (((xself).xexample))).neg)))) ((((unsupported)).apply ((xa)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (0))) ((((unsupported)).apply ((xa)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__setitem__)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__setitem__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__setitem__)) (0) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xa).x__setitem__)) ((((xlen)).apply (((xself).xexample)))) ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xa).x__setitem__)) ((((((xlen)).apply (((xself).xexample))).neg).sub 1)) ((((unsupported)).apply (((xself).xexample)) (0))))
                xtest_delitem.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) (0))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1))))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((1.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg)))))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) (((((xlen)).apply (((xself).xexample))).sub 1)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg)))))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) (((((xlen)).apply (((xself).xexample))).neg)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1))))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__delitem__)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__delitem__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xa).x__delitem__)) ((((xlen)).apply (((xself).xexample)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xa).x__delitem__)) ((((((xlen)).apply (((xself).xexample))).neg).sub 1)))
                xtest_getslice.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply)))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1.neg)))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1.neg)))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1.neg)) ((1.neg)))))) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (2) (1))))) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1000))))) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1000.neg)))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1000))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1000.neg)))))) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1000.neg)) (1000))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (2000) (1000))))) (((((xarray).xarray)).apply (((xself).xtypecode)))))
                xtest_extended_getslice.write
                  [xself]
                    memory > xindices
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        xindices.write (((unsupported)).apply (0) ("None: is there a None literal in the EO language?") (1) (3) (19) (100) (((xsys).xmaxsize)) ((1.neg)) ((2.neg)) ((31.neg)) ((100.neg)))
                        (((unsupported)).apply ((xstart)) ((xindices)))
                          (((unsupported)).apply ((xstop)) ((xindices)))
                            (((unsupported)).apply ((xstep)) ((((unsupported)).apply ((xindices)) ((((unsupported)).apply (1))))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))))) ((((unsupported)).apply ((((xlist)).apply ((xa)))) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))))
                xtest_setslice.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1)))))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1.neg)))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1.neg)))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))).add ((xself).xexample))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1)))).add ((xself).xexample))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1) ((1.neg)))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1)))).add ((xself).xexample)).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1000))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1000.neg)))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1000))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1000.neg)))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1) (0))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1)))).add ((xself).xexample)).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1)))))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (2000) (1000))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__setitem__)) ((((xslice)).apply (0) (0))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__setitem__)) ((((xslice)).apply (0) (1))) ("None: is there a None literal in the EO language?"))
                        xb.write ((((xarray).xarray)).apply (((((xself).xbadtypecode)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__setitem__)) ((((xslice)).apply (0) (0))) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__setitem__)) ((((xslice)).apply (0) (1))) ((xb)))
                xtest_extended_set_del_slice.write
                  [xself]
                    memory > xL
                    memory > xindices
                    memory > xdata
                    memory > xa
                    seq > @
                      seq
                        xindices.write (((unsupported)).apply (0) ("None: is there a None literal in the EO language?") (1) (3) (19) (100) (((xsys).xmaxsize)) ((1.neg)) ((2.neg)) ((31.neg)) ((100.neg)))
                        (((unsupported)).apply ((xstart)) ((xindices)))
                          (((unsupported)).apply ((xstop)) ((xindices)))
                            (((unsupported)).apply ((xstep)) ((((unsupported)).apply ((xindices)) ((((unsupported)).apply (1))))))
                              seq
                                xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                                xL.write (((xlist)).apply ((xa)))
                                xdata.write (((unsupported)).apply ((xL)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))
                                bogusForceDataize.write ((((xdata).xreverse)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xL)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))) ((xdata)))
                                (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((xdata)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((xL)))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xL)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))))))))
                                (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((xstart)) ((xstop)) ((xstep)))))))))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((xL)))))
                xtest_index.write
                  [xself]
                    memory > xexample
                    memory > xa
                    seq > @
                      seq
                        xexample.write (2.mul ((xself).xexample))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((xexample)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xindex)))
                        (((unsupported)).apply ((xx)) ((xexample)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xindex)).apply ((xx)))) (((((xexample).xindex)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xa).xindex)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xa).xindex)) (((xself).xoutside)))
                xtest_count.write
                  [xself]
                    memory > xexample
                    memory > xa
                    seq > @
                      seq
                        xexample.write (2.mul ((xself).xexample))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((xexample)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xcount)))
                        (((unsupported)).apply ((xx)) ((xexample)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xcount)).apply ((xx)))) (((((xexample).xcount)).apply ((xx)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xcount)).apply (((xself).xoutside)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xcount)).apply ("None: is there a None literal in the EO language?"))) (0))
                xtest_remove.write
                  [xself]
                    memory > xpos
                    memory > xexample2
                    memory > xexample
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((xx)) (((xself).xexample)))
                          seq
                            xexample.write (2.mul ((xself).xexample))
                            xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((xexample)))
                            xpos.write ((((xexample).xindex)).apply ((xx)))
                            xexample2.write ((((unsupported)).apply ((xexample)) ((((unsupported)).apply ((xpos))))).add (((unsupported)).apply ((xexample)) ((((unsupported)).apply (((xpos).add 1))))))
                            bogusForceDataize.write ((((xa).xremove)).apply ((xx)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((xexample2)))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xa).xremove)) (((xself).xoutside)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xa).xremove)) ("None: is there a None literal in the EO language?"))
                xtest_pop.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xa).xpop)))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((2.mul ((xself).xexample))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xpop)) (42) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xpop)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xa).xpop)) ((((xlen)).apply ((xa)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xa).xpop)) ((((((xlen)).apply ((xa))).neg).sub 1)))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply (((((xa).xpop)).apply (0))) ((((unsupported)).apply (((xself).xexample)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1)))).add ((xself).xexample))))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply (((((xa).xpop)).apply (1))) ((((unsupported)).apply (((xself).xexample)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (1) (2)))).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (3))))).add ((xself).xexample))))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply (((((xa).xpop)).apply (0))) ((((unsupported)).apply (((xself).xexample)) (1))))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply (((((xa).xpop)).apply)) ((((unsupported)).apply (((xself).xexample)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) (((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (3)))).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))))))))
                xtest_reverse.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xreverse)) (42))
                        bogusForceDataize.write ((((xa).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg)))))))))
                xtest_extend.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xextend)))
                        bogusForceDataize.write ((((xa).xextend)).apply (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg)))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xa).xextend)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add ((xself).xexample))))))
                        xb.write ((((xarray).xarray)).apply (((((xself).xbadtypecode)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xextend)) ((xb)))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xa).xextend)).apply ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))))))))
                xtest_constructor_with_iterable_argument.write
                  [xself]
                    memory > xB
                    memory > xb
                    memory > xa
                    memory > x__iter__
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xiter)).apply (((xself).xexample)))))
                        xb.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xarray).xarray)) (((xself).xtypecode)) (10))
                        (((unsupported)).apply)
                          x__iter__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xUnicodeError)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeError)) (((xarray).xarray)) (((xself).xtypecode)) ((((xA)).apply)))
                        xB.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ((xUnicodeError)))
                                (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xUnicodeError)) (((xarray).xarray)) (((xself).xtypecode)) ((((xB)).apply)))
                xtest_coveritertraverse.write
                  [xself]
                    memory > xl
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((xImportError)))
                          (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("gc module not available"))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        xl.write (((unsupported)).apply ((((xiter)).apply ((xa)))))
                        bogusForceDataize.write ((((xl).xappend)).apply ((xl)))
                        bogusForceDataize.write ((((xgc).xcollect)).apply)
                xtest_buffer.write
                  [xself]
                    memory > xexpected
                    memory > xm
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        xm.write (((xmemoryview)).apply ((xa)))
                        xexpected.write ((((xm).xtobytes)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((((xa).xtobytes)).apply)) (0))) ((((unsupported)).apply ((xexpected)) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xa).xappend)) ((((unsupported)).apply ((xa)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xa).xextend)) ((((unsupported)).apply ((xa)) ((((unsupported)).apply (0) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xa).xremove)) ((((unsupported)).apply ((xa)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xa).xpop)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xa).xfromlist)) (((((xa).xtolist)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xa).xfrombytes)) (((((xa).xtobytes)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        (((xself).xtypecode).eq "u").if
                          seq
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xa).xfromunicode)) (((((xa).xtounicode)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xoperator).ximul)) ((xa)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xoperator).ximul)) ((xa)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xoperator).xsetitem)) ((xa)) ((((xslice)).apply (0) (0))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xoperator).xdelitem)) ((xa)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) (((xoperator).xdelitem)) ((xa)) ((((xslice)).apply (0) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xm).xtobytes)).apply)) ((xexpected)))
                xtest_weakref.write
                  [xself]
                    memory > xs
                    memory > xp
                    seq > @
                      seq
                        xs.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        xp.write ((((xweakref).xproxy)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xp).xtobytes)).apply)) (((((xs).xtobytes)).apply)))
                        xs.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xReferenceError)) ((xlen)) ((xp)))
                xtest_bug_782369.write
                  [xself]
                    memory > xb
                    memory > xrc
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                          xb.write ((((xarray).xarray)).apply ("B") ((((xrange)).apply (64))))
                        xrc.write ((((xsys).xgetrefcount)).apply (10))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (10))))
                          xb.write ((((xarray).xarray)).apply ("B") ((((xrange)).apply (64))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xrc)) (((((xsys).xgetrefcount)).apply (10))))
                xtest_subclass_with_kwargs.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xArraySubclassWithKwargs)) ("b") (1))
                xtest_create_from_bytes.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply ("H") ("1234"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xlen)).apply ((xa))).mul ((xa).xitemsize))) (4))
                xtest_sizeof_with_buffer.write
                  [xself]
                    memory > xbasesize
                    memory > xa
                    memory > xbuffer_size
                    seq > @
                      (((unsupported)).apply)
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        xbasesize.write ((((xsupport).xcalcvobjsize)).apply ("Pn2Pi"))
                        xbuffer_size.write ((((unsupported)).apply (((((xa).xbuffer_info)).apply)) (1)).mul ((xa).xitemsize))
                        bogusForceDataize.write ((((xsupport).xcheck_sizeof)).apply ((xself)) ((xa)) (((xbasesize).add (xbuffer_size))))
                xtest_sizeof_without_buffer.write
                  [xself]
                    memory > xbasesize
                    memory > xa
                    seq > @
                      (((unsupported)).apply)
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        xbasesize.write ((((xsupport).xcalcvobjsize)).apply ("Pn2Pi"))
                        bogusForceDataize.write ((((xsupport).xcheck_sizeof)).apply ((xself)) ((xa)) ((xbasesize)))
                xtest_initialize_with_unicode.write
                  [xself]
                    memory > xa
                    seq > @
                      (((xself).xtypecode).neq "u").if
                        seq
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                            xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ("foo"))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("cannot use a str") ((((xstr)).apply (((xcm).xexception)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xcm)))
                            xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((((xarray).xarray)).apply ("u") ("foo"))))
                          bogusForceDataize.write ((((xself).xassertIn)).apply ("cannot use a unicode array") ((((xstr)).apply (((xcm).xexception)))))
                        seq
                          xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ("foo"))
                          xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((((xarray).xarray)).apply ("u") ("foo"))))
                xtest_obsolete_write_lock.write
                  [xself]
                    memory > xa
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xa.write ((((xarray).xarray)).apply ("B") (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xBufferError)) ((xgetbuffer_with_null_view)) ((xa)))
                xtest_free_after_iterating.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xcheck_free_after_iterating)).apply ((xself)) ((xiter)) (((xarray).xarray)) ((((unsupported)).apply (((xself).xtypecode)))))
                        bogusForceDataize.write ((((xsupport).xcheck_free_after_iterating)).apply ((xself)) ((xreversed)) (((xarray).xarray)) ((((unsupported)).apply (((xself).xtypecode)))))
            (((unsupported)).apply ((xBaseTest)))
              xtest_setitem.write
                [xself]
                  memory > xa
                  seq > @
                    seq
                      bogusForceDataize.write ((((((xsuper)).apply).xtest_setitem)).apply)
                      xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).x__setitem__)) (0) ((((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply (2))))))
            (((unsupported)).apply ((xStringTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "u"
                xexample.write "x01u263ax00ufeff"
                xsmallerexample.write "x01u263ax00ufefe"
                xbiggerexample.write "x01u263ax01ufeff"
                xoutside.write (((xstr)).apply ("x33"))
                xminitemsize.write 2
                xtest_unicode.write
                  [xself]
                    memory > xs
                    memory > xa
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xarray).xarray)) ("b") ("foo"))
                        xa.write ((((xarray).xarray)).apply ("u") ("xa0xc2u1234"))
                        bogusForceDataize.write ((((xa).xfromunicode)).apply (" "))
                        bogusForceDataize.write ((((xa).xfromunicode)).apply (""))
                        bogusForceDataize.write ((((xa).xfromunicode)).apply (""))
                        bogusForceDataize.write ((((xa).xfromunicode)).apply ("x11abcxffu1234"))
                        xs.write ((((xa).xtounicode)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ("xa0xc2u1234 x11abcxffu1234"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xitemsize)) ((xsizeof_wchar)))
                        xs.write (((unsupported)).apply)
                        xa.write ((((xarray).xarray)).apply ("u") ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xa)))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xfromunicode)))
                xtest_issue17223.write
                  [xself]
                    memory > xinvalid_str
                    memory > xa
                    seq > @
                      seq
                        ((xsizeof_wchar).eq 4).if
                          xinvalid_str.write "xffxffxffxff"
                          bogusForceDataize.write ((((xself).xskipTest)).apply ("specific to 32-bit wchar_t"))
                        xa.write ((((xarray).xarray)).apply ("u") ((xinvalid_str)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xa).xtounicode)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xstr)) ((xa)))
            (((unsupported)).apply ((xBaseTest)))
              seq
                xtest_extslice.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply)))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (2))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (0) (2) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1) (2))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (1) (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1.neg)))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (4) (3) (2) (1) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((2.neg)))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (4) (2) (0))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (3) ((2.neg)))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (3) (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((100.neg)) (100))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (100) ((100.neg)) ((1.neg)))))) ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((100.neg)) (100) (2))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (0) (2) (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1000) (2000) (2))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1000.neg)) ((2000.neg)) ((2.neg)))))) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply)))))
                xtest_delslice.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (5))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (2))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (1) (3))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (5))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1) (2))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (0) (2) (4))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (5))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1) ((2.neg)))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (0) (2) (3) (4))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (1000))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (1) (2) (3) (4) (5) (6) (7) (8) (9))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (9) ((((unsupported)).apply (1) (333))))))))))))
                xtest_assignment.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xins
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (2))))) (((((xarray).xarray)).apply (((xself).xtypecode)) (((((unsupported)).apply (42)).mul 5)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (42) (1) (42) (3) (42) (5) (42) (7) (42) (9))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (10))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((4.neg)))))) (((((xarray).xarray)).apply (((xself).xtypecode)) (((((unsupported)).apply (10)).mul 3)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (0) (10) (2) (3) (4) (10) (6) (7) (8) (10))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (4))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply ((1.neg)))))) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (3) (2) (1) (0))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (10))))
                        xb.write (((unsupported)).apply ((xa)) ((((unsupported)).apply)))
                        xc.write (((unsupported)).apply ((xa)) ((((unsupported)).apply)))
                        xins.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) ((((unsupported)).apply (2) (3))))) ((xins)))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((((xslice)).apply (2) (3))))) ((xins)))
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ((((unsupported)).apply (2) (3))))) ((xins)))
                xtest_iterationcontains.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((xrange)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((xa)))) ((((xlist)).apply ((((xrange)).apply (10))))))
                        xb.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (20))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xa)) ((1.neg)))) ((xa)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xb)) (0))) ((xa)))) (TRUE))
                xcheck_overflow.write
                  [xself xlower xupper]
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply ((xlower)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) (0))) ((xlower)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xarray).xarray)) (((xself).xtypecode)) ((((unsupported)).apply (((xlower).sub 1)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xa).x__setitem__)) (0) (((xlower).sub 1)))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply ((xupper)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) (0))) ((xupper)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xarray).xarray)) (((xself).xtypecode)) ((((unsupported)).apply (((xupper).add 1)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOverflowError)) (((xa).x__setitem__)) (0) (((xupper).add 1)))
                xtest_subclassing.write
                  [xself]
                    memory > x__getitem__
                    memory > xtypecode
                    memory > x__slots__
                    memory > x__init__
                    memory > x__new__
                    memory > xa
                    seq > @
                      seq
                        xtypecode.write ((xself).xtypecode)
                        (((unsupported)).apply (((xarray).xarray)))
                          seq
                            x__slots__.write (((unsupported)).apply ("offset"))
                            x__new__.write
                              [xcls xtypecode xdata xoffset]
                                seq > @
                                  (((unsupported)).apply ((((((xarray).xarray).x__new__)).apply ((xcls)) ((xtypecode)) ((xdata)))))
                            x__init__.write
                              [xself xtypecode xdata xoffset]
                                seq > @
                                  (((unsupported)).apply (((xself).xoffset)) ((xoffset)))
                            x__getitem__.write
                              [xself xi]
                                seq > @
                                  (((unsupported)).apply (((((((xarray).xarray).x__getitem__)).apply ((xself)) ((xi))).add ((xself).xoffset))))
                        xa.write (((xExaggeratingArray)).apply (((xself).xtypecode)) ((((unsupported)).apply (3) (6) (7) (11))) (4))
                        bogusForceDataize.write ((((xself).xassertEntryEqual)).apply ((((unsupported)).apply ((xa)) (0))) (7))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) ((xsetattr)) ((xa)) ("color") ("blue"))
                xtest_frombytearray.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply ("b") ((((xrange)).apply (10))))
                        xb.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
            (((unsupported)).apply ((xNumberTest)))
              xtest_type_error.write
                [xself]
                  memory > xa
                  seq > @
                    seq
                      xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                      bogusForceDataize.write ((((xa).xappend)).apply (42))
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        bogusForceDataize.write ((((xa).xappend)).apply (42.0))
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xa)) (0))) (42.0))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xnum]
                    seq > @
                      (((unsupported)).apply (((xself).x_num)) ((xnum)))
                x__index__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_num)))
                x__int__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_num)))
                x__sub__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xIntable)).apply (((((xint)).apply ((xself))).sub (((xint)).apply ((xother))))))))
                x__add__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xIntable)).apply (((((xint)).apply ((xself))).add (((xint)).apply ((xother))))))))
            (((unsupported)).apply ((xIntegerNumberTest)))
              seq
                xexample.write (((unsupported)).apply ((1.neg)) (0) (1) (42) (127))
                xsmallerexample.write (((unsupported)).apply ((1.neg)) (0) (1) (42) (126))
                xbiggerexample.write (((unsupported)).apply ((1.neg)) (0) (1) (43) (127))
                xoutside.write 23
                xtest_overflow.write
                  [xself]
                    memory > xlower
                    memory > xupper
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        xlower.write ((1.neg).mul (((xint)).apply ((((xpow)).apply (2) (((((xa).xitemsize).mul 8).sub 1))))))
                        xupper.write ((((xint)).apply ((((xpow)).apply (2) (((((xa).xitemsize).mul 8).sub 1))))).sub 1)
                        bogusForceDataize.write ((((xself).xcheck_overflow)).apply ((xlower)) ((xupper)))
                        bogusForceDataize.write ((((xself).xcheck_overflow)).apply ((((xIntable)).apply ((xlower)))) ((((xIntable)).apply ((xupper)))))
            (((unsupported)).apply ((xIntegerNumberTest)))
              seq
                xexample.write (((unsupported)).apply (0) (1) (17) (23) (42) (255))
                xsmallerexample.write (((unsupported)).apply (0) (1) (17) (23) (42) (254))
                xbiggerexample.write (((unsupported)).apply (0) (1) (17) (23) (43) (255))
                xoutside.write 170
                xtest_overflow.write
                  [xself]
                    memory > xlower
                    memory > xupper
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)))
                        xlower.write 0
                        xupper.write ((((xint)).apply ((((xpow)).apply (2) ((((xa).xitemsize).mul 8))))).sub 1)
                        bogusForceDataize.write ((((xself).xcheck_overflow)).apply ((xlower)) ((xupper)))
                        bogusForceDataize.write ((((xself).xcheck_overflow)).apply ((((xIntable)).apply ((xlower)))) ((((xIntable)).apply ((xupper)))))
                xtest_bytes_extend.write
                  [xself]
                    memory > xs
                    memory > xa
                    seq > @
                      seq
                        xs.write (((xbytes)).apply (((xself).xexample)))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xa).xextend)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add ((xself).xexample))))))
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xa).xextend)).apply ((((xbytearray)).apply ((((xreversed)).apply ((xs)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((xself).xexample).add (((unsupported)).apply (((xself).xexample)) ((((unsupported)).apply ((1.neg))))))))))
            (((unsupported)).apply ((xSignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "b"
                xminitemsize.write 1
            (((unsupported)).apply ((xUnsignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "B"
                xminitemsize.write 1
            (((unsupported)).apply ((xSignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "h"
                xminitemsize.write 2
            (((unsupported)).apply ((xUnsignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "H"
                xminitemsize.write 2
            (((unsupported)).apply ((xSignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "i"
                xminitemsize.write 2
            (((unsupported)).apply ((xUnsignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "I"
                xminitemsize.write 2
            (((unsupported)).apply ((xSignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "l"
                xminitemsize.write 4
            (((unsupported)).apply ((xUnsignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "L"
                xminitemsize.write 4
            (((unsupported)).apply ((xSignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "q"
                xminitemsize.write 8
            (((unsupported)).apply ((xUnsignedNumberTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "Q"
                xminitemsize.write 8
            (((unsupported)).apply ((xNumberTest)))
              seq
                xexample.write (((unsupported)).apply ((42.0.neg)) (0) (42) ((((unsupported)).apply)) (((((unsupported)).apply).neg)))
                xsmallerexample.write (((unsupported)).apply ((42.0.neg)) (0) (42) ((((unsupported)).apply)) (((((unsupported)).apply).neg)))
                xbiggerexample.write (((unsupported)).apply ((42.0.neg)) (0) (42) ((((unsupported)).apply)) ((((unsupported)).apply)))
                xoutside.write 23
                xassertEntryEqual.write
                  [xself xentry1 xentry2]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertAlmostEqual)).apply ((xentry1)) ((xentry2)))
                xtest_nan.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply ((((xfloat)).apply ("nan"))))))
                        xb.write ((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply ((((xfloat)).apply ("nan"))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).neq (xb))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).eq (xb))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).greater (xb))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).geq (xb))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).less (xb))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xa).leq (xb))) (FALSE))
                xtest_byteswap.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        xa.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xa).xbyteswap)) (42))
                        (((unsupported)).apply (((xa).xitemsize)) ((((unsupported)).apply (1) (2) (4) (8)))).if
                          seq
                            xb.write ((((xarray).xarray)).apply (((xself).xtypecode)) (((xself).xexample)))
                            bogusForceDataize.write ((((xb).xbyteswap)).apply)
                            (((xa).xitemsize).eq 1).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                              bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xa).xtobytes)).apply)) (((((xb).xtobytes)).apply)))
                            bogusForceDataize.write ((((xb).xbyteswap)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
            (((unsupported)).apply ((xFPTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "f"
                xminitemsize.write 4
            (((unsupported)).apply ((xFPTest)) (((xunittest).xTestCase)))
              seq
                xtypecode.write "d"
                xminitemsize.write 8
                xtest_alloc_overflow.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xa.write ((((xarray).xarray)).apply ("d") (((((unsupported)).apply ((1.neg))).mul 65536)))
                        (((unsupported)).apply ((xMemoryError)))
                          (((unsupported)).apply ((xa)) (((((unsupported)).apply ((xmaxsize)) (65536)).add 1)))
                          bogusForceDataize.write ((((xself).xfail)).apply ("Array of size > maxsize created - MemoryError expected"))
                        xb.write ((((xarray).xarray)).apply ("d") ((((unsupported)).apply (2.71828183) (3.14159265) ((1.neg)))))
                        (((unsupported)).apply ((xMemoryError)))
                          unsupported
                          bogusForceDataize.write ((((xself).xfail)).apply ("Array of size > maxsize created - MemoryError expected"))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtypecode.write "b"
                xexample.write
                  [xself xsize]
                    memory > xbase
                    seq > @
                      seq
                        xbase.write (((((xarray).xarray)).apply (((xself).xtypecode)) ((((unsupported)).apply (0) (1) (2) (3) (4) (5) (6) (7)))).mul (((unsupported)).apply ((xsize)) (8)))
                        (((unsupported)).apply ((xbase)) (((((xarray).xarray)).apply (((xself).xtypecode)) ((((((unsupported)).apply (99)).mul ((xsize).mod 8)).add (((unsupported)).apply (8) (9) (10) (11)))))))
                        (((unsupported)).apply ((xbase)))
                xtest_example_data.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 4)))
                xtest_access.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) ((((xsize).add 4).neg)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) ((xsize)))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) ((4.neg)))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (((xsize).add 3)))) (11))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) ((1.neg)))) (11))
                xtest_slice.write
                  [xself xsize]
                    memory > xpart
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xexample)) ((((unsupported)).apply (4))))))) ((((unsupported)).apply (0) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xexample)) ((((unsupported)).apply ((4.neg)))))))) ((((unsupported)).apply (8) (9) (10) (11))))
                        xpart.write (((unsupported)).apply ((xexample)) ((((unsupported)).apply (1) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xpart)))) (((xsize).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpart)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xpart)) ((1.neg)))) (10))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xpart)))))))
                        xpart.write (((unsupported)).apply ((xexample)) ((((unsupported)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xpart)))) ((((unsupported)).apply (((xsize).add 5)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xpart)) ((((unsupported)).apply (4))))))) ((((unsupported)).apply (0) (2) (4) (6))))
                        ((xsize).mod 2).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xpart)) ((((unsupported)).apply ((2.neg)))))))) ((((unsupported)).apply (9) (11))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xpart)) ((((unsupported)).apply ((2.neg)))))))) ((((unsupported)).apply (8) (10))))
                xtest_count.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xcount)).apply (0))) ((((unsupported)).apply ((xsize)) (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xcount)).apply (11))) (1))
                xtest_append.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xexample).xappend)).apply (12))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) ((1.neg)))) (12))
                xtest_extend.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xexample).xextend)).apply ((((xiter)).apply ((((unsupported)).apply (12) (13) (14) (15))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 8)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xexample)) ((((unsupported)).apply ((8.neg)))))))) ((((unsupported)).apply (8) (9) (10) (11) (12) (13) (14) (15))))
                xtest_frombytes.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xexample).xfrombytes)).apply ("abcd"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 8)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xexample)) ((((unsupported)).apply ((8.neg)))))))) (((((unsupported)).apply (8) (9) (10) (11)).add (((xlist)).apply ("abcd")))))
                xtest_fromlist.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xexample).xfromlist)).apply ((((unsupported)).apply (12) (13) (14) (15))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 8)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xexample)) ((((unsupported)).apply ((8.neg)))))))) ((((unsupported)).apply (8) (9) (10) (11) (12) (13) (14) (15))))
                xtest_index.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xindex)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xindex)).apply (1))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xindex)).apply (7))) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xindex)).apply (11))) (((xsize).add 3)))
                xtest_insert.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xexample).xinsert)).apply (0) (12))
                        bogusForceDataize.write ((((xexample).xinsert)).apply (10) (13))
                        bogusForceDataize.write ((((xexample).xinsert)).apply (((xsize).add 1)) (14))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 7)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (0))) (12))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (10))) (13))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (((xsize).add 1)))) (14))
                xtest_pop.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xpop)).apply (0))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (0))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xpop)).apply (((xsize).add 1)))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (((xsize).add 1)))) (11))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xpop)).apply (1))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (1))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xexample).xpop)).apply)) (11))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) ((xsize)))
                xtest_remove.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xexample).xremove)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (0))) (1))
                        bogusForceDataize.write ((((xexample).xremove)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) ((xsize)))) (9))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (((xsize).add 1)))) (11))
                xtest_reverse.write
                  [xself xsize]
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        bogusForceDataize.write ((((xexample).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (0))) (11))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) (3))) (8))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xexample)) ((1.neg)))) (0))
                        bogusForceDataize.write ((((xexample).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xexample)))) (((xsize).add 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xexample)) ((((unsupported)).apply (4))))))) ((((unsupported)).apply (0) (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((unsupported)).apply ((xexample)) ((((unsupported)).apply ((4.neg)))))))) ((((unsupported)).apply (8) (9) (10) (11))))
                xtest_tolist.write
                  [xself xsize]
                    memory > xls
                    memory > xexample
                    seq > @
                      (((unsupported)).apply)
                        xexample.write ((((xself).xexample)).apply ((xsize)))
                        xls.write ((((xexample).xtolist)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xls)))) ((((xlen)).apply ((xexample)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xls)) ((((unsupported)).apply (8))))) ((((xlist)).apply ((((unsupported)).apply ((xexample)) ((((unsupported)).apply (8))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xls)) ((((unsupported)).apply ((8.neg)))))) ((((xlist)).apply ((((unsupported)).apply ((xexample)) ((((unsupported)).apply ((8.neg)))))))))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)