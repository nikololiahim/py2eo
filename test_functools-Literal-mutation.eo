memory > xhits
memory > xcm
memory > xk
memory > xthreading
memory > xD
memory > xComparatorNotImplemented
memory > xC
memory > xcopy
memory > xTestFailingIter
memory > xU
memory > xCachedCostItem
memory > xTestPartialC
memory > xAttributeError
memory > xargs1
memory > xBadTuple
memory > xpickle
memory > xlist
memory > xnumber
memory > xRuntimeError
memory > xO
memory > xenumerate
memory > xCachedCostItemWithSlots
memory > xkw2
memory > xempty
memory > xCPartialSubclass
memory > xValueError
memory > xgot
memory > xabc
memory > xPyPartialSubclass
memory > xfrozenset
memory > xproxy
memory > xQ
memory > xre_one
memory > xstr
memory > xOrderable_LT
memory > xMyTuple
memory > xSquares
memory > xImplementsLessThan
memory > xkw1
memory > xB
memory > xTestReduce
memory > xfunc
memory > xpermutations
memory > xS
memory > xrange
memory > xMetaA
memory > xvalue
memory > xZeroDivisionError
memory > xkwargs_repr
memory > xT
memory > xcollections
memory > xIndexError
memory > x_
memory > xchoice
memory > xUserDict
memory > xproto
memory > xSequenceClass
memory > xP
memory > xmax
memory > xabcs
memory > xBadCmp
memory > xFoo
memory > xcallable
memory > xTracingDict
memory > xkw
memory > xtype
memory > xTestPartialPy
memory > xf
memory > xset
memory > xrepr
memory > xint
memory > xmaxsize
memory > xMyMeta
memory > xX
memory > xhasattr
memory > xOptionallyCachedCostItem
memory > xtime
memory > xDoubleEq
memory > xx
memory > xi
memory > xR
memory > xTestUpdateWrapper
memory > xImplementsLessThanEqualTo
memory > xbuiltins
memory > xsuper
memory > xImplementsGreaterThan
memory > xsupport
memory > xsys
memory > xTestPartial
memory > xAA
memory > xMyClass
memory > xm
memory > xtuple
memory > xNotImplemented
memory > xargs2
memory > xRecursionError
memory > xsorted
memory > xDeprecationWarning
memory > xBadSeq
memory > xTestLRU
memory > xargs
memory > xobj
memory > xMutatesYourDict
memory > xmisses
memory > xweakref
memory > xgetattr
memory > xv
memory > xV
memory > xadd
memory > xvars
memory > xImplementsGreaterThanEqualTo
memory > xTestCmpToKey
memory > xctx
memory > xre_three
memory > xsetattr
memory > xattr
memory > xname
memory > xunittest
memory > xCachedCostItemWait
memory > xstaticmethod
memory > xBadSequence
memory > xy
memory > xhash
memory > xMyDict
memory > xmap
memory > xwrapper
memory > xexc
memory > xhaystack
memory > xn
memory > xobject
memory > xA
memory > xAbstract
memory > xReferenceError
memory > xhex
memory > xkwargs
memory > xisinstance
memory > xre_two
memory > xcurrsize
memory > xfunctools
memory > xlen
memory > xdict
memory > xclassmethod
memory > xTypeError
memory > x__name__
memory > xkey
[] > test_functools
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_lru_with_keyword_args
        memory > xtest_kwargs_copy
        memory > xtest_lru_with_exceptions
        memory > xtest_no_update
        memory > xtest_obj_field
        memory > xtest_simple_overloads
        memory > x_cost
        memory > xtest_lru_method
        memory > xtest_nested_partial_with_attribute
        memory > xtest_reuse_different_names
        memory > xcapture
        memory > xstatic
        memory > xpositional
        memory > xtest_no_operations_defined
        memory > xtest_keyword
        memory > x__eq__
        memory > xtest_weakref
        memory > xtest_method_register
        memory > xtest_lru_bug_36650
        memory > xtest_kw_combinations
        memory > xtest_register_abc
        memory > xtest_positional
        memory > xtest_bound_method_introspection
        memory > xtest_lru_cache_threaded
        memory > xtest_total_ordering_gt
        memory > xtest_set_name_not_called
        memory > xtest_pickle
        memory > xcmp_to_key
        memory > xtest_unbound_method_retrieval
        memory > xcached_func
        memory > xtest_positional_only
        memory > xdecimal
        memory > xtest_builtin_update
        memory > xtest_wrapping_attributes
        memory > xtest_lru_hash_only_once
        memory > xcached_staticmeth
        memory > xtest_access_from_class
        memory > xtest_need_for_rlock
        memory > xtest_lru_reentrancy_with_len
        memory > xtest_descriptors
        memory > xtest_iterator_usage
        memory > xover_partial
        memory > xtest_lru_with_types
        memory > xtest_c3_abc
        memory > xtest_sort_int
        memory > xtest_total_ordering_le
        memory > xtest_mro
        memory > xtest_manually_adding_non_string_keyword
        memory > xtest_cache_invalidation
        memory > xc_functools
        memory > xtest_lru_bug_35780
        memory > xtest_lru_cache_decoration
        memory > xnothing
        memory > xtest_recursive_pickle
        memory > xtest_annotations
        memory > xtest_hash
        memory > xtest_doc
        memory > xcached_meth
        memory > xtest_cached
        memory > xtest_lru_star_arg_handling
        memory > xtest_invalid_registrations
        memory > xtest_repr
        memory > xtest_keystr_replaces_value
        memory > xtest_no_side_effects
        memory > xtest_total_ordering_lt
        memory > xtest_selective_update
        memory > xtest_total_ordering_ge
        memory > xboth
        memory > xtest_over_partial
        memory > xtest_bad_cmp
        memory > xtest_abstractmethod_register
        memory > xtest_overriding_keywords
        memory > xtest_setstate_errors
        memory > xget_cost
        memory > xspec_keywords
        memory > x__lt__
        memory > xtest_deepcopy
        memory > xtest_cached_attribute_name_differs_from_func_name
        memory > xtest_invalid_positional_argument
        memory > xtest_lru_cache_threaded2
        memory > xtest_c_classes
        memory > xpy_functools
        memory > x__exit__
        memory > xtest_with_bound_and_unbound_methods
        memory > xtest_abstract
        memory > xtest_threaded
        memory > xpy_cached_func
        memory > xtest_lru_with_keyword_args_maxsize_none
        memory > x__slots__
        memory > xtest_type_error_when_not_implemented
        memory > xtest_error_propagation
        memory > xtest_copy
        memory > x__enter__
        memory > xtest_recursive_repr
        memory > xmodule
        memory > xtest_sort_int_str
        memory > x_default_update
        memory > xtest_cmp_to_key_arguments
        memory > xkeywords
        memory > xtest_nested
        memory > xtest_attributes_unwritable
        memory > xtest_immutable_dict
        memory > xc_cached_func
        memory > xcost
        memory > xtest_lru_with_maxsize_none
        memory > xtest_classmethod_register
        memory > xtest_reduce
        memory > xcls
        memory > xtest_setstate_refcount
        memory > xtest_setstate_subclasses
        memory > xtest_lru_no_args
        memory > xcheck_wrapper
        memory > xtest_lru_cache_threaded3
        memory > x__add__
        memory > xtest_arg_combinations
        memory > xsignature
        memory > xtest_setstate
        memory > xtest_default_update
        memory > xtest_mro_conflicts
        memory > xtest_object_with_slots
        memory > x__init__
        memory > xtest_missing_attributes
        memory > xtest_default_update_doc
        memory > xtest_total_ordering_no_overwrite
        memory > xcached_cost
        memory > xtest_callable_register
        memory > xtest_argument_checking
        memory > xpartial
        memory > xtest_compose_mro
        memory > xtest_false_meta
        memory > xtest_type_ann_register
        memory > xtest_reuse_same_name
        memory > xtest_attributes
        memory > xtest_lru_type_error
        memory > xtest_invalid_args
        memory > xtest_nested_optimization
        memory > xtest_staticmethod_register
        memory > xtest_lru
        memory > xtest_protection_of_callers_dict_argument
        memory > xnested
        memory > xtest_lru_with_maxsize_negative
        memory > xreduce
        memory > xtest_cmp_to_key
        memory > xtest_basic_examples
        memory > xtest_kwargs_order
        memory > xreplaced_module
        memory > xtest_register_decorator
        memory > xa
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xpy_functools.write (((unsupported)).apply (((xsupport).ximport_fresh_module)) ("functools") ((((unsupported)).apply ("_functools"))))
            xc_functools.write (((unsupported)).apply (((xsupport).ximport_fresh_module)) ("functools") ((((unsupported)).apply ("_functools"))))
            xdecimal.write (((unsupported)).apply (((xsupport).ximport_fresh_module)) ("decimal") ((((unsupported)).apply ("_decimal"))))
            xreplaced_module.write
              [xname xreplacement]
                memory > xoriginal_module
                seq > @
                  (((unsupported)).apply)
                    xoriginal_module.write (((unsupported)).apply (((xsys).xmodules)) ((xname)))
                    (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xname)))) ((xreplacement)))
                    (((unsupported)).apply)
                      (((unsupported)).apply)
                      (((unsupported)).apply ((((unsupported)).apply (((xsys).xmodules)) ((xname)))) ((xoriginal_module)))
            xcapture.write
              []
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkw)))))
            xsignature.write
              [xpart]
                seq > @
                  seq
                    unsupported
                    (((unsupported)).apply ((((unsupported)).apply (((xpart).xfunc)) (((xpart).xargs)) (((xpart).xkeywords)) (((xpart).x__dict__)))))
            (((unsupported)).apply ((xtuple)))
            (((unsupported)).apply ((xtuple)))
              x__add__.write
                [xself xother]
                  seq > @
                    (((unsupported)).apply (((((xlist)).apply ((xself))).add (((xlist)).apply ((xother))))))
            (((unsupported)).apply ((xdict)))
            (((unsupported)).apply)
              seq
                xtest_basic_examples.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply (((xself).xpartial)) ((xcapture)) (1) (2) (10) (20))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xcallable)).apply ((xp)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) (3) (4) (30) (40))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4))) ((((unsupported)).apply ((xdict)) (10) (30) (40))))))
                        xp.write ((((xself).xpartial)).apply ((xmap)) ((((unsupported)).apply (((xx).mul 10)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xp)).apply ((((unsupported)).apply (1) (2) (3) (4))))))) ((((unsupported)).apply (10) (20) (30) (40))))
                xtest_attributes.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply (((xself).xpartial)) ((xcapture)) (1) (2) (10) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xfunc)) ((xcapture)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xargs)) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xkeywords)) ((((unsupported)).apply ((xdict)) (10) (20))))
                xtest_argument_checking.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xpartial)))
                        (((unsupported)).apply ((xTypeError)))
                          bogusForceDataize.write ((((((xself).xpartial)).apply (2))).apply)
                          bogusForceDataize.write ((((xself).xfail)).apply ("First arg not checked for callability"))
                xtest_protection_of_callers_dict_argument.write
                  [xself]
                    memory > xd
                    memory > xfunc
                    memory > xp
                    seq > @
                      seq
                        xfunc.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xa)))
                        xd.write (((unsupported)).apply ("a") (3))
                        xp.write (((unsupported)).apply (((xself).xpartial)) ((xfunc)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply ((((unsupported)).apply ((xd)))))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply ("a") (3))))
                        (((unsupported)).apply ((xp)) (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ((((unsupported)).apply ("a") (3))))
                xtest_kwargs_copy.write
                  [xself]
                    memory > xd
                    memory > xp
                    seq > @
                      seq
                        xd.write (((unsupported)).apply ("a") (3))
                        xp.write ((((xself).xpartial)).apply ((xcapture)) ((((unsupported)).apply ((xd)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("a") (3))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xd)) ("a"))) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("a") (3))))))
                xtest_arg_combinations.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xpartial)).apply ((xcapture)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply (1) (2))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply)))))
                        xp.write ((((xself).xpartial)).apply ((xcapture)) (1) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply (3) (4))) ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4))) ((((unsupported)).apply)))))
                xtest_kw_combinations.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xpartial)).apply ((xcapture)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xkeywords)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) (1))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("a") (1))))))
                        xp.write (((unsupported)).apply (((xself).xpartial)) ((xcapture)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp).xkeywords)) ((((unsupported)).apply ("a") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("a") (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) (2))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("a") (1) ("b") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xp)) (3) (2))) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("a") (3) ("b") (2))))))
                xtest_positional.write
                  [xself]
                    memory > xexpected
                    memory > xp
                    seq > @
                      (((unsupported)).apply ((xargs)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply (0))) ((((unsupported)).apply (0) (1))) ((((unsupported)).apply (0) (1) (2))) ((((unsupported)).apply (0) (1) (2) (3))))))
                        seq
                          xp.write ((((xself).xpartial)).apply ((xcapture)) ((((unsupported)).apply ((xargs)))))
                          xexpected.write ((xargs).add (((unsupported)).apply ("x")))
                          (((unsupported)).apply ((((unsupported)).apply ((xgot)) ((xempty)))) ((((xp)).apply ("x"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xexpected).eq (xgot)).and ((xempty).eq (((unsupported)).apply)))))
                xtest_keyword.write
                  [xself]
                    memory > xexpected
                    memory > xp
                    seq > @
                      (((unsupported)).apply ((xa)) ((((unsupported)).apply ("a") (0) ("None: is there a None literal in the EO language?") (3.5))))
                        seq
                          xp.write (((unsupported)).apply (((xself).xpartial)) ((xcapture)) ((xa)))
                          xexpected.write (((unsupported)).apply ("a") ((xa)) ("x") ("None: is there a None literal in the EO language?"))
                          (((unsupported)).apply ((((unsupported)).apply ((xempty)) ((xgot)))) ((((unsupported)).apply ((xp)) ("None: is there a None literal in the EO language?"))))
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xexpected).eq (xgot)).and ((xempty).eq (((unsupported)).apply)))))
                xtest_no_side_effects.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply (((xself).xpartial)) ((xcapture)) (0) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xargs1)) ((xkw1)))) ((((unsupported)).apply ((xp)) (1) (2))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xargs1).eq (((unsupported)).apply (0) (1))).and ((xkw1).eq (((unsupported)).apply ("a") (1) ("b") (2))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xargs2)) ((xkw2)))) ((((xp)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xargs2).eq (((unsupported)).apply (0))).and ((xkw2).eq (((unsupported)).apply ("a") (1))))))
                xtest_error_propagation.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xx xy]
                            seq > @
                              unsupported
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) (((((xself).xpartial)).apply ((xf)) (1) (0))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) (((((xself).xpartial)).apply ((xf)) (1))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) (((((xself).xpartial)).apply ((xf)))) (1) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xZeroDivisionError)) ((((unsupported)).apply (((xself).xpartial)) ((xf)) (0))) (1))
                xtest_weakref.write
                  [xself]
                    memory > xp
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xself).xpartial)) ((xint)) (16))
                        xp.write (((xproxy)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xfunc)) (((xp).xfunc)))
                        xf.write "None: is there a None literal in the EO language?"
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xReferenceError)) ((xgetattr)) ((xp)) ("func"))
                xtest_with_bound_and_unbound_methods.write
                  [xself]
                    memory > xjoin
                    memory > xdata
                    seq > @
                      seq
                        xdata.write (((xlist)).apply ((((xmap)).apply ((xstr)) ((((xrange)).apply (10))))))
                        xjoin.write ((((xself).xpartial)).apply (((xstr).xjoin)) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xjoin)).apply ((xdata)))) ("0123456789"))
                        xjoin.write ((((xself).xpartial)).apply (("".xjoin)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xjoin)).apply ((xdata)))) ("0123456789"))
                xtest_nested_optimization.write
                  [xself]
                    memory > xpartial
                    memory > xinner
                    memory > xnested
                    memory > xflat
                    seq > @
                      seq
                        xpartial.write ((xself).xpartial)
                        xinner.write (((xpartial)).apply ((xsignature)) ("asdf"))
                        xnested.write (((unsupported)).apply ((xpartial)) ((xinner)) (TRUE))
                        xflat.write (((unsupported)).apply ((xpartial)) ((xsignature)) ("asdf") (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsignature)).apply ((xnested)))) ((((xsignature)).apply ((xflat)))))
                xtest_nested_partial_with_attribute.write
                  [xself]
                    memory > xpartial
                    memory > xp
                    memory > xfoo
                    memory > xp2
                    seq > @
                      seq
                        xpartial.write ((xself).xpartial)
                        xfoo.write
                          [xbar]
                            seq > @
                              (((unsupported)).apply ((xbar)))
                        xp.write (((xpartial)).apply ((xfoo)) ("first"))
                        xp2.write (((xpartial)).apply ((xp)) ("second"))
                        (((unsupported)).apply (((xp2).xnew_attr)) ("spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xp2).xnew_attr)) ("spam"))
                xtest_repr.write
                  [xself]
                    memory > xf
                    memory > xargs
                    memory > xname
                    memory > xkwargs
                    memory > xargs_repr
                    memory > xkwargs_reprs
                    seq > @
                      seq
                        xargs.write (((unsupported)).apply ((((xobject)).apply)) ((((xobject)).apply)))
                        xargs_repr.write (((", ".xjoin)).apply ((((unsupported)).apply ((((xrepr)).apply ((xa)))) ((xa)) ((xargs)))))
                        xkwargs.write (((unsupported)).apply ("a") ((((xobject)).apply)) ("b") ((((xobject)).apply)))
                        xkwargs_reprs.write (((unsupported)).apply (((("a={a!r}, b={b!r}".xformat_map)).apply ((xkwargs)))) (((("b={b!r}, a={a!r}".xformat_map)).apply ((xkwargs)))))
                        (((unsupported)).apply (((xself).xpartial)) ((((unsupported)).apply (((xc_functools).xpartial)) (((xpy_functools).xpartial))))).if
                          xname.write "functools.partial"
                          xname.write (((xself).xpartial).x__name__)
                        xf.write ((((xself).xpartial)).apply ((xcapture)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{name}({capture!r})") ((((xrepr)).apply ((xf)))))
                        xf.write ((((xself).xpartial)).apply ((xcapture)) ((((unsupported)).apply ((xargs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("{name}({capture!r}, {args_repr})") ((((xrepr)).apply ((xf)))))
                        xf.write ((((xself).xpartial)).apply ((xcapture)) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xrepr)).apply ((xf)))) ((((unsupported)).apply ("{name}({capture!r}, {kwargs_repr})") ((xkwargs_repr)) ((xkwargs_reprs)))))
                        xf.write ((((xself).xpartial)).apply ((xcapture)) ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xrepr)).apply ((xf)))) ((((unsupported)).apply ("{name}({capture!r}, {args_repr}, {kwargs_repr})") ((xkwargs_repr)) ((xkwargs_reprs)))))
                xtest_recursive_repr.write
                  [xself]
                    memory > xname
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xpartial)) ((((unsupported)).apply (((xc_functools).xpartial)) (((xpy_functools).xpartial))))).if
                          xname.write "functools.partial"
                          xname.write (((xself).xpartial).x__name__)
                        xf.write ((((xself).xpartial)).apply ((xcapture)))
                        bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xf)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xf)))) (("%s(...)".mod (((unsupported)).apply ((xname))))))
                          bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        xf.write ((((xself).xpartial)).apply ((xcapture)))
                        bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply ((xf)))) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xf)))) (("%s(%r, ...)".mod (((unsupported)).apply ((xname)) ((xcapture))))))
                          bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        xf.write ((((xself).xpartial)).apply ((xcapture)))
                        bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply ("a") ((xf)))) ((((unsupported)).apply)))))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xf)))) (("%s(%r, a=...)".mod (((unsupported)).apply ((xname)) ((xcapture))))))
                          bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                xtest_pickle.write
                  [xself]
                    memory > xf_copy
                    memory > xf
                    seq > @
                      (((unsupported)).apply (((((xself).xAllowPickle)).apply)))
                        seq
                          xf.write (((unsupported)).apply (((xself).xpartial)) ((xsignature)) ((((unsupported)).apply ("asdf"))) ((((unsupported)).apply (TRUE))))
                          (((unsupported)).apply (((xf).xattr)) ((((unsupported)).apply)))
                          (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            seq
                              xf_copy.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xf)) ((xproto)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsignature)).apply ((xf_copy)))) ((((xsignature)).apply ((xf)))))
                xtest_copy.write
                  [xself]
                    memory > xf_copy
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xself).xpartial)) ((xsignature)) ((((unsupported)).apply ("asdf"))) ((((unsupported)).apply (TRUE))))
                        (((unsupported)).apply (((xf).xattr)) ((((unsupported)).apply)))
                        xf_copy.write ((((xcopy).xcopy)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsignature)).apply ((xf_copy)))) ((((xsignature)).apply ((xf)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xf_copy).xattr)) (((xf).xattr)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xf_copy).xargs)) (((xf).xargs)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xf_copy).xkeywords)) (((xf).xkeywords)))
                xtest_deepcopy.write
                  [xself]
                    memory > xf_copy
                    memory > xf
                    seq > @
                      seq
                        xf.write (((unsupported)).apply (((xself).xpartial)) ((xsignature)) ((((unsupported)).apply ("asdf"))) ((((unsupported)).apply (TRUE))))
                        (((unsupported)).apply (((xf).xattr)) ((((unsupported)).apply)))
                        xf_copy.write ((((xcopy).xdeepcopy)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsignature)).apply ((xf_copy)))) ((((xsignature)).apply ((xf)))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xf_copy).xattr)) (((xf).xattr)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xf_copy).xargs)) (((xf).xargs)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply (((xf_copy).xargs)) (0))) ((((unsupported)).apply (((xf).xargs)) (0))))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply (((xf_copy).xkeywords)) (((xf).xkeywords)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((unsupported)).apply (((xf_copy).xkeywords)) ("bar"))) ((((unsupported)).apply (((xf).xkeywords)) ("bar"))))
                xtest_setstate.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xpartial)).apply ((xsignature)))
                        bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply (1))) ((((unsupported)).apply ((xdict)) (10))) ((((unsupported)).apply ((xdict)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsignature)).apply ((xf)))) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply (1))) ((((unsupported)).apply ((xdict)) (10))) ((((unsupported)).apply ((xdict)) ((((unsupported)).apply)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xf)) (2) (20))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ("a") (10) ("b") (20))))))
                        bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply (1))) ((((unsupported)).apply ((xdict)) (10))) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsignature)).apply ((xf)))) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply (1))) ((((unsupported)).apply ((xdict)) (10))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xf)) (2) (20))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ("a") (10) ("b") (20))))))
                        bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply (1))) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xf)) (2) (20))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply ("b") (20))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply (2))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) ((((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsignature)).apply ((xf)))) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xf)) (2) (20))) ((((unsupported)).apply ((((unsupported)).apply (2))) ((((unsupported)).apply ("b") (20))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply (2))) ((((unsupported)).apply ((((unsupported)).apply (2))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply)))))
                xtest_setstate_errors.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xpartial)).apply ((xsignature)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).x__setstate__)) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).x__setstate__)) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).x__setstate__)) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).x__setstate__)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).x__setstate__)) ((((unsupported)).apply ((xcapture)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).x__setstate__)) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).x__setstate__)) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                xtest_setstate_subclasses.write
                  [xself]
                    memory > xs
                    memory > xr
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xpartial)).apply ((xsignature)))
                        bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((xMyTuple)).apply ((((unsupported)).apply (1))))) ((((unsupported)).apply ((xMyDict)) (10))) ("None: is there a None literal in the EO language?"))))
                        xs.write (((xsignature)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply (1))) ((((unsupported)).apply ((xdict)) (10))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xs)) (1))))) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xs)) (2))))) ((xdict)))
                        xr.write (((xf)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) ((((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply ("a") (10))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xr)) (0))))) ((xtuple)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xr)) (1))))) ((xdict)))
                        bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((xBadTuple)).apply ((((unsupported)).apply (1))))) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))))
                        xs.write (((xsignature)).apply ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply (1))) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xs)) (1))))) ((xtuple)))
                        xr.write (((xf)).apply (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xr)) ((((unsupported)).apply ((((unsupported)).apply (1) (2))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xtype)).apply ((((unsupported)).apply ((xr)) (0))))) ((xtuple)))
                xtest_recursive_pickle.write
                  [xself]
                    memory > xf_copy
                    memory > xf
                    seq > @
                      (((unsupported)).apply (((((xself).xAllowPickle)).apply)))
                        seq
                          xf.write ((((xself).xpartial)).apply ((xcapture)))
                          bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xf)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                          (((unsupported)).apply)
                            (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRecursionError)))))
                                bogusForceDataize.write ((((xpickle).xdumps)).apply ((xf)) ((xproto)))
                            bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                          xf.write ((((xself).xpartial)).apply ((xcapture)))
                          bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply ((xf)))) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                          (((unsupported)).apply)
                            (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xf_copy.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xf)) ((xproto)))))
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xf_copy).xargs)) (0))) ((xf_copy)))
                                  bogusForceDataize.write ((((xf_copy).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                          xf.write ((((xself).xpartial)).apply ((xcapture)))
                          bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply ("a") ((xf)))) ((((unsupported)).apply)))))
                          (((unsupported)).apply)
                            (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xf_copy.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xf)) ((xproto)))))
                                (((unsupported)).apply)
                                  bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply (((xf_copy).xkeywords)) ("a"))) ((xf_copy)))
                                  bogusForceDataize.write ((((xf_copy).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xf).x__setstate__)).apply ((((unsupported)).apply ((xcapture)) ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply)))))
                xtest_setstate_refcount.write
                  [xself]
                    memory > x__getitem__
                    memory > x__len__
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (5))
                            x__getitem__.write
                              [xself xkey]
                                seq > @
                                  seq
                                    ((xkey).eq 0).if
                                      (((unsupported)).apply ((xmax)))
                                      ((xkey).eq 1).if
                                        (((unsupported)).apply ((((xtuple)).apply ((((xrange)).apply (1000000))))))
                                        (((unsupported)).apply ((xkey)) ((((unsupported)).apply (2) (3)))).if
                                          (((unsupported)).apply ((((unsupported)).apply)))
                                    (((unsupported)).apply ((xIndexError)))
                        xf.write ((((xself).xpartial)).apply ((xobject)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).x__setstate__)) ((((xBadSequence)).apply)))
            (((unsupported)).apply ((xTestPartial)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xc_functools)) ("requires the C _functools module"))))
              seq
                (xc_functools).if
                  xpartial.write ((xc_functools).xpartial)
                (((unsupported)).apply)
                  seq
                    x__enter__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply ((xself)))
                    x__exit__.write
                      [xself xtype xvalue xtb]
                        seq > @
                          (((unsupported)).apply (FALSE))
                xtest_attributes_unwritable.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((unsupported)).apply (((xself).xpartial)) ((xcapture)) (1) (2) (10) (20))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) ((xsetattr)) ((xp)) ("func") ((xmap)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) ((xsetattr)) ((xp)) ("args") ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xAttributeError)) ((xsetattr)) ((xp)) ("keywords") ((((unsupported)).apply ((xdict)) (1) (2))))
                        xp.write ((((xself).xpartial)).apply ((xhex)))
                        (((unsupported)).apply ((xTypeError)))
                          (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xp).x__dict__)))))))
                          bogusForceDataize.write ((((xself).xfail)).apply ("partial object allowed __dict__ to be deleted"))
                xtest_manually_adding_non_string_keyword.write
                  [xself]
                    memory > xr
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xpartial)).apply ((xcapture)))
                        (((unsupported)).apply ((((unsupported)).apply (((xp).xkeywords)) (1234))) ("value"))
                        xr.write (((xrepr)).apply ((xp)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("1234") ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("'value'") ((xr)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xp)).apply)
                xtest_keystr_replaces_value.write
                  [xself]
                    memory > x__str__
                    memory > xr
                    memory > xp
                    seq > @
                      seq
                        xp.write ((((xself).xpartial)).apply ((xcapture)))
                        (((unsupported)).apply ((xobject)))
                          x__str__.write
                            [xself]
                              seq > @
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply (((xp).xkeywords)) ((xself)))) ((((unsupported)).apply ("sth2"))))
                                  (((unsupported)).apply ("astr"))
                        (((unsupported)).apply ((((unsupported)).apply (((xp).xkeywords)) ((((xMutatesYourDict)).apply)))) ((((unsupported)).apply ("sth"))))
                        xr.write (((xrepr)).apply ((xp)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("astr") ((xr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("['sth']") ((xr)))
            (((unsupported)).apply ((xTestPartial)) (((xunittest).xTestCase)))
              seq
                xpartial.write ((xpy_functools).xpartial)
                (((unsupported)).apply)
                  seq
                    x__init__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply (((xself).x_cm)) ((((xreplaced_module)).apply ("functools") ((xpy_functools)))))
                    x__enter__.write
                      [xself]
                        seq > @
                          (((unsupported)).apply ((((((xself).x_cm).x__enter__)).apply)))
                    x__exit__.write
                      [xself xtype xvalue xtb]
                        seq > @
                          (((unsupported)).apply ((((((xself).x_cm).x__exit__)).apply ((xtype)) ((xvalue)) ((xtb)))))
            (xc_functools).if
              (((unsupported)).apply (((xc_functools).xpartial)))
            (((unsupported)).apply (((xpy_functools).xpartial)))
            (((unsupported)).apply ((xTestPartialC)) (((((xunittest).xskipUnless)).apply ((xc_functools)) ("requires the C _functools module"))))
              seq
                (xc_functools).if
                  xpartial.write (xCPartialSubclass)
                xtest_nested_optimization.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xTestPartialPy)))
              xpartial.write (xPyPartialSubclass)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply ((xobject)))
                  seq
                    xnothing.write ((((xfunctools).xpartialmethod)).apply ((xcapture)))
                    xpositional.write ((((xfunctools).xpartialmethod)).apply ((xcapture)) (1))
                    xkeywords.write (((unsupported)).apply (((xfunctools).xpartialmethod)) ((xcapture)) (2))
                    xboth.write (((unsupported)).apply (((xfunctools).xpartialmethod)) ((xcapture)) (3) (4))
                    xspec_keywords.write (((unsupported)).apply (((xfunctools).xpartialmethod)) ((xcapture)) (1) (2))
                    xnested.write ((((xfunctools).xpartialmethod)).apply ((xpositional)) (5))
                    xover_partial.write ((((xfunctools).xpartialmethod)).apply ((((unsupported)).apply (((xfunctools).xpartial)) ((xcapture)) (6))) (7))
                    xstatic.write ((((xfunctools).xpartialmethod)).apply ((((xstaticmethod)).apply ((xcapture)))) (8))
                    xcls.write (((unsupported)).apply (((xfunctools).xpartialmethod)) ((((xclassmethod)).apply ((xcapture)))) (9))
                xa.write (((xA)).apply)
                xtest_arg_combinations.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xnothing)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xnothing)).apply (5))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (5))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xnothing)) (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)))) ((((unsupported)).apply ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xnothing)) (5) (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (5))) ((((unsupported)).apply ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xpositional)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (1))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xpositional)).apply (5))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (1) (5))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xpositional)) (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (1))) ((((unsupported)).apply ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xpositional)) (5) (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (1) (5))) ((((unsupported)).apply ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xkeywords)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)))) ((((unsupported)).apply ("a") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xkeywords)).apply (5))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (5))) ((((unsupported)).apply ("a") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xkeywords)) (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)))) ((((unsupported)).apply ("a") (2) ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xkeywords)) (5) (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (5))) ((((unsupported)).apply ("a") (2) ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xboth)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (3))) ((((unsupported)).apply ("b") (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xboth)).apply (5))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (3) (5))) ((((unsupported)).apply ("b") (4))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xboth)) (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (3))) ((((unsupported)).apply ("b") (4) ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xboth)) (5) (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (3) (5))) ((((unsupported)).apply ("b") (4) ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xA).xboth)) (((xself).xa)) (5) (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (3) (5))) ((((unsupported)).apply ("b") (4) ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xspec_keywords)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)))) ((((unsupported)).apply ("self") (1) ("func") (2))))))
                xtest_nested.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xnested)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (1) (5))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xnested)).apply (6))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (1) (5) (6))) ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xnested)) (7))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (1) (5))) ((((unsupported)).apply ("d") (7))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xnested)) (6) (7))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (1) (5) (6))) ((((unsupported)).apply ("d") (7))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xA).xnested)) (((xself).xa)) (6) (7))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (1) (5) (6))) ((((unsupported)).apply ("d") (7))))))
                xtest_over_partial.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xover_partial)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (7))) ((((unsupported)).apply ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xa).xover_partial)).apply (5))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (7) (5))) ((((unsupported)).apply ("c") (6))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xover_partial)) (8))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (7))) ((((unsupported)).apply ("c") (6) ("d") (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xover_partial)) (5) (8))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (7) (5))) ((((unsupported)).apply ("c") (6) ("d") (8))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xA).xover_partial)) (((xself).xa)) (5) (8))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)) (7) (5))) ((((unsupported)).apply ("c") (6) ("d") (8))))))
                xtest_bound_method_introspection.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write ((xself).xa)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xobj).xboth).x__self__)) ((xobj)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xobj).xnested).x__self__)) ((xobj)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xobj).xover_partial).x__self__)) ((xobj)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((xobj).xcls).x__self__)) (((xself).xA)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xself).xA).xcls).x__self__)) (((xself).xA)))
                xtest_unbound_method_retrieval.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write ((xself).xA)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply (((xobj).xboth)) ("__self__"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply (((xobj).xnested)) ("__self__"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply (((xobj).xover_partial)) ("__self__"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply (((xobj).xstatic)) ("__self__"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((((xself).xa).xstatic)) ("__self__"))))
                xtest_descriptors.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xobj)) ((((unsupported)).apply (((xself).xA)) (((xself).xa)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xobj)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xobj).xstatic)).apply)) ((((unsupported)).apply ((((unsupported)).apply (8))) ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xobj).xstatic)).apply (5))) ((((unsupported)).apply ((((unsupported)).apply (8) (5))) ((((unsupported)).apply)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xobj).xstatic)) (8))) ((((unsupported)).apply ((((unsupported)).apply (8))) ((((unsupported)).apply ("d") (8))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xobj).xstatic)) (5) (8))) ((((unsupported)).apply ((((unsupported)).apply (8) (5))) ((((unsupported)).apply ("d") (8))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xobj).xcls)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xA)))) ((((unsupported)).apply ("d") (9))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xobj).xcls)).apply (5))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xA)) (5))) ((((unsupported)).apply ("d") (9))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xobj).xcls)) (8))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xA)))) ((((unsupported)).apply ("c") (8) ("d") (9))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xobj).xcls)) (5) (8))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xA)) (5))) ((((unsupported)).apply ("c") (8) ("d") (9))))))
                xtest_overriding_keywords.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xa).xkeywords)) (3))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)))) ((((unsupported)).apply ("a") (3))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xself).xA).xkeywords)) (((xself).xa)) (3))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xa)))) ((((unsupported)).apply ("a") (3))))))
                xtest_invalid_args.write
                  [xself]
                    memory > xmethod
                    memory > xb
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply ((xobject)))
                            xmethod.write ((((xfunctools).xpartialmethod)).apply ("None: is there a None literal in the EO language?") (1))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          (((unsupported)).apply)
                            xmethod.write ((((xfunctools).xpartialmethod)).apply)
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          (((unsupported)).apply)
                            xmethod.write (((unsupported)).apply (((xfunctools).xpartialmethod)) ((xcapture)) (1))
                        xb.write (((xB)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xb).xmethod)) (2) (3))) ((((unsupported)).apply ((((unsupported)).apply ((xb)) (2))) ((((unsupported)).apply ("a") (1) ("x") (3))))))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((((unsupported)).apply ((((xvars)).apply (((xself).xA)))) ("both"))))) (((("functools.partialmethod({}, 3, b=4)".xformat)).apply ((xcapture)))))
                xtest_abstract.write
                  [xself]
                    memory > xadd5
                    memory > xadd
                    seq > @
                      seq
                        (((unsupported)).apply (((xabc).xABCMeta)))
                          seq
                            xadd.write
                              [xself xx xy]
                                seq > @
                                  (((unsupported)).apply)
                            xadd5.write ((((xfunctools).xpartialmethod)).apply ((xadd)) (5))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xAbstract).xadd).x__isabstractmethod__)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xAbstract).xadd5).x__isabstractmethod__)))
                        (((unsupported)).apply ((xfunc)) ((((unsupported)).apply ((((xself).xA).xstatic)) ((((xself).xA).xcls)) ((((xself).xA).xover_partial)) ((((xself).xA).xnested)) ((((xself).xA).xboth)))))
                          bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xgetattr)).apply ((xfunc)) ("__isabstractmethod__") (FALSE))))
                xtest_positional_only.write
                  [xself]
                    memory > xp
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa xb]
                            seq > @
                              (((unsupported)).apply (((xa).add (xb))))
                        xp.write ((((xfunctools).xpartial)).apply ((xf)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xp)).apply (2))) ((((xf)).apply (1) (2))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xcheck_wrapper.write
                  [xself xwrapper xwrapped xassigned xupdated]
                    memory > xwrapper_attr
                    memory > xwrapped_attr
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xname)) ((xassigned)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply ((((xgetattr)).apply ((xwrapper)) ((xname)))) ((((xgetattr)).apply ((xwrapped)) ((xname)))))
                        (((unsupported)).apply ((xname)) ((xupdated)))
                          seq
                            xwrapper_attr.write (((xgetattr)).apply ((xwrapper)) ((xname)))
                            xwrapped_attr.write (((xgetattr)).apply ((xwrapped)) ((xname)))
                            (((unsupported)).apply ((xkey)) ((xwrapped_attr)))
                              seq
                                (((xname).eq "__dict__").and ((xkey).eq "__wrapped__")).if
                                  (((unsupported)).apply)
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xwrapped_attr)) ((xkey)))) ((((unsupported)).apply ((xwrapper_attr)) ((xkey)))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xwrapper).x__wrapped__)) ((xwrapped)))
                x_default_update.write
                  [xself]
                    memory > xwrapper
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                        (((unsupported)).apply (((xf).xattr)) ("This is also a test"))
                        (((unsupported)).apply (((xf).x__wrapped__)) ("This is a bald faced lie"))
                        xwrapper.write
                          [xb]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xfunctools).xupdate_wrapper)).apply ((xwrapper)) ((xf)))
                        (((unsupported)).apply ((((unsupported)).apply ((xwrapper)) ((xf)))))
                xtest_default_update.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xwrapper)) ((xf)))) (((((xself).x_default_update)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_wrapper)).apply ((xwrapper)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xwrapper).x__wrapped__)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__name__)) ("f"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__qualname__)) (((xf).x__qualname__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).xattr)) ("This is also a test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xwrapper).x__annotations__)) ("a"))) ("This is a new annotation"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("b") (((xwrapper).x__annotations__)))
                xtest_default_update_doc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xwrapper)) ((xf)))) (((((xself).x_default_update)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__doc__)) ("This is a test"))
                xtest_no_update.write
                  [xself]
                    memory > xwrapper
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              seq
                                unsupported
                        (((unsupported)).apply (((xf).xattr)) ("This is also a test"))
                        xwrapper.write
                          []
                            seq > @
                        bogusForceDataize.write ((((xfunctools).xupdate_wrapper)).apply ((xwrapper)) ((xf)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_wrapper)).apply ((xwrapper)) ((xf)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__name__)) ("wrapper"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xwrapper).x__qualname__)) (((xf).x__qualname__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__doc__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__annotations__)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xwrapper)) ("attr"))))
                xtest_selective_update.write
                  [xself]
                    memory > xwrapper
                    memory > xupdate
                    memory > xassign
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                        (((unsupported)).apply (((xf).xattr)) ("This is a different test"))
                        (((unsupported)).apply (((xf).xdict_attr)) ((((unsupported)).apply ((xdict)) (1) (2) (3))))
                        xwrapper.write
                          []
                            seq > @
                        (((unsupported)).apply (((xwrapper).xdict_attr)) ((((unsupported)).apply)))
                        xassign.write (((unsupported)).apply ("attr"))
                        xupdate.write (((unsupported)).apply ("dict_attr"))
                        bogusForceDataize.write ((((xfunctools).xupdate_wrapper)).apply ((xwrapper)) ((xf)) ((xassign)) ((xupdate)))
                        bogusForceDataize.write ((((xself).xcheck_wrapper)).apply ((xwrapper)) ((xf)) ((xassign)) ((xupdate)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__name__)) ("wrapper"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xwrapper).x__qualname__)) (((xf).x__qualname__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__doc__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).xattr)) ("This is a different test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).xdict_attr)) (((xf).xdict_attr)))
                xtest_missing_attributes.write
                  [xself]
                    memory > xwrapper
                    memory > xupdate
                    memory > xassign
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                        xwrapper.write
                          []
                            seq > @
                        (((unsupported)).apply (((xwrapper).xdict_attr)) ((((unsupported)).apply)))
                        xassign.write (((unsupported)).apply ("attr"))
                        xupdate.write (((unsupported)).apply ("dict_attr"))
                        bogusForceDataize.write ((((xfunctools).xupdate_wrapper)).apply ((xwrapper)) ((xf)) ((xassign)) ((xupdate)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("attr") (((xwrapper).x__dict__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).xdict_attr)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (((xwrapper).xdict_attr)))))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xfunctools).xupdate_wrapper)).apply ((xwrapper)) ((xf)) ((xassign)) ((xupdate)))
                        (((unsupported)).apply (((xwrapper).xdict_attr)) (2))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write ((((xfunctools).xupdate_wrapper)).apply ((xwrapper)) ((xf)) ((xassign)) ((xupdate)))
                xtest_builtin_update.write
                  [xself]
                    memory > xwrapper
                    seq > @
                      (((unsupported)).apply)
                        xwrapper.write
                          []
                            seq > @
                        bogusForceDataize.write ((((xfunctools).xupdate_wrapper)).apply ((xwrapper)) ((xmax)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__name__)) ("max"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xwrapper).x__doc__).xstartswith)).apply ("max("))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__annotations__)) ((((unsupported)).apply)))
            (((unsupported)).apply ((xTestUpdateWrapper)))
              seq
                x_default_update.write
                  [xself]
                    memory > xwrapper
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              seq
                                unsupported
                        (((unsupported)).apply (((xf).xattr)) ("This is also a test"))
                        (((unsupported)).apply (((xf).x__wrapped__)) ("This is still a bald faced lie"))
                        xwrapper.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xwrapper)) ((xf)))))
                xtest_default_update.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xwrapper)) ((xf)))) (((((xself).x_default_update)).apply)))
                        bogusForceDataize.write ((((xself).xcheck_wrapper)).apply ((xwrapper)) ((xf)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__name__)) ("f"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__qualname__)) (((xf).x__qualname__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).xattr)) ("This is also a test"))
                xtest_default_update_doc.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xwrapper)) ((x_)))) (((((xself).x_default_update)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__doc__)) ("This is a test"))
                xtest_no_update.write
                  [xself]
                    memory > xwrapper
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              seq
                                unsupported
                        (((unsupported)).apply (((xf).xattr)) ("This is also a test"))
                        xwrapper.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_wrapper)).apply ((xwrapper)) ((xf)) ((((unsupported)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__name__)) ("wrapper"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xwrapper).x__qualname__)) (((xf).x__qualname__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__doc__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xwrapper)) ("attr"))))
                xtest_selective_update.write
                  [xself]
                    memory > xassign
                    memory > xadd_dict_attr
                    memory > xf
                    memory > xupdate
                    memory > xwrapper
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                        (((unsupported)).apply (((xf).xattr)) ("This is a different test"))
                        (((unsupported)).apply (((xf).xdict_attr)) ((((unsupported)).apply ((xdict)) (1) (2) (3))))
                        xadd_dict_attr.write
                          [xf]
                            seq > @
                              seq
                                (((unsupported)).apply (((xf).xdict_attr)) ((((unsupported)).apply)))
                                (((unsupported)).apply ((xf)))
                        xassign.write (((unsupported)).apply ("attr"))
                        xupdate.write (((unsupported)).apply ("dict_attr"))
                        xwrapper.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xcheck_wrapper)).apply ((xwrapper)) ((xf)) ((xassign)) ((xupdate)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__name__)) ("wrapper"))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xwrapper).x__qualname__)) (((xf).x__qualname__)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).x__doc__)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).xattr)) ("This is a different test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xwrapper).xdict_attr)) (((xf).xdict_attr)))
            (((unsupported)).apply)
              seq
                xtest_reduce.write
                  [xself]
                    memory > x__iter__
                    memory > x__getitem__
                    memory > x__init__
                    memory > xadd
                    memory > x__len__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xmax]
                                seq > @
                                  seq
                                    (((unsupported)).apply (((xself).xmax)) ((xmax)))
                                    (((unsupported)).apply (((xself).xsofar)) ((((unsupported)).apply)))
                            x__len__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply ((((xlen)).apply (((xself).xsofar)))))
                            x__getitem__.write
                              [xself xi]
                                memory > xn
                                seq > @
                                  seq
                                    ((((unsupported)).apply (0) ((xi)) (((xself).xmax))).not).if
                                      (((unsupported)).apply ((xIndexError)))
                                    xn.write (((xlen)).apply (((xself).xsofar)))
                                    while.
                                      ((xn).leq (xi))
                                      [unused]
                                        seq > @
                                          seq
                                            bogusForceDataize.write (((((xself).xsofar).xappend)).apply (((xn).mul (xn))))
                                            (((unsupported)).apply ((xn)) (2))
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xsofar)) ((xi)))))
                        xadd.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply (((xx).add (xy))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((unsupported)).apply ("a") ("b") ("c"))) (""))) ("abc"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((unsupported)).apply ((((unsupported)).apply ("a") ("c"))) ((((unsupported)).apply)) ((((unsupported)).apply ("d") ("w"))))) ((((unsupported)).apply)))) ((((unsupported)).apply ("a") ("c") ("d") ("w"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((((unsupported)).apply (((xx).mul (xy))))) ((((xrange)).apply (2) (8))) (1))) (5040))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((((unsupported)).apply (((xx).mul (xy))))) ((((xrange)).apply (2) (21))) (1))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((xSquares)).apply (10))))) (285))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((xSquares)).apply (10))) (0))) (285))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((xSquares)).apply (0))) (0))) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xreduce)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xreduce)) (42) (42))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xreduce)) (42) (42) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply (42) ("1"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply (42) ("") ("1"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xreduce)) (42) ((((unsupported)).apply (42) (42))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xreduce)) ((xadd)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xreduce)) ((xadd)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xreduce)) ((xadd)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xreduce)) ((xadd)) ((((xobject)).apply)))
                        (((unsupported)).apply)
                          x__iter__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply ((xRuntimeError)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xRuntimeError)) (((xself).xreduce)) ((xadd)) ((((xTestFailingIter)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((unsupported)).apply)) ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((unsupported)).apply)) (42))) (42))
                        (((unsupported)).apply)
                          x__getitem__.write
                            [xself xindex]
                              seq > @
                                (((unsupported)).apply ((xValueError)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xreduce)) (42) ((((xBadSeq)).apply)))
                xtest_iterator_usage.write
                  [xself]
                    memory > xd
                    memory > x__getitem__
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xn]
                                seq > @
                                  (((unsupported)).apply (((xself).xn)) ((xn)))
                            x__getitem__.write
                              [xself xi]
                                seq > @
                                  (((unsupported)).apply (0) ((xi)) (((xself).xn))).if
                                    (((unsupported)).apply ((xi)))
                                    (((unsupported)).apply ((xIndexError)))
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((xSequenceClass)).apply (5))))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((xSequenceClass)).apply (5))) (42))) (52))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xreduce)) ((xadd)) ((((xSequenceClass)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((xSequenceClass)).apply (0))) (42))) (42))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((xSequenceClass)).apply (1))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((((xSequenceClass)).apply (1))) (42))) (42))
                        xd.write (((unsupported)).apply ("one") (1) ("two") (2) ("three") (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xself).xreduce)).apply ((xadd)) ((xd)))) (((("".xjoin)).apply (((((xd).xkeys)).apply)))))
            (((unsupported)).apply ((xTestReduce)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xc_functools)) ("requires the C _functools module"))))
              (xc_functools).if
                xreduce.write ((xc_functools).xreduce)
            (((unsupported)).apply ((xTestReduce)) (((xunittest).xTestCase)))
              xreduce.write (((xstaticmethod)).apply (((xpy_functools).xreduce)))
            (((unsupported)).apply)
              seq
                xtest_cmp_to_key.write
                  [xself]
                    memory > xcmp1
                    memory > xcmp2
                    memory > xkey
                    seq > @
                      seq
                        xcmp1.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply ((((xx).greater (xy)).sub ((xx).less (xy)))))
                        xkey.write ((((xself).xcmp_to_key)).apply ((xcmp1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xkey)).apply (3))) ((((xkey)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xkey)).apply (3))) ((((xkey)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertGreaterEqual)).apply ((((xkey)).apply (3))) ((((xkey)).apply (3))))
                        xcmp2.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply (((((xint)).apply ((xx))).sub (((xint)).apply ((xy))))))
                        xkey.write ((((xself).xcmp_to_key)).apply ((xcmp2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xkey)).apply (4.0))) ((((xkey)).apply ("4"))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((((xkey)).apply (2))) ((((xkey)).apply ("35"))))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((xkey)).apply (2))) ((((xkey)).apply ("35"))))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((xkey)).apply (2))) ((((xkey)).apply ("35"))))
                xtest_cmp_to_key_arguments.write
                  [xself]
                    memory > xcmp1
                    memory > xkey
                    seq > @
                      seq
                        xcmp1.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply ((((xx).greater (xy)).sub ((xx).less (xy)))))
                        xkey.write (((unsupported)).apply (((xself).xcmp_to_key)) ((xcmp1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xkey)) (3))) ((((unsupported)).apply ((xkey)) (3))))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((((unsupported)).apply ((xkey)) (3))) ((((unsupported)).apply ((xkey)) (1))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) ((xAttributeError)))))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xTypeError)) ((xAttributeError)))))))
                          unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          xkey.write ((((xself).xcmp_to_key)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          xkey.write ((((xself).xcmp_to_key)).apply ((xcmp1)) ("None: is there a None literal in the EO language?"))
                        xkey.write ((((xself).xcmp_to_key)).apply ((xcmp1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xkey)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xkey)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))
                xtest_bad_cmp.write
                  [xself]
                    memory > x__lt__
                    memory > xcmp1
                    memory > xkey
                    seq > @
                      seq
                        xcmp1.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply ((xZeroDivisionError)))
                        xkey.write ((((xself).xcmp_to_key)).apply ((xcmp1)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          unsupported
                        (((unsupported)).apply)
                          x__lt__.write
                            [xself xother]
                              seq > @
                                (((unsupported)).apply ((xZeroDivisionError)))
                        xcmp1.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply ((((xBadCmp)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xZeroDivisionError)))))
                          unsupported
                xtest_obj_field.write
                  [xself]
                    memory > xcmp1
                    memory > xkey
                    seq > @
                      seq
                        xcmp1.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply ((((xx).greater (xy)).sub ((xx).less (xy)))))
                        xkey.write (((unsupported)).apply (((xself).xcmp_to_key)) ((xcmp1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xkey)).apply (50)).xobj)) (50))
                xtest_sort_int.write
                  [xself]
                    memory > xmycmp
                    seq > @
                      seq
                        xmycmp.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply (((xy).sub (xx))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsorted)) ((((xrange)).apply (5))) (((((xself).xcmp_to_key)).apply ((xmycmp)))))) ((((unsupported)).apply (4) (3) (2) (1) (0))))
                xtest_sort_int_str.write
                  [xself]
                    memory > xmycmp
                    memory > xvalues
                    seq > @
                      seq
                        xmycmp.write
                          [xx xy]
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((((xint)).apply ((xx)))) ((((xint)).apply ((xy)))))))
                                (((unsupported)).apply ((((xx).greater (xy)).sub ((xx).less (xy)))))
                        xvalues.write (((unsupported)).apply (5) ("3") (7) (2) ("0") ("1") (4) ("10") (1))
                        xvalues.write (((unsupported)).apply ((xsorted)) ((xvalues)) (((((xself).xcmp_to_key)).apply ((xmycmp)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xint)).apply ((xvalue)))) ((xvalue)) ((xvalues)))) ((((unsupported)).apply (0) (1) (1) (2) (3) (4) (5) (7) (10))))
                xtest_hash.write
                  [xself]
                    memory > xk
                    memory > xmycmp
                    memory > xkey
                    seq > @
                      seq
                        xmycmp.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply (((xy).sub (xx))))
                        xkey.write ((((xself).xcmp_to_key)).apply ((xmycmp)))
                        xk.write (((xkey)).apply (10))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xhash)) ((xk)))
                        bogusForceDataize.write ((((xself).xassertNotIsInstance)).apply ((xk)) ((((xcollections).xabc).xHashable)))
            (((unsupported)).apply ((xTestCmpToKey)) (((xunittest).xTestCase)) (((((xunittest).xskipUnless)).apply ((xc_functools)) ("requires the C _functools module"))))
              (xc_functools).if
                xcmp_to_key.write ((xc_functools).xcmp_to_key)
            (((unsupported)).apply ((xTestCmpToKey)) (((xunittest).xTestCase)))
              xcmp_to_key.write (((xstaticmethod)).apply (((xpy_functools).xcmp_to_key)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_total_ordering_lt.write
                  [xself]
                    memory > x__eq__
                    memory > x__lt__
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__lt__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xvalue).less ((xother).xvalue))))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).less (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).greater (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xA)).apply (1)).greater (((xA)).apply (2)))))
                xtest_total_ordering_le.write
                  [xself]
                    memory > x__eq__
                    memory > x__le__
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__le__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xvalue).leq ((xother).xvalue))))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).less (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).greater (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xA)).apply (1)).geq (((xA)).apply (2)))))
                xtest_total_ordering_gt.write
                  [xself]
                    memory > x__eq__
                    memory > x__init__
                    memory > x__gt__
                    seq > @
                      seq
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__gt__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xvalue).greater ((xother).xvalue))))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).less (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).greater (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xA)).apply (2)).less (((xA)).apply (1)))))
                xtest_total_ordering_ge.write
                  [xself]
                    memory > x__eq__
                    memory > x__ge__
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__ge__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xvalue).geq ((xother).xvalue))))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).less (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).greater (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xA)).apply (2)).leq (((xA)).apply (1)))))
                xtest_total_ordering_no_overwrite.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)) (((xfunctools).xtotal_ordering)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).less (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).greater (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (1)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (1)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).leq (((xA)).apply (2)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA)).apply (2)).geq (((xA)).apply (2)))))
                xtest_no_operations_defined.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                xtest_type_error_when_not_implemented.write
                  [xself]
                    memory > x__eq__
                    memory > xb
                    memory > x__gt__
                    memory > x__init__
                    memory > x__le__
                    memory > x__lt__
                    memory > x__ge__
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) ((xImplementsLessThan))).if
                                      (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                                    (((unsupported)).apply (FALSE))
                            x__lt__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) ((xImplementsLessThan))).if
                                      (((unsupported)).apply ((((xself).xvalue).less ((xother).xvalue))))
                                    (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) ((xImplementsGreaterThan))).if
                                      (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                                    (((unsupported)).apply (FALSE))
                            x__gt__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) ((xImplementsGreaterThan))).if
                                      (((unsupported)).apply ((((xself).xvalue).greater ((xother).xvalue))))
                                    (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) ((xImplementsLessThanEqualTo))).if
                                      (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                                    (((unsupported)).apply (FALSE))
                            x__le__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) ((xImplementsLessThanEqualTo))).if
                                      (((unsupported)).apply ((((xself).xvalue).leq ((xother).xvalue))))
                                    (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) ((xImplementsGreaterThanEqualTo))).if
                                      (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                                    (((unsupported)).apply (FALSE))
                            x__ge__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) ((xImplementsGreaterThanEqualTo))).if
                                      (((unsupported)).apply ((((xself).xvalue).geq ((xother).xvalue))))
                                    (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply (((xfunctools).xtotal_ordering)))
                          seq
                            x__init__.write
                              [xself xvalue]
                                seq > @
                                  (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xisinstance)).apply ((xother)) ((xComparatorNotImplemented))).if
                                      (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
                                    (((unsupported)).apply (FALSE))
                            x__lt__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((xNotImplemented)))
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("LT < 1"))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("LT < LE"))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("LT < GT"))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("LE <= LT"))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("LE <= GE"))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("GT > GE"))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("GT > LT"))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("GE >= GT"))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("GE >= LE"))) (((((xself).xassertRaises)).apply ((xTypeError)))))
                          unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("GE when equal"))))
                          seq
                            xa.write (((xComparatorNotImplemented)).apply (8))
                            xb.write (((xComparatorNotImplemented)).apply (8))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              unsupported
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("LE when equal"))))
                          seq
                            xa.write (((xComparatorNotImplemented)).apply (9))
                            xb.write (((xComparatorNotImplemented)).apply (9))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((xb)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                              unsupported
                xtest_pickle.write
                  [xself]
                    memory > xmethod
                    memory > xmethod_copy
                    seq > @
                      (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                        (((unsupported)).apply ((xname)) ((((unsupported)).apply ("__lt__") ("__gt__") ("__le__") ("__ge__"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xname)) ((xproto)))))
                            seq
                              xmethod.write (((xgetattr)).apply ((xOrderable_LT)) ((xname)))
                              xmethod_copy.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xmethod)) ((xproto)))))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((xmethod_copy)) ((xmethod)))
            (((unsupported)).apply (((xfunctools).xtotal_ordering)))
              seq
                x__init__.write
                  [xself xvalue]
                    seq > @
                      (((unsupported)).apply (((xself).xvalue)) ((xvalue)))
                x__lt__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xself).xvalue).less ((xother).xvalue))))
                x__eq__.write
                  [xself xother]
                    seq > @
                      (((unsupported)).apply ((((xself).xvalue).eq ((xother).xvalue))))
            (((unsupported)).apply)
              seq
                xtest_lru.write
                  [xself]
                    memory > xexpected
                    memory > xorig
                    memory > xf_cnt
                    memory > xf
                    memory > xactual
                    memory > xdomain
                    seq > @
                      seq
                        xorig.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply (((3.mul (xx)).add (xy))))
                        xf.write (((((unsupported)).apply ((((xself).xmodule).xlru_cache)) (20))).apply ((xorig)))
                        (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmaxsize)) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhits)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmisses)) (0))
                        xdomain.write (((xrange)).apply (5))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (1000))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xx)) ((xy)))) ((((unsupported)).apply ((((xchoice)).apply ((xdomain)))) ((((xchoice)).apply ((xdomain)))))))
                            xactual.write (((xf)).apply ((xx)) ((xy)))
                            xexpected.write (((xorig)).apply ((xx)) ((xy)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual)) ((xexpected)))
                        (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xhits).greater (xmisses))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhits).add (xmisses))) (1000))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) (20))
                        bogusForceDataize.write ((((xf).xcache_clear)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhits)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmisses)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) (0))
                        bogusForceDataize.write (((xf)).apply ((xx)) ((xy)))
                        (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhits)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmisses)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) (1))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xf).x__wrapped__)) ((xorig)))
                        bogusForceDataize.write ((((xf).x__wrapped__)).apply ((xx)) ((xy)))
                        (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhits)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmisses)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) (1))
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xf_cnt)) (2))
                                (((unsupported)).apply (21))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xf).xcache_info)).apply).xmaxsize)) (0))
                        xf_cnt.write 1
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf_cnt)) (5))
                        (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhits)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmisses)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) (0))
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xf_cnt)) (2))
                                (((unsupported)).apply (21))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xf).xcache_info)).apply).xmaxsize)) (1))
                        xf_cnt.write 1
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (5))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply)) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf_cnt)) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhits)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmisses)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) (1))
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xf_cnt)) (2))
                                (((unsupported)).apply (((xx).mul 10)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xf).xcache_info)).apply).xmaxsize)) (2))
                        xf_cnt.write 1
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (7) (9) (7) (9) (7) (9) (8) (8) (8) (9) (9) (9) (8) (8) (8) (7))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xx)))) (((xx).mul 10)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xf_cnt)) (4))
                        (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhits)) (12))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmisses)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) (2))
                xtest_lru_no_args.write
                  [xself]
                    memory > xsquare
                    seq > @
                      seq
                        xsquare.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((unsupported)).apply ((xx)) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply ((((xmap)).apply ((xsquare)) ((((unsupported)).apply (10) (20) (10))))))) ((((unsupported)).apply (100) (400) (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsquare).xcache_info)).apply).xhits)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsquare).xcache_info)).apply).xmisses)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsquare).xcache_info)).apply).xmaxsize)) (128))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsquare).xcache_info)).apply).xcurrsize)) (2))
                xtest_lru_bug_35780.write
                  [xself]
                    memory > xonce
                    memory > xf
                    seq > @
                      seq
                        xonce.write TRUE
                        xf.write
                          [xx]
                            memory > xonce
                            memory > xrv
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                xrv.write ".{x}."
                                (((xx).eq 20).and (xonce)).if
                                  seq
                                    xonce.write FALSE
                                    xrv.write (((xf)).apply ((xx)))
                                (((unsupported)).apply ((xrv)))
                        (((unsupported)).apply ((xx)) ((((xrange)).apply (15))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xx)))) (".{x}."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xf).xcache_info)).apply).xcurrsize)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply (20))) (".20."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xf).xcache_info)).apply).xcurrsize)) (10))
                xtest_lru_bug_36650.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                        bogusForceDataize.write (((xf)).apply (0))
                        bogusForceDataize.write (((xf)).apply (0) ((((unsupported)).apply ((((unsupported)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xf).xcache_info)).apply).xhits)) (1))
                xtest_lru_hash_only_once.write
                  [xself]
                    memory > xmock_int
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xx).mul 3).add (xy))))
                        xmock_int.write (((((xunittest).xmock).xMock)).apply)
                        (((unsupported)).apply (((xmock_int).x__mul__)) ((((unsupported)).apply ((((xunittest).xmock).xMock)) (15))))
                        (((unsupported)).apply (((xmock_int).x__hash__)) ((((unsupported)).apply ((((xunittest).xmock).xMock)) (999))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xmock_int)) (1))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmock_int).x__hash__).xcall_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xcache_info)).apply)) ((((unsupported)).apply (0) (1) (1) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xmock_int)) (1))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmock_int).x__hash__).xcall_count)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xcache_info)).apply)) ((((unsupported)).apply (1) (1) (1) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply (6) (2))) (20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmock_int).x__hash__).xcall_count)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xcache_info)).apply)) ((((unsupported)).apply (1) (2) (1) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xmock_int)) (1))) (16))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xmock_int).x__hash__).xcall_count)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xcache_info)).apply)) ((((unsupported)).apply (1) (3) (1) (1))))
                xtest_lru_reentrancy_with_len.write
                  [xself]
                    memory > xold_len
                    seq > @
                      seq
                        xold_len.write ((xbuiltins).xlen)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xbuiltins).xlen)) ((((((((xself).xmodule).xlru_cache)).apply (4))).apply ((xlen)))))
                            (((unsupported)).apply ((xi)) ((((unsupported)).apply (0) (0) (1) (2) (3) (3) (4) (5) (6) (1) (7) (2) (1))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ("abcdefghijklmn") ((((unsupported)).apply ((xi)))))))) ((xi)))
                          (((unsupported)).apply (((xbuiltins).xlen)) ((xold_len)))
                xtest_lru_star_arg_handling.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xargs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply (1) (2))) ((((unsupported)).apply (1) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((((unsupported)).apply (1) (2))))) ((((unsupported)).apply ((((unsupported)).apply (1) (2))))))
                xtest_lru_type_error.write
                  [xself]
                    memory > xlimited_cache
                    memory > xinfinite_cache
                    seq > @
                      seq
                        xinfinite_cache.write
                          [xo]
                            seq > @
                              (((unsupported)).apply)
                        xlimited_cache.write
                          [xo]
                            seq > @
                              (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xinfinite_cache)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write (((xlimited_cache)).apply ((((unsupported)).apply)))
                xtest_lru_with_maxsize_none.write
                  [xself]
                    memory > xfib
                    seq > @
                      seq
                        xfib.write
                          [xn]
                            seq > @
                              (((unsupported)).apply)
                                ((xn).less 2).if
                                  (((unsupported)).apply ((xn)))
                                (((unsupported)).apply (((((xfib)).apply (((xn).sub 1))).add (((xfib)).apply (((xn).sub 2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xfib)).apply ((xn)))) ((xn)) ((((xrange)).apply (16))))) ((((unsupported)).apply (0) (1) (1) (2) (3) (5) (8) (13) (21) (34) (55) (89) (144) (233) (377) (610))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfib).xcache_info)).apply)) ((((unsupported)).apply ((((xself).xmodule).x_CacheInfo)) (28) (16) ("None: is there a None literal in the EO language?") (16))))
                        bogusForceDataize.write ((((xfib).xcache_clear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfib).xcache_info)).apply)) ((((unsupported)).apply ((((xself).xmodule).x_CacheInfo)) (0) (0) ("None: is there a None literal in the EO language?") (0))))
                xtest_lru_with_maxsize_negative.write
                  [xself]
                    memory > xeq
                    seq > @
                      seq
                        xeq.write
                          [xn]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((xn)))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply (0) (1))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((xeq)).apply ((xn)))) ((xn)) ((((xrange)).apply (150))))) ((((xlist)).apply ((((xrange)).apply (150))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xeq).xcache_info)).apply)) ((((unsupported)).apply ((((xself).xmodule).x_CacheInfo)) (0) (300) (0) (0))))
                xtest_lru_with_exceptions.write
                  [xself]
                    memory > xfunc
                    seq > @
                      (((unsupported)).apply ((xmaxsize)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (128))))
                        seq
                          xfunc.write
                            [xi]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ((((unsupported)).apply ("abc") ((xi)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (0))) ("a"))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))) ((xcm)))
                            bogusForceDataize.write (((xfunc)).apply (15))
                          bogusForceDataize.write ((((xself).xassertIsNone)).apply ((((xcm).xexception).x__context__)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))))
                            bogusForceDataize.write (((xfunc)).apply (15))
                xtest_lru_with_types.write
                  [xself]
                    memory > xsquare
                    seq > @
                      (((unsupported)).apply ((xmaxsize)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (128))))
                        seq
                          xsquare.write
                            [xx]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (((xx).mul (xx))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsquare)).apply (3))) (9))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xsquare)).apply (3))))) ((((xtype)).apply (9))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsquare)).apply (3.0))) (9.0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((xsquare)).apply (3.0))))) ((((xtype)).apply (9.0))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsquare)) (3))) (9))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((xsquare)) (3))))) ((((xtype)).apply (9))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xsquare)) (3.0))) (9.0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtype)).apply ((((unsupported)).apply ((xsquare)) (3.0))))) ((((xtype)).apply (9.0))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsquare).xcache_info)).apply).xhits)) (4))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xsquare).xcache_info)).apply).xmisses)) (4))
                xtest_lru_with_keyword_args.write
                  [xself]
                    memory > xfib
                    seq > @
                      seq
                        xfib.write
                          [xn]
                            seq > @
                              (((unsupported)).apply)
                                ((xn).less 2).if
                                  (((unsupported)).apply ((xn)))
                                (((unsupported)).apply (((((unsupported)).apply ((xfib)) (((xn).sub 1))).add (((unsupported)).apply ((xfib)) (((xn).sub 2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfib)) ((xnumber)))) ((xnumber)) ((((xrange)).apply (16))))) ((((unsupported)).apply (0) (1) (1) (2) (3) (5) (8) (13) (21) (34) (55) (89) (144) (233) (377) (610))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfib).xcache_info)).apply)) ((((unsupported)).apply ((((xself).xmodule).x_CacheInfo)) (28) (16) (128) (16))))
                        bogusForceDataize.write ((((xfib).xcache_clear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfib).xcache_info)).apply)) ((((unsupported)).apply ((((xself).xmodule).x_CacheInfo)) (0) (0) (128) (0))))
                xtest_lru_with_keyword_args_maxsize_none.write
                  [xself]
                    memory > xfib
                    seq > @
                      seq
                        xfib.write
                          [xn]
                            seq > @
                              (((unsupported)).apply)
                                ((xn).less 2).if
                                  (((unsupported)).apply ((xn)))
                                (((unsupported)).apply (((((unsupported)).apply ((xfib)) (((xn).sub 1))).add (((unsupported)).apply ((xfib)) (((xn).sub 2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfib)) ((xnumber)))) ((xnumber)) ((((xrange)).apply (16))))) ((((unsupported)).apply (0) (1) (1) (2) (3) (5) (8) (13) (21) (34) (55) (89) (144) (233) (377) (610))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfib).xcache_info)).apply)) ((((unsupported)).apply ((((xself).xmodule).x_CacheInfo)) (28) (16) ("None: is there a None literal in the EO language?") (16))))
                        bogusForceDataize.write ((((xfib).xcache_clear)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfib).xcache_info)).apply)) ((((unsupported)).apply ((((xself).xmodule).x_CacheInfo)) (0) (0) ("None: is there a None literal in the EO language?") (0))))
                xtest_kwargs_order.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xlist)).apply (((((xkwargs).xitems)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xf)) (1) (2))) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") (2))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xf)) (2) (1))) ((((unsupported)).apply ((((unsupported)).apply ("b") (2))) ((((unsupported)).apply ("a") (1))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xcache_info)).apply)) ((((unsupported)).apply ((((xself).xmodule).x_CacheInfo)) (0) (2) (10) (2))))
                xtest_lru_cache_decoration.write
                  [xself]
                    memory > xg
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xzomg]
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                (((unsupported)).apply (43))
                        xg.write (((((((xself).xmodule).xlru_cache)).apply)).apply ((xf)))
                        (((unsupported)).apply ((xattr)) ((((xself).xmodule).xWRAPPER_ASSIGNMENTS)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xgetattr)).apply ((xg)) ((xattr)))) ((((xgetattr)).apply ((xf)) ((xattr)))))
                xtest_lru_cache_threaded.write
                  [xself]
                    memory > xorig
                    memory > xclear
                    memory > xthreads
                    memory > xstart
                    memory > xf
                    memory > xfull
                    memory > xorig_si
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xn)) ((xm)))) ((((unsupported)).apply (5) (11))))
                        xorig.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply (((3.mul (xx)).add (xy))))
                        xf.write (((((unsupported)).apply ((((xself).xmodule).xlru_cache)) (((xn).mul (xm))))).apply ((xorig)))
                        (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) (0))
                        xstart.write ((((xthreading).xEvent)).apply)
                        xfull.write
                          [xk]
                            seq > @
                              seq
                                bogusForceDataize.write ((((xstart).xwait)).apply (10))
                                (((unsupported)).apply ((x_)) ((((xrange)).apply ((xm)))))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xk)) (0))) ((((xorig)).apply ((xk)) (0))))
                        xclear.write
                          []
                            seq > @
                              seq
                                bogusForceDataize.write ((((xstart).xwait)).apply (10))
                                (((unsupported)).apply ((x_)) ((((xrange)).apply ((2.mul (xm))))))
                                  bogusForceDataize.write ((((xf).xcache_clear)).apply)
                        xorig_si.write ((((xsys).xgetswitchinterval)).apply)
                        bogusForceDataize.write ((((xsupport).xsetswitchinterval)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply)
                          seq
                            xthreads.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((xfull)) ((((unsupported)).apply ((xk)))))) ((xk)) ((((xrange)).apply ((xn)))))
                            (((unsupported)).apply (((((xsupport).xstart_threads)).apply ((xthreads)))))
                              bogusForceDataize.write ((((xstart).xset)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xhits)) ((xmisses)) ((xmaxsize)) ((xcurrsize)))) (((((xf).xcache_info)).apply)))
                            (((unsupported)).apply (((xself).xmodule)) ((xpy_functools))).if
                              seq
                                bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xmisses)) ((xn)))
                                bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((xhits)) ((((xm).mul (xn)).sub (xmisses))))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmisses)) ((xn)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xhits)) ((((xm).mul (xn)).sub (xmisses))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcurrsize)) ((xn)))
                            xthreads.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((xclear)))))
                            (((unsupported)).apply ((xthreads)) ((((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((xfull)) ((((unsupported)).apply ((xk)))))) ((xk)) ((((xrange)).apply ((xn)))))))
                            bogusForceDataize.write ((((xstart).xclear)).apply)
                            (((unsupported)).apply (((((xsupport).xstart_threads)).apply ((xthreads)))))
                              bogusForceDataize.write ((((xstart).xset)).apply)
                          bogusForceDataize.write ((((xsys).xsetswitchinterval)).apply ((xorig_si)))
                xtest_lru_cache_threaded2.write
                  [xself]
                    memory > xpause
                    memory > xthreads
                    memory > xstart
                    memory > xf
                    memory > xtest
                    memory > xstop
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply ((xn)) ((xm)))) ((((unsupported)).apply (5) (7))))
                        xstart.write ((((xthreading).xBarrier)).apply (((xn).add 1)))
                        xpause.write ((((xthreading).xBarrier)).apply (((xn).add 1)))
                        xstop.write ((((xthreading).xBarrier)).apply (((xn).add 1)))
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xpause).xwait)).apply (10))
                                (((unsupported)).apply ((3.mul (xx))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xcache_info)).apply)) ((((unsupported)).apply (0) (0) (((xm).mul (xn))) (0))))
                        xtest.write
                          []
                            seq > @
                              (((unsupported)).apply ((xi)) ((((xrange)).apply ((xm)))))
                                seq
                                  bogusForceDataize.write ((((xstart).xwait)).apply (10))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xi)))) ((3.mul (xi))))
                                  bogusForceDataize.write ((((xstop).xwait)).apply (10))
                        xthreads.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((xtest)))) ((xk)) ((((xrange)).apply ((xn)))))
                        (((unsupported)).apply (((((xsupport).xstart_threads)).apply ((xthreads)))))
                          (((unsupported)).apply ((xi)) ((((xrange)).apply ((xm)))))
                            seq
                              bogusForceDataize.write ((((xstart).xwait)).apply (10))
                              bogusForceDataize.write ((((xstop).xreset)).apply)
                              bogusForceDataize.write ((((xpause).xwait)).apply (10))
                              bogusForceDataize.write ((((xstart).xreset)).apply)
                              bogusForceDataize.write ((((xstop).xwait)).apply (10))
                              bogusForceDataize.write ((((xpause).xreset)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xcache_info)).apply)) ((((unsupported)).apply (0) ((((xi).add 1).mul (xn))) (((xm).mul (xn))) (((xi).add 1)))))
                xtest_lru_cache_threaded3.write
                  [xself]
                    memory > xtest
                    memory > xthreads
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                bogusForceDataize.write ((((xtime).xsleep)).apply ((((unsupported)).apply)))
                                (((unsupported)).apply ((3.mul (xx))))
                        xtest.write
                          [xi xx]
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xi)))))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xf)).apply ((xx)))) ((3.mul (xx))) ((xi)))
                        xthreads.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((xtest)) ((((unsupported)).apply ((xi)) ((xv)))))) ((((unsupported)).apply ((xi)) ((xv)))) ((((xenumerate)).apply ((((unsupported)).apply (1) (2) (2) (3) (2))))))
                        (((unsupported)).apply (((((xsupport).xstart_threads)).apply ((xthreads)))))
                xtest_need_for_rlock.write
                  [xself]
                    memory > x__eq__
                    memory > x__hash__
                    memory > xtest_func
                    memory > x__init__
                    seq > @
                      seq
                        xtest_func.write
                          [xx]
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                (((unsupported)).apply ((xx)))
                        (((unsupported)).apply)
                          seq
                            unsupported
                            x__init__.write
                              [xself xx]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)) ((xx)))
                            x__hash__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xx)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  seq
                                    (((xself).xx).eq 2).if
                                      bogusForceDataize.write (((xtest_func)).apply ((((xDoubleEq)).apply (1))))
                                    (((unsupported)).apply ((((xself).xx).eq ((xother).xx))))
                        bogusForceDataize.write (((xtest_func)).apply ((((xDoubleEq)).apply (1))))
                        bogusForceDataize.write (((xtest_func)).apply ((((xDoubleEq)).apply (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xtest_func)).apply ((((xDoubleEq)).apply (2))))) ((((xDoubleEq)).apply (2))))
                xtest_lru_method.write
                  [xself]
                    memory > xc
                    memory > xb
                    memory > xf_cnt
                    memory > xf
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((xint)))
                          seq
                            xf_cnt.write 1
                            xf.write
                              [xself xx]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xf_cnt)) (2))
                                    (((unsupported)).apply ((((xx).mul 10).add (xself))))
                        xa.write (((xX)).apply (5))
                        xb.write (((xX)).apply (5))
                        xc.write (((xX)).apply (7))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xX).xf).xcache_info)).apply)) ((((unsupported)).apply (0) (0) (2) (0))))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (1) (2) (2) (3) (1) (1) (1) (2) (3) (3))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xf)).apply ((xx)))) ((((xx).mul 10).add 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xa).xf_cnt)) (((xb).xf_cnt)) (((xc).xf_cnt)))) ((((unsupported)).apply (6) (0) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xX).xf).xcache_info)).apply)) ((((unsupported)).apply (4) (6) (2) (2))))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (1) (2) (1) (1) (1) (1) (3) (2) (2) (2))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xb).xf)).apply ((xx)))) ((((xx).mul 10).add 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xa).xf_cnt)) (((xb).xf_cnt)) (((xc).xf_cnt)))) ((((unsupported)).apply (6) (4) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xX).xf).xcache_info)).apply)) ((((unsupported)).apply (10) (10) (2) (2))))
                        (((unsupported)).apply ((xx)) ((((unsupported)).apply (2) (1) (1) (1) (1) (2) (1) (3) (2) (1))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xc).xf)).apply ((xx)))) ((((xx).mul 10).add 7)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xa).xf_cnt)) (((xb).xf_cnt)) (((xc).xf_cnt)))) ((((unsupported)).apply (6) (4) (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xX).xf).xcache_info)).apply)) ((((unsupported)).apply (15) (15) (2) (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xa).xf).xcache_info)).apply)) ((((((xX).xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xb).xf).xcache_info)).apply)) ((((((xX).xf).xcache_info)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xc).xf).xcache_info)).apply)) ((((((xX).xf).xcache_info)).apply)))
                xtest_pickle.write
                  [xself]
                    memory > xf_copy
                    memory > xcls
                    seq > @
                      seq
                        xcls.write ((xself).x__class__)
                        (((unsupported)).apply ((xf)) ((((unsupported)).apply ((((unsupported)).apply (((xcls).xcached_func)) (0))) (((xcls).xcached_meth)) (((xcls).xcached_staticmeth)))))
                          (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xproto)) ((xf)))))
                              seq
                                xf_copy.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xf)) ((xproto)))))
                                bogusForceDataize.write ((((xself).xassertIs)).apply ((xf_copy)) ((xf)))
                xtest_copy.write
                  [xself]
                    memory > xorig
                    memory > xpart
                    memory > xfuncs
                    memory > xcls
                    memory > xf_copy
                    seq > @
                      seq
                        xcls.write ((xself).x__class__)
                        xorig.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply (((3.mul (xx)).add (xy))))
                        xpart.write (((((xself).xmodule).xpartial)).apply ((xorig)) (2))
                        xfuncs.write (((unsupported)).apply ((((unsupported)).apply (((xcls).xcached_func)) (0))) (((xcls).xcached_meth)) (((xcls).xcached_staticmeth)) ((((((((xself).xmodule).xlru_cache)).apply (2))).apply ((xpart)))))
                        (((unsupported)).apply ((xf)) ((xfuncs)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xf)))))
                            seq
                              xf_copy.write ((((xcopy).xcopy)).apply ((xf)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((xf_copy)) ((xf)))
                xtest_deepcopy.write
                  [xself]
                    memory > xorig
                    memory > xpart
                    memory > xfuncs
                    memory > xcls
                    memory > xf_copy
                    seq > @
                      seq
                        xcls.write ((xself).x__class__)
                        xorig.write
                          [xx xy]
                            seq > @
                              (((unsupported)).apply (((3.mul (xx)).add (xy))))
                        xpart.write (((((xself).xmodule).xpartial)).apply ((xorig)) (2))
                        xfuncs.write (((unsupported)).apply ((((unsupported)).apply (((xcls).xcached_func)) (0))) (((xcls).xcached_meth)) (((xcls).xcached_staticmeth)) ((((((((xself).xmodule).xlru_cache)).apply (2))).apply ((xpart)))))
                        (((unsupported)).apply ((xf)) ((xfuncs)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xf)))))
                            seq
                              xf_copy.write ((((xcopy).xdeepcopy)).apply ((xf)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply ((xf_copy)) ((xf)))
            xpy_cached_func.write
              [xx xy]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply (((3.mul (xx)).add (xy))))
            xc_cached_func.write
              [xx xy]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply (((3.mul (xx)).add (xy))))
            (((unsupported)).apply ((xTestLRU)) (((xunittest).xTestCase)))
              seq
                xmodule.write (xpy_functools)
                xcached_func.write (((unsupported)).apply ((xpy_cached_func)))
                xcached_meth.write
                  [xself xx xy]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((3.mul (xx)).add (xy))))
                xcached_staticmeth.write
                  [xx xy]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((3.mul (xx)).add (xy))))
            (((unsupported)).apply ((xTestLRU)) (((xunittest).xTestCase)))
              seq
                xmodule.write (xc_functools)
                xcached_func.write (((unsupported)).apply ((xc_cached_func)))
                xcached_meth.write
                  [xself xx xy]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((3.mul (xx)).add (xy))))
                xcached_staticmeth.write
                  [xx xy]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((3.mul (xx)).add (xy))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_simple_overloads.write
                  [xself]
                    memory > xg_int
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        xg_int.write
                          [xi]
                            seq > @
                              (((unsupported)).apply ("integer"))
                        bogusForceDataize.write ((((xg).xregister)).apply ((xint)) ((xg_int)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ("str"))) ("base"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply (1))) ("integer"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((((unsupported)).apply (1) (2) (3))))) ("base"))
                xtest_mro.write
                  [xself]
                    memory > xg_B
                    memory > xg
                    memory > xg_A
                    seq > @
                      seq
                        xg.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xA)))
                        (((unsupported)).apply ((xA)))
                        (((unsupported)).apply ((xC)) ((xB)))
                        xg_A.write
                          [xa]
                            seq > @
                              (((unsupported)).apply ("A"))
                        xg_B.write
                          [xb]
                            seq > @
                              (((unsupported)).apply ("B"))
                        bogusForceDataize.write ((((xg).xregister)).apply ((xA)) ((xg_A)))
                        bogusForceDataize.write ((((xg).xregister)).apply ((xB)) ((xg_B)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((((xA)).apply)))) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((((xB)).apply)))) ("B"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((((xC)).apply)))) ("A"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((((xD)).apply)))) ("B"))
                xtest_register_decorator.write
                  [xself]
                    memory > xg_int
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        xg_int.write
                          [xi]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (("int %s".mod (((unsupported)).apply ((xi))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply (""))) ("base"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply (12))) ("int 12"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xg).xdispatch)).apply ((xint)))) ((xg_int)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xg).xdispatch)).apply ((xobject)))) (((((xg).xdispatch)).apply ((xstr)))))
                xtest_wrapping_attributes.write
                  [xself]
                    memory > xg
                    seq > @
                      seq
                        xg.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                                unsupported
                                (((unsupported)).apply ("Test"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xg).x__name__)) ("g"))
                        ((((xsys).xflags).xoptimize).less 2).if
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xg).x__doc__)) ("Simple test"))
                xtest_c_classes.write
                  [xself]
                    memory > x_
                    memory > xg
                    memory > xrnd
                    memory > xsubn
                    seq > @
                      (((unsupported)).apply)
                        xg.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        x_.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply (((xobj).xargs)))
                        xsubn.write ((((xdecimal).xSubnormal)).apply ("Exponent < Emin"))
                        xrnd.write ((((xdecimal).xRounded)).apply ("Number got rounded"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xsubn)))) ((((unsupported)).apply ("Exponent < Emin"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xrnd)))) ((((unsupported)).apply ("Number got rounded"))))
                        x_.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("Too small to care."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xsubn)))) ("Too small to care."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xrnd)))) ((((unsupported)).apply ("Number got rounded"))))
                xtest_compose_mro.write
                  [xself]
                    memory > x__call__
                    memory > xbases
                    memory > xm
                    memory > xmro
                    memory > xc
                    seq > @
                      seq
                        xc.write ((xcollections).xabc)
                        xmro.write ((xfunctools).x_compose_mro)
                        xbases.write (((unsupported)).apply (((xc).xSequence)) (((xc).xMutableMapping)) (((xc).xMapping)) (((xc).xSet)))
                        (((unsupported)).apply ((xhaystack)) ((((xpermutations)).apply ((xbases)))))
                          seq
                            xm.write (((xmro)).apply ((xdict)) ((xhaystack)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((((unsupported)).apply ((xdict)) (((xc).xMutableMapping)) (((xc).xMapping)) (((xc).xCollection)) (((xc).xSized)) (((xc).xIterable)) (((xc).xContainer)) ((xobject)))))
                        xbases.write (((unsupported)).apply (((xc).xContainer)) (((xc).xMapping)) (((xc).xMutableMapping)) (((xcollections).xOrderedDict)))
                        (((unsupported)).apply ((xhaystack)) ((((xpermutations)).apply ((xbases)))))
                          seq
                            xm.write (((xmro)).apply (((xcollections).xChainMap)) ((xhaystack)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((((unsupported)).apply (((xcollections).xChainMap)) (((xc).xMutableMapping)) (((xc).xMapping)) (((xc).xCollection)) (((xc).xSized)) (((xc).xIterable)) (((xc).xContainer)) ((xobject)))))
                        xbases.write (((unsupported)).apply (((xc).xContainer)) (((xc).xSized)) ((xstr)))
                        (((unsupported)).apply ((xhaystack)) ((((xpermutations)).apply ((xbases)))))
                          seq
                            xm.write (((xmro)).apply (((xcollections).xdefaultdict)) ((((unsupported)).apply (((xc).xSized)) (((xc).xContainer)) ((xstr)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((((unsupported)).apply (((xcollections).xdefaultdict)) ((xdict)) (((xc).xSized)) (((xc).xContainer)) ((xobject)))))
                        (((unsupported)).apply (((xcollections).xdefaultdict)))
                        bogusForceDataize.write (((((xc).xMutableSequence).xregister)).apply ((xD)))
                        xbases.write (((unsupported)).apply (((xc).xMutableSequence)) (((xc).xMutableMapping)))
                        (((unsupported)).apply ((xhaystack)) ((((xpermutations)).apply ((xbases)))))
                          seq
                            xm.write (((xmro)).apply ((xD)) ((xbases)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((((unsupported)).apply ((xD)) (((xc).xMutableSequence)) (((xc).xSequence)) (((xc).xReversible)) (((xcollections).xdefaultdict)) ((xdict)) (((xc).xMutableMapping)) (((xc).xMapping)) (((xc).xCollection)) (((xc).xSized)) (((xc).xIterable)) (((xc).xContainer)) ((xobject)))))
                        (((unsupported)).apply (((xcollections).xdefaultdict)))
                          x__call__.write
                            [xself]
                              seq > @
                        xbases.write (((unsupported)).apply (((xc).xSized)) (((xc).xCallable)) (((xc).xContainer)) (((xc).xMapping)))
                        (((unsupported)).apply ((xhaystack)) ((((xpermutations)).apply ((xbases)))))
                          seq
                            xm.write (((xmro)).apply ((xC)) ((xhaystack)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ((((unsupported)).apply ((xC)) (((xc).xCallable)) (((xcollections).xdefaultdict)) ((xdict)) (((xc).xMapping)) (((xc).xCollection)) (((xc).xSized)) (((xc).xIterable)) (((xc).xContainer)) ((xobject)))))
                xtest_register_abc.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xg
                    memory > xt
                    memory > xl
                    memory > xf
                    memory > xs
                    seq > @
                      seq
                        xc.write ((xcollections).xabc)
                        xd.write (((unsupported)).apply ("a") ("b"))
                        xl.write (((unsupported)).apply (1) (2) (3))
                        xs.write (((unsupported)).apply ((((xobject)).apply)) ("None: is there a None literal in the EO language?"))
                        xf.write (((xfrozenset)).apply ((xs)))
                        xt.write (((unsupported)).apply (1) (2) (3))
                        xg.write
                          [xobj]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("base"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("base"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("base"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("base"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("base"))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xSized)) ((((unsupported)).apply ("sized"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sized"))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xMutableMapping)) ((((unsupported)).apply ("mutablemapping"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("mutablemapping"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sized"))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xcollections).xChainMap)) ((((unsupported)).apply ("chainmap"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("mutablemapping"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sized"))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xMutableSequence)) ((((unsupported)).apply ("mutablesequence"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("mutablemapping"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("mutablesequence"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sized"))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xMutableSet)) ((((unsupported)).apply ("mutableset"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("mutablemapping"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("mutablesequence"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("mutableset"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sized"))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xMapping)) ((((unsupported)).apply ("mapping"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("mutablemapping"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("mutablesequence"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("mutableset"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sized"))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xSequence)) ((((unsupported)).apply ("sequence"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("mutablemapping"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("mutablesequence"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("mutableset"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("sized"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sequence"))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xSet)) ((((unsupported)).apply ("set"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("mutablemapping"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("mutablesequence"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("mutableset"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("set"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sequence"))
                        bogusForceDataize.write ((((xg).xregister)).apply ((xdict)) ((((unsupported)).apply ("dict"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("dict"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("mutablesequence"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("mutableset"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("set"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sequence"))
                        bogusForceDataize.write ((((xg).xregister)).apply ((xlist)) ((((unsupported)).apply ("list"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("dict"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("mutableset"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("set"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sequence"))
                        bogusForceDataize.write ((((xg).xregister)).apply ((xset)) ((((unsupported)).apply ("concrete-set"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("dict"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("concrete-set"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("set"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sequence"))
                        bogusForceDataize.write ((((xg).xregister)).apply ((xfrozenset)) ((((unsupported)).apply ("frozen-set"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("dict"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("concrete-set"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("frozen-set"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("sequence"))
                        bogusForceDataize.write ((((xg).xregister)).apply ((xtuple)) ((((unsupported)).apply ("tuple"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("dict"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xs)))) ("concrete-set"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xf)))) ("frozen-set"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xt)))) ("tuple"))
                xtest_c3_abc.write
                  [xself]
                    memory > xmany_abcs
                    memory > x__len__
                    memory > xmro
                    memory > xc
                    memory > x__call__
                    memory > xexpected
                    seq > @
                      seq
                        xc.write ((xcollections).xabc)
                        xmro.write ((xfunctools).x_c3_mro)
                        (((unsupported)).apply ((xobject)))
                        (((unsupported)).apply ((xA)))
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (1))
                        (((unsupported)).apply ((xobject)) ((((xc).xContainer).xregister)))
                        (((unsupported)).apply ((xobject)))
                        (((unsupported)).apply ((xD)) ((xC)) ((xB)))
                          x__call__.write
                            [xself]
                              seq > @
                        xexpected.write (((unsupported)).apply ((xX)) (((xc).xCallable)) ((xD)) ((xC)) (((xc).xContainer)) ((xB)) (((xc).xSized)) ((xA)) ((xobject)))
                        (((unsupported)).apply ((xabcs)) ((((xpermutations)).apply ((((unsupported)).apply (((xc).xSized)) (((xc).xCallable)) (((xc).xContainer)))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmro)) ((xX)) ((xabcs)))) ((xexpected)))
                        xmany_abcs.write (((unsupported)).apply (((xc).xMapping)) (((xc).xSized)) (((xc).xCallable)) (((xc).xContainer)) (((xc).xIterable)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmro)) ((xX)) ((xmany_abcs)))) ((xexpected)))
                xtest_false_meta.write
                  [xself]
                    memory > xaa
                    memory > x_
                    memory > xfun
                    memory > x__len__
                    seq > @
                      seq
                        (((unsupported)).apply ((xtype)))
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (1))
                        (((unsupported)).apply ((xMetaA)))
                        (((unsupported)).apply ((xA)))
                        xfun.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base A"))
                        x_.write
                          [xa]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("fun A"))
                        xaa.write (((xAA)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfun)).apply ((xaa)))) ("fun A"))
                xtest_mro_conflicts.write
                  [xself]
                    memory > xu
                    memory > xc
                    memory > xo
                    memory > xq
                    memory > xg
                    memory > xt
                    memory > xh
                    memory > x_
                    memory > xp
                    memory > xr
                    memory > xi
                    memory > xv
                    memory > x__len__
                    memory > xj
                    seq > @
                      seq
                        xc.write ((xcollections).xabc)
                        xg.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        (((unsupported)).apply (((xc).xSized)))
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (1))
                        xo.write (((xO)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xo)))) ("base"))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xIterable)) ((((unsupported)).apply ("iterable"))))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xContainer)) ((((unsupported)).apply ("container"))))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xSized)) ((((unsupported)).apply ("sized"))))
                        bogusForceDataize.write ((((xg).xregister)).apply (((xc).xSet)) ((((unsupported)).apply ("set"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xo)))) ("sized"))
                        bogusForceDataize.write (((((xc).xIterable).xregister)).apply ((xO)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xo)))) ("sized"))
                        bogusForceDataize.write (((((xc).xContainer).xregister)).apply ((xO)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xo)))) ("sized"))
                        bogusForceDataize.write (((((xc).xSet).xregister)).apply ((xO)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xo)))) ("set"))
                        (((unsupported)).apply)
                        xp.write (((xP)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xp)))) ("base"))
                        bogusForceDataize.write (((((xc).xIterable).xregister)).apply ((xP)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xp)))) ("iterable"))
                        bogusForceDataize.write (((((xc).xContainer).xregister)).apply ((xP)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xre_one)))
                          bogusForceDataize.write (((xg)).apply ((xp)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xstr)).apply (((xre_one).xexception)))) ((((unsupported)).apply ("Ambiguous dispatch: <class 'collections.abc.Container'> or <class 'collections.abc.Iterable'>") ("Ambiguous dispatch: <class 'collections.abc.Iterable'> or <class 'collections.abc.Container'>"))))
                        (((unsupported)).apply (((xc).xSized)))
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (1))
                        xq.write (((xQ)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xq)))) ("sized"))
                        bogusForceDataize.write (((((xc).xIterable).xregister)).apply ((xQ)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xq)))) ("sized"))
                        bogusForceDataize.write (((((xc).xSet).xregister)).apply ((xQ)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xq)))) ("set"))
                        xh.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        x_.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("sized"))
                        x_.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("container"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xre_two)))
                          bogusForceDataize.write (((xh)).apply (((((xcollections).xdefaultdict)).apply ((((unsupported)).apply (0))))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xstr)).apply (((xre_two).xexception)))) ((((unsupported)).apply ("Ambiguous dispatch: <class 'collections.abc.Container'> or <class 'collections.abc.Sized'>") ("Ambiguous dispatch: <class 'collections.abc.Sized'> or <class 'collections.abc.Container'>"))))
                        (((unsupported)).apply (((xcollections).xdefaultdict)))
                        bogusForceDataize.write (((((xc).xMutableSequence).xregister)).apply ((xR)))
                        xi.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        x_.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("mapping"))
                        x_.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("sequence"))
                        xr.write (((xR)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi)).apply ((xr)))) ("sequence"))
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xS)) (((xc).xSized)))
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (1))
                        xt.write (((xT)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xh)).apply ((xt)))) ("sized"))
                        bogusForceDataize.write (((((xc).xContainer).xregister)).apply ((xT)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xh)).apply ((xt)))) ("sized"))
                        (((unsupported)).apply)
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (1))
                        xu.write (((xU)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xh)).apply ((xu)))) ("sized"))
                        bogusForceDataize.write (((((xc).xContainer).xregister)).apply ((xU)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xre_three)))
                          bogusForceDataize.write (((xh)).apply ((xu)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((xstr)).apply (((xre_three).xexception)))) ((((unsupported)).apply ("Ambiguous dispatch: <class 'collections.abc.Container'> or <class 'collections.abc.Sized'>") ("Ambiguous dispatch: <class 'collections.abc.Sized'> or <class 'collections.abc.Container'>"))))
                        (((unsupported)).apply (((xc).xSized)) ((xS)))
                          x__len__.write
                            [xself]
                              seq > @
                                (((unsupported)).apply (1))
                        xj.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        x_.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("s"))
                        x_.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("container"))
                        xv.write (((xV)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xj)).apply ((xv)))) ("s"))
                        bogusForceDataize.write (((((xc).xContainer).xregister)).apply ((xV)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xj)).apply ((xv)))) ("container"))
                xtest_cache_invalidation.write
                  [xself]
                    memory > xd
                    memory > xc
                    memory > xclear
                    memory > xg
                    memory > x__getitem__
                    memory > xl
                    memory > xtd
                    memory > x__setitem__
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xUserDict)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write ((((((xsuper)).apply ((xTracingDict)) ((xself))).x__init__)).apply ((((unsupported)).apply ((xargs)))) ((((unsupported)).apply ((xkwargs)))))
                                    (((unsupported)).apply (((xself).xset_ops)) ((((unsupported)).apply)))
                                    (((unsupported)).apply (((xself).xget_ops)) ((((unsupported)).apply)))
                            x__getitem__.write
                              [xself xkey]
                                memory > xresult
                                seq > @
                                  seq
                                    xresult.write (((unsupported)).apply (((xself).xdata)) ((xkey)))
                                    bogusForceDataize.write (((((xself).xget_ops).xappend)).apply ((xkey)))
                                    (((unsupported)).apply ((xresult)))
                            x__setitem__.write
                              [xself xkey xvalue]
                                seq > @
                                  seq
                                    bogusForceDataize.write (((((xself).xset_ops).xappend)).apply ((xkey)))
                                    (((unsupported)).apply ((((unsupported)).apply (((xself).xdata)) ((xkey)))) ((xvalue)))
                            xclear.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write (((((xself).xdata).xclear)).apply)
                        xtd.write (((xTracingDict)).apply)
                        (((unsupported)).apply (((((xsupport).xswap_attr)).apply ((xweakref)) ("WeakKeyDictionary") ((((unsupported)).apply ((xtd)))))))
                          seq
                            xc.write ((xcollections).xabc)
                            xg.write
                              [xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ("base"))
                            xd.write (((unsupported)).apply)
                            xl.write (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("base"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtd).xdata)) ((xdict)))) ((((unsupported)).apply (((xg).xregistry)) ((xobject)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("base"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)) ((xlist)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtd).xdata)) ((xdict)))) ((((unsupported)).apply (((xg).xregistry)) ((xobject)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtd).xdata)) ((xlist)))) ((((unsupported)).apply (((xg).xregistry)) ((xobject)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtd).xdata)) ((xdict)))) ((((unsupported)).apply (((xtd).xdata)) ((xlist)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("base"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("base"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply ((xlist)) ((xdict)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)) ((xlist)))))
                            bogusForceDataize.write ((((xg).xregister)).apply ((xlist)) ((((unsupported)).apply ("list"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply ((xlist)) ((xdict)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("base"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply ((xlist)) ((xdict)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)) ((xlist)) ((xdict)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtd).xdata)) ((xdict)))) (((((xfunctools).x_find_impl)).apply ((xdict)) (((xg).xregistry)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply ((xlist)) ((xdict)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)) ((xlist)) ((xdict)) ((xlist)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtd).xdata)) ((xlist)))) (((((xfunctools).x_find_impl)).apply ((xlist)) (((xg).xregistry)))))
                            (((unsupported)).apply)
                            bogusForceDataize.write (((((xc).xMutableMapping).xregister)).apply ((xX)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("base"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply ((xlist)) ((xdict)) ((xdict)) ((xlist)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)) ((xlist)) ((xdict)) ((xlist)))))
                            bogusForceDataize.write ((((xg).xregister)).apply (((xc).xSized)) ((((unsupported)).apply ("sized"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("sized"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply ((xlist)) ((xdict)) ((xdict)) ((xlist)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)) ((xlist)) ((xdict)) ((xlist)) ((xdict)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply ((xlist)) ((xdict)) ((xdict)) ((xlist)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)) ((xlist)) ((xdict)) ((xlist)) ((xdict)) ((xlist)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("sized"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply ((xlist)) ((xdict)) ((xdict)) ((xlist)) ((xlist)) ((xdict)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)) ((xlist)) ((xdict)) ((xlist)) ((xdict)) ((xlist)))))
                            bogusForceDataize.write ((((xg).xdispatch)).apply ((xlist)))
                            bogusForceDataize.write ((((xg).xdispatch)).apply ((xdict)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xget_ops)) ((((unsupported)).apply ((xlist)) ((xdict)) ((xdict)) ((xlist)) ((xlist)) ((xdict)) ((xlist)) ((xdict)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xtd).xset_ops)) ((((unsupported)).apply ((xdict)) ((xlist)) ((xdict)) ((xlist)) ((xdict)) ((xlist)))))
                            bogusForceDataize.write (((((xc).xMutableSet).xregister)).apply ((xX)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (2))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (1))
                            bogusForceDataize.write ((((xg).xregister)).apply (((xc).xMutableMapping)) ((((unsupported)).apply ("mutablemapping"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("mutablemapping"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (2))
                            bogusForceDataize.write ((((xg).xregister)).apply ((xdict)) ((((unsupported)).apply ("dict"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xd)))) ("dict"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xg)).apply ((xl)))) ("list"))
                            bogusForceDataize.write ((((xg).x_clear_cache)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xtd)))) (0))
                xtest_annotations.write
                  [xself]
                    memory > x__eq__
                    memory > x_
                    memory > x__init__
                    memory > xi
                    seq > @
                      seq
                        xi.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        x_.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("mapping"))
                        x_.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("sequence"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi)).apply ("None: is there a None literal in the EO language?"))) ("base"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi)).apply ((((unsupported)).apply ("a") (1))))) ("mapping"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi)).apply ((((unsupported)).apply (1) (2) (3))))) ("sequence"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi)).apply ((((unsupported)).apply (1) (2) (3))))) ("sequence"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi)).apply ("str"))) ("sequence"))
                        (((unsupported)).apply (((((xi).xregister)).apply ((xstr)))))
                          seq
                            x__init__.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply (((xself).xarg)) ((xarg)))
                            x__eq__.write
                              [xself xother]
                                seq > @
                                  (((unsupported)).apply ((((xself).xarg).eq (xother))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xi)).apply ("str"))) ("str"))
                xtest_method_register.write
                  [xself]
                    memory > xaa
                    memory > xt
                    memory > x_
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            xt.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xarg)) ("base"))
                            x_.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xarg)) ("int"))
                            x_.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xarg)) ("str"))
                        xa.write (((xA)).apply)
                        bogusForceDataize.write ((((xa).xt)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xarg)) ("int"))
                        xaa.write (((xA)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xaa)) ("arg"))))
                        bogusForceDataize.write ((((xa).xt)).apply (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xarg)) ("str"))
                        xaa.write (((xA)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xaa)) ("arg"))))
                        bogusForceDataize.write ((((xa).xt)).apply (0.0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xarg)) ("base"))
                        xaa.write (((xA)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply ((xaa)) ("arg"))))
                xtest_staticmethod_register.write
                  [xself]
                    memory > xt
                    memory > x_
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            xt.write
                              [xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((xarg)))
                            x_.write
                              [xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xisinstance)).apply ((xarg)) ((xint)))))
                            x_.write
                              [xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xisinstance)).apply ((xarg)) ((xstr)))))
                        xa.write (((xA)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA).xt)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xA).xt)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xA).xt)).apply (0.0))) (0.0))
                xtest_classmethod_register.write
                  [xself]
                    memory > xt
                    memory > x_
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply (((xself).xarg)) ((xarg)))
                            xt.write
                              [xcls xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xcls)).apply ("base"))))
                            x_.write
                              [xcls xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xcls)).apply ("int"))))
                            x_.write
                              [xcls xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xcls)).apply ("str"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xA).xt)).apply (0)).xarg)) ("int"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xA).xt)).apply ("")).xarg)) ("str"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xA).xt)).apply (0.0)).xarg)) ("base"))
                xtest_callable_register.write
                  [xself]
                    memory > xt
                    memory > x_
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply (((xself).xarg)) ((xarg)))
                            xt.write
                              [xcls xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ((((xcls)).apply ("base"))))
                        x_.write
                          [xcls xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xcls)).apply ("int"))))
                        x_.write
                          [xcls xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ((((xcls)).apply ("str"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xA).xt)).apply (0)).xarg)) ("int"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xA).xt)).apply ("")).xarg)) ("str"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xA).xt)).apply (0.0)).xarg)) ("base"))
                xtest_abstractmethod_register.write
                  [xself]
                    memory > xadd
                    seq > @
                      seq
                        (((unsupported)).apply (((xabc).xABCMeta)))
                          xadd.write
                            [xself xx xy]
                              seq > @
                                (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xAbstract).xadd).x__isabstractmethod__)))
                xtest_type_ann_register.write
                  [xself]
                    memory > xt
                    memory > x_
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            xt.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ("base"))
                            x_.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ("int"))
                            x_.write
                              [xself xarg]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply ("str"))
                        xa.write (((xA)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xt)).apply (0))) ("int"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xt)).apply (""))) ("str"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xa).xt)).apply (0.0))) ("base"))
                xtest_invalid_registrations.write
                  [xself]
                    memory > xmsg_suffix
                    memory > xmsg_prefix
                    memory > x_
                    memory > xi
                    seq > @
                      seq
                        xmsg_prefix.write "Invalid first argument to `register()`: "
                        xmsg_suffix.write ". Use either `@register(some_class)` or plain `@register` on an annotated function."
                        xi.write
                          [xarg]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply ("base"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xexc)))
                          x_.write
                            [xarg]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ("I annotated with a non-type"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xstr)).apply (((xexc).xexception))).xstartswith)).apply (((xmsg_prefix).add "42")))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xstr)).apply (((xexc).xexception))).xendswith)).apply ((xmsg_suffix)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xexc)))
                          x_.write
                            [xarg]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ("I forgot to annotate"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xstr)).apply (((xexc).xexception))).xstartswith)).apply (((xmsg_prefix).add "<function TestSingleDispatch.test_invalid_registrations.<locals>._")))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xstr)).apply (((xexc).xexception))).xendswith)).apply ((xmsg_suffix)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))) ((xexc)))
                          x_.write
                            [xarg]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply ("I annotated with a generic collection"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xstr)).apply (((xexc).xexception))).xstartswith)).apply ("Invalid annotation for 'arg'."))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((((xstr)).apply (((xexc).xexception))).xendswith)).apply ("typing.Iterable[str] is not a class."))))
                xtest_invalid_positional_argument.write
                  [xself]
                    memory > xmsg
                    memory > xf
                    seq > @
                      seq
                        xf.write
                          []
                            seq > @
                              (((unsupported)).apply)
                        xmsg.write "f requires at least 1 positional argument"
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write (((xf)).apply)
            (((unsupported)).apply)
              seq
                x_cost.write 2
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xlock)) (((((xpy_functools).xRLock)).apply)))
                xcost.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((unsupported)).apply (((xself).xlock)))
                          (((unsupported)).apply (((xself).x_cost)) (2))
                        (((unsupported)).apply (((xself).x_cost)))
            (((unsupported)).apply)
              seq
                x_cost.write 2
                xget_cost.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).x_cost)) (2))
                        (((unsupported)).apply (((xself).x_cost)))
                xcached_cost.write ((((xpy_functools).xcached_property)).apply ((xget_cost)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xevent]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_cost)) (2))
                        (((unsupported)).apply (((xself).xlock)) (((((xpy_functools).xRLock)).apply)))
                        (((unsupported)).apply (((xself).xevent)) ((xevent)))
                xcost.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write (((((xself).xevent).xwait)).apply (1))
                        (((unsupported)).apply (((xself).xlock)))
                          (((unsupported)).apply (((xself).x_cost)) (2))
                        (((unsupported)).apply (((xself).x_cost)))
            (((unsupported)).apply)
              seq
                x__slots__.write "_cost"
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_cost)) (2))
                xcost.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xRuntimeError)).apply ("never called, slots not supported"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_cached.write
                  [xself]
                    memory > xitem
                    seq > @
                      seq
                        xitem.write (((xCachedCostItem)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xitem).xcost)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xitem).xcost)) (2))
                xtest_cached_attribute_name_differs_from_func_name.write
                  [xself]
                    memory > xitem
                    seq > @
                      seq
                        xitem.write (((xOptionallyCachedCostItem)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xitem).xget_cost)).apply)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xitem).xcached_cost)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xitem).xget_cost)).apply)) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xitem).xcached_cost)) (3))
                xtest_threaded.write
                  [xself]
                    memory > xthreads
                    memory > xgo
                    memory > xitem
                    memory > xorig_si
                    memory > xnum_threads
                    seq > @
                      seq
                        xgo.write ((((xthreading).xEvent)).apply)
                        xitem.write (((xCachedCostItemWait)).apply ((xgo)))
                        xnum_threads.write 4
                        xorig_si.write ((((xsys).xgetswitchinterval)).apply)
                        bogusForceDataize.write ((((xsys).xsetswitchinterval)).apply ((((unsupported)).apply)))
                        (((unsupported)).apply)
                          seq
                            xthreads.write (((unsupported)).apply ((((unsupported)).apply (((xthreading).xThread)) ((((unsupported)).apply (((xitem).xcost)))))) ((xk)) ((((xrange)).apply ((xnum_threads)))))
                            (((unsupported)).apply (((((xsupport).xstart_threads)).apply ((xthreads)))))
                              bogusForceDataize.write ((((xgo).xset)).apply)
                          bogusForceDataize.write ((((xsys).xsetswitchinterval)).apply ((xorig_si)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xitem).xcost)) (2))
                xtest_object_with_slots.write
                  [xself]
                    memory > xitem
                    seq > @
                      seq
                        xitem.write (((xCachedCostItemWithSlots)).apply)
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("No '__dict__' attribute on 'CachedCostItemWithSlots' instance to cache 'cost' property."))))
                          unsupported
                xtest_immutable_dict.write
                  [xself]
                    memory > xprop
                    seq > @
                      seq
                        (((unsupported)).apply ((xtype)))
                          xprop.write
                            [xself]
                              seq > @
                                (((unsupported)).apply)
                                  (((unsupported)).apply (TRUE))
                        (((unsupported)).apply ((xMyMeta)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("The '__dict__' attribute on 'MyMeta' instance does not support item assignment for caching 'prop' property."))))
                          unsupported
                xtest_reuse_different_names.write
                  [xself]
                    memory > xb
                    memory > xa
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xctx)))
                          (((unsupported)).apply)
                            seq
                              xa.write
                                [xself]
                                  seq > @
                                    (((unsupported)).apply)
                              xb.write (xa)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xctx).xexception).x__context__)))) ((((xstr)).apply ((((xTypeError)).apply ("Cannot assign the same cached_property to two different names ('a' and 'b')."))))))
                xtest_reuse_same_name.write
                  [xself]
                    memory > xcounter
                    memory > xb
                    memory > x_cp
                    memory > xcp
                    memory > xa
                    seq > @
                      seq
                        unsupported
                        xcounter.write 1
                        x_cp.write
                          [x_self]
                            seq > @
                              (((unsupported)).apply)
                                (((unsupported)).apply)
                                (((unsupported)).apply ((xcounter)) (2))
                                (((unsupported)).apply ((xcounter)))
                        (((unsupported)).apply)
                          xcp.write (x_cp)
                        (((unsupported)).apply)
                          xcp.write (x_cp)
                        xa.write (((xA)).apply)
                        xb.write (((xB)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xcp)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xb).xcp)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xa).xcp)) (1))
                xtest_set_name_not_called.write
                  [xself]
                    memory > xcp
                    seq > @
                      seq
                        xcp.write ((((xpy_functools).xcached_property)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xFoo).xcp)) ((xcp)))
                        (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("Cannot use cached_property instance without calling __set_name__ on it."))))
                          unsupported
                xtest_access_from_class.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((xCachedCostItem).xcost)) (((xpy_functools).xcached_property)))
                xtest_doc.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xCachedCostItem).xcost).x__doc__)) ("The cost of the item."))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)