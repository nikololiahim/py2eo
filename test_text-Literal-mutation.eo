memory > xgettext_lazy
memory > xValueError
memory > xrange
memory > xoutput
memory > xtext
memory > xoverride
memory > xSuspiciousFileOperation
memory > xi
memory > xitem
memory > xjson
memory > xlazystr
memory > xexpected
memory > xis_unicode
memory > xlist
memory > xvalue
memory > xtest
memory > xs
memory > xsys
memory > xlen
memory > xformat_lazy
memory > xSimpleTestCase
[] > test_text
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_get_text_list
        memory > xtest_get_valid_filename
        memory > xtest_unescape_string_literal_invalid_value
        memory > xtest_compress_sequence
        memory > xtest_phone2numeric
        memory > xtest_truncate_html_words
        memory > xtest_normalize_newlines
        memory > xIS_WIDE_BUILD
        memory > xtest_truncate_words
        memory > xtest_wrap
        memory > xtest_truncate_chars
        memory > xtest_truncate_chars_html
        memory > xtest_slugify
        memory > xtest_unescape_string_literal
        memory > xtest_smart_split
        memory > xtest_format_lazy
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xIS_WIDE_BUILD.write ((((xlen)).apply ("U0001F4A9")).eq 1)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_get_text_list.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xget_text_list)).apply ((((unsupported)).apply ("a") ("b") ("c") ("d"))))) ("a, b, c or d"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xget_text_list)).apply ((((unsupported)).apply ("a") ("b") ("c"))) ("and"))) ("a, b and c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xget_text_list)).apply ((((unsupported)).apply ("a") ("b"))) ("and"))) ("a and b"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xget_text_list)).apply ((((unsupported)).apply ("a"))))) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xget_text_list)).apply ((((unsupported)).apply)))) (""))
                        (((unsupported)).apply ((((xoverride)).apply ("ar"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xget_text_list)).apply ((((unsupported)).apply ("a") ("b") ("c"))))) ("a، b أو c"))
                xtest_smart_split.write
                  [xself]
                    memory > xtestdata
                    seq > @
                      seq
                        xtestdata.write (((unsupported)).apply ((((unsupported)).apply ("This is \"a person\" test.") ((((unsupported)).apply ("This") ("is") ("\"a person\"") ("test."))))) ((((unsupported)).apply ("This is \"a person's\" test.") ((((unsupported)).apply ("This") ("is") ("\"a person's\"") ("test."))))) ((((unsupported)).apply ("This is \"a person\\\"s\" test.") ((((unsupported)).apply ("This") ("is") ("\"a person\\\"s\"") ("test."))))) ((((unsupported)).apply ("\"a 'one") ((((unsupported)).apply ("\"a") ("'one"))))) ((((unsupported)).apply ("all friends' tests") ((((unsupported)).apply ("all") ("friends'") ("tests"))))) ((((unsupported)).apply ("url search_page words=\"something else\"") ((((unsupported)).apply ("url") ("search_page") ("words=\"something else\""))))) ((((unsupported)).apply ("url search_page words='something else'") ((((unsupported)).apply ("url") ("search_page") ("words='something else'"))))) ((((unsupported)).apply ("url search_page words \"something else\"") ((((unsupported)).apply ("url") ("search_page") ("words") ("\"something else\""))))) ((((unsupported)).apply ("url search_page words-\"something else\"") ((((unsupported)).apply ("url") ("search_page") ("words-\"something else\""))))) ((((unsupported)).apply ("url search_page words=hello") ((((unsupported)).apply ("url") ("search_page") ("words=hello"))))) ((((unsupported)).apply ("url search_page words=\"something else") ((((unsupported)).apply ("url") ("search_page") ("words=\"something") ("else"))))) ((((unsupported)).apply ("cut:','|cut:' '") ((((unsupported)).apply ("cut:','|cut:' '"))))) ((((unsupported)).apply ((((xlazystr)).apply ("a b c d"))) ((((unsupported)).apply ("a") ("b") ("c") ("d"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xtest)) ((xexpected)))) ((xtestdata)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xtest)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlist)).apply (((((xtext).xsmart_split)).apply ((xtest)))))) ((xexpected)))
                xtest_truncate_chars.write
                  [xself]
                    memory > xnfc
                    memory > xtruncator
                    memory > xnfd
                    seq > @
                      seq
                        xtruncator.write ((((xtext).xTruncator)).apply ("The quick brown fox jumped over the lazy dog."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("The quick brown fox jumped over the lazy dog.") (((((xtruncator).xchars)).apply (100))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("The quick brown fox …") (((((xtruncator).xchars)).apply (21))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("The quick brown fo.....") (((((xtruncator).xchars)).apply (23) ("....."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (".....") (((((xtruncator).xchars)).apply (4) ("....."))))
                        xnfc.write ((((xtext).xTruncator)).apply ("oxfcoxfcoxfcoxfc"))
                        xnfd.write ((((xtext).xTruncator)).apply ("ouu0308ouu0308ouu0308ouu0308"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("oüoüoüoü") (((((xnfc).xchars)).apply (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("oüoüoüoü") (((((xnfd).xchars)).apply (8))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("oü…") (((((xnfc).xchars)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("oü…") (((((xnfd).xchars)).apply (3))))
                        xtruncator.write ((((xtext).xTruncator)).apply ("-Bu030ABu030A----8"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("-Bu030A…") (((((xtruncator).xchars)).apply (3))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("-Bu030ABu030A-…") (((((xtruncator).xchars)).apply (5))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("-Bu030ABu030A----8") (((((xtruncator).xchars)).apply (8))))
                        xtruncator.write ((((xtext).xTruncator)).apply ("-----"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("---Bu030A") (((((xtruncator).xchars)).apply (4) ("Bu030A"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("-----") (((((xtruncator).xchars)).apply (5) ("Bu030A"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("…") ((((((((xtext).xTruncator)).apply ("asdf")).xchars)).apply (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xtext).xTruncator)).apply ((((xlazystr)).apply ("The quick brown fox")))).xchars)).apply (10))) ("The quick…"))
                xtest_truncate_chars_html.write
                  [xself]
                    memory > xperf_test_values
                    memory > xtruncator
                    seq > @
                      seq
                        xperf_test_values.write (((unsupported)).apply ((((unsupported)).apply ((("</a".add ("t".mul 50000)).add "//>")) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply (("&".mul 50000)) ((("&".mul 9).add "…")))) ((((unsupported)).apply ("_X<<<<<<<<<<<>") ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xperf_test_values)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xtruncator.write ((((xtext).xTruncator)).apply ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xexpected).if (xexpected) (xvalue))) ((((unsupported)).apply (((xtruncator).xchars)) (10) (TRUE))))
                xtest_truncate_words.write
                  [xself]
                    memory > xtruncator
                    seq > @
                      seq
                        xtruncator.write ((((xtext).xTruncator)).apply ("The quick brown fox jumped over the lazy dog."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("The quick brown fox jumped over the lazy dog.") (((((xtruncator).xwords)).apply (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("The quick brown fox…") (((((xtruncator).xwords)).apply (4))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("The quick brown fox[snip]") (((((xtruncator).xwords)).apply (4) ("[snip]"))))
                        xtruncator.write ((((xtext).xTruncator)).apply ((((xlazystr)).apply ("The quick brown fox jumped over the lazy dog."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("The quick brown fox…") (((((xtruncator).xwords)).apply (4))))
                xtest_truncate_html_words.write
                  [xself]
                    memory > xperf_test_values
                    memory > xtruncator
                    seq > @
                      seq
                        xtruncator.write ((((xtext).xTruncator)).apply ("<p id=\"par\"><strong><em>The quick brown fox jumped over the lazy dog.</em></strong></p>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<p id=\"par\"><strong><em>The quick brown fox jumped over the lazy dog.</em></strong></p>") ((((unsupported)).apply (((xtruncator).xwords)) (10) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<p id=\"par\"><strong><em>The quick brown fox…</em></strong></p>") ((((unsupported)).apply (((xtruncator).xwords)) (4) (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<p id=\"par\"><strong><em>The quick brown fox....</em></strong></p>") ((((unsupported)).apply (((xtruncator).xwords)) (4) ("....") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<p id=\"par\"><strong><em>The quick brown fox</em></strong></p>") ((((unsupported)).apply (((xtruncator).xwords)) (4) ("") (TRUE))))
                        xtruncator.write ((((xtext).xTruncator)).apply ("<p>The quick <a href=\"xyz.html\"n id=\"mylink\">brown fox</a> jumped over the lazy dog.</p>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<p>The quick <a href=\"xyz.html\"n id=\"mylink\">brown…</a></p>") ((((unsupported)).apply (((xtruncator).xwords)) (3) (TRUE))))
                        xtruncator.write ((((xtext).xTruncator)).apply ("<br/>The <hr />quick brown fox jumped over the lazy dog."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<br/>The <hr />quick brown…") ((((unsupported)).apply (((xtruncator).xwords)) (3) (TRUE))))
                        xtruncator.write ((((xtext).xTruncator)).apply ("<br>The <hr/>quick <em>brown fox</em> jumped over the lazy dog."))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<br>The <hr/>quick <em>brown…</em>") ((((unsupported)).apply (((xtruncator).xwords)) (3) (TRUE))))
                        xtruncator.write ((((xtext).xTruncator)).apply ("<i>Buenos d&iacute;as! &#x00bf;C&oacute;mo est&aacute;?</i>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<i>Buenos d&iacute;as! &#x00bf;C&oacute;mo…</i>") ((((unsupported)).apply (((xtruncator).xwords)) (3) (TRUE))))
                        xtruncator.write ((((xtext).xTruncator)).apply ("<p>I &lt;3 python, what about you?</p>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("<p>I &lt;3 python,…</p>") ((((unsupported)).apply (((xtruncator).xwords)) (3) (TRUE))))
                        xperf_test_values.write (((unsupported)).apply ((("</a".add ("t".mul 50000)).add "//>")) (("&".mul 50000)) ("_X<<<<<<<<<<<>"))
                        (((unsupported)).apply ((xvalue)) ((xperf_test_values)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xtruncator.write ((((xtext).xTruncator)).apply ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xvalue)) ((((unsupported)).apply (((xtruncator).xwords)) (50) (TRUE))))
                xtest_wrap.write
                  [xself]
                    memory > xdigits
                    memory > xlong_word
                    seq > @
                      seq
                        xdigits.write "1234 67 9"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xwrap)).apply ((xdigits)) (100))) ("1234 67 9"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xwrap)).apply ((xdigits)) (9))) ("1234 67 9"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xwrap)).apply ((xdigits)) (8))) ("1234 67n9"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xwrap)).apply ("shortna long line") (7))) ("shortna longnline"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xwrap)).apply ("do-not-break-long-words please? ok") (8))) ("do-not-break-long-wordsnplease?nok"))
                        xlong_word.write ("l%sng".mod ("o".mul 20))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xwrap)).apply ((xlong_word)) (20))) ((xlong_word)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xwrap)).apply (("a %s word".mod (xlong_word))) (10))) (("an%snword".mod (xlong_word))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xwrap)).apply ((((xlazystr)).apply ((xdigits)))) (100))) ("1234 67 9"))
                xtest_normalize_newlines.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xnormalize_newlines)).apply ("abcndefrghirn"))) ("abcndefnghin"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xnormalize_newlines)).apply ("nrrnr"))) ("nnnn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xnormalize_newlines)).apply ("abcdefghi"))) ("abcdefghi"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xnormalize_newlines)).apply (""))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xnormalize_newlines)).apply ((((xlazystr)).apply ("abcndefrghirn"))))) ("abcndefnghin"))
                xtest_phone2numeric.write
                  [xself]
                    memory > xnumeric
                    memory > xlazy_numeric
                    seq > @
                      seq
                        xnumeric.write ((((xtext).xphone2numeric)).apply ("0800 flowers"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xnumeric)) ("0800 3569377"))
                        xlazy_numeric.write (((xlazystr)).apply (((((xtext).xphone2numeric)).apply ("0800 flowers"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlazy_numeric)) ("0800 3569377"))
                xtest_slugify.write
                  [xself]
                    memory > xitems
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply ((((unsupported)).apply ("Hello, World!") ("hello-world") (FALSE))) ((((unsupported)).apply ("spam & eggs") ("spam-eggs") (FALSE))) ((((unsupported)).apply (" multiple---dash and  space ") ("multiple-dash-and-space") (FALSE))) ((((unsupported)).apply ("t whitespace-in-value n") ("whitespace-in-value") (FALSE))) ((((unsupported)).apply ("underscore_in-value") ("underscore_in-value") (FALSE))) ((((unsupported)).apply ("__strip__underscore-value___") ("strip__underscore-value") (FALSE))) ((((unsupported)).apply ("--strip-dash-value---") ("strip-dash-value") (FALSE))) ((((unsupported)).apply ("__strip-mixed-value---") ("strip-mixed-value") (FALSE))) ((((unsupported)).apply ("_ -strip-mixed-value _-") ("strip-mixed-value") (FALSE))) ((((unsupported)).apply ("spam & ıçüş") ("spam-ıçüş") (TRUE))) ((((unsupported)).apply ("foo ıç bar") ("foo-ıç-bar") (TRUE))) ((((unsupported)).apply ("    foo ıç bar") ("foo-ıç-bar") (TRUE))) ((((unsupported)).apply ("你好") ("你好") (TRUE))) ((((unsupported)).apply ("İstanbul") ("istanbul") (TRUE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xoutput)) ((xis_unicode)))) ((xitems)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xtext).xslugify)) ((xvalue)) ((xis_unicode)))) ((xoutput)))
                        (((unsupported)).apply (((((xself).xsubTest)).apply ("intern"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xsys).xintern)).apply (((((xtext).xslugify)).apply ("a"))))) ("a"))
                xtest_unescape_string_literal.write
                  [xself]
                    memory > xitems
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply ((((unsupported)).apply ("\"abc\"") ("abc"))) ((((unsupported)).apply ("'abc'") ("abc"))) ((((unsupported)).apply ("\"a \"bc\"\"") ("a \"bc\""))) ((((unsupported)).apply ("''ab' c'") ("'ab' c"))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xoutput)))) ((xitems)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xunescape_string_literal)).apply ((xvalue)))) ((xoutput)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xunescape_string_literal)).apply ((((xlazystr)).apply ((xvalue)))))) ((xoutput)))
                xtest_unescape_string_literal_invalid_value.write
                  [xself]
                    memory > xmsg
                    memory > xitems
                    seq > @
                      seq
                        xitems.write (((unsupported)).apply ("") ("abc") ("'abc\""))
                        (((unsupported)).apply ((xitem)) ((xitems)))
                          seq
                            xmsg.write "Not a string literal: {item!r}"
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                              bogusForceDataize.write ((((xtext).xunescape_string_literal)).apply ((xitem)))
                xtest_get_valid_filename.write
                  [xself]
                    memory > xmsg
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write "^&'@{}[],$=!-#()%+~_123.txt"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xget_valid_filename)).apply ((xfilename)))) ("-_123.txt"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xtext).xget_valid_filename)).apply ((((xlazystr)).apply ((xfilename)))))) ("-_123.txt"))
                        xmsg.write "Could not derive file name from '???'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xSuspiciousFileOperation)) ((xmsg)))))
                          bogusForceDataize.write ((((xtext).xget_valid_filename)).apply ("???"))
                        xmsg.write "Could not derive file name from '$.$.$'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xSuspiciousFileOperation)) ((xmsg)))))
                          bogusForceDataize.write ((((xtext).xget_valid_filename)).apply ("$.$.$"))
                xtest_compress_sequence.write
                  [xself]
                    memory > xcompressed_length
                    memory > xdata
                    memory > xseq
                    memory > xout
                    memory > xactual_length
                    seq > @
                      seq
                        xdata.write (((unsupported)).apply ((((unsupported)).apply ("key") ((xi)))) ((xi)) ((((xrange)).apply (10))))
                        xseq.write (((xlist)).apply ((((((((xjson).xJSONEncoder)).apply).xiterencode)).apply ((xdata)))))
                        xseq.write (((unsupported)).apply (((((xs).xencode)).apply)) ((xs)) ((xseq)))
                        xactual_length.write (((xlen)).apply (((("".xjoin)).apply ((xseq)))))
                        xout.write ((((xtext).xcompress_sequence)).apply ((xseq)))
                        xcompressed_length.write (((xlen)).apply (((("".xjoin)).apply ((xout)))))
                        bogusForceDataize.write ((((xself).xassertLess)).apply ((xcompressed_length)) ((xactual_length)))
                xtest_format_lazy.write
                  [xself]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("django/test") ((((xformat_lazy)).apply ("{}/{}") ("django") ((((xlazystr)).apply ("test"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("django/test") ((((xformat_lazy)).apply ("{0}/{1}") ((((unsupported)).apply ((((unsupported)).apply ("django") ("test"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("django/test") ((((xformat_lazy)).apply ("{a}/{b}") ((((unsupported)).apply ((((unsupported)).apply ("a") ("django") ("b") ("test"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("django/test") ((((unsupported)).apply ((xformat_lazy)) ("{a[0]}/{a[1]}") ((((unsupported)).apply ("django") ("test"))))))
                        xt.write (((unsupported)).apply)
                        xs.write (((unsupported)).apply ((xformat_lazy)) ("{0[a]}-{p[a]}") ((xt)) ((xt)))
                        (((unsupported)).apply ((((unsupported)).apply ((xt)) ("a"))) ((((xlazystr)).apply ("django"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("django-django") ((xs)))
                        (((unsupported)).apply ((((unsupported)).apply ((xt)) ("a"))) ("update"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("update-update") ((xs)))
                        xs.write (((unsupported)).apply ((xformat_lazy)) ((((xgettext_lazy)).apply ("Added {name} “{object}”."))) ("article") ("My first try"))
                        (((unsupported)).apply ((((xoverride)).apply ("fr"))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ("Ajout de article «xa0My first tryxa0».") ((xs)))