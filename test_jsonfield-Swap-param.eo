memory > xCount
memory > xforms
memory > xOuterRef
memory > xValueError
memory > xTestCase
memory > xCast
memory > xlookup
memory > xCaptureQueriesContext
memory > xMyTransform
memory > xIntegrityError
memory > xkwargs
memory > xJSONModel
memory > xexpected
memory > xSubquery
memory > xKeyTransform
memory > xlist
memory > xRawSQL
memory > xuuid
memory > xstr
memory > xQ
memory > xKeyTextTransform
memory > xValidationError
memory > xvalue
memory > xKeyTransformTextLookupMixin
memory > xKeyTransformFactory
memory > xconnection
memory > xIntegerField
memory > xserialized
memory > xNullableJSONModel
memory > xpath
memory > xValue
memory > xTransform
memory > xoperator
memory > xNotSupportedError
memory > xF
memory > xOperationalError
memory > xRelatedJSONModel
memory > xserializers
memory > xargs
memory > xDjangoJSONEncoder
memory > xmock
memory > xqueries
memory > xskipUnlessDBFeature
memory > xname
memory > xCustomJSONDecoder
memory > xcondition
memory > xmodels
memory > xExpressionWrapper
memory > xfield_name
memory > xlen
memory > xSimpleTestCase
memory > xDataError
memory > xTypeError
[] > test_jsonfield
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_lookup_exclude
        memory > xtest_data
        memory > xsetUpTestData
        memory > xtest_contains_unsupported
        memory > xtest_ordering_by_transform
        memory > xtest_dict
        memory > xtest_array_key_contains
        memory > xtest_none_key
        memory > xtest_dumping
        memory > xtest_primitives
        memory > xtest_isnull
        memory > xtest_get_transforms
        memory > xtest_key_iregex
        memory > xtest_key_icontains
        memory > xtest_xml_serialization
        memory > xtest_deep_distinct
        memory > xtest_contains_contained_by_with_key_transform
        memory > xtest_deep_lookup_transform
        memory > xtest_key_escape
        memory > xtest_contained_by_unsupported
        memory > xtest_json_null_different_from_sql_null
        memory > xtest_key_iexact
        memory > xtest_key_values_boolean
        memory > xtest_key_iendswith
        memory > xtest_key_values
        memory > xtest_exact_complex
        memory > xtest_deep_lookup_mixed
        memory > xtest_isnull_key_or_none
        memory > xtest_deep_values
        memory > xtest_has_key_deep
        memory > xtest_contained_by
        memory > xtest_ordering_grouping_by_key_transform
        memory > xtest_join_key_transform_annotation_expression
        memory > xtest_has_key_list
        memory > xtest_has_key_number
        memory > xtest_key_startswith
        memory > xtest_deconstruct_custom_encoder_decoder
        memory > xtest_none_key_exclude
        memory > xtest_obj_subquery_lookup
        memory > xtest_key_transform_annotation_expression
        memory > xtest_exact
        memory > xtest_order_grouping_custom_decoder
        memory > xtest_custom_encoder
        memory > xtest_nested_key_transform_annotation_expression
        memory > xtest_realistic_object
        memory > xtest_key_endswith
        memory > xtest_invalid_value
        memory > xtest_contains_primitives
        memory > xtest_null
        memory > xtest_key_transform_raw_expression
        memory > xtest_key_contains
        memory > xtest_has_any_keys
        memory > xtest_shallow_list_lookup
        memory > xtest_formfield
        memory > xtest_none_key_and_exact_lookup
        memory > xtest_isnull_key
        memory > xtest_validation_error
        memory > xtest_key_regex
        memory > xtest_deep_lookup_objs
        memory > xtest_lookup_exclude_nonexistent_key
        memory > xtest_has_key_null_value
        memory > xtest_deconstruct
        memory > xtest_key_sql_injection
        memory > xtest_key_transform_text_lookup_mixin_non_key_transform
        memory > xtest_invalid_decoder
        memory > xtest_nested_key_transform_raw_expression
        memory > xtest_key_in
        memory > xtest_has_keys
        memory > xtest_deep_lookup_array
        memory > xtest_loading
        memory > xtest_nested_key_transform_expression
        memory > xtest_contains
        memory > xtest_db_check_constraints
        memory > xtest_key_quoted_string
        memory > xtest_nested_key_transform_on_subquery
        memory > xtest_has_key
        memory > xtest_shallow_lookup_obj_target
        memory > xtest_usage_in_subquery
        memory > xtest_custom_encoder_decoder
        memory > xtest_key_sql_injection_escape
        memory > xtest_values
        memory > xtest_lookups_with_key_transform
        memory > xtest_formfield_custom_encoder_decoder
        memory > xtest_invalid_encoder
        memory > xtest_key_istartswith
        memory > xtest_icontains
        memory > xtest_shallow_obj_lookup
        memory > xtest_key_transform_expression
        memory > xtest_ordering_grouping_by_count
        memory > xtest_list
        memory > xtest_expression_wrapper_key_transform
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)) ((((xskipUnlessDBFeature)).apply ("supports_json_field"))))
              seq
                xtest_invalid_value.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "is not JSON serializable"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("uuid") (((((xuuid).xUUID)).apply ("d85e2076-b67c-4ee7-8c3a-2bf5a2cc2475"))))))
                xtest_custom_encoder_decoder.write
                  [xself]
                    memory > xvalue
                    memory > xobj
                    seq > @
                      seq
                        xvalue.write (((unsupported)).apply ("uuid") (((((xuuid).xUUID)).apply ("{d85e2076-b67c-4ee7-8c3a-2bf5a2cc2475}"))))
                        xobj.write (((unsupported)).apply ((xNullableJSONModel)) ((xvalue)))
                        bogusForceDataize.write ((((xobj).xclean_fields)).apply)
                        bogusForceDataize.write ((((xobj).xsave)).apply)
                        bogusForceDataize.write ((((xobj).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj).xvalue_custom)) ((xvalue)))
                xtest_db_check_constraints.write
                  [xself]
                    memory > xvalue
                    seq > @
                      seq
                        xvalue.write "{@!invalid json value 123 $!@#"
                        (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xDjangoJSONEncoder)) ("encode") ((xvalue)))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xIntegrityError)) ((xDataError)) ((xOperationalError)))))))
                            (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((xvalue)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_deconstruct.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write ((((xmodels).xJSONField)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((xfield).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xpath)) ("django.db.models.JSONField"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xargs)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xkwargs)) ((((unsupported)).apply)))
                xtest_deconstruct_custom_encoder_decoder.write
                  [xself]
                    memory > xfield
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xmodels).xJSONField)) ((xDjangoJSONEncoder)) ((xCustomJSONDecoder)))
                        (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xpath)) ((xargs)) ((xkwargs)))) (((((xfield).xdeconstruct)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xkwargs)) ("encoder"))) ((xDjangoJSONEncoder)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xkwargs)) ("decoder"))) ((xCustomJSONDecoder)))
                xtest_get_transforms.write
                  [xself]
                    memory > xfield
                    memory > xtransform
                    memory > xlookup_name
                    seq > @
                      seq
                        (((unsupported)).apply ((xTransform)) ((((xmodels).xJSONField).xregister_lookup)))
                          xlookup_name.write "my_transform"
                        xfield.write ((((xmodels).xJSONField)).apply)
                        xtransform.write ((((xfield).xget_transform)).apply ("my_transform"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xtransform)) ((xMyTransform)))
                        bogusForceDataize.write (((((xmodels).xJSONField).x_unregister_lookup)).apply ((xMyTransform)))
                        bogusForceDataize.write (((((xmodels).xJSONField).x_clear_cached_lookups)).apply)
                        xtransform.write ((((xfield).xget_transform)).apply ("my_transform"))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xtransform)) ((xKeyTransformFactory)))
                xtest_key_transform_text_lookup_mixin_non_key_transform.write
                  [xself]
                    memory > xmsg
                    memory > xtransform
                    seq > @
                      seq
                        xtransform.write (((xTransform)).apply ("test"))
                        xmsg.write "Transform should be an instance of KeyTransform in order to use this lookup."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xTypeError)) ((xmsg)))))
                          bogusForceDataize.write (((xKeyTransformTextLookupMixin)).apply ((xtransform)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_invalid_encoder.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "The encoder parameter must be a callable object."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply (((xmodels).xJSONField)) ((((xDjangoJSONEncoder)).apply)))
                xtest_invalid_decoder.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "The decoder parameter must be a callable object."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply (((xmodels).xJSONField)) ((((xCustomJSONDecoder)).apply)))
                xtest_validation_error.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    memory > xmsg
                    seq > @
                      seq
                        xfield.write ((((xmodels).xJSONField)).apply)
                        xmsg.write "Value must be valid JSON."
                        xvalue.write ((((xuuid).xUUID)).apply ("{d85e2076-b67c-4ee7-8c3a-2bf5a2cc2475}"))
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValidationError)) ((xmsg)))))
                          bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("uuid") ((xvalue)))) ("None: is there a None literal in the EO language?"))
                xtest_custom_encoder.write
                  [xself]
                    memory > xfield
                    memory > xvalue
                    seq > @
                      seq
                        xfield.write (((unsupported)).apply (((xmodels).xJSONField)) ((xDjangoJSONEncoder)))
                        xvalue.write ((((xuuid).xUUID)).apply ("{d85e2076-b67c-4ee7-8c3a-2bf5a2cc2475}"))
                        bogusForceDataize.write ((((xfield).xclean)).apply ((((unsupported)).apply ("uuid") ((xvalue)))) ("None: is there a None literal in the EO language?"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_formfield.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write ((((xmodels).xJSONField)).apply)
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xform_field)) (((xforms).xJSONField)))
                xtest_formfield_custom_encoder_decoder.write
                  [xself]
                    memory > xform_field
                    memory > xmodel_field
                    seq > @
                      seq
                        xmodel_field.write (((unsupported)).apply (((xmodels).xJSONField)) ((xDjangoJSONEncoder)) ((xCustomJSONDecoder)))
                        xform_field.write ((((xmodel_field).xformfield)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xform_field).xencoder)) ((xDjangoJSONEncoder)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xform_field).xdecoder)) ((xCustomJSONDecoder)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_data.write "[{\"fields\": {\"value\": %s}, \"model\": \"model_fields.jsonmodel\", \"pk\": null}]"
                xtest_values.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ("a") ("b") ("c") ("None: is there a None literal in the EO language?"))) ("{\"a\": \"b\", \"c\": null}"))) ((((unsupported)).apply ("abc") ("\"abc\""))) ((((unsupported)).apply ("{\"a\": \"a\"}") ("\"{\\\"a\\\": \\\"a\\\"}\""))))
                xtest_dumping.write
                  [xself]
                    memory > xinstance
                    memory > xdata
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xserialized)))) (((xself).xtest_values)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                          seq
                            xinstance.write (((unsupported)).apply ((xJSONModel)) ((xvalue)))
                            xdata.write ((((xserializers).xserialize)).apply ("json") ((((unsupported)).apply ((xinstance)))))
                            bogusForceDataize.write ((((xself).xassertJSONEqual)).apply ((xdata)) ((((xself).xtest_data).mod (xserialized))))
                xtest_loading.write
                  [xself]
                    memory > xinstance
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xserialized)))) (((xself).xtest_values)))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                          seq
                            xinstance.write ((((unsupported)).apply ((((xlist)).apply (((((xserializers).xdeserialize)).apply ("json") ((((xself).xtest_data).mod (xserialized))))))) (0)).xobject)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xinstance).xvalue)) ((xvalue)))
                xtest_xml_serialization.write
                  [xself]
                    memory > xtest_xml_data
                    memory > xinstance
                    memory > xnew_instance
                    memory > xdata
                    seq > @
                      seq
                        xtest_xml_data.write "<django-objects version=\"1.0\"><object model=\"model_fields.nullablejsonmodel\"><field name=\"value\" type=\"JSONField\">%s</field></object></django-objects>"
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xserialized)))) (((xself).xtest_values)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xinstance.write (((unsupported)).apply ((xNullableJSONModel)) ((xvalue)))
                              xdata.write (((unsupported)).apply (((xserializers).xserialize)) ("xml") ((((unsupported)).apply ((xinstance)))) ((((unsupported)).apply ("value"))))
                              bogusForceDataize.write ((((xself).xassertXMLEqual)).apply ((xdata)) (((xtest_xml_data).mod (xserialized))))
                              xnew_instance.write ((((unsupported)).apply ((((xlist)).apply (((((xserializers).xdeserialize)).apply ("xml") ((xdata)))))) (0)).xobject)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xnew_instance).xvalue)) (((xinstance).xvalue)))
            (((unsupported)).apply ((xTestCase)) ((((xskipUnlessDBFeature)).apply ("supports_json_field"))))
              seq
                xtest_null.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((xNullableJSONModel)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xobj).xsave)).apply)
                        bogusForceDataize.write ((((xobj).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xobj).xvalue)))
                xtest_json_null_different_from_sql_null.write
                  [xself]
                    memory > xjson_null
                    memory > xsql_null
                    seq > @
                      (((unsupported)).apply)
                        xjson_null.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((xValue)).apply ("null"))))
                        bogusForceDataize.write ((((xjson_null).xrefresh_from_db)).apply)
                        xsql_null.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xsql_null).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((xValue)).apply ("null"))))) ((((unsupported)).apply ((xjson_null)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xjson_null)))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (TRUE))) ((((unsupported)).apply ((xsql_null)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xjson_null).xvalue)) (((xsql_null).xvalue)))
                xtest_primitives.write
                  [xself]
                    memory > xvalues
                    memory > xobj
                    seq > @
                      (((unsupported)).apply)
                        xvalues.write (((unsupported)).apply (TRUE) (1) (1.45) ("String") (""))
                        (((unsupported)).apply ((xvalue)) ((xvalues)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xobj.write (((unsupported)).apply ((xJSONModel)) ((xvalue)))
                              bogusForceDataize.write ((((xobj).xsave)).apply)
                              bogusForceDataize.write ((((xobj).xrefresh_from_db)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj).xvalue)) ((xvalue)))
                xtest_dict.write
                  [xself]
                    memory > xvalues
                    memory > xobj
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("name") ("John") ("age") (20) ("height") (180.3))) ((((unsupported)).apply ("a") (TRUE) ("b") ((((unsupported)).apply ("b1") (FALSE) ("b2") ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)).apply ((xvalue)) ((xvalues)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xobj.write (((unsupported)).apply ((((xJSONModel).xobjects).xcreate)) ((xvalue)))
                              bogusForceDataize.write ((((xobj).xrefresh_from_db)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj).xvalue)) ((xvalue)))
                xtest_list.write
                  [xself]
                    memory > xvalues
                    memory > xobj
                    seq > @
                      seq
                        xvalues.write (((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ("John") (20) (180.3))) ((((unsupported)).apply (TRUE) ((((unsupported)).apply (FALSE) ("None: is there a None literal in the EO language?"))))))
                        (((unsupported)).apply ((xvalue)) ((xvalues)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xobj.write (((unsupported)).apply ((((xJSONModel).xobjects).xcreate)) ((xvalue)))
                              bogusForceDataize.write ((((xobj).xrefresh_from_db)).apply)
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj).xvalue)) ((xvalue)))
                xtest_realistic_object.write
                  [xself]
                    memory > xvalue
                    memory > xobj
                    seq > @
                      seq
                        xvalue.write (((unsupported)).apply ("name") ("John") ("age") (20) ("pets") ((((unsupported)).apply ((((unsupported)).apply ("name") ("Kit") ("type") ("cat") ("age") (2))) ((((unsupported)).apply ("name") ("Max") ("type") ("dog") ("age") (1))))) ("courses") ((((unsupported)).apply ((((unsupported)).apply ("A1") ("A2") ("A3"))) ((((unsupported)).apply ("B1") ("B2"))) ((((unsupported)).apply ("C1"))))))
                        xobj.write (((unsupported)).apply ((((xJSONModel).xobjects).xcreate)) ((xvalue)))
                        bogusForceDataize.write ((((xobj).xrefresh_from_db)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xobj).xvalue)) ((xvalue)))
            (((unsupported)).apply ((xTestCase)) ((((xskipUnlessDBFeature)).apply ("supports_json_field"))))
              seq
                xsetUpTestData.write
                  [xcls]
                    memory > xvalues
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xprimitives)) ((((unsupported)).apply (TRUE) (FALSE) ("yes") (7) (9.6))))
                        xvalues.write (((unsupported)).apply ("None: is there a None literal in the EO language?") ((((unsupported)).apply)) ((((unsupported)).apply)) ((((unsupported)).apply ("a") ("b") ("c") (14))) ((((unsupported)).apply ("a") ("b") ("c") (14) ("d") ((((unsupported)).apply ("e") ((((unsupported)).apply ("f") ("g"))))) ("h") (TRUE) ("i") (FALSE) ("j") ("None: is there a None literal in the EO language?") ("k") ((((unsupported)).apply ("l") ("m"))) ("n") ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) (FALSE))) ("o") ("\"quoted\"") ("p") (4.2) ("r") ((((unsupported)).apply ("s") (TRUE) ("t") (FALSE))))) ((((unsupported)).apply (1) ((((unsupported)).apply (2))))) ((((unsupported)).apply ("k") (TRUE) ("l") (FALSE) ("foo") ("bax"))) ((((unsupported)).apply ("foo") ("bar") ("baz") ((((unsupported)).apply ("a") ("b") ("c") ("d"))) ("bar") ((((unsupported)).apply ("foo") ("bar"))) ("bax") ((((unsupported)).apply ("foo") ("bar"))))))
                        (((unsupported)).apply (((xcls).xobjs)) ((((unsupported)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((xvalue)))) ((xvalue)) ((xvalues)))))
                        (((xconnection).xfeatures).xsupports_primitives_in_json_field).if
                          bogusForceDataize.write (((((xcls).xobjs).xextend)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((xvalue)))) ((xvalue)) (((xcls).xprimitives)))))
                        (((unsupported)).apply (((xcls).xraw_sql)) (((((xconnection).xvendor).eq "postgresql").if "%s::jsonb" "%s")))
                xtest_exact.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((unsupported)).apply)))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (2))))))
                xtest_exact_complex.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((unsupported)).apply ("a") ("b") ("c") (14))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))))))
                xtest_icontains.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("BaX"))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (6) (8))))))
                xtest_isnull.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (TRUE))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))))))
                xtest_ordering_by_transform.write
                  [xself]
                    memory > xvalues
                    memory > xmariadb
                    memory > xquery
                    memory > xexpected
                    memory > xobjs
                    seq > @
                      seq
                        xmariadb.write ((((xconnection).xvendor).eq "mysql").and ((xconnection).xmysql_is_mariadb))
                        xvalues.write (((unsupported)).apply ((((unsupported)).apply ("ord") (93) ("name") ("bar"))) ((((unsupported)).apply ("ord") (22.1) ("name") ("foo"))) ((((unsupported)).apply ("ord") ((1.neg)) ("name") ("baz"))) ((((unsupported)).apply ("ord") (21.931902) ("name") ("spam"))) ((((unsupported)).apply ("ord") ((100291029.neg)) ("name") ("eggs"))))
                        (((unsupported)).apply ((xfield_name)) ((((unsupported)).apply ("value") ("value_custom"))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfield_name)))))
                            seq
                              xobjs.write (((unsupported)).apply ((((((xNullableJSONModel).xobjects).xcreate)).apply ((((unsupported)).apply ((((unsupported)).apply ((xfield_name)) ((xvalue)))))))) ((xvalue)) ((xvalues)))
                              xquery.write ((((((((xNullableJSONModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("%s__name__isnull".mod (xfield_name))) (FALSE)))))).xorder_by)).apply (("%s__ord".mod (xfield_name))))
                              xexpected.write (((unsupported)).apply ((((unsupported)).apply ((xobjs)) (4))) ((((unsupported)).apply ((xobjs)) (2))) ((((unsupported)).apply ((xobjs)) (3))) ((((unsupported)).apply ((xobjs)) (1))) ((((unsupported)).apply ((xobjs)) (0))))
                              ((xmariadb).or (((xconnection).xvendor).eq "oracle")).if
                                xexpected.write (((unsupported)).apply ((((unsupported)).apply ((xobjs)) (2))) ((((unsupported)).apply ((xobjs)) (4))) ((((unsupported)).apply ((xobjs)) (3))) ((((unsupported)).apply ((xobjs)) (1))) ((((unsupported)).apply ((xobjs)) (0))))
                              bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xquery)) ((xexpected)))
                xtest_ordering_grouping_by_key_transform.write
                  [xself]
                    memory > xqs
                    memory > xbase_qs
                    seq > @
                      seq
                        xbase_qs.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE))
                        (((unsupported)).apply ((xqs)) ((((unsupported)).apply (((((xbase_qs).xorder_by)).apply ("value__d__0"))) (((((((unsupported)).apply (((xbase_qs).xannotate)) ((((xKeyTransform)).apply ("0") ((((xKeyTransform)).apply ("d") ("value")))))).xorder_by)).apply ("key"))))))
                          bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xqs)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                        xqs.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((((unsupported)).apply ((((((((unsupported)).apply (((((unsupported)).apply (((xqs).xfilter)) (FALSE)).xannotate)) ((((xKeyTextTransform)).apply ("f") ((((xKeyTransform)).apply ("1") ((((xKeyTransform)).apply ("d") ("value")))))))).xvalues)).apply ("key")).xannotate)) ((((xCount)).apply ("key")))).xorder_by)).apply ("count"))) ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") (0))) ((((unsupported)).apply ("g") (1))))) (((((xoperator).xitemgetter)).apply ("key") ("count"))))
                xtest_ordering_grouping_by_count.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write ((((((unsupported)).apply ((((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE)).xvalues)).apply ("value__d__0")).xannotate)) ((((xCount)).apply ("value__d__0")))).xorder_by)).apply ("count"))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply ((xqs)) ((((unsupported)).apply (0) (1))) (((((xoperator).xitemgetter)).apply ("count"))))
                xtest_order_grouping_custom_decoder.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("a") ("b"))))
                        xqs.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply (((((((unsupported)).apply ((((((xqs).xvalues)).apply ("value_custom__a")).xannotate)) ((((xCount)).apply ("id")))).xorder_by)).apply ("value_custom__a"))) ((((unsupported)).apply ((((unsupported)).apply ("value_custom__a") ("b") ("count") (1))))))
                xtest_key_transform_raw_expression.write
                  [xself]
                    memory > xexpr
                    seq > @
                      seq
                        xexpr.write (((xRawSQL)).apply (((xself).xraw_sql)) ((((unsupported)).apply ("{\"x\": \"bar\"}"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((xKeyTransform)).apply ("x") ((xexpr)))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))
                xtest_nested_key_transform_raw_expression.write
                  [xself]
                    memory > xexpr
                    seq > @
                      seq
                        xexpr.write (((xRawSQL)).apply (((xself).xraw_sql)) ((((unsupported)).apply ("{\"x\": {\"y\": \"bar\"}}"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((xKeyTransform)).apply ("y") ((((xKeyTransform)).apply ("x") ((xexpr)))))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))
                xtest_key_transform_expression.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE)).xannotate)) ((((xKeyTransform)).apply ("d") ("value"))) ((((xKeyTransform)).apply ("0") ("key"))) ((((xKeyTransform)).apply ("0") ((((xCast)).apply ("key") (((((xmodels).xJSONField)).apply))))))).xfilter)) ((((xF)).apply ("expr"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_key_transform_annotation_expression.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("d") ((((unsupported)).apply ("e") ("e"))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE)).xannotate)) ((((xF)).apply ("value__d"))) ((((xF)).apply ("key__0"))) ((((xCast)).apply ("key") (((((xmodels).xJSONField)).apply))))).xfilter)) ((((xF)).apply ("expr__1"))))) ((((unsupported)).apply ((xobj)))))
                xtest_nested_key_transform_expression.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE)).xannotate)) ((((xKeyTransform)).apply ("d") ("value"))) ((((xKeyTransform)).apply ("f") ((((xKeyTransform)).apply ("1") ("key"))))) ((((xKeyTransform)).apply ("f") ((((xKeyTransform)).apply ("1") ((((xCast)).apply ("key") (((((xmodels).xJSONField)).apply))))))))).xfilter)) ((((xF)).apply ("expr"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_nested_key_transform_annotation_expression.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("d") ((((unsupported)).apply ("e") ((((unsupported)).apply ("f") ("g"))) ((((unsupported)).apply ("f") ("g"))))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE)).xannotate)) ((((xF)).apply ("value__d"))) ((((xF)).apply ("key__1__f"))) ((((xCast)).apply ("key") (((((xmodels).xJSONField)).apply))))).xfilter)) ((((xF)).apply ("expr__2__f"))))) ((((unsupported)).apply ((xobj)))))
                xtest_nested_key_transform_on_subquery.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((unsupported)).apply (((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE)).xannotate)) ((((xSubquery)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((xOuterRef)).apply ("pk")))).xvalues)).apply ("value"))))) ((((xKeyTransform)).apply ("d") ("subquery_value"))) ((((xKeyTransform)).apply ("f") ((((xKeyTransform)).apply ("1") ("key")))))).xfilter)) ("g"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_expression_wrapper_key_transform.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xNullableJSONModel).xobjects).xannotate)) ((((unsupported)).apply ((xExpressionWrapper)) ((((xKeyTransform)).apply ("c") ("value"))) ((((xIntegerField)).apply))))).xfilter)) (FALSE))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (3) (5))))))
                xtest_has_key.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("a"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))) ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_has_key_null_value.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("j"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_has_key_deep.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ("a"))) ((((unsupported)).apply (((xself).xobjs)) (7))))) ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ((((xKeyTransform)).apply ("a") ((((xKeyTransform)).apply ("baz") ("value"))))))) ((((unsupported)).apply (((xself).xobjs)) (7))))) ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ((((xF)).apply ("value__baz__a"))))) ((((unsupported)).apply (((xself).xobjs)) (7))))) ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ((((xKeyTransform)).apply ("c") ((((xKeyTransform)).apply ("baz") ("value"))))))) ((((unsupported)).apply (((xself).xobjs)) (7))))) ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ((((xF)).apply ("value__baz__c"))))) ((((unsupported)).apply (((xself).xobjs)) (7))))) ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ("f"))) ((((unsupported)).apply (((xself).xobjs)) (4))))) ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ((((xKeyTransform)).apply ("f") ((((xKeyTransform)).apply ("1") ((((xKeyTransform)).apply ("d") ("value"))))))))) ((((unsupported)).apply (((xself).xobjs)) (4))))) ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ((((xF)).apply ("value__d__1__f"))))) ((((unsupported)).apply (((xself).xobjs)) (4))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcondition)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcondition)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xfilter)).apply ((xcondition)))) ((((unsupported)).apply ((xexpected)))))
                xtest_has_key_list.write
                  [xself]
                    memory > xtests
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((unsupported)).apply ((((unsupported)).apply ("a") (1))) ((((unsupported)).apply ("b") ("x"))))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((xQ)) ("b"))) ((((unsupported)).apply ((xQ)) ((((xKeyTransform)).apply ("b") ((((xKeyTransform)).apply (1) ("value"))))))) ((((unsupported)).apply ((xQ)) ((((xKeyTransform)).apply ("b") ((((xKeyTransform)).apply ("1") ("value"))))))) ((((unsupported)).apply ((xQ)) ((((xF)).apply ("value__1__b"))))))
                        (((unsupported)).apply ((xcondition)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcondition)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xfilter)).apply ((xcondition)))) ((((unsupported)).apply ((xobj)))))
                xtest_has_keys.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((unsupported)).apply ("a") ("c") ("h"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_has_any_keys.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((unsupported)).apply ("c") ("l"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))) ((((unsupported)).apply (((xself).xobjs)) (4))) ((((unsupported)).apply (((xself).xobjs)) (6))))))
                xtest_has_key_number.write
                  [xself]
                    memory > xtests
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("123") ("value") ("nested") ((((unsupported)).apply ("456") ("bar") ("lorem") ("abc") ("999") (TRUE))) ("array") ((((unsupported)).apply ((((unsupported)).apply ("789") ("baz") ("777") ("def") ("ipsum") (200))))) ("000") ("val"))))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((xQ)) ("123"))) ((((unsupported)).apply ((xQ)) ("456"))) ((((unsupported)).apply ((xQ)) ("789"))) ((((unsupported)).apply ((xQ)) ((((unsupported)).apply ("nested") ("123") ("array") ("000"))))) ((((unsupported)).apply ((xQ)) ((((unsupported)).apply ("lorem") ("999") ("456"))))) ((((unsupported)).apply ((xQ)) ((((unsupported)).apply ("789") ("ipsum") ("777"))))) ((((unsupported)).apply ((xQ)) ((((unsupported)).apply ("000") ("nonexistent"))))) ((((unsupported)).apply ((xQ)) ((((unsupported)).apply ("999") ("nonexistent"))))) ((((unsupported)).apply ((xQ)) ((((unsupported)).apply ("777") ("nonexistent"))))))
                        (((unsupported)).apply ((xcondition)) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xcondition)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xfilter)).apply ((xcondition)))) ((((unsupported)).apply ((xobj)))))
                xtest_contains.write
                  [xself]
                    memory > xqs
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) (((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2) (5)))).add (((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (6) (8)))))))) ((((unsupported)).apply ((((unsupported)).apply ("baz") ((((unsupported)).apply ("a") ("b") ("c") ("d"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ((((unsupported)).apply ("baz") ((((unsupported)).apply ("a") ("b"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ((((unsupported)).apply ("baz") ((((unsupported)).apply ("c") ("d"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ((((unsupported)).apply ("k") (TRUE) ("l") (FALSE))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (6))))))) ((((unsupported)).apply ((((unsupported)).apply ("d") ((((unsupported)).apply ("e") ((((unsupported)).apply ("f") ("g"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))) ((((unsupported)).apply ((((unsupported)).apply ("d") ((((unsupported)).apply ("e"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))) ((((unsupported)).apply ((((unsupported)).apply ("d") ((((unsupported)).apply ((((unsupported)).apply ("f") ("g"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))) ((((unsupported)).apply ((((unsupported)).apply (1) ((((unsupported)).apply (2))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (5))))))) ((((unsupported)).apply ((((unsupported)).apply (1))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (5))))))) ((((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply (2))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (5))))))) ((((unsupported)).apply ((((unsupported)).apply ("n") ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) (FALSE))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))) ((((unsupported)).apply ((((unsupported)).apply ("j") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xqs.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xqs)) ((xexpected)))
                xtest_contains_unsupported.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "contains lookup is not supported on this database backend."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) ((xmsg)))))
                          bogusForceDataize.write ((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((unsupported)).apply ("baz") ((((unsupported)).apply ("a") ("b") ("c") ("d")))))).xget)).apply)
                xtest_contains_primitives.write
                  [xself]
                    memory > xqs
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xvalue)) (((xself).xprimitives)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            seq
                              xqs.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((xvalue)))
                              bogusForceDataize.write ((((xself).xassertIs)).apply (((((xqs).xexists)).apply)) (TRUE))
                xtest_contained_by.write
                  [xself]
                    memory > xqs
                    seq > @
                      (((unsupported)).apply)
                        xqs.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((unsupported)).apply ("a") ("b") ("c") (14) ("h") (TRUE))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xqs)) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (2) (4))))))
                xtest_contained_by_unsupported.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "contained_by lookup is not supported on this database backend."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xNotSupportedError)) ((xmsg)))))
                          bogusForceDataize.write ((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((unsupported)).apply ("a") ("b")))).xget)).apply)
                xtest_deep_values.write
                  [xself]
                    memory > xqs
                    memory > xexpected_objs
                    seq > @
                      seq
                        xqs.write (((((xNullableJSONModel).xobjects).xvalues_list)).apply ("value__k__l"))
                        xexpected_objs.write ((((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?")))).mul (((xlen)).apply (((xself).xobjs))))
                        (((unsupported)).apply ((((unsupported)).apply ((xexpected_objs)) (4))) ((((unsupported)).apply ("m"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xqs)) ((xexpected_objs)))
                xtest_deep_distinct.write
                  [xself]
                    memory > xquery
                    seq > @
                      (((unsupported)).apply)
                        xquery.write ((((((((xNullableJSONModel).xobjects).xdistinct)).apply ("value__k__l")).xvalues_list)).apply ("value__k__l"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xquery)) ((((unsupported)).apply ((((unsupported)).apply ("m"))) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))))
                xtest_isnull_key.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (TRUE))) (((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (3)))).add (((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (5)))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (TRUE))) (((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (4)))).add (((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (5)))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))) ((((unsupported)).apply (((xself).xobjs)) (4))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (FALSE))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_isnull_key_or_none.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("a") ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xfilter)).apply (((((unsupported)).apply ((xQ)) (TRUE)).or (((unsupported)).apply ((xQ)) ("None: is there a None literal in the EO language?")))))) ((((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (3)))).add (((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (5))))).add (((unsupported)).apply ((xobj))))))
                xtest_none_key.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_none_key_exclude.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("j") (1))))
                        (((xconnection).xvendor).eq "oracle").if
                          bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xexclude)) ("None: is there a None literal in the EO language?"))) ((((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (1) (4)))).add (((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (5))))).add (((unsupported)).apply ((xobj))))))
                          bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xexclude)) ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((xobj)))))
                xtest_shallow_list_lookup.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (1))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (5))))))
                xtest_shallow_obj_lookup.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("b"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))) ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_obj_subquery_lookup.write
                  [xself]
                    memory > xqs
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply (((((unsupported)).apply ((((xNullableJSONModel).xobjects).xannotate)) ((((xSubquery)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((xOuterRef)).apply ("pk")))).xvalues)).apply ("value")))))).xfilter)) ("b"))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((xqs)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))) ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_deep_lookup_objs.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("m"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_shallow_lookup_obj_target.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((unsupported)).apply ("l") ("m"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_deep_lookup_array.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (2))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (5))))))
                xtest_deep_lookup_mixed.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("g"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_deep_lookup_transform.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (2))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))) ((((unsupported)).apply (((xself).xobjs)) (4))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (2.33))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (3))) ((((unsupported)).apply (((xself).xobjs)) (4))))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (5)).xexists)).apply)) (FALSE))
                xtest_lookup_exclude.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ("b"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))))))) ((((unsupported)).apply ((((unsupported)).apply ((xQ)) ("bax"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))) ((((unsupported)).apply (((xself).xobjs)) (7))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xcondition)) ((xexpected)))) ((xtests)))
                          seq
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xexclude)).apply ((xcondition)))) ((xexpected)))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xfilter)).apply (((xcondition).neg)))) ((xexpected)))
                xtest_lookup_exclude_nonexistent_key.write
                  [xself]
                    memory > xcondition
                    memory > xobjs_with_different_value
                    memory > xobjs_with_value
                    seq > @
                      seq
                        xcondition.write (((unsupported)).apply ((xQ)) ("bax"))
                        xobjs_with_value.write (((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (6))))
                        xobjs_with_different_value.write (((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (0))) ((((unsupported)).apply (((xself).xobjs)) (7))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xexclude)).apply ((xcondition)))) ((xobjs_with_different_value)))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xexclude)).apply (((xcondition).neg)))) ((xobjs_with_value)))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((((xNullableJSONModel).xobjects).xfilter)).apply (((xcondition).or ((xcondition).neg))))) (((xobjs_with_value).add (xobjs_with_different_value))))
                        bogusForceDataize.write ((((xself).xassertCountEqual)).apply ((((((xNullableJSONModel).xobjects).xexclude)).apply (((xcondition).and ((xcondition).neg))))) (((xobjs_with_value).add (xobjs_with_different_value))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xexclude)).apply (((xcondition).and (((unsupported)).apply ((xQ)) (FALSE)))))) (((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (0) (6)))).add (((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (7)))))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xfilter)).apply (((xcondition).and (((unsupported)).apply ((xQ)) (FALSE)))))) ((xobjs_with_value)))
                xtest_usage_in_subquery.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (14))))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (3) (5))))))
                xtest_array_key_contains.write
                  [xself]
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("bar") ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ((((unsupported)).apply ("bar"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("ar") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ((xvalue)))) ((xexpected)))
                xtest_key_iexact.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("BaR")).xexists)).apply)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("\"BaR\"")).xexists)).apply)) (FALSE))
                xtest_key_in.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("value__c__in") ((((unsupported)).apply (14))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (3) (5))))))) ((((unsupported)).apply ("value__c__in") ((((unsupported)).apply (14) (15))) ((((unsupported)).apply (((xself).xobjs)) ((((unsupported)).apply (3) (5))))))) ((((unsupported)).apply ("value__0__in") ((((unsupported)).apply (1))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (5))))))) ((((unsupported)).apply ("value__0__in") ((((unsupported)).apply (1) (3))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (5))))))) ((((unsupported)).apply ("value__foo__in") ((((unsupported)).apply ("bar"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("value__foo__in") ((((unsupported)).apply ((((xKeyTransform)).apply ("foo") ((((xKeyTransform)).apply ("bax") ("value"))))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("value__foo__in") ((((unsupported)).apply ((((xF)).apply ("value__bax__foo"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("value__foo__in") ((((unsupported)).apply ((((xKeyTransform)).apply ("foo") ((((xKeyTransform)).apply ("bax") ("value"))))) ("baz"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("value__foo__in") ((((unsupported)).apply ((((xF)).apply ("value__bax__foo"))) ("baz"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("value__foo__in") ((((unsupported)).apply ("bar") ("baz"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("value__bar__in") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("value__bar__in") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("a"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("value__bax__in") ((((unsupported)).apply ((((unsupported)).apply ("foo") ("bar"))) ((((unsupported)).apply ("a") ("b"))))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (7))))))) ((((unsupported)).apply ("value__h__in") ((((unsupported)).apply (TRUE) ("foo"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))) ((((unsupported)).apply ("value__i__in") ((((unsupported)).apply (FALSE) ("foo"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xvalue)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlookup)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((((xNullableJSONModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xvalue)))))))) ((xexpected)))
                xtest_key_values.write
                  [xself]
                    memory > xqs
                    memory > xtests
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (TRUE))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("value__a") ("b"))) ((((unsupported)).apply ("value__c") (14))) ((((unsupported)).apply ("value__d") ((((unsupported)).apply ("e") ((((unsupported)).apply ("f") ("g"))))))) ((((unsupported)).apply ("value__h") (TRUE))) ((((unsupported)).apply ("value__i") (FALSE))) ((((unsupported)).apply ("value__j") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("value__k") ((((unsupported)).apply ("l") ("m"))))) ((((unsupported)).apply ("value__n") ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) (FALSE))))) ((((unsupported)).apply ("value__p") (4.2))) ((((unsupported)).apply ("value__r") ((((unsupported)).apply ("s") (TRUE) ("t") (FALSE))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlookup)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply (((xqs).xvalues_list)) ((xlookup)) (TRUE)).xget)).apply)) ((xexpected)))
                xtest_key_values_boolean.write
                  [xself]
                    memory > xqs
                    memory > xtests
                    seq > @
                      seq
                        xqs.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) (TRUE) (FALSE))
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("value__h") (TRUE))) ((((unsupported)).apply ("value__i") (FALSE))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xexpected)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlookup)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply (((xqs).xvalues_list)) ((xlookup)) (TRUE)).xget)).apply)) ((xexpected)))
                xtest_key_contains.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("ar")).xexists)).apply)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("bar")).xexists)).apply)) (TRUE))
                xtest_key_icontains.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("Ar")).xexists)).apply)) (TRUE))
                xtest_key_startswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("b")).xexists)).apply)) (TRUE))
                xtest_key_istartswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("B")).xexists)).apply)) (TRUE))
                xtest_key_endswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("r")).xexists)).apply)) (TRUE))
                xtest_key_iendswith.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("R")).xexists)).apply)) (TRUE))
                xtest_key_regex.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("^bar$")).xexists)).apply)) (TRUE))
                xtest_key_iregex.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertIs)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("^bAr$")).xexists)).apply)) (TRUE))
                xtest_key_quoted_string.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("\"quoted\"")).xget)).apply)) ((((unsupported)).apply (((xself).xobjs)) (4))))
                xtest_key_sql_injection.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((xCaptureQueriesContext)).apply ((xconnection)))) ((xqueries)))
                          bogusForceDataize.write ((((xself).xassertIs)).apply (((((((((xNullableJSONModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ("value__test' = '\"a\"') OR 1 = 1 OR ('d") ("x")))))).xexists)).apply)) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (".\"value\" -> 'test'' = ''\"a\"'') OR 1 = 1 OR (''d') = '\"x\"' ") ((((unsupported)).apply ((((unsupported)).apply ((xqueries)) (0))) ("sql"))))
                xtest_key_sql_injection_escape.write
                  [xself]
                    memory > xquery
                    seq > @
                      (((unsupported)).apply)
                        xquery.write (((xstr)).apply (((((((xJSONModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ("value__test\") = '\"a\"' OR 1 = 1 OR (\"d") ("x")))))).xquery)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("\"test\\\"") ((xquery)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("\\\"d") ((xquery)))
                xtest_key_escape.write
                  [xself]
                    memory > xobj
                    seq > @
                      seq
                        xobj.write (((unsupported)).apply ((((xNullableJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("%total") (10))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((((((xNullableJSONModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ("value__%total") (10)))))).xget)).apply)) ((xobj)))
                xtest_none_key_and_exact_lookup.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply ((((xNullableJSONModel).xobjects).xfilter)) ("b") ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ((((unsupported)).apply (((xself).xobjs)) (4))))))
                xtest_lookups_with_key_transform.write
                  [xself]
                    memory > xtests
                    seq > @
                      seq
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("value__baz__has_key") ("c"))) ((((unsupported)).apply ("value__baz__has_keys") ((((unsupported)).apply ("a") ("c"))))) ((((unsupported)).apply ("value__baz__has_any_keys") ((((unsupported)).apply ("a") ("x"))))) ((((unsupported)).apply ("value__has_key") ((((xKeyTextTransform)).apply ("foo") ("value"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xvalue)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlookup)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((((((xNullableJSONModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xvalue))))))).xexists)).apply)) (TRUE))
                xtest_contains_contained_by_with_key_transform.write
                  [xself]
                    memory > xtests
                    seq > @
                      (((unsupported)).apply)
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ("value__d__contains") ("e"))) ((((unsupported)).apply ("value__d__contains") ((((unsupported)).apply ((((unsupported)).apply ("f") ("g"))))))) ((((unsupported)).apply ("value__contains") ((((xKeyTransform)).apply ("bax") ("value"))))) ((((unsupported)).apply ("value__contains") ((((xF)).apply ("value__bax"))))) ((((unsupported)).apply ("value__baz__contains") ((((unsupported)).apply ("a") ("b"))))) ((((unsupported)).apply ("value__baz__contained_by") ((((unsupported)).apply ("a") ("b") ("c") ("d") ("e") ("f"))))) ((((unsupported)).apply ("value__contained_by") ((((xKeyTransform)).apply ("x") ((((xRawSQL)).apply (((xself).xraw_sql)) ((((unsupported)).apply ("{\"x\": {\"a\": \"b\", \"c\": 1, \"d\": \"e\"}}"))))))))))
                        ((((xconnection).xfeatures).xjson_key_contains_list_matching_requires_list).not).if
                          bogusForceDataize.write ((((xtests).xappend)).apply ((((unsupported)).apply ("value__d__contains") ((((unsupported)).apply ("f") ("g"))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xvalue)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xlookup)) ((xvalue)))))
                            bogusForceDataize.write ((((xself).xassertIs)).apply (((((((((xNullableJSONModel).xobjects).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply ((xlookup)) ((xvalue))))))).xexists)).apply)) (TRUE))
                xtest_join_key_transform_annotation_expression.write
                  [xself]
                    memory > xrelated_obj
                    seq > @
                      seq
                        xrelated_obj.write (((unsupported)).apply ((((xRelatedJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("d") ((((unsupported)).apply ("f") ("e"))))) ((((unsupported)).apply (((xself).xobjs)) (4))))
                        (((unsupported)).apply ((((xRelatedJSONModel).xobjects).xcreate)) ((((unsupported)).apply ("d") ((((unsupported)).apply ("e") ("f"))))) ((((unsupported)).apply (((xself).xobjs)) (4))))
                        bogusForceDataize.write ((((xself).xassertSequenceEqual)).apply ((((unsupported)).apply (((((unsupported)).apply ((((xRelatedJSONModel).xobjects).xannotate)) ((((xF)).apply ("value__d"))) ((((xF)).apply ("json_model__value__d"))) ((((xF)).apply ("key__1"))) ((((xCast)).apply ("key") (((((xmodels).xJSONField)).apply))))).xfilter)) ((((xF)).apply ("related_key__0"))))) ((((unsupported)).apply ((xrelated_obj)))))