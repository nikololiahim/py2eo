memory > xExpressions
memory > xtable
memory > xPerson
memory > xstr
memory > xIndexName
memory > xcolumn_name
memory > xMockReference
memory > xsuper
memory > xExpressionList
memory > xTableTests
memory > xIndexExpression
memory > xSimpleTestCase
memory > xTable
memory > xColumnsTests
memory > xColumns
memory > xQuery
memory > xconnection
memory > xIndexNameTests
memory > xrepr
memory > xStatement
memory > xTransactionTestCase
memory > xForeignKeyName
memory > xF
memory > xUpper
memory > xcolumn
[] > test_ddl_references
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_references_column
        memory > x__str__
        memory > xrename_table_references
        memory > xrename_column_references
        memory > xtest_rename_column_references
        memory > xtest_repr
        memory > xsetUp
        memory > xtest_str
        memory > xtest_rename_table_references_without_alias
        memory > x__init__
        memory > xreferences_column
        memory > xreferences_table
        memory > xavailable_apps
        memory > xtest_rename_table_references
        memory > xtest_references_table
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xreference)) ((((xTable)).apply ("table") ((((unsupported)).apply (((((xtable).xupper)).apply)))))))
                xtest_references_table.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply (TRUE) ((((((xself).xreference).xreferences_table)).apply ("table"))))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_table)).apply ("other"))) (FALSE))
                xtest_rename_table_references.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xreference).xrename_table_references)).apply ("other") ("table"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_table)).apply ("table"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_table)).apply ("other"))) (FALSE))
                        bogusForceDataize.write (((((xself).xreference).xrename_table_references)).apply ("table") ("other"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_table)).apply ("table"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_table)).apply ("other"))) (TRUE))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xself).xreference)))) ("<Table 'TABLE'>"))
                xtest_str.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xself).xreference)))) ("TABLE"))
            (((unsupported)).apply ((xTableTests)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xreference)) ((((xColumns)).apply ("table") ((((unsupported)).apply ("first_column") ("second_column"))) ((((unsupported)).apply (((((xcolumn).xupper)).apply)))))))
                xtest_references_column.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("other") ("first_column"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("table") ("third_column"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("table") ("first_column"))) (TRUE))
                xtest_rename_column_references.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xreference).xrename_column_references)).apply ("other") ("first_column") ("third_column"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("table") ("first_column"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("table") ("third_column"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("other") ("third_column"))) (FALSE))
                        bogusForceDataize.write (((((xself).xreference).xrename_column_references)).apply ("table") ("third_column") ("first_column"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("table") ("first_column"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("table") ("third_column"))) (FALSE))
                        bogusForceDataize.write (((((xself).xreference).xrename_column_references)).apply ("table") ("first_column") ("third_column"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("table") ("first_column"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("table") ("third_column"))) (TRUE))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xself).xreference)))) ("<Columns 'FIRST_COLUMN, SECOND_COLUMN'>"))
                xtest_str.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xself).xreference)))) ("FIRST_COLUMN, SECOND_COLUMN"))
            (((unsupported)).apply ((xColumnsTests)))
              seq
                xsetUp.write
                  [xself]
                    memory > xcreate_index_name
                    seq > @
                      seq
                        xcreate_index_name.write
                          [xtable_name xcolumn_names xsuffix]
                            seq > @
                              (((unsupported)).apply ((((", ".xjoin)).apply ((((unsupported)).apply (("%s_%s_%s".mod (((unsupported)).apply ((xtable_name)) ((xcolumn_name)) ((xsuffix))))) ((xcolumn_name)) ((xcolumn_names)))))))
                        (((unsupported)).apply (((xself).xreference)) ((((xIndexName)).apply ("table") ((((unsupported)).apply ("first_column") ("second_column"))) ("suffix") ((xcreate_index_name)))))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xself).xreference)))) ("<IndexName 'table_first_column_suffix, table_second_column_suffix'>"))
                xtest_str.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xself).xreference)))) ("table_first_column_suffix, table_second_column_suffix"))
            (((unsupported)).apply ((xIndexNameTests)))
              seq
                xsetUp.write
                  [xself]
                    memory > xcreate_foreign_key_name
                    seq > @
                      seq
                        xcreate_foreign_key_name.write
                          [xtable_name xcolumn_names xsuffix]
                            seq > @
                              (((unsupported)).apply ((((", ".xjoin)).apply ((((unsupported)).apply (("%s_%s_%s".mod (((unsupported)).apply ((xtable_name)) ((xcolumn_name)) ((xsuffix))))) ((xcolumn_name)) ((xcolumn_names)))))))
                        (((unsupported)).apply (((xself).xreference)) ((((xForeignKeyName)).apply ("table") ((((unsupported)).apply ("first_column") ("second_column"))) ("to_table") ((((unsupported)).apply ("to_first_column") ("to_second_column"))) ("%(to_table)s_%(to_column)s_fk") ((xcreate_foreign_key_name)))))
                xtest_references_table.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xtest_references_table)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_table)).apply ("to_table"))) (TRUE))
                xtest_references_column.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xtest_references_column)).apply)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("to_table") ("second_column"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("to_table") ("to_second_column"))) (TRUE))
                xtest_rename_table_references.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xtest_rename_table_references)).apply)
                        bogusForceDataize.write (((((xself).xreference).xrename_table_references)).apply ("to_table") ("other_to_table"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_table)).apply ("other_to_table"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_table)).apply ("to_table"))) (FALSE))
                xtest_rename_column_references.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xtest_rename_column_references)).apply)
                        bogusForceDataize.write (((((xself).xreference).xrename_column_references)).apply ("to_table") ("second_column") ("third_column"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("table") ("second_column"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("to_table") ("to_second_column"))) (TRUE))
                        bogusForceDataize.write (((((xself).xreference).xrename_column_references)).apply ("to_table") ("to_first_column") ("to_third_column"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("to_table") ("to_first_column"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xreference).xreferences_column)).apply ("to_table") ("to_third_column"))) (TRUE))
                xtest_repr.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xself).xreference)))) ("<ForeignKeyName 'table_first_column_to_table_to_first_column_fk, table_second_column_to_table_to_first_column_fk'>"))
                xtest_str.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xself).xreference)))) ("table_first_column_to_table_to_first_column_fk, table_second_column_to_table_to_first_column_fk"))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xrepresentation xreferenced_tables xreferenced_columns]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xrepresentation)) ((xrepresentation)))
                        (((unsupported)).apply (((xself).xreferenced_tables)) ((xreferenced_tables)))
                        (((unsupported)).apply (((xself).xreferenced_columns)) ((xreferenced_columns)))
                xreferences_table.write
                  [xself xtable]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xtable)) (((xself).xreferenced_tables)))))
                xreferences_column.write
                  [xself xtable xcolumn]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xtable)) ((xcolumn)))) (((xself).xreferenced_columns)))))
                xrename_table_references.write
                  [xself xold_table xnew_table]
                    seq > @
                      (((unsupported)).apply ((xold_table)) (((xself).xreferenced_tables))).if
                        seq
                          bogusForceDataize.write (((((xself).xreferenced_tables).xremove)).apply ((xold_table)))
                          bogusForceDataize.write (((((xself).xreferenced_tables).xadd)).apply ((xnew_table)))
                xrename_column_references.write
                  [xself xtable xold_column xnew_column]
                    memory > xcolumn
                    seq > @
                      seq
                        xcolumn.write (((unsupported)).apply ((xtable)) ((xold_column)))
                        (((unsupported)).apply ((xcolumn)) (((xself).xreferenced_columns))).if
                          seq
                            bogusForceDataize.write (((((xself).xreferenced_columns).xremove)).apply ((xcolumn)))
                            bogusForceDataize.write (((((xself).xreferenced_columns).xadd)).apply ((((unsupported)).apply ((xtable)) ((xnew_column)))))
                x__str__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xrepresentation)))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_references_table.write
                  [xself]
                    memory > xstatement
                    seq > @
                      seq
                        xstatement.write (((unsupported)).apply ((xStatement)) ("") ((((xMockReference)).apply ("") ((((unsupported)).apply ("table"))) ((((unsupported)).apply)))) (""))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xstatement).xreferences_table)).apply ("table"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xstatement).xreferences_table)).apply ("other"))) (FALSE))
                xtest_references_column.write
                  [xself]
                    memory > xstatement
                    seq > @
                      seq
                        xstatement.write (((unsupported)).apply ((xStatement)) ("") ((((xMockReference)).apply ("") ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("table") ("column"))))))) (""))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xstatement).xreferences_column)).apply ("table") ("column"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xstatement).xreferences_column)).apply ("other") ("column"))) (FALSE))
                xtest_rename_table_references.write
                  [xself]
                    memory > xreference
                    memory > xstatement
                    seq > @
                      seq
                        xreference.write (((xMockReference)).apply ("") ((((unsupported)).apply ("table"))) ((((unsupported)).apply)))
                        xstatement.write (((unsupported)).apply ((xStatement)) ("") ((xreference)) (""))
                        bogusForceDataize.write ((((xstatement).xrename_table_references)).apply ("table") ("other"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xreference).xreferenced_tables)) ((((unsupported)).apply ("other"))))
                xtest_rename_column_references.write
                  [xself]
                    memory > xreference
                    memory > xstatement
                    seq > @
                      seq
                        xreference.write (((xMockReference)).apply ("") ((((unsupported)).apply)) ((((unsupported)).apply ((((unsupported)).apply ("table") ("column"))))))
                        xstatement.write (((unsupported)).apply ((xStatement)) ("") ((xreference)) (""))
                        bogusForceDataize.write ((((xstatement).xrename_column_references)).apply ("table") ("column") ("other"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xreference).xreferenced_columns)) ((((unsupported)).apply ((((unsupported)).apply ("table") ("other"))))))
                xtest_repr.write
                  [xself]
                    memory > xreference
                    memory > xstatement
                    seq > @
                      seq
                        xreference.write (((xMockReference)).apply ("reference") ((((unsupported)).apply)) ((((unsupported)).apply)))
                        xstatement.write (((unsupported)).apply ((xStatement)) ("%(reference)s - %(non_reference)s") ((xreference)) ("non_reference"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xstatement)))) ("<Statement 'reference - non_reference'>"))
                xtest_str.write
                  [xself]
                    memory > xreference
                    memory > xstatement
                    seq > @
                      seq
                        xreference.write (((xMockReference)).apply ("reference") ((((unsupported)).apply)) ((((unsupported)).apply)))
                        xstatement.write (((unsupported)).apply ((xStatement)) ("%(reference)s - %(non_reference)s") ((xreference)) ("non_reference"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xstatement)))) ("reference - non_reference"))
            (((unsupported)).apply ((xTransactionTestCase)))
              seq
                xavailable_apps.write (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    memory > xcompiler
                    seq > @
                      seq
                        xcompiler.write (((((((((xPerson).xobjects).xall)).apply).xquery).xget_compiler)).apply (((xconnection).xalias)))
                        (((unsupported)).apply (((xself).xeditor)) (((((xconnection).xschema_editor)).apply)))
                        (((unsupported)).apply (((xself).xexpressions)) ((((unsupported)).apply ((xExpressions)) ((((xPerson).x_meta).xdb_table)) (((((((xExpressionList)).apply ((((xIndexExpression)).apply ((((xF)).apply ("first_name"))))) ((((xIndexExpression)).apply (((((((xF)).apply ("last_name")).xdesc)).apply)))) ((((xIndexExpression)).apply ((((xUpper)).apply ("last_name")))))).xresolve_expression)).apply (((xcompiler).xquery)))) ((xcompiler)) ((((xself).xeditor).xquote_value)))))
                xtest_references_table.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xexpressions).xreferences_table)).apply ((((xPerson).x_meta).xdb_table)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xexpressions).xreferences_table)).apply ("other"))) (FALSE))
                xtest_references_column.write
                  [xself]
                    memory > xtable
                    seq > @
                      seq
                        xtable.write (((xPerson).x_meta).xdb_table)
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xexpressions).xreferences_column)).apply ((xtable)) ("first_name"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xexpressions).xreferences_column)).apply ((xtable)) ("last_name"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xexpressions).xreferences_column)).apply ((xtable)) ("other"))) (FALSE))
                xtest_rename_table_references.write
                  [xself]
                    memory > xtable
                    seq > @
                      seq
                        xtable.write (((xPerson).x_meta).xdb_table)
                        bogusForceDataize.write (((((xself).xexpressions).xrename_table_references)).apply ((xtable)) ("other"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xexpressions).xreferences_table)).apply ((xtable)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xexpressions).xreferences_table)).apply ("other"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (("%s.%s".mod (((unsupported)).apply ((((((xself).xeditor).xquote_name)).apply ("other"))) ((((((xself).xeditor).xquote_name)).apply ("first_name")))))) ((((xstr)).apply (((xself).xexpressions)))))
                xtest_rename_table_references_without_alias.write
                  [xself]
                    memory > xcompiler
                    memory > xexpected_str
                    memory > xtable
                    memory > xexpressions
                    seq > @
                      seq
                        xcompiler.write (((unsupported)).apply (((((unsupported)).apply ((xQuery)) ((xPerson)) (FALSE)).xget_compiler)) ((xconnection)))
                        xtable.write (((xPerson).x_meta).xdb_table)
                        xexpressions.write (((unsupported)).apply ((xExpressions)) ((xtable)) (((((((xExpressionList)).apply ((((xIndexExpression)).apply ((((xUpper)).apply ("last_name"))))) ((((xIndexExpression)).apply ((((xF)).apply ("first_name")))))).xresolve_expression)).apply (((xcompiler).xquery)))) ((xcompiler)) ((((xself).xeditor).xquote_value)))
                        bogusForceDataize.write ((((xexpressions).xrename_table_references)).apply ((xtable)) ("other"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xexpressions).xreferences_table)).apply ((xtable)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xexpressions).xreferences_table)).apply ("other"))) (TRUE))
                        xexpected_str.write ("(UPPER(%s)), %s".mod (((unsupported)).apply ((((((xself).xeditor).xquote_name)).apply ("last_name"))) ((((((xself).xeditor).xquote_name)).apply ("first_name")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xexpressions)))) ((xexpected_str)))
                xtest_rename_column_references.write
                  [xself]
                    memory > xtable
                    seq > @
                      seq
                        xtable.write (((xPerson).x_meta).xdb_table)
                        bogusForceDataize.write (((((xself).xexpressions).xrename_column_references)).apply ((xtable)) ("first_name") ("other"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xexpressions).xreferences_column)).apply ((xtable)) ("other"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xexpressions).xreferences_column)).apply ((xtable)) ("first_name"))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (("%s.%s".mod (((unsupported)).apply ((((((xself).xeditor).xquote_name)).apply ((xtable)))) ((((((xself).xeditor).xquote_name)).apply ("other")))))) ((((xstr)).apply (((xself).xexpressions)))))
                xtest_str.write
                  [xself]
                    memory > xtable_name
                    memory > xexpected_str
                    seq > @
                      seq
                        xtable_name.write (((((xself).xeditor).xquote_name)).apply ((((xPerson).x_meta).xdb_table)))
                        xexpected_str.write ("%s.%s, %s.%s DESC, (UPPER(%s.%s))".mod (((unsupported)).apply ((xtable_name)) ((((((xself).xeditor).xquote_name)).apply ("first_name"))) ((xtable_name)) ((((((xself).xeditor).xquote_name)).apply ("last_name"))) ((xtable_name)) ((((((xself).xeditor).xquote_name)).apply ("last_name")))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xself).xexpressions)))) ((xexpected_str)))