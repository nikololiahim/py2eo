memory > xlist
memory > xlength
memory > xBufferSizeTest
memory > xrange
memory > xdivmod
memory > xr
memory > xsupport
memory > xunittest
memory > xstaticmethod
memory > xlen
memory > x__name__
memory > xio
memory > xq
[] > test_bufio
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_nullpat
        memory > xpyio
        memory > xdrive_one
        memory > xopen
        memory > xtest_primepat
        memory > xtry_one
        memory > xlengths
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xlengths.write ((((xlist)).apply ((((xrange)).apply (1) (257)))).add (((unsupported)).apply (512) (1000) (1024) (2048) (4096) (8192) (10000) (16384) (32768) (65536) (1000000)))
            (((unsupported)).apply)
              seq
                xtry_one.write
                  [xself xs]
                    memory > xline
                    memory > xf
                    seq > @
                      seq
                        bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                        xf.write ((((xself).xopen)).apply ("wb") (((xsupport).xTESTFN)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply ((xs)))
                            bogusForceDataize.write ((((xf).xwrite)).apply ("n"))
                            bogusForceDataize.write ((((xf).xwrite)).apply ((xs)))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            xf.write (((xopen)).apply (((xsupport).xTESTFN)) ("rb"))
                            xline.write ((((xf).xreadline)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xline)) (((xs).add "n")))
                            xline.write ((((xf).xreadline)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xline)) ((xs)))
                            xline.write ((((xf).xreadline)).apply)
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((xline)))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                          bogusForceDataize.write ((((xsupport).xunlink)).apply (((xsupport).xTESTFN)))
                xdrive_one.write
                  [xself xpattern]
                    memory > xteststring
                    seq > @
                      (((unsupported)).apply ((xlength)) ((xlengths)))
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((xq)) ((xr)))) ((((xdivmod)).apply ((xlength)) ((((xlen)).apply ((xpattern)))))))
                          xteststring.write (((xpattern).mul (xq)).add (((unsupported)).apply ((xpattern)) ((((unsupported)).apply ((xr))))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xteststring)))) ((xlength)))
                          bogusForceDataize.write ((((xself).xtry_one)).apply ((xteststring)))
                          bogusForceDataize.write ((((xself).xtry_one)).apply (((xteststring).add "x")))
                          bogusForceDataize.write ((((xself).xtry_one)).apply ((((unsupported)).apply ((xteststring)) ((((unsupported)).apply ((1.neg)))))))
                xtest_primepat.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdrive_one)).apply ("123456789000010203040506"))
                xtest_nullpat.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdrive_one)).apply (("0".mul 1000)))
            (((unsupported)).apply ((xBufferSizeTest)) (((xunittest).xTestCase)))
              xopen.write ((xio).xopen)
            (((unsupported)).apply ((xBufferSizeTest)) (((xunittest).xTestCase)))
              xopen.write (((xstaticmethod)).apply (((xpyio).xopen)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)