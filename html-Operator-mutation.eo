memory > xp2
memory > xrange
memory > xpunycode
memory > xtrail
memory > xp
memory > xre
memory > xopening
memory > xunquote
memory > xmap
memory > xkwargs
memory > xp1
memory > xword
memory > xUnicodeError
memory > xk
memory > x_lazy_re_compile
memory > xparse_qsl
memory > xz
memory > xValueError
memory > xquote
memory > xstr
memory > xq
memory > xself
memory > xHTMLParser
memory > xRFC3986_GENDELIMS
memory > xurlencode
memory > xurlunsplit
memory > xSafeData
memory > xlead
memory > xscheme
memory > xmax
memory > xRFC3986_SUBDELIMS
memory > xhasattr
memory > xnormalize_newlines
memory > xsuper
memory > xclosing
memory > xlocal
memory > xmark_safe
memory > xargs
memory > xDjangoJSONEncoder
memory > xSafeString
memory > xMLStripper
memory > xv
memory > xhtml
memory > xord
memory > xUrlizer
memory > xjson
memory > xurlsplit
memory > xisinstance
memory > xPromise
memory > xlen
[] > html
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xconditional_escape
        memory > xurl_template
        memory > x__call__
        memory > x_strip_once
        memory > xhandle_entityref
        memory > xavoid_wrapping
        memory > xsimple_url_re
        memory > xformat_html_join
        memory > xmailto_template
        memory > x__init__
        memory > xformat_html
        memory > xtrailing_punctuation_chars
        memory > xstrip_tags
        memory > xurlize
        memory > xtrim_url
        memory > xurlizer
        memory > xlinebreaks
        memory > xescapejs
        memory > xis_email_simple
        memory > xhandle_word
        memory > xhandle_data
        memory > x_json_script_escapes
        memory > xwrapping_punctuation
        memory > xsimple_url_2_re
        memory > xjson_script
        memory > xtrim_punctuation
        memory > xescape
        memory > x_js_escapes
        memory > xhandle_charref
        memory > xstrip_spaces_between_tags
        memory > xsmart_urlquote
        memory > xget_data
        memory > xword_split_re
        memory > xhtml_safe
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            xescape.write
              [xtext]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xSafeString)).apply (((((xhtml).xescape)).apply ((((xstr)).apply ((xtext)))))))))
            x_js_escapes.write (((unsupported)).apply ((((xord)).apply ("\\"))) ((((unsupported)).apply)) ((((xord)).apply ("'"))) ((((unsupported)).apply)) ((((xord)).apply ("\""))) ((((unsupported)).apply)) ((((xord)).apply (">"))) ((((unsupported)).apply)) ((((xord)).apply ("<"))) ((((unsupported)).apply)) ((((xord)).apply ("&"))) ((((unsupported)).apply)) ((((xord)).apply ("="))) ((((unsupported)).apply)) ((((xord)).apply ("-"))) ((((unsupported)).apply)) ((((xord)).apply (";"))) ((((unsupported)).apply)) ((((xord)).apply ("`"))) ((((unsupported)).apply)) ((((xord)).apply ("u2028"))) ((((unsupported)).apply)) ((((xord)).apply ("u2029"))) ((((unsupported)).apply)))
            bogusForceDataize.write ((((x_js_escapes).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xord)).apply (("%c".mod (xz))))) (((((unsupported)).apply).mod (xz))))) ((xz)) ((((xrange)).apply (32))))))
            xescapejs.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply ((((xmark_safe)).apply (((((((xstr)).apply ((xvalue))).xtranslate)).apply ((x_js_escapes)))))))
            x_json_script_escapes.write (((unsupported)).apply ((((xord)).apply (">"))) ((((unsupported)).apply)) ((((xord)).apply ("<"))) ((((unsupported)).apply)) ((((xord)).apply ("&"))) ((((unsupported)).apply)))
            xjson_script.write
              [xvalue xelement_id]
                memory > xtemplate
                memory > xargs
                memory > xjson_str
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    (((unsupported)).apply)
                    xjson_str.write ((((((unsupported)).apply (((xjson).xdumps)) ((xvalue)) ((xDjangoJSONEncoder))).xtranslate)).apply ((x_json_script_escapes)))
                    (xelement_id).if
                      seq
                        xtemplate.write "<script id=\"{}\" type=\"application/json\">{}</script>"
                        xargs.write (((unsupported)).apply ((xelement_id)) ((((xmark_safe)).apply ((xjson_str)))))
                      seq
                        xtemplate.write "<script type=\"application/json\">{}</script>"
                        xargs.write (((unsupported)).apply ((((xmark_safe)).apply ((xjson_str)))))
                    (((unsupported)).apply ((((xformat_html)).apply ((xtemplate)) ((((unsupported)).apply ((xargs)))))))
            xconditional_escape.write
              [xtext]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((xisinstance)).apply ((xtext)) ((xPromise))).if
                      xtext.write (((xstr)).apply ((xtext)))
                    (((xhasattr)).apply ((xtext)) ("__html__")).if
                      (((unsupported)).apply (((((xtext).x__html__)).apply)))
                      (((unsupported)).apply ((((xescape)).apply ((xtext)))))
            xformat_html.write
              [xformat_string]
                memory > xargs_safe
                memory > xkwargs_safe
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xargs_safe.write (((xmap)).apply ((xconditional_escape)) ((xargs)))
                    xkwargs_safe.write (((unsupported)).apply ((xk)) ((((xconditional_escape)).apply ((xv)))) ((((unsupported)).apply ((xk)) ((xv)))) (((((xkwargs).xitems)).apply)))
                    (((unsupported)).apply ((((xmark_safe)).apply (((((xformat_string).xformat)).apply ((((unsupported)).apply ((xargs_safe)))) ((((unsupported)).apply ((xkwargs_safe)))))))))
            xformat_html_join.write
              [xsep xformat_string xargs_generator]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ((((xmark_safe)).apply (((((((xconditional_escape)).apply ((xsep))).xjoin)).apply ((((unsupported)).apply ((((xformat_html)).apply ((xformat_string)) ((((unsupported)).apply ((xargs)))))) ((xargs)) ((xargs_generator)))))))))
            xlinebreaks.write
              [xvalue xautoescape]
                memory > xparas
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xvalue.write (((xnormalize_newlines)).apply ((xvalue)))
                    xparas.write ((((xre).xsplit)).apply ("n{2,}") ((((xstr)).apply ((xvalue)))))
                    (xautoescape).if
                      xparas.write (((unsupported)).apply (("<p>%s</p>".mod ((((((xescape)).apply ((xp))).xreplace)).apply ("n") ("<br>")))) ((xp)) ((xparas)))
                      xparas.write (((unsupported)).apply (("<p>%s</p>".mod ((((xp).xreplace)).apply ("n") ("<br>")))) ((xp)) ((xparas)))
                    (((unsupported)).apply (((("nn".xjoin)).apply ((xparas)))))
            (((unsupported)).apply ((xHTMLParser)))
              seq
                x__init__.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((xsuper)).apply).x__init__)) (FALSE))
                        bogusForceDataize.write ((((xself).xreset)).apply)
                        (((unsupported)).apply (((xself).xfed)) ((((unsupported)).apply)))
                xhandle_data.write
                  [xself xd]
                    seq > @
                      bogusForceDataize.write (((((xself).xfed).xappend)).apply ((xd)))
                xhandle_entityref.write
                  [xself xname]
                    seq > @
                      bogusForceDataize.write (((((xself).xfed).xappend)).apply (("&%s;".mod (xname))))
                xhandle_charref.write
                  [xself xname]
                    seq > @
                      bogusForceDataize.write (((((xself).xfed).xappend)).apply (("&#%s;".mod (xname))))
                xget_data.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((("".xjoin)).apply (((xself).xfed)))))
            x_strip_once.write
              [xvalue]
                memory > xs
                seq > @
                  seq
                    (((unsupported)).apply)
                    xs.write (((xMLStripper)).apply)
                    bogusForceDataize.write ((((xs).xfeed)).apply ((xvalue)))
                    bogusForceDataize.write ((((xs).xclose)).apply)
                    (((unsupported)).apply (((((xs).xget_data)).apply)))
            xstrip_tags.write
              [xvalue]
                memory > xnew_value
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    xvalue.write (((xstr)).apply ((xvalue)))
                    while.
                      ((((unsupported)).apply ("<") ((xvalue))).and (((unsupported)).apply (">") ((xvalue))))
                      [unused]
                        seq > @
                          seq
                            xnew_value.write (((x_strip_once)).apply ((xvalue)))
                            (((((xvalue).xcount)).apply ("<")).eq ((((xnew_value).xcount)).apply ("<"))).if
                              (((unsupported)).apply)
                            xvalue.write (xnew_value)
                    (((unsupported)).apply ((xvalue)))
            xstrip_spaces_between_tags.write
              [xvalue]
                seq > @
                  (((unsupported)).apply)
                    unsupported
                    (((unsupported)).apply (((((xre).xsub)).apply (">s-<") ("><") ((((xstr)).apply ((xvalue)))))))
            xsmart_urlquote.write
              [xurl]
                memory > xnetloc
                memory > xpath
                memory > xquery
                memory > xunquote_quote
                memory > xquery_parts
                memory > xfragment
                seq > @
                  seq
                    unsupported
                    xunquote_quote.write
                      [xsegment]
                        seq > @
                          seq
                            xsegment.write (((xunquote)).apply ((xsegment)))
                            (((unsupported)).apply ((((unsupported)).apply ((xquote)) ((xsegment)) ((((xRFC3986_SUBDELIMS).sub (xRFC3986_GENDELIMS)).sub "~")))))
                    (((unsupported)).apply ((xValueError)))
                      (((unsupported)).apply ((((unsupported)).apply ((xscheme)) ((xnetloc)) ((xpath)) ((xquery)) ((xfragment)))) ((((xurlsplit)).apply ((xurl)))))
                      (((unsupported)).apply ((((xunquote_quote)).apply ((xurl)))))
                    (((unsupported)).apply ((xUnicodeError)))
                      xnetloc.write (((xpunycode)).apply ((xnetloc)))
                      (((unsupported)).apply ((((xunquote_quote)).apply ((xurl)))))
                    (xquery).if
                      seq
                        xquery_parts.write (((unsupported)).apply ((((unsupported)).apply ((((xunquote)).apply ((((unsupported)).apply ((xq)) (0))))) ((((xunquote)).apply ((((unsupported)).apply ((xq)) (1))))))) ((xq)) ((((unsupported)).apply ((xparse_qsl)) ((xquery)) (TRUE))))
                        xquery.write (((xurlencode)).apply ((xquery_parts)))
                    xpath.write (((xunquote_quote)).apply ((xpath)))
                    xfragment.write (((xunquote_quote)).apply ((xfragment)))
                    (((unsupported)).apply ((((xurlunsplit)).apply ((((unsupported)).apply ((xscheme)) ((xnetloc)) ((xpath)) ((xquery)) ((xfragment)))))))
            (((unsupported)).apply)
              seq
                (((unsupported)).apply)
                xtrailing_punctuation_chars.write ".,:;!"
                xwrapping_punctuation.write (((unsupported)).apply ((((unsupported)).apply ("(") (")"))) ((((unsupported)).apply ("[") ("]"))))
                xsimple_url_re.write (((x_lazy_re_compile)).apply ("^https?://[?w") (((xre).xIGNORECASE)))
                xsimple_url_2_re.write (((x_lazy_re_compile)).apply ("^www.|^(?!http)w[^@]-.(com|edu|gov|int|mil|net|org)($|/.*)$") (((xre).xIGNORECASE)))
                xword_split_re.write (((x_lazy_re_compile)).apply ("([s<>\"']-)"))
                xmailto_template.write "mailto:{local}@{domain}"
                xurl_template.write "<a href=\"{href}\"{attrs}>{url}</a>"
                x__call__.write
                  [xself xtext xtrim_url_limit xnofollow xautoescape]
                    memory > xsafe_input
                    memory > xwords
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xsafe_input.write (((xisinstance)).apply ((xtext)) ((xSafeData)))
                        xwords.write (((((xself).xword_split_re).xsplit)).apply ((((xstr)).apply ((xtext)))))
                        (((unsupported)).apply (((("".xjoin)).apply ((((unsupported)).apply ((((unsupported)).apply (((xself).xhandle_word)) ((xword)) ((xsafe_input)) ((xtrim_url_limit)) ((xnofollow)) ((xautoescape)))) ((xword)) ((xwords)))))))
                xhandle_word.write
                  [xself xword xsafe_input xtrim_url_limit xnofollow xautoescape]
                    memory > xurl
                    memory > xmiddle
                    memory > xdomain
                    memory > xtrimmed
                    memory > xnofollow_attr
                    seq > @
                      (((unsupported)).apply)
                        (((((unsupported)).apply (".") ((xword))).or (((unsupported)).apply ("@") ((xword)))).or (((unsupported)).apply (":") ((xword)))).if
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xlead)) ((xmiddle)) ((xtrail)))) (((((xself).xtrim_punctuation)).apply ((xword)))))
                            xurl.write "None: is there a None literal in the EO language?"
                            xnofollow_attr.write ((xnofollow).if " rel=\"nofollow\"" "")
                            (((((xself).xsimple_url_re).xmatch)).apply ((xmiddle))).if
                              xurl.write (((xsmart_urlquote)).apply (((((xhtml).xunescape)).apply ((xmiddle)))))
                              (((((xself).xsimple_url_2_re).xmatch)).apply ((xmiddle))).if
                                xurl.write (((xsmart_urlquote)).apply (("http://%s".mod ((((xhtml).xunescape)).apply ((xmiddle))))))
                                ((((unsupported)).apply (":") ((xmiddle))).and ((((xself).xis_email_simple)).apply ((xmiddle)))).if
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xlocal)) ((xdomain)))) (((((xmiddle).xrsplit)).apply ("@") (1))))
                                    (((unsupported)).apply ((xUnicodeError)))
                                      xdomain.write (((xpunycode)).apply ((xdomain)))
                                      (((unsupported)).apply ((xword)))
                                    xurl.write (((unsupported)).apply ((((xself).xmailto_template).xformat)) ((xlocal)) ((xdomain)))
                                    xnofollow_attr.write ""
                            (xurl).if
                              seq
                                xtrimmed.write (((unsupported)).apply (((xself).xtrim_url)) ((xmiddle)) ((xtrim_url_limit)))
                                ((xautoescape).and ((xsafe_input).not)).if
                                  seq
                                    (((unsupported)).apply ((((unsupported)).apply ((xlead)) ((xtrail)))) ((((unsupported)).apply ((((xescape)).apply ((xlead)))) ((((xescape)).apply ((xtrail)))))))
                                    xtrimmed.write (((xescape)).apply ((xtrimmed)))
                                xmiddle.write (((unsupported)).apply ((((xself).xurl_template).xformat)) ((((xescape)).apply ((xurl)))) ((xnofollow_attr)) ((xtrimmed)))
                                (((unsupported)).apply ((((xmark_safe)).apply ("{lead}{middle}{trail}"))))
                              (xsafe_input).if
                                (((unsupported)).apply ((((xmark_safe)).apply ((xword)))))
                                (xautoescape).if
                                  (((unsupported)).apply ((((xescape)).apply ((xword)))))
                          (xsafe_input).if
                            (((unsupported)).apply ((((xmark_safe)).apply ((xword)))))
                            (xautoescape).if
                              (((unsupported)).apply ((((xescape)).apply ((xword)))))
                        (((unsupported)).apply ((xword)))
                xtrim_url.write
                  [xself xx xlimit]
                    seq > @
                      (((unsupported)).apply)
                        ((((unsupported)).apply ((xlimit)) ("None: is there a None literal in the EO language?")).or ((((xlen)).apply ((xx))).leq (xlimit))).if
                          (((unsupported)).apply ((xx)))
                        (((unsupported)).apply (("%s…".mod (((unsupported)).apply ((xx)) ((((unsupported)).apply ((((xmax)).apply (0) (((xlimit).sub 1))))))))))
                xtrim_punctuation.write
                  [xself xword]
                    memory > xmiddle_unescaped
                    memory > xpunctuation_count
                    memory > xtrimmed_something
                    memory > xstripped
                    memory > xmiddle
                    memory > xtrail
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xlead)) ((xmiddle)) ((xtrail)))) ((((unsupported)).apply ("") ((xword)) (""))))
                        xtrimmed_something.write TRUE
                        while.
                          (xtrimmed_something)
                          [unused]
                            seq > @
                              seq
                                xtrimmed_something.write FALSE
                                (((unsupported)).apply ((((unsupported)).apply ((xopening)) ((xclosing)))) (((xself).xwrapping_punctuation)))
                                  seq
                                    ((((xmiddle).xstartswith)).apply ((xopening))).if
                                      seq
                                        xmiddle.write (((unsupported)).apply ((xmiddle)) ((((unsupported)).apply ((((xlen)).apply ((xopening)))))))
                                        (((unsupported)).apply ((xlead)) ((xopening)))
                                        xtrimmed_something.write TRUE
                                    (((((xmiddle).xendswith)).apply ((xclosing))).and (((((xmiddle).xcount)).apply ((xclosing))).eq (((((xmiddle).xcount)).apply ((xopening))).sub 1))).if
                                      seq
                                        xmiddle.write (((unsupported)).apply ((xmiddle)) ((((unsupported)).apply (((((xlen)).apply ((xclosing))).neg)))))
                                        xtrail.write ((xclosing).sub (xtrail))
                                        xtrimmed_something.write TRUE
                                xmiddle_unescaped.write ((((xhtml).xunescape)).apply ((xmiddle)))
                                xstripped.write ((((xmiddle_unescaped).xrstrip)).apply (((xself).xtrailing_punctuation_chars)))
                                ((xmiddle_unescaped).neq (xstripped)).if
                                  seq
                                    xpunctuation_count.write ((((xlen)).apply ((xmiddle_unescaped))).sub (((xlen)).apply ((xstripped))))
                                    xtrail.write ((((unsupported)).apply ((xmiddle)) ((((unsupported)).apply (((xpunctuation_count).neg))))).sub (xtrail))
                                    xmiddle.write (((unsupported)).apply ((xmiddle)) ((((unsupported)).apply (((xpunctuation_count).neg)))))
                                    xtrimmed_something.write TRUE
                        (((unsupported)).apply ((((unsupported)).apply ((xlead)) ((xmiddle)) ((xtrail)))))
                xis_email_simple.write
                  [xvalue]
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        (((((unsupported)).apply ("@") ((xvalue))).or ((((xvalue).xstartswith)).apply ("@"))).or ((((xvalue).xendswith)).apply ("@"))).if
                          (((unsupported)).apply (FALSE))
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply ((((unsupported)).apply ((xp1)) ((xp2)))) (((((xvalue).xsplit)).apply ("@"))))
                          (((unsupported)).apply (FALSE))
                        ((((unsupported)).apply (".") ((xp2))).or ((((xp2).xstartswith)).apply ("."))).if
                          (((unsupported)).apply (FALSE))
                        (((unsupported)).apply (TRUE))
            xurlizer.write (((xUrlizer)).apply)
            xurlize.write
              [xtext xtrim_url_limit xnofollow xautoescape]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((unsupported)).apply ((xurlizer)) ((xtext)) ((xtrim_url_limit)) ((xnofollow)) ((xautoescape)))))
            xavoid_wrapping.write
              [xvalue]
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply (((((xvalue).xreplace)).apply (" ") ("xa0"))))
            xhtml_safe.write
              [xklass]
                memory > xklass_str
                seq > @
                  seq
                    (((unsupported)).apply)
                    (((unsupported)).apply ("__html__") (((xklass).x__dict__))).if
                      (((unsupported)).apply ((((xValueError)).apply (("can't apply @html_safe to %s because it defines __html__().".mod ((xklass).x__name__))))))
                    (((unsupported)).apply ("__str__") (((xklass).x__dict__))).if
                      (((unsupported)).apply ((((xValueError)).apply (("can't apply @html_safe to %s because it doesn't define __str__().".mod ((xklass).x__name__))))))
                    xklass_str.write ((xklass).x__str__)
                    (((unsupported)).apply (((xklass).x__str__)) ((((unsupported)).apply ((((xmark_safe)).apply ((((xklass_str)).apply ((xself)))))))))
                    (((unsupported)).apply (((xklass).x__html__)) ((((unsupported)).apply ((((xstr)).apply ((xself)))))))
                    (((unsupported)).apply ((xklass)))