memory > xAttributeError
memory > xValueError
memory > xrange
memory > xbytearray
memory > xmsg
memory > xCAutoFileTests
memory > xMyFileIO
memory > xbytes
memory > xmemoryview
memory > xReferenceError
memory > xcm
memory > xarray
memory > xAutoFileTests
memory > xrun_unittest
memory > xcheck_warnings
memory > xRuntimeError
memory > x_io
memory > xmode
memory > xerrno
memory > xproxy
memory > xstr
memory > xio
memory > xCOtherFileTests
memory > xmodes
memory > xmsvcrt
memory > x_testcapi
memory > xMyException
memory > xPyAutoFileTests
memory > x_pyio
memory > xopen
memory > xw
memory > xrepr
memory > xf
memory > xPyOtherFileTests
memory > xException
memory > xhasattr
memory > xsuper
memory > xsys
memory > xOSError
memory > xTESTFN
memory > xos
memory > xmake_bad_fd
memory > xTESTFN_UNICODE
memory > xgetattr
memory > xUnicodeEncodeError
memory > xUserList
memory > xOtherFileTests
memory > xe
memory > x__file__
memory > xsetattr
memory > xunittest
memory > xattr
memory > xmethodname
memory > xswap_attr
memory > xTypeError
memory > x__name__
[] > test_fileio
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xFileIO
        memory > xmodulename
        memory > xtestUtf8BytesOpen
        memory > xtestErrnoOnClosedReadall
        memory > xtestInvalidModeStrings
        memory > x_testReadintoMemoryview
        memory > xtestAbles
        memory > xtestErrnoOnClosedSeekable
        memory > xtestMethods
        memory > x_testReadintoArray
        memory > xtestErrnoOnClosedRead
        memory > xtestInvalidFd_overflow
        memory > xtestErrnoOnClosedWritable
        memory > xtestRecursiveRepr
        memory > xClosedFDRaises
        memory > xtestBlksize
        memory > xtestErrnoOnClosedTell
        memory > xtestErrnoOnClosedFileno
        memory > xtestOpendir
        memory > xtestAttributes
        memory > xtestOpenDirFD
        memory > xtestInvalidInit
        memory > xtestWritelinesUserList
        memory > xtestWarnings
        memory > xtestErrnoOnClosedIsatty
        memory > xtestSeekTell
        memory > xtestTruncateOnWindows
        memory > xtestErrnoOnClose
        memory > xtest_reject
        memory > xtest_main
        memory > xtest_open_code
        memory > xtestWritelinesList
        memory > xtestTruncate
        memory > xtestBadModeArgument
        memory > xsetUp
        memory > xtestWeakRefs
        memory > xtestErrnoOnClosedTruncate
        memory > xtestInvalidFd
        memory > xtestUnicodeOpen
        memory > xClosedFD
        memory > xtest_none_args
        memory > xtestErrnoOnClosedReadinto
        memory > xtestModeStrings
        memory > xtestBytesOpen
        memory > xReopenForRead
        memory > xtestUnclosedFDOnException
        memory > xtestErrnoOnClosedSeek
        memory > xtestReprNoCloseFD
        memory > xtestAppend
        memory > xtestRepr
        memory > xtestErrors
        memory > xtearDown
        memory > xtestConstructorHandlesNULChars
        memory > xtestErrnoOnClosedWrite
        memory > xtestWritelinesError
        memory > xtestErrnoOnClosedReadable
        memory > xtestReadintoByteArray
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xf)) (((((xself).xFileIO)).apply ((xTESTFN)) ("w"))))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        ((xself).xf).if
                          bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        bogusForceDataize.write ((((xos).xremove)).apply ((xTESTFN)))
                xtestWeakRefs.write
                  [xself]
                    memory > xp
                    seq > @
                      seq
                        xp.write (((xproxy)).apply (((xself).xf)))
                        bogusForceDataize.write ((((xp).xwrite)).apply ((((xbytes)).apply ((((xrange)).apply (10))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xtell)).apply)) (((((xp).xtell)).apply)))
                        bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        (((unsupported)).apply (((xself).xf)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xReferenceError)) ((xgetattr)) ((xp)) ("tell"))
                xtestSeekTell.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xf).xwrite)).apply ((((xbytes)).apply ((((xrange)).apply (20))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xtell)).apply)) (20))
                        bogusForceDataize.write (((((xself).xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xtell)).apply)) (0))
                        bogusForceDataize.write (((((xself).xf).xseek)).apply (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xtell)).apply)) (10))
                        bogusForceDataize.write (((((xself).xf).xseek)).apply (5) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xtell)).apply)) (15))
                        bogusForceDataize.write (((((xself).xf).xseek)).apply ((5.neg)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xtell)).apply)) (10))
                        bogusForceDataize.write (((((xself).xf).xseek)).apply ((5.neg)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xtell)).apply)) (15))
                xtestAttributes.write
                  [xself]
                    memory > xf2
                    seq > @
                      seq
                        xf2.write ((xself).xf)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmode)) ("wb"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xclosed)) (FALSE))
                        (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("mode") ("closed"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((((unsupported)).apply ((xAttributeError)) ((xTypeError)))) ((xsetattr)) ((xf)) ((xattr)) ("oops"))
                xtestBlksize.write
                  [xself]
                    memory > xfst
                    memory > xblksize
                    seq > @
                      seq
                        xblksize.write ((xio).xDEFAULT_BUFFER_SIZE)
                        (((xhasattr)).apply ((xos)) ("fstat")).if
                          seq
                            xfst.write ((((xos).xfstat)).apply ((((((xself).xf).xfileno)).apply)))
                            xblksize.write (((xgetattr)).apply ((xfst)) ("st_blksize") ((xblksize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xf).x_blksize)) ((xblksize)))
                xtestReadintoByteArray.write
                  [xself]
                    memory > xn
                    memory > xba
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xf).xwrite)).apply ((((xbytes)).apply ((((unsupported)).apply (1) (2) (0) (255))))))
                        bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        xba.write (((xbytearray)).apply ("abcdefgh"))
                        (((unsupported)).apply (((((xself).xFileIO)).apply ((xTESTFN)) ("r"))) ((xf)))
                          xn.write ((((xf).xreadinto)).apply ((xba)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xba)) ("x01x02x00xffefgh"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (4))
                x_testReadintoMemoryview.write
                  [xself]
                    memory > xn
                    memory > xm
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xf).xwrite)).apply ((((xbytes)).apply ((((unsupported)).apply (1) (2) (0) (255))))))
                        bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        xm.write (((xmemoryview)).apply ((((xbytearray)).apply ("abcdefgh"))))
                        (((unsupported)).apply (((((xself).xFileIO)).apply ((xTESTFN)) ("r"))) ((xf)))
                          xn.write ((((xf).xreadinto)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xm)) ("x01x02x00xffefgh"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (4))
                        xm.write (((unsupported)).apply (((((xmemoryview)).apply ((((xbytearray)).apply ("abcdefgh")))).xcast)) ("H") ((((unsupported)).apply (2) (2))))
                        (((unsupported)).apply (((((xself).xFileIO)).apply ((xTESTFN)) ("r"))) ((xf)))
                          xn.write ((((xf).xreadinto)).apply ((xm)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xbytes)).apply ((xm)))) ("x01x02x00xffefgh"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (4))
                x_testReadintoArray.write
                  [xself]
                    memory > xn
                    memory > xa
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xf).xwrite)).apply ((((xbytes)).apply ((((unsupported)).apply (1) (2) (0) (255))))))
                        bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        xa.write (((xarray)).apply ("B") ("abcdefgh"))
                        (((unsupported)).apply (((((xself).xFileIO)).apply ((xTESTFN)) ("r"))) ((xf)))
                          xn.write ((((xf).xreadinto)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((((xarray)).apply ("B") ((((unsupported)).apply (1) (2) (0) (255) (101) (102) (103) (104))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (4))
                        xa.write (((xarray)).apply ("b") ("abcdefgh"))
                        (((unsupported)).apply (((((xself).xFileIO)).apply ((xTESTFN)) ("r"))) ((xf)))
                          xn.write ((((xf).xreadinto)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((((xarray)).apply ("b") ((((unsupported)).apply (1) (2) (0) ((1.neg)) (101) (102) (103) (104))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (4))
                        xa.write (((xarray)).apply ("I") ("abcdefgh"))
                        (((unsupported)).apply (((((xself).xFileIO)).apply ((xTESTFN)) ("r"))) ((xf)))
                          xn.write ((((xf).xreadinto)).apply ((xa)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xa)) ((((xarray)).apply ("I") ("x01x02x00xffefgh"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xn)) (4))
                xtestWritelinesList.write
                  [xself]
                    memory > xbuf
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply ("123") ("456"))
                        bogusForceDataize.write (((((xself).xf).xwritelines)).apply ((xl)))
                        bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        (((unsupported)).apply (((xself).xf)) (((((xself).xFileIO)).apply ((xTESTFN)) ("rb"))))
                        xbuf.write (((((xself).xf).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuf)) ("123456"))
                xtestWritelinesUserList.write
                  [xself]
                    memory > xbuf
                    memory > xl
                    seq > @
                      seq
                        xl.write (((xUserList)).apply ((((unsupported)).apply ("123") ("456"))))
                        bogusForceDataize.write (((((xself).xf).xwritelines)).apply ((xl)))
                        bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        (((unsupported)).apply (((xself).xf)) (((((xself).xFileIO)).apply ((xTESTFN)) ("rb"))))
                        xbuf.write (((((xself).xf).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xbuf)) ("123456"))
                xtestWritelinesError.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xf).xwritelines)) ((((unsupported)).apply (1) (2) (3))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xf).xwritelines)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xf).xwritelines)) ("abc"))
                xtest_none_args.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write (((((xself).xf).xwrite)).apply ("hinbyenabc"))
                        bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        (((unsupported)).apply (((xself).xf)) (((((xself).xFileIO)).apply ((xTESTFN)) ("r"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xread)).apply ("None: is there a None literal in the EO language?"))) ("hinbyenabc"))
                        bogusForceDataize.write (((((xself).xf).xseek)).apply (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xreadline)).apply ("None: is there a None literal in the EO language?"))) ("hin"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xf).xreadlines)).apply ("None: is there a None literal in the EO language?"))) ((((unsupported)).apply ("byen") ("abc"))))
                xtest_reject.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xf).xwrite)) ("Hello!"))
                xtestRepr.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xself).xf)))) (("<%s.FileIO name=%r mode=%r closefd=True>".mod (((unsupported)).apply (((xself).xmodulename)) ((((xself).xf).xname)) ((((xself).xf).xmode))))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((((xself).xf).xname)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xself).xf)))) (("<%s.FileIO fd=%r mode=%r closefd=True>".mod (((unsupported)).apply (((xself).xmodulename)) ((((((xself).xf).xfileno)).apply)) ((((xself).xf).xmode))))))
                        bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply (((xself).xf)))) (("<%s.FileIO [closed]>".mod (((unsupported)).apply (((xself).xmodulename))))))
                xtestReprNoCloseFD.write
                  [xself]
                    memory > xfd
                    seq > @
                      seq
                        xfd.write ((((xos).xopen)).apply ((xTESTFN)) (((xos).xO_RDONLY)))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xFileIO)) ((xfd)) ("r") (FALSE))) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xf)))) (("<%s.FileIO name=%r mode=%r closefd=False>".mod (((unsupported)).apply (((xself).xmodulename)) (((xf).xname)) (((xf).xmode))))))
                          bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                xtestRecursiveRepr.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((xswap_attr)).apply (((xself).xf)) ("name") (((xself).xf)))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))))
                          bogusForceDataize.write (((xrepr)).apply (((xself).xf)))
                xtestErrors.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((xself).xf)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xf).xisatty)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).xclosed)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xf).xread)) (10))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).xclosed)))
                        xf.write ((((xself).xFileIO)).apply ((xTESTFN)) ("r"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xf).xreadinto)) (""))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xf).xclosed)))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xf).xclosed)))
                xtestMethods.write
                  [xself]
                    memory > xmethods
                    memory > xmethod
                    seq > @
                      seq
                        xmethods.write (((unsupported)).apply ("fileno") ("isatty") ("seekable") ("readable") ("writable") ("read") ("readall") ("readline") ("readlines") ("tell") ("truncate") ("flush"))
                        bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xself).xf).xclosed)))
                        (((unsupported)).apply ((xmethodname)) ((xmethods)))
                          seq
                            xmethod.write (((xgetattr)).apply (((xself).xf)) ((xmethodname)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xmethod)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xf).xreadinto)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xf).xreadinto)) ((((xbytearray)).apply (1))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xf).xseek)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xf).xseek)) (0))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xf).xwrite)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xf).xwrite)) (""))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xf).xwritelines)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((((xself).xf).xwritelines)) (""))
                xtestOpendir.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xOSError)))
                        bogusForceDataize.write ((((xself).xFileIO)).apply (".") ("r"))
                        seq
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xe).xerrno)) (0))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xfilename)) ("."))
                        bogusForceDataize.write ((((xself).xfail)).apply ("Should have raised OSError"))
                xtestOpenDirFD.write
                  [xself]
                    memory > xfd
                    seq > @
                      (((unsupported)).apply)
                        xfd.write ((((xos).xopen)).apply (".") (((xos).xO_RDONLY)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xOSError)))) ((xcm)))
                          bogusForceDataize.write ((((xself).xFileIO)).apply ((xfd)) ("r"))
                        bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xerrno)) (((xerrno).xEISDIR)))
                xClosedFD.write
                  [xfunc]
                    memory > xwrapper
                    seq > @
                      seq
                        xwrapper.write
                          [xself]
                            memory > xf
                            seq > @
                              (((unsupported)).apply)
                                xf.write ((xself).xf)
                                bogusForceDataize.write ((((xos).xclose)).apply (((((xf).xfileno)).apply)))
                                (((unsupported)).apply)
                                  bogusForceDataize.write (((xfunc)).apply ((xself)) ((xf)))
                                  (((unsupported)).apply ((xOSError)))
                                    bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        (((unsupported)).apply ((xwrapper)))
                xClosedFDRaises.write
                  [xfunc]
                    memory > xwrapper
                    seq > @
                      seq
                        xwrapper.write
                          [xself]
                            memory > xf
                            seq > @
                              (((unsupported)).apply)
                                xf.write ((xself).xf)
                                bogusForceDataize.write ((((xos).xclose)).apply (((((xf).xfileno)).apply)))
                                (((unsupported)).apply ((xOSError)))
                                  bogusForceDataize.write (((xfunc)).apply ((xself)) ((xf)))
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((xe).xerrno)) (((xerrno).xEBADF)))
                                  bogusForceDataize.write ((((xself).xfail)).apply ("Should have raised OSError"))
                                  (((unsupported)).apply ((xOSError)))
                                    bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        (((unsupported)).apply ((xwrapper)))
                xtestErrnoOnClose.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xf).xclose)).apply)
                xtestErrnoOnClosedWrite.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xf).xwrite)).apply ("a"))
                xtestErrnoOnClosedSeek.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xf).xseek)).apply (0))
                xtestErrnoOnClosedTell.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xf).xtell)).apply)
                xtestErrnoOnClosedTruncate.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xf).xtruncate)).apply (0))
                xtestErrnoOnClosedSeekable.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xf).xseekable)).apply)
                xtestErrnoOnClosedReadable.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xf).xreadable)).apply)
                xtestErrnoOnClosedWritable.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xf).xwritable)).apply)
                xtestErrnoOnClosedFileno.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xf).xfileno)).apply)
                xtestErrnoOnClosedIsatty.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xisatty)).apply)) (FALSE))
                xReopenForRead.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write (((((xself).xf).xclose)).apply)
                        (((unsupported)).apply (((xself).xf)) (((((xself).xFileIO)).apply ((xTESTFN)) ("r"))))
                        bogusForceDataize.write ((((xos).xclose)).apply ((((((xself).xf).xfileno)).apply)))
                        (((unsupported)).apply (((xself).xf)))
                xtestErrnoOnClosedRead.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xself).xReopenForRead)).apply)
                        bogusForceDataize.write ((((xf).xread)).apply (1))
                xtestErrnoOnClosedReadall.write
                  [xself xf]
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xself).xReopenForRead)).apply)
                        bogusForceDataize.write ((((xf).xreadall)).apply)
                xtestErrnoOnClosedReadinto.write
                  [xself xf]
                    memory > xa
                    seq > @
                      (((unsupported)).apply)
                        xf.write ((((xself).xReopenForRead)).apply)
                        xa.write (((xarray)).apply ("b") (("x".mul 10)))
                        bogusForceDataize.write ((((xf).xreadinto)).apply ((xa)))
            (((unsupported)).apply ((xAutoFileTests)) (((xunittest).xTestCase)))
              seq
                xFileIO.write ((x_io).xFileIO)
                xmodulename.write "_io"
            (((unsupported)).apply ((xAutoFileTests)) (((xunittest).xTestCase)))
              seq
                xFileIO.write ((x_pyio).xFileIO)
                xmodulename.write "_pyio"
            (((unsupported)).apply)
              seq
                xtestAbles.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        seq
                          xf.write ((((xself).xFileIO)).apply ((xTESTFN)) ("w"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xreadable)).apply)) (FALSE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xwritable)).apply)) (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xseekable)).apply)) (TRUE))
                          bogusForceDataize.write ((((xf).xclose)).apply)
                          xf.write ((((xself).xFileIO)).apply ((xTESTFN)) ("r"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xreadable)).apply)) (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xwritable)).apply)) (FALSE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xseekable)).apply)) (TRUE))
                          bogusForceDataize.write ((((xf).xclose)).apply)
                          xf.write ((((xself).xFileIO)).apply ((xTESTFN)) ("a+"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xreadable)).apply)) (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xwritable)).apply)) (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xseekable)).apply)) (TRUE))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xisatty)).apply)) (FALSE))
                          bogusForceDataize.write ((((xf).xclose)).apply)
                          (((xsys).xplatform).neq "win32").if
                            (((unsupported)).apply ((xOSError)))
                              xf.write ((((xself).xFileIO)).apply ("/dev/tty") ("a"))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xreadable)).apply)) (FALSE))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xwritable)).apply)) (TRUE))
                                (((((xsys).xplatform).neq "darwin").and (((unsupported)).apply ("bsd") (((xsys).xplatform)))).and ((((((xsys).xplatform).xstartswith)).apply ((((unsupported)).apply ("sunos") ("aix")))).not)).if
                                  bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xseekable)).apply)) (FALSE))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xisatty)).apply)) (TRUE))
                                bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xos).xunlink)).apply ((xTESTFN)))
                xtestInvalidModeStrings.write
                  [xself]
                    memory > xf
                    seq > @
                      (((unsupported)).apply ((xmode)) ((((unsupported)).apply ("") ("aU") ("wU+") ("rw") ("rt"))))
                        (((unsupported)).apply ((xValueError)))
                          xf.write ((((xself).xFileIO)).apply ((xTESTFN)) ((xmode)))
                          seq
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            bogusForceDataize.write ((((xself).xfail)).apply (("%r is an invalid file mode".mod (xmode))))
                xtestModeStrings.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xmodes)) ((((unsupported)).apply ((((unsupported)).apply ("w") ("wb"))) ((((unsupported)).apply ("wb") ("wb"))) ((((unsupported)).apply ("wb+") ("rb+"))) ((((unsupported)).apply ("w+b") ("rb+"))) ((((unsupported)).apply ("a") ("ab"))) ((((unsupported)).apply ("ab") ("ab"))) ((((unsupported)).apply ("ab+") ("ab+"))) ((((unsupported)).apply ("a+b") ("ab+"))) ((((unsupported)).apply ("r") ("rb"))) ((((unsupported)).apply ("rb") ("rb"))) ((((unsupported)).apply ("rb+") ("rb+"))) ((((unsupported)).apply ("r+b") ("rb+"))))))
                          (((unsupported)).apply (((((xself).xFileIO)).apply ((xTESTFN)) ((((unsupported)).apply ((xmodes)) (0))))) ((xf)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xf).xmode)) ((((unsupported)).apply ((xmodes)) (1))))
                        (((((xos).xpath).xexists)).apply ((xTESTFN))).if
                          bogusForceDataize.write ((((xos).xunlink)).apply ((xTESTFN)))
                xtestUnicodeOpen.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xFileIO)).apply ((((xstr)).apply ((xTESTFN)))) ("w"))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                        bogusForceDataize.write ((((xos).xunlink)).apply ((xTESTFN)))
                xtestBytesOpen.write
                  [xself]
                    memory > xfn
                    memory > xf
                    seq > @
                      seq
                        (((unsupported)).apply ((xUnicodeEncodeError)))
                          xfn.write ((((xTESTFN).xencode)).apply ("ascii"))
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("could not encode %r to ascii".mod (xTESTFN))))
                        xf.write ((((xself).xFileIO)).apply ((xfn)) ("w"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply ("abc"))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("abc"))
                          bogusForceDataize.write ((((xos).xunlink)).apply ((xTESTFN)))
                xtestUtf8BytesOpen.write
                  [xself]
                    memory > xfn
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xUnicodeEncodeError)))
                          xfn.write ((((xTESTFN_UNICODE).xencode)).apply ("utf-8"))
                          bogusForceDataize.write ((((xself).xskipTest)).apply (("could not encode %r to utf-8".mod (xTESTFN_UNICODE))))
                        xf.write ((((xself).xFileIO)).apply ((xfn)) ("w"))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply ("abc"))
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            (((unsupported)).apply ((((xopen)).apply ((xTESTFN_UNICODE)) ("rb"))) ((xf)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("abc"))
                          bogusForceDataize.write ((((xos).xunlink)).apply ((xTESTFN_UNICODE)))
                xtestConstructorHandlesNULChars.write
                  [xself]
                    memory > xfn_with_NUL
                    seq > @
                      seq
                        xfn_with_NUL.write "foo0bar"
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xFileIO)) ((xfn_with_NUL)) ("w"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xFileIO)) ((((xbytes)).apply ((xfn_with_NUL)) ("ascii"))) ("w"))
                xtestInvalidFd.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xFileIO)) ((10.neg)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xself).xFileIO)) ((((xmake_bad_fd)).apply)))
                        (((xsys).xplatform).eq "win32").if
                          seq
                            (((unsupported)).apply)
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xOSError)) (((xmsvcrt).xget_osfhandle)) ((((xmake_bad_fd)).apply)))
                xtestBadModeArgument.write
                  [xself]
                    memory > xs
                    memory > xbad_mode
                    memory > xf
                    seq > @
                      seq
                        xbad_mode.write "qwerty"
                        (((unsupported)).apply ((xValueError)))
                          xf.write ((((xself).xFileIO)).apply ((xTESTFN)) ((xbad_mode)))
                          ((((unsupported)).apply (((xmsg).xargs)) (0)).neq 0).if
                            seq
                              xs.write (((xstr)).apply ((xmsg)))
                              ((((unsupported)).apply ((xTESTFN)) ((xs))).or (((unsupported)).apply ((xbad_mode)) ((xs)))).if
                                bogusForceDataize.write ((((xself).xfail)).apply (("bad error message for invalid mode: %s".mod (xs))))
                          seq
                            bogusForceDataize.write ((((xf).xclose)).apply)
                            bogusForceDataize.write ((((xself).xfail)).apply (("no error for invalid mode: %s".mod (xbad_mode))))
                xtestTruncate.write
                  [xself]
                    memory > xf
                    seq > @
                      seq
                        xf.write ((((xself).xFileIO)).apply ((xTESTFN)) ("w"))
                        bogusForceDataize.write ((((xf).xwrite)).apply ((((xbytes)).apply ((((xbytearray)).apply ((((xrange)).apply (10))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (10))
                        bogusForceDataize.write ((((xf).xtruncate)).apply (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xseek)).apply (0) (((xio).xSEEK_END)))) (5))
                        bogusForceDataize.write ((((xf).xtruncate)).apply (15))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xtell)).apply)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xseek)).apply (0) (((xio).xSEEK_END)))) (15))
                        bogusForceDataize.write ((((xf).xclose)).apply)
                xtestTruncateOnWindows.write
                  [xself]
                    memory > xbug801631
                    seq > @
                      seq
                        xbug801631.write
                          []
                            memory > xsize
                            memory > xdata
                            memory > xf
                            seq > @
                              seq
                                xf.write ((((xself).xFileIO)).apply ((xTESTFN)) ("w"))
                                bogusForceDataize.write ((((xf).xwrite)).apply ((((xbytes)).apply ((((xrange)).apply (11))))))
                                bogusForceDataize.write ((((xf).xclose)).apply)
                                xf.write ((((xself).xFileIO)).apply ((xTESTFN)) ("r+"))
                                xdata.write ((((xf).xread)).apply (5))
                                ((xdata).neq (((xbytes)).apply ((((xrange)).apply (5))))).if
                                  bogusForceDataize.write ((((xself).xfail)).apply (("Read on file opened for update failed %r".mod (xdata))))
                                (((((xf).xtell)).apply).neq 5).if
                                  bogusForceDataize.write ((((xself).xfail)).apply (("File pos after read wrong %d".mod ((((xf).xtell)).apply))))
                                bogusForceDataize.write ((((xf).xtruncate)).apply)
                                (((((xf).xtell)).apply).neq 5).if
                                  bogusForceDataize.write ((((xself).xfail)).apply (("File pos after ftruncate wrong %d".mod ((((xf).xtell)).apply))))
                                bogusForceDataize.write ((((xf).xclose)).apply)
                                xsize.write (((((xos).xpath).xgetsize)).apply ((xTESTFN)))
                                ((xsize).neq 5).if
                                  bogusForceDataize.write ((((xself).xfail)).apply (("File size after ftruncate wrong %d".mod (xsize))))
                        (((unsupported)).apply)
                          bogusForceDataize.write (((xbug801631)).apply)
                          bogusForceDataize.write ((((xos).xunlink)).apply ((xTESTFN)))
                xtestAppend.write
                  [xself]
                    memory > xd
                    memory > xf
                    seq > @
                      (((unsupported)).apply)
                        seq
                          xf.write (((xopen)).apply ((xTESTFN)) ("wb"))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("spam"))
                          bogusForceDataize.write ((((xf).xclose)).apply)
                          xf.write (((xopen)).apply ((xTESTFN)) ("ab"))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("eggs"))
                          bogusForceDataize.write ((((xf).xclose)).apply)
                          xf.write (((xopen)).apply ((xTESTFN)) ("rb"))
                          xd.write ((((xf).xread)).apply)
                          bogusForceDataize.write ((((xf).xclose)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xd)) ("spameggs"))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xos).xunlink)).apply ((xTESTFN)))
                xtestInvalidInit.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xFileIO)) ("1") (0) (0))
                xtestWarnings.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xcheck_warnings)) (TRUE))) ((xw)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xwarnings)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xFileIO)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xwarnings)) ((((unsupported)).apply)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xself).xFileIO)) ("/some/invalid/name") ("rt"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xw).xwarnings)) ((((unsupported)).apply)))
                xtestUnclosedFDOnException.write
                  [xself]
                    memory > x__setattr__
                    memory > xfd
                    seq > @
                      seq
                        (((unsupported)).apply ((xException)))
                        (((unsupported)).apply (((xself).xFileIO)))
                          x__setattr__.write
                            [xself xname xvalue]
                              seq > @
                                seq
                                  ((xname).eq "name").if
                                    (((unsupported)).apply ((((xMyException)).apply ("blocked setting name"))))
                                  (((unsupported)).apply (((((((xsuper)).apply ((xMyFileIO)) ((xself))).x__setattr__)).apply ((xname)) ((xvalue)))))
                        xfd.write ((((xos).xopen)).apply ((x__file__)) (((xos).xO_RDONLY)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xMyException)) ((xMyFileIO)) ((xfd)))
                        bogusForceDataize.write ((((xos).xclose)).apply ((xfd)))
            (((unsupported)).apply ((xOtherFileTests)) (((xunittest).xTestCase)))
              seq
                xFileIO.write ((x_io).xFileIO)
                xmodulename.write "_io"
                xtestInvalidFd_overflow.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xFileIO)) ((((x_testcapi).xINT_MAX).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xself).xFileIO)) ((((x_testcapi).xINT_MIN).sub 1)))
                xtest_open_code.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xFileIO)).apply ((x__file__)) ("rb"))) ((xf)))
                          xexpected.write ((((xf).xread)).apply)
                        (((unsupported)).apply (((((x_io).xopen_code)).apply ((x__file__)))) ((xf)))
                          xactual.write ((((xf).xread)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((xactual)))
            (((unsupported)).apply ((xOtherFileTests)) (((xunittest).xTestCase)))
              seq
                xFileIO.write ((x_pyio).xFileIO)
                xmodulename.write "_pyio"
                xtest_open_code.write
                  [xself]
                    memory > xactual
                    memory > xexpected
                    seq > @
                      seq
                        (((unsupported)).apply (((((xself).xFileIO)).apply ((x__file__)) ("rb"))) ((xf)))
                          xexpected.write ((((xf).xread)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xcheck_warnings)) (TRUE))) ((xw)))
                          seq
                            (((unsupported)).apply (((((x_pyio).x_open_code_with_warning)).apply ((x__file__)))) ((xf)))
                              xactual.write ((((xf).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xexpected)) ((xactual)))
                            bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((xw).xwarnings)) ((((unsupported)).apply)))
            xtest_main.write
              []
                seq > @
                  (((unsupported)).apply)
                    bogusForceDataize.write (((xrun_unittest)).apply ((xCAutoFileTests)) ((xPyAutoFileTests)) ((xCOtherFileTests)) ((xPyOtherFileTests)))
                    (((((xos).xpath).xexists)).apply ((xTESTFN))).if
                      bogusForceDataize.write ((((xos).xunlink)).apply ((xTESTFN)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)