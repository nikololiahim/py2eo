memory > xstr
memory > xwarnings
memory > xBytesWarning
memory > xGenericTest
memory > xbytearray
memory > xpath
memory > xbytes
memory > xenv
memory > xlen
memory > xFakePath
memory > xAttributeError
memory > xUnicodeDecodeError
memory > xassert_python_ok
memory > xfp1
memory > xValueError
memory > xs1
memory > xopen
memory > xf
memory > xw
memory > xfp2
memory > xgenericpath
memory > xr
memory > xsupport
memory > xsys
memory > xDeprecationWarning
memory > xs2
memory > xOSError
memory > xos
memory > xgetattr
memory > xPermissionError
memory > xUnicodeEncodeError
memory > xe
memory > xunittest
memory > xattr
memory > xfp
memory > xTypeError
memory > x__name__
[] > test_genericpath
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > x_test_samefile_on_link_func
        memory > xtest_relpath_errors
        memory > xtest_realpath
        memory > xtest_exists_fd
        memory > xpathmodule
        memory > xtest_abspath
        memory > xtest_exists
        memory > xtest_normpath_issue5827
        memory > xtest_sameopenfile
        memory > xtest_samestat_on_symlink
        memory > xtest_isfile
        memory > xtest_nonascii_abspath
        memory > xtest_path_getctime
        memory > xtest_no_argument
        memory > xtest_samefile_on_symlink
        memory > xtest_path_getsize
        memory > xtest_path_commonprefix
        memory > xtest_import
        memory > xtest_path_getmtime
        memory > xtest_getsize
        memory > xtest_path_isfile
        memory > xtest_samestat
        memory > xtest_isdir
        memory > x_test_samestat_on_link_func
        memory > xtest_join_errors
        memory > xtest_path_samefile
        memory > xsetUp
        memory > xassertPathEqual
        memory > xattributes
        memory > xtest_samefile_on_link
        memory > xtest_samefile
        memory > xtest_filetime
        memory > xtest_path_isdir
        memory > xtest_normcase
        memory > xtest_samestat_on_link
        memory > xtest_abspath_issue3426
        memory > xtest_commonprefix
        memory > xcreate_file
        memory > xtest_splitdrive
        memory > xtest_path_exists
        memory > xtest_invalid_paths
        memory > xcommon_attributes
        memory > xtest_expandvars
        memory > xtest_expandvars_nonascii
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xcreate_file.write
              [xfilename xdata]
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("xb") (0))) ((xfp)))
                      bogusForceDataize.write ((((xfp).xwrite)).apply ((xdata)))
            (((unsupported)).apply)
              seq
                xcommon_attributes.write (((unsupported)).apply ("commonprefix") ("getsize") ("getatime") ("getctime") ("getmtime") ("exists") ("isdir") ("isfile"))
                xattributes.write (((unsupported)).apply)
                xtest_no_argument.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xattr)) ((((xself).xcommon_attributes).add ((xself).xattributes))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          seq
                            bogusForceDataize.write (((xgetattr)).apply (((xself).xpathmodule)) ((xattr)))
                            (((unsupported)).apply (((((xself).xfail)).apply (((("{}.{} did not raise a TypeError".xformat)).apply ((((xself).xpathmodule).x__name__)) ((xattr)))))))
                xtest_commonprefix.write
                  [xself]
                    memory > xn
                    memory > xcommonprefix
                    memory > xtestlist
                    memory > xp
                    seq > @
                      seq
                        xcommonprefix.write (((xself).xpathmodule).xcommonprefix)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply)))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply ("/home/swenson/spam") ("/home/swen/spam"))))) ("/home/swen"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply ("/home/swen/spam") ("/home/swen/eggs"))))) ("/home/swen/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply ("/home/swen/spam") ("/home/swen/spam"))))) ("/home/swen/spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply ("home:swenson:spam") ("home:swen:spam"))))) ("home:swen"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply (":home:swen:spam") (":home:swen:eggs"))))) (":home:swen:"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply (":home:swen:spam") (":home:swen:spam"))))) (":home:swen:spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply ("/home/swenson/spam") ("/home/swen/spam"))))) ("/home/swen"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply ("/home/swen/spam") ("/home/swen/eggs"))))) ("/home/swen/"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply ("/home/swen/spam") ("/home/swen/spam"))))) ("/home/swen/spam"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply ("home:swenson:spam") ("home:swen:spam"))))) ("home:swen"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply (":home:swen:spam") (":home:swen:eggs"))))) (":home:swen:"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcommonprefix)).apply ((((unsupported)).apply (":home:swen:spam") (":home:swen:spam"))))) (":home:swen:spam"))
                        xtestlist.write (((unsupported)).apply ("") ("abc") ("Xbcd") ("Xb") ("XY") ("abcd") ("aXc") ("abd") ("ab") ("aX") ("abcX"))
                        (((unsupported)).apply ((xs1)) ((xtestlist)))
                          (((unsupported)).apply ((xs2)) ((xtestlist)))
                            seq
                              xp.write (((xcommonprefix)).apply ((((unsupported)).apply ((xs1)) ((xs2)))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs1).xstartswith)).apply ((xp)))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs2).xstartswith)).apply ((xp)))))
                              ((xs1).neq (xs2)).if
                                seq
                                  xn.write (((xlen)).apply ((xp)))
                                  bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((((unsupported)).apply ((xs1)) ((((unsupported)).apply ((xn)) (((xn).add 1)))))) ((((unsupported)).apply ((xs2)) ((((unsupported)).apply ((xn)) (((xn).add 1)))))))
                xtest_getsize.write
                  [xself]
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfilename)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xfilename)) ("Hello"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xpathmodule).xgetsize)).apply ((xfilename)))) (5))
                        bogusForceDataize.write ((((xos).xremove)).apply ((xfilename)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xfilename)) ("Hello World!"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xself).xpathmodule).xgetsize)).apply ((xfilename)))) (12))
                xtest_filetime.write
                  [xself]
                    memory > xdata
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfilename)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xfilename)) ("foo"))
                        (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("ab") (0))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("bar"))
                        (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("rb") (0))) ((xf)))
                          xdata.write ((xf).xread)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdata)) ("foobar"))
                        bogusForceDataize.write ((((xself).xassertLessEqual)).apply ((((((xself).xpathmodule).xgetctime)).apply ((xfilename)))) ((((((xself).xpathmodule).xgetmtime)).apply ((xfilename)))))
                xtest_exists.write
                  [xself]
                    memory > xbfilename
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((xsupport).xTESTFN)
                        xbfilename.write ((((xos).xfsencode)).apply ((xfilename)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xexists)).apply ((xfilename)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xexists)).apply ((xbfilename)))) (FALSE))
                        bogusForceDataize.write (((xcreate_file)).apply ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xexists)).apply ((xfilename)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xexists)).apply ((xbfilename)))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xexists)).apply (((xfilename).add "udfff")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xexists)).apply (((xbfilename).add "xff")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xexists)).apply (((xfilename).add "x00")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xexists)).apply (((xbfilename).add "x00")))) (FALSE))
                        (((unsupported)).apply (((xself).xpathmodule)) ((xgenericpath))).if
                          seq
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xlexists)).apply ((xfilename)))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xlexists)).apply ((xbfilename)))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xlexists)).apply (((xfilename).add "udfff")))) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xlexists)).apply (((xbfilename).add "xff")))) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xlexists)).apply (((xfilename).add "x00")))) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xlexists)).apply (((xbfilename).add "x00")))) (FALSE))
                xtest_exists_fd.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xr)) ((xw)))) (((xos).xpipe)))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xpathmodule).xexists)).apply ((xr)))))
                          seq
                            bogusForceDataize.write ((((xos).xclose)).apply ((xr)))
                            bogusForceDataize.write ((((xos).xclose)).apply ((xw)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xpathmodule).xexists)).apply ((xr)))))
                xtest_isdir.write
                  [xself]
                    memory > xbfilename
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((xsupport).xTESTFN)
                        xbfilename.write ((((xos).xfsencode)).apply ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply ((xfilename)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply ((xbfilename)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply (((xfilename).add "udfff")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply (((xbfilename).add "xff")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply (((xfilename).add "x00")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply (((xbfilename).add "x00")))) (FALSE))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write (((xcreate_file)).apply ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply ((xfilename)))) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply ((xbfilename)))) (FALSE))
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xfilename)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply ((xfilename)))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisdir)).apply ((xbfilename)))) (TRUE))
                          bogusForceDataize.write ((((xsupport).xrmdir)).apply ((xfilename)))
                xtest_isfile.write
                  [xself]
                    memory > xbfilename
                    memory > xfilename
                    seq > @
                      seq
                        xfilename.write ((xsupport).xTESTFN)
                        xbfilename.write ((((xos).xfsencode)).apply ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply ((xfilename)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply ((xbfilename)))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply (((xfilename).add "udfff")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply (((xbfilename).add "xff")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply (((xfilename).add "x00")))) (FALSE))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply (((xbfilename).add "x00")))) (FALSE))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write (((xcreate_file)).apply ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply ((xfilename)))) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply ((xbfilename)))) (TRUE))
                          bogusForceDataize.write ((((xsupport).xunlink)).apply ((xfilename)))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xos).xmkdir)).apply ((xfilename)))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply ((xfilename)))) (FALSE))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xself).xpathmodule).xisfile)).apply ((xbfilename)))) (FALSE))
                          bogusForceDataize.write ((((xsupport).xrmdir)).apply ((xfilename)))
                xtest_samefile.write
                  [xself]
                    memory > xfile1
                    memory > xfile2
                    seq > @
                      seq
                        xfile1.write ((xsupport).xTESTFN)
                        xfile2.write (((xsupport).xTESTFN).add "2")
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfile1)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfile2)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xfile1)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xpathmodule).xsamefile)).apply ((xfile1)) ((xfile1)))))
                        bogusForceDataize.write (((xcreate_file)).apply ((xfile2)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xpathmodule).xsamefile)).apply ((xfile1)) ((xfile2)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xpathmodule).xsamefile)))
                x_test_samefile_on_link_func.write
                  [xself xfunc]
                    memory > xtest_fn1
                    memory > xtest_fn2
                    seq > @
                      seq
                        xtest_fn1.write ((xsupport).xTESTFN)
                        xtest_fn2.write (((xsupport).xTESTFN).add "2")
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xtest_fn1)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xtest_fn2)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xtest_fn1)))
                        bogusForceDataize.write (((xfunc)).apply ((xtest_fn1)) ((xtest_fn2)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xpathmodule).xsamefile)).apply ((xtest_fn1)) ((xtest_fn2)))))
                        bogusForceDataize.write ((((xos).xremove)).apply ((xtest_fn2)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xtest_fn2)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xpathmodule).xsamefile)).apply ((xtest_fn1)) ((xtest_fn2)))))
                xtest_samefile_on_symlink.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_samefile_on_link_func)).apply (((xos).xsymlink)))
                xtest_samefile_on_link.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xPermissionError)))
                        bogusForceDataize.write ((((xself).x_test_samefile_on_link_func)).apply (((xos).xlink)))
                        bogusForceDataize.write ((((xself).xskipTest)).apply (("os.link: %s".mod (xe))))
                xtest_samestat.write
                  [xself]
                    memory > xstat1
                    memory > xtest_fn2
                    memory > xstat2
                    memory > xtest_fn1
                    seq > @
                      seq
                        xtest_fn1.write ((xsupport).xTESTFN)
                        xtest_fn2.write (((xsupport).xTESTFN).add "2")
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xtest_fn1)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xtest_fn2)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xtest_fn1)))
                        xstat1.write ((((xos).xstat)).apply ((xtest_fn1)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xpathmodule).xsamestat)).apply ((xstat1)) (((((xos).xstat)).apply ((xtest_fn1)))))))
                        bogusForceDataize.write (((xcreate_file)).apply ((xtest_fn2)))
                        xstat2.write ((((xos).xstat)).apply ((xtest_fn2)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xpathmodule).xsamestat)).apply ((xstat1)) ((xstat2)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xself).xpathmodule).xsamestat)))
                x_test_samestat_on_link_func.write
                  [xself xfunc]
                    memory > xtest_fn1
                    memory > xtest_fn2
                    seq > @
                      seq
                        xtest_fn1.write (((xsupport).xTESTFN).add "1")
                        xtest_fn2.write (((xsupport).xTESTFN).add "2")
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xtest_fn1)))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xtest_fn2)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xtest_fn1)))
                        bogusForceDataize.write (((xfunc)).apply ((xtest_fn1)) ((xtest_fn2)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xpathmodule).xsamestat)).apply (((((xos).xstat)).apply ((xtest_fn1)))) (((((xos).xstat)).apply ((xtest_fn2)))))))
                        bogusForceDataize.write ((((xos).xremove)).apply ((xtest_fn2)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xtest_fn2)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xself).xpathmodule).xsamestat)).apply (((((xos).xstat)).apply ((xtest_fn1)))) (((((xos).xstat)).apply ((xtest_fn2)))))))
                xtest_samestat_on_symlink.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_samestat_on_link_func)).apply (((xos).xsymlink)))
                xtest_samestat_on_link.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xPermissionError)))
                        bogusForceDataize.write ((((xself).x_test_samestat_on_link_func)).apply (((xos).xlink)))
                        bogusForceDataize.write ((((xself).xskipTest)).apply (("os.link: %s".mod (xe))))
                xtest_sameopenfile.write
                  [xself]
                    memory > xfd1
                    memory > xfilename
                    memory > xfd2
                    seq > @
                      seq
                        xfilename.write ((xsupport).xTESTFN)
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xfilename)))
                        bogusForceDataize.write (((xcreate_file)).apply ((xfilename)))
                        (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("rb") (0))) ((xfp1)))
                          seq
                            xfd1.write ((xfp1).xfileno)
                            (((unsupported)).apply ((((xopen)).apply ((xfilename)) ("rb") (0))) ((xfp2)))
                              seq
                                xfd2.write ((xfp2).xfileno)
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xself).xpathmodule).xsameopenfile)).apply ((xfd1)) ((xfd2)))))
            (((unsupported)).apply ((xGenericTest)) (((xunittest).xTestCase)))
              seq
                xpathmodule.write (xgenericpath)
                xtest_invalid_paths.write
                  [xself]
                    memory > xfunc
                    seq > @
                      (((unsupported)).apply ((xattr)) (((xGenericTest).xcommon_attributes)))
                        seq
                          ((xattr).eq "commonprefix").if
                            (((unsupported)).apply)
                          xfunc.write (((xgetattr)).apply (((xself).xpathmodule)) ((xattr)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xattr)))))
                            (((unsupported)).apply ((xattr)) ((((unsupported)).apply ("exists") ("isdir") ("isfile")))).if
                              seq
                                bogusForceDataize.write (((xfunc)).apply ("/tmpudfffabcds"))
                                bogusForceDataize.write (((xfunc)).apply ("/tmpxffabcds"))
                                bogusForceDataize.write (((xfunc)).apply ("/tmpx00abcds"))
                                bogusForceDataize.write (((xfunc)).apply ("/tmpx00abcds"))
                              seq
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOSError)) ((xUnicodeEncodeError)))))))
                                  bogusForceDataize.write (((xfunc)).apply ("/tmpudfffabcds"))
                                (((unsupported)).apply (((((xself).xassertRaises)).apply ((((unsupported)).apply ((xOSError)) ((xUnicodeDecodeError)))))))
                                  bogusForceDataize.write (((xfunc)).apply ("/tmpxffabcds"))
                                (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("embedded null"))))
                                  bogusForceDataize.write (((xfunc)).apply ("/tmpx00abcds"))
                                (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xValueError)) ("embedded null"))))
                                  bogusForceDataize.write (((xfunc)).apply ("/tmpx00abcds"))
            (((unsupported)).apply ((xGenericTest)))
              seq
                xcommon_attributes.write (((xGenericTest).xcommon_attributes).add (((unsupported)).apply ("curdir") ("pardir") ("extsep") ("sep") ("pathsep") ("defpath") ("altsep") ("devnull") ("normcase") ("splitdrive") ("expandvars") ("normpath") ("abspath") ("join") ("split") ("splitext") ("isabs") ("basename") ("dirname") ("lexists") ("islink") ("ismount") ("expanduser") ("normpath") ("realpath")))
                xtest_normcase.write
                  [xself]
                    memory > xp
                    memory > xnormcase
                    seq > @
                      seq
                        xnormcase.write (((xself).xpathmodule).xnormcase)
                        (((unsupported)).apply ((xp)) ((((unsupported)).apply ("FoO/./BaR") ("FoO/./BaR"))))
                          seq
                            xp.write (((xnormcase)).apply ((xp)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xp)) ((((xnormcase)).apply ((xp)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnormcase)).apply (""))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnormcase)).apply (""))) (""))
                        (((unsupported)).apply ((xpath)) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (TRUE) (0) (2.5) ((((unsupported)).apply)) ((((xbytearray)).apply (""))) ((((unsupported)).apply ("o") ("o"))))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xnormcase)) ((xpath)))
                xtest_splitdrive.write
                  [xself]
                    memory > xsplitdrive
                    seq > @
                      seq
                        xsplitdrive.write (((xself).xpathmodule).xsplitdrive)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsplitdrive)).apply ("/foo/bar"))) ((((unsupported)).apply ("") ("/foo/bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsplitdrive)).apply ("foo:bar"))) ((((unsupported)).apply ("") ("foo:bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsplitdrive)).apply (":foo:bar"))) ((((unsupported)).apply ("") (":foo:bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsplitdrive)).apply ("/foo/bar"))) ((((unsupported)).apply ("") ("/foo/bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsplitdrive)).apply ("foo:bar"))) ((((unsupported)).apply ("") ("foo:bar"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xsplitdrive)).apply (":foo:bar"))) ((((unsupported)).apply ("") (":foo:bar"))))
                xtest_expandvars.write
                  [xself]
                    memory > xexpandvars
                    seq > @
                      seq
                        xexpandvars.write (((xself).xpathmodule).xexpandvars)
                        (((unsupported)).apply (((xsupport).xEnvironmentVarGuard)) ((xenv)))
                          seq
                            unsupported
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("foo"))) ("bar"))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("{foo"))) ("baz1"))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("{foo}"))) ("baz2"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("foo"))) ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$foo bar"))) ("bar bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("${foo}bar"))) ("barbar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$[foo]bar"))) ("$[foo]bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$bar bar"))) ("$bar bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$?bar"))) ("$?bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$foo}bar"))) ("bar}bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("${foo"))) ("${foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("${{foo}}"))) ("baz1}"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$foo$foo"))) ("barbar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$bar$bar"))) ("$bar$bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("foo"))) ("foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$foo bar"))) ("bar bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("${foo}bar"))) ("barbar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$[foo]bar"))) ("$[foo]bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$bar bar"))) ("$bar bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$?bar"))) ("$?bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$foo}bar"))) ("bar}bar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("${foo"))) ("${foo"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("${{foo}}"))) ("baz1}"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$foo$foo"))) ("barbar"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ("$bar$bar"))) ("$bar$bar"))
                xtest_expandvars_nonascii.write
                  [xself]
                    memory > xexpandvars
                    memory > xnonascii
                    memory > xcheck
                    seq > @
                      (((unsupported)).apply)
                        xexpandvars.write (((xself).xpathmodule).xexpandvars)
                        xcheck.write
                          [xvalue xexpected]
                            seq > @
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xexpandvars)).apply ((xvalue)))) ((xexpected)))
                        (((unsupported)).apply (((xsupport).xEnvironmentVarGuard)) ((xenv)))
                          seq
                            unsupported
                            xnonascii.write ((xsupport).xFS_NONASCII)
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ("spam"))) ((xnonascii)))
                            (((unsupported)).apply ((((unsupported)).apply ((xenv)) ((xnonascii)))) (("ham".add (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply ((xnonascii)) ((xnonascii)))
                            bogusForceDataize.write (((xcheck)).apply ("$spam bar") (("%s bar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply ("${spam}bar") (("%sbar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply (("${%s}bar".mod (xnonascii))) (("ham%sbar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply (("$bar%s bar".mod (xnonascii))) (("$bar%s bar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply ("$spam}bar") (("%s}bar".mod (xnonascii))))
                            bogusForceDataize.write (((xcheck)).apply (((((xos).xfsencode)).apply ((xnonascii)))) (((((xos).xfsencode)).apply ((xnonascii)))))
                            bogusForceDataize.write (((xcheck)).apply ("$spam bar") (((((xos).xfsencode)).apply (("%s bar".mod (xnonascii))))))
                            bogusForceDataize.write (((xcheck)).apply ("${spam}bar") (((((xos).xfsencode)).apply (("%sbar".mod (xnonascii))))))
                            bogusForceDataize.write (((xcheck)).apply (((((xos).xfsencode)).apply (("${%s}bar".mod (xnonascii))))) (((((xos).xfsencode)).apply (("ham%sbar".mod (xnonascii))))))
                            bogusForceDataize.write (((xcheck)).apply (((((xos).xfsencode)).apply (("$bar%s bar".mod (xnonascii))))) (((((xos).xfsencode)).apply (("$bar%s bar".mod (xnonascii))))))
                            bogusForceDataize.write (((xcheck)).apply ("$spam}bar") (((((xos).xfsencode)).apply (("%s}bar".mod (xnonascii))))))
                xtest_abspath.write
                  [xself]
                    memory > xundecodable_path
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("foo") ((((((xself).xpathmodule).xabspath)).apply ("foo"))))
                        (((unsupported)).apply (((xwarnings).xcatch_warnings)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("ignore") ((xDeprecationWarning)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("foo") ((((((xself).xpathmodule).xabspath)).apply ("foo"))))
                        xundecodable_path.write ((((xsys).xplatform).eq "win32").if "" "fxf2xf2")
                        (((unsupported)).apply (((xwarnings).xcatch_warnings)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("ignore") ((xDeprecationWarning)))
                            (((unsupported)).apply ((xpath)) ((((unsupported)).apply ("") ("foo") ((xundecodable_path)) ("/foo") ("C:\\"))))
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((((xself).xpathmodule).xabspath)).apply ((xpath)))) ((xbytes)))
                xtest_realpath.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("foo") ((((((xself).xpathmodule).xrealpath)).apply ("foo"))))
                        (((unsupported)).apply (((xwarnings).xcatch_warnings)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("ignore") ((xDeprecationWarning)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("foo") ((((((xself).xpathmodule).xrealpath)).apply ("foo"))))
                xtest_normpath_issue5827.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xpath)) ((((unsupported)).apply ("") (".") ("/") ("\\") ("///foo/.//bar//"))))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((((xself).xpathmodule).xnormpath)).apply ((xpath)))) ((xstr)))
                xtest_abspath_issue3426.write
                  [xself]
                    memory > xabspath
                    memory > xunicwd
                    seq > @
                      seq
                        xabspath.write (((xself).xpathmodule).xabspath)
                        (((unsupported)).apply ((xpath)) ((((unsupported)).apply ("") ("fuu") ("fxf9xf9") ("/fuu") ("U:\\"))))
                          bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xabspath)).apply ((xpath)))) ((xstr)))
                        xunicwd.write "xe7wxf0"
                        (((unsupported)).apply ((((unsupported)).apply ((xAttributeError)) ((xUnicodeEncodeError)))))
                          bogusForceDataize.write ((((xos).xfsencode)).apply ((xunicwd)))
                          (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply ((xunicwd)))))
                            (((unsupported)).apply ((xpath)) ((((unsupported)).apply ("") ("fuu") ("fxf9xf9") ("/fuu") ("U:\\"))))
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((((xabspath)).apply ((xpath)))) ((xstr)))
                xtest_nonascii_abspath.write
                  [xself]
                    memory > xname
                    seq > @
                      seq
                        (((xsupport).xTESTFN_UNDECODABLE).and (((unsupported)).apply (((xsys).xplatform)) ((((unsupported)).apply ("win32") ("darwin"))))).if
                          xname.write ((xsupport).xTESTFN_UNDECODABLE)
                          ((xsupport).xTESTFN_NONASCII).if
                            xname.write ((xsupport).xTESTFN_NONASCII)
                            bogusForceDataize.write ((((xself).xskipTest)).apply ("need support.TESTFN_NONASCII"))
                        (((unsupported)).apply (((xwarnings).xcatch_warnings)))
                          seq
                            bogusForceDataize.write ((((xwarnings).xsimplefilter)).apply ("ignore") ((xDeprecationWarning)))
                            (((unsupported)).apply (((((xsupport).xtemp_cwd)).apply ((xname)))))
                              unsupported
                xtest_join_errors.write
                  [xself]
                    memory > xerrmsg
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xsupport).xcheck_warnings)) ((((unsupported)).apply ("") ((xBytesWarning)))) (TRUE))))
                        seq
                          xerrmsg.write "Can't mix strings and bytes in path components"
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xerrmsg)))))
                            bogusForceDataize.write (((((xself).xpathmodule).xjoin)).apply ("bytes") ("str"))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xerrmsg)))))
                            bogusForceDataize.write (((((xself).xpathmodule).xjoin)).apply ("str") ("bytes"))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("int"))))
                            bogusForceDataize.write (((((xself).xpathmodule).xjoin)).apply (42) ("str"))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("int"))))
                            bogusForceDataize.write (((((xself).xpathmodule).xjoin)).apply ("str") (42))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("int"))))
                            bogusForceDataize.write (((((xself).xpathmodule).xjoin)).apply (42))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("list"))))
                            bogusForceDataize.write (((((xself).xpathmodule).xjoin)).apply ((((unsupported)).apply)))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("bytearray"))))
                            bogusForceDataize.write (((((xself).xpathmodule).xjoin)).apply ((((xbytearray)).apply ("foo"))) ((((xbytearray)).apply ("bar"))))
                xtest_relpath_errors.write
                  [xself]
                    memory > xerrmsg
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xsupport).xcheck_warnings)) ((((unsupported)).apply ("") ((((unsupported)).apply ((xBytesWarning)) ((xDeprecationWarning)))))) (TRUE))))
                        seq
                          xerrmsg.write "Can't mix strings and bytes in path components"
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xerrmsg)))))
                            bogusForceDataize.write (((((xself).xpathmodule).xrelpath)).apply ("bytes") ("str"))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ((xerrmsg)))))
                            bogusForceDataize.write (((((xself).xpathmodule).xrelpath)).apply ("str") ("bytes"))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("int"))))
                            bogusForceDataize.write (((((xself).xpathmodule).xrelpath)).apply (42) ("str"))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("int"))))
                            bogusForceDataize.write (((((xself).xpathmodule).xrelpath)).apply ("str") (42))
                          (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply ((xTypeError)) ("bytearray"))))
                            bogusForceDataize.write (((((xself).xpathmodule).xrelpath)).apply ((((xbytearray)).apply ("foo"))) ((((xbytearray)).apply ("bar"))))
                xtest_import.write
                  [xself]
                    seq > @
                      bogusForceDataize.write (((xassert_python_ok)).apply ("-S") ("-c") (("import ".add (((xself).xpathmodule).x__name__))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xfile_name)) ((((xsupport).xTESTFN).xlower)))
                        (((unsupported)).apply (((xself).xfile_path)) ((((xFakePath)).apply (((xsupport).xTESTFN)))))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xself).xfile_name)))
                        bogusForceDataize.write (((xcreate_file)).apply (((xself).xfile_name)) ("test_genericpath.PathLikeTests"))
                xassertPathEqual.write
                  [xself xfunc]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xfunc)).apply (((xself).xfile_path)))) ((((xfunc)).apply (((xself).xfile_name)))))
                xtest_path_exists.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xos).xpath).xexists)))
                xtest_path_isfile.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xos).xpath).xisfile)))
                xtest_path_isdir.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xos).xpath).xisdir)))
                xtest_path_commonprefix.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((xos).xpath).xcommonprefix)).apply ((((unsupported)).apply (((xself).xfile_path)) (((xself).xfile_name)))))) (((xself).xfile_name)))
                xtest_path_getsize.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xos).xpath).xgetsize)))
                xtest_path_getmtime.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xos).xpath).xgetatime)))
                xtest_path_getctime.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertPathEqual)).apply ((((xos).xpath).xgetctime)))
                xtest_path_samefile.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xsamefile)).apply (((xself).xfile_path)) (((xself).xfile_name)))))
            ((x__name__).eq "__main__").if
              unsupported