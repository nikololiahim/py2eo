memory > xRegexPattern
memory > xget_resolver
memory > xstr
memory > xRoutePattern
memory > xSimpleTestCase2
memory > xSimpleTestCase
[] > test_resolvers
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_resolver_cache_default__root_urlconf
        memory > x_
        memory > xtest_str
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_str.write
                [xself]
                  seq > @
                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xRegexPattern)).apply ((((x_)).apply ("^translated/$"))))))) ("^translated/$"))
            (((unsupported)).apply ((xSimpleTestCase2)))
              xtest_str.write
                [xself]
                  seq > @
                    bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((xRoutePattern)).apply ((((x_)).apply ("translated/"))))))) ("translated/"))
            (((unsupported)).apply ((xSimpleTestCase)))
              xtest_resolver_cache_default__root_urlconf.write
                [xself]
                  seq > @
                    (((unsupported)).apply)
                      bogusForceDataize.write ((((xself).xassertIs)).apply ((((xget_resolver)).apply)) ((((xget_resolver)).apply ("urlpatterns.path_urls"))))
                      bogusForceDataize.write ((((xself).xassertIsNot)).apply ((((xget_resolver)).apply)) ((((xget_resolver)).apply ("urlpatterns.path_dynamic_urls"))))