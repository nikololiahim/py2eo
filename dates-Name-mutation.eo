memory > xBaseTodayArchiveView
memory > xtimezone
memory > xstr
memory > xBaseDateDetailView
memory > xOverflowError
memory > xend
memory > xsuper
memory > xsorted
memory > xBaseDayArchiveView
memory > xmodels
memory > xisinstance
memory > xSingleObjectTemplateResponseMixin
memory > xdatetime
memory > xBaseWeekArchiveView
memory > xBaseMonthArchiveView
memory > xValueError
memory > xNotImplementedError
memory > xIndexError
memory > xYearMixin
memory > xKeyError
memory > xstart
memory > xView
memory > xMultipleObjectTemplateResponseMixin
memory > xsettings
memory > xBaseArchiveIndexView
memory > xBaseDateListView
memory > xlookup
memory > xMonthMixin
memory > xHttp404
memory > xWeekMixin
memory > xBaseYearArchiveView
memory > xextra_context
memory > xBaseDetailView
memory > xgetattr
memory > xDayMixin
memory > xDateMixin
memory > xImproperlyConfigured
memory > xMultipleObjectMixin
[] > dates
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xget_next_day
        memory > xyear_format
        memory > xweek
        memory > xdate_list_period
        memory > xday_format
        memory > xget_week
        memory > xget_next_week
        memory > xget_date_list_period
        memory > xget_week_format
        memory > x_get_next_year
        memory > x_get_next_month
        memory > xyear2
        memory > xget_date_field
        memory > xget
        memory > x_get_next_day
        memory > x_make_single_date_lookup
        memory > xmake_object_list
        memory > x_get_next_week
        memory > xget_previous_week
        memory > xget_date_list
        memory > x_get_weekday
        memory > xget_make_object_list
        memory > xcontext_object_name
        memory > xget_month_format
        memory > x_get_current_month
        memory > xtimezone_today
        memory > x_get_current_year
        memory > xget_month
        memory > x_get_current_day
        memory > xget_year_format
        memory > x_date_from_string
        memory > x_
        memory > x_make_date_lookup_arg
        memory > xget_allow_future
        memory > xget_object
        memory > xmonth
        memory > x_get_next_prev
        memory > x_get_current_week
        memory > xmonth_format
        memory > xget_day_format
        memory > xget_previous_year
        memory > xtemplate_name_suffix
        memory > xget_previous_day
        memory > xget_next_month
        memory > xallow_empty
        memory > xget_next_year
        memory > xday
        memory > xget_day
        memory > xget_dated_items
        memory > xget_year
        memory > xget_previous_month
        memory > xget_ordering
        memory > xweek_format
        memory > xdate_field
        memory > xallow_future
        memory > xget_dated_queryset
        memory > x_get_dated_items
        memory > xuses_datetime_field
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              seq
                unsupported
                xyear_format.write "%Y"
                xyear2.write "None: is there a None literal in the EO language?"
                xget_year_format.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xyear_format)))
                xget_year.write
                  [xself]
                    memory > xyear
                    seq > @
                      seq
                        unsupported
                        xyear.write ((xself).xyear)
                        (((unsupported)).apply ((xyear)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xKeyError)))
                            xyear.write (((unsupported)).apply (((xself).xkwargs)) ("year"))
                            (((unsupported)).apply ((xKeyError)))
                              xyear.write (((unsupported)).apply ((((xself).xrequest).xGET)) ("year"))
                              (((unsupported)).apply ((((xHttp404)).apply ((((x_)).apply ("No year specified"))))))
                        (((unsupported)).apply ((xyear)))
                xget_next_year.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_get_next_prev)) ((xself)) ((xdate)) (FALSE) ("year"))))
                xget_previous_year.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_get_next_prev)) ((xself)) ((xdate)) (TRUE) ("year"))))
                x_get_next_year.write
                  [xself xdate]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xValueError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xdate).xreplace)) ((((xdate).xyear).add 1)) (1) (1))))
                          (((unsupported)).apply ((((xHttp404)).apply ((((x_)).apply ("Date out of range"))))))
                x_get_current_year.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xdate).xreplace)) (1) (1))))
            (((unsupported)).apply)
              seq
                unsupported
                xmonth_format.write "%b"
                xmonth.write "None: is there a None literal in the EO language?"
                xget_month_format.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmonth_format)))
                xget_month.write
                  [xself]
                    memory > xmonth
                    seq > @
                      seq
                        unsupported
                        xmonth.write ((xself).xmonth)
                        (((unsupported)).apply ((xmonth)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xKeyError)))
                            xmonth.write (((unsupported)).apply (((xself).xkwargs)) ("month"))
                            (((unsupported)).apply ((xKeyError)))
                              xmonth.write (((unsupported)).apply ((((xself).xrequest).xGET)) ("month"))
                              (((unsupported)).apply ((((xHttp404)).apply ((((x_)).apply ("No month specified"))))))
                        (((unsupported)).apply ((xmonth)))
                xget_next_month.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_get_next_prev)) ((xself)) ((xdate)) (FALSE) ("month"))))
                xget_previous_month.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_get_next_prev)) ((xself)) ((xdate)) (TRUE) ("month"))))
                x_get_next_month.write
                  [xself xdate]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((xdate).xmonth).eq 12).if
                          (((unsupported)).apply ((xValueError)))
                            (((unsupported)).apply ((((unsupported)).apply (((xdate).xreplace)) ((((xdate).xyear).add 1)) (1) (1))))
                            (((unsupported)).apply ((((xHttp404)).apply ((((x_)).apply ("Date out of range"))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xdate).xreplace)) ((((xdate).xmonth).add 1)) (1))))
                x_get_current_month.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply (((xdate).xreplace)) (1))))
            (((unsupported)).apply)
              seq
                unsupported
                xday_format.write "%d"
                xday.write "None: is there a None literal in the EO language?"
                xget_day_format.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xday_format)))
                xget_day.write
                  [xself]
                    memory > xday
                    seq > @
                      seq
                        unsupported
                        xday.write ((xself).xday)
                        (((unsupported)).apply ((xday)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xKeyError)))
                            xday.write (((unsupported)).apply (((xself).xkwargs)) ("day"))
                            (((unsupported)).apply ((xKeyError)))
                              xday.write (((unsupported)).apply ((((xself).xrequest).xGET)) ("day"))
                              (((unsupported)).apply ((((xHttp404)).apply ((((x_)).apply ("No day specified"))))))
                        (((unsupported)).apply ((xday)))
                xget_next_day.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_get_next_prev)) ((xself)) ((xdate)) (FALSE) ("day"))))
                xget_previous_day.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_get_next_prev)) ((xself)) ((xdate)) (TRUE) ("day"))))
                x_get_next_day.write
                  [xself xdate]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xdate).add (((unsupported)).apply (((xdatetime).xtimedelta)) (1)))))
                x_get_current_day.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xdate)))
            (((unsupported)).apply)
              seq
                unsupported
                xweek_format.write "%U"
                xweek.write "None: is there a None literal in the EO language?"
                xget_week_format.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xweek_format)))
                xget_week.write
                  [xself]
                    memory > xweek
                    seq > @
                      seq
                        unsupported
                        xweek.write ((xself).xweek)
                        (((unsupported)).apply ((xweek)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((xKeyError)))
                            xweek.write (((unsupported)).apply (((xself).xkwargs)) ("week"))
                            (((unsupported)).apply ((xKeyError)))
                              xweek.write (((unsupported)).apply ((((xself).xrequest).xGET)) ("week"))
                              (((unsupported)).apply ((((xHttp404)).apply ((((x_)).apply ("No week specified"))))))
                        (((unsupported)).apply ((xweek)))
                xget_next_week.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_get_next_prev)) ((xself)) ((xdate)) (FALSE) ("week"))))
                xget_previous_week.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((unsupported)).apply ((x_get_next_prev)) ((xself)) ((xdate)) (TRUE) ("week"))))
                x_get_next_week.write
                  [xself xdate]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xOverflowError)))
                          (((unsupported)).apply (((xdate).add (((unsupported)).apply (((xdatetime).xtimedelta)) ((7.sub ((((xself).x_get_weekday)).apply ((xdate)))))))))
                          (((unsupported)).apply ((((xHttp404)).apply ((((x_)).apply ("Date out of range"))))))
                x_get_current_week.write
                  [xself xdate]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xdate).sub ((((xdatetime).xtimedelta)).apply (((((xself).x_get_weekday)).apply ((xdate))))))))
                x_get_weekday.write
                  [xself xdate]
                    memory > xweek_format
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xweek_format.write ((((xself).xget_week_format)).apply)
                        (((unsupported)).apply ((xweek_format)) ((((unsupported)).apply ("%W") ("%V")))).if
                          (((unsupported)).apply (((((xdate).xweekday)).apply)))
                          ((xweek_format).eq "%U").if
                            (((unsupported)).apply (((((((xdate).xweekday)).apply).add 1).mod 7)))
                            (((unsupported)).apply ((((xValueError)).apply (("unknown week format: %s".mod (xweek_format))))))
            (((unsupported)).apply)
              seq
                unsupported
                xdate_field.write "None: is there a None literal in the EO language?"
                xallow_future.write FALSE
                xget_date_field.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((xself).xdate_field)) ("None: is there a None literal in the EO language?")).if
                          (((unsupported)).apply ((((xImproperlyConfigured)).apply (("%s.date_field is required.".mod (((xself).x__class__).x__name__))))))
                        (((unsupported)).apply (((xself).xdate_field)))
                xget_allow_future.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xallow_future)))
                xuses_datetime_field.write
                  [xself]
                    memory > xfield
                    memory > xmodel
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmodel.write ((((unsupported)).apply (((xself).xmodel)) ("None: is there a None literal in the EO language?")).if (((((xself).xget_queryset)).apply).xmodel) ((xself).xmodel))
                        xfield.write (((((xmodel).x_meta).xget_field)).apply (((((xself).xget_date_field)).apply)))
                        (((unsupported)).apply ((((xisinstance)).apply ((xfield)) (((xmodels).xDateTimeField)))))
                x_make_date_lookup_arg.write
                  [xself xvalue]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        ((xself).xuses_datetime_field).if
                          seq
                            xvalue.write (((((xdatetime).xdatetime).xcombine)).apply ((xvalue)) ((((xdatetime).xtime).xmin)))
                            ((xsettings).xUSE_TZ).if
                              xvalue.write ((((xtimezone).xmake_aware)).apply ((xvalue)))
                        (((unsupported)).apply ((xvalue)))
                x_make_single_date_lookup.write
                  [xself xdate]
                    memory > xdate_field
                    memory > xsince
                    memory > xuntil
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xdate_field.write ((((xself).xget_date_field)).apply)
                        ((xself).xuses_datetime_field).if
                          seq
                            xsince.write ((((xself).x_make_date_lookup_arg)).apply ((xdate)))
                            xuntil.write ((((xself).x_make_date_lookup_arg)).apply (((xdate).add (((unsupported)).apply (((xdatetime).xtimedelta)) (1)))))
                            (((unsupported)).apply ((((unsupported)).apply (("%s__gte".mod (xdate_field))) ((xsince)) (("%s__lt".mod (xdate_field))) ((xuntil)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xdate_field)) ((xdate)))))
            (((unsupported)).apply ((xMultipleObjectMixin)) ((xDateMixin)) ((xView)))
              seq
                unsupported
                xallow_empty.write FALSE
                xdate_list_period.write "year"
                xget.write
                  [xself xrequest]
                    memory > xcontext
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xdate_list)) (((xself).xobject_list)) ((xextra_context)))) (((((xself).xget_dated_items)).apply)))
                        xcontext.write (((unsupported)).apply (((xself).xget_context_data)) (((xself).xobject_list)) (((xself).xdate_list)) ((((unsupported)).apply ((xextra_context)))))
                        (((unsupported)).apply (((((xself).xrender_to_response)).apply ((xcontext)))))
                xget_dated_items.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((((xNotImplementedError)).apply ("A DateView must provide an implementation of get_dated_items()"))))
                xget_ordering.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((unsupported)).apply (((xself).xordering)) ("None: is there a None literal in the EO language?")).if ("-%s".mod ((((xself).xget_date_field)).apply)) ((xself).xordering))))
                xget_dated_queryset.write
                  [xself]
                    memory > xqs
                    memory > xis_empty
                    memory > xpaginate_by
                    memory > xallow_empty
                    memory > xdate_field
                    memory > xallow_future
                    memory > xnow
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xqs.write (((((((xself).xget_queryset)).apply).xfilter)).apply ((((unsupported)).apply ((xlookup)))))
                        xdate_field.write ((((xself).xget_date_field)).apply)
                        xallow_future.write ((((xself).xget_allow_future)).apply)
                        xallow_empty.write ((((xself).xget_allow_empty)).apply)
                        xpaginate_by.write ((((xself).xget_paginate_by)).apply ((xqs)))
                        ((xallow_future).not).if
                          seq
                            xnow.write (((xself).xuses_datetime_field).if ((((xtimezone).xnow)).apply) (((xtimezone_today)).apply))
                            xqs.write ((((xqs).xfilter)).apply ((((unsupported)).apply ((((unsupported)).apply (("%s__lte".mod (xdate_field))) ((xnow)))))))
                        ((xallow_empty).not).if
                          seq
                            xis_empty.write ((((unsupported)).apply ((xpaginate_by)) ("None: is there a None literal in the EO language?")).if ((xqs).not) (((((xqs).xexists)).apply).not))
                            (xis_empty).if
                              (((unsupported)).apply ((((xHttp404)).apply (((((x_)).apply ("No %(verbose_name_plural)s available")).mod (((unsupported)).apply ("verbose_name_plural") (((((xqs).xmodel).x_meta).xverbose_name_plural))))))))
                        (((unsupported)).apply ((xqs)))
                xget_date_list_period.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xdate_list_period)))
                xget_date_list.write
                  [xself xqueryset xdate_type xordering]
                    memory > xdate_field
                    memory > xallow_empty
                    memory > xdate_list
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xdate_field.write ((((xself).xget_date_field)).apply)
                        xallow_empty.write ((((xself).xget_allow_empty)).apply)
                        (((unsupported)).apply ((xdate_type)) ("None: is there a None literal in the EO language?")).if
                          xdate_type.write ((((xself).xget_date_list_period)).apply)
                        ((xself).xuses_datetime_field).if
                          xdate_list.write ((((xqueryset).xdatetimes)).apply ((xdate_field)) ((xdate_type)) ((xordering)))
                          xdate_list.write ((((xqueryset).xdates)).apply ((xdate_field)) ((xdate_type)) ((xordering)))
                        (((((unsupported)).apply ((xdate_list)) ("None: is there a None literal in the EO language?")).and ((xdate_list).not)).and ((xallow_empty).not)).if
                          (((unsupported)).apply ((((xHttp404)).apply (((((x_)).apply ("No %(verbose_name_plural)s available")).mod (((unsupported)).apply ("verbose_name_plural") (((((xqueryset).xmodel).x_meta).xverbose_name_plural))))))))
                        (((unsupported)).apply ((xdate_list)))
            (((unsupported)).apply ((xBaseDateListView)))
              seq
                (((unsupported)).apply)
                xcontext_object_name.write "latest"
                xget_dated_items.write
                  [xself]
                    memory > xqs
                    memory > xdate_list
                    seq > @
                      seq
                        unsupported
                        xqs.write ((((xself).xget_dated_queryset)).apply)
                        xdate_list.write (((unsupported)).apply (((xself).xget_date_list)) ((xqs)) ("DESC"))
                        ((xdate_list).not).if
                          xqs.write ((((xqs).xnone)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xdate_list)) ((xqs)) ((((unsupported)).apply)))))
            (((unsupported)).apply ((xMultipleObjectTemplateResponseMixin)) ((xBaseArchiveIndexView)))
              seq
                unsupported
                xtemplate_name_suffix.write "_archive"
            (((unsupported)).apply ((xYearMixin)) ((xBaseDateListView)))
              seq
                unsupported
                xdate_list_period.write "month"
                xmake_object_list.write FALSE
                xget_dated_items.write
                  [xself]
                    memory > xqs
                    memory > xsince
                    memory > xdate
                    memory > xdate_field
                    memory > xuntil
                    memory > xdate_list
                    memory > xlookup_kwargs
                    memory > xyear
                    seq > @
                      seq
                        unsupported
                        xyear.write ((((xself).xget_year)).apply)
                        xdate_field.write ((((xself).xget_date_field)).apply)
                        xdate.write (((x_date_from_string)).apply ((xyear)) (((((xself).xget_year_format)).apply)))
                        xsince.write ((((xself).x_make_date_lookup_arg)).apply ((xdate)))
                        xuntil.write ((((xself).x_make_date_lookup_arg)).apply (((((xself).x_get_next_year)).apply ((xdate)))))
                        xlookup_kwargs.write (((unsupported)).apply (("%s__gte".mod (xdate_field))) ((xsince)) (("%s__lt".mod (xdate_field))) ((xuntil)))
                        xqs.write ((((xself).xget_dated_queryset)).apply ((((unsupported)).apply ((xlookup_kwargs)))))
                        xdate_list.write ((((xself).xget_date_list)).apply ((xqs)))
                        (((((xself).xget_make_object_list)).apply).not).if
                          xqs.write ((((xqs).xnone)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xdate_list)) ((xqs)) ((((unsupported)).apply ("year") ((xdate)) ("next_year") (((((xself).xget_next_year)).apply ((xdate)))) ("previous_year") (((((xself).xget_previous_year)).apply ((xdate)))))))))
                xget_make_object_list.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xmake_object_list)))
            (((unsupported)).apply ((xMultipleObjectTemplateResponseMixin)) ((xBaseYearArchiveView)))
              seq
                unsupported
                xtemplate_name_suffix.write "_archive_year"
            (((unsupported)).apply ((xYearMixin)) ((xMonthMixin)) ((xBaseDateListView)))
              seq
                unsupported
                xdate_list_period.write "day"
                xget_dated_items.write
                  [xself]
                    memory > xqs
                    memory > xsince
                    memory > xdate
                    memory > xmonth
                    memory > xdate_field
                    memory > xuntil
                    memory > xdate_list
                    memory > xlookup_kwargs
                    memory > xyear
                    seq > @
                      seq
                        unsupported
                        xyear.write ((((xself).xget_year)).apply)
                        xmonth.write ((((xself).xget_month)).apply)
                        xdate_field.write ((((xself).xget_date_field)).apply)
                        xdate.write (((x_date_from_string)).apply ((xyear)) (((((xself).xget_year_format)).apply)) ((xmonth)) (((((xself).xget_month_format)).apply)))
                        xsince.write ((((xself).x_make_date_lookup_arg)).apply ((xdate)))
                        xuntil.write ((((xself).x_make_date_lookup_arg)).apply (((((xself).x_get_next_month)).apply ((xdate)))))
                        xlookup_kwargs.write (((unsupported)).apply (("%s__gte".mod (xdate_field))) ((xsince)) (("%s__lt".mod (xdate_field))) ((xuntil)))
                        xqs.write ((((xself).xget_dated_queryset)).apply ((((unsupported)).apply ((xlookup_kwargs)))))
                        xdate_list.write ((((xself).xget_date_list)).apply ((xqs)))
                        (((unsupported)).apply ((((unsupported)).apply ((xdate_list)) ((xqs)) ((((unsupported)).apply ("month") ((xdate)) ("next_month") (((((xself).xget_next_month)).apply ((xdate)))) ("previous_month") (((((xself).xget_previous_month)).apply ((xdate)))))))))
            (((unsupported)).apply ((xMultipleObjectTemplateResponseMixin)) ((xBaseMonthArchiveView)))
              seq
                unsupported
                xtemplate_name_suffix.write "_archive_month"
            (((unsupported)).apply ((xYearMixin)) ((xWeekMixin)) ((xBaseDateListView)))
              seq
                unsupported
                xget_dated_items.write
                  [xself]
                    memory > xuntil
                    memory > xsince
                    memory > xweek_choices
                    memory > xyear_format
                    memory > xqs
                    memory > xweek_start
                    memory > xweek
                    memory > xdate
                    memory > xweek_format
                    memory > xdate_field
                    memory > xlookup_kwargs
                    memory > xyear
                    seq > @
                      seq
                        unsupported
                        xyear.write ((((xself).xget_year)).apply)
                        xweek.write ((((xself).xget_week)).apply)
                        xdate_field.write ((((xself).xget_date_field)).apply)
                        xweek_format.write ((((xself).xget_week_format)).apply)
                        xweek_choices.write (((unsupported)).apply ("%W") ("1") ("%U") ("0") ("%V") ("1"))
                        (((unsupported)).apply ((xKeyError)))
                          xweek_start.write (((unsupported)).apply ((xweek_choices)) ((xweek_format)))
                          (((unsupported)).apply ((((xValueError)).apply (("Unknown week format %r. Choices are: %s".mod (((unsupported)).apply ((xweek_format)) ((((", ".xjoin)).apply ((((xsorted)).apply ((xweek_choices))))))))))))
                        xyear_format.write ((((xself).xget_year_format)).apply)
                        (((xweek_format).eq "%V").and ((xyear_format).neq "%G")).if
                          (((unsupported)).apply ((((xValueError)).apply (("ISO week directive '%s' is incompatible with the year directive '%s'. Use the ISO year '%%G' instead.".mod (((unsupported)).apply ((xweek_format)) ((xyear_format))))))))
                        xdate.write (((x_date_from_string)).apply ((xyear)) ((xyear_format)) ((xweek_start)) ("%w") ((xweek)) ((xweek_format)))
                        xsince.write ((((xself).x_make_date_lookup_arg)).apply ((xdate)))
                        xuntil.write ((((xself).x_make_date_lookup_arg)).apply (((((xself).x_get_next_week)).apply ((xdate)))))
                        xlookup_kwargs.write (((unsupported)).apply (("%s__gte".mod (xdate_field))) ((xsince)) (("%s__lt".mod (xdate_field))) ((xuntil)))
                        xqs.write ((((xself).xget_dated_queryset)).apply ((((unsupported)).apply ((xlookup_kwargs)))))
                        (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xqs)) ((((unsupported)).apply ("week") ((xdate)) ("next_week") (((((xself).xget_next_week)).apply ((xdate)))) ("previous_week") (((((xself).xget_previous_week)).apply ((xdate)))))))))
            (((unsupported)).apply ((xMultipleObjectTemplateResponseMixin)) ((xBaseWeekArchiveView)))
              seq
                unsupported
                xtemplate_name_suffix.write "_archive_week"
            (((unsupported)).apply ((xYearMixin)) ((xMonthMixin)) ((xDayMixin)) ((xBaseDateListView)))
              seq
                unsupported
                xget_dated_items.write
                  [xself]
                    memory > xmonth
                    memory > xday
                    memory > xdate
                    memory > xyear
                    seq > @
                      seq
                        unsupported
                        xyear.write ((((xself).xget_year)).apply)
                        xmonth.write ((((xself).xget_month)).apply)
                        xday.write ((((xself).xget_day)).apply)
                        xdate.write (((x_date_from_string)).apply ((xyear)) (((((xself).xget_year_format)).apply)) ((xmonth)) (((((xself).xget_month_format)).apply)) ((xday)) (((((xself).xget_day_format)).apply)))
                        (((unsupported)).apply (((((xself).x_get_dated_items)).apply ((xdate)))))
                x_get_dated_items.write
                  [xself xdate]
                    memory > xqs
                    memory > xlookup_kwargs
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlookup_kwargs.write ((((xself).x_make_single_date_lookup)).apply ((xdate)))
                        xqs.write ((((xself).xget_dated_queryset)).apply ((((unsupported)).apply ((xlookup_kwargs)))))
                        (((unsupported)).apply ((((unsupported)).apply ("None: is there a None literal in the EO language?") ((xqs)) ((((unsupported)).apply ("day") ((xdate)) ("previous_day") (((((xself).xget_previous_day)).apply ((xdate)))) ("next_day") (((((xself).xget_next_day)).apply ((xdate)))) ("previous_month") (((((xself).xget_previous_month)).apply ((xdate)))) ("next_month") (((((xself).xget_next_month)).apply ((xdate)))))))))
            (((unsupported)).apply ((xMultipleObjectTemplateResponseMixin)) ((xBaseDayArchiveView)))
              seq
                unsupported
                xtemplate_name_suffix.write "_archive_day"
            (((unsupported)).apply ((xBaseDayArchiveView)))
              seq
                unsupported
                xget_dated_items.write
                  [xself]
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply (((((xself).x_get_dated_items)).apply ((((((xdatetime).xdate).xtoday)).apply)))))
            (((unsupported)).apply ((xMultipleObjectTemplateResponseMixin)) ((xBaseTodayArchiveView)))
              seq
                unsupported
                xtemplate_name_suffix.write "_archive_day"
            (((unsupported)).apply ((xYearMixin)) ((xMonthMixin)) ((xDayMixin)) ((xDateMixin)) ((xBaseDetailView)))
              seq
                (((unsupported)).apply)
                xget_object.write
                  [xself xqueryset]
                    memory > xqs
                    memory > xdate
                    memory > xmonth
                    memory > xday
                    memory > xlookup_kwargs
                    memory > xyear
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xyear.write ((((xself).xget_year)).apply)
                        xmonth.write ((((xself).xget_month)).apply)
                        xday.write ((((xself).xget_day)).apply)
                        xdate.write (((x_date_from_string)).apply ((xyear)) (((((xself).xget_year_format)).apply)) ((xmonth)) (((((xself).xget_month_format)).apply)) ((xday)) (((((xself).xget_day_format)).apply)))
                        xqs.write ((((unsupported)).apply ((xqueryset)) ("None: is there a None literal in the EO language?")).if ((((xself).xget_queryset)).apply) (xqueryset))
                        ((((((xself).xget_allow_future)).apply).not).and ((xdate).greater (((((xdatetime).xdate).xtoday)).apply))).if
                          (((unsupported)).apply ((((xHttp404)).apply (((((x_)).apply ("Future %(verbose_name_plural)s not available because %(class_name)s.allow_future is False.")).mod (((unsupported)).apply ("verbose_name_plural") (((((xqs).xmodel).x_meta).xverbose_name_plural)) ("class_name") ((((xself).x__class__).x__name__))))))))
                        xlookup_kwargs.write ((((xself).x_make_single_date_lookup)).apply ((xdate)))
                        xqs.write ((((xqs).xfilter)).apply ((((unsupported)).apply ((xlookup_kwargs)))))
                        (((unsupported)).apply ((((unsupported)).apply (((((xsuper)).apply).xget_object)) ((xqs)))))
            (((unsupported)).apply ((xSingleObjectTemplateResponseMixin)) ((xBaseDateDetailView)))
              seq
                (((unsupported)).apply)
                xtemplate_name_suffix.write "_detail"
            x_date_from_string.write
              [xyear xyear_format xmonth xmonth_format xday xday_format xdelim]
                memory > xformat
                memory > xdatestr
                seq > @
                  (((unsupported)).apply)
                    (((unsupported)).apply)
                    xformat.write (((((xyear_format).add (xdelim)).add (xmonth_format)).add (xdelim)).add (xday_format))
                    xdatestr.write (((((((xstr)).apply ((xyear))).add (xdelim)).add (((xstr)).apply ((xmonth)))).add (xdelim)).add (((xstr)).apply ((xday))))
                    (((unsupported)).apply ((xValueError)))
                      (((unsupported)).apply (((((((((xdatetime).xdatetime).xstrptime)).apply ((xdatestr)) ((xformat))).xdate)).apply)))
                      (((unsupported)).apply ((((xHttp404)).apply (((((x_)).apply ("Invalid date string “%(datestr)s” given format “%(format)s”")).mod (((unsupported)).apply ("datestr") ((xdatestr)) ("format") ((xformat))))))))
            x_get_next_prev.write
              [xgeneric_view xdate xis_previous xperiod]
                memory > xqs
                memory > xordering
                memory > xget_next
                memory > xget_current
                memory > xlookup
                memory > xallow_empty
                memory > xresult
                memory > xdate_field
                memory > xallow_future
                memory > xnow
                seq > @
                  seq
                    (((unsupported)).apply)
                    xdate_field.write ((((xgeneric_view).xget_date_field)).apply)
                    xallow_empty.write ((((xgeneric_view).xget_allow_empty)).apply)
                    xallow_future.write ((((xgeneric_view).xget_allow_future)).apply)
                    xget_current.write (((xgetattr)).apply ((xgeneric_view)) (("_get_current_%s".mod (xperiod))))
                    xget_next.write (((xgetattr)).apply ((xgeneric_view)) (("_get_next_%s".mod (xperiod))))
                    (((unsupported)).apply ((((unsupported)).apply ((xstart)) ((xend)))) ((((unsupported)).apply ((((xget_current)).apply ((xdate)))) ((((xget_next)).apply ((xdate)))))))
                    (xallow_empty).if
                      seq
                        (xis_previous).if
                          xresult.write (((xget_current)).apply (((xstart).sub (((unsupported)).apply (((xdatetime).xtimedelta)) (1)))))
                          xresult.write (xend)
                        ((xallow_future).or ((xresult).leq (((xtimezone_today)).apply))).if
                          (((unsupported)).apply ((xresult)))
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                      seq
                        (xis_previous).if
                          seq
                            xlookup.write (((unsupported)).apply (("%s__lt".mod (xdate_field))) (((((xgeneric_view).x_make_date_lookup_arg)).apply ((xstart)))))
                            xordering.write ("-%s".mod (xdate_field))
                          seq
                            xlookup.write (((unsupported)).apply (("%s__gte".mod (xdate_field))) (((((xgeneric_view).x_make_date_lookup_arg)).apply ((xend)))))
                            xordering.write (xdate_field)
                        ((xallow_future).not).if
                          seq
                            ((xgeneric_view).xuses_datetime_field).if
                              xnow.write ((((xtimezone).xnow)).apply)
                              xnow.write (((xtimezone_today)).apply)
                            (((unsupported)).apply ((((unsupported)).apply ((xlookup)) (("%s__lte".mod (xdate_field))))) ((xnow)))
                        xqs.write ((((((((((xgeneric_view).xget_queryset)).apply).xfilter)).apply ((((unsupported)).apply ((xlookup))))).xorder_by)).apply ((xordering)))
                        (((unsupported)).apply ((xIndexError)))
                          xresult.write (((xgetattr)).apply ((((unsupported)).apply ((xqs)) (0))) ((xdate_field)))
                          (((unsupported)).apply ("None: is there a None literal in the EO language?"))
                        ((xgeneric_view).xuses_datetime_field).if
                          seq
                            ((xsettings).xUSE_TZ).if
                              xresult.write ((((xtimezone).xlocaltime)).apply ((xresult)))
                            xresult.write ((((xresult).xdate)).apply)
                        (((unsupported)).apply ((((xget_current)).apply ((xresult)))))
            xtimezone_today.write
              []
                seq > @
                  seq
                    unsupported
                    ((xsettings).xUSE_TZ).if
                      (((unsupported)).apply (((((xtimezone).xlocaldate)).apply)))
                      (((unsupported)).apply ((((((xdatetime).xdate).xtoday)).apply)))