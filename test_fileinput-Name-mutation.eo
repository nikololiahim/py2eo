memory > xcheck_warnings
memory > xlist
memory > xFileInput
memory > xMockFileInput
memory > xFilenoRaisesValueError
memory > xverbose
memory > xtempfile
memory > xopen
memory > xbz2
memory > xDeprecationWarning
memory > xiter
memory > xobject
memory > xkwargs
memory > x__name__
memory > xcm
memory > xm_stdin
memory > xImportError
memory > xfd
memory > xUnicodeDecodeError
memory > xRuntimeError
memory > xhook_encoded
memory > xInvocationRecorder
memory > xBytesIO
memory > xBaseTests
memory > xValueError
memory > xUnconditionallyRaise
memory > xrange
memory > xcollections
memory > xIndexError
memory > xStopIteration
memory > xLineReader
memory > xPath
memory > xfi
memory > xprint
memory > xf
memory > xint
memory > xre
memory > xhasattr
memory > xBaseFileInputGlobalMethodsTest
memory > xi
memory > xCustomOpenHook
memory > xbuiltins
memory > xsupport
memory > xsys
memory > xargs
memory > xOSError
memory > xTESTFN
memory > xmock
memory > xos
memory > xStringIO
memory > xname
memory > xunittest
memory > xnext
memory > xfobj
memory > xfileinput
memory > xlen
[] > test_fileinput
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xassertExactlyOneInvocation
        memory > x__call__
        memory > xtest_state_is_not_None
        memory > xtest
        memory > xtest_empty_files_list_specified_to_constructor
        memory > xsetUp
        memory > xdo_test_call_input
        memory > xreadlines
        memory > xfilelineno
        memory > xtest_modes
        memory > xtest_opening_mode
        memory > xtest_no_ext
        memory > xtest_fileno
        memory > xfileno
        memory > xsafe_unlink
        memory > xopenhook
        memory > xfilename
        memory > xnextfile
        memory > xtest_file_opening_hook
        memory > xtest_state_is_None
        memory > xtest__getitem__invalid_key
        memory > xtest_stdin_binary_mode
        memory > xtest_blah_ext
        memory > xtest_all
        memory > xtest_readline_os_fstat_raises_OSError
        memory > xtest_pathlib_file
        memory > xclose
        memory > xlineno
        memory > xtest__getitem__
        memory > xtest_files_that_dont_end_with_newline
        memory > xtest_bz2_ext_fake
        memory > xreplace_builtin_open
        memory > xtest_fileno_when_ValueError_raised
        memory > xtest__getitem___deprecation
        memory > xtest_empty_string
        memory > xisstdin
        memory > xtest_state_is_not_None_and_state_file_is_not_None
        memory > xtest_bz2_ext_builtin
        memory > xtest_readline_os_chmod_raises_OSError
        memory > xtest_readline
        memory > xgzip
        memory > xtest_zero_byte_files
        memory > xlinesread
        memory > xtest_nextfile_oserror_deleting_backup
        memory > xtest_close_on_exception
        memory > xtest_inplace_binary_write_mode
        memory > xtest_detached_stdin_binary_mode
        memory > xisfirstline
        memory > xtest_gz_ext_fake
        memory > xbz22
        memory > xtest_errors
        memory > xtest_context_manager
        memory > x__init__
        memory > xtest_gz_ext_builtin
        memory > xtest_pathlib_file_inplace
        memory > xtest__getitem__eof
        memory > xtest_readline_binary_mode
        memory > xtest_buffer_sizes
        memory > xdo_test_use_builtin_open
        memory > xtest_state_is_not_None_and_state_file_is_None
        memory > xtest_iteration_buffering
        memory > xwriteTmp
        memory > xtest_readline_buffering
        memory > xtearDown
        memory > xreadline
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xbz22.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply ((xImportError)))
              (((unsupported)).apply)
              xgzip.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
              xwriteTmp.write
                [xself xcontent xmode]
                  seq > @
                    (((unsupported)).apply)
                      (((unsupported)).apply ((((unsupported)).apply ((xfd)) ((xname)))) (((((xtempfile).xmkstemp)).apply)))
                      bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) ((xname)))
                      (((unsupported)).apply ((((xopen)).apply ((xfd)) ((xmode)))) ((xf)))
                        bogusForceDataize.write ((((xf).xwrite)).apply ((xcontent)))
                      (((unsupported)).apply ((xname)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).x_linesread)) ((((unsupported)).apply)))
                xlinesread.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          (((unsupported)).apply ((((unsupported)).apply (((xself).x_linesread)) ((((unsupported)).apply)))))
                          (((unsupported)).apply (((xself).x_linesread)) ((((unsupported)).apply)))
                xopenhook.write
                  [xself xfilename xmode]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xit)) ((((xiter)).apply (((((xfilename).xsplitlines)).apply (TRUE))))))
                        (((unsupported)).apply ((xself)))
                xreadline.write
                  [xself xsize]
                    memory > xline
                    seq > @
                      (((unsupported)).apply)
                        xline.write (((xnext)).apply (((xself).xit)) (""))
                        bogusForceDataize.write (((((xself).x_linesread).xappend)).apply ((xline)))
                        (((unsupported)).apply ((xline)))
                xreadlines.write
                  [xself xhint]
                    memory > xsize
                    memory > xlines
                    memory > xline
                    seq > @
                      (((unsupported)).apply)
                        xlines.write (((unsupported)).apply)
                        xsize.write 0
                        while.
                          TRUE
                          [unused]
                            seq > @
                              seq
                                xline.write ((((xself).xreadline)).apply)
                                ((xline).not).if
                                  (((unsupported)).apply ((xlines)))
                                bogusForceDataize.write ((((xlines).xappend)).apply ((xline)))
                                (((unsupported)).apply ((xsize)) ((((xlen)).apply ((xline)))))
                                ((xsize).geq (xhint)).if
                                  (((unsupported)).apply ((xlines)))
                xclose.write
                  [xself]
                    seq > @
            (((unsupported)).apply ((xBaseTests)) (((xunittest).xTestCase)))
              xtest_buffer_sizes.write
                [xself]
                  memory > xlines
                  memory > xt2
                  memory > xfi
                  memory > xpat
                  memory > xsavestdin
                  memory > xline
                  memory > xt3
                  memory > xs
                  memory > xsavestdout
                  memory > xm
                  memory > xt1
                  memory > xt4
                  seq > @
                    seq
                      xt1.write ((((xself).xwriteTmp)).apply (((("".xjoin)).apply ((((unsupported)).apply (("Line %s of file 1n".mod ((xi).add 1))) ((xi)) ((((xrange)).apply (15))))))))
                      xt2.write ((((xself).xwriteTmp)).apply (((("".xjoin)).apply ((((unsupported)).apply (("Line %s of file 2n".mod ((xi).add 1))) ((xi)) ((((xrange)).apply (10))))))))
                      xt3.write ((((xself).xwriteTmp)).apply (((("".xjoin)).apply ((((unsupported)).apply (("Line %s of file 3n".mod ((xi).add 1))) ((xi)) ((((xrange)).apply (5))))))))
                      xt4.write ((((xself).xwriteTmp)).apply (((("".xjoin)).apply ((((unsupported)).apply (("Line %s of file 4n".mod ((xi).add 1))) ((xi)) ((((xrange)).apply (1))))))))
                      xpat.write ((((xre).xcompile)).apply ("LINE (d+) OF FILE (d+)"))
                      (xverbose).if
                        bogusForceDataize.write (((xprint)).apply ("1. Simple iteration"))
                      xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)) ((xt3)) ((xt4)))))
                      xlines.write (((xlist)).apply ((xfi)))
                      bogusForceDataize.write ((((xfi).xclose)).apply)
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlines)))) (31))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlines)) (4))) ("Line 5 of file 1n"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlines)) (30))) ("Line 1 of file 4n"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (31))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilename)).apply)) ((xt4)))
                      (xverbose).if
                        bogusForceDataize.write (((xprint)).apply ("2. Status variables"))
                      xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)) ((xt3)) ((xt4)))))
                      xs.write "x"
                      while.
                        ((xs).and ((xs).neq "Line 6 of file 2n"))
                        [unused]
                          seq > @
                            xs.write ((((xfi).xreadline)).apply)
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilename)).apply)) ((xt2)))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (21))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilelineno)).apply)) (6))
                      bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xfi).xisfirstline)).apply)))
                      bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xfi).xisstdin)).apply)))
                      (xverbose).if
                        bogusForceDataize.write (((xprint)).apply ("3. Nextfile"))
                      bogusForceDataize.write ((((xfi).xnextfile)).apply)
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("Line 1 of file 3n"))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (22))
                      bogusForceDataize.write ((((xfi).xclose)).apply)
                      (xverbose).if
                        bogusForceDataize.write (((xprint)).apply ("4. Stdin"))
                      xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)) ((xt3)) ((xt4)) ("-"))))
                      xsavestdin.write ((xsys).xstdin)
                      (((unsupported)).apply)
                        seq
                          (((unsupported)).apply (((xsys).xstdin)) ((((xStringIO)).apply ("Line 1 of stdinnLine 2 of stdinn"))))
                          xlines.write (((xlist)).apply ((xfi)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xlines)))) (33))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xlines)) (32))) ("Line 2 of stdinn"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilename)).apply)) ("<stdin>"))
                          bogusForceDataize.write ((((xfi).xnextfile)).apply)
                        (((unsupported)).apply (((xsys).xstdin)) ((xsavestdin)))
                      (xverbose).if
                        bogusForceDataize.write (((xprint)).apply ("5. Boundary conditions"))
                      xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)) ((xt3)) ((xt4)))))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (0))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilename)).apply)) ("None: is there a None literal in the EO language?"))
                      bogusForceDataize.write ((((xfi).xnextfile)).apply)
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (0))
                      bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilename)).apply)) ("None: is there a None literal in the EO language?"))
                      (xverbose).if
                        bogusForceDataize.write (((xprint)).apply ("6. Inplace"))
                      xsavestdout.write ((xsys).xstdout)
                      (((unsupported)).apply)
                        seq
                          xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)) ((xt3)) ((xt4)))) (1))
                          (((unsupported)).apply ((xline)) ((xfi)))
                            seq
                              xline.write ((((((unsupported)).apply ((xline)) ((((unsupported)).apply ((1.neg))))).xupper)).apply)
                              bogusForceDataize.write (((xprint)).apply ((xline)))
                          bogusForceDataize.write ((((xfi).xclose)).apply)
                        (((unsupported)).apply (((xsys).xstdout)) ((xsavestdout)))
                      xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)) ((xt3)) ((xt4)))))
                      (((unsupported)).apply ((xline)) ((xfi)))
                        seq
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xline)) ((1.neg)))) ("n"))
                          xm.write ((((xpat).xmatch)).apply ((((unsupported)).apply ((xline)) ((((unsupported)).apply ((1.neg)))))))
                          bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xm)) ("None: is there a None literal in the EO language?"))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xint)).apply (((((xm).xgroup)).apply (1))))) (((((xfi).xfilelineno)).apply)))
                      bogusForceDataize.write ((((xfi).xclose)).apply)
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself xexception_type]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xexception_type)) ((xexception_type)))
                        (((unsupported)).apply (((xself).xinvoked)) (FALSE))
                x__call__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xinvoked)) (TRUE))
                        (((unsupported)).apply (((((xself).xexception_type)).apply)))
            (((unsupported)).apply ((xBaseTests)) (((xunittest).xTestCase)))
              seq
                xtest_zero_byte_files.write
                  [xself]
                    memory > xt2
                    memory > xfi
                    memory > xt3
                    memory > xline
                    memory > xt1
                    memory > xt4
                    seq > @
                      seq
                        xt1.write ((((xself).xwriteTmp)).apply (""))
                        xt2.write ((((xself).xwriteTmp)).apply (""))
                        xt3.write ((((xself).xwriteTmp)).apply ("The only line there is.n"))
                        xt4.write ((((xself).xwriteTmp)).apply (""))
                        xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)) ((xt3)) ((xt4)))))
                        xline.write ((((xfi).xreadline)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xline)) ("The only line there is.n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilelineno)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilename)).apply)) ((xt3)))
                        xline.write ((((xfi).xreadline)).apply)
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xline)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilelineno)).apply)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilename)).apply)) ((xt4)))
                        bogusForceDataize.write ((((xfi).xclose)).apply)
                xtest_files_that_dont_end_with_newline.write
                  [xself]
                    memory > xt1
                    memory > xfi
                    memory > xt2
                    memory > xlines
                    seq > @
                      seq
                        xt1.write ((((xself).xwriteTmp)).apply ("AnBnC"))
                        xt2.write ((((xself).xwriteTmp)).apply ("DnEnF"))
                        xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)))))
                        xlines.write (((xlist)).apply ((xfi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines)) ((((unsupported)).apply ("An") ("Bn") ("C") ("Dn") ("En") ("F"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilelineno)).apply)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (6))
                xtest_fileno.write
                  [xself]
                    memory > xt1
                    memory > xfi
                    memory > xt2
                    memory > xline
                    seq > @
                      seq
                        xt1.write ((((xself).xwriteTmp)).apply ("AnB"))
                        xt2.write ((((xself).xwriteTmp)).apply ("CnD"))
                        xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfileno)).apply)) ((1.neg)))
                        xline.write (((xnext)).apply ((xfi)))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply (((((xfi).xfileno)).apply)) ((1.neg)))
                        bogusForceDataize.write ((((xfi).xnextfile)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfileno)).apply)) ((1.neg)))
                        xline.write (((xlist)).apply ((xfi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfileno)).apply)) ((1.neg)))
                xtest_opening_mode.write
                  [xself]
                    memory > xt1
                    memory > xfi
                    memory > xlines
                    seq > @
                      seq
                        (((unsupported)).apply ((xValueError)))
                          seq
                            xfi.write (((unsupported)).apply ((xFileInput)) ("w"))
                            bogusForceDataize.write ((((xself).xfail)).apply ("FileInput should reject invalid mode argument"))
                        xt1.write (((unsupported)).apply (((xself).xwriteTmp)) ("AnBrnCrD") ("wb"))
                        (((unsupported)).apply ((((xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xfi.write (((unsupported)).apply ((xFileInput)) ((xt1)) ("U"))
                        (((unsupported)).apply ((((xcheck_warnings)).apply ((((unsupported)).apply ("") ((xDeprecationWarning)))))))
                          xlines.write (((xlist)).apply ((xfi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines)) ((((unsupported)).apply ("An") ("Bn") ("Cn") ("D"))))
                xtest_stdin_binary_mode.write
                  [xself]
                    memory > xfi
                    memory > xlines
                    seq > @
                      (((unsupported)).apply (((((xmock).xpatch)).apply ("sys.stdin"))) ((xm_stdin)))
                        seq
                          (((unsupported)).apply (((xm_stdin).xbuffer)) ((((xBytesIO)).apply ("spam, bacon, sausage, and spam"))))
                          xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ("-"))) ("rb"))
                          xlines.write (((xlist)).apply ((xfi)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines)) ((((unsupported)).apply ("spam, bacon, sausage, and spam"))))
                xtest_detached_stdin_binary_mode.write
                  [xself]
                    memory > xorig_stdin
                    memory > xfi
                    memory > xlines
                    seq > @
                      seq
                        xorig_stdin.write ((xsys).xstdin)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply (((xsys).xstdin)) ((((xBytesIO)).apply ("spam, bacon, sausage, and spam"))))
                            bogusForceDataize.write ((((xself).xassertFalse)).apply ((((xhasattr)).apply (((xsys).xstdin)) ("buffer"))))
                            xfi.write (((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ("-"))) ("rb"))
                            xlines.write (((xlist)).apply ((xfi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines)) ((((unsupported)).apply ("spam, bacon, sausage, and spam"))))
                          (((unsupported)).apply (((xsys).xstdin)) ((xorig_stdin)))
                xtest_file_opening_hook.write
                  [xself]
                    memory > x__call__
                    memory > xt
                    memory > xfi
                    memory > xcustom_open_hook
                    memory > x__init__
                    seq > @
                      seq
                        (((unsupported)).apply ((xValueError)))
                          seq
                            xfi.write (((unsupported)).apply ((xFileInput)) (1) ((((unsupported)).apply ("None: is there a None literal in the EO language?"))))
                            bogusForceDataize.write ((((xself).xfail)).apply ("FileInput should raise if both inplace and openhook arguments are given"))
                        (((unsupported)).apply ((xValueError)))
                          seq
                            xfi.write (((unsupported)).apply ((xFileInput)) (1))
                            bogusForceDataize.write ((((xself).xfail)).apply ("FileInput should check openhook for being callable"))
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (((xself).xinvoked)) (FALSE))
                            x__call__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply)
                                    (((unsupported)).apply (((xself).xinvoked)) (TRUE))
                                    (((unsupported)).apply ((((xopen)).apply ((((unsupported)).apply ((xargs)))))))
                        xt.write ((((xself).xwriteTmp)).apply ("n"))
                        xcustom_open_hook.write (((xCustomOpenHook)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt)))) ((xcustom_open_hook)))) ((xfi)))
                          bogusForceDataize.write ((((xfi).xreadline)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xcustom_open_hook).xinvoked)) ("openhook not invoked"))
                xtest_readline.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("wb"))) ((xf)))
                          seq
                            bogusForceDataize.write ((((xf).xwrite)).apply ("AnBrnCr"))
                            bogusForceDataize.write ((((xf).xwrite)).apply (("123456789n".mul 1000)))
                            bogusForceDataize.write ((((xf).xwrite)).apply ("x80"))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xsafe_unlink)) ((xTESTFN)))
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((xTESTFN)) ((((xhook_encoded)).apply ("ascii"))))) ((xfi)))
                          seq
                            (((unsupported)).apply ((xUnicodeDecodeError)))
                              seq
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("An"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("Bn"))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("Cn"))
                              bogusForceDataize.write ((((xself).xfail)).apply ("Read to end of file"))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xUnicodeDecodeError)))))
                              bogusForceDataize.write (((xlist)).apply ((xfi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) (""))
                xtest_readline_binary_mode.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("AnBrnCrD"))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xsafe_unlink)) ((xTESTFN)))
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((xTESTFN)) ("rb"))) ((xfi)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("An"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("Brn"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("CrD"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) (""))
                xtest_inplace_binary_write_mode.write
                  [xself]
                    memory > xtemp_file
                    memory > xline
                    seq > @
                      seq
                        xtemp_file.write (((unsupported)).apply (((xself).xwriteTmp)) ("Initial text.") ("wb"))
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((xtemp_file)) ("rb") (TRUE))) ((xfobj)))
                          seq
                            xline.write ((((xfobj).xreadline)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xline)) ("Initial text."))
                            bogusForceDataize.write (((((xsys).xstdout).xwrite)).apply ("New line."))
                        (((unsupported)).apply ((((xopen)).apply ((xtemp_file)) ("rb"))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("New line."))
                xtest_context_manager.write
                  [xself]
                    memory > xt1
                    memory > xt2
                    memory > xlines
                    seq > @
                      seq
                        xt1.write ((((xself).xwriteTmp)).apply ("AnBnC"))
                        xt2.write ((((xself).xwriteTmp)).apply ("DnEnF"))
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt1)) ((xt2)))))) ((xfi)))
                          xlines.write (((xlist)).apply ((xfi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines)) ((((unsupported)).apply ("An") ("Bn") ("C") ("Dn") ("En") ("F"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilelineno)).apply)) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfi).x_files)) ((((unsupported)).apply)))
                xtest_close_on_exception.write
                  [xself]
                    memory > xt1
                    seq > @
                      seq
                        xt1.write ((((xself).xwriteTmp)).apply (""))
                        (((unsupported)).apply ((xOSError)))
                          (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((xt1)))) ((xfi)))
                            (((unsupported)).apply ((xOSError)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfi).x_files)) ((((unsupported)).apply)))
                xtest_empty_files_list_specified_to_constructor.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply)))) ((xfi)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfi).x_files)) ((((unsupported)).apply ("-"))))
                xtest__getitem__.write
                  [xself]
                    memory > xt
                    memory > xretval2
                    memory > xretval1
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xt.write ((((xself).xwriteTmp)).apply ("line1nline2n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt)))))) ((xfi)))
                          seq
                            xretval1.write (((unsupported)).apply ((xfi)) (0))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xretval1)) ("line1n"))
                            xretval2.write (((unsupported)).apply ((xfi)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xretval2)) ("line2n"))
                xtest__getitem___deprecation.write
                  [xself]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((xself).xwriteTmp)).apply ("line1nline2n"))
                        (((unsupported)).apply (((((xself).xassertWarnsRegex)).apply ((xDeprecationWarning)) ("Use iterator protocol instead"))))
                          (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt)))))) ((xfi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xfi)) (0))) ("line1n"))
                xtest__getitem__invalid_key.write
                  [xself]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xt.write ((((xself).xwriteTmp)).apply ("line1nline2n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt)))))) ((xfi)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                            (((unsupported)).apply ((xfi)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xargs)) ((((unsupported)).apply ("accessing lines out of order"))))
                xtest__getitem__eof.write
                  [xself]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xt.write ((((xself).xwriteTmp)).apply (""))
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt)))))) ((xfi)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xIndexError)))) ((xcm)))
                            (((unsupported)).apply ((xfi)) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xcm).xexception).xargs)) ((((unsupported)).apply ("end of input reached"))))
                xtest_nextfile_oserror_deleting_backup.write
                  [xself]
                    memory > xos_unlink_replacement
                    memory > xt
                    memory > xos_unlink_orig
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xos_unlink_orig.write ((xos).xunlink)
                        xos_unlink_replacement.write (((xUnconditionallyRaise)).apply ((xOSError)))
                        (((unsupported)).apply)
                          seq
                            xt.write ((((xself).xwriteTmp)).apply ("n"))
                            bogusForceDataize.write ((((xself).xaddCleanup)).apply (((xsupport).xunlink)) (((xt).add ".bak")))
                            (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt)))) (TRUE))) ((xfi)))
                              seq
                                bogusForceDataize.write (((xnext)).apply ((xfi)))
                                (((unsupported)).apply (((xos).xunlink)) ((xos_unlink_replacement)))
                                bogusForceDataize.write ((((xfi).xnextfile)).apply)
                          (((unsupported)).apply (((xos).xunlink)) ((xos_unlink_orig)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xos_unlink_replacement).xinvoked)) ("os.unlink() was not invoked"))
                xtest_readline_os_fstat_raises_OSError.write
                  [xself]
                    memory > xos_fstat_orig
                    memory > xt
                    memory > xos_fstat_replacement
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xos_fstat_orig.write ((xos).xfstat)
                        xos_fstat_replacement.write (((xUnconditionallyRaise)).apply ((xOSError)))
                        (((unsupported)).apply)
                          seq
                            xt.write ((((xself).xwriteTmp)).apply ("n"))
                            (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt)))) (TRUE))) ((xfi)))
                              seq
                                (((unsupported)).apply (((xos).xfstat)) ((xos_fstat_replacement)))
                                bogusForceDataize.write ((((xfi).xreadline)).apply)
                          (((unsupported)).apply (((xos).xfstat)) ((xos_fstat_orig)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xos_fstat_replacement).xinvoked)) ("os.fstat() was not invoked"))
                xtest_readline_os_chmod_raises_OSError.write
                  [xself]
                    memory > xt
                    memory > xos_chmod_orig
                    memory > xos_chmod_replacement
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xos_chmod_orig.write ((xos).xchmod)
                        xos_chmod_replacement.write (((xUnconditionallyRaise)).apply ((xOSError)))
                        (((unsupported)).apply)
                          seq
                            xt.write ((((xself).xwriteTmp)).apply ("n"))
                            (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt)))) (TRUE))) ((xfi)))
                              seq
                                (((unsupported)).apply (((xos).xchmod)) ((xos_chmod_replacement)))
                                bogusForceDataize.write ((((xfi).xreadline)).apply)
                          (((unsupported)).apply (((xos).xchmod)) ((xos_chmod_orig)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xos_chmod_replacement).xinvoked)) ("os.fstat() was not invoked"))
                xtest_fileno_when_ValueError_raised.write
                  [xself]
                    memory > xfileno
                    memory > xt
                    memory > xunconditionally_raise_ValueError
                    memory > xfile_backup
                    memory > x__init__
                    memory > xresult
                    seq > @
                      seq
                        (((unsupported)).apply ((xUnconditionallyRaise)))
                          seq
                            x__init__.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write ((((xUnconditionallyRaise).x__init__)).apply ((xself)) ((xValueError)))
                            xfileno.write
                              [xself]
                                seq > @
                                  bogusForceDataize.write ((((xself).x__call__)).apply)
                        xunconditionally_raise_ValueError.write (((xFilenoRaisesValueError)).apply)
                        xt.write ((((xself).xwriteTmp)).apply ("n"))
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ((xt)))))) ((xfi)))
                          seq
                            xfile_backup.write ((xfi).x_file)
                            (((unsupported)).apply)
                              seq
                                (((unsupported)).apply (((xfi).x_file)) ((xunconditionally_raise_ValueError)))
                                xresult.write ((((xfi).xfileno)).apply)
                              (((unsupported)).apply (((xfi).x_file)) ((xfile_backup)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xunconditionally_raise_ValueError).xinvoked)) ("_file.fileno() was not invoked"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xresult)) ((1.neg)) ("fileno() should return -1"))
                xtest_readline_buffering.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write (((xLineReader)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ("line1nline2") ("line3n"))) (((xsrc).xopenhook)))) ((xfi)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("line1n"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply ("line1n"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("line2"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply ("line2"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) ("line3n"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply ("") ("line3n"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply (""))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xreadline)).apply)) (""))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply)))
                xtest_iteration_buffering.write
                  [xself]
                    memory > xsrc
                    seq > @
                      seq
                        xsrc.write (((xLineReader)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((((unsupported)).apply ("line1nline2") ("line3n"))) (((xsrc).xopenhook)))) ((xfi)))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xfi)))) ("line1n"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply ("line1n"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xfi)))) ("line2"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply ("line2"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xnext)).apply ((xfi)))) ("line3n"))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply ("") ("line3n"))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xfi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply (""))))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xStopIteration)) ((xnext)) ((xfi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xsrc).xlinesread)) ((((unsupported)).apply)))
                xtest_pathlib_file.write
                  [xself]
                    memory > xt1
                    memory > xline
                    seq > @
                      seq
                        xt1.write (((xPath)).apply (((((xself).xwriteTmp)).apply ("Pathlib file."))))
                        (((unsupported)).apply ((((xFileInput)).apply ((xt1)))) ((xfi)))
                          seq
                            xline.write ((((xfi).xreadline)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xline)) ("Pathlib file."))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xlineno)).apply)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilelineno)).apply)) (1))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xfi).xfilename)).apply)) (((((xos).xfspath)).apply ((xt1)))))
                xtest_pathlib_file_inplace.write
                  [xself]
                    memory > xt1
                    memory > xline
                    seq > @
                      seq
                        xt1.write (((xPath)).apply (((((xself).xwriteTmp)).apply ("Pathlib file."))))
                        (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((xt1)) (TRUE))) ((xfi)))
                          seq
                            xline.write ((((xfi).xreadline)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xline)) ("Pathlib file."))
                            bogusForceDataize.write (((xprint)).apply (("Modified %s".mod (xline))))
                        (((unsupported)).apply ((((xopen)).apply ((xt1)))) ((xf)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xf).xread)).apply)) ("Modified Pathlib file.n"))
            (((unsupported)).apply)
              seq
                unsupported
                x__init__.write
                  [xself xfiles xinplace xbackup xmode xopenhook]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xfiles)) ((xfiles)))
                        (((unsupported)).apply (((xself).xinplace)) ((xinplace)))
                        (((unsupported)).apply (((xself).xbackup)) ((xbackup)))
                        (((unsupported)).apply (((xself).xmode)) ((xmode)))
                        (((unsupported)).apply (((xself).xopenhook)) ((xopenhook)))
                        (((unsupported)).apply (((xself).x_file)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xself).xinvocation_counts)) (((((xcollections).xdefaultdict)).apply ((((unsupported)).apply (0))))))
                        (((unsupported)).apply (((xself).xreturn_values)) ((((unsupported)).apply)))
                xclose.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xinvocation_counts)) ("close"))) (1))
                xnextfile.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xinvocation_counts)) ("nextfile"))) (1))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xreturn_values)) ("nextfile"))))
                xfilename.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xinvocation_counts)) ("filename"))) (1))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xreturn_values)) ("filename"))))
                xlineno.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xinvocation_counts)) ("lineno"))) (1))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xreturn_values)) ("lineno"))))
                xfilelineno.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xinvocation_counts)) ("filelineno"))) (1))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xreturn_values)) ("filelineno"))))
                xfileno.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xinvocation_counts)) ("fileno"))) (1))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xreturn_values)) ("fileno"))))
                xisfirstline.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xinvocation_counts)) ("isfirstline"))) (1))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xreturn_values)) ("isfirstline"))))
                xisstdin.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xinvocation_counts)) ("isstdin"))) (1))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xreturn_values)) ("isstdin"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_orig_state)) (((xfileinput).x_state)))
                        (((unsupported)).apply (((xself).x_orig_FileInput)) (((xfileinput).xFileInput)))
                        (((unsupported)).apply (((xfileinput).xFileInput)) ((xMockFileInput)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xfileinput).xFileInput)) (((xself).x_orig_FileInput)))
                        (((unsupported)).apply (((xfileinput).x_state)) (((xself).x_orig_state)))
                xassertExactlyOneInvocation.write
                  [xself xmock_file_input xmethod_name]
                    memory > xactual_count
                    memory > xactual_total_count
                    seq > @
                      seq
                        xactual_count.write (((unsupported)).apply (((xmock_file_input).xinvocation_counts)) ((xmethod_name)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual_count)) (1) ((xmethod_name)))
                        xactual_total_count.write (((xlen)).apply (((xmock_file_input).xinvocation_counts)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xactual_total_count)) (1))
            (((unsupported)).apply ((xBaseFileInputGlobalMethodsTest)))
              seq
                unsupported
                xtest_state_is_not_None_and_state_file_is_not_None.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply (((xinstance).x_file)) ((((xobject)).apply)))
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                          bogusForceDataize.write ((((xfileinput).xinput)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("input() already active"))) ((((xcm).xexception).xargs)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xinstance)) (((xfileinput).x_state)) ("fileinput._state"))
                xtest_state_is_not_None_and_state_file_is_None.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply (((xinstance).x_file)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        bogusForceDataize.write ((((xself).xdo_test_call_input)).apply)
                xtest_state_is_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xdo_test_call_input)).apply)
                xdo_test_call_input.write
                  [xself]
                    memory > xopenhook
                    memory > xmode
                    memory > xbackup
                    memory > xfiles
                    memory > xresult
                    memory > xinplace
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfiles.write (((xobject)).apply)
                        xinplace.write (((xobject)).apply)
                        xbackup.write (((xobject)).apply)
                        xmode.write (((xobject)).apply)
                        xopenhook.write (((xobject)).apply)
                        xresult.write (((unsupported)).apply (((xfileinput).xinput)) ((xfiles)) ((xinplace)) ((xbackup)) ((xmode)) ((xopenhook)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xresult)) (((xfileinput).x_state)) ("fileinput._state"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xfiles)) (((xresult).xfiles)) ("files"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xinplace)) (((xresult).xinplace)) ("inplace"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xbackup)) (((xresult).xbackup)) ("backup"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xmode)) (((xresult).xmode)) ("mode"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xopenhook)) (((xresult).xopenhook)) ("openhook"))
            (((unsupported)).apply ((xBaseFileInputGlobalMethodsTest)))
              seq
                unsupported
                xtest_state_is_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xfileinput).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfileinput).x_state)))
                xtest_state_is_not_None.write
                  [xself]
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        bogusForceDataize.write ((((xfileinput).xclose)).apply)
                        bogusForceDataize.write ((((xself).xassertExactlyOneInvocation)).apply ((xinstance)) ("close"))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfileinput).x_state)))
            (((unsupported)).apply ((xBaseFileInputGlobalMethodsTest)))
              seq
                unsupported
                xtest_state_is_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                          bogusForceDataize.write ((((xfileinput).xnextfile)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("no active input()"))) ((((xcm).xexception).xargs)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfileinput).x_state)))
                xtest_state_is_not_None.write
                  [xself]
                    memory > xnextfile_retval
                    memory > xretval
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xnextfile_retval.write (((xobject)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xinstance).xreturn_values)) ("nextfile"))) ((xnextfile_retval)))
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        xretval.write ((((xfileinput).xnextfile)).apply)
                        bogusForceDataize.write ((((xself).xassertExactlyOneInvocation)).apply ((xinstance)) ("nextfile"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xretval)) ((xnextfile_retval)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfileinput).x_state)) ((xinstance)))
            (((unsupported)).apply ((xBaseFileInputGlobalMethodsTest)))
              seq
                unsupported
                xtest_state_is_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                          bogusForceDataize.write ((((xfileinput).xfilename)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("no active input()"))) ((((xcm).xexception).xargs)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfileinput).x_state)))
                xtest_state_is_not_None.write
                  [xself]
                    memory > xfilename_retval
                    memory > xretval
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfilename_retval.write (((xobject)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xinstance).xreturn_values)) ("filename"))) ((xfilename_retval)))
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        xretval.write ((((xfileinput).xfilename)).apply)
                        bogusForceDataize.write ((((xself).xassertExactlyOneInvocation)).apply ((xinstance)) ("filename"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xretval)) ((xfilename_retval)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfileinput).x_state)) ((xinstance)))
            (((unsupported)).apply ((xBaseFileInputGlobalMethodsTest)))
              seq
                unsupported
                xtest_state_is_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                          bogusForceDataize.write ((((xfileinput).xlineno)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("no active input()"))) ((((xcm).xexception).xargs)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfileinput).x_state)))
                xtest_state_is_not_None.write
                  [xself]
                    memory > xlineno_retval
                    memory > xretval
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xlineno_retval.write (((xobject)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xinstance).xreturn_values)) ("lineno"))) ((xlineno_retval)))
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        xretval.write ((((xfileinput).xlineno)).apply)
                        bogusForceDataize.write ((((xself).xassertExactlyOneInvocation)).apply ((xinstance)) ("lineno"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xretval)) ((xlineno_retval)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfileinput).x_state)) ((xinstance)))
            (((unsupported)).apply ((xBaseFileInputGlobalMethodsTest)))
              seq
                unsupported
                xtest_state_is_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                          bogusForceDataize.write ((((xfileinput).xfilelineno)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("no active input()"))) ((((xcm).xexception).xargs)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfileinput).x_state)))
                xtest_state_is_not_None.write
                  [xself]
                    memory > xretval
                    memory > xinstance
                    memory > xfilelineno_retval
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfilelineno_retval.write (((xobject)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xinstance).xreturn_values)) ("filelineno"))) ((xfilelineno_retval)))
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        xretval.write ((((xfileinput).xfilelineno)).apply)
                        bogusForceDataize.write ((((xself).xassertExactlyOneInvocation)).apply ((xinstance)) ("filelineno"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xretval)) ((xfilelineno_retval)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfileinput).x_state)) ((xinstance)))
            (((unsupported)).apply ((xBaseFileInputGlobalMethodsTest)))
              seq
                unsupported
                xtest_state_is_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                          bogusForceDataize.write ((((xfileinput).xfileno)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("no active input()"))) ((((xcm).xexception).xargs)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfileinput).x_state)))
                xtest_state_is_not_None.write
                  [xself]
                    memory > xretval
                    memory > xinstance
                    memory > xfileno_retval
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xfileno_retval.write (((xobject)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xinstance).xreturn_values)) ("fileno"))) ((xfileno_retval)))
                        (((unsupported)).apply (((xinstance).xfileno_retval)) ((xfileno_retval)))
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        xretval.write ((((xfileinput).xfileno)).apply)
                        bogusForceDataize.write ((((xself).xassertExactlyOneInvocation)).apply ((xinstance)) ("fileno"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xretval)) ((xfileno_retval)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfileinput).x_state)) ((xinstance)))
            (((unsupported)).apply ((xBaseFileInputGlobalMethodsTest)))
              seq
                unsupported
                xtest_state_is_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                          bogusForceDataize.write ((((xfileinput).xisfirstline)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("no active input()"))) ((((xcm).xexception).xargs)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfileinput).x_state)))
                xtest_state_is_not_None.write
                  [xself]
                    memory > xisfirstline_retval
                    memory > xretval
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xisfirstline_retval.write (((xobject)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xinstance).xreturn_values)) ("isfirstline"))) ((xisfirstline_retval)))
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        xretval.write ((((xfileinput).xisfirstline)).apply)
                        bogusForceDataize.write ((((xself).xassertExactlyOneInvocation)).apply ((xinstance)) ("isfirstline"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xretval)) ((xisfirstline_retval)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfileinput).x_state)) ((xinstance)))
            (((unsupported)).apply ((xBaseFileInputGlobalMethodsTest)))
              seq
                unsupported
                xtest_state_is_None.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xfileinput).x_state)) ("None: is there a None literal in the EO language?"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xRuntimeError)))) ((xcm)))
                          bogusForceDataize.write ((((xfileinput).xisstdin)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ("no active input()"))) ((((xcm).xexception).xargs)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xfileinput).x_state)))
                xtest_state_is_not_None.write
                  [xself]
                    memory > xretval
                    memory > xisstdin_retval
                    memory > xinstance
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xisstdin_retval.write (((xobject)).apply)
                        xinstance.write (((xMockFileInput)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xinstance).xreturn_values)) ("isstdin"))) ((xisstdin_retval)))
                        (((unsupported)).apply (((xfileinput).x_state)) ((xinstance)))
                        xretval.write ((((xfileinput).xisstdin)).apply)
                        bogusForceDataize.write ((((xself).xassertExactlyOneInvocation)).apply ((xinstance)) ("isstdin"))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((xretval)) ((xisstdin_retval)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((xfileinput).x_state)) ((xinstance)))
            (((unsupported)).apply)
              seq
                x__init__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xinvocation_count)) (0))
                x__call__.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xself).xinvocation_count)) (1))
                        (((unsupported)).apply (((xself).xlast_invocation)) ((((unsupported)).apply ((xargs)) ((xkwargs)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xfake_open)) ((((xInvocationRecorder)).apply)))
                xtest_empty_string.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test_use_builtin_open)).apply ("") (1))
                xtest_no_ext.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test_use_builtin_open)).apply ("abcd") (2))
                xtest_gz_ext_fake.write
                  [xself]
                    memory > xresult
                    memory > xoriginal_open
                    seq > @
                      (((unsupported)).apply)
                        xoriginal_open.write ((xgzip).xopen)
                        (((unsupported)).apply (((xgzip).xopen)) (((xself).xfake_open)))
                        (((unsupported)).apply)
                          xresult.write ((((xfileinput).xhook_compressed)).apply ("test.gz") (3))
                          (((unsupported)).apply (((xgzip).xopen)) ((xoriginal_open)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xfake_open).xinvocation_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xfake_open).xlast_invocation)) ((((unsupported)).apply ((((unsupported)).apply ("test.gz") (3))) ((((unsupported)).apply)))))
                xtest_bz2_ext_fake.write
                  [xself]
                    memory > xresult
                    memory > xoriginal_open
                    seq > @
                      (((unsupported)).apply)
                        xoriginal_open.write ((xbz2).xBZ2File)
                        (((unsupported)).apply (((xbz2).xBZ2File)) (((xself).xfake_open)))
                        (((unsupported)).apply)
                          xresult.write ((((xfileinput).xhook_compressed)).apply ("test.bz2") (4))
                          (((unsupported)).apply (((xbz2).xBZ2File)) ((xoriginal_open)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xfake_open).xinvocation_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xfake_open).xlast_invocation)) ((((unsupported)).apply ((((unsupported)).apply ("test.bz2") (4))) ((((unsupported)).apply)))))
                xtest_blah_ext.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test_use_builtin_open)).apply ("abcd.blah") (5))
                xtest_gz_ext_builtin.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test_use_builtin_open)).apply ("abcd.Gz") (6))
                xtest_bz2_ext_builtin.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xdo_test_use_builtin_open)).apply ("abcd.Bz2") (7))
                xdo_test_use_builtin_open.write
                  [xself xfilename xmode]
                    memory > xresult
                    memory > xoriginal_open
                    seq > @
                      seq
                        xoriginal_open.write ((((xself).xreplace_builtin_open)).apply (((xself).xfake_open)))
                        (((unsupported)).apply)
                          xresult.write ((((xfileinput).xhook_compressed)).apply ((xfilename)) ((xmode)))
                          bogusForceDataize.write ((((xself).xreplace_builtin_open)).apply ((xoriginal_open)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xfake_open).xinvocation_count)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xself).xfake_open).xlast_invocation)) ((((unsupported)).apply ((((unsupported)).apply ((xfilename)) ((xmode)))) ((((unsupported)).apply)))))
                xreplace_builtin_open.write
                  [xnew_open_func]
                    memory > xoriginal_open
                    seq > @
                      (((unsupported)).apply)
                        xoriginal_open.write ((xbuiltins).xopen)
                        (((unsupported)).apply (((xbuiltins).xopen)) ((xnew_open_func)))
                        (((unsupported)).apply ((xoriginal_open)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest.write
                  [xself]
                    memory > xfilename
                    memory > xmode
                    memory > xerrors
                    memory > xfake_open
                    memory > xencoding
                    memory > xresult
                    memory > xopen_result
                    memory > xoriginal_open
                    seq > @
                      seq
                        xencoding.write (((xobject)).apply)
                        xerrors.write (((xobject)).apply)
                        xresult.write (((unsupported)).apply (((xfileinput).xhook_encoded)) ((xencoding)) ((xerrors)))
                        xfake_open.write (((xInvocationRecorder)).apply)
                        xoriginal_open.write ((xbuiltins).xopen)
                        (((unsupported)).apply (((xbuiltins).xopen)) ((xfake_open)))
                        (((unsupported)).apply)
                          seq
                            xfilename.write (((xobject)).apply)
                            xmode.write (((xobject)).apply)
                            xopen_result.write (((xresult)).apply ((xfilename)) ((xmode)))
                          (((unsupported)).apply (((xbuiltins).xopen)) ((xoriginal_open)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xfake_open).xinvocation_count)) (1))
                        (((unsupported)).apply ((((unsupported)).apply ((xargs)) ((xkwargs)))) (((xfake_open).xlast_invocation)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xargs)) (0))) ((xfilename)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply ((((unsupported)).apply ((xargs)) (1))) ((xmode)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xkwargs).xpop)).apply ("encoding"))) ((xencoding)))
                        bogusForceDataize.write ((((xself).xassertIs)).apply (((((xkwargs).xpop)).apply ("errors"))) ((xerrors)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xkwargs)))
                xtest_errors.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("x80abc"))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xsafe_unlink)) ((xTESTFN)))
                        xcheck.write
                          [xerrors xexpected_lines]
                            memory > xlines
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((xTESTFN)) ("r") ((((unsupported)).apply ((xhook_encoded)) ("utf-8") ((xerrors)))))) ((xfi)))
                                  xlines.write (((xlist)).apply ((xfi)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines)) ((xexpected_lines)))
                        bogusForceDataize.write (((xcheck)).apply ("ignore") ((((unsupported)).apply ("abc"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xUnicodeDecodeError)))))
                          bogusForceDataize.write (((xcheck)).apply ("strict") ((((unsupported)).apply ("abc"))))
                        bogusForceDataize.write (((xcheck)).apply ("replace") ((((unsupported)).apply ("ufffdabc"))))
                        bogusForceDataize.write (((xcheck)).apply ("backslashreplace") ((((unsupported)).apply ((((unsupported)).apply)))))
                xtest_modes.write
                  [xself]
                    memory > xcheck
                    seq > @
                      seq
                        (((unsupported)).apply ((((xopen)).apply ((xTESTFN)) ("wb"))) ((xf)))
                          bogusForceDataize.write ((((xf).xwrite)).apply ("AnBrnCrD+IKw-"))
                        bogusForceDataize.write ((((xself).xaddCleanup)).apply ((xsafe_unlink)) ((xTESTFN)))
                        xcheck.write
                          [xmode xexpected_lines]
                            memory > xlines
                            seq > @
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xFileInput)) ((xTESTFN)) ((xmode)) ((((xhook_encoded)).apply ("utf-7"))))) ((xfi)))
                                  xlines.write (((xlist)).apply ((xfi)))
                                bogusForceDataize.write ((((xself).xassertEqual)).apply ((xlines)) ((xexpected_lines)))
                        bogusForceDataize.write (((xcheck)).apply ("r") ((((unsupported)).apply ("An") ("Bn") ("Cn") ("Du20ac"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write (((xcheck)).apply ("rU") ((((unsupported)).apply ("An") ("Bn") ("Cn") ("Du20ac"))))
                        (((unsupported)).apply (((((xself).xassertWarns)).apply ((xDeprecationWarning)))))
                          bogusForceDataize.write (((xcheck)).apply ("U") ((((unsupported)).apply ("An") ("Bn") ("Cn") ("Du20ac"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))))
                          bogusForceDataize.write (((xcheck)).apply ("rb") ((((unsupported)).apply ("An") ("Brn") ("Cr") ("Du20ac"))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              xtest_all.write
                [xself]
                  seq > @
                    bogusForceDataize.write ((((xsupport).xcheck__all__)).apply ((xself)) ((xfileinput)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write ((((xunittest).xmain)).apply)