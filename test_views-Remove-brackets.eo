memory > xAttributeError
memory > xdatetime
memory > xSchemeIncludedURL
memory > xHttpRequest
memory > xModelWithNullFKToSite
memory > xFooWithBrokenAbsoluteUrl
memory > xModelWithM2MToSite
memory > xArticle
memory > xFooWithoutUrl
memory > xFooWithUrl
memory > xContentType
memory > xget_current_site
memory > xTestCase
memory > xAuthor
memory > xSite
memory > xshortcut
memory > xoverride_settings
memory > xHttp404
memory > xargs
memory > xobj
[] > test_views
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_shortcut_no_absolute_url
        memory > xtest_not_dependent_on_sites_app
        memory > xtest_shortcut_bad_pk
        memory > xsetUpTestData
        memory > xtest_shortcut_with_absolute_url
        memory > xtest_shortcut_view_with_null_site_fk
        memory > xtest_model_with_broken_get_absolute_url
        memory > xtest_model_without_get_absolute_url
        memory > xMockSite
        memory > xtest_bad_content_type
        memory > xtest_shortcut_view_with_site_m2m
        memory > xsetUp
        memory > xtest_nonint_content_type
        memory > xtest_wrong_type_pk
        memory > xtest_shortcut_with_absolute_url_including_scheme
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("contenttypes_tests.urls"))))
              seq
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xsite1)) ((((unsupported)).apply ((xSite)) (1) ("testserver") ("testserver"))))
                        unsupported
                        (((unsupported)).apply (((xcls).xauthor1)) ((((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("Boris"))))
                        (((unsupported)).apply (((xcls).xarticle1)) ((((unsupported)).apply ((((xArticle).xobjects).xcreate)) ("Old Article") ("old_article") (((xcls).xauthor1)) (((((xdatetime).xdatetime)).apply (2001) (1) (1) (21) (22) (23))))))
                        (((unsupported)).apply (((xcls).xarticle2)) ((((unsupported)).apply ((((xArticle).xobjects).xcreate)) ("Current Article") ("current_article") (((xcls).xauthor1)) (((((xdatetime).xdatetime)).apply (2007) (9) (17) (21) (22) (23))))))
                        (((unsupported)).apply (((xcls).xarticle3)) ((((unsupported)).apply ((((xArticle).xobjects).xcreate)) ("Future Article") ("future_article") (((xcls).xauthor1)) (((((xdatetime).xdatetime)).apply (3000) (1) (1) (21) (22) (23))))))
                        (((unsupported)).apply (((xcls).xscheme1)) ((((unsupported)).apply ((((xSchemeIncludedURL).xobjects).xcreate)) ("http://test_scheme_included_http/"))))
                        (((unsupported)).apply (((xcls).xscheme2)) ((((unsupported)).apply ((((xSchemeIncludedURL).xobjects).xcreate)) ("https://test_scheme_included_https/"))))
                        (((unsupported)).apply (((xcls).xscheme3)) ((((unsupported)).apply ((((xSchemeIncludedURL).xobjects).xcreate)) ("//test_default_scheme_kept/"))))
                xsetUp.write
                  [xself]
                    seq > @
                      unsupported
                xtest_shortcut_with_absolute_url.write
                  [xself]
                    memory > xresponse
                    memory > xshort_url
                    seq > @
                      seq
                        unsupported
                        (((unsupported)).apply ((xobj)) ((((xAuthor).xobjects).xall)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xobj)))))
                            seq
                              xshort_url.write ("/shortcut/%s/%s/".mod (((unsupported)).apply (((((((xContentType).xobjects).xget_for_model)).apply ((xAuthor))).xid)) (((xobj).xpk))))
                              xresponse.write (((((xself).xclient).xget)).apply ((xshort_url)))
                              (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) (("http://testserver%s".mod ((xobj).xget_absolute_url))) (404))
                xtest_shortcut_with_absolute_url_including_scheme.write
                  [xself]
                    memory > xresponse
                    memory > xshort_url
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobj)) ((((xSchemeIncludedURL).xobjects).xall)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xobj)))))
                            seq
                              xshort_url.write ("/shortcut/%s/%s/".mod (((unsupported)).apply (((((((xContentType).xobjects).xget_for_model)).apply ((xSchemeIncludedURL))).xid)) (((xobj).xpk))))
                              xresponse.write (((((xself).xclient).xget)).apply ((xshort_url)))
                              (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) (((xobj).xget_absolute_url)) (FALSE))
                xtest_shortcut_no_absolute_url.write
                  [xself]
                    memory > xresponse
                    memory > xshort_url
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xobj)) ((((xArticle).xobjects).xall)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xobj)))))
                            seq
                              xshort_url.write ("/shortcut/%s/%s/".mod (((unsupported)).apply (((((((xContentType).xobjects).xget_for_model)).apply ((xArticle))).xid)) (((xobj).xpk))))
                              xresponse.write (((((xself).xclient).xget)).apply ((xshort_url)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
                xtest_wrong_type_pk.write
                  [xself]
                    memory > xresponse
                    memory > xshort_url
                    seq > @
                      seq
                        xshort_url.write ("/shortcut/%s/%s/".mod (((unsupported)).apply (((((((xContentType).xobjects).xget_for_model)).apply ((xAuthor))).xid)) ("nobody/expects")))
                        xresponse.write (((((xself).xclient).xget)).apply ((xshort_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
                xtest_shortcut_bad_pk.write
                  [xself]
                    memory > xresponse
                    memory > xshort_url
                    seq > @
                      seq
                        xshort_url.write ("/shortcut/%s/%s/".mod (((unsupported)).apply (((((((xContentType).xobjects).xget_for_model)).apply ((xAuthor))).xid)) ("42424242")))
                        xresponse.write (((((xself).xclient).xget)).apply ((xshort_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
                xtest_nonint_content_type.write
                  [xself]
                    memory > xresponse
                    memory > xan_author
                    memory > xshort_url
                    seq > @
                      seq
                        xan_author.write (((unsupported)).apply ((((xAuthor).xobjects).xall)) (0))
                        xshort_url.write ("/shortcut/%s/%s/".mod (((unsupported)).apply ("spam") (((xan_author).xpk))))
                        xresponse.write (((((xself).xclient).xget)).apply ((xshort_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
                xtest_bad_content_type.write
                  [xself]
                    memory > xresponse
                    memory > xan_author
                    memory > xshort_url
                    seq > @
                      seq
                        xan_author.write (((unsupported)).apply ((((xAuthor).xobjects).xall)) (0))
                        xshort_url.write ("/shortcut/%s/%s/".mod (((unsupported)).apply (42424242) (((xan_author).xpk))))
                        xresponse.write (((((xself).xclient).xget)).apply ((xshort_url)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((xresponse).xstatus_code)) (404))
            (((unsupported)).apply ((xTestCase)) ((((unsupported)).apply ((xoverride_settings)) ("contenttypes_tests.urls"))))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      unsupported
                xsetUpTestData.write
                  [xcls]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xcls).xsite_2)) ((((unsupported)).apply ((((xSite).xobjects).xcreate)) ("example2.com") ("example2.com"))))
                        (((unsupported)).apply (((xcls).xsite_3)) ((((unsupported)).apply ((((xSite).xobjects).xcreate)) ("example3.com") ("example3.com"))))
                xtest_shortcut_view_with_null_site_fk.write
                  [xself xget_model]
                    memory > xresponse
                    memory > xobj
                    memory > xurl
                    memory > xexpected_url
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xget_model).xside_effect)) ((((unsupported)).apply ((((((unsupported)).apply ((xargs)) (0)).eq "sites.Site").if (xMockSite) (xModelWithNullFKToSite))))))
                        xobj.write (((unsupported)).apply ((((xModelWithNullFKToSite).xobjects).xcreate)) ("title"))
                        xurl.write ("/shortcut/%s/%s/".mod (((unsupported)).apply (((((((xContentType).xobjects).xget_for_model)).apply ((xModelWithNullFKToSite))).xid)) (((xobj).xpk))))
                        xresponse.write (((((xself).xclient).xget)).apply ((xurl)))
                        xexpected_url.write ("http://example.com%s".mod ((xobj).xget_absolute_url))
                        (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ((xexpected_url)) (FALSE))
                xtest_shortcut_view_with_site_m2m.write
                  [xself xget_model]
                    memory > xsite_3_obj
                    memory > xshortcut_url
                    memory > xobj_with_sites
                    memory > xresponse
                    memory > xct
                    memory > xexpected_url
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xget_model).xside_effect)) ((((unsupported)).apply ((((((unsupported)).apply ((xargs)) (0)).eq "sites.Site").if (xMockSite) (xModelWithM2MToSite))))))
                        bogusForceDataize.write (((((xMockSite).xobjects).xbulk_create)).apply ((((unsupported)).apply ((((unsupported)).apply ((xMockSite)) (1) ("example.com"))) ((((unsupported)).apply ((xMockSite)) ((((xself).xsite_2).xpk)) ((((xself).xsite_2).xdomain)))) ((((unsupported)).apply ((xMockSite)) ((((xself).xsite_3).xpk)) ((((xself).xsite_3).xdomain)))))))
                        xct.write (((((xContentType).xobjects).xget_for_model)).apply ((xModelWithM2MToSite)))
                        xsite_3_obj.write (((unsupported)).apply ((((xModelWithM2MToSite).xobjects).xcreate)) ("Not Linked to Current Site"))
                        bogusForceDataize.write (((((xsite_3_obj).xsites).xadd)).apply ((((unsupported)).apply ((((xMockSite).xobjects).xget)) ((((xself).xsite_3).xpk)))))
                        xexpected_url.write ("http://%s%s".mod (((unsupported)).apply ((((xself).xsite_3).xdomain)) (((xsite_3_obj).xget_absolute_url))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((xself).xsite_2).xpk)))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply (("/shortcut/%s/%s/".mod (((unsupported)).apply (((xct).xpk)) (((xsite_3_obj).xpk))))))
                            (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ((xexpected_url)) (FALSE))
                        xobj_with_sites.write (((unsupported)).apply ((((xModelWithM2MToSite).xobjects).xcreate)) ("Linked to Current Site"))
                        bogusForceDataize.write (((((xobj_with_sites).xsites).xset)).apply ((((xMockSite).xobjects).xall)))
                        xshortcut_url.write ("/shortcut/%s/%s/".mod (((unsupported)).apply (((xct).xpk)) (((xobj_with_sites).xpk))))
                        xexpected_url.write ("http://%s%s".mod (((unsupported)).apply ((((xself).xsite_2).xdomain)) (((xobj_with_sites).xget_absolute_url))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((xself).xsite_2).xpk)))))
                          seq
                            xresponse.write (((((xself).xclient).xget)).apply ((xshortcut_url)))
                            (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ((xexpected_url)) (FALSE))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ("None: is there a None literal in the EO language?") ((((unsupported)).apply ((((xself).xsite_2).xdomain)))))))
                          seq
                            xresponse.write (((unsupported)).apply ((((xself).xclient).xget)) ((xshortcut_url)) ((((xself).xsite_2).xdomain)))
                            (((unsupported)).apply (((xself).xassertRedirects)) ((xresponse)) ((xexpected_url)) (FALSE))
            (((unsupported)).apply ((xTestCase)))
              seq
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).xrequest)) ((xHttpRequest)))
                        (((unsupported)).apply ((((xself).xrequest).xMETA)) ((((unsupported)).apply ("SERVER_NAME") ("Example.com") ("SERVER_PORT") ("80"))))
                xtest_not_dependent_on_sites_app.write
                  [xself]
                    memory > xresponse
                    memory > xobj
                    memory > xuser_ct
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xuser_ct.write (((((xContentType).xobjects).xget_for_model)).apply ((xFooWithUrl)))
                        xobj.write (((unsupported)).apply ((((xFooWithUrl).xobjects).xcreate)) ("john"))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmodify_settings)) ((((unsupported)).apply ("append") ("django.contrib.sites"))))))
                          seq
                            xresponse.write (((xshortcut)).apply (((xself).xrequest)) (((xuser_ct).xid)) (((xobj).xid)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (("http://%s/users/john/".mod ((((xget_current_site)).apply (((xself).xrequest))).xdomain))) ((((((xresponse).xheaders).xget)).apply ("location"))))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xmodify_settings)) ((((unsupported)).apply ("remove") ("django.contrib.sites"))))))
                          seq
                            xresponse.write (((xshortcut)).apply (((xself).xrequest)) (((xuser_ct).xid)) (((xobj).xid)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("http://Example.com/users/john/") ((((((xresponse).xheaders).xget)).apply ("location"))))
                xtest_model_without_get_absolute_url.write
                  [xself]
                    memory > xobj
                    memory > xuser_ct
                    seq > @
                      seq
                        unsupported
                        xuser_ct.write (((((xContentType).xobjects).xget_for_model)).apply ((xFooWithoutUrl)))
                        xobj.write (((unsupported)).apply ((((xFooWithoutUrl).xobjects).xcreate)) ("john"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xHttp404)))))
                          bogusForceDataize.write (((xshortcut)).apply (((xself).xrequest)) (((xuser_ct).xid)) (((xobj).xid)))
                xtest_model_with_broken_get_absolute_url.write
                  [xself]
                    memory > xobj
                    memory > xuser_ct
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xuser_ct.write (((((xContentType).xobjects).xget_for_model)).apply ((xFooWithBrokenAbsoluteUrl)))
                        xobj.write (((unsupported)).apply ((((xFooWithBrokenAbsoluteUrl).xobjects).xcreate)) ("john"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          bogusForceDataize.write (((xshortcut)).apply (((xself).xrequest)) (((xuser_ct).xid)) (((xobj).xid)))