memory > xk
memory > xAttributeError
memory > xstr
memory > xrange
memory > xCookieTests
memory > xcase
memory > xproto
memory > xMorselTests
memory > xrepr
memory > xcookies
memory > xi
memory > xs
memory > xsorted
memory > xunittest
memory > xrun_doctest
memory > xrun_unittest
memory > xcopy
memory > xpickle
memory > xlist
memory > xval
memory > xv
memory > xdict
memory > xcase_b
memory > xTypeError
memory > x__name__
memory > xkey
[] > test_http_cookies
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_eq
        memory > xtest_extra_spaces
        memory > xtest_pickle
        memory > xtest_illegal_chars
        memory > xtest_samesite_attrs
        memory > xtest_load
        memory > xtest_extended_encode
        memory > xtest_secure_httponly_false_if_not_present
        memory > xtest_setitem
        memory > xtest_invalid_cookies
        memory > xtest_special_attrs
        memory > xtest_setdefault
        memory > xtest_defaults
        memory > xtest_quoted_meta
        memory > xtest_setter
        memory > xtest_set_properties
        memory > xtest_set_secure_httponly_attrs
        memory > xtest_secure_httponly_true_if_present
        memory > xtest_update
        memory > xtest_main
        memory > xtest_repr
        memory > xtest_reserved_keys
        memory > xtest_basic
        memory > xtest_secure_httponly_true_if_have_value
        memory > xtest_comment_quoting
        memory > xtest_copy
        seq > @
          seq
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_basic.write
                  [xself]
                    memory > xcases
                    memory > xC
                    seq > @
                      seq
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("data") ("chips=ahoy; vienna=finger") ("dict") ((((unsupported)).apply ("chips") ("ahoy") ("vienna") ("finger"))) ("repr") ("<SimpleCookie: chips='ahoy' vienna='finger'>") ("output") ("Set-Cookie: chips=ahoynSet-Cookie: vienna=finger"))) ((((unsupported)).apply ("data") ((((unsupported)).apply)) ("dict") ((((unsupported)).apply ("keebler") ("E=mc2; L=\"Loves\"; fudge=012;"))) ("repr") ((((unsupported)).apply)) ("output") ((((unsupported)).apply)))) ((((unsupported)).apply ("data") ("keebler=E=mc2") ("dict") ((((unsupported)).apply ("keebler") ("E=mc2"))) ("repr") ("<SimpleCookie: keebler='E=mc2'>") ("output") ("Set-Cookie: keebler=E=mc2"))) ((((unsupported)).apply ("data") ("key:term=value:term") ("dict") ((((unsupported)).apply ("key:term") ("value:term"))) ("repr") ("<SimpleCookie: key:term='value:term'>") ("output") ("Set-Cookie: key:term=value:term"))) ((((unsupported)).apply ("data") ("a=b; c=[; d=r; f=h") ("dict") ((((unsupported)).apply ("a") ("b") ("c") ("[") ("d") ("r") ("f") ("h"))) ("repr") ("<SimpleCookie: a='b' c='[' d='r' f='h'>") ("output") (((("n".xjoin)).apply ((((unsupported)).apply ("Set-Cookie: a=b") ("Set-Cookie: c=[") ("Set-Cookie: d=r") ("Set-Cookie: f=h"))))))))
                        (((unsupported)).apply ((xcase)) ((xcases)))
                          seq
                            xC.write ((((xcookies).xSimpleCookie)).apply)
                            bogusForceDataize.write ((((xC).xload)).apply ((((unsupported)).apply ((xcase)) ("data"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xC)))) ((((unsupported)).apply ((xcase)) ("repr"))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xC).xoutput)) ("n"))) ((((unsupported)).apply ((xcase)) ("output"))))
                            (((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((xsorted)).apply (((((((unsupported)).apply ((xcase)) ("dict")).xitems)).apply)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ((xk))).xvalue)) ((xv)))
                xtest_load.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        bogusForceDataize.write ((((xC).xload)).apply ("Customer=\"WILE_E_COYOTE\"; Version=1; Path=/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ("Customer")).xvalue)) ("WILE_E_COYOTE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("version"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("path"))) ("/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xoutput)).apply ((((unsupported)).apply ("path"))))) ("Set-Cookie: Customer=\"WILE_E_COYOTE\"; Path=/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xjs_output)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xjs_output)).apply ((((unsupported)).apply ("path"))))) ((((unsupported)).apply)))
                xtest_extended_encode.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xC)) ("val"))) ("some,funky;stuff"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xoutput)).apply ((((unsupported)).apply ("val"))))) ((((unsupported)).apply)))
                xtest_special_attrs.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply ("Customer=\"WILE_E_COYOTE\""))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("expires"))) (0))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((((xC).xoutput)).apply).xendswith)).apply ("GMT"))))
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        bogusForceDataize.write ((((xC).xload)).apply ("Customer=\"W\"; expires=Wed, 01 Jan 2010 00:00:00 GMT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("expires"))) ("Wed, 01 Jan 2010 00:00:00 GMT"))
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        bogusForceDataize.write ((((xC).xload)).apply ("Customer=\"W\"; expires=Wed, 01 Jan 98 00:00:00 GMT"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("expires"))) ("Wed, 01 Jan 98 00:00:00 GMT"))
                        xC.write ((((xcookies).xSimpleCookie)).apply ("Customer=\"WILE_E_COYOTE\""))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("max-age"))) (10))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xoutput)).apply)) ("Set-Cookie: Customer=\"WILE_E_COYOTE\"; Max-Age=10"))
                xtest_set_secure_httponly_attrs.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply ("Customer=\"WILE_E_COYOTE\""))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("secure"))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("httponly"))) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xoutput)).apply)) ("Set-Cookie: Customer=\"WILE_E_COYOTE\"; HttpOnly; Secure"))
                xtest_samesite_attrs.write
                  [xself]
                    memory > xC
                    memory > xsamesite_values
                    seq > @
                      seq
                        xsamesite_values.write (((unsupported)).apply ("Strict") ("Lax") ("strict") ("lax"))
                        (((unsupported)).apply ((xval)) ((xsamesite_values)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xval)))))
                            seq
                              xC.write ((((xcookies).xSimpleCookie)).apply ("Customer=\"WILE_E_COYOTE\""))
                              (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("samesite"))) ((xval)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xoutput)).apply)) (("Set-Cookie: Customer=\"WILE_E_COYOTE\"; SameSite=%s".mod (xval))))
                              xC.write ((((xcookies).xSimpleCookie)).apply)
                              bogusForceDataize.write ((((xC).xload)).apply (("Customer=\"WILL_E_COYOTE\"; SameSite=%s".mod (xval))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("samesite"))) ((xval)))
                xtest_secure_httponly_false_if_not_present.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        bogusForceDataize.write ((((xC).xload)).apply ("eggs=scrambled; Path=/bacon"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("eggs"))) ("httponly"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("eggs"))) ("secure"))))
                xtest_secure_httponly_true_if_present.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        bogusForceDataize.write ((((xC).xload)).apply ("eggs=scrambled; httponly; secure; Path=/bacon"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("eggs"))) ("httponly"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("eggs"))) ("secure"))))
                xtest_secure_httponly_true_if_have_value.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        bogusForceDataize.write ((((xC).xload)).apply ("eggs=scrambled; httponly=foo; secure=bar; Path=/bacon"))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("eggs"))) ("httponly"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("eggs"))) ("secure"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("eggs"))) ("httponly"))) ("foo"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("eggs"))) ("secure"))) ("bar"))
                xtest_extra_spaces.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        bogusForceDataize.write ((((xC).xload)).apply ("eggs  =  scrambled  ;  secure  ;  path  =  bar   ; foo=foo   "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xoutput)).apply)) ("Set-Cookie: eggs=scrambled; Path=bar; SecurernSet-Cookie: foo=foo"))
                xtest_quoted_meta.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        bogusForceDataize.write ((((xC).xload)).apply ("Customer=\"WILE_E_COYOTE\"; Version=\"1\"; Path=\"/acme\""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((unsupported)).apply ((xC)) ("Customer")).xvalue)) ("WILE_E_COYOTE"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("version"))) ("1"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((((unsupported)).apply ((xC)) ("Customer"))) ("path"))) ("/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xoutput)).apply ((((unsupported)).apply ("path"))))) ("Set-Cookie: Customer=\"WILE_E_COYOTE\"; Path=/acme"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xjs_output)).apply)) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xjs_output)).apply ((((unsupported)).apply ("path"))))) ((((unsupported)).apply)))
                xtest_invalid_cookies.write
                  [xself]
                    memory > xC
                    seq > @
                      seq
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        (((unsupported)).apply ((xs)) ((((unsupported)).apply ("]foo=x") ("[foo=x") ("blah]foo=x") ("blah[foo=x") ("Set-Cookie: foo=bar") ("Set-Cookie: foo") ("foo=bar; baz") ("baz; foo=bar") ("secure;foo=bar") ("Version=1;foo=bar"))))
                          seq
                            bogusForceDataize.write ((((xC).xload)).apply ((xs)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xdict)).apply ((xC)))) ((((unsupported)).apply)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xoutput)).apply)) (""))
                xtest_pickle.write
                  [xself]
                    memory > xC
                    memory > xC1
                    memory > xexpected_output
                    memory > xrawdata
                    seq > @
                      seq
                        xrawdata.write "Customer=\"WILE_E_COYOTE\"; Path=/acme; Version=1"
                        xexpected_output.write ("Set-Cookie: %s".mod (xrawdata))
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        bogusForceDataize.write ((((xC).xload)).apply ((xrawdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC).xoutput)).apply)) ((xexpected_output)))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).sub 1)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xproto)))))
                            seq
                              xC1.write ((((xpickle).xloads)).apply ((((unsupported)).apply (((xpickle).xdumps)) ((xC)) ((xproto)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xC1).xoutput)).apply)) ((xexpected_output)))
                xtest_illegal_chars.write
                  [xself]
                    memory > xC
                    memory > xrawdata
                    seq > @
                      seq
                        xrawdata.write "a=b; c,d=e"
                        xC.write ((((xcookies).xSimpleCookie)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xcookies).xCookieError)))))
                          bogusForceDataize.write ((((xC).xload)).apply ((xrawdata)))
                xtest_comment_quoting.write
                  [xself]
                    memory > xc
                    seq > @
                      seq
                        xc.write ((((xcookies).xSimpleCookie)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xc)) ("foo"))) ("N{COPYRIGHT SIGN}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xc)) ("foo"))))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xc)) ("foo"))) ("comment"))) ("comment N{COPYRIGHT SIGN}"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((((unsupported)).apply ((xc)) ("foo"))))) ((((unsupported)).apply)))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                unsupported
                xtest_defaults.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xmorsel).xkey)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xmorsel).xvalue)))
                        bogusForceDataize.write ((((xself).xassertIsNone)).apply (((xmorsel).xcoded_value)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmorsel).xkeys)).apply)) (((((((xcookies).xMorsel).x_reserved).xkeys)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xkey)) ((xval)))) (((((xmorsel).xitems)).apply)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xval)) ("") ((xkey)))
                xtest_reserved_keys.write
                  [xself]
                    memory > xM
                    seq > @
                      seq
                        xM.write ((((xcookies).xMorsel)).apply)
                        (((unsupported)).apply ((xi)) (((xM).x_reserved)))
                          seq
                            bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xM).xisReservedKey)).apply ((xi)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xM)) ((xi)))) (("%s_value".mod (xi))))
                        (((unsupported)).apply ((xi)) (((xM).x_reserved)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xM)) ((xi)))) (("%s_value".mod (xi))))
                        (((unsupported)).apply ((xi)) (((("the holy hand grenade".xsplit)).apply)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xcookies).xCookieError)) (((xM).x__setitem__)) ((xi)) (("%s_value".mod (xi))))
                xtest_setter.write
                  [xself]
                    memory > xexpected_js_output
                    memory > xM
                    seq > @
                      seq
                        xM.write ((((xcookies).xMorsel)).apply)
                        (((unsupported)).apply ((xi)) (((xM).x_reserved)))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xcookies).xCookieError)) (((xM).xset)) ((xi)) (("%s_value".mod (xi))) (("%s_value".mod (xi))))
                        (((unsupported)).apply ((xi)) (((("thou cast _the- !holy! ^hand| -*grenade~".xsplit)).apply)))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply ((xM)) ("path"))) ("/foo"))
                            bogusForceDataize.write ((((xM).xset)).apply ((xi)) (("%s_val".mod (xi))) (("%s_coded_val".mod (xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xM).xkey)) ((xi)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xM).xvalue)) (("%s_val".mod (xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((xM).xcoded_value)) (("%s_coded_val".mod (xi))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xM).xoutput)).apply)) (("Set-Cookie: %s=%s; Path=/foo".mod (((unsupported)).apply ((xi)) (("%s_coded_val".mod (xi)))))))
                            xexpected_js_output.write ((((unsupported)).apply).mod (((unsupported)).apply ((xi)) (("%s_coded_val".mod (xi)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xM).xjs_output)).apply)) ((xexpected_js_output)))
                        (((unsupported)).apply ((xi)) ((((unsupported)).apply ("foo bar") ("foo@bar"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply (((xcookies).xCookieError)) (((xM).xset)) ((xi)) (("%s_value".mod (xi))) (("%s_value".mod (xi))))
                xtest_set_properties.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xmorsel).xkey)) (""))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xmorsel).xvalue)) (""))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xAttributeError)))))
                          (((unsupported)).apply (((xmorsel).xcoded_value)) (""))
                xtest_eq.write
                  [xself]
                    memory > xitems
                    memory > xmorsel_b
                    memory > xbase_case
                    memory > xmorsel
                    memory > xcases
                    memory > xattribs
                    memory > xmorsel_a
                    seq > @
                      seq
                        xbase_case.write (((unsupported)).apply ("key") ("value") ("\"value\""))
                        xattribs.write (((unsupported)).apply ("path") ("/") ("comment") ("foo") ("domain") ("example.com") ("version") (2))
                        xmorsel_a.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel_a).xupdate)).apply ((xattribs)))
                        bogusForceDataize.write ((((xmorsel_a).xset)).apply ((((unsupported)).apply ((xbase_case)))))
                        xmorsel_b.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel_b).xupdate)).apply ((xattribs)))
                        bogusForceDataize.write ((((xmorsel_b).xset)).apply ((((unsupported)).apply ((xbase_case)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmorsel_a).eq (xmorsel_b))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xmorsel_a).neq (xmorsel_b))))
                        xcases.write (((unsupported)).apply ((((unsupported)).apply ("key") ("value") ("mismatch"))) ((((unsupported)).apply ("key") ("mismatch") ("\"value\""))) ((((unsupported)).apply ("mismatch") ("value") ("\"value\""))))
                        (((unsupported)).apply ((xcase_b)) ((xcases)))
                          (((unsupported)).apply (((((xself).xsubTest)).apply ((xcase_b)))))
                            seq
                              xmorsel_b.write ((((xcookies).xMorsel)).apply)
                              bogusForceDataize.write ((((xmorsel_b).xupdate)).apply ((xattribs)))
                              bogusForceDataize.write ((((xmorsel_b).xset)).apply ((((unsupported)).apply ((xcase_b)))))
                              bogusForceDataize.write ((((xself).xassertFalse)).apply (((xmorsel_a).eq (xmorsel_b))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmorsel_a).neq (xmorsel_b))))
                        xmorsel_b.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel_b).xupdate)).apply ((xattribs)))
                        bogusForceDataize.write ((((xmorsel_b).xset)).apply ((((unsupported)).apply ((xbase_case)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xmorsel_b)) ("comment"))) ("bar"))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xmorsel_a).eq (xmorsel_b))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmorsel_a).neq (xmorsel_b))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xcookies).xMorsel)).apply).eq 1)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xcookies).xMorsel)).apply).neq 1)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xcookies).xMorsel)).apply).eq "")))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xcookies).xMorsel)).apply).neq "")))
                        xitems.write (((xlist)).apply ((((((((xcookies).xMorsel)).apply).xitems)).apply)))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((((xcookies).xMorsel)).apply).eq (xitems))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xcookies).xMorsel)).apply).neq (xitems))))
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel).xset)).apply ((((unsupported)).apply ((xbase_case)))))
                        bogusForceDataize.write ((((xmorsel).xupdate)).apply ((xattribs)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xmorsel).eq (((xdict)).apply ((xmorsel))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xmorsel).neq (((xdict)).apply ((xmorsel))))))
                xtest_copy.write
                  [xself]
                    memory > xmorsel_b
                    memory > xmorsel_a
                    seq > @
                      seq
                        xmorsel_a.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel_a).xset)).apply ("foo") ("bar") ("baz"))
                        bogusForceDataize.write ((((xmorsel_a).xupdate)).apply ((((unsupported)).apply ("version") (2) ("comment") ("foo"))))
                        xmorsel_b.write ((((xmorsel_a).xcopy)).apply)
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmorsel_b)) (((xcookies).xMorsel)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmorsel_a)) ((xmorsel_b)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmorsel_a)) ((xmorsel_b)))
                        xmorsel_b.write ((((xcopy).xcopy)).apply ((xmorsel_a)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmorsel_b)) (((xcookies).xMorsel)))
                        bogusForceDataize.write ((((xself).xassertIsNot)).apply ((xmorsel_a)) ((xmorsel_b)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmorsel_a)) ((xmorsel_b)))
                xtest_setitem.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xmorsel)) ("expires"))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("expires"))) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xmorsel)) ("Version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("version"))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((xmorsel)) ("DOMAIN"))) ("example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("domain"))) ("example.com"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xcookies).xCookieError)))))
                          (((unsupported)).apply ((((unsupported)).apply ((xmorsel)) ("invalid"))) ("value"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("invalid") ((xmorsel)))
                xtest_setdefault.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel).xupdate)).apply ((((unsupported)).apply ("domain") ("example.com") ("version") (2))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmorsel).xsetdefault)).apply ("expires") ("value"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("expires"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmorsel).xsetdefault)).apply ("Version") (1))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xmorsel).xsetdefault)).apply ("DOMAIN") ("value"))) ("example.com"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("domain"))) ("example.com"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xcookies).xCookieError)))))
                          bogusForceDataize.write ((((xmorsel).xsetdefault)).apply ("invalid") ("value"))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("invalid") ((xmorsel)))
                xtest_update.write
                  [xself]
                    memory > xattribs
                    memory > xmorsel
                    seq > @
                      seq
                        xattribs.write (((unsupported)).apply ("expires") (1) ("Version") (2) ("DOMAIN") ("example.com"))
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel).xupdate)).apply ((xattribs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("expires"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("domain"))) ("example.com"))
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel).xupdate)).apply ((((xlist)).apply (((((xattribs).xitems)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("expires"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("domain"))) ("example.com"))
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel).xupdate)).apply ((((unsupported)).apply ((((unsupported)).apply ((xk)) ((xv)))) ((((unsupported)).apply ((xk)) ((xv)))) (((((xattribs).xitems)).apply)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("expires"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("version"))) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xmorsel)) ("domain"))) ("example.com"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply (((xcookies).xCookieError)))))
                          bogusForceDataize.write ((((xmorsel).xupdate)).apply ((((unsupported)).apply ("invalid") ("value"))))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("invalid") ((xmorsel)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmorsel).xupdate)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xmorsel).xupdate)) (0))
                xtest_pickle.write
                  [xself]
                    memory > xmorsel_b
                    memory > xmorsel_a
                    seq > @
                      seq
                        xmorsel_a.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel_a).xset)).apply ("foo") ("bar") ("baz"))
                        bogusForceDataize.write ((((xmorsel_a).xupdate)).apply ((((unsupported)).apply ("version") (2) ("comment") ("foo"))))
                        (((unsupported)).apply ((xproto)) ((((xrange)).apply ((((xpickle).xHIGHEST_PROTOCOL).sub 1)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xproto)))))
                            seq
                              xmorsel_b.write ((((xpickle).xloads)).apply (((((xpickle).xdumps)).apply ((xmorsel_a)) ((xproto)))))
                              bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xmorsel_b)) (((xcookies).xMorsel)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xmorsel_b)) ((xmorsel_a)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xmorsel_b)))) ((((xstr)).apply ((xmorsel_a)))))
                xtest_repr.write
                  [xself]
                    memory > xmorsel
                    seq > @
                      seq
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xmorsel)))) ("<Morsel: None=None>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xmorsel)))) ("Set-Cookie: None=None"))
                        bogusForceDataize.write ((((xmorsel).xset)).apply ("key") ("val") ("coded_val"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xmorsel)))) ("<Morsel: key=coded_val>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xmorsel)))) ("Set-Cookie: key=coded_val"))
                        bogusForceDataize.write ((((xmorsel).xupdate)).apply ((((unsupported)).apply ("path") ("/") ("comment") ("foo") ("domain") ("example.com") ("max-age") (0) ("secure") (0) ("version") (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xmorsel)))) ("<Morsel: key=coded_val; Comment=foo; Domain=example.com; Max-Age=0; Path=/; Version=1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xmorsel)))) ("Set-Cookie: key=coded_val; Comment=foo; Domain=example.com; Max-Age=0; Path=/; Version=1"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmorsel)) ("secure"))) (TRUE))
                        (((unsupported)).apply ((((unsupported)).apply ((xmorsel)) ("httponly"))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xrepr)).apply ((xmorsel)))) ("<Morsel: key=coded_val; Comment=foo; Domain=example.com; HttpOnly; Max-Age=0; Path=/; Secure; Version=1>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply ((xmorsel)))) ("Set-Cookie: key=coded_val; Comment=foo; Domain=example.com; HttpOnly; Max-Age=0; Path=/; Secure; Version=1"))
                        xmorsel.write ((((xcookies).xMorsel)).apply)
                        bogusForceDataize.write ((((xmorsel).xset)).apply ("key") ("val") ("coded_val"))
                        (((unsupported)).apply ((((unsupported)).apply ((xmorsel)) ("expires"))) (0))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xrepr)).apply ((xmorsel)))) ("<Morsel: key=coded_val; expires=w-, d- w- d- d-:d-:d- w->"))
                        bogusForceDataize.write ((((xself).xassertRegex)).apply ((((xstr)).apply ((xmorsel)))) ("Set-Cookie: key=coded_val; expires=w-, d- w- d- d-:d-:d- w-"))
            xtest_main.write
              []
                seq > @
                  seq
                    bogusForceDataize.write (((xrun_unittest)).apply ((xCookieTests)) ((xMorselTests)))
                    bogusForceDataize.write (((xrun_doctest)).apply ((xcookies)))
            ((x__name__).eq "__main__").if
              bogusForceDataize.write (((xtest_main)).apply)