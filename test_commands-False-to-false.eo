memory > xtimezone
memory > xdatetime
memory > ximportlib
memory > xRuntimeWarning
memory > xopen
memory > xConnectionHandler
memory > xmigration
memory > xoverride_settings
memory > xBaseDatabaseSchemaEditor
memory > xUnserializableModel
memory > xmodels
memory > xget_docs_version
memory > xfp
memory > xcm
memory > xUnicodeModel
memory > xfalse
memory > xMigrationRecorder
memory > xdb
memory > xValueError
memory > xInconsistentMigrationHistory
memory > xmigration_dir
memory > xstr
memory > xio
memory > xout
memory > xq
memory > xhas_table
memory > xcontext
memory > xapps
memory > xcaptured_stdout
memory > xTestCase
memory > xcall
memory > xcall_command
memory > xconnection_alias
memory > xcall_args
memory > xmock_call
memory > x_
memory > xallow_migrate
memory > xconnection
memory > xexecute
memory > xset
memory > xDatabaseError
memory > xException
memory > xconnections
memory > xMigrationTestBase
memory > xhasattr
memory > xOperationalError
memory > xsuper
memory > xTestRouter
memory > xargs
memory > xmock
memory > xos
memory > xshutil
memory > xSystemExit
memory > xcall_kwargs
memory > xtruncate_name
memory > xCommandError
memory > xlen
memory > xapp_name
[] > test_commands
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_unknown_prefix
        memory > xtest_makemigrations_check
        memory > xtest_makemigrations_field_rename_interactive
        memory > xtest_makemigrations_empty_connections
        memory > xtest_fails_squash_migration_manual_porting
        memory > xtest_showmigrations_list_squashed
        memory > xtest_showmigrations_plan
        memory > xdatabases
        memory > xtest_migrate_check_plan
        memory > xtest_squashmigrations_nonexistent_app_label
        memory > xtest_makemigrations_no_changes
        memory > xtest_ambigious_prefix
        memory > xtest_makemigrations_unspecified_app_with_conflict_no_merge
        memory > xtest_makemigrations_empty_migration
        memory > xtest_makemigrations_non_interactive_not_null_alteration
        memory > xtest_squashed_name_exists
        memory > xtest_sqlmigrate_replaced_migration
        memory > xtest_makemigrations_non_interactive_auto_now_add_addition
        memory > xtest_showmigrations_plan_single_app_label
        memory > xtest_migrate_plan
        memory > xtest_makemigrations_interactive_by_default
        memory > xtest_ambiguous_prefix
        memory > xtest_sqlmigrate_nonexistent_app_label
        memory > xtest_makemigrations_interactive_not_null_alteration
        memory > xtest_squashmigrations_squashes
        memory > xtest_showmigrations_no_migrations
        memory > xtest_prune_no_app_label
        memory > xtest_optimizemigration_check
        memory > xtest_files_content
        memory > xtest_prune_deleted_squashed_migrations_in_replaces
        memory > xHAS_BLACK
        memory > xtest_makemigrations_no_common_ancestor
        memory > xtest_makemigrations_no_changes_no_apps
        memory > xtest_ticket_23799_squashmigrations_no_optimize
        memory > xtest_prune_no_migrations_to_prune
        memory > xtest_app_without_migrations
        memory > xtest_migrate_with_system_checks
        memory > xtest_showmigrations_plan_no_migrations
        memory > xtest_migrate_app_name_specified_as_label
        memory > xtest_makemigrations_non_interactive_no_model_rename
        memory > xtest_makemigrations_conflict_exit
        memory > xtest_creates_replace_migration_manual_porting
        memory > xtest_sqlmigrate_forwards
        memory > xtest_makemigrations_inconsistent_history_db_failure
        memory > xtest_squashmigrations_invalid_start
        memory > xtest_migrate_not_reflected_changes
        memory > xtest_migrate
        memory > xtest_squashmigrations_app_name_specified_as_label
        memory > xtest_no_optimization_possible
        memory > xtest_makemigrations_interactive_accept
        memory > xtest_makemigrations_dry_run
        memory > xtest_makemigrations_scriptable
        memory > xsetUp
        memory > xtest_squashed_name_with_start_migration_name
        memory > xtest_makemigrations_migration_path_output_valueerror
        memory > xtest_makemigrations_interactive_not_null_addition
        memory > xtest_makemigrations_no_apps_initial
        memory > xtest_makemigrations_scriptable_merge
        memory > xtest_migrate_initial_false
        memory > xtest_makemigrations_with_custom_name
        memory > xtest_makemigrations_disabled_migrations_for_app
        memory > xtest_migrate_partially_applied_squashed_migration
        memory > xtest_makemigrations_auto_merge_name
        memory > xtest_sqlmigrate_for_non_transactional_databases
        memory > xtest_sqlmigrate_for_non_atomic_migration
        memory > xtest_showmigrations_unmigrated_app
        memory > xtest_makemigrations_default_merge_name
        memory > xtest_showmigrations_app_name_specified_as_label
        memory > xtest_migrate_nonexistent_app_label
        memory > xtest_squashmigrations_initial_attribute
        memory > xtest_showmigrations_plan_app_label_no_migrations
        memory > xtest_makemigrations_interactive_reject
        memory > xtest_migrate_fake_initial_case_insensitive
        memory > xtest_makemigrations_migrations_modules_nonexistent_toplevel_package
        memory > xtest_squashed_name_without_start_migration_name
        memory > xtest_sqlmigrate_squashed_migration
        memory > xtest_makemigrations_model_rename_interactive
        memory > xtest_failing_migration
        memory > xtest_makemigrations_unspecified_app_with_conflict_merge
        memory > xtest_makemigrations_non_interactive_unique_callable_default_addition
        memory > xtest_sqlmigrate_app_name_specified_as_label
        memory > xtest_makemigrations_migrations_modules_path_not_exist
        memory > xtest_makemigrations_migration_path_output
        memory > xtest_makemigrations_no_init
        memory > xtest_migrate_record_replaced
        memory > xtest_migrate_syncdb_app_label
        memory > xtest_makemigrations_consistency_checks_respect_routers
        memory > xtest_showmigrations_list
        memory > xtest_migrations_no_operations
        memory > xtest_makemigrations_non_interactive_not_null_addition
        memory > xtest_makemigrations_dry_run_verbosity_3
        memory > xtest_migrate_syncdb_app_with_migrations
        memory > xtest_migrate_fake_initial
        memory > xtest_showmigrations_nonexistent_app_label
        memory > xtest_makemigrations_merge_no_conflict
        memory > xtest_optimizemigration_nonexistent_app_label
        memory > xtest_migrate_record_squashed
        memory > xtest_migrate_fake_split_initial
        memory > xtest_squashmigrations_manual_porting
        memory > xtest_makemigrations_app_name_specified_as_label
        memory > xtest_makemigrations_auto_now_add_interactive
        memory > xtest_optimization_no_verbosity
        memory > xtest_makemigrations_handle_merge
        memory > xtest_optimization
        memory > xtest_makemigration_merge_dry_run_verbosity_3
        memory > xtest_makemigrations_inconsistent_history
        memory > xtest_makemigrations_empty_no_app_specified
        memory > xtest_makemigrations_nonexistent_app_label
        memory > xtest_squashmigrations_valid_start
        memory > xtest_migrate_inconsistent_history
        memory > xtest_makemigrations_migrations_announce
        memory > xtest_makemigrations_order
        memory > xtest_showmigrations_plan_squashed
        memory > xtest_makemigrations_non_interactive_no_field_rename
        memory > xtest_makemigrations_with_invalid_custom_name
        memory > xtest_squashmigrations_optimizes
        memory > xtest_migrate_syncdb_deferred_sql_executed_with_schemaeditor
        memory > xtest_makemigrations_auto_now_add_interactive_quit
        memory > xtest_makemigrations_interactive_unique_callable_default_addition
        memory > xnonexistent_app_error
        memory > xtest_migrate_conflict_exit
        memory > xtest_makemigration_merge_dry_run
        memory > xtest_sqlmigrate_ambiguous_prefix_squashed_migrations
        memory > xtest_migrate_check
        memory > xtest_makemigrations_continues_number_sequence_after_squash
        memory > xdid_you_mean_auth_error
        memory > xtest_migrate_backward_to_squashed_migration
        memory > xtest_regression_22823_unmigrated_fk_to_migrated_model
        memory > xtearDown
        memory > xtest_migrate_prune
        memory > xtest_optimizemigration_app_name_specified_as_label
        memory > xtest_showmigrations_plan_multiple_app_labels
        memory > xtest_makemigrations_merge_dont_output_dependency_operations
        memory > xtest_sqlmigrate_backwards
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xHAS_BLACK.write ((((xshutil).xwhich)).apply ("black"))
            (((unsupported)).apply ((xMigrationTestBase)))
              seq
                (((unsupported)).apply)
                xdatabases.write (((unsupported)).apply ("default") ("other"))
                xtest_migrate.write
                  [xself]
                    memory > xstdout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                        xstdout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (2) ((xstdout)) (TRUE))
                        xstdout.write ((((xstdout).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Target specific migration: 0001_initial, from migrations") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Applying migrations.0001_initial... OK") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Running pre-migrate handlers for application migrations") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Running post-migrate handlers for application migrations") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                        (((unsupported)).apply ((xcall_command)) ("migrate") (0))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_book"))
                        xstdout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (2) ((xstdout)) (TRUE))
                        xstdout.write ((((xstdout).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Unapply all migrations: migrations") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Unapplying migrations.0002_second... OK") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Running pre-migrate handlers for application migrations") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Running post-migrate handlers for application migrations") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                xtest_migrate_with_system_checks.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ((xfalse)) (TRUE) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Apply all migrations: migrated_app") (((((xout).xgetvalue)).apply)))
                xtest_app_without_migrations.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "App 'unmigrated_app_syncdb' does not have migrations."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("unmigrated_app_syncdb"))
                xtest_ambiguous_prefix.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "More than one migration matches 'a' in app 'migrations'. Please be more specific."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("a"))
                xtest_unknown_prefix.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Cannot find a migration matching 'nonexistent' from app 'migrations'."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("nonexistent"))
                xtest_migrate_initial_false.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (0))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (TRUE) (0))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDatabaseError)))))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (TRUE) (0))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (TRUE) (0))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                xtest_migrate_fake_initial.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xdb)) (((xself).xdatabases)))
                          seq
                            (((unsupported)).apply (((xself).xassertTableNotExists)) ("migrations_author") ((xdb)))
                            (((unsupported)).apply (((xself).xassertTableNotExists)) ("migrations_tribble") ((xdb)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (0))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (0) ("other"))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        (((unsupported)).apply (((xself).xassertTableNotExists)) ("migrations_author") ("other"))
                        (((unsupported)).apply (((xself).xassertTableExists)) ("migrations_tribble") ("other"))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (TRUE) (0))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (TRUE) (0) ("other"))
                        bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                        (((unsupported)).apply (((xself).xassertTableExists)) ("migrations_tribble") ("other"))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDatabaseError)))))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (0))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.core.management.color.supports_color") ((((unsupported)).apply ((xfalse)))))))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (TRUE) ((xout)) (1))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (TRUE) (0) ("other"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("migrations.0001_initial... faked") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") (0) ("other"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_book"))
                            (((unsupported)).apply (((xself).xassertTableNotExists)) ("migrations_author") ("other"))
                            (((unsupported)).apply (((xself).xassertTableNotExists)) ("migrations_tribble") ("other"))
                            (((unsupported)).apply (((xself).xassertTableNotExists)) ("migrations_book") ("other"))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (TRUE) (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (TRUE) (0) ("other"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_book"))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDatabaseError)))))
                              (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (0))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xDatabaseError)))))
                              (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (TRUE) (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (TRUE) (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (TRUE) (0) ("other"))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0) ("other"))
                        (((unsupported)).apply ((xdb)) (((xself).xdatabases)))
                          seq
                            (((unsupported)).apply (((xself).xassertTableNotExists)) ("migrations_author") ((xdb)))
                            (((unsupported)).apply (((xself).xassertTableNotExists)) ("migrations_tribble") ((xdb)))
                            (((unsupported)).apply (((xself).xassertTableNotExists)) ("migrations_book") ((xdb)))
                xtest_migrate_fake_initial_case_insensitive.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("migrations") ("migrations.test_fake_initial_case_insensitive.initial"))))))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (TRUE) (0))
                        (((unsupported)).apply ((((unsupported)).apply ((xoverride_settings)) ((((unsupported)).apply ("migrations") ("migrations.test_fake_initial_case_insensitive.fake_initial"))))))
                          seq
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (TRUE) ((xout)) (1) (TRUE))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("migrations.0001_initial... faked") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                xtest_migrate_fake_split_initial.write
                  [xself]
                    memory > xout
                    memory > xvalue
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0002") (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (TRUE) (0))
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply (((((xmock).xpatch)).apply ("django.core.management.color.supports_color") ((((unsupported)).apply ((xfalse)))))))
                              (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0002") (TRUE) ((xout)) (1))
                            xvalue.write (((((((xout).xgetvalue)).apply).xlower)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("migrations.0001_initial... faked") ((xvalue)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("migrations.0002_second... faked") ((xvalue)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (TRUE) (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_migrate_conflict_exit.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmsg.write "Conflicting migrations detected; multiple leaf nodes in the migration graph: (0002_conflicting_second, 0002_second in migrations).nTo fix them run 'python manage.py makemigrations --merge'"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          bogusForceDataize.write (((xcall_command)).apply ("migrate") ("migrations"))
                xtest_migrate_check.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (TRUE))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_author"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_tribble"))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                xtest_migrate_check_plan.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (TRUE) (TRUE) ((xout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Planned operations:nmigrations.0001_initialn    Create model Salamandern    Raw Python operation -> Grow salamander tail.n") (((((xout).xgetvalue)).apply)))
                xtest_showmigrations_list.write
                  [xself]
                    memory > xout
                    memory > xmigration1
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("django.core.management.color.supports_color") ((((unsupported)).apply (TRUE))))))
                          (((unsupported)).apply ((xcall_command)) ("showmigrations") ("list") ((xout)) (0) ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("x1b[1mmigrationsnx1b[0m [ ] 0001_initialn [ ] 0002_secondn") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (0))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("migrations") ("list") ((xout)) (0) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("migrationsn [x] 0001_initialn [ ] 0002_secondn") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("migrations") ((xout)) (2) (TRUE))
                        xmigration1.write (((unsupported)).apply ((((((xMigrationRecorder)).apply ((xconnection))).xmigration_qs).xget)) ("migrations") ("0001_initial"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (("migrationsn [x] 0001_initial (applied at %s)n [ ] 0002_secondn".mod (((((xmigration1).xapplied).xstrftime)).apply ("%Y-%m-%d %H:%M:%S")))) ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_showmigrations_list_squashed.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("list") ((xout)) (2) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("migrationsn [ ] 0001_squashed_0002 (2 squashed migrations)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001_squashed_0002") ((xout)) (2) (TRUE))
                        (((unsupported)).apply)
                          seq
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("operations to perform:n  target specific migration: 0001_squashed_0002, from migrationsnrunning pre-migrate handlers for application migrationsnrunning migrations:n  applying migrations.0001_squashed_0002... ok (") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("showmigrations") ("list") ((xout)) (2) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("migrationsn [x] 0001_squashed_0002 (2 squashed migrations)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_showmigrations_plan.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[ ]  migrations.0001_initialn[ ]  migrations.0003_thirdn[ ]  migrations.0002_secondn") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[ ]  migrations.0001_initialn[ ]  migrations.0003_third ... (migrations.0001_initial)n[ ]  migrations.0002_second ... (migrations.0001_initial, migrations.0003_third)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0003") (0))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[x]  migrations.0001_initialn[x]  migrations.0003_thirdn[ ]  migrations.0002_secondn") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[x]  migrations.0001_initialn[x]  migrations.0003_third ... (migrations.0001_initial)n[ ]  migrations.0002_second ... (migrations.0001_initial, migrations.0003_third)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_migrate_plan.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        unsupported
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0003") (TRUE) ((xout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("Planned operations:nmigrations.0001_initialn    Create model Salamandern    Raw Python operation -> Grow salamander tail.nmigrations.0002_secondn    Create model Bookn    Raw SQL operation -> ['SELECT * FROM migrations_book']nmigrations.0003_thirdn    Create model Authorn    Raw SQL operation -> ['SELECT * FROM migrations_author']n") (((((xout).xgetvalue)).apply)))
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0003") (0))
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0003") (TRUE) ((xout)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Planned operations:n  No planned migration operations.n") (((((xout).xgetvalue)).apply)))
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001") (TRUE) ((xout)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Planned operations:nmigrations.0003_thirdn    Undo Create model Authorn    Raw SQL operation -> ['SELECT * FROM migrations_book']nmigrations.0002_secondn    Undo Create model Bookn    Raw SQL operation -> ['SELECT * FROM migrations_salamand…n") (((((xout).xgetvalue)).apply)))
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0004") (TRUE) ((xout)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Planned operations:nmigrations.0004_fourthn    Raw SQL operation -> SELECT * FROM migrations_author WHE…n") (((((xout).xgetvalue)).apply)))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0004") (0))
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0003") (TRUE) ((xout)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Planned operations:nmigrations.0004_fourthn    Raw SQL operation -> IRREVERSIBLEn") (((((xout).xgetvalue)).apply)))
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0005") (TRUE) ((xout)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Planned operations:nmigrations.0005_fifthn    Raw Python operationn    Raw Python operationn    Raw Python operation -> Feed salamander.n") (((((xout).xgetvalue)).apply)))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0005") (0))
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0004") (TRUE) ((xout)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("Planned operations:nmigrations.0005_fifthn    Raw Python operation -> IRREVERSIBLEn    Raw Python operation -> IRREVERSIBLEn    Raw Python operationn") (((((xout).xgetvalue)).apply)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0003") (TRUE) (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_showmigrations_no_migrations.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ((xout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("migrationsn (no migrations)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                xtest_showmigrations_unmigrated_app.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("unmigrated_app") ((xout)) (TRUE))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ("unmigrated_appn (no migrations)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                          bogusForceDataize.write (((((xapps).x_pending_operations).xpop)).apply ((((unsupported)).apply ("migrations") ("tribble"))) ("None: is there a None literal in the EO language?"))
                xtest_showmigrations_plan_no_migrations.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("(no migrations)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)) (2) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("(no migrations)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                xtest_showmigrations_plan_squashed.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[ ]  migrations.1_auton[ ]  migrations.2_auton[ ]  migrations.3_squashed_5n[ ]  migrations.6_auton[ ]  migrations.7_auton") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[ ]  migrations.1_auton[ ]  migrations.2_auto ... (migrations.1_auto)n[ ]  migrations.3_squashed_5 ... (migrations.2_auto)n[ ]  migrations.6_auto ... (migrations.3_squashed_5)n[ ]  migrations.7_auto ... (migrations.6_auto)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("3_squashed_5") (0))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[x]  migrations.1_auton[x]  migrations.2_auton[x]  migrations.3_squashed_5n[ ]  migrations.6_auton[ ]  migrations.7_auton") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("plan") ((xout)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[x]  migrations.1_auton[x]  migrations.2_auto ... (migrations.1_auto)n[x]  migrations.3_squashed_5 ... (migrations.2_auto)n[ ]  migrations.6_auto ... (migrations.3_squashed_5)n[ ]  migrations.7_auto ... (migrations.6_auto)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                xtest_showmigrations_plan_single_app_label.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("mutate_state_b") ("plan") ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[ ]  mutate_state_b.0001_initialn[ ]  mutate_state_b.0002_add_fieldn") (((((xout).xgetvalue)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("author_app") ("plan") ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[ ]  author_app.0001_initialn[ ]  book_app.0001_initialn[ ]  author_app.0002_alter_idn") (((((xout).xgetvalue)).apply)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("author_app") ("0001") (0))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("author_app") ("plan") ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[X]  author_app.0001_initialn[ ]  book_app.0001_initialn[ ]  author_app.0002_alter_idn") (((((xout).xgetvalue)).apply)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("author_app") ("zero") (0))
                xtest_showmigrations_plan_multiple_app_labels.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("mutate_state_b") ("author_app") ("plan") ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[ ]  author_app.0001_initialn[ ]  book_app.0001_initialn[ ]  author_app.0002_alter_idn[ ]  mutate_state_b.0001_initialn[ ]  mutate_state_b.0002_add_fieldn") (((((xout).xgetvalue)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("author_app") ("mutate_state_b") ("plan") ((xout)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("[ ]  author_app.0001_initialn[ ]  book_app.0001_initialn[ ]  author_app.0002_alter_idn[ ]  mutate_state_b.0001_initialn[ ]  mutate_state_b.0002_add_fieldn") (((((xout).xgetvalue)).apply)))
                xtest_showmigrations_plan_app_label_no_migrations.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("unmigrated_app") ("plan") ((xout)) (TRUE))
                        (((unsupported)).apply)
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ("(no migrations)n") (((((xout).xgetvalue)).apply)))
                          bogusForceDataize.write (((((xapps).x_pending_operations).xpop)).apply ((((unsupported)).apply ("migrations") ("tribble"))) ("None: is there a None literal in the EO language?"))
                xtest_sqlmigrate_forwards.write
                  [xself]
                    memory > xout
                    memory > xoutput
                    memory > xindex_create_table
                    memory > xindex_tx_end
                    memory > xindex_tx_start
                    memory > xindex_op_desc_author
                    memory > xindex_op_desc_unique_together
                    memory > xindex_op_desc_tribble
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("sqlmigrate") ("migrations") ("0001") ((xout)))
                        xoutput.write (((((((xout).xgetvalue)).apply).xlower)).apply)
                        xindex_tx_start.write ((((xoutput).xfind)).apply (((((((((xconnection).xops).xstart_transaction_sql)).apply).xlower)).apply)))
                        xindex_op_desc_author.write ((((xoutput).xfind)).apply ("-- create model author"))
                        xindex_create_table.write ((((xoutput).xfind)).apply ("create table"))
                        xindex_op_desc_tribble.write ((((xoutput).xfind)).apply ("-- create model tribble"))
                        xindex_op_desc_unique_together.write ((((xoutput).xfind)).apply ("-- alter unique_together"))
                        xindex_tx_end.write ((((xoutput).xfind)).apply (((((((((xconnection).xops).xend_transaction_sql)).apply).xlower)).apply)))
                        (((xconnection).xfeatures).xcan_rollback_ddl).if
                          seq
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_tx_start)) ((1.neg)) ("Transaction start not found"))
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_tx_end)) ((xindex_op_desc_unique_together)) ("Transaction end not found or found before operation description (unique_together)"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_op_desc_author)) ((xindex_tx_start)) ("Operation description (author) not found or found before transaction start"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_create_table)) ((xindex_op_desc_author)) ("CREATE TABLE not found or found before operation description (author)"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_op_desc_tribble)) ((xindex_create_table)) ("Operation description (tribble) not found or found before CREATE TABLE (author)"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_op_desc_unique_together)) ((xindex_op_desc_tribble)) ("Operation description (unique_together) not found or found before operation description (tribble)"))
                xtest_sqlmigrate_backwards.write
                  [xself]
                    memory > xout
                    memory > xindex_drop_table
                    memory > xoutput
                    memory > xindex_tx_end
                    memory > xindex_tx_start
                    memory > xindex_op_desc_author
                    memory > xindex_op_desc_unique_together
                    memory > xindex_op_desc_tribble
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (0))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("sqlmigrate") ("migrations") ("0001") ((xout)) (TRUE))
                        xoutput.write (((((((xout).xgetvalue)).apply).xlower)).apply)
                        xindex_tx_start.write ((((xoutput).xfind)).apply (((((((((xconnection).xops).xstart_transaction_sql)).apply).xlower)).apply)))
                        xindex_op_desc_unique_together.write ((((xoutput).xfind)).apply ("-- alter unique_together"))
                        xindex_op_desc_tribble.write ((((xoutput).xfind)).apply ("-- create model tribble"))
                        xindex_op_desc_author.write ((((xoutput).xfind)).apply ("-- create model author"))
                        xindex_drop_table.write ((((xoutput).xrfind)).apply ("drop table"))
                        xindex_tx_end.write ((((xoutput).xfind)).apply (((((((((xconnection).xops).xend_transaction_sql)).apply).xlower)).apply)))
                        (((xconnection).xfeatures).xcan_rollback_ddl).if
                          seq
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_tx_start)) ((1.neg)) ("Transaction start not found"))
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_tx_end)) ((xindex_op_desc_unique_together)) ("Transaction end not found or found before DROP TABLE"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_op_desc_unique_together)) ((xindex_tx_start)) ("Operation description (unique_together) not found or found before transaction start"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_op_desc_tribble)) ((xindex_op_desc_unique_together)) ("Operation description (tribble) not found or found before operation description (unique_together)"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_op_desc_author)) ((xindex_op_desc_tribble)) ("Operation description (author) not found or found before operation description (tribble)"))
                        bogusForceDataize.write ((((xself).xassertGreater)).apply ((xindex_drop_table)) ((xindex_op_desc_author)) ("DROP TABLE not found or found before operation description (author)"))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_sqlmigrate_for_non_atomic_migration.write
                  [xself]
                    memory > xout
                    memory > xqueries
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("sqlmigrate") ("migrations") ("0001") ((xout)))
                        xoutput.write (((((((xout).xgetvalue)).apply).xlower)).apply)
                        xqueries.write (((unsupported)).apply (((((xq).xstrip)).apply)) ((xq)) (((((xoutput).xsplitlines)).apply)))
                        (((((xconnection).xops).xstart_transaction_sql)).apply).if
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply (((((((((xconnection).xops).xstart_transaction_sql)).apply).xlower)).apply)) ((xqueries)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((((((((xconnection).xops).xend_transaction_sql)).apply).xlower)).apply)) ((xqueries)))
                xtest_sqlmigrate_for_non_transactional_databases.write
                  [xself]
                    memory > xstart_transaction_sql
                    memory > xout
                    memory > xqueries
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply (((xconnection).xfeatures)) ("can_rollback_ddl") ((xfalse)))))
                          (((unsupported)).apply ((xcall_command)) ("sqlmigrate") ("migrations") ("0001") ((xout)))
                        xoutput.write (((((((xout).xgetvalue)).apply).xlower)).apply)
                        xqueries.write (((unsupported)).apply (((((xq).xstrip)).apply)) ((xq)) (((((xoutput).xsplitlines)).apply)))
                        xstart_transaction_sql.write (((((xconnection).xops).xstart_transaction_sql)).apply)
                        (xstart_transaction_sql).if
                          bogusForceDataize.write ((((xself).xassertNotIn)).apply (((((xstart_transaction_sql).xlower)).apply)) ((xqueries)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (((((((((xconnection).xops).xend_transaction_sql)).apply).xlower)).apply)) ((xqueries)))
                xtest_sqlmigrate_ambiguous_prefix_squashed_migrations.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "More than one migration matches '0001' in app 'migrations'. Please be more specific."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          bogusForceDataize.write (((xcall_command)).apply ("sqlmigrate") ("migrations") ("0001"))
                xtest_sqlmigrate_squashed_migration.write
                  [xself]
                    memory > xout
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("sqlmigrate") ("migrations") ("0001_squashed_0002") ((xout)))
                        xoutput.write (((((((xout).xgetvalue)).apply).xlower)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("-- create model author") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("-- create model book") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("-- create model tribble") ((xoutput)))
                xtest_sqlmigrate_replaced_migration.write
                  [xself]
                    memory > xout
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("sqlmigrate") ("migrations") ("0001_initial") ((xout)))
                        xoutput.write (((((((xout).xgetvalue)).apply).xlower)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("-- create model author") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("-- create model tribble") ((xoutput)))
                xtest_migrations_no_operations.write
                  [xself]
                    memory > xerr
                    seq > @
                      (((unsupported)).apply)
                        xerr.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("sqlmigrate") ("migrations") ("0001_initial") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xerr).xgetvalue)).apply)) ("No operations found.n"))
                xtest_regression_22823_unmigrated_fk_to_migrated_model.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrated_unapplied_app") (0))
                        bogusForceDataize.write (((((xapps).x_pending_operations).xpop)).apply ((((unsupported)).apply ("migrations") ("tribble"))) ("None: is there a None literal in the EO language?"))
                xtest_migrate_syncdb_deferred_sql_executed_with_schemaeditor.write
                  [xself]
                    memory > xtable_name
                    memory > xstdout
                    memory > xcreate_table_count
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xstdout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xBaseDatabaseSchemaEditor)) ("execute"))) ((xexecute)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") (TRUE) (1) ((xstdout)) (TRUE))
                            xcreate_table_count.write (((xlen)).apply ((((unsupported)).apply ((xcall)) ((xcall)) (((xexecute).xmock_calls)) ((((unsupported)).apply ("CREATE TABLE") ((((xstr)).apply ((xcall)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcreate_table_count)) (2))
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply (((xexecute).xmock_calls)))) (2))
                        xstdout.write ((((xstdout).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Synchronize unmigrated apps: unmigrated_app_syncdb") ((xstdout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Creating tables...") ((xstdout)))
                        xtable_name.write (((xtruncate_name)).apply ("unmigrated_app_syncdb_classroom") ((((((xconnection).xops).xmax_name_length)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (("Creating table %s".mod (xtable_name))) ((xstdout)))
                xtest_migrate_syncdb_app_with_migrations.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Can't use run_syncdb with app 'migrations' as it has migrations."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (TRUE) (0))
                xtest_migrate_syncdb_app_label.write
                  [xself]
                    memory > xstdout
                    memory > xcreate_table_count
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xstdout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((((xmock).xpatch).xobject)).apply ((xBaseDatabaseSchemaEditor)) ("execute"))) ((xexecute)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("unmigrated_app_syncdb") (TRUE) ((xstdout)))
                            xcreate_table_count.write (((xlen)).apply ((((unsupported)).apply ((xcall)) ((xcall)) (((xexecute).xmock_calls)) ((((unsupported)).apply ("CREATE TABLE") ((((xstr)).apply ((xcall)))))))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcreate_table_count)) (2))
                            bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply (((xexecute).xmock_calls)))) (2))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Synchronize unmigrated app: unmigrated_app_syncdb") (((((xstdout).xgetvalue)).apply)))
                xtest_migrate_record_replaced.write
                  [xself]
                    memory > xout
                    memory > xrecorder
                    memory > xapplied_migrations
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (0))
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("migrations") ((xout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("migrationsn [x] 0001_squashed_0002 (2 squashed migrations)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        xapplied_migrations.write ((((xrecorder).xapplied_migrations)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))) ((xapplied_migrations)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0002_second"))) ((xapplied_migrations)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))) ((xapplied_migrations)))
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_migrate_record_squashed.write
                  [xself]
                    memory > xout
                    memory > xrecorder
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0001_initial"))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0002_second"))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("migrations") ((xout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("migrationsn [-] 0001_squashed_0002 (2 squashed migrations) run 'manage.py migrate' to finish recording.n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (0))
                        (((unsupported)).apply ((xcall_command)) ("showmigrations") ("migrations") ((xout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ("migrationsn [x] 0001_squashed_0002 (2 squashed migrations)n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))) (((((xrecorder).xapplied_migrations)).apply)))
                xtest_migrate_partially_applied_squashed_migration.write
                  [xself]
                    memory > xrecorder
                    memory > xapplied_migrations
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          seq
                            xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                            (((unsupported)).apply)
                              seq
                                (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001_initial") (0))
                                (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0002") ((xfalse)) (0))
                                (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001_squashed_0002_second") (0))
                                xapplied_migrations.write ((((xrecorder).xapplied_migrations)).apply)
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((((unsupported)).apply ("migrations") ("0002_second"))) ((xapplied_migrations)))
                              (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_migrate_backward_to_squashed_migration.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001_squashed_0002") (0))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_book"))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("0001_initial") (0))
                            bogusForceDataize.write ((((xself).xassertTableExists)).apply ("migrations_author"))
                            bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_book"))
                          (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_migrate_inconsistent_history.write
                  [xself]
                    memory > xrecorder
                    memory > xmsg
                    memory > xapplied_migrations
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0002_second"))
                        xmsg.write "Migration migrations.0002_second is applied before its dependency migrations.0001_initial"
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xInconsistentMigrationHistory)) ((xmsg)))))
                          bogusForceDataize.write (((xcall_command)).apply ("migrate"))
                        xapplied_migrations.write ((((xrecorder).xapplied_migrations)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ((((unsupported)).apply ("migrations") ("0001_initial"))) ((xapplied_migrations)))
                xtest_migrate_not_reflected_changes.write
                  [xself]
                    memory > xout
                    memory > xapp_label
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            xapp_label.write "migrated_app"
                        (((unsupported)).apply (((xmodels).xModel)))
                          (((unsupported)).apply)
                            xapp_label.write "migrated_unapplied_app"
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ((xout)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ("operations to perform:n  apply all migrations: migrated_app, migrated_unapplied_appnrunning migrations:n  no migrations to apply.n  your models in app(s): 'migrated_app', 'migrated_unapplied_app' have changes that are not yet reflected in a migration, and so won't be applied.n  run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them.n") ((((((((xout).xgetvalue)).apply).xlower)).apply)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrated_app") ("zero") (0))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrated_unapplied_app") ("zero") (0))
                xtest_migrate_prune.write
                  [xself]
                    memory > xout
                    memory > xrecorder
                    memory > xapplied_migrations
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0001_initial"))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0002_second"))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0001_squashed_0002"))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply)
                          seq
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (TRUE) ((xout)) (TRUE))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ("Pruning migrations:n  Pruning migrations.0001_initial OKn  Pruning migrations.0002_second OKn"))
                            xapplied_migrations.write (((unsupported)).apply ((xmigration)) ((xmigration)) (((((xrecorder).xapplied_migrations)).apply)) (((((unsupported)).apply ((xmigration)) (0)).eq "migrations")))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xapplied_migrations)) ((((unsupported)).apply ((((unsupported)).apply ("migrations") ("0001_squashed_0002"))))))
                          seq
                            bogusForceDataize.write ((((xrecorder).xrecord_unapplied)).apply ("migrations") ("0001_initial"))
                            bogusForceDataize.write ((((xrecorder).xrecord_unapplied)).apply ("migrations") ("0001_second"))
                            bogusForceDataize.write ((((xrecorder).xrecord_unapplied)).apply ("migrations") ("0001_squashed_0002"))
                xtest_prune_deleted_squashed_migrations_in_replaces.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_squashed"))) ((xmigration_dir)))
                          (((unsupported)).apply)
                            seq
                              (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (0))
                              bogusForceDataize.write ((((xos).xremove)).apply ((((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))))
                              bogusForceDataize.write ((((xos).xremove)).apply ((((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0002_second.py"))))
                              (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (TRUE) ((xout)) (TRUE))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ("Pruning migrations:n  Cannot use --prune because the following squashed migrations have their 'replaces' attributes and may not be recorded as applied:n    migrations.0001_squashed_0002n  Re-run 'manage.py migrate' if they are not marked as applied, and remove 'replaces' attributes in their Migration classes.n"))
                            (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") ("zero") (0))
                xtest_prune_no_migrations_to_prune.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (TRUE) ((xout)) (TRUE))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ("Pruning migrations:n  No migrations to prune.n"))
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("migrate") ("migrations") (TRUE) ((xout)) (TRUE) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) (""))
                xtest_prune_no_app_label.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Migrations can be pruned only when an app is specified."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("migrate") (TRUE))
            (((unsupported)).apply ((xMigrationTestBase)))
              seq
                (((unsupported)).apply)
                xsetUp.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((((xsuper)).apply).xsetUp)).apply)
                        (((unsupported)).apply (((xself).x_old_models)) ((((((((unsupported)).apply (((xapps).xapp_configs)) ("migrations")).xmodels).xcopy)).apply)))
                xtearDown.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply (((((unsupported)).apply (((xapps).xapp_configs)) ("migrations")).xmodels)) (((xself).x_old_models)))
                        (((unsupported)).apply ((((unsupported)).apply (((xapps).xall_models)) ("migrations"))) (((xself).x_old_models)))
                        bogusForceDataize.write ((((xapps).xclear_cache)).apply)
                        bogusForceDataize.write ((((((xsuper)).apply).xtearDown)).apply)
                xtest_files_content.write
                  [xself]
                    memory > xinitial_file
                    memory > xinit_file
                    memory > xcontent
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_unicodemodel"))
                        bogusForceDataize.write ((((xapps).xregister_model)).apply ("migrations") ((xUnicodeModel)))
                        (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (0))
                            xinit_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("__init__.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xinit_file)))))
                            (((unsupported)).apply ((((xopen)).apply ((xinit_file)))) ((xfp)))
                              xcontent.write ((((xfp).xread)).apply)
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcontent)) (""))
                            xinitial_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xinitial_file)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xinitial_file)) ("utf-8"))) ((xfp)))
                              seq
                                xcontent.write ((((xfp).xread)).apply)
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("migrations.CreateModel") ((xcontent)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("initial = True") ((xcontent)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("úñí©óðé µóðéø") ((xcontent)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("úñí©óðé µóðéøß") ((xcontent)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("ÚÑÍ¢ÓÐÉ") ((xcontent)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("“Ðjáñgó”") ((xcontent)))
                xtest_makemigrations_order.write
                  [xself]
                    memory > xmodule
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmodule.write "migrations.test_migrations_order"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ((xmodule)))) ((xmigration_dir)))
                          seq
                            (((xhasattr)).apply ((ximportlib)) ("invalidate_caches")).if
                              bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                            bogusForceDataize.write (((xcall_command)).apply ("makemigrations") ("migrations") ("--empty") ("-n") ("a") ("-v") ("0"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0002_a.py"))))))
                xtest_makemigrations_empty_connections.write
                  [xself]
                    memory > xempty_connections
                    memory > xout
                    memory > xinit_file
                    seq > @
                      seq
                        xempty_connections.write (((xConnectionHandler)).apply ((((unsupported)).apply ("default") ((((unsupported)).apply)))))
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("django.core.management.commands.makemigrations.connections") ((xempty_connections)))))
                          seq
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ((xout)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("No changes detected") (((((xout).xgetvalue)).apply)))
                            (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)) ((xmigration_dir)))
                              seq
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (0))
                                xinit_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("__init__.py"))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xinit_file)))))
                xtest_makemigrations_consistency_checks_respect_routers.write
                  [xself]
                    memory > xpatched_has_table
                    memory > xinitial_file
                    memory > xcalled_aliases
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xpatched_has_table.write
                          [xmigration_recorder]
                            seq > @
                              (((unsupported)).apply (((xmigration_recorder).xconnection)) ((((unsupported)).apply ((xconnections)) ("other")))).if
                                (((unsupported)).apply ((((xException)).apply ("Other connection"))))
                                (((unsupported)).apply (((xmock).xDEFAULT)))
                        bogusForceDataize.write ((((xself).xassertTableNotExists)).apply ("migrations_unicodemodel"))
                        bogusForceDataize.write ((((xapps).xregister_model)).apply ("migrations") ((xUnicodeModel)))
                        (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xMigrationRecorder)) ("has_table") (TRUE) ((xpatched_has_table)))) ((xhas_table)))
                          (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)) ((xmigration_dir)))
                            seq
                              (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (0))
                              xinitial_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xinitial_file)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhas_table).xcall_count)) (1))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ("migrations.routers.TestRouter"))))))
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (0))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhas_table).xcall_count)) (2))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ("migrations.routers.DefaultOtherRouter"))))))
                                (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xException)) ("Other connection"))))
                                  (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (0))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhas_table).xcall_count)) (4))
                              (((unsupported)).apply ((((unsupported)).apply (((xself).xsettings)) ((((unsupported)).apply ("migrations.routers.TestRouter"))))))
                                (((unsupported)).apply ((((unsupported)).apply ((((xmock).xpatch).xobject)) ((xTestRouter)) ("allow_migrate") ((xfalse)))) ((xallow_migrate)))
                                  (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (0))
                              (((unsupported)).apply (((xallow_migrate).xassert_any_call)) ("other") ("migrations") ("UnicodeModel"))
                              bogusForceDataize.write ((((xself).xassertGreater)).apply ((((xlen)).apply (((xallow_migrate).xmock_calls)))) (0))
                              xcalled_aliases.write (((xset)).apply)
                              (((unsupported)).apply ((xmock_call)) (((xallow_migrate).xmock_calls)))
                                seq
                                  (((unsupported)).apply ((((unsupported)).apply ((x_)) ((xcall_args)) ((xcall_kwargs)))) ((xmock_call)))
                                  (((unsupported)).apply ((((unsupported)).apply ((xconnection_alias)) ((xapp_name)))) ((xcall_args)))
                                  bogusForceDataize.write ((((xcalled_aliases).xadd)).apply ((xconnection_alias)))
                                  bogusForceDataize.write (((((((xapps).xget_app_config)).apply ((xapp_name))).xget_model)).apply ((((unsupported)).apply ((xcall_kwargs)) ("model_name"))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcalled_aliases)) ((((xset)).apply ((xconnections)))))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply (((xhas_table).xcall_count)) (4))
                xtest_failing_migration.write
                  [xself]
                    memory > xinitial_file
                    seq > @
                      seq
                        bogusForceDataize.write ((((xapps).xregister_model)).apply ("migrations") ((xUnserializableModel)))
                        (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("Cannot serialize"))))
                              (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (0))
                            xinitial_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))
                            bogusForceDataize.write ((((xself).xassertfalse)).apply ((((((xos).xpath).xexists)).apply ((xinitial_file)))))
                xtest_makemigrations_conflict_exit.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xCommandError)))) ((xcontext)))
                            bogusForceDataize.write (((xcall_command)).apply ("makemigrations"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcontext).xexception)))) ("Conflicting migrations detected; multiple leaf nodes in the migration graph: (0002_conflicting_second, 0002_second in migrations).nTo fix them run 'python manage.py makemigrations --merge'"))
                xtest_makemigrations_merge_no_conflict.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") (TRUE) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("No conflicts detected to merge.") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_empty_no_app_specified.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xmsg.write "You must supply at least one app label when using --empty."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") (TRUE))
                xtest_makemigrations_empty_migration.write
                  [xself]
                    memory > xcontent
                    memory > xinitial_file
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) (0))
                            xinitial_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xinitial_file)))))
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xinitial_file)) ("utf-8"))) ((xfp)))
                              seq
                                xcontent.write ((((xfp).xread)).apply)
                                xcontent.write ((((xcontent).xreplace)).apply (" ") (""))
                                bogusForceDataize.write ((((xself).xassertIn)).apply (((xHAS_BLACK).if "dependencies=[]" "dependencies=[n]")) ((xcontent)))
                                bogusForceDataize.write ((((xself).xassertIn)).apply (((xHAS_BLACK).if "operations=[]" "operations=[n]")) ((xcontent)))
                xtest_makemigrations_disabled_migrations_for_app.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        xmsg.write "Django can't create migrations for app 'migrations' because migrations have been disabled via the MIGRATION_MODULES setting."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) (0))
                xtest_makemigrations_no_changes_no_apps.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((xcall_command)) ("makemigrations") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("No changes detected") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_no_changes.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_changes"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("No changes detected in app 'migrations'") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_no_apps_initial.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_empty"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("0001_initial.py") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_no_init.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        unsupported
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_init"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("0001_initial.py") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_migrations_announce.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Migrations for 'migrations'") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_no_common_ancestor.write
                  [xself]
                    memory > xexception_message
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xValueError)))) ((xcontext)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_ancestor"))))
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                        xexception_message.write (((xstr)).apply (((xcontext).xexception)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Could not find common ancestor of") ((xexception_message)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("0002_second") ((xexception_message)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("0002_conflicting_second") ((xexception_message)))
                xtest_makemigrations_interactive_reject.write
                  [xself]
                    memory > xmerge_file
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("builtins.input") ((((unsupported)).apply (((xmock).xMock)) ("N"))))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict"))) ((xmigration_dir)))
                            seq
                              (((unsupported)).apply ((((xcaptured_stdout)).apply)))
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ("merge") (TRUE) (TRUE) (0))
                              xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge.py"))
                              bogusForceDataize.write ((((xself).xassertfalse)).apply ((((((xos).xpath).xexists)).apply ((xmerge_file)))))
                xtest_makemigrations_interactive_accept.write
                  [xself]
                    memory > xmerge_file
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("builtins.input") ((((unsupported)).apply (((xmock).xMock)) ("y"))))))
                          seq
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict"))) ((xmigration_dir)))
                              seq
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ("merge") (TRUE) (TRUE) ((xout)))
                                xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge.py"))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xmerge_file)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Created new merge migration") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_default_merge_name.write
                  [xself]
                    memory > xmerge_file
                    memory > xout
                    memory > xcontent
                    memory > xtarget_str
                    seq > @
                      seq
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) ((xfalse)) ((xout)))
                            xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge_0002_conflicting_second_0002_second.py"))
                            bogusForceDataize.write ((((xself).xassertIs)).apply ((((((xos).xpath).xexists)).apply ((xmerge_file)))) (TRUE))
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xmerge_file)) ("utf-8"))) ((xfp)))
                              xcontent.write ((((xfp).xread)).apply)
                            (xHAS_BLACK).if
                              xtarget_str.write "(\"migrations\", \"0002_conflicting_second\")"
                              xtarget_str.write "('migrations', '0002_conflicting_second')"
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xtarget_str)) ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (("Created new merge migration %s".mod (xmerge_file))) (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_auto_merge_name.write
                  [xself xmock_datetime]
                    memory > xmerge_file
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xmock_datetime).xdatetime).xnow).xreturn_value)) (((((xdatetime).xdatetime)).apply (2016) (1) (2) (3) (4))))
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("builtins.input") ((((unsupported)).apply (((xmock).xMock)) ("y"))))))
                          seq
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict_long_name"))) ((xmigration_dir)))
                              seq
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) (TRUE) ((xout)))
                                xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge_20160102_0304.py"))
                                bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xmerge_file)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Created new merge migration") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_non_interactive_not_null_addition.write
                  [xself]
                    memory > xsilly_int
                    memory > xsilly_field
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsilly_field.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            xsilly_int.write ((((xmodels).xIntegerField)).apply)
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_default"))))
                            (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                              (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Field 'silly_int' on model 'sillymodel' not migrated: it is impossible to add a non-nullable field without specifying a default.") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_interactive_not_null_addition.write
                  [xself]
                    memory > xsilly_field
                    memory > xoutput
                    memory > xinput_msg
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsilly_field.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        xinput_msg.write "It is impossible to add a non-nullable field 'silly_field' to author without specifying a default. This is because the database needs something to populate existing rows.nPlease select a fix:n 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)n 2) Quit and manually define a default value in models.py."
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.input") ("2"))))
                              (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)) (((((xself).xassertRaises)).apply ((xSystemExit)))))
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xinput_msg)) (((((xout).xgetvalue)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.input") ("1"))))
                              (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                            xoutput.write ((((xout).xgetvalue)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xinput_msg)) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Please enter the default value as valid Python.") ((xoutput)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("The datetime and django.utils.timezone modules are available, so it is possible to provide e.g. timezone.now as a value") ((xoutput)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Type 'exit' to exit this prompt") ((xoutput)))
                xtest_makemigrations_non_interactive_not_null_alteration.write
                  [xself]
                    memory > xname
                    memory > xage
                    memory > xslug
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xname.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            xslug.write ((((xmodels).xSlugField)).apply)
                            xage.write (((unsupported)).apply (((xmodels).xIntegerField)) (0))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Alter field slug on author") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Field 'slug' on model 'author' given a default of NOT PROVIDED and must be corrected.") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_interactive_not_null_alteration.write
                  [xself]
                    memory > xslug
                    memory > xoutput
                    memory > xinput_msg
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xslug.write (((unsupported)).apply (((xmodels).xSlugField)) ((xfalse)))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        xinput_msg.write "It is impossible to change a nullable field 'slug' on author to non-nullable without providing a default. This is because the database needs something to populate existing rows.nPlease select a fix:n 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)n 2) Ignore for now. Existing rows that contain NULL values will have to be handled manually, for example with a RunPython or RunSQL operation.n 3) Quit and manually define a default value in models.py."
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          seq
                            (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                              (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) (TRUE))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ((xinput_msg)) (((((xout).xgetvalue)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.input") ("3"))))
                              (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)) (((((xself).xassertRaises)).apply ((xSystemExit)))))
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xinput_msg)) (((((xout).xgetvalue)).apply)))
                            (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.input") ("1"))))
                              (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                            xoutput.write ((((xout).xgetvalue)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xinput_msg)) ((xoutput)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Please enter the default value as valid Python.") ((xoutput)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("The datetime and django.utils.timezone modules are available, so it is possible to provide e.g. timezone.now as a value") ((xoutput)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Type 'exit' to exit this prompt") ((xoutput)))
                xtest_makemigrations_non_interactive_no_model_rename.write
                  [xself]
                    memory > xout
                    memory > xsilly_field
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsilly_field.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_default"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xfalse)) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Delete model SillyModel") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Create model RenamedModel") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_non_interactive_no_field_rename.write
                  [xself]
                    memory > xout
                    memory > xsilly_rename
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsilly_rename.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_default"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xfalse)) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Remove field silly_field from sillymodel") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Add field silly_rename to sillymodel") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_model_rename_interactive.write
                  [xself xmock_input]
                    memory > xsilly_field
                    memory > xapp_label
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsilly_field.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_default"))))
                          (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Rename model SillyModel to RenamedModel") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_field_rename_interactive.write
                  [xself xmock_input]
                    memory > xsilly_rename
                    memory > xapp_label
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsilly_rename.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_default"))))
                          (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Rename field silly_field on sillymodel to silly_rename") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_handle_merge.write
                  [xself]
                    memory > xmerge_file
                    memory > xout
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ("merge") (TRUE) ((xfalse)) ((xout)))
                            xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xmerge_file)))))
                        xoutput.write ((((xout).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Merging migrations") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Branch 0002_second") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Branch 0002_conflicting_second") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Created new merge migration") ((xoutput)))
                xtest_makemigration_merge_dry_run.write
                  [xself]
                    memory > xmerge_file
                    memory > xout
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ("merge") (TRUE) (TRUE) ((xfalse)) ((xout)))
                            xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge.py"))
                            bogusForceDataize.write ((((xself).xassertfalse)).apply ((((((xos).xpath).xexists)).apply ((xmerge_file)))))
                        xoutput.write ((((xout).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Merging migrations") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Branch 0002_second") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Branch 0002_conflicting_second") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Created new merge migration") ((xoutput)))
                xtest_makemigration_merge_dry_run_verbosity_3.write
                  [xself]
                    memory > xmerge_file
                    memory > xout
                    memory > xoutput
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ("merge") (TRUE) (TRUE) ((xfalse)) ((xout)) (3))
                            xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge.py"))
                            bogusForceDataize.write ((((xself).xassertfalse)).apply ((((((xos).xpath).xexists)).apply ((xmerge_file)))))
                        xoutput.write ((((xout).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Merging migrations") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Branch 0002_second") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Branch 0002_conflicting_second") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Created new merge migration") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("class Migration(migrations.Migration):") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("dependencies = [") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("('migrations', '0002_second')") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("('migrations', '0002_conflicting_second')") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("operations = [") ((xoutput)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("]") ((xoutput)))
                xtest_makemigrations_dry_run.write
                  [xself]
                    memory > xout
                    memory > xsilly_field
                    memory > xapp_label
                    memory > xsilly_auto_now
                    memory > xsilly_date
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsilly_field.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            xsilly_date.write ((((xmodels).xDateField)).apply)
                            xsilly_auto_now.write (((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_default"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Add field silly_date to sillymodel") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_dry_run_verbosity_3.write
                  [xself]
                    memory > xout
                    memory > xsilly_char
                    memory > xsilly_field
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsilly_field.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            xsilly_char.write (((unsupported)).apply (((xmodels).xCharField)) (""))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_default"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) ((xout)) (3))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("- Add field silly_char to sillymodel") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("class Migration(migrations.Migration):") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("dependencies = [") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("('migrations', '0001_initial'),") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("migrations.AddField(") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("model_name='sillymodel',") (((((xout).xgetvalue)).apply)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("name='silly_char',") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_scriptable.write
                  [xself]
                    memory > xout
                    memory > xerr
                    memory > xinitial_file
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        xerr.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.migrations.test_migrations"))) ((xmigration_dir)))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) ((xout)) ((xerr)))
                        xinitial_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ("{initial_file}n"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("    - Create model ModelWithCustomBasen") (((((xerr).xgetvalue)).apply)))
                xtest_makemigrations_scriptable_merge.write
                  [xself xmock_input]
                    memory > xmerge_file
                    memory > xout
                    memory > xerr
                    seq > @
                      (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        xerr.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict"))) ((xmigration_dir)))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) ("merge") (TRUE) ((xout)) ((xerr)))
                        xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge.py"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ("{merge_file}n"))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Created new merge migration {merge_file}") (((((xerr).xgetvalue)).apply)))
                xtest_makemigrations_migrations_modules_path_not_exist.write
                  [xself]
                    memory > xsilly_field
                    memory > xapp_label
                    memory > xmigration_module
                    memory > xout
                    memory > xinitial_file
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xsilly_field.write (((unsupported)).apply (((xmodels).xBooleanField)) ((xfalse)))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        xout.write ((((xio).xStringIO)).apply)
                        xmigration_module.write "migrations.test_migrations_path_doesnt_exist.foo.bar"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ((xmigration_module)))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xout)))
                            xinitial_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xinitial_file)))))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (" - Create model SillyModel") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_migrations_modules_nonexistent_toplevel_package.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Could not locate an appropriate location to create migrations package some.nonexistent.path. Make sure the toplevel package exists and can be imported."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ((xmsg)))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) (0))
                xtest_makemigrations_interactive_by_default.write
                  [xself]
                    memory > xmerge_file
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("builtins.input") ((((unsupported)).apply (((xmock).xMock)) ("N"))))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_conflict"))) ((xmigration_dir)))
                              seq
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ("merge") (TRUE) ((xout)))
                                xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge.py"))
                                bogusForceDataize.write ((((xself).xassertfalse)).apply ((((((xos).xpath).xexists)).apply ((xmerge_file)))))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Created new merge migration") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_unspecified_app_with_conflict_no_merge.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_changes"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xfalse)) (0))
                xtest_makemigrations_unspecified_app_with_conflict_merge.write
                  [xself]
                    memory > xmerge_file
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("builtins.input") ((((unsupported)).apply (((xmock).xMock)) ("y"))))))
                          seq
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrated_app"))) ((xmigration_dir)))
                              seq
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrated_app") ("merge") (TRUE) (TRUE) ((xout)))
                                xmerge_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_merge.py"))
                                bogusForceDataize.write ((((xself).xassertfalse)).apply ((((((xos).xpath).xexists)).apply ((xmerge_file)))))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("No conflicts detected to merge.") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_merge_dont_output_dependency_operations.write
                  [xself]
                    memory > xout
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xmock).xpatch)).apply ("builtins.input") ((((unsupported)).apply (((xmock).xMock)) ("N"))))))
                          seq
                            xout.write ((((xio).xStringIO)).apply)
                            (((unsupported)).apply (((((xmock).xpatch)).apply ("django.core.management.color.supports_color") ((((unsupported)).apply ((xfalse)))))))
                              (((unsupported)).apply ((xcall_command)) ("makemigrations") ("conflicting_app_with_dependencies") (TRUE) (TRUE) ((xout)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((((((xout).xgetvalue)).apply).xlower)).apply)) ("merging conflicting_app_with_dependenciesn  branch 0002_conflicting_secondn    - create model somethingn  branch 0002_secondn    - delete model tribblen    - remove field silly_field from authorn    - add field rating to authorn    - create model booknnmerging will only work if the operations printed above do not conflictnwith each other (working on different fields or models)nshould these migration branches be merged? [y/n] "))
                xtest_makemigrations_with_custom_name.write
                  [xself]
                    memory > xcontent
                    memory > xcmd
                    memory > xmigration_name_0001
                    memory > xtemplate_str
                    memory > xmigration_name_0002
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)) ((xmigration_dir)))
                          seq
                            xcmd.write
                              [xmigration_count xmigration_name]
                                memory > xmigration_file
                                memory > xcontent
                                seq > @
                                  (((unsupported)).apply)
                                    bogusForceDataize.write (((xcall_command)).apply ("makemigrations") ("migrations") ("--verbosity") ("0") ("--name") ((xmigration_name)) ((((unsupported)).apply ((xargs)))))
                                    xmigration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) (("%s_%s.py".mod (((unsupported)).apply ((xmigration_count)) ((xmigration_name))))))
                                    bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xmigration_file)))))
                                    (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xmigration_file)) ("utf-8"))) ((xfp)))
                                      seq
                                        xcontent.write ((((xfp).xread)).apply)
                                        xcontent.write ((((xcontent).xreplace)).apply (" ") (""))
                                    (((unsupported)).apply ((xcontent)))
                            xmigration_name_0001.write "my_initial_migration"
                            xcontent.write (((xcmd)).apply ("0001") ((xmigration_name_0001)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((xHAS_BLACK).if "dependencies=[]" "dependencies=[n]")) ((xcontent)))
                            (((xhasattr)).apply ((ximportlib)) ("invalidate_caches")).if
                              bogusForceDataize.write ((((ximportlib).xinvalidate_caches)).apply)
                            xmigration_name_0002.write "my_custom_migration"
                            xcontent.write (((xcmd)).apply ("0002") ((xmigration_name_0002)) ("--empty"))
                            (xHAS_BLACK).if
                              xtemplate_str.write "dependencies=[n(\"migrations\",\"0001_%s\"),n]"
                              xtemplate_str.write "dependencies=[n('migrations','0001_%s'),n]"
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((xtemplate_str).mod (xmigration_name_0001))) ((xcontent)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply (((xHAS_BLACK).if "operations=[]" "operations=[n]")) ((xcontent)))
                xtest_makemigrations_with_invalid_custom_name.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "The migration name must be a valid Python identifier."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          bogusForceDataize.write (((xcall_command)).apply ("makemigrations") ("migrations") ("--name") ("invalid name") ("--empty"))
                xtest_makemigrations_check.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("--check") ("migrations") (0))
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_changes"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("--check") ("migrations") (0))
                xtest_makemigrations_migration_path_output.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        bogusForceDataize.write ((((xapps).xregister_model)).apply ("migrations") ((xUnicodeModel)))
                        (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xout)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))) (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_migration_path_output_valueerror.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)) ((xmigration_dir)))
                          (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("os.path.relpath") ((xValueError)))))
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))) (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_inconsistent_history.write
                  [xself]
                    memory > xrecorder
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xrecorder.write (((xMigrationRecorder)).apply ((xconnection)))
                        bogusForceDataize.write ((((xrecorder).xrecord_applied)).apply ("migrations") ("0002_second"))
                        xmsg.write "Migration migrations.0002_second is applied before its dependency migrations.0001_initial"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xInconsistentMigrationHistory)) ((xmsg)))))
                            bogusForceDataize.write (((xcall_command)).apply ("makemigrations"))
                xtest_makemigrations_inconsistent_history_db_failure.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Got an error checking a consistent migration history performed for database connection 'default': could not connect to server"
                        (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("django.db.migrations.loader.MigrationLoader.check_consistent_history") ((((xOperationalError)).apply ("could not connect to server"))))))
                          (((unsupported)).apply (((((xself).xtemporary_migration_module)).apply)))
                            seq
                              (((unsupported)).apply (((((xself).xassertWarns)).apply ((xRuntimeWarning)))) ((xcm)))
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") (0))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xstr)).apply (((xcm).xwarning)))) ((xmsg)))
                xtest_makemigrations_auto_now_add_interactive.write
                  [xself]
                    memory > xprompt_output
                    memory > xapp_label
                    memory > xcreation_date
                    memory > xinput_msg
                    memory > xprompt_stdout
                    memory > xtitle
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xtitle.write (((unsupported)).apply (((xmodels).xCharField)) (255))
                            xcreation_date.write (((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        xinput_msg.write "It is impossible to add the field 'creation_date' with 'auto_now_add=True' to entry without providing a default. This is because the database needs something to populate existing rows.n 1) Provide a one-off default now which will be set on all existing rowsn 2) Quit and manually define a default value in models.py."
                        xprompt_stdout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_auto_now_add"))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE) ((xprompt_stdout)))
                        xprompt_output.write ((((xprompt_stdout).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertIn)).apply ((xinput_msg)) ((xprompt_output)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Please enter the default value as valid Python.") ((xprompt_output)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Accept the default 'timezone.now' by pressing 'Enter' or provide another value.") ((xprompt_output)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Type 'exit' to exit this prompt") ((xprompt_output)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Add field creation_date to entry") ((xprompt_output)))
                xtest_makemigrations_auto_now_add_interactive_quit.write
                  [xself xmock_input]
                    memory > xpublishing_date
                    memory > xapp_label
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xpublishing_date.write (((unsupported)).apply (((xmodels).xDateField)) (TRUE))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          (((unsupported)).apply ((((xcaptured_stdout)).apply)))
                            (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                              (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                xtest_makemigrations_non_interactive_auto_now_add_addition.write
                  [xself]
                    memory > xcreation_date
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xcreation_date.write (((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_auto_now_add"))))
                          (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))) ((((xcaptured_stdout)).apply)) ((xout)))
                            (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xfalse)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Field 'creation_date' on model 'entry' not migrated: it is impossible to add a field with 'auto_now_add=True' without specifying a default.") (((((xout).xgetvalue)).apply)))
                xtest_makemigrations_interactive_unique_callable_default_addition.write
                  [xself]
                    memory > xout_value
                    memory > xapp_label
                    memory > xversion
                    memory > xinput_msg
                    memory > xcreated
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xcreated.write (((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE) (((xtimezone).xnow)))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        xversion.write (((xget_docs_version)).apply)
                        xinput_msg.write "Callable default on unique field book.created will not generate unique values upon migrating.nPlease choose how to proceed:n 1) Continue making this migration as the first step in writing a manual migration to generate unique values described here: https://docs.djangoproject.com/en/{version}/howto/writing-migrations/#migrations-that-add-unique-fields.n 2) Quit and edit field options in models.py.n"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          seq
                            (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.input") ("2"))))
                              (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)) (((((xself).xassertRaises)).apply ((xSystemExit)))))
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                            xout_value.write ((((xout).xgetvalue)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xinput_msg)) ((xout_value)))
                            bogusForceDataize.write ((((xself).xassertNotIn)).apply ("Add field created to book") ((xout_value)))
                            (((unsupported)).apply ((((unsupported)).apply (((xmock).xpatch)) ("builtins.input") ("1"))))
                              (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                                (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") (TRUE))
                            xout_value.write ((((xout).xgetvalue)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ((xinput_msg)) ((xout_value)))
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Add field created to book") ((xout_value)))
                xtest_makemigrations_non_interactive_unique_callable_default_addition.write
                  [xself]
                    memory > xout_value
                    memory > xcreated
                    memory > xapp_label
                    seq > @
                      seq
                        (((unsupported)).apply (((xmodels).xModel)))
                          seq
                            xcreated.write (((unsupported)).apply (((xmodels).xDateTimeField)) (TRUE) (((xtimezone).xnow)))
                            (((unsupported)).apply)
                              xapp_label.write "migrations"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          seq
                            (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                              (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xfalse)))
                            xout_value.write ((((xout).xgetvalue)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("Add field created to book") ((xout_value)))
                xtest_makemigrations_continues_number_sequence_after_squash.write
                  [xself]
                    memory > xout_value
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_squashed"))))
                          seq
                            (((unsupported)).apply ((((xcaptured_stdout)).apply)) ((xout)))
                              (((unsupported)).apply ((xcall_command)) ("makemigrations") ("migrations") ((xfalse)) (TRUE))
                            xout_value.write ((((xout).xgetvalue)).apply)
                            bogusForceDataize.write ((((xself).xassertIn)).apply ("0003_auto") ((xout_value)))
            (((unsupported)).apply ((xMigrationTestBase)))
              seq
                (((unsupported)).apply)
                xtest_squashmigrations_squashes.write
                  [xself]
                    memory > xout
                    memory > xsquashed_migration_file
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0002") ((xfalse)) ((xout)) (TRUE))
                            xsquashed_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_squashed_0002_second.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xsquashed_migration_file)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) (("Will squash the following migrations:n - 0001_initialn - 0002_secondnOptimizing...n  Optimized from 8 operations to 2 operations.nCreated new squashed migration %sn  You should commit this migration but leave the old ones in place;n  the new migration will be used for new installs. Once you are suren  all instances of the codebase have applied the migrations you squashed,n  you can delete them.n".mod (xsquashed_migration_file))))
                xtest_squashmigrations_initial_attribute.write
                  [xself]
                    memory > xsquashed_migration_file
                    memory > xcontent
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))) ((xmigration_dir)))
                        seq
                          (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0002") ((xfalse)) (0))
                          xsquashed_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_squashed_0002_second.py"))
                          (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xsquashed_migration_file)) ("utf-8"))) ((xfp)))
                            seq
                              xcontent.write ((((xfp).xread)).apply)
                              bogusForceDataize.write ((((xself).xassertIn)).apply ("initial = True") ((xcontent)))
                xtest_squashmigrations_optimizes.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0002") ((xfalse)) (1) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Optimized from 8 operations to 2 operations.") (((((xout).xgetvalue)).apply)))
                xtest_ticket_23799_squashmigrations_no_optimize.write
                  [xself]
                    memory > xout
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0002") ((xfalse)) (1) (TRUE) ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply ("Skipping optimization") (((((xout).xgetvalue)).apply)))
                xtest_squashmigrations_valid_start.write
                  [xself]
                    memory > xout
                    memory > xtest_str
                    memory > xsquashed_migration_file
                    memory > xcontent
                    seq > @
                      seq
                        (((unsupported)).apply)
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_changes"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0002") ("0003") ((xfalse)) (1) ((xout)))
                            xsquashed_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0002_second_squashed_0003_third.py"))
                            (((unsupported)).apply ((((unsupported)).apply ((xopen)) ((xsquashed_migration_file)) ("utf-8"))) ((xfp)))
                              seq
                                xcontent.write ((((xfp).xread)).apply)
                                (xHAS_BLACK).if
                                  xtest_str.write "        (\"migrations\", \"0001_initial\")"
                                  xtest_str.write "        ('migrations', '0001_initial')"
                                bogusForceDataize.write ((((xself).xassertIn)).apply ((xtest_str)) ((xcontent)))
                                bogusForceDataize.write ((((xself).xassertNotIn)).apply ("initial = True") ((xcontent)))
                        xout.write ((((xout).xgetvalue)).apply)
                        bogusForceDataize.write ((((xself).xassertNotIn)).apply (" - 0001_initial") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (" - 0002_second") ((xout)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (" - 0003_third") ((xout)))
                xtest_squashmigrations_invalid_start.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_no_changes"))))
                          seq
                            xmsg.write "The migration 'migrations.0003_third' cannot be found. Maybe it comes after the migration 'migrations.0002_second'"
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                              (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0003") ("0002") ((xfalse)) (0))
                xtest_squashed_name_with_start_migration_name.write
                  [xself]
                    memory > xsquashed_migration_file
                    memory > xsquashed_name
                    seq > @
                      seq
                        unsupported
                        xsquashed_name.write "squashed_name"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0001") ("0002") ((xsquashed_name)) ((xfalse)) (0))
                            xsquashed_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) (("0001_%s.py".mod (xsquashed_name))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xsquashed_migration_file)))))
                xtest_squashed_name_without_start_migration_name.write
                  [xself]
                    memory > xsquashed_migration_file
                    memory > xsquashed_name
                    seq > @
                      seq
                        unsupported
                        xsquashed_name.write "squashed_name"
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0001") ((xsquashed_name)) ((xfalse)) (0))
                            xsquashed_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) (("0001_%s.py".mod (xsquashed_name))))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xsquashed_migration_file)))))
                xtest_squashed_name_exists.write
                  [xself]
                    memory > xmsg
                    seq > @
                      seq
                        xmsg.write "Migration 0001_initial already exists. Use a different name."
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))))
                          (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                            (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0001") ("0002") ("initial") ((xfalse)) (0))
                xtest_squashmigrations_manual_porting.write
                  [xself]
                    memory > xblack_warning
                    memory > xout
                    memory > xsquashed_migration_file
                    seq > @
                      seq
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_manual_porting"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("squashmigrations") ("migrations") ("0002") ((xfalse)) ((xout)) (TRUE))
                            xsquashed_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_squashed_0002_second.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xsquashed_migration_file)))))
                        xblack_warning.write ""
                        (xHAS_BLACK).if
                          xblack_warning.write "Squashed migration couldn't be formatted using the \"black\" command. You can call it manually.n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) (("Will squash the following migrations:n - 0001_initialn - 0002_secondnOptimizing...n  No optimizations possible.nCreated new squashed migration {squashed_migration_file}n  You should commit this migration but leave the old ones in place;n  the new migration will be used for new installs. Once you are suren  all instances of the codebase have applied the migrations you squashed,n  you can delete them.nManual porting requiredn  Your migrations contained functions that must be manually copied over,n  as we could not safely copy their implementation.n  See the comment at the top of the squashed migration for details.n".add (xblack_warning))))
            (((unsupported)).apply ((xTestCase)))
              seq
                (((unsupported)).apply)
                xnonexistent_app_error.write "No installed app with label 'nonexistent_app'."
                xdid_you_mean_auth_error.write "No installed app with label 'django.contrib.auth'. Did you mean 'auth'?"
                xtest_makemigrations_nonexistent_app_label.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("nonexistent_app") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xnonexistent_app_error)) (((((xerr).xgetvalue)).apply)))
                xtest_makemigrations_app_name_specified_as_label.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                          (((unsupported)).apply ((xcall_command)) ("makemigrations") ("django.contrib.auth") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xdid_you_mean_auth_error)) (((((xerr).xgetvalue)).apply)))
                xtest_migrate_nonexistent_app_label.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) (((xself).xnonexistent_app_error)))))
                        bogusForceDataize.write (((xcall_command)).apply ("migrate") ("nonexistent_app"))
                xtest_migrate_app_name_specified_as_label.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) (((xself).xdid_you_mean_auth_error)))))
                        bogusForceDataize.write (((xcall_command)).apply ("migrate") ("django.contrib.auth"))
                xtest_showmigrations_nonexistent_app_label.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                          (((unsupported)).apply ((xcall_command)) ("showmigrations") ("nonexistent_app") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xnonexistent_app_error)) (((((xerr).xgetvalue)).apply)))
                xtest_showmigrations_app_name_specified_as_label.write
                  [xself]
                    memory > xerr
                    seq > @
                      seq
                        xerr.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                          (((unsupported)).apply ((xcall_command)) ("showmigrations") ("django.contrib.auth") ((xerr)))
                        bogusForceDataize.write ((((xself).xassertIn)).apply (((xself).xdid_you_mean_auth_error)) (((((xerr).xgetvalue)).apply)))
                xtest_sqlmigrate_nonexistent_app_label.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) (((xself).xnonexistent_app_error)))))
                        bogusForceDataize.write (((xcall_command)).apply ("sqlmigrate") ("nonexistent_app") ("0002"))
                xtest_sqlmigrate_app_name_specified_as_label.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) (((xself).xdid_you_mean_auth_error)))))
                        bogusForceDataize.write (((xcall_command)).apply ("sqlmigrate") ("django.contrib.auth") ("0002"))
                xtest_squashmigrations_nonexistent_app_label.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) (((xself).xnonexistent_app_error)))))
                        bogusForceDataize.write (((xcall_command)).apply ("squashmigrations") ("nonexistent_app") ("0002"))
                xtest_squashmigrations_app_name_specified_as_label.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) (((xself).xdid_you_mean_auth_error)))))
                        bogusForceDataize.write (((xcall_command)).apply ("squashmigrations") ("django.contrib.auth") ("0002"))
                xtest_optimizemigration_nonexistent_app_label.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) (((xself).xnonexistent_app_error)))))
                        bogusForceDataize.write (((xcall_command)).apply ("optimizemigration") ("nonexistent_app") ("0002"))
                xtest_optimizemigration_app_name_specified_as_label.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) (((xself).xdid_you_mean_auth_error)))))
                        bogusForceDataize.write (((xcall_command)).apply ("optimizemigration") ("django.contrib.auth") ("0002"))
            (((unsupported)).apply ((xMigrationTestBase)))
              seq
                xtest_no_optimization_possible.write
                  [xself]
                    memory > xout
                    memory > xmigration_file
                    seq > @
                      seq
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("optimizemigration") ("migrations") ("0002") ((xout)) (TRUE))
                            xmigration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0002_second.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xmigration_file)))))
                            (((unsupported)).apply ((xcall_command)) ("optimizemigration") ("migrations") ("0002") ((xout)) (TRUE) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ("No optimizations possible.n"))
                xtest_optimization.write
                  [xself]
                    memory > xinitial_migration_file
                    memory > xout
                    memory > xcontent
                    seq > @
                      seq
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("optimizemigration") ("migrations") ("0001") ((xout)) (TRUE))
                            xinitial_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xinitial_migration_file)))))
                            (((unsupported)).apply ((((xopen)).apply ((xinitial_migration_file)))) ((xfp)))
                              seq
                                xcontent.write ((((xfp).xread)).apply)
                                bogusForceDataize.write ((((xself).xassertIn)).apply (((xHAS_BLACK).if "(\"bool\", models.BooleanField" "('bool', models.BooleanField")) ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ("Optimizing from 4 operations to 2 operations.nOptimized migration {initial_migration_file}n"))
                xtest_optimization_no_verbosity.write
                  [xself]
                    memory > xinitial_migration_file
                    memory > xout
                    memory > xcontent
                    seq > @
                      seq
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("optimizemigration") ("migrations") ("0001") ((xout)) (TRUE) (0))
                            xinitial_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0001_initial.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xinitial_migration_file)))))
                            (((unsupported)).apply ((((xopen)).apply ((xinitial_migration_file)))) ((xfp)))
                              seq
                                xcontent.write ((((xfp).xread)).apply)
                                bogusForceDataize.write ((((xself).xassertIn)).apply (((xHAS_BLACK).if "(\"bool\", models.BooleanField" "('bool', models.BooleanField")) ((xcontent)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) (""))
                xtest_creates_replace_migration_manual_porting.write
                  [xself]
                    memory > xblack_warning
                    memory > xout
                    memory > xcontent
                    memory > xoptimized_migration_file
                    seq > @
                      seq
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_manual_porting"))) ((xmigration_dir)))
                          seq
                            (((unsupported)).apply ((xcall_command)) ("optimizemigration") ("migrations") ("0003") ((xout)) (TRUE))
                            xoptimized_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0003_third_optimized.py"))
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xos).xpath).xexists)).apply ((xoptimized_migration_file)))))
                            (((unsupported)).apply ((((xopen)).apply ((xoptimized_migration_file)))) ((xfp)))
                              seq
                                xcontent.write ((((xfp).xread)).apply)
                                bogusForceDataize.write ((((xself).xassertIn)).apply ("replaces = [") ((xcontent)))
                        xblack_warning.write ""
                        (xHAS_BLACK).if
                          xblack_warning.write "Optimized migration couldn't be formatted using the \"black\" command. You can call it manually.n"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ((("Optimizing from 3 operations to 2 operations.nManual porting requiredn  Your migrations contained functions that must be manually copied over,n  as we could not safely copy their implementation.n  See the comment at the top of the optimized migration for details.n".add (xblack_warning)).add "Optimized migration {optimized_migration_file}n")))
                xtest_fails_squash_migration_manual_porting.write
                  [xself]
                    memory > xout
                    memory > xmsg
                    memory > xoptimized_migration_file
                    seq > @
                      seq
                        xout.write ((((xio).xStringIO)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xtemporary_migration_module)) ("migrations.test_migrations_manual_porting"))) ((xmigration_dir)))
                          seq
                            xmsg.write "Migration will require manual porting but is already a squashed migration.nTransition to a normal migration first: https://docs.djangoproject.com/en/dev/topics/migrations/#squashing-migrations"
                            (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                              (((unsupported)).apply ((xcall_command)) ("optimizemigration") ("migrations") ("0004") ((xout)))
                            xoptimized_migration_file.write (((((xos).xpath).xjoin)).apply ((xmigration_dir)) ("0004_fourth_optimized.py"))
                            bogusForceDataize.write ((((xself).xassertfalse)).apply ((((((xos).xpath).xexists)).apply ((xoptimized_migration_file)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xout).xgetvalue)).apply)) ("Optimizing from 3 operations to 2 operations.n"))
                xtest_optimizemigration_check.write
                  [xself]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xSystemExit)))))
                          (((unsupported)).apply ((xcall_command)) ("optimizemigration") ("--check") ("migrations") ("0001") (0))
                        (((unsupported)).apply ((xcall_command)) ("optimizemigration") ("--check") ("migrations") ("0002") (0))
                xtest_app_without_migrations.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "App 'unmigrated_app_simple' does not have migrations."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          bogusForceDataize.write (((xcall_command)).apply ("optimizemigration") ("unmigrated_app_simple") ("0001"))
                xtest_ambigious_prefix.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "More than one migration matches 'a' in app 'migrations'. Please be more specific."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          bogusForceDataize.write (((xcall_command)).apply ("optimizemigration") ("migrations") ("a"))
                xtest_unknown_prefix.write
                  [xself]
                    memory > xmsg
                    seq > @
                      (((unsupported)).apply)
                        xmsg.write "Cannot find a migration matching 'nonexistent' from app 'migrations'."
                        (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xCommandError)) ((xmsg)))))
                          bogusForceDataize.write (((xcall_command)).apply ("optimizemigration") ("migrations") ("nonexistent"))