memory > xarray
memory > xc
memory > xlist
memory > xValueError
memory > xstr
memory > xb
memory > xbacktick
memory > xBinASCIITest
memory > xi
memory > xfb
memory > xgetattr
memory > xmap
memory > xfunc
memory > xrange
memory > xbytearray
memory > x_
memory > xmax
memory > xbinascii
memory > xerr
memory > xset
memory > xint
memory > xre
memory > xException
memory > xhasattr
memory > xissubclass
memory > xbytes
memory > xname
memory > xzip
memory > xunittest
memory > xfa
memory > xmemoryview
memory > xline
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_binascii
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_functions
        memory > xtest_rle
        memory > xtest_hex_separator
        memory > xtest_exceptions
        memory > xtest_base64valid
        memory > xtest_b2a_base64_newline
        memory > xtest_empty_string
        memory > xa2b_functions
        memory > xtest_hex
        memory > xtest_qp
        memory > xtest_hqx
        memory > xtest_returned_value
        memory > xtest_crc32
        memory > xb2a_functions
        memory > xtest_base64invalid
        memory > xtest_uu
        memory > xtest_base64errors
        memory > xsetUp
        memory > xtest_crc_hqx
        memory > xtest_unicode_b2a
        memory > xtest_unicode_a2b
        memory > xtype2test
        memory > xrawdata
        memory > xall_functions
        seq > @
          seq
            unsupported
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xb2a_functions.write (((unsupported)).apply ("b2a_base64") ("b2a_hex") ("b2a_hqx") ("b2a_qp") ("b2a_uu") ("hexlify") ("rlecode_hqx"))
            xa2b_functions.write (((unsupported)).apply ("a2b_base64") ("a2b_hex") ("a2b_hqx") ("a2b_qp") ("a2b_uu") ("unhexlify") ("rledecode_hqx"))
            xall_functions.write (((xa2b_functions).add (xb2a_functions)).add (((unsupported)).apply ("crc32") ("crc_hqx")))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtype2test.write (xbytes)
                xrawdata.write "The quick brown fox jumps over the lazy dog.rn"
                (((unsupported)).apply ((xrawdata)) ((((xbytes)).apply ((((xrange)).apply (256))))))
                (((unsupported)).apply ((xrawdata)) ("rnHello world.n"))
                xsetUp.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((xself).xdata)) (((((xself).xtype2test)).apply (((xself).xrawdata)))))
                xtest_exceptions.write
                  [xself]
                    seq > @
                      seq
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xbinascii).xError)) ((xException)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xissubclass)).apply (((xbinascii).xIncomplete)) ((xException)))))
                xtest_functions.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((xname)) ((xall_functions)))
                        seq
                          bogusForceDataize.write ((((xself).xassertTrue)).apply ((((xhasattr)).apply ((((xgetattr)).apply ((xbinascii)) ((xname)))) ("__call__"))))
                          bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xgetattr)).apply ((xbinascii)) ((xname)))))
                xtest_returned_value.write
                  [xself]
                    memory > xa2b
                    memory > xMAX_ALL
                    memory > xraw
                    memory > xres
                    memory > xb2a
                    memory > xa
                    seq > @
                      seq
                        xMAX_ALL.write 45
                        xraw.write (((unsupported)).apply (((xself).xrawdata)) ((((unsupported)).apply ((xMAX_ALL)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfa)) ((xfb)))) ((((xzip)).apply ((xa2b_functions)) ((xb2a_functions)))))
                          seq
                            xa2b.write (((xgetattr)).apply ((xbinascii)) ((xfa)))
                            xb2a.write (((xgetattr)).apply ((xbinascii)) ((xfb)))
                            (((unsupported)).apply ((xException)))
                              seq
                                xa.write (((xb2a)).apply (((((xself).xtype2test)).apply ((xraw)))))
                                xres.write (((xa2b)).apply (((((xself).xtype2test)).apply ((xa)))))
                              bogusForceDataize.write ((((xself).xfail)).apply (((("{}/{} conversion raises {!r}".xformat)).apply ((xfb)) ((xfa)) ((xerr)))))
                            ((xfb).eq "b2a_hqx").if
                              (((unsupported)).apply ((((unsupported)).apply ((xres)) ((x_)))) ((xres)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((xraw)) (((("{}/{} conversion: {!r} != {!r}".xformat)).apply ((xfb)) ((xfa)) ((xres)) ((xraw)))))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xres)) ((xbytes)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xa)) ((xbytes)))
                            bogusForceDataize.write ((((xself).xassertLess)).apply ((((xmax)).apply ((xa)))) (128))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xbinascii).xcrc_hqx)).apply ((xraw)) (0))) ((xint)))
                        bogusForceDataize.write ((((xself).xassertIsInstance)).apply (((((xbinascii).xcrc32)).apply ((xraw)))) ((xint)))
                xtest_base64valid.write
                  [xself]
                    memory > xlines
                    memory > xMAX_BASE64
                    memory > xb
                    memory > xres
                    memory > xa
                    seq > @
                      seq
                        xMAX_BASE64.write 57
                        xlines.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (0) ((((xlen)).apply (((xself).xrawdata)))) ((xMAX_BASE64)))))
                          seq
                            xb.write ((((xself).xtype2test)).apply ((((unsupported)).apply (((xself).xrawdata)) ((((unsupported)).apply ((xi)) (((xi).add (xMAX_BASE64))))))))
                            xa.write ((((xbinascii).xb2a_base64)).apply ((xb)))
                            bogusForceDataize.write ((((xlines).xappend)).apply ((xa)))
                        xres.write (xbytes)
                        (((unsupported)).apply ((xline)) ((xlines)))
                          seq
                            xa.write ((((xself).xtype2test)).apply ((xline)))
                            xb.write ((((xbinascii).xa2b_base64)).apply ((xa)))
                            (((unsupported)).apply ((xres)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (((xself).xrawdata)))
                xtest_base64invalid.write
                  [xself]
                    memory > xlines
                    memory > xaddnoise
                    memory > xMAX_BASE64
                    memory > xfillers
                    memory > xb
                    memory > xvalid
                    memory > xres
                    memory > xa
                    seq > @
                      seq
                        xMAX_BASE64.write 57
                        xlines.write (((unsupported)).apply)
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (0) ((((xlen)).apply (((xself).xdata)))) ((xMAX_BASE64)))))
                          seq
                            xb.write ((((xself).xtype2test)).apply ((((unsupported)).apply (((xself).xrawdata)) ((((unsupported)).apply ((xi)) (((xi).add (xMAX_BASE64))))))))
                            xa.write ((((xbinascii).xb2a_base64)).apply ((xb)))
                            bogusForceDataize.write ((((xlines).xappend)).apply ((xa)))
                        xfillers.write (xbytearray)
                        xvalid.write "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/"
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (256))))
                          (((unsupported)).apply ((xi)) ((xvalid))).if
                            bogusForceDataize.write ((((xfillers).xappend)).apply ((xi)))
                        xaddnoise.write
                          [xline]
                            memory > xres
                            memory > xnoise
                            memory > xratio
                            seq > @
                              seq
                                xnoise.write (xfillers)
                                xratio.write (((unsupported)).apply ((((xlen)).apply ((xline)))) ((((xlen)).apply ((xnoise)))))
                                xres.write (xbytearray)
                                while.
                                  ((xline).and (xnoise))
                                  [unused]
                                    seq > @
                                      seq
                                        ((((unsupported)).apply ((((xlen)).apply ((xline)))) ((((xlen)).apply ((xnoise))))).greater (xratio)).if
                                          (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xline)))) ((((unsupported)).apply ((((unsupported)).apply ((xline)) (0))) ((((unsupported)).apply ((xline)) ((((unsupported)).apply (1))))))))
                                          (((unsupported)).apply ((((unsupported)).apply ((xc)) ((xnoise)))) ((((unsupported)).apply ((((unsupported)).apply ((xnoise)) (0))) ((((unsupported)).apply ((xnoise)) ((((unsupported)).apply (1))))))))
                                        bogusForceDataize.write ((((xres).xappend)).apply ((xc)))
                                (((unsupported)).apply ((((xres).add (xnoise)).add (xline))))
                        xres.write (xbytearray)
                        (((unsupported)).apply ((xline)) ((((xmap)).apply ((xaddnoise)) ((xlines)))))
                          seq
                            xa.write ((((xself).xtype2test)).apply ((xline)))
                            xb.write ((((xbinascii).xa2b_base64)).apply ((xa)))
                            (((unsupported)).apply ((xres)) ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (((xself).xrawdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xa2b_base64)).apply (((((xself).xtype2test)).apply ((xfillers)))))) (""))
                xtest_base64errors.write
                  [xself]
                    memory > xassertInvalidLength
                    memory > xassertIncorrectPadding
                    seq > @
                      seq
                        xassertIncorrectPadding.write
                          [xdata]
                            seq > @
                              (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xbinascii).xError)) ("(?i)Incorrect padding"))))
                                bogusForceDataize.write ((((xbinascii).xa2b_base64)).apply (((((xself).xtype2test)).apply ((xdata)))))
                        bogusForceDataize.write (((xassertIncorrectPadding)).apply ("ab"))
                        bogusForceDataize.write (((xassertIncorrectPadding)).apply ("ab="))
                        bogusForceDataize.write (((xassertIncorrectPadding)).apply ("abc"))
                        bogusForceDataize.write (((xassertIncorrectPadding)).apply ("abcdef"))
                        bogusForceDataize.write (((xassertIncorrectPadding)).apply ("abcdef="))
                        bogusForceDataize.write (((xassertIncorrectPadding)).apply ("abcdefg"))
                        bogusForceDataize.write (((xassertIncorrectPadding)).apply ("a=b="))
                        bogusForceDataize.write (((xassertIncorrectPadding)).apply ("anb="))
                        xassertInvalidLength.write
                          [xdata]
                            memory > xn_data_chars
                            memory > xexpected_errmsg_re
                            seq > @
                              seq
                                xn_data_chars.write (((xlen)).apply (((((xre).xsub)).apply ("[^A-Za-z0-9/+]") ("") ((xdata)))))
                                xexpected_errmsg_re.write ("(?i)Invalid.+number of data characters.+".add (((xstr)).apply ((xn_data_chars))))
                                (((unsupported)).apply (((((xself).xassertRaisesRegex)).apply (((xbinascii).xError)) ((xexpected_errmsg_re)))))
                                  bogusForceDataize.write ((((xbinascii).xa2b_base64)).apply (((((xself).xtype2test)).apply ((xdata)))))
                        bogusForceDataize.write (((xassertInvalidLength)).apply ("a"))
                        bogusForceDataize.write (((xassertInvalidLength)).apply ("a="))
                        bogusForceDataize.write (((xassertInvalidLength)).apply ("a=="))
                        bogusForceDataize.write (((xassertInvalidLength)).apply ("a==="))
                        bogusForceDataize.write (((xassertInvalidLength)).apply (("a".mul 5)))
                        bogusForceDataize.write (((xassertInvalidLength)).apply (("a".mul ((4.mul 87).add 1))))
                        bogusForceDataize.write (((xassertInvalidLength)).apply ("AtBnC ??DE"))
                xtest_uu.write
                  [xself]
                    memory > xlines
                    memory > xb
                    memory > xMAX_UU
                    memory > xres
                    memory > xa
                    seq > @
                      seq
                        xMAX_UU.write 45
                        (((unsupported)).apply ((xbacktick)) ((((unsupported)).apply (TRUE) (FALSE))))
                          seq
                            xlines.write (((unsupported)).apply)
                            (((unsupported)).apply ((xi)) ((((xrange)).apply (0) ((((xlen)).apply (((xself).xdata)))) ((xMAX_UU)))))
                              seq
                                xb.write ((((xself).xtype2test)).apply ((((unsupported)).apply (((xself).xrawdata)) ((((unsupported)).apply ((xi)) (((xi).add (xMAX_UU))))))))
                                xa.write (((unsupported)).apply (((xbinascii).xb2a_uu)) ((xb)) ((xbacktick)))
                                bogusForceDataize.write ((((xlines).xappend)).apply ((xa)))
                            xres.write (xbytes)
                            (((unsupported)).apply ((xline)) ((xlines)))
                              seq
                                xa.write ((((xself).xtype2test)).apply ((xline)))
                                xb.write ((((xbinascii).xa2b_uu)).apply ((xa)))
                                (((unsupported)).apply ((xres)) ((xb)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (((xself).xrawdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xa2b_uu)).apply ("x7f"))) (("x00".mul 31)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xa2b_uu)).apply ("x80"))) (("x00".mul 32)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xa2b_uu)).apply ("xff"))) (("x00".mul 31)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xa2b_uu)) ("xffx00"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xa2b_uu)) ("!!!!"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xb2a_uu)) ((46.mul "!")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xb2a_uu)).apply ("x"))) ("!>   n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xb2a_uu)).apply (""))) (" n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xbinascii).xb2a_uu)) ("") (TRUE))) ("`n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xa2b_uu)).apply (" n"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xa2b_uu)).apply ("`n"))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xb2a_uu)).apply ("x00Cat"))) ("$ $-A=   n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xbinascii).xb2a_uu)) ("x00Cat") (TRUE))) ("$`$-A=```n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xa2b_uu)).apply ("$`$-A=```n"))) (((((xbinascii).xa2b_uu)).apply ("$ $-A=   n"))))
                        (((unsupported)).apply (((((xself).xassertRaises)).apply ((xTypeError)))))
                          bogusForceDataize.write ((((xbinascii).xb2a_uu)).apply ("") (TRUE))
                xtest_crc_hqx.write
                  [xself]
                    memory > xcrc
                    seq > @
                      seq
                        xcrc.write ((((xbinascii).xcrc_hqx)).apply (((((xself).xtype2test)).apply ("Test the CRC-32 of"))) (0))
                        xcrc.write ((((xbinascii).xcrc_hqx)).apply (((((xself).xtype2test)).apply (" this string."))) ((xcrc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcrc)) (14290))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbinascii).xcrc_hqx)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbinascii).xcrc_hqx)) (((((xself).xtype2test)).apply (""))))
                        (((unsupported)).apply ((xcrc)) ((((unsupported)).apply (0) (1) (4660) (74565) (305419896) ((1.neg)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xcrc_hqx)).apply (((((xself).xtype2test)).apply (""))) ((xcrc)))) (((xcrc).and 65535)))
                xtest_crc32.write
                  [xself]
                    memory > xcrc
                    seq > @
                      seq
                        xcrc.write ((((xbinascii).xcrc32)).apply (((((xself).xtype2test)).apply ("Test the CRC-32 of"))))
                        xcrc.write ((((xbinascii).xcrc32)).apply (((((xself).xtype2test)).apply (" this string."))) ((xcrc)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xcrc)) (1571220330))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbinascii).xcrc32)))
                xtest_hqx.write
                  [xself]
                    memory > xrle
                    memory > xres
                    memory > xa
                    seq > @
                      seq
                        xrle.write ((((xbinascii).xrlecode_hqx)).apply (((xself).xdata)))
                        xa.write ((((xbinascii).xb2a_hqx)).apply (((((xself).xtype2test)).apply ((xrle)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xb)) ((x_)))) (((((xbinascii).xa2b_hqx)).apply (((((xself).xtype2test)).apply ((xa)))))))
                        xres.write ((((xbinascii).xrledecode_hqx)).apply ((xb)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) (((xself).xrawdata)))
                xtest_rle.write
                  [xself]
                    memory > xencoded
                    memory > xdata
                    memory > xdecoded
                    seq > @
                      seq
                        xdata.write ((("a".mul 100).add "b").add ("c".mul 300))
                        xencoded.write ((((xbinascii).xrlecode_hqx)).apply ((xdata)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xencoded)) ("ax90dbcx90xffcx90-"))
                        xdecoded.write ((((xbinascii).xrledecode_hqx)).apply ((xencoded)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xdecoded)) ((xdata)))
                xtest_hex.write
                  [xself]
                    memory > xt
                    memory > xs
                    memory > xu
                    seq > @
                      seq
                        xs.write "{s005000000000worldi002000000000s005000000000helloi0010000000000"
                        xt.write ((((xbinascii).xb2a_hex)).apply (((((xself).xtype2test)).apply ((xs)))))
                        xu.write ((((xbinascii).xa2b_hex)).apply (((((xself).xtype2test)).apply ((xt)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xs)) ((xu)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xa2b_hex)) ((((unsupported)).apply ((xt)) ((((unsupported)).apply ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xa2b_hex)) (((((unsupported)).apply ((xt)) ((((unsupported)).apply ((1.neg))))).add "q")))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xa2b_hex)) ((((xbytes)).apply ((((unsupported)).apply (255) (255))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xa2b_hex)) ("0G"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xa2b_hex)) ("0g"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xa2b_hex)) ("G0"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply (((xbinascii).xError)) (((xbinascii).xa2b_hex)) ("g0"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xhexlify)).apply (((((xself).xtype2test)).apply ((xs)))))) ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xunhexlify)).apply (((((xself).xtype2test)).apply ((xt)))))) ((xu)))
                xtest_hex_separator.write
                  [xself]
                    memory > xexpected8
                    memory > xs
                    memory > xexpected1
                    seq > @
                      seq
                        unsupported
                        xs.write "{s005000000000worldi002000000000s005000000000helloi0010000000000"
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xhexlify)).apply (((((xself).xtype2test)).apply ((xs)))))) ((((((xs).xhex).xencode)).apply ("ascii"))))
                        xexpected8.write (((((((xs).xhex)).apply (".") (8)).xencode)).apply ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xhexlify)).apply (((((xself).xtype2test)).apply ((xs)))) (".") (8))) ((xexpected8)))
                        xexpected1.write (((((((xs).xhex)).apply (":")).xencode)).apply ("ascii"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xb2a_hex)).apply (((((xself).xtype2test)).apply ((xs)))) (":"))) ((xexpected1)))
                xtest_qp.write
                  [xself]
                    memory > xtype2test
                    memory > xb2a_qp
                    memory > xa2b_qp
                    seq > @
                      seq
                        xtype2test.write ((xself).xtype2test)
                        xa2b_qp.write ((xbinascii).xa2b_qp)
                        xb2a_qp.write ((xbinascii).xb2a_qp)
                        (((unsupported)).apply ((xa2b_qp)) ("") (FALSE))
                        (((unsupported)).apply ((xTypeError)))
                          bogusForceDataize.write (((xa2b_qp)).apply ("") ((((unsupported)).apply ((((unsupported)).apply (1) (1))))))
                          bogusForceDataize.write ((((xself).xfail)).apply ("binascii.a2b_qp(**{1:1}) didn't raise TypeError"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("="))))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("= "))))) ("= "))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=="))))) ("="))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=nAB"))))) ("AB"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=rnAB"))))) ("AB"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=rAB"))))) (""))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=rABnCD"))))) ("CD"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=AB"))))) ("xab"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=ab"))))) ("xab"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=AX"))))) ("=AX"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=XA"))))) ("=XA"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((unsupported)).apply ((((xtype2test)).apply ("=AB"))) ((((unsupported)).apply ((1.neg)))))))) ("=A"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("_"))))) ("_"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xa2b_qp)) ((((xtype2test)).apply ("_"))) (TRUE))) (" "))
                        (((unsupported)).apply (((xself).xassertRaises)) ((xTypeError)) ((xb2a_qp)) ("bar"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xa2b_qp)).apply ((((xtype2test)).apply ("=00rn=00"))))) ("x00rnx00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("xffrnxffnxff"))))) ("=FFrn=FFrn=FF"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ((("0".mul 75).add "xffrnxffrnxff")))))) ((("0".mul 75).add "=rn=FFrn=FFrn=FF")))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("x7f"))))) ("=7F"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("="))))) ("=3D"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("_"))))) ("_"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("_"))) (TRUE))) ("=5F"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x y"))) (TRUE))) ("x_y"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x "))) (TRUE))) ("x=20"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x y"))) (TRUE) (TRUE))) ("x=20y"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("xty"))) (TRUE))) ("xty"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply (" "))))) ("=20"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("t"))))) ("=09"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply (" x"))))) (" x"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("tx"))))) ("tx"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((unsupported)).apply ((((xtype2test)).apply (" x"))) ((((unsupported)).apply ((1.neg)))))))) ("=20"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((unsupported)).apply ((((xtype2test)).apply ("tx"))) ((((unsupported)).apply ((1.neg)))))))) ("=09"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("0"))))) ("=00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("0n"))))) ("=00n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("0n"))) (TRUE))) ("=00n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("x ytz"))))) ("x ytz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x ytz"))) (TRUE))) ("x=20y=09z"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x ytz"))) (FALSE))) ("x ytz"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("x nytn"))))) ("x=20ny=09n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x nytn"))) (TRUE))) ("x=20ny=09n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x nytn"))) (FALSE))) ("x =0Ayt=0A"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("x rytr"))))) ("x rytr"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x rytr"))) (TRUE))) ("x=20ry=09r"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x rytr"))) (FALSE))) ("x =0Dyt=0D"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("x rnytrn"))))) ("x=20rny=09rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x rnytrn"))) (TRUE))) ("x=20rny=09rn"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((xtype2test)).apply ("x rnytrn"))) (FALSE))) ("x =0D=0Ayt=0D=0A"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((unsupported)).apply ((((xtype2test)).apply ("x rn"))) ((((unsupported)).apply ((1.neg)))))))) ("x r"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((unsupported)).apply ((((xtype2test)).apply ("xtrn"))) ((((unsupported)).apply ((1.neg)))))))) ("xtr"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((unsupported)).apply ((((xtype2test)).apply ("x rn"))) ((((unsupported)).apply ((1.neg)))))) (TRUE))) ("x=20r"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((unsupported)).apply ((((xtype2test)).apply ("xtrn"))) ((((unsupported)).apply ((1.neg)))))) (TRUE))) ("x=09r"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((unsupported)).apply ((((xtype2test)).apply ("x rn"))) ((((unsupported)).apply ((1.neg)))))) (FALSE))) ("x =0D"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xb2a_qp)) ((((unsupported)).apply ((((xtype2test)).apply ("xtrn"))) ((((unsupported)).apply ((1.neg)))))) (FALSE))) ("xt=0D"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("."))))) ("=2E"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply (".n"))))) ("=2En"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply (".r"))))) ("=2Er"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply (".0"))))) ("=2E=00"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((xtype2test)).apply ("a.n"))))) ("a.n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xb2a_qp)).apply ((((unsupported)).apply ((((xtype2test)).apply (".a"))) ((((unsupported)).apply ((1.neg)))))))) ("=2E"))
                xtest_empty_string.write
                  [xself]
                    memory > xempty
                    memory > xf
                    seq > @
                      seq
                        xempty.write ((((xself).xtype2test)).apply (""))
                        (((unsupported)).apply ((xfunc)) ((xall_functions)))
                          seq
                            ((xfunc).eq "crc_hqx").if
                              seq
                                bogusForceDataize.write ((((xbinascii).xcrc_hqx)).apply ((xempty)) (0))
                                (((unsupported)).apply)
                            xf.write (((xgetattr)).apply ((xbinascii)) ((xfunc)))
                            (((unsupported)).apply ((xException)))
                              bogusForceDataize.write (((xf)).apply ((xempty)))
                              bogusForceDataize.write ((((xself).xfail)).apply (((("{}({!r}) raises {!r}".xformat)).apply ((xfunc)) ((xempty)) ((xerr)))))
                xtest_unicode_b2a.write
                  [xself]
                    seq > @
                      seq
                        (((unsupported)).apply ((xfunc)) ((((((xset)).apply ((xall_functions))).sub (((xset)).apply ((xa2b_functions)))).or (((unsupported)).apply ("rledecode_hqx")))))
                          (((unsupported)).apply ((xException)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((((xgetattr)).apply ((xbinascii)) ((xfunc)))) ("test"))
                            bogusForceDataize.write ((((xself).xfail)).apply (((("{}(\"test\") raises {!r}".xformat)).apply ((xfunc)) ((xerr)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) (((xbinascii).xcrc_hqx)) ("test") (0))
                xtest_unicode_a2b.write
                  [xself]
                    memory > xa2b
                    memory > xMAX_ALL
                    memory > xres
                    memory > xb2a
                    memory > xa
                    memory > xraw
                    memory > xbinary_res
                    seq > @
                      seq
                        xMAX_ALL.write 45
                        xraw.write (((unsupported)).apply (((xself).xrawdata)) ((((unsupported)).apply ((xMAX_ALL)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfa)) ((xfb)))) ((((xzip)).apply ((xa2b_functions)) ((xb2a_functions)))))
                          seq
                            ((xfa).eq "rledecode_hqx").if
                              (((unsupported)).apply)
                            xa2b.write (((xgetattr)).apply ((xbinascii)) ((xfa)))
                            xb2a.write (((xgetattr)).apply ((xbinascii)) ((xfb)))
                            (((unsupported)).apply ((xException)))
                              seq
                                xa.write (((xb2a)).apply (((((xself).xtype2test)).apply ((xraw)))))
                                xbinary_res.write (((xa2b)).apply ((xa)))
                                xa.write ((((xa).xdecode)).apply ("ascii"))
                                xres.write (((xa2b)).apply ((xa)))
                              bogusForceDataize.write ((((xself).xfail)).apply (((("{}/{} conversion raises {!r}".xformat)).apply ((xfb)) ((xfa)) ((xerr)))))
                            ((xfb).eq "b2a_hqx").if
                              seq
                                (((unsupported)).apply ((((unsupported)).apply ((xres)) ((x_)))) ((xres)))
                                (((unsupported)).apply ((((unsupported)).apply ((xbinary_res)) ((x_)))) ((xbinary_res)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((xraw)) (((("{}/{} conversion: {!r} != {!r}".xformat)).apply ((xfb)) ((xfa)) ((xres)) ((xraw)))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((xres)) ((xbinary_res)))
                            bogusForceDataize.write ((((xself).xassertIsInstance)).apply ((xres)) ((xbytes)))
                            bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) ((xa2b)) ("x80"))
                xtest_b2a_base64_newline.write
                  [xself]
                    memory > xb
                    seq > @
                      seq
                        xb.write ((((xself).xtype2test)).apply ("hello"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xbinascii).xb2a_base64)).apply ((xb)))) ("aGVsbG8=n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xbinascii).xb2a_base64)) ((xb)) (TRUE))) ("aGVsbG8=n"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xbinascii).xb2a_base64)) ((xb)) (FALSE))) ("aGVsbG8="))
            (((unsupported)).apply ((xBinASCIITest)))
              xtype2test.write
                [xself xs]
                  seq > @
                    (((unsupported)).apply (((((xarray).xarray)).apply ("B") ((((xlist)).apply ((xs)))))))
            (((unsupported)).apply ((xBinASCIITest)))
              xtype2test.write (xbytearray)
            (((unsupported)).apply ((xBinASCIITest)))
              xtype2test.write (xmemoryview)
            ((x__name__).eq "__main__").if
              unsupported