memory > xBaseStrTest
memory > xslen
memory > xmemuse
memory > xValueError
memory > xstr
memory > xTupleTest
memory > xrange
memory > xMemoryError
memory > xremainder
memory > xtype
memory > xBytearrayTest
memory > xchr
memory > xdir
memory > xhash
memory > xfilter
memory > xAttributeError
memory > xc
memory > xdivmod
memory > xIndexError
memory > xbytearray
memory > xf
memory > xset
memory > xrepr
memory > xint
memory > xoperator
memory > xi
memory > xsupport
memory > xsys
memory > xascii
memory > xbytes
memory > xtuple
memory > xitem
memory > xgetattr
memory > xBytesTest
memory > xiter
memory > xord
memory > xStrTest
memory > xname
memory > xunittest
memory > xobject
memory > xListTest
memory > xisinstance
memory > xlen
memory > xTypeError
memory > x__name__
[] > test_bigmem
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_repr_small
        memory > xbasic_test_inplace_repeat
        memory > xtest_main
        memory > xtest_translate
        memory > xtest_repeat_small
        memory > xtest_inplace_repeat_large
        memory > xtest_lstrip
        memory > xtest_center
        memory > xtest_islower
        memory > xtest_format
        memory > xtest_unicode_repr_wide
        memory > xbasic_test_concat
        memory > xtest_insert
        memory > xtest_extend_large
        memory > xtest_strip
        memory > xtest_rjust
        memory > xtest_encode_utf7
        memory > x_test_swapcase
        memory > xucs2_char_size
        memory > xtest_slice_and_getitem
        memory > xtest_inplace_concat_small
        memory > xtest_rstrip
        memory > xtest_decode
        memory > xtest_append
        memory > xtest_isdigit
        memory > xtest_repeat_large
        memory > xtest_index_and_slice
        memory > xtest_lower
        memory > xtest_inplace_repeat_small
        memory > xtest_concat_large
        memory > xtest_concat_small
        memory > xtest_title
        memory > xtest_from_2G_generator
        memory > xbasic_test_repeat
        memory > xtest_isalnum
        memory > xtest_hash
        memory > xascii_char_size
        memory > xtest_rfind
        memory > xtest_rindex
        memory > xtest_expandtabs
        memory > xtest_encode_utf32
        memory > xtest_index
        memory > xtest_extend_small
        memory > xtest_pop
        memory > xtest_istitle
        memory > xtest_split_small
        memory > xtest_from_almost_2G_generator
        memory > xtest_remove
        memory > xtest_split_large
        memory > xucs4_char_size
        memory > xsetUp
        memory > xtest_ljust
        memory > xtest_count
        memory > xtest_unicode_repr
        memory > xbasic_test_inplace_concat
        memory > x_test_capitalize
        memory > xtest_upper
        memory > xtest_repeat
        memory > xbasic_test_repr
        memory > xbasic_test_extend
        memory > xtest_isalpha
        memory > xpointer_size
        memory > xtest_replace
        memory > xtest_inplace_concat_large
        memory > xtest_encode_raw_unicode_escape
        memory > xtest_join
        memory > xtest_swapcase
        memory > xtest_capitalize
        memory > xtest_sort
        memory > xtest_contains
        memory > xtest_zfill
        memory > xtest_compare
        memory > xtest_concat
        memory > xfrom_latin1
        memory > xtest_find
        memory > xtest_startswith
        memory > xtest_reverse
        memory > xtest_splitlines
        memory > xtest_isupper
        memory > xtest_repr_large
        memory > x_test_title
        memory > xbasic_encode_test
        memory > xtest_encode_ascii
        memory > xtearDown
        memory > xbasic_concat_test
        memory > xtest_encode
        memory > xtest_endswith
        memory > xtest_isspace
        memory > xtest_repeat_large_2
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            seq
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
              (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            xascii_char_size.write 1
            xucs2_char_size.write 2
            xucs4_char_size.write 4
            xpointer_size.write ((((xsys).xmaxsize).less (((unsupported)).apply (2) (32))).if 4 8)
            (((unsupported)).apply)
              seq
                x_test_capitalize.write
                  [xself xsize]
                    memory > xs
                    memory > xcaps
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      seq
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write ((((xself).xfrom_latin1)).apply (" abc def ghi"))
                        xs.write (((((x_)).apply ("-")).mul (xsize)).add (xSUBSTR))
                        xcaps.write ((((xs).xcapitalize)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xcaps)) ((((unsupported)).apply (((((xlen)).apply ((xSUBSTR))).neg)))))) (((((xSUBSTR).xcapitalize)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xcaps).xlstrip)).apply ((((x_)).apply ("-"))))) ((xSUBSTR)))
                xtest_center.write
                  [xself xsize]
                    memory > xs
                    memory > xrpadsize
                    memory > xSUBSTR
                    memory > xlpadsize
                    seq > @
                      (((unsupported)).apply)
                        xSUBSTR.write ((((xself).xfrom_latin1)).apply (" abc def ghi"))
                        xs.write ((((xSUBSTR).xcenter)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        (((unsupported)).apply ((xlpadsize)) ((xrpadsize)) ((((unsupported)).apply (((((xlen)).apply ((xs))).sub (((xlen)).apply ((xSUBSTR))))) (2))))
                        ((((xlen)).apply ((xs))).mod 2).if
                          (((unsupported)).apply ((xlpadsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((xlpadsize)) (((xrpadsize).neg)))))) ((xSUBSTR)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xstrip)).apply)) (((((xSUBSTR).xstrip)).apply)))
                xtest_count.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xs.write (((((x_)).apply (".")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("."))))) ((xsize)))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("."))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("."))))) (((xsize).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply (" "))))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("i"))))) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("j"))))) (0))
                xtest_endswith.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xs2
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xs.write (((((x_)).apply ("-")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xendswith)).apply ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xendswith)).apply ((xs)))))
                        xs2.write ((((x_)).apply ("...")).add (xs))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs2).xendswith)).apply ((xs)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xs).xendswith)).apply (((((x_)).apply ("a")).add (xSUBSTR))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xSUBSTR).xendswith)).apply ((xs)))))
                xtest_expandtabs.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xtabsize
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)).apply ("-")).mul (xsize))
                        xtabsize.write 8
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((((xs).xexpandtabs)).apply).eq (xs))))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xslen)) ((xremainder)))) ((((xdivmod)).apply ((xsize)) ((xtabsize)))))
                        xs.write ((((x_)).apply ("       t")).mul (xslen))
                        xs.write ((((xs).xexpandtabs)).apply ((xtabsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (((xsize).sub (xremainder))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xs).xstrip)).apply ((((x_)).apply (" "))))))) (0))
                xtest_find.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xsublen
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xsublen.write (((xlen)).apply ((xSUBSTR)))
                        xs.write ((((((x_)).apply ("")).xjoin)).apply ((((unsupported)).apply ((xSUBSTR)) (((((x_)).apply ("-")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xfind)).apply ((((x_)).apply (" "))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xfind)).apply ((xSUBSTR)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xfind)).apply ((((x_)).apply (" "))) ((xsublen)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xfind)).apply ((xSUBSTR)) ((((xlen)).apply ((xSUBSTR)))))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xfind)).apply ((((x_)).apply ("i"))))) (((((xSUBSTR).xfind)).apply ((((x_)).apply ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xfind)).apply ((((x_)).apply ("i"))) ((xsublen)))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xfind)).apply ((((x_)).apply ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xfind)).apply ((((x_)).apply ("i"))) ((xsize)))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xfind)).apply ((((x_)).apply ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xfind)).apply ((((x_)).apply ("j"))))) ((1.neg)))
                xtest_index.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xsublen
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xsublen.write (((xlen)).apply ((xSUBSTR)))
                        xs.write ((((((x_)).apply ("")).xjoin)).apply ((((unsupported)).apply ((xSUBSTR)) (((((x_)).apply ("-")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xindex)).apply ((((x_)).apply (" "))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xindex)).apply ((xSUBSTR)))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xindex)).apply ((((x_)).apply (" "))) ((xsublen)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xindex)).apply ((xSUBSTR)) ((xsublen)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xindex)).apply ((((x_)).apply ("i"))))) (((((xSUBSTR).xindex)).apply ((((x_)).apply ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xindex)).apply ((((x_)).apply ("i"))) ((xsublen)))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xindex)).apply ((((x_)).apply ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xindex)).apply ((((x_)).apply ("i"))) ((xsize)))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xindex)).apply ((((x_)).apply ("i")))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xs).xindex)) ((((x_)).apply ("j"))))
                xtest_isalnum.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("123456"))
                        xs.write (((((x_)).apply ("a")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xisalnum)).apply)))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("."))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xs).xisalnum)).apply)))
                xtest_isalpha.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("zzzzzzz"))
                        xs.write (((((x_)).apply ("a")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xisalpha)).apply)))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("."))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xs).xisalpha)).apply)))
                xtest_isdigit.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("123456"))
                        xs.write (((((x_)).apply ("9")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xisdigit)).apply)))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("z"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xs).xisdigit)).apply)))
                xtest_islower.write
                  [xself xsize]
                    memory > xchars
                    memory > xs
                    memory > xrepeats
                    memory > x_
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xchars.write (((x_)).apply (((("".xjoin)).apply ((((unsupported)).apply ((((xchr)).apply ((xc)))) ((xc)) ((((xrange)).apply (255))) ((((((((xchr)).apply ((xc))).xisupper)).apply).not)))))))
                        xrepeats.write ((((unsupported)).apply ((xsize)) ((((xlen)).apply ((xchars))))).add 2)
                        xs.write ((xchars).mul (xrepeats))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xislower)).apply)))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("A"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xs).xislower)).apply)))
                xtest_isspace.write
                  [xself xsize]
                    memory > xs
                    memory > xrepeats
                    memory > xwhitespace
                    memory > x_
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xwhitespace.write (((x_)).apply (" fnrtv"))
                        xrepeats.write ((((unsupported)).apply ((xsize)) ((((xlen)).apply ((xwhitespace))))).add 2)
                        xs.write ((xwhitespace).mul (xrepeats))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xisspace)).apply)))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("j"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xs).xisspace)).apply)))
                xtest_istitle.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("123456"))
                        xs.write ((((((x_)).apply ("")).xjoin)).apply ((((unsupported)).apply ((((x_)).apply ("A"))) (((((x_)).apply ("a")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xistitle)).apply)))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("A"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xistitle)).apply)))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("aA"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xs).xistitle)).apply)))
                xtest_isupper.write
                  [xself xsize]
                    memory > xchars
                    memory > xs
                    memory > xrepeats
                    memory > x_
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xchars.write (((x_)).apply (((("".xjoin)).apply ((((unsupported)).apply ((((xchr)).apply ((xc)))) ((xc)) ((((xrange)).apply (255))) ((((((((xchr)).apply ((xc))).xislower)).apply).not)))))))
                        xrepeats.write ((((unsupported)).apply ((xsize)) ((((xlen)).apply ((xchars))))).add 2)
                        xs.write ((xchars).mul (xrepeats))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xisupper)).apply)))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xs).xisupper)).apply)))
                xtest_join.write
                  [xself xsize]
                    memory > x_
                    memory > xx
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)).apply ("A")).mul (xsize))
                        xx.write ((((xs).xjoin)).apply ((((unsupported)).apply ((((x_)).apply ("aaaaa"))) ((((x_)).apply ("bbbbb"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xcount)).apply ((((x_)).apply ("a"))))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xx).xcount)).apply ((((x_)).apply ("b"))))) (5))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xx).xstartswith)).apply ((((x_)).apply ("aaaaaA"))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xx).xendswith)).apply ((((x_)).apply ("Abbbbb"))))))
                xtest_ljust.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xs.write ((((xSUBSTR).xljust)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply (((xSUBSTR).add (((x_)).apply ("  ")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xstrip)).apply)) (((((xSUBSTR).xstrip)).apply)))
                xtest_lower.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)).apply ("A")).mul (xsize))
                        xs.write ((((xs).xlower)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("a"))))) ((xsize)))
                xtest_lstrip.write
                  [xself xsize]
                    memory > xs
                    memory > xstripped
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("abc def ghi"))
                        xs.write ((((xSUBSTR).xrjust)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xlstrip)).apply)) (((((xSUBSTR).xlstrip)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)))))
                        xs.write ((((xSUBSTR).xljust)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        (((xisinstance)).apply ((xs)) ((((unsupported)).apply ((xstr)) ((xbytes))))).if
                          seq
                            xstripped.write ((((xs).xlstrip)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstripped)) ((xs)))))
                xtest_replace.write
                  [xself xsize]
                    memory > xs
                    memory > xreplacement
                    memory > x_
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xreplacement.write (((x_)).apply ("a"))
                        xs.write ((((x_)).apply (" ")).mul (xsize))
                        xs.write ((((xs).xreplace)).apply ((((x_)).apply (" "))) ((xreplacement)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((xreplacement)))) ((xsize)))
                        xs.write ((((xs).xreplace)).apply ((xreplacement)) ((((x_)).apply (" "))) (((xsize).sub 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((xreplacement)))) (4))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((10.neg)))))) ((((x_)).apply ("      aaaa"))))
                xtest_rfind.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xsublen
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xsublen.write (((xlen)).apply ((xSUBSTR)))
                        xs.write ((((((x_)).apply ("")).xjoin)).apply ((((unsupported)).apply ((xSUBSTR)) (((((x_)).apply ("-")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrfind)).apply ((((x_)).apply (" "))))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xrfind)).apply ((((x_)).apply (" ")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrfind)).apply ((xSUBSTR)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrfind)).apply ((((x_)).apply (" "))) (0) ((xsize)))) (((((xSUBSTR).xrfind)).apply ((((x_)).apply (" "))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrfind)).apply ((xSUBSTR)) (0) (((xsublen).add (xsize))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrfind)).apply ((((x_)).apply ("i"))))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xrfind)).apply ((((x_)).apply ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrfind)).apply ((((x_)).apply ("i"))) (0) ((xsublen)))) (((((xSUBSTR).xrfind)).apply ((((x_)).apply ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrfind)).apply ((((x_)).apply ("i"))) (0) (((xsublen).add (xsize))))) (((((xSUBSTR).xrfind)).apply ((((x_)).apply ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrfind)).apply ((((x_)).apply ("j"))))) ((1.neg)))
                xtest_rindex.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xsublen
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xsublen.write (((xlen)).apply ((xSUBSTR)))
                        xs.write ((((((x_)).apply ("")).xjoin)).apply ((((unsupported)).apply ((xSUBSTR)) (((((x_)).apply ("-")).mul (xsize))) ((xSUBSTR)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrindex)).apply ((((x_)).apply (" "))))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xrindex)).apply ((((x_)).apply (" ")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrindex)).apply ((xSUBSTR)))) (((xsublen).add (xsize))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrindex)).apply ((((x_)).apply (" "))) (0) ((((xsublen).add (xsize)).sub 1)))) (((((xSUBSTR).xrindex)).apply ((((x_)).apply (" "))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrindex)).apply ((xSUBSTR)) (0) (((xsublen).add (xsize))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrindex)).apply ((((x_)).apply ("i"))))) ((((xsublen).add (xsize)).add ((((xSUBSTR).xrindex)).apply ((((x_)).apply ("i")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrindex)).apply ((((x_)).apply ("i"))) (0) ((xsublen)))) (((((xSUBSTR).xrindex)).apply ((((x_)).apply ("i"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrindex)).apply ((((x_)).apply ("i"))) (0) (((xsublen).add (xsize))))) (((((xSUBSTR).xrindex)).apply ((((x_)).apply ("i"))))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xs).xrindex)) ((((x_)).apply ("j"))))
                xtest_rjust.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xs.write ((((xSUBSTR).xljust)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply (((xSUBSTR).add (((x_)).apply ("  ")))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xstrip)).apply)) (((((xSUBSTR).xstrip)).apply)))
                xtest_rstrip.write
                  [xself xsize]
                    memory > xs
                    memory > xstripped
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xs.write ((((xSUBSTR).xljust)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xrstrip)).apply)) (((((xSUBSTR).xrstrip)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)))))
                        xs.write ((((xSUBSTR).xrjust)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        (((xisinstance)).apply ((xs)) ((((unsupported)).apply ((xstr)) ((xbytes))))).if
                          seq
                            xstripped.write ((((xs).xrstrip)).apply)
                            bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xstripped)) ((xs)))))
                xtest_split_small.write
                  [xself xsize]
                    memory > x_
                    memory > xl
                    memory > xs
                    memory > xSUBSTR
                    memory > xchunksize
                    memory > xexpected
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xchunksize.write (((xint)).apply (((((unsupported)).apply ((xsize)) (0.5)).add 2)))
                        xSUBSTR.write ((((x_)).apply ("a")).add ((((x_)).apply (" ")).mul (xchunksize)))
                        xs.write ((xSUBSTR).mul (xchunksize))
                        xl.write ((((xs).xsplit)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xchunksize)))
                        xexpected.write (((x_)).apply ("a"))
                        (((unsupported)).apply ((xitem)) ((xl)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xitem)) ((xexpected)))
                        (((unsupported)).apply ((((unsupported)).apply ((xl)))))
                        xl.write ((((xs).xsplit)).apply ((((x_)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xchunksize).add 1)))
                        xexpected.write ((((x_)).apply (" ")).mul (xchunksize))
                        (((unsupported)).apply ((xitem)) ((((xfilter)).apply ("None: is there a None literal in the EO language?") ((xl)))))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xitem)) ((xexpected)))
                xtest_split_large.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xs.write (((((x_)).apply (" a")).mul (xsize)).add (((x_)).apply (" ")))
                        xl.write ((((xs).xsplit)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((xl)))) ((((xset)).apply ((((unsupported)).apply ((((x_)).apply ("a"))))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xl)))))
                        xl.write ((((xs).xsplit)).apply ((((x_)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).add 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xset)).apply ((xl)))) ((((xset)).apply ((((unsupported)).apply ((((x_)).apply (" "))))))))
                xtest_splitlines.write
                  [xself xsize]
                    memory > x_
                    memory > xl
                    memory > xs
                    memory > xSUBSTR
                    memory > xchunksize
                    memory > xexpected
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xchunksize.write (((unsupported)).apply ((((xint)).apply (((((unsupported)).apply ((xsize)) (0.5)).add 2)))) (2))
                        xSUBSTR.write (((((((x_)).apply (" ")).mul (xchunksize)).add (((x_)).apply ("n"))).add ((((x_)).apply (" ")).mul (xchunksize))).add (((x_)).apply ("rn")))
                        xs.write ((xSUBSTR).mul ((xchunksize).mul 2))
                        xl.write ((((xs).xsplitlines)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xchunksize).mul 4)))
                        xexpected.write ((((x_)).apply (" ")).mul (xchunksize))
                        (((unsupported)).apply ((xitem)) ((xl)))
                          bogusForceDataize.write ((((xself).xassertEqual)).apply ((xitem)) ((xexpected)))
                xtest_startswith.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply (" abc def ghi"))
                        xs.write (((((x_)).apply ("-")).mul (xsize)).add (xSUBSTR))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply ((xs)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply (((((x_)).apply ("-")).mul (xsize))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((((xs).xstartswith)).apply ((xSUBSTR)))))
                xtest_strip.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("   abc def ghi   "))
                        xs.write ((((xSUBSTR).xrjust)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xstrip)).apply)) (((((xSUBSTR).xstrip)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)))))
                        xs.write ((((xSUBSTR).xljust)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xstrip)).apply)) (((((xSUBSTR).xstrip)).apply)))
                x_test_swapcase.write
                  [xself xsize]
                    memory > xsublen
                    memory > x_
                    memory > xs
                    memory > xrepeats
                    memory > xSUBSTR
                    seq > @
                      seq
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("aBcDeFG12.'xa9x00"))
                        xsublen.write (((xlen)).apply ((xSUBSTR)))
                        xrepeats.write ((((unsupported)).apply ((xsize)) ((xsublen))).add 2)
                        xs.write ((xSUBSTR).mul (xrepeats))
                        xs.write ((((xs).xswapcase)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (((xsublen).mul (xrepeats))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (((xsublen).mul 3)))))) ((((((xSUBSTR).xswapcase)).apply).mul 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xsublen).neg).mul 3)))))) ((((((xSUBSTR).xswapcase)).apply).mul 3)))
                x_test_title.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      seq
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("SpaaHAaaAaham"))
                        xs.write ((xSUBSTR).mul ((((unsupported)).apply ((xsize)) ((((xlen)).apply ((xSUBSTR))))).add 2))
                        xs.write ((((xs).xtitle)).apply)
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply ((((((xSUBSTR).mul 3).xtitle)).apply)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xendswith)).apply ((((((xSUBSTR).xlower)).apply).mul 3)))))
                xtest_translate.write
                  [xself xsize]
                    memory > xsublen
                    memory > x_
                    memory > xtrans
                    memory > xs
                    memory > xrepeats
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("aZz.z.Aaz."))
                        xtrans.write ((((xbytes).xmaketrans)).apply (".aZ") ("-!$"))
                        xsublen.write (((xlen)).apply ((xSUBSTR)))
                        xrepeats.write ((((unsupported)).apply ((xsize)) ((xsublen))).add 2)
                        xs.write ((xSUBSTR).mul (xrepeats))
                        xs.write ((((xs).xtranslate)).apply ((xtrans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (((xrepeats).mul (xsublen))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((xsublen)))))) (((((xSUBSTR).xtranslate)).apply ((xtrans)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (((xsublen).neg)))))) (((((xSUBSTR).xtranslate)).apply ((xtrans)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("."))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("!"))))) (((xrepeats).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("z"))))) (((xrepeats).mul 3)))
                xtest_upper.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)).apply ("a")).mul (xsize))
                        xs.write ((((xs).xupper)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("A"))))) ((xsize)))
                xtest_zfill.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("-568324723598234"))
                        xs.write ((((xSUBSTR).xzfill)).apply ((xsize)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xendswith)).apply (((((x_)).apply ("0")).add (((unsupported)).apply ((xSUBSTR)) ((((unsupported)).apply (1)))))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xs).xstartswith)).apply ((((x_)).apply ("-0"))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("0"))))) (((xsize).sub (((xlen)).apply ((xSUBSTR))))))
                xtest_concat.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)).apply (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        xs.write ((xs).add (xs))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("."))))) (((xsize).mul 2)))
                xtest_repeat.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)).apply (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((xsize)))
                        xs.write ((xs).mul 2)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("."))))) (((xsize).mul 2)))
                xtest_slice_and_getitem.write
                  [xself xsize]
                    memory > xsublen
                    memory > x_
                    memory > xs
                    memory > xstepsize
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("0123456789"))
                        xsublen.write (((xlen)).apply ((xSUBSTR)))
                        xs.write ((xSUBSTR).mul (((unsupported)).apply ((xsize)) ((xsublen))))
                        xstepsize.write (((unsupported)).apply ((((xlen)).apply ((xs)))) (100))
                        xstepsize.write ((xstepsize).sub ((xstepsize).mod (xsublen)))
                        (((unsupported)).apply ((xi)) ((((xrange)).apply (0) (((((xlen)).apply ((xs))).sub (xstepsize))) ((xstepsize)))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((xi)))) ((((unsupported)).apply ((xSUBSTR)) (0))))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((xi)) (((xi).add (xsublen))))))) ((xSUBSTR)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((xi)) (((xi).add (xsublen))) (2))))) ((((unsupported)).apply ((xSUBSTR)) ((((unsupported)).apply (2))))))
                            ((xi).greater 0).if
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xi).add (xsublen)).sub 1)) (((xi).sub 1)) ((3.neg)))))) ((((unsupported)).apply ((xSUBSTR)) ((((unsupported)).apply ((xsublen)) ((3.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) (((((xlen)).apply ((xs))).sub 1)))) ((((unsupported)).apply ((xSUBSTR)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((1.neg)))) ((((unsupported)).apply ((xSUBSTR)) ((1.neg)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) (((((xlen)).apply ((xs))).sub 10)))) ((((unsupported)).apply ((xSUBSTR)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) (((xsublen).neg)))) ((((unsupported)).apply ((xSUBSTR)) (0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((((xlen)).apply ((xs)))))))) ((((x_)).apply (""))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (((((xlen)).apply ((xs))).sub 1)))))) ((((unsupported)).apply ((xSUBSTR)) ((((unsupported)).apply ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((1.neg)))))) ((((unsupported)).apply ((xSUBSTR)) ((((unsupported)).apply ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (((((xlen)).apply ((xs))).sub (xsublen))))))) ((xSUBSTR)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (((xsublen).neg)))))) ((xSUBSTR)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply)))))) ((((xlen)).apply ((xs)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (((((xlen)).apply ((xs))).sub 5)))))))) (((((xlen)).apply ((xs))).sub 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (5) ((5.neg)))))))) (((((xlen)).apply ((xs))).sub 10)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xoperator).xgetitem)) ((xs)) ((((xlen)).apply ((xs)))))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xoperator).xgetitem)) ((xs)) (((((xlen)).apply ((xs))).add 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xoperator).xgetitem)) ((xs)) ((((unsupported)).apply (((((xlen)).apply ((xs))).add 1)) (31))))
                xtest_contains.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xSUBSTR
                    memory > xedge
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("0123456789"))
                        xedge.write ((((x_)).apply ("-")).mul (((unsupported)).apply ((xsize)) (2)))
                        xs.write ((((((x_)).apply ("")).xjoin)).apply ((((unsupported)).apply ((xedge)) ((xSUBSTR)) ((xedge)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xedge)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((xSUBSTR)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply (((xSUBSTR).mul 2)) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((x_)).apply ("-"))) ((xs)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((((x_)).apply ("a"))) ((xs)))))
                        (((unsupported)).apply ((xs)) ((((x_)).apply ("a"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((x_)).apply ("a"))) ((xs)))))
                xtest_compare.write
                  [xself xsize]
                    memory > xs1
                    memory > x_
                    memory > xs2
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xs1.write ((((x_)).apply ("-")).mul (xsize))
                        xs2.write ((((x_)).apply ("-")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xs1).eq (xs2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xs2)))))
                        xs2.write ((xs1).add (((x_)).apply ("a")))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xs1).eq (xs2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xs2)))))
                        xs2.write ((((x_)).apply (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xs1).eq (xs2))))
                xtest_hash.write
                  [xself xsize]
                    memory > xs
                    memory > x_
                    memory > xh1
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xs.write ((((x_)).apply ("x00")).mul (xsize))
                        xh1.write (((xhash)).apply ((xs)))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)))))
                        xs.write ((((x_)).apply ("x00")).mul ((xsize).add 1))
                        bogusForceDataize.write ((((xself).xassertNotEqual)).apply ((xh1)) ((((xhash)).apply ((xs)))))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xBaseStrTest)))
              seq
                xfrom_latin1.write
                  [xself xs]
                    seq > @
                      (((unsupported)).apply ((xs)))
                xbasic_encode_test.write
                  [xself xsize xenc xc xexpectedsize]
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xexpectedsize)) ("None: is there a None literal in the EO language?")).if
                          xexpectedsize.write (xsize)
                        (((unsupported)).apply)
                          seq
                            xs.write ((xc).mul (xsize))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xs).xencode)).apply ((xenc)))))) ((xexpectedsize)))
                          xs.write "None: is there a None literal in the EO language?"
                xsetUp.write
                  [xself]
                    memory > xmeth
                    memory > xmemuse
                    seq > @
                      seq
                        (((unsupported)).apply (((xself).x_adjusted)) ((((unsupported)).apply)))
                        (((unsupported)).apply ((xname)) ((((xdir)).apply ((xBaseStrTest)))))
                          seq
                            (((((xname).xstartswith)).apply ("test_")).not).if
                              (((unsupported)).apply)
                            xmeth.write (((xgetattr)).apply ((((xtype)).apply ((xself)))) ((xname)))
                            (((unsupported)).apply ((xAttributeError)))
                              xmemuse.write ((xmeth).xmemuse)
                              (((unsupported)).apply)
                            (((unsupported)).apply (((xmeth).xmemuse)) (((xascii_char_size).mul (xmemuse))))
                            (((unsupported)).apply ((((unsupported)).apply (((xself).x_adjusted)) ((xname)))) ((xmemuse)))
                xtearDown.write
                  [xself]
                    seq > @
                      (((unsupported)).apply ((((unsupported)).apply ((xname)) ((xmemuse)))) ((((((xself).x_adjusted).xitems)).apply)))
                        (((unsupported)).apply (((((xgetattr)).apply ((((xtype)).apply ((xself)))) ((xname))).xmemuse)) ((xmemuse)))
                xtest_capitalize.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_capitalize)).apply ((xsize)))
                xtest_title.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_title)).apply ((xsize)))
                xtest_swapcase.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_swapcase)).apply ((xsize)))
                xtest_encode.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_encode_test)).apply ((xsize)) ("utf-8"))))
                xtest_encode_raw_unicode_escape.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xMemoryError)))
                          (((unsupported)).apply (((((xself).xbasic_encode_test)).apply ((xsize)) ("raw_unicode_escape"))))
                xtest_encode_utf7.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xMemoryError)))
                          (((unsupported)).apply (((((xself).xbasic_encode_test)).apply ((xsize)) ("utf7"))))
                xtest_encode_utf32.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xMemoryError)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xbasic_encode_test)) ((xsize)) ("utf32") (((4.mul (xsize)).add 4)))))
                xtest_encode_ascii.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((((unsupported)).apply (((xself).xbasic_encode_test)) ((xsize)) ("ascii") ("A"))))
                xtest_format.write
                  [xself xsize]
                    memory > xs
                    memory > xsf
                    memory > xedge
                    seq > @
                      (((unsupported)).apply)
                        xs.write ("-".mul (xsize))
                        xsf.write ("%s".mod (((unsupported)).apply ((xs))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xs).eq (xsf))))
                        (((unsupported)).apply ((((unsupported)).apply ((xsf)))))
                        xsf.write ("..%s..".mod (((unsupported)).apply ((xs))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xsf)))) (((((xlen)).apply ((xs))).add 4)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xsf).xstartswith)).apply ("..-"))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xsf).xendswith)).apply ("-.."))))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)) ((xsf)))))
                        (((unsupported)).apply ((xsize)) (2))
                        xedge.write ("-".mul (xsize))
                        xs.write ((("".xjoin)).apply ((((unsupported)).apply ((xedge)) ("%s") ((xedge)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xedge)))))
                        xs.write ((xs).mod "...")
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((((xsize).mul 2).add 3)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ("."))) (3))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ("-"))) (((xsize).mul 2)))
                xtest_repr_small.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        xs.write ("-".mul (xsize))
                        xs.write (((xrepr)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (((xsize).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) (0))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((1.neg)))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ("-"))) ((xsize)))
                        (((unsupported)).apply ((((unsupported)).apply ((xs)))))
                        xsize.write ((((unsupported)).apply ((xsize)) (5)).mul 2)
                        xs.write ("x00".mul (xsize))
                        xs.write (((xrepr)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((((xsize).mul 4).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) (0))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((1.neg)))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ("\\"))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ("0"))) (((xsize).mul 2)))
                xtest_repr_large.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        xs.write ("x00".mul (xsize))
                        xs.write (((xrepr)).apply ((xs)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) ((((xsize).mul 4).add 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) (0))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((1.neg)))) ("'"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ("\\"))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ("0"))) (((xsize).mul 2)))
                xtest_unicode_repr.write
                  [xself xsize]
                    memory > xs
                    memory > xr
                    memory > xchar
                    seq > @
                      (((unsupported)).apply)
                        xchar.write "uDCBA"
                        xs.write ((xchar).mul (xsize))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xf)) ((((unsupported)).apply ((xrepr)) ((xascii)))))
                            seq
                              xr.write (((xf)).apply ((xs)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xr)))) ((2.add (((((xlen)).apply ((((xf)).apply ((xchar))))).sub 2).mul (xsize)))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xr).xendswith)).apply ("udcba'"))) ((((unsupported)).apply ((xr)) ((((unsupported)).apply ((10.neg)))))))
                              xr.write "None: is there a None literal in the EO language?"
                          (((unsupported)).apply ((xr)) ((xs)) ("None: is there a None literal in the EO language?"))
                xtest_unicode_repr_wide.write
                  [xself xsize]
                    memory > xs
                    memory > xr
                    memory > xchar
                    seq > @
                      (((unsupported)).apply)
                        xchar.write "U0001DCBA"
                        xs.write ((xchar).mul (xsize))
                        (((unsupported)).apply)
                          (((unsupported)).apply ((xf)) ((((unsupported)).apply ((xrepr)) ((xascii)))))
                            seq
                              xr.write (((xf)).apply ((xs)))
                              bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xr)))) ((2.add (((((xlen)).apply ((((xf)).apply ((xchar))))).sub 2).mul (xsize)))))
                              bogusForceDataize.write ((((xself).xassertTrue)).apply (((((xr).xendswith)).apply ("U0001dcba'"))) ((((unsupported)).apply ((xr)) ((((unsupported)).apply ((12.neg)))))))
                              xr.write "None: is there a None literal in the EO language?"
                          (((unsupported)).apply ((xr)) ((xs)) ("None: is there a None literal in the EO language?"))
                xtest_translate.write
                  [xself xsize]
                    memory > xsublen
                    memory > x_
                    memory > xtrans
                    memory > xs
                    memory > xrepeats
                    memory > xSUBSTR
                    seq > @
                      (((unsupported)).apply)
                        x_.write ((xself).xfrom_latin1)
                        xSUBSTR.write (((x_)).apply ("aZz.z.Aaz."))
                        xtrans.write (((unsupported)).apply ((((xord)).apply ((((x_)).apply ("."))))) ((((x_)).apply ("-"))) ((((xord)).apply ((((x_)).apply ("a"))))) ((((x_)).apply ("!"))) ((((xord)).apply ((((x_)).apply ("Z"))))) ((((x_)).apply ("$"))))
                        xsublen.write (((xlen)).apply ((xSUBSTR)))
                        xrepeats.write ((((unsupported)).apply ((xsize)) ((xsublen))).add 2)
                        xs.write ((xSUBSTR).mul (xrepeats))
                        xs.write ((((xs).xtranslate)).apply ((xtrans)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (((xrepeats).mul (xsublen))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((xsublen)))))) (((((xSUBSTR).xtranslate)).apply ((xtrans)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (((xsublen).neg)))))) (((((xSUBSTR).xtranslate)).apply ((xtrans)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("."))))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("!"))))) (((xrepeats).mul 2)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ((((x_)).apply ("z"))))) (((xrepeats).mul 3)))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xBaseStrTest)))
              seq
                xfrom_latin1.write
                  [xself xs]
                    seq > @
                      (((unsupported)).apply (((((xs).xencode)).apply ("latin-1"))))
                xtest_decode.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        xs.write (((((xself).xfrom_latin1)).apply (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xs).xdecode)).apply ("utf-8"))))) ((xsize)))
                xtest_capitalize.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_capitalize)).apply ((xsize)))
                xtest_title.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_title)).apply ((xsize)))
                xtest_swapcase.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_swapcase)).apply ((xsize)))
            (((unsupported)).apply (((xunittest).xTestCase)) ((xBaseStrTest)))
              seq
                xfrom_latin1.write
                  [xself xs]
                    seq > @
                      (((unsupported)).apply ((((xbytearray)).apply (((((xs).xencode)).apply ("latin-1"))))))
                xtest_decode.write
                  [xself xsize]
                    memory > xs
                    seq > @
                      (((unsupported)).apply)
                        xs.write (((((xself).xfrom_latin1)).apply (".")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply (((((xs).xdecode)).apply ("utf-8"))))) ((xsize)))
                xtest_capitalize.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_capitalize)).apply ((xsize)))
                xtest_title.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_title)).apply ((xsize)))
                xtest_swapcase.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        bogusForceDataize.write ((((xself).x_test_swapcase)).apply ((xsize)))
                xtest_hash.write "None: is there a None literal in the EO language?"
                xtest_split_large.write "None: is there a None literal in the EO language?"
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_compare.write
                  [xself xsize]
                    memory > xt1
                    memory > xt2
                    seq > @
                      (((unsupported)).apply)
                        xt1.write ((((unsupported)).apply ("")).mul (xsize))
                        xt2.write ((((unsupported)).apply ("")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xt1).eq (xt2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xt2)))))
                        xt2.write ((((unsupported)).apply ("")).mul ((xsize).add 1))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xt1).eq (xt2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xt2)))))
                        xt2.write ((((unsupported)).apply (1)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xt1).eq (xt2))))
                xbasic_concat_test.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((unsupported)).apply ((((unsupported)).apply))).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xt)))) ((xsize)))
                        xt.write ((xt).add (xt))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xt)))) (((xsize).mul 2)))
                xtest_concat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_concat_test)).apply ((xsize)))))
                xtest_concat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_concat_test)).apply ((xsize)))))
                xtest_contains.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        xt.write ((((unsupported)).apply (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xt)))) (((xsize).mul 5)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (5) ((xt)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4) (5))) ((xt)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply (0) ((xt)))))
                xtest_hash.write
                  [xself xsize]
                    memory > xt1
                    memory > xt2
                    memory > xh1
                    seq > @
                      (((unsupported)).apply)
                        xt1.write ((((unsupported)).apply (0)).mul (xsize))
                        xh1.write (((xhash)).apply ((xt1)))
                        (((unsupported)).apply ((((unsupported)).apply ((xt1)))))
                        xt2.write ((((unsupported)).apply (0)).mul ((xsize).add 1))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xh1).eq (((xhash)).apply ((xt2))))))
                xtest_index_and_slice.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        xt.write ((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xt)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((1.neg)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) (5))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) (((xsize).sub 1)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xoperator).xgetitem)) ((xt)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply (5))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply ((5.neg)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply (20) (25))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply ((25.neg)) ((20.neg)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply (((xsize).sub 5)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply (((xsize).sub 5)) ((xsize)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply (((xsize).sub 6)) (((xsize).sub 2)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply ((xsize)) ((xsize)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply ((xsize)) (((xsize).add 5)))))) ((((unsupported)).apply)))
                xbasic_test_repeat.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      seq
                        xt.write ((((unsupported)).apply ("")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xt)))) ((xsize)))
                        xt.write ((xt).mul 2)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xt)))) (((xsize).mul 2)))
                xtest_repeat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_repeat)).apply ((xsize)))))
                xtest_repeat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_repeat)).apply ((xsize)))))
                xtest_repeat_large_2.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_repeat)).apply ((xsize)))))
                xtest_from_2G_generator.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xMemoryError)))
                          xt.write (((xtuple)).apply ((((xiter)).apply (((((unsupported)).apply (42)).mul (xsize))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xt)))) ((xsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply (10))))) (((((unsupported)).apply (42)).mul 10)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply ((10.neg)))))) (((((unsupported)).apply (42)).mul 10)))
                xtest_from_almost_2G_generator.write
                  [xself xsize]
                    memory > xt
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply ((xMemoryError)))
                          xt.write (((xtuple)).apply ((((xiter)).apply (((((unsupported)).apply (42)).mul (xsize))))))
                          seq
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xt)))) ((xsize)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply (10))))) (((((unsupported)).apply (42)).mul 10)))
                            bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xt)) ((((unsupported)).apply ((10.neg)))))) (((((unsupported)).apply (42)).mul 10)))
                xbasic_test_repr.write
                  [xself xsize]
                    memory > xt
                    memory > xs
                    seq > @
                      seq
                        xt.write ((((unsupported)).apply (FALSE)).mul (xsize))
                        xs.write (((xrepr)).apply ((xt)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (((xsize).mul 7)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (10))))) ("(False, Fa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((10.neg)))))) ("se, False)"))
                xtest_repr_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_repr)).apply ((xsize)))))
                xtest_repr_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_repr)).apply ((xsize)))))
            (((unsupported)).apply (((xunittest).xTestCase)))
              seq
                xtest_compare.write
                  [xself xsize]
                    memory > xl2
                    memory > xl1
                    seq > @
                      (((unsupported)).apply)
                        xl1.write ((((unsupported)).apply ("")).mul (xsize))
                        xl2.write ((((unsupported)).apply ("")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply (((xl1).eq (xl2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xl2)))))
                        xl2.write ((((unsupported)).apply ("")).mul ((xsize).add 1))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xl1).eq (xl2))))
                        (((unsupported)).apply ((((unsupported)).apply ((xl2)))))
                        xl2.write ((((unsupported)).apply (2)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply (((xl1).eq (xl2))))
                xbasic_test_concat.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)).apply ((((unsupported)).apply))).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        xl.write ((xl).add (xl))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).mul 2)))
                xtest_concat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_concat)).apply ((xsize)))))
                xtest_concat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_concat)).apply ((xsize)))))
                xbasic_test_inplace_concat.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)).apply (((xsys).xstdout))).mul (xsize))
                        (((unsupported)).apply ((xl)) ((xl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) (0))) ((((unsupported)).apply ((xl)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) (((xsize).sub 1)))) ((((unsupported)).apply ((xl)) (((xsize).add 1)))))))
                xtest_inplace_concat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_inplace_concat)).apply ((xsize)))))
                xtest_inplace_concat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_inplace_concat)).apply ((xsize)))))
                xtest_contains.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).mul 5)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply (5) ((xl)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((((unsupported)).apply (1) (2) (3) (4) (5))) ((xl)))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply (0) ((xl)))))
                xtest_hash.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply (0)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xTypeError)) ((xhash)) ((xl)))
                xtest_index_and_slice.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((1.neg)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) (5))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) (((xsize).sub 1)))) ("None: is there a None literal in the EO language?"))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xoperator).xgetitem)) ((xl)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (5))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((5.neg)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (20) (25))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((25.neg)) ((20.neg)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (((xsize).sub 5)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (((xsize).sub 5)) ((xsize)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (((xsize).sub 6)) (((xsize).sub 2)))))) (((((unsupported)).apply ("None: is there a None literal in the EO language?")).mul 4)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((xsize)) ((xsize)))))) ((((unsupported)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((xsize)) (((xsize).add 5)))))) ((((unsupported)).apply)))
                        (((unsupported)).apply ((((unsupported)).apply ((xl)) (((xsize).sub 2)))) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((3.neg)))))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") (5) ("None: is there a None literal in the EO language?"))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xl).xcount)).apply (5))) (1))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xIndexError)) (((xoperator).xsetitem)) ((xl)) ((xsize)) (6))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        (((unsupported)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (((xsize).sub 7)))))) ((((unsupported)).apply (1) (2) (3) (4) (5))))
                        (((unsupported)).apply ((xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((7.neg)))))) ((((unsupported)).apply ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?") (1) (2) (3) (4) (5))))
                        (((unsupported)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (7))))) ((((unsupported)).apply (1) (2) (3) (4) (5))))
                        (((unsupported)).apply ((xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (7))))) ((((unsupported)).apply (1) (2) (3) (4) (5) ("None: is there a None literal in the EO language?") ("None: is there a None literal in the EO language?"))))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) (((xsize).sub 1)))))))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((1.neg)))) (4))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((2.neg)))))))))
                        (((unsupported)).apply ((xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((1.neg)))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) (0))))))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) (0))) (2))
                        (((unsupported)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (2))))))))
                        (((unsupported)).apply ((xsize)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) (0))) (4))
                xbasic_test_repeat.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)).apply).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((xl)))
                        xl.write ((((unsupported)).apply ("")).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        xl.write ((xl).mul 2)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).mul 2)))
                xtest_repeat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_repeat)).apply ((xsize)))))
                xtest_repeat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_repeat)).apply ((xsize)))))
                xbasic_test_inplace_repeat.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write (((unsupported)).apply (""))
                        (((unsupported)).apply ((xl)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) (0))) ((((unsupported)).apply ((xl)) ((1.neg)))))))
                        (((unsupported)).apply ((((unsupported)).apply ((xl)))))
                        xl.write ((((unsupported)).apply ("")).mul (xsize))
                        (((unsupported)).apply ((xl)) (2))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) (((xsize).sub 1)))) ((((unsupported)).apply ((xl)) ((1.neg)))))))
                xtest_inplace_repeat_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_inplace_repeat)).apply ((xsize)))))
                xtest_inplace_repeat_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_inplace_repeat)).apply ((xsize)))))
                xbasic_test_repr.write
                  [xself xsize]
                    memory > xs
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)).apply (FALSE)).mul (xsize))
                        xs.write (((xrepr)).apply ((xl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xs)))) (((xsize).mul 7)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply (10))))) ("[False, Fa"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xs)) ((((unsupported)).apply ((10.neg)))))) ("se, False]"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xs).xcount)).apply ("F"))) ((xsize)))
                xtest_repr_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_repr)).apply ((xsize)))))
                xtest_repr_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_repr)).apply ((xsize)))))
                xtest_append.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply ((((xobject)).apply))).mul (xsize))
                        bogusForceDataize.write ((((xl).xappend)).apply ((((xobject)).apply)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).add 1)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((3.neg)))) ((((unsupported)).apply ((xl)) ((2.neg)))))))
                        bogusForceDataize.write ((((xself).xassertFalse)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) ((2.neg)))) ((((unsupported)).apply ((xl)) ((1.neg)))))))
                xtest_count.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xl).xcount)).apply (1))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xl).xcount)).apply ("1"))) (0))
                xbasic_test_extend.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      seq
                        xl.write ((((unsupported)).apply ((xobject))).mul (xsize))
                        bogusForceDataize.write ((((xl).xextend)).apply ((xl)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).mul 2)))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) (0))) ((((unsupported)).apply ((xl)) ((1.neg)))))))
                        bogusForceDataize.write ((((xself).xassertTrue)).apply ((((unsupported)).apply ((((unsupported)).apply ((xl)) (((xsize).sub 1)))) ((((unsupported)).apply ((xl)) (((xsize).add 1)))))))
                xtest_extend_small.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_extend)).apply ((xsize)))))
                xtest_extend_large.write
                  [xself xsize]
                    seq > @
                      (((unsupported)).apply)
                        (((unsupported)).apply (((((xself).xbasic_test_extend)).apply ((xsize)))))
                xtest_index.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply (1) (2) (3) (4) (5)).mul (xsize))
                        (((unsupported)).apply ((xsize)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xl).xindex)).apply (1))) (0))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xl).xindex)).apply (5) (((xsize).sub 5)))) (((xsize).sub 1)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xl).xindex)).apply (5) (((xsize).sub 5)) ((xsize)))) (((xsize).sub 1)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xl).xindex)) (1) (((xsize).sub 4)) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertRaises)).apply ((xValueError)) (((xl).xindex)) (6))
                xtest_insert.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply (1.0)).mul (xsize))
                        bogusForceDataize.write ((((xl).xinsert)).apply (((xsize).sub 1)) ("A"))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((3.neg)))))) ((((unsupported)).apply (1.0) ("A") (1.0))))
                        bogusForceDataize.write ((((xl).xinsert)).apply (((xsize).add 1)) ("B"))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((3.neg)))))) ((((unsupported)).apply ("A") (1.0) ("B"))))
                        bogusForceDataize.write ((((xl).xinsert)).apply (1) ("C"))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (3))))) ((((unsupported)).apply (1.0) ("C") (1.0))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (((xsize).sub 3)))))) ((((unsupported)).apply ("A") (1.0) ("B"))))
                xtest_pop.write
                  [xself xsize]
                    memory > xl
                    memory > xitem
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply ("a") ("b") ("c") ("d") ("e")).mul (xsize))
                        (((unsupported)).apply ((xsize)) (5))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        xitem.write ((((xl).xpop)).apply)
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xitem)) ("e"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((2.neg)))))) ((((unsupported)).apply ("c") ("d"))))
                        xitem.write ((((xl).xpop)).apply (0))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xitem)) ("a"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (2))))) ((((unsupported)).apply ("b") ("c"))))
                        xitem.write ((((xl).xpop)).apply (((xsize).sub 2)))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xitem)) ("c"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((2.neg)))))) ((((unsupported)).apply ("b") ("d"))))
                xtest_remove.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply (10)).mul (xsize))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xl).xremove)).apply (10))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xl).xappend)).apply (5))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((2.neg)))))) ((((unsupported)).apply (10) (5))))
                        bogusForceDataize.write ((((xl).xremove)).apply (5))
                        (((unsupported)).apply ((xsize)) (1))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((2.neg)))))) ((((unsupported)).apply (10) (10))))
                xtest_reverse.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xl).xreverse)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((5.neg)))))) ((((unsupported)).apply (5) (4) (3) (2) (1))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (5))))) ((((unsupported)).apply (5) (4) (3) (2) (1))))
                xtest_sort.write
                  [xself xsize]
                    memory > xl
                    seq > @
                      (((unsupported)).apply)
                        xl.write ((((unsupported)).apply (1) (2) (3) (4) (5)).mul (xsize))
                        bogusForceDataize.write ((((xl).xsort)).apply)
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xlen)).apply ((xl)))) (((xsize).mul 5)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply (((((xl).xcount)).apply (1))) ((xsize)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply (10))))) (((((unsupported)).apply (1)).mul 10)))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xl)) ((((unsupported)).apply ((10.neg)))))) (((((unsupported)).apply (5)).mul 10)))
            xtest_main.write
              []
                seq > @
                  bogusForceDataize.write ((((xsupport).xrun_unittest)).apply ((xStrTest)) ((xBytesTest)) ((xBytearrayTest)) ((xTupleTest)) ((xListTest)))
            ((x__name__).eq "__main__").if
              seq
                ((((xlen)).apply (((xsys).xargv))).greater 1).if
                  bogusForceDataize.write ((((xsupport).xset_memlimit)).apply ((((unsupported)).apply (((xsys).xargv)) (1))))
                bogusForceDataize.write (((xtest_main)).apply)