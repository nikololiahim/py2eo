memory > xrepeated_text
memory > xRepeat
memory > xconnection
memory > xnone_value
memory > xValue
memory > xfunction
memory > xa
memory > xLength
memory > xValueError
memory > xTestCase
memory > xAuthor
[] > test_repeat
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_basic
        memory > xtest_negative_number
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_basic.write
                  [xself]
                    memory > xauthors
                    memory > xnone_value2
                    memory > xtests
                    seq > @
                      seq
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("John") ("xyz"))
                        xnone_value2.write ((((xconnection).xfeatures).xinterprets_empty_strings_as_nulls).if "" "None: is there a None literal in the EO language?")
                        xtests.write (((unsupported)).apply ((((unsupported)).apply ((((xRepeat)).apply ("name") (0))) (""))) ((((unsupported)).apply ((((xRepeat)).apply ("name") (2))) ("JohnJohn"))) ((((unsupported)).apply ((((xRepeat)).apply ("name") ((((xLength)).apply ("alias"))))) ("JohnJohnJohn"))) ((((unsupported)).apply ((((xRepeat)).apply ((((xValue)).apply ("x"))) (3))) ("xxx"))) ((((unsupported)).apply ((((xRepeat)).apply ("name") ("None: is there a None literal in the EO language?"))) ((xnone_value)))) ((((unsupported)).apply ((((xRepeat)).apply ((((xValue)).apply ("None: is there a None literal in the EO language?"))) (4))) ((xnone_value)))) ((((unsupported)).apply ((((xRepeat)).apply ("goes_by") (1))) ((xnone_value)))))
                        (((unsupported)).apply ((((unsupported)).apply ((xfunction)) ((xrepeated_text)))) ((xtests)))
                          (((unsupported)).apply ((((unsupported)).apply (((xself).xsubTest)) ((xfunction)))))
                            seq
                              xauthors.write (((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((xfunction)))
                              (((unsupported)).apply (((xself).xassertQuerysetEqual)) ((xauthors)) ((((unsupported)).apply ((xrepeated_text)))) ((((unsupported)).apply (((xa).xrepeated_text)))) (FALSE))
                xtest_negative_number.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("'number' must be greater or equal to 0."))))
                        bogusForceDataize.write (((xRepeat)).apply ("name") ((1.neg)))