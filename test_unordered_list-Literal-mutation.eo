memory > xgettext_lazy
memory > xunordered_list
memory > xmark_safe
memory > xSimpleTestCase
memory > xULItem
memory > xstr
[] > test_unordered_list
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_nested2
        memory > xtest_ulitem
        memory > xtest_ulitem_autoescape_off
        memory > xtest_unordered_list04
        memory > xtest_unordered_list01
        memory > xtest_unordered_list05
        memory > xtest_nested
        memory > xtest_unordered_list03
        memory > xtest_nested3
        memory > xtest_list
        memory > xtest_unordered_list02
        memory > xtest_nested_multiple2
        memory > xtest_list_gettext
        memory > xtest_nested_multiple
        memory > xtest_nested_generators
        memory > xtest_autoescape_off
        memory > xtest_autoescape
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_unordered_list01.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("unordered_list01") ((((unsupported)).apply ("a") ((((unsupported)).apply ("x>") ((((unsupported)).apply ("<y"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("t<li>x&gt;nt<ul>ntt<li>&lt;y</li>nt</ul>nt</li>"))
                xtest_unordered_list02.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("unordered_list02") ((((unsupported)).apply ("a") ((((unsupported)).apply ("x>") ((((unsupported)).apply ("<y"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("t<li>x>nt<ul>ntt<li><y</li>nt</ul>nt</li>"))
                xtest_unordered_list03.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("unordered_list03") ((((unsupported)).apply ("a") ((((unsupported)).apply ("x>") ((((unsupported)).apply ((((xmark_safe)).apply ("<y"))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("t<li>x&gt;nt<ul>ntt<li><y</li>nt</ul>nt</li>"))
                xtest_unordered_list04.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("unordered_list04") ((((unsupported)).apply ("a") ((((unsupported)).apply ("x>") ((((unsupported)).apply ((((xmark_safe)).apply ("<y"))))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("t<li>x>nt<ul>ntt<li><y</li>nt</ul>nt</li>"))
                xtest_unordered_list05.write
                  [xself]
                    memory > xoutput
                    seq > @
                      (((unsupported)).apply)
                        xoutput.write (((((xself).xengine).xrender_to_string)).apply ("unordered_list05") ((((unsupported)).apply ("a") ((((unsupported)).apply ("x>") ((((unsupported)).apply ("<y"))))))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((xoutput)) ("t<li>x>nt<ul>ntt<li><y</li>nt</ul>nt</li>"))
            (((unsupported)).apply ((xSimpleTestCase)))
              seq
                xtest_list.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((unsupported)).apply ("item 1") ("item 2"))))) ("t<li>item 1</li>nt<li>item 2</li>"))
                xtest_list_gettext.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((unsupported)).apply ("item 1") ((((xgettext_lazy)).apply ("item 2"))))))) ("t<li>item 1</li>nt<li>item 2</li>"))
                xtest_nested.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((unsupported)).apply ("item 1") ((((unsupported)).apply ("item 1.1"))))))) ("t<li>item 1nt<ul>ntt<li>item 1.1</li>nt</ul>nt</li>"))
                xtest_nested2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((unsupported)).apply ("item 1") ((((unsupported)).apply ("item 1.1") ("item1.2"))) ("item 2"))))) ("t<li>item 1nt<ul>ntt<li>item 1.1</li>ntt<li>item1.2</li>nt</ul>nt</li>nt<li>item 2</li>"))
                xtest_nested3.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((unsupported)).apply ("item 1") ("item 2") ((((unsupported)).apply ("item 2.1"))))))) ("t<li>item 1</li>nt<li>item 2nt<ul>ntt<li>item 2.1</li>nt</ul>nt</li>"))
                xtest_nested_multiple.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((unsupported)).apply ("item 1") ((((unsupported)).apply ("item 1.1") ((((unsupported)).apply ("item 1.1.1") ((((unsupported)).apply ("item 1.1.1.1"))))))))))) ("t<li>item 1nt<ul>ntt<li>item 1.1ntt<ul>nttt<li>item 1.1.1nttt<ul>ntttt<li>item 1.1.1.1</li>nttt</ul>nttt</li>ntt</ul>ntt</li>nt</ul>nt</li>"))
                xtest_nested_multiple2.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((unsupported)).apply ("States") ((((unsupported)).apply ("Kansas") ((((unsupported)).apply ("Lawrence") ("Topeka"))) ("Illinois"))))))) ("t<li>Statesnt<ul>ntt<li>Kansasntt<ul>nttt<li>Lawrence</li>nttt<li>Topeka</li>ntt</ul>ntt</li>ntt<li>Illinois</li>nt</ul>nt</li>"))
                xtest_autoescape.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((unsupported)).apply ("<a>item 1</a>") ("item 2"))))) ("t<li>&lt;a&gt;item 1&lt;/a&gt;</li>nt<li>item 2</li>"))
                xtest_autoescape_off.write
                  [xself]
                    seq > @
                      bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xunordered_list)) ((((unsupported)).apply ("<a>item 1</a>") ("item 2"))) (FALSE))) ("t<li><a>item 1</a></li>nt<li>item 2</li>"))
                xtest_ulitem.write
                  [xself]
                    memory > x__str__
                    memory > xc
                    memory > xb
                    memory > xitem_generator
                    memory > x__init__
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xtitle]
                                seq > @
                                  (((unsupported)).apply (((xself).xtitle)) ((xtitle)))
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (("ulitem-%s".mod (((xstr)).apply (((xself).xtitle))))))
                        xa.write (((xULItem)).apply ("a"))
                        xb.write (((xULItem)).apply ("b"))
                        xc.write (((xULItem)).apply ("<a>c</a>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((unsupported)).apply ((xa)) ((xb)) ((xc)))))) ("t<li>ulitem-a</li>nt<li>ulitem-b</li>nt<li>ulitem-&lt;a&gt;c&lt;/a&gt;</li>"))
                        xitem_generator.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)) ((xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((xitem_generator)).apply)))) ("t<li>ulitem-a</li>nt<li>ulitem-b</li>nt<li>ulitem-&lt;a&gt;c&lt;/a&gt;</li>"))
                xtest_nested_generators.write
                  [xself]
                    memory > xitem_generator
                    memory > xinner_generator
                    seq > @
                      seq
                        xinner_generator.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ("B") ("C"))))
                        xitem_generator.write
                          []
                            seq > @
                              seq
                                (((unsupported)).apply ("A"))
                                (((unsupported)).apply ((((xinner_generator)).apply)))
                                (((unsupported)).apply ("D"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((xunordered_list)).apply ((((xitem_generator)).apply)))) ("t<li>Ant<ul>ntt<li>B</li>ntt<li>C</li>nt</ul>nt</li>nt<li>D</li>"))
                xtest_ulitem_autoescape_off.write
                  [xself]
                    memory > x__str__
                    memory > xc
                    memory > xb
                    memory > xitem_generator
                    memory > x__init__
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply)
                          seq
                            x__init__.write
                              [xself xtitle]
                                seq > @
                                  (((unsupported)).apply (((xself).xtitle)) ((xtitle)))
                            x__str__.write
                              [xself]
                                seq > @
                                  (((unsupported)).apply (("ulitem-%s".mod (((xstr)).apply (((xself).xtitle))))))
                        xa.write (((xULItem)).apply ("a"))
                        xb.write (((xULItem)).apply ("b"))
                        xc.write (((xULItem)).apply ("<a>c</a>"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xunordered_list)) ((((unsupported)).apply ((xa)) ((xb)) ((xc)))) (FALSE))) ("t<li>ulitem-a</li>nt<li>ulitem-b</li>nt<li>ulitem-<a>c</a></li>"))
                        xitem_generator.write
                          []
                            seq > @
                              (((unsupported)).apply ((((unsupported)).apply ((xa)) ((xb)) ((xc)))))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply ((xunordered_list)) ((((xitem_generator)).apply)) (FALSE))) ("t<li>ulitem-a</li>nt<li>ulitem-b</li>nt<li>ulitem-<a>c</a></li>"))