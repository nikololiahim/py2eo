memory > xValueError
memory > xUpper
memory > xSubstr
memory > xa
memory > xTestCase
memory > xAuthor
memory > xStrIndex
memory > xLower
[] > test_substr
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest_basic
        memory > xV
        memory > xtest_expressions
        memory > xtest_pos_gt_zero
        memory > xtest_start
        seq > @
          seq
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply)
            (((unsupported)).apply ((xTestCase)))
              seq
                xtest_basic.write
                  [xself]
                    memory > xauthors
                    seq > @
                      seq
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("John Smith") ("smithj"))
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("Rhonda"))
                        xauthors.write (((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xSubstr)).apply ("name") (5) (3))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((xauthors).xorder_by)).apply ("name"))) ((((unsupported)).apply (" Sm") ("da"))) ((((unsupported)).apply (((xa).xname_part)))))
                        xauthors.write (((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xSubstr)).apply ("name") (2))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((xauthors).xorder_by)).apply ("name"))) ((((unsupported)).apply ("ohn Smith") ("honda"))) ((((unsupported)).apply (((xa).xname_part)))))
                        (((unsupported)).apply (((((unsupported)).apply ((((xAuthor).xobjects).xfilter)) (TRUE)).xupdate)) ((((xLower)).apply ((((xSubstr)).apply ("name") (1) (5))))))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((xauthors).xorder_by)).apply ("name"))) ((((unsupported)).apply ("smithj") ("rhond"))) ((((unsupported)).apply (((xa).xalias)))))
                xtest_start.write
                  [xself]
                    memory > xa
                    seq > @
                      seq
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("John Smith") ("smithj"))
                        xa.write (((unsupported)).apply (((((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xSubstr)).apply ("name") (1))) ((((xSubstr)).apply ("name") (2)))).xget)) ("smithj"))
                        bogusForceDataize.write ((((xself).xassertEqual)).apply ((((unsupported)).apply (((xa).xname_part_1)) ((((unsupported)).apply (1))))) (((xa).xname_part_2)))
                xtest_pos_gt_zero.write
                  [xself]
                    seq > @
                      (((unsupported)).apply (((((xself).xassertRaisesMessage)).apply ((xValueError)) ("'pos' must be greater than 0"))))
                        (((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((((xSubstr)).apply ("name") (0))))
                xtest_expressions.write
                  [xself]
                    memory > xauthors
                    memory > xsubstr
                    seq > @
                      seq
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("John Smith") ("smithj"))
                        (((unsupported)).apply ((((xAuthor).xobjects).xcreate)) ("Rhonda"))
                        xsubstr.write (((xSubstr)).apply ((((xUpper)).apply ("name"))) ((((xStrIndex)).apply ("name") ((((xV)).apply ("h"))))) (5))
                        xauthors.write (((unsupported)).apply ((((xAuthor).xobjects).xannotate)) ((xsubstr)))
                        bogusForceDataize.write ((((xself).xassertQuerysetEqual)).apply (((((xauthors).xorder_by)).apply ("name"))) ((((unsupported)).apply ("HN SM") ("HONDA"))) ((((unsupported)).apply (((xa).xname_part)))))